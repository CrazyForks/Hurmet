// ::- Persistent data structure representing an ordered mapping from
// strings to values, with some convenient update methods.
function OrderedMap(content) {
  this.content = content;
}

OrderedMap.prototype = {
  constructor: OrderedMap,

  find: function(key) {
    for (var i = 0; i < this.content.length; i += 2)
      if (this.content[i] === key) return i
    return -1
  },

  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(key) {
    var found = this.find(key);
    return found == -1 ? undefined : this.content[found + 1]
  },

  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(key, value, newKey) {
    var self = newKey && newKey != key ? this.remove(newKey) : this;
    var found = self.find(key), content = self.content.slice();
    if (found == -1) {
      content.push(newKey || key, value);
    } else {
      content[found + 1] = value;
      if (newKey) content[found] = newKey;
    }
    return new OrderedMap(content)
  },

  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(key) {
    var found = this.find(key);
    if (found == -1) return this
    var content = this.content.slice();
    content.splice(found, 2);
    return new OrderedMap(content)
  },

  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(key, value) {
    return new OrderedMap([key, value].concat(this.remove(key).content))
  },

  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(key, value) {
    var content = this.remove(key).content.slice();
    content.push(key, value);
    return new OrderedMap(content)
  },

  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(place, key, value) {
    var without = this.remove(key), content = without.content.slice();
    var found = without.find(place);
    content.splice(found == -1 ? content.length : found, 0, key, value);
    return new OrderedMap(content)
  },

  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(f) {
    for (var i = 0; i < this.content.length; i += 2)
      f(this.content[i], this.content[i + 1]);
  },

  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(map) {
    map = OrderedMap.from(map);
    if (!map.size) return this
    return new OrderedMap(map.content.concat(this.subtract(map).content))
  },

  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(map) {
    map = OrderedMap.from(map);
    if (!map.size) return this
    return new OrderedMap(this.subtract(map).content.concat(map.content))
  },

  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(map) {
    var result = this;
    map = OrderedMap.from(map);
    for (var i = 0; i < map.content.length; i += 2)
      result = result.remove(map.content[i]);
    return result
  },

  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var result = {};
    this.forEach(function(key, value) { result[key] = value; });
    return result
  },

  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1
  }
};

// :: (?union<Object, OrderedMap>) → OrderedMap
// Return a map with the given content. If null, create an empty
// map. If given an ordered map, return that map itself. If given an
// object, create a map from the object's properties.
OrderedMap.from = function(value) {
  if (value instanceof OrderedMap) return value
  var content = [];
  if (value) for (var prop in value) content.push(prop, value[prop]);
  return new OrderedMap(content)
};

function findDiffStart(a, b, pos) {
    for (let i = 0;; i++) {
        if (i == a.childCount || i == b.childCount)
            return a.childCount == b.childCount ? null : pos;
        let childA = a.child(i), childB = b.child(i);
        if (childA == childB) {
            pos += childA.nodeSize;
            continue;
        }
        if (!childA.sameMarkup(childB))
            return pos;
        if (childA.isText && childA.text != childB.text) {
            for (let j = 0; childA.text[j] == childB.text[j]; j++)
                pos++;
            return pos;
        }
        if (childA.content.size || childB.content.size) {
            let inner = findDiffStart(childA.content, childB.content, pos + 1);
            if (inner != null)
                return inner;
        }
        pos += childA.nodeSize;
    }
}
function findDiffEnd(a, b, posA, posB) {
    for (let iA = a.childCount, iB = b.childCount;;) {
        if (iA == 0 || iB == 0)
            return iA == iB ? null : { a: posA, b: posB };
        let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
        if (childA == childB) {
            posA -= size;
            posB -= size;
            continue;
        }
        if (!childA.sameMarkup(childB))
            return { a: posA, b: posB };
        if (childA.isText && childA.text != childB.text) {
            let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
            while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                same++;
                posA--;
                posB--;
            }
            return { a: posA, b: posB };
        }
        if (childA.content.size || childB.content.size) {
            let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
            if (inner)
                return inner;
        }
        posA -= size;
        posB -= size;
    }
}

/**
A fragment represents a node's collection of child nodes.

Like nodes, fragments are persistent data structures, and you
should not mutate them or their content. Rather, you create new
instances whenever needed. The API tries to make this easy.
*/
class Fragment {
    /**
    @internal
    */
    constructor(
    /**
    @internal
    */
    content, size) {
        this.content = content;
        this.size = size || 0;
        if (size == null)
            for (let i = 0; i < content.length; i++)
                this.size += content[i].nodeSize;
    }
    /**
    Invoke a callback for all descendant nodes between the given two
    positions (relative to start of this fragment). Doesn't descend
    into a node when the callback returns `false`.
    */
    nodesBetween(from, to, f, nodeStart = 0, parent) {
        for (let i = 0, pos = 0; pos < to; i++) {
            let child = this.content[i], end = pos + child.nodeSize;
            if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
                let start = pos + 1;
                child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
            }
            pos = end;
        }
    }
    /**
    Call the given callback for every descendant node. `pos` will be
    relative to the start of the fragment. The callback may return
    `false` to prevent traversal of a given node's children.
    */
    descendants(f) {
        this.nodesBetween(0, this.size, f);
    }
    /**
    Extract the text between `from` and `to`. See the same method on
    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
    */
    textBetween(from, to, blockSeparator, leafText) {
        let text = "", first = true;
        this.nodesBetween(from, to, (node, pos) => {
            let nodeText = node.isText ? node.text.slice(Math.max(from, pos) - pos, to - pos)
                : !node.isLeaf ? ""
                    : leafText ? (typeof leafText === "function" ? leafText(node) : leafText)
                        : node.type.spec.leafText ? node.type.spec.leafText(node)
                            : "";
            if (node.isBlock && (node.isLeaf && nodeText || node.isTextblock) && blockSeparator) {
                if (first)
                    first = false;
                else
                    text += blockSeparator;
            }
            text += nodeText;
        }, 0);
        return text;
    }
    /**
    Create a new fragment containing the combined content of this
    fragment and the other.
    */
    append(other) {
        if (!other.size)
            return this;
        if (!this.size)
            return other;
        let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
        if (last.isText && last.sameMarkup(first)) {
            content[content.length - 1] = last.withText(last.text + first.text);
            i = 1;
        }
        for (; i < other.content.length; i++)
            content.push(other.content[i]);
        return new Fragment(content, this.size + other.size);
    }
    /**
    Cut out the sub-fragment between the two given positions.
    */
    cut(from, to = this.size) {
        if (from == 0 && to == this.size)
            return this;
        let result = [], size = 0;
        if (to > from)
            for (let i = 0, pos = 0; pos < to; i++) {
                let child = this.content[i], end = pos + child.nodeSize;
                if (end > from) {
                    if (pos < from || end > to) {
                        if (child.isText)
                            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                        else
                            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                    }
                    result.push(child);
                    size += child.nodeSize;
                }
                pos = end;
            }
        return new Fragment(result, size);
    }
    /**
    @internal
    */
    cutByIndex(from, to) {
        if (from == to)
            return Fragment.empty;
        if (from == 0 && to == this.content.length)
            return this;
        return new Fragment(this.content.slice(from, to));
    }
    /**
    Create a new fragment in which the node at the given index is
    replaced by the given node.
    */
    replaceChild(index, node) {
        let current = this.content[index];
        if (current == node)
            return this;
        let copy = this.content.slice();
        let size = this.size + node.nodeSize - current.nodeSize;
        copy[index] = node;
        return new Fragment(copy, size);
    }
    /**
    Create a new fragment by prepending the given node to this
    fragment.
    */
    addToStart(node) {
        return new Fragment([node].concat(this.content), this.size + node.nodeSize);
    }
    /**
    Create a new fragment by appending the given node to this
    fragment.
    */
    addToEnd(node) {
        return new Fragment(this.content.concat(node), this.size + node.nodeSize);
    }
    /**
    Compare this fragment to another one.
    */
    eq(other) {
        if (this.content.length != other.content.length)
            return false;
        for (let i = 0; i < this.content.length; i++)
            if (!this.content[i].eq(other.content[i]))
                return false;
        return true;
    }
    /**
    The first child of the fragment, or `null` if it is empty.
    */
    get firstChild() { return this.content.length ? this.content[0] : null; }
    /**
    The last child of the fragment, or `null` if it is empty.
    */
    get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }
    /**
    The number of child nodes in this fragment.
    */
    get childCount() { return this.content.length; }
    /**
    Get the child node at the given index. Raise an error when the
    index is out of range.
    */
    child(index) {
        let found = this.content[index];
        if (!found)
            throw new RangeError("Index " + index + " out of range for " + this);
        return found;
    }
    /**
    Get the child node at the given index, if it exists.
    */
    maybeChild(index) {
        return this.content[index] || null;
    }
    /**
    Call `f` for every child node, passing the node, its offset
    into this parent node, and its index.
    */
    forEach(f) {
        for (let i = 0, p = 0; i < this.content.length; i++) {
            let child = this.content[i];
            f(child, p, i);
            p += child.nodeSize;
        }
    }
    /**
    Find the first position at which this fragment and another
    fragment differ, or `null` if they are the same.
    */
    findDiffStart(other, pos = 0) {
        return findDiffStart(this, other, pos);
    }
    /**
    Find the first position, searching from the end, at which this
    fragment and the given fragment differ, or `null` if they are
    the same. Since this position will not be the same in both
    nodes, an object with two separate positions is returned.
    */
    findDiffEnd(other, pos = this.size, otherPos = other.size) {
        return findDiffEnd(this, other, pos, otherPos);
    }
    /**
    Find the index and inner offset corresponding to a given relative
    position in this fragment. The result object will be reused
    (overwritten) the next time the function is called. @internal
    */
    findIndex(pos, round = -1) {
        if (pos == 0)
            return retIndex(0, pos);
        if (pos == this.size)
            return retIndex(this.content.length, pos);
        if (pos > this.size || pos < 0)
            throw new RangeError(`Position ${pos} outside of fragment (${this})`);
        for (let i = 0, curPos = 0;; i++) {
            let cur = this.child(i), end = curPos + cur.nodeSize;
            if (end >= pos) {
                if (end == pos || round > 0)
                    return retIndex(i + 1, end);
                return retIndex(i, curPos);
            }
            curPos = end;
        }
    }
    /**
    Return a debugging string that describes this fragment.
    */
    toString() { return "<" + this.toStringInner() + ">"; }
    /**
    @internal
    */
    toStringInner() { return this.content.join(", "); }
    /**
    Create a JSON-serializeable representation of this fragment.
    */
    toJSON() {
        return this.content.length ? this.content.map(n => n.toJSON()) : null;
    }
    /**
    Deserialize a fragment from its JSON representation.
    */
    static fromJSON(schema, value) {
        if (!value)
            return Fragment.empty;
        if (!Array.isArray(value))
            throw new RangeError("Invalid input for Fragment.fromJSON");
        return new Fragment(value.map(schema.nodeFromJSON));
    }
    /**
    Build a fragment from an array of nodes. Ensures that adjacent
    text nodes with the same marks are joined together.
    */
    static fromArray(array) {
        if (!array.length)
            return Fragment.empty;
        let joined, size = 0;
        for (let i = 0; i < array.length; i++) {
            let node = array[i];
            size += node.nodeSize;
            if (i && node.isText && array[i - 1].sameMarkup(node)) {
                if (!joined)
                    joined = array.slice(0, i);
                joined[joined.length - 1] = node
                    .withText(joined[joined.length - 1].text + node.text);
            }
            else if (joined) {
                joined.push(node);
            }
        }
        return new Fragment(joined || array, size);
    }
    /**
    Create a fragment from something that can be interpreted as a
    set of nodes. For `null`, it returns the empty fragment. For a
    fragment, the fragment itself. For a node or array of nodes, a
    fragment containing those nodes.
    */
    static from(nodes) {
        if (!nodes)
            return Fragment.empty;
        if (nodes instanceof Fragment)
            return nodes;
        if (Array.isArray(nodes))
            return this.fromArray(nodes);
        if (nodes.attrs)
            return new Fragment([nodes], nodes.nodeSize);
        throw new RangeError("Can not convert " + nodes + " to a Fragment" +
            (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
    }
}
/**
An empty fragment. Intended to be reused whenever a node doesn't
contain anything (rather than allocating a new empty fragment for
each leaf node).
*/
Fragment.empty = new Fragment([], 0);
const found = { index: 0, offset: 0 };
function retIndex(index, offset) {
    found.index = index;
    found.offset = offset;
    return found;
}

function compareDeep(a, b) {
    if (a === b)
        return true;
    if (!(a && typeof a == "object") ||
        !(b && typeof b == "object"))
        return false;
    let array = Array.isArray(a);
    if (Array.isArray(b) != array)
        return false;
    if (array) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compareDeep(a[i], b[i]))
                return false;
    }
    else {
        for (let p in a)
            if (!(p in b) || !compareDeep(a[p], b[p]))
                return false;
        for (let p in b)
            if (!(p in a))
                return false;
    }
    return true;
}

/**
A mark is a piece of information that can be attached to a node,
such as it being emphasized, in code font, or a link. It has a
type and optionally a set of attributes that provide further
information (such as the target of the link). Marks are created
through a `Schema`, which controls which types exist and which
attributes they have.
*/
class Mark {
    /**
    @internal
    */
    constructor(
    /**
    The type of this mark.
    */
    type, 
    /**
    The attributes associated with this mark.
    */
    attrs) {
        this.type = type;
        this.attrs = attrs;
    }
    /**
    Given a set of marks, create a new set which contains this one as
    well, in the right position. If this mark is already in the set,
    the set itself is returned. If any marks that are set to be
    [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
    those are replaced by this one.
    */
    addToSet(set) {
        let copy, placed = false;
        for (let i = 0; i < set.length; i++) {
            let other = set[i];
            if (this.eq(other))
                return set;
            if (this.type.excludes(other.type)) {
                if (!copy)
                    copy = set.slice(0, i);
            }
            else if (other.type.excludes(this.type)) {
                return set;
            }
            else {
                if (!placed && other.type.rank > this.type.rank) {
                    if (!copy)
                        copy = set.slice(0, i);
                    copy.push(this);
                    placed = true;
                }
                if (copy)
                    copy.push(other);
            }
        }
        if (!copy)
            copy = set.slice();
        if (!placed)
            copy.push(this);
        return copy;
    }
    /**
    Remove this mark from the given set, returning a new set. If this
    mark is not in the set, the set itself is returned.
    */
    removeFromSet(set) {
        for (let i = 0; i < set.length; i++)
            if (this.eq(set[i]))
                return set.slice(0, i).concat(set.slice(i + 1));
        return set;
    }
    /**
    Test whether this mark is in the given set of marks.
    */
    isInSet(set) {
        for (let i = 0; i < set.length; i++)
            if (this.eq(set[i]))
                return true;
        return false;
    }
    /**
    Test whether this mark has the same type and attributes as
    another mark.
    */
    eq(other) {
        return this == other ||
            (this.type == other.type && compareDeep(this.attrs, other.attrs));
    }
    /**
    Convert this mark to a JSON-serializeable representation.
    */
    toJSON() {
        let obj = { type: this.type.name };
        for (let _ in this.attrs) {
            obj.attrs = this.attrs;
            break;
        }
        return obj;
    }
    /**
    Deserialize a mark from JSON.
    */
    static fromJSON(schema, json) {
        if (!json)
            throw new RangeError("Invalid input for Mark.fromJSON");
        let type = schema.marks[json.type];
        if (!type)
            throw new RangeError(`There is no mark type ${json.type} in this schema`);
        let mark = type.create(json.attrs);
        type.checkAttrs(mark.attrs);
        return mark;
    }
    /**
    Test whether two sets of marks are identical.
    */
    static sameSet(a, b) {
        if (a == b)
            return true;
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].eq(b[i]))
                return false;
        return true;
    }
    /**
    Create a properly sorted mark set from null, a single mark, or an
    unsorted array of marks.
    */
    static setFrom(marks) {
        if (!marks || Array.isArray(marks) && marks.length == 0)
            return Mark.none;
        if (marks instanceof Mark)
            return [marks];
        let copy = marks.slice();
        copy.sort((a, b) => a.type.rank - b.type.rank);
        return copy;
    }
}
/**
The empty set of marks.
*/
Mark.none = [];

/**
Error type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when
given an invalid replacement.
*/
class ReplaceError extends Error {
}
/*
ReplaceError = function(this: any, message: string) {
  let err = Error.call(this, message)
  ;(err as any).__proto__ = ReplaceError.prototype
  return err
} as any

ReplaceError.prototype = Object.create(Error.prototype)
ReplaceError.prototype.constructor = ReplaceError
ReplaceError.prototype.name = "ReplaceError"
*/
/**
A slice represents a piece cut out of a larger document. It
stores not only a fragment, but also the depth up to which nodes on
both side are ‘open’ (cut through).
*/
class Slice {
    /**
    Create a slice. When specifying a non-zero open depth, you must
    make sure that there are nodes of at least that depth at the
    appropriate side of the fragment—i.e. if the fragment is an
    empty paragraph node, `openStart` and `openEnd` can't be greater
    than 1.
    
    It is not necessary for the content of open nodes to conform to
    the schema's content constraints, though it should be a valid
    start/end/middle for such a node, depending on which sides are
    open.
    */
    constructor(
    /**
    The slice's content.
    */
    content, 
    /**
    The open depth at the start of the fragment.
    */
    openStart, 
    /**
    The open depth at the end.
    */
    openEnd) {
        this.content = content;
        this.openStart = openStart;
        this.openEnd = openEnd;
    }
    /**
    The size this slice would add when inserted into a document.
    */
    get size() {
        return this.content.size - this.openStart - this.openEnd;
    }
    /**
    @internal
    */
    insertAt(pos, fragment) {
        let content = insertInto(this.content, pos + this.openStart, fragment);
        return content && new Slice(content, this.openStart, this.openEnd);
    }
    /**
    @internal
    */
    removeBetween(from, to) {
        return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
    }
    /**
    Tests whether this slice is equal to another slice.
    */
    eq(other) {
        return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
    }
    /**
    @internal
    */
    toString() {
        return this.content + "(" + this.openStart + "," + this.openEnd + ")";
    }
    /**
    Convert a slice to a JSON-serializable representation.
    */
    toJSON() {
        if (!this.content.size)
            return null;
        let json = { content: this.content.toJSON() };
        if (this.openStart > 0)
            json.openStart = this.openStart;
        if (this.openEnd > 0)
            json.openEnd = this.openEnd;
        return json;
    }
    /**
    Deserialize a slice from its JSON representation.
    */
    static fromJSON(schema, json) {
        if (!json)
            return Slice.empty;
        let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
        if (typeof openStart != "number" || typeof openEnd != "number")
            throw new RangeError("Invalid input for Slice.fromJSON");
        return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
    }
    /**
    Create a slice from a fragment by taking the maximum possible
    open value on both side of the fragment.
    */
    static maxOpen(fragment, openIsolating = true) {
        let openStart = 0, openEnd = 0;
        for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
            openStart++;
        for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
            openEnd++;
        return new Slice(fragment, openStart, openEnd);
    }
}
/**
The empty slice.
*/
Slice.empty = new Slice(Fragment.empty, 0, 0);
function removeRange(content, from, to) {
    let { index, offset } = content.findIndex(from), child = content.maybeChild(index);
    let { index: indexTo, offset: offsetTo } = content.findIndex(to);
    if (offset == from || child.isText) {
        if (offsetTo != to && !content.child(indexTo).isText)
            throw new RangeError("Removing non-flat range");
        return content.cut(0, from).append(content.cut(to));
    }
    if (index != indexTo)
        throw new RangeError("Removing non-flat range");
    return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
}
function insertInto(content, dist, insert, parent) {
    let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
    if (offset == dist || child.isText) {
        return content.cut(0, dist).append(insert).append(content.cut(dist));
    }
    let inner = insertInto(child.content, dist - offset - 1, insert);
    return inner && content.replaceChild(index, child.copy(inner));
}
function replace($from, $to, slice) {
    if (slice.openStart > $from.depth)
        throw new ReplaceError("Inserted content deeper than insertion position");
    if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
        throw new ReplaceError("Inconsistent open depths");
    return replaceOuter($from, $to, slice, 0);
}
function replaceOuter($from, $to, slice, depth) {
    let index = $from.index(depth), node = $from.node(depth);
    if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
        let inner = replaceOuter($from, $to, slice, depth + 1);
        return node.copy(node.content.replaceChild(index, inner));
    }
    else if (!slice.content.size) {
        return close$1(node, replaceTwoWay($from, $to, depth));
    }
    else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
        let parent = $from.parent, content = parent.content;
        return close$1(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
    }
    else {
        let { start, end } = prepareSliceForReplace(slice, $from);
        return close$1(node, replaceThreeWay($from, start, end, $to, depth));
    }
}
function checkJoin(main, sub) {
    if (!sub.type.compatibleContent(main.type))
        throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
}
function joinable$1($before, $after, depth) {
    let node = $before.node(depth);
    checkJoin(node, $after.node(depth));
    return node;
}
function addNode(child, target) {
    let last = target.length - 1;
    if (last >= 0 && child.isText && child.sameMarkup(target[last]))
        target[last] = child.withText(target[last].text + child.text);
    else
        target.push(child);
}
function addRange($start, $end, depth, target) {
    let node = ($end || $start).node(depth);
    let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
    if ($start) {
        startIndex = $start.index(depth);
        if ($start.depth > depth) {
            startIndex++;
        }
        else if ($start.textOffset) {
            addNode($start.nodeAfter, target);
            startIndex++;
        }
    }
    for (let i = startIndex; i < endIndex; i++)
        addNode(node.child(i), target);
    if ($end && $end.depth == depth && $end.textOffset)
        addNode($end.nodeBefore, target);
}
function close$1(node, content) {
    node.type.checkContent(content);
    return node.copy(content);
}
function replaceThreeWay($from, $start, $end, $to, depth) {
    let openStart = $from.depth > depth && joinable$1($from, $start, depth + 1);
    let openEnd = $to.depth > depth && joinable$1($end, $to, depth + 1);
    let content = [];
    addRange(null, $from, depth, content);
    if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
        checkJoin(openStart, openEnd);
        addNode(close$1(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
    }
    else {
        if (openStart)
            addNode(close$1(openStart, replaceTwoWay($from, $start, depth + 1)), content);
        addRange($start, $end, depth, content);
        if (openEnd)
            addNode(close$1(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
    }
    addRange($to, null, depth, content);
    return new Fragment(content);
}
function replaceTwoWay($from, $to, depth) {
    let content = [];
    addRange(null, $from, depth, content);
    if ($from.depth > depth) {
        let type = joinable$1($from, $to, depth + 1);
        addNode(close$1(type, replaceTwoWay($from, $to, depth + 1)), content);
    }
    addRange($to, null, depth, content);
    return new Fragment(content);
}
function prepareSliceForReplace(slice, $along) {
    let extra = $along.depth - slice.openStart, parent = $along.node(extra);
    let node = parent.copy(slice.content);
    for (let i = extra - 1; i >= 0; i--)
        node = $along.node(i).copy(Fragment.from(node));
    return { start: node.resolveNoCache(slice.openStart + extra),
        end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
}

/**
You can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more
information about it. Objects of this class represent such a
resolved position, providing various pieces of context
information, and some helper methods.

Throughout this interface, methods that take an optional `depth`
parameter will interpret undefined as `this.depth` and negative
numbers as `this.depth + value`.
*/
class ResolvedPos {
    /**
    @internal
    */
    constructor(
    /**
    The position that was resolved.
    */
    pos, 
    /**
    @internal
    */
    path, 
    /**
    The offset this position has into its parent node.
    */
    parentOffset) {
        this.pos = pos;
        this.path = path;
        this.parentOffset = parentOffset;
        this.depth = path.length / 3 - 1;
    }
    /**
    @internal
    */
    resolveDepth(val) {
        if (val == null)
            return this.depth;
        if (val < 0)
            return this.depth + val;
        return val;
    }
    /**
    The parent node that the position points into. Note that even if
    a position points into a text node, that node is not considered
    the parent—text nodes are ‘flat’ in this model, and have no content.
    */
    get parent() { return this.node(this.depth); }
    /**
    The root node in which the position was resolved.
    */
    get doc() { return this.node(0); }
    /**
    The ancestor node at the given level. `p.node(p.depth)` is the
    same as `p.parent`.
    */
    node(depth) { return this.path[this.resolveDepth(depth) * 3]; }
    /**
    The index into the ancestor at the given level. If this points
    at the 3rd node in the 2nd paragraph on the top level, for
    example, `p.index(0)` is 1 and `p.index(1)` is 2.
    */
    index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }
    /**
    The index pointing after this position into the ancestor at the
    given level.
    */
    indexAfter(depth) {
        depth = this.resolveDepth(depth);
        return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
    }
    /**
    The (absolute) position at the start of the node at the given
    level.
    */
    start(depth) {
        depth = this.resolveDepth(depth);
        return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    }
    /**
    The (absolute) position at the end of the node at the given
    level.
    */
    end(depth) {
        depth = this.resolveDepth(depth);
        return this.start(depth) + this.node(depth).content.size;
    }
    /**
    The (absolute) position directly before the wrapping node at the
    given level, or, when `depth` is `this.depth + 1`, the original
    position.
    */
    before(depth) {
        depth = this.resolveDepth(depth);
        if (!depth)
            throw new RangeError("There is no position before the top-level node");
        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
    }
    /**
    The (absolute) position directly after the wrapping node at the
    given level, or the original position when `depth` is `this.depth + 1`.
    */
    after(depth) {
        depth = this.resolveDepth(depth);
        if (!depth)
            throw new RangeError("There is no position after the top-level node");
        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
    }
    /**
    When this position points into a text node, this returns the
    distance between the position and the start of the text node.
    Will be zero for positions that point between nodes.
    */
    get textOffset() { return this.pos - this.path[this.path.length - 1]; }
    /**
    Get the node directly after the position, if any. If the position
    points into a text node, only the part of that node after the
    position is returned.
    */
    get nodeAfter() {
        let parent = this.parent, index = this.index(this.depth);
        if (index == parent.childCount)
            return null;
        let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
        return dOff ? parent.child(index).cut(dOff) : child;
    }
    /**
    Get the node directly before the position, if any. If the
    position points into a text node, only the part of that node
    before the position is returned.
    */
    get nodeBefore() {
        let index = this.index(this.depth);
        let dOff = this.pos - this.path[this.path.length - 1];
        if (dOff)
            return this.parent.child(index).cut(0, dOff);
        return index == 0 ? null : this.parent.child(index - 1);
    }
    /**
    Get the position at the given index in the parent node at the
    given depth (which defaults to `this.depth`).
    */
    posAtIndex(index, depth) {
        depth = this.resolveDepth(depth);
        let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
        for (let i = 0; i < index; i++)
            pos += node.child(i).nodeSize;
        return pos;
    }
    /**
    Get the marks at this position, factoring in the surrounding
    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
    position is at the start of a non-empty node, the marks of the
    node after it (if any) are returned.
    */
    marks() {
        let parent = this.parent, index = this.index();
        // In an empty parent, return the empty array
        if (parent.content.size == 0)
            return Mark.none;
        // When inside a text node, just return the text node's marks
        if (this.textOffset)
            return parent.child(index).marks;
        let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
        // If the `after` flag is true of there is no node before, make
        // the node after this position the main reference.
        if (!main) {
            let tmp = main;
            main = other;
            other = tmp;
        }
        // Use all marks in the main node, except those that have
        // `inclusive` set to false and are not present in the other node.
        let marks = main.marks;
        for (var i = 0; i < marks.length; i++)
            if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
                marks = marks[i--].removeFromSet(marks);
        return marks;
    }
    /**
    Get the marks after the current position, if any, except those
    that are non-inclusive and not present at position `$end`. This
    is mostly useful for getting the set of marks to preserve after a
    deletion. Will return `null` if this position is at the end of
    its parent node or its parent node isn't a textblock (in which
    case no marks should be preserved).
    */
    marksAcross($end) {
        let after = this.parent.maybeChild(this.index());
        if (!after || !after.isInline)
            return null;
        let marks = after.marks, next = $end.parent.maybeChild($end.index());
        for (var i = 0; i < marks.length; i++)
            if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
                marks = marks[i--].removeFromSet(marks);
        return marks;
    }
    /**
    The depth up to which this position and the given (non-resolved)
    position share the same parent nodes.
    */
    sharedDepth(pos) {
        for (let depth = this.depth; depth > 0; depth--)
            if (this.start(depth) <= pos && this.end(depth) >= pos)
                return depth;
        return 0;
    }
    /**
    Returns a range based on the place where this position and the
    given position diverge around block content. If both point into
    the same textblock, for example, a range around that textblock
    will be returned. If they point into different blocks, the range
    around those blocks in their shared ancestor is returned. You can
    pass in an optional predicate that will be called with a parent
    node to see if a range into that parent is acceptable.
    */
    blockRange(other = this, pred) {
        if (other.pos < this.pos)
            return other.blockRange(this);
        for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
            if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
                return new NodeRange(this, other, d);
        return null;
    }
    /**
    Query whether the given position shares the same parent node.
    */
    sameParent(other) {
        return this.pos - this.parentOffset == other.pos - other.parentOffset;
    }
    /**
    Return the greater of this and the given position.
    */
    max(other) {
        return other.pos > this.pos ? other : this;
    }
    /**
    Return the smaller of this and the given position.
    */
    min(other) {
        return other.pos < this.pos ? other : this;
    }
    /**
    @internal
    */
    toString() {
        let str = "";
        for (let i = 1; i <= this.depth; i++)
            str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
        return str + ":" + this.parentOffset;
    }
    /**
    @internal
    */
    static resolve(doc, pos) {
        if (!(pos >= 0 && pos <= doc.content.size))
            throw new RangeError("Position " + pos + " out of range");
        let path = [];
        let start = 0, parentOffset = pos;
        for (let node = doc;;) {
            let { index, offset } = node.content.findIndex(parentOffset);
            let rem = parentOffset - offset;
            path.push(node, index, start + offset);
            if (!rem)
                break;
            node = node.child(index);
            if (node.isText)
                break;
            parentOffset = rem - 1;
            start += offset + 1;
        }
        return new ResolvedPos(pos, path, parentOffset);
    }
    /**
    @internal
    */
    static resolveCached(doc, pos) {
        let cache = resolveCache.get(doc);
        if (cache) {
            for (let i = 0; i < cache.elts.length; i++) {
                let elt = cache.elts[i];
                if (elt.pos == pos)
                    return elt;
            }
        }
        else {
            resolveCache.set(doc, cache = new ResolveCache);
        }
        let result = cache.elts[cache.i] = ResolvedPos.resolve(doc, pos);
        cache.i = (cache.i + 1) % resolveCacheSize;
        return result;
    }
}
class ResolveCache {
    constructor() {
        this.elts = [];
        this.i = 0;
    }
}
const resolveCacheSize = 12, resolveCache = new WeakMap();
/**
Represents a flat range of content, i.e. one that starts and
ends in the same node.
*/
class NodeRange {
    /**
    Construct a node range. `$from` and `$to` should point into the
    same node until at least the given `depth`, since a node range
    denotes an adjacent set of nodes in a single parent node.
    */
    constructor(
    /**
    A resolved position along the start of the content. May have a
    `depth` greater than this object's `depth` property, since
    these are the positions that were used to compute the range,
    not re-resolved positions directly at its boundaries.
    */
    $from, 
    /**
    A position along the end of the content. See
    caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).
    */
    $to, 
    /**
    The depth of the node that this range points into.
    */
    depth) {
        this.$from = $from;
        this.$to = $to;
        this.depth = depth;
    }
    /**
    The position at the start of the range.
    */
    get start() { return this.$from.before(this.depth + 1); }
    /**
    The position at the end of the range.
    */
    get end() { return this.$to.after(this.depth + 1); }
    /**
    The parent node that the range points into.
    */
    get parent() { return this.$from.node(this.depth); }
    /**
    The start index of the range in the parent node.
    */
    get startIndex() { return this.$from.index(this.depth); }
    /**
    The end index of the range in the parent node.
    */
    get endIndex() { return this.$to.indexAfter(this.depth); }
}

const emptyAttrs = Object.create(null);
/**
This class represents a node in the tree that makes up a
ProseMirror document. So a document is an instance of `Node`, with
children that are also instances of `Node`.

Nodes are persistent data structures. Instead of changing them, you
create new ones with the content you want. Old ones keep pointing
at the old document shape. This is made cheaper by sharing
structure between the old and new data as much as possible, which a
tree shape like this (without back pointers) makes easy.

**Do not** directly mutate the properties of a `Node` object. See
[the guide](/docs/guide/#doc) for more information.
*/
let Node$1 = class Node {
    /**
    @internal
    */
    constructor(
    /**
    The type of node that this is.
    */
    type, 
    /**
    An object mapping attribute names to values. The kind of
    attributes allowed and required are
    [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.
    */
    attrs, 
    // A fragment holding the node's children.
    content, 
    /**
    The marks (things like whether it is emphasized or part of a
    link) applied to this node.
    */
    marks = Mark.none) {
        this.type = type;
        this.attrs = attrs;
        this.marks = marks;
        this.content = content || Fragment.empty;
    }
    /**
    The size of this node, as defined by the integer-based [indexing
    scheme](/docs/guide/#doc.indexing). For text nodes, this is the
    amount of characters. For other leaf nodes, it is one. For
    non-leaf nodes, it is the size of the content plus two (the
    start and end token).
    */
    get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }
    /**
    The number of children that the node has.
    */
    get childCount() { return this.content.childCount; }
    /**
    Get the child node at the given index. Raises an error when the
    index is out of range.
    */
    child(index) { return this.content.child(index); }
    /**
    Get the child node at the given index, if it exists.
    */
    maybeChild(index) { return this.content.maybeChild(index); }
    /**
    Call `f` for every child node, passing the node, its offset
    into this parent node, and its index.
    */
    forEach(f) { this.content.forEach(f); }
    /**
    Invoke a callback for all descendant nodes recursively between
    the given two positions that are relative to start of this
    node's content. The callback is invoked with the node, its
    position relative to the original node (method receiver),
    its parent node, and its child index. When the callback returns
    false for a given node, that node's children will not be
    recursed over. The last parameter can be used to specify a
    starting position to count from.
    */
    nodesBetween(from, to, f, startPos = 0) {
        this.content.nodesBetween(from, to, f, startPos, this);
    }
    /**
    Call the given callback for every descendant node. Doesn't
    descend into a node when the callback returns `false`.
    */
    descendants(f) {
        this.nodesBetween(0, this.content.size, f);
    }
    /**
    Concatenates all the text nodes found in this fragment and its
    children.
    */
    get textContent() {
        return (this.isLeaf && this.type.spec.leafText)
            ? this.type.spec.leafText(this)
            : this.textBetween(0, this.content.size, "");
    }
    /**
    Get all text between positions `from` and `to`. When
    `blockSeparator` is given, it will be inserted to separate text
    from different block nodes. If `leafText` is given, it'll be
    inserted for every non-text leaf node encountered, otherwise
    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
    */
    textBetween(from, to, blockSeparator, leafText) {
        return this.content.textBetween(from, to, blockSeparator, leafText);
    }
    /**
    Returns this node's first child, or `null` if there are no
    children.
    */
    get firstChild() { return this.content.firstChild; }
    /**
    Returns this node's last child, or `null` if there are no
    children.
    */
    get lastChild() { return this.content.lastChild; }
    /**
    Test whether two nodes represent the same piece of document.
    */
    eq(other) {
        return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
    }
    /**
    Compare the markup (type, attributes, and marks) of this node to
    those of another. Returns `true` if both have the same markup.
    */
    sameMarkup(other) {
        return this.hasMarkup(other.type, other.attrs, other.marks);
    }
    /**
    Check whether this node's markup correspond to the given type,
    attributes, and marks.
    */
    hasMarkup(type, attrs, marks) {
        return this.type == type &&
            compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
            Mark.sameSet(this.marks, marks || Mark.none);
    }
    /**
    Create a new node with the same markup as this node, containing
    the given content (or empty, if no content is given).
    */
    copy(content = null) {
        if (content == this.content)
            return this;
        return new Node(this.type, this.attrs, content, this.marks);
    }
    /**
    Create a copy of this node, with the given set of marks instead
    of the node's own marks.
    */
    mark(marks) {
        return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);
    }
    /**
    Create a copy of this node with only the content between the
    given positions. If `to` is not given, it defaults to the end of
    the node.
    */
    cut(from, to = this.content.size) {
        if (from == 0 && to == this.content.size)
            return this;
        return this.copy(this.content.cut(from, to));
    }
    /**
    Cut out the part of the document between the given positions, and
    return it as a `Slice` object.
    */
    slice(from, to = this.content.size, includeParents = false) {
        if (from == to)
            return Slice.empty;
        let $from = this.resolve(from), $to = this.resolve(to);
        let depth = includeParents ? 0 : $from.sharedDepth(to);
        let start = $from.start(depth), node = $from.node(depth);
        let content = node.content.cut($from.pos - start, $to.pos - start);
        return new Slice(content, $from.depth - depth, $to.depth - depth);
    }
    /**
    Replace the part of the document between the given positions with
    the given slice. The slice must 'fit', meaning its open sides
    must be able to connect to the surrounding content, and its
    content nodes must be valid children for the node they are placed
    into. If any of this is violated, an error of type
    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
    */
    replace(from, to, slice) {
        return replace(this.resolve(from), this.resolve(to), slice);
    }
    /**
    Find the node directly after the given position.
    */
    nodeAt(pos) {
        for (let node = this;;) {
            let { index, offset } = node.content.findIndex(pos);
            node = node.maybeChild(index);
            if (!node)
                return null;
            if (offset == pos || node.isText)
                return node;
            pos -= offset + 1;
        }
    }
    /**
    Find the (direct) child node after the given offset, if any,
    and return it along with its index and offset relative to this
    node.
    */
    childAfter(pos) {
        let { index, offset } = this.content.findIndex(pos);
        return { node: this.content.maybeChild(index), index, offset };
    }
    /**
    Find the (direct) child node before the given offset, if any,
    and return it along with its index and offset relative to this
    node.
    */
    childBefore(pos) {
        if (pos == 0)
            return { node: null, index: 0, offset: 0 };
        let { index, offset } = this.content.findIndex(pos);
        if (offset < pos)
            return { node: this.content.child(index), index, offset };
        let node = this.content.child(index - 1);
        return { node, index: index - 1, offset: offset - node.nodeSize };
    }
    /**
    Resolve the given position in the document, returning an
    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
    */
    resolve(pos) { return ResolvedPos.resolveCached(this, pos); }
    /**
    @internal
    */
    resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }
    /**
    Test whether a given mark or mark type occurs in this document
    between the two given positions.
    */
    rangeHasMark(from, to, type) {
        let found = false;
        if (to > from)
            this.nodesBetween(from, to, node => {
                if (type.isInSet(node.marks))
                    found = true;
                return !found;
            });
        return found;
    }
    /**
    True when this is a block (non-inline node)
    */
    get isBlock() { return this.type.isBlock; }
    /**
    True when this is a textblock node, a block node with inline
    content.
    */
    get isTextblock() { return this.type.isTextblock; }
    /**
    True when this node allows inline content.
    */
    get inlineContent() { return this.type.inlineContent; }
    /**
    True when this is an inline node (a text node or a node that can
    appear among text).
    */
    get isInline() { return this.type.isInline; }
    /**
    True when this is a text node.
    */
    get isText() { return this.type.isText; }
    /**
    True when this is a leaf node.
    */
    get isLeaf() { return this.type.isLeaf; }
    /**
    True when this is an atom, i.e. when it does not have directly
    editable content. This is usually the same as `isLeaf`, but can
    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
    on a node's spec (typically used when the node is displayed as
    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
    */
    get isAtom() { return this.type.isAtom; }
    /**
    Return a string representation of this node for debugging
    purposes.
    */
    toString() {
        if (this.type.spec.toDebugString)
            return this.type.spec.toDebugString(this);
        let name = this.type.name;
        if (this.content.size)
            name += "(" + this.content.toStringInner() + ")";
        return wrapMarks(this.marks, name);
    }
    /**
    Get the content match in this node at the given index.
    */
    contentMatchAt(index) {
        let match = this.type.contentMatch.matchFragment(this.content, 0, index);
        if (!match)
            throw new Error("Called contentMatchAt on a node with invalid content");
        return match;
    }
    /**
    Test whether replacing the range between `from` and `to` (by
    child index) with the given replacement fragment (which defaults
    to the empty fragment) would leave the node's content valid. You
    can optionally pass `start` and `end` indices into the
    replacement fragment.
    */
    canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
        let one = this.contentMatchAt(from).matchFragment(replacement, start, end);
        let two = one && one.matchFragment(this.content, to);
        if (!two || !two.validEnd)
            return false;
        for (let i = start; i < end; i++)
            if (!this.type.allowsMarks(replacement.child(i).marks))
                return false;
        return true;
    }
    /**
    Test whether replacing the range `from` to `to` (by index) with
    a node of the given type would leave the node's content valid.
    */
    canReplaceWith(from, to, type, marks) {
        if (marks && !this.type.allowsMarks(marks))
            return false;
        let start = this.contentMatchAt(from).matchType(type);
        let end = start && start.matchFragment(this.content, to);
        return end ? end.validEnd : false;
    }
    /**
    Test whether the given node's content could be appended to this
    node. If that node is empty, this will only return true if there
    is at least one node type that can appear in both nodes (to avoid
    merging completely incompatible nodes).
    */
    canAppend(other) {
        if (other.content.size)
            return this.canReplace(this.childCount, this.childCount, other.content);
        else
            return this.type.compatibleContent(other.type);
    }
    /**
    Check whether this node and its descendants conform to the
    schema, and raise an exception when they do not.
    */
    check() {
        this.type.checkContent(this.content);
        this.type.checkAttrs(this.attrs);
        let copy = Mark.none;
        for (let i = 0; i < this.marks.length; i++) {
            let mark = this.marks[i];
            mark.type.checkAttrs(mark.attrs);
            copy = mark.addToSet(copy);
        }
        if (!Mark.sameSet(copy, this.marks))
            throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);
        this.content.forEach(node => node.check());
    }
    /**
    Return a JSON-serializeable representation of this node.
    */
    toJSON() {
        let obj = { type: this.type.name };
        for (let _ in this.attrs) {
            obj.attrs = this.attrs;
            break;
        }
        if (this.content.size)
            obj.content = this.content.toJSON();
        if (this.marks.length)
            obj.marks = this.marks.map(n => n.toJSON());
        return obj;
    }
    /**
    Deserialize a node from its JSON representation.
    */
    static fromJSON(schema, json) {
        if (!json)
            throw new RangeError("Invalid input for Node.fromJSON");
        let marks = undefined;
        if (json.marks) {
            if (!Array.isArray(json.marks))
                throw new RangeError("Invalid mark data for Node.fromJSON");
            marks = json.marks.map(schema.markFromJSON);
        }
        if (json.type == "text") {
            if (typeof json.text != "string")
                throw new RangeError("Invalid text node in JSON");
            return schema.text(json.text, marks);
        }
        let content = Fragment.fromJSON(schema, json.content);
        let node = schema.nodeType(json.type).create(json.attrs, content, marks);
        node.type.checkAttrs(node.attrs);
        return node;
    }
};
Node$1.prototype.text = undefined;
let TextNode$2 = class TextNode extends Node$1 {
    /**
    @internal
    */
    constructor(type, attrs, content, marks) {
        super(type, attrs, null, marks);
        if (!content)
            throw new RangeError("Empty text nodes are not allowed");
        this.text = content;
    }
    toString() {
        if (this.type.spec.toDebugString)
            return this.type.spec.toDebugString(this);
        return wrapMarks(this.marks, JSON.stringify(this.text));
    }
    get textContent() { return this.text; }
    textBetween(from, to) { return this.text.slice(from, to); }
    get nodeSize() { return this.text.length; }
    mark(marks) {
        return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
    }
    withText(text) {
        if (text == this.text)
            return this;
        return new TextNode(this.type, this.attrs, text, this.marks);
    }
    cut(from = 0, to = this.text.length) {
        if (from == 0 && to == this.text.length)
            return this;
        return this.withText(this.text.slice(from, to));
    }
    eq(other) {
        return this.sameMarkup(other) && this.text == other.text;
    }
    toJSON() {
        let base = super.toJSON();
        base.text = this.text;
        return base;
    }
};
function wrapMarks(marks, str) {
    for (let i = marks.length - 1; i >= 0; i--)
        str = marks[i].type.name + "(" + str + ")";
    return str;
}

/**
Instances of this class represent a match state of a node type's
[content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to
find out whether further content matches here, and whether a given
position is a valid end of the node.
*/
class ContentMatch {
    /**
    @internal
    */
    constructor(
    /**
    True when this match state represents a valid end of the node.
    */
    validEnd) {
        this.validEnd = validEnd;
        /**
        @internal
        */
        this.next = [];
        /**
        @internal
        */
        this.wrapCache = [];
    }
    /**
    @internal
    */
    static parse(string, nodeTypes) {
        let stream = new TokenStream(string, nodeTypes);
        if (stream.next == null)
            return ContentMatch.empty;
        let expr = parseExpr(stream);
        if (stream.next)
            stream.err("Unexpected trailing text");
        let match = dfa(nfa(expr));
        checkForDeadEnds(match, stream);
        return match;
    }
    /**
    Match a node type, returning a match after that node if
    successful.
    */
    matchType(type) {
        for (let i = 0; i < this.next.length; i++)
            if (this.next[i].type == type)
                return this.next[i].next;
        return null;
    }
    /**
    Try to match a fragment. Returns the resulting match when
    successful.
    */
    matchFragment(frag, start = 0, end = frag.childCount) {
        let cur = this;
        for (let i = start; cur && i < end; i++)
            cur = cur.matchType(frag.child(i).type);
        return cur;
    }
    /**
    @internal
    */
    get inlineContent() {
        return this.next.length != 0 && this.next[0].type.isInline;
    }
    /**
    Get the first matching node type at this match position that can
    be generated.
    */
    get defaultType() {
        for (let i = 0; i < this.next.length; i++) {
            let { type } = this.next[i];
            if (!(type.isText || type.hasRequiredAttrs()))
                return type;
        }
        return null;
    }
    /**
    @internal
    */
    compatible(other) {
        for (let i = 0; i < this.next.length; i++)
            for (let j = 0; j < other.next.length; j++)
                if (this.next[i].type == other.next[j].type)
                    return true;
        return false;
    }
    /**
    Try to match the given fragment, and if that fails, see if it can
    be made to match by inserting nodes in front of it. When
    successful, return a fragment of inserted nodes (which may be
    empty if nothing had to be inserted). When `toEnd` is true, only
    return a fragment if the resulting match goes to the end of the
    content expression.
    */
    fillBefore(after, toEnd = false, startIndex = 0) {
        let seen = [this];
        function search(match, types) {
            let finished = match.matchFragment(after, startIndex);
            if (finished && (!toEnd || finished.validEnd))
                return Fragment.from(types.map(tp => tp.createAndFill()));
            for (let i = 0; i < match.next.length; i++) {
                let { type, next } = match.next[i];
                if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                    seen.push(next);
                    let found = search(next, types.concat(type));
                    if (found)
                        return found;
                }
            }
            return null;
        }
        return search(this, []);
    }
    /**
    Find a set of wrapping node types that would allow a node of the
    given type to appear at this position. The result may be empty
    (when it fits directly) and will be null when no such wrapping
    exists.
    */
    findWrapping(target) {
        for (let i = 0; i < this.wrapCache.length; i += 2)
            if (this.wrapCache[i] == target)
                return this.wrapCache[i + 1];
        let computed = this.computeWrapping(target);
        this.wrapCache.push(target, computed);
        return computed;
    }
    /**
    @internal
    */
    computeWrapping(target) {
        let seen = Object.create(null), active = [{ match: this, type: null, via: null }];
        while (active.length) {
            let current = active.shift(), match = current.match;
            if (match.matchType(target)) {
                let result = [];
                for (let obj = current; obj.type; obj = obj.via)
                    result.push(obj.type);
                return result.reverse();
            }
            for (let i = 0; i < match.next.length; i++) {
                let { type, next } = match.next[i];
                if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
                    active.push({ match: type.contentMatch, type, via: current });
                    seen[type.name] = true;
                }
            }
        }
        return null;
    }
    /**
    The number of outgoing edges this node has in the finite
    automaton that describes the content expression.
    */
    get edgeCount() {
        return this.next.length;
    }
    /**
    Get the _n_​th outgoing edge from this node in the finite
    automaton that describes the content expression.
    */
    edge(n) {
        if (n >= this.next.length)
            throw new RangeError(`There's no ${n}th edge in this content match`);
        return this.next[n];
    }
    /**
    @internal
    */
    toString() {
        let seen = [];
        function scan(m) {
            seen.push(m);
            for (let i = 0; i < m.next.length; i++)
                if (seen.indexOf(m.next[i].next) == -1)
                    scan(m.next[i].next);
        }
        scan(this);
        return seen.map((m, i) => {
            let out = i + (m.validEnd ? "*" : " ") + " ";
            for (let i = 0; i < m.next.length; i++)
                out += (i ? ", " : "") + m.next[i].type.name + "->" + seen.indexOf(m.next[i].next);
            return out;
        }).join("\n");
    }
}
/**
@internal
*/
ContentMatch.empty = new ContentMatch(true);
class TokenStream {
    constructor(string, nodeTypes) {
        this.string = string;
        this.nodeTypes = nodeTypes;
        this.inline = null;
        this.pos = 0;
        this.tokens = string.split(/\s*(?=\b|\W|$)/);
        if (this.tokens[this.tokens.length - 1] == "")
            this.tokens.pop();
        if (this.tokens[0] == "")
            this.tokens.shift();
    }
    get next() { return this.tokens[this.pos]; }
    eat(tok) { return this.next == tok && (this.pos++ || true); }
    err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); }
}
function parseExpr(stream) {
    let exprs = [];
    do {
        exprs.push(parseExprSeq(stream));
    } while (stream.eat("|"));
    return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
}
function parseExprSeq(stream) {
    let exprs = [];
    do {
        exprs.push(parseExprSubscript(stream));
    } while (stream.next && stream.next != ")" && stream.next != "|");
    return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
}
function parseExprSubscript(stream) {
    let expr = parseExprAtom(stream);
    for (;;) {
        if (stream.eat("+"))
            expr = { type: "plus", expr };
        else if (stream.eat("*"))
            expr = { type: "star", expr };
        else if (stream.eat("?"))
            expr = { type: "opt", expr };
        else if (stream.eat("{"))
            expr = parseExprRange(stream, expr);
        else
            break;
    }
    return expr;
}
function parseNum(stream) {
    if (/\D/.test(stream.next))
        stream.err("Expected number, got '" + stream.next + "'");
    let result = Number(stream.next);
    stream.pos++;
    return result;
}
function parseExprRange(stream, expr) {
    let min = parseNum(stream), max = min;
    if (stream.eat(",")) {
        if (stream.next != "}")
            max = parseNum(stream);
        else
            max = -1;
    }
    if (!stream.eat("}"))
        stream.err("Unclosed braced range");
    return { type: "range", min, max, expr };
}
function resolveName(stream, name) {
    let types = stream.nodeTypes, type = types[name];
    if (type)
        return [type];
    let result = [];
    for (let typeName in types) {
        let type = types[typeName];
        if (type.groups.indexOf(name) > -1)
            result.push(type);
    }
    if (result.length == 0)
        stream.err("No node type or group '" + name + "' found");
    return result;
}
function parseExprAtom(stream) {
    if (stream.eat("(")) {
        let expr = parseExpr(stream);
        if (!stream.eat(")"))
            stream.err("Missing closing paren");
        return expr;
    }
    else if (!/\W/.test(stream.next)) {
        let exprs = resolveName(stream, stream.next).map(type => {
            if (stream.inline == null)
                stream.inline = type.isInline;
            else if (stream.inline != type.isInline)
                stream.err("Mixing inline and block content");
            return { type: "name", value: type };
        });
        stream.pos++;
        return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
    }
    else {
        stream.err("Unexpected token '" + stream.next + "'");
    }
}
/**
Construct an NFA from an expression as returned by the parser. The
NFA is represented as an array of states, which are themselves
arrays of edges, which are `{term, to}` objects. The first state is
the entry state and the last node is the success state.

Note that unlike typical NFAs, the edge ordering in this one is
significant, in that it is used to contruct filler content when
necessary.
*/
function nfa(expr) {
    let nfa = [[]];
    connect(compile(expr, 0), node());
    return nfa;
    function node() { return nfa.push([]) - 1; }
    function edge(from, to, term) {
        let edge = { term, to };
        nfa[from].push(edge);
        return edge;
    }
    function connect(edges, to) {
        edges.forEach(edge => edge.to = to);
    }
    function compile(expr, from) {
        if (expr.type == "choice") {
            return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);
        }
        else if (expr.type == "seq") {
            for (let i = 0;; i++) {
                let next = compile(expr.exprs[i], from);
                if (i == expr.exprs.length - 1)
                    return next;
                connect(next, from = node());
            }
        }
        else if (expr.type == "star") {
            let loop = node();
            edge(from, loop);
            connect(compile(expr.expr, loop), loop);
            return [edge(loop)];
        }
        else if (expr.type == "plus") {
            let loop = node();
            connect(compile(expr.expr, from), loop);
            connect(compile(expr.expr, loop), loop);
            return [edge(loop)];
        }
        else if (expr.type == "opt") {
            return [edge(from)].concat(compile(expr.expr, from));
        }
        else if (expr.type == "range") {
            let cur = from;
            for (let i = 0; i < expr.min; i++) {
                let next = node();
                connect(compile(expr.expr, cur), next);
                cur = next;
            }
            if (expr.max == -1) {
                connect(compile(expr.expr, cur), cur);
            }
            else {
                for (let i = expr.min; i < expr.max; i++) {
                    let next = node();
                    edge(cur, next);
                    connect(compile(expr.expr, cur), next);
                    cur = next;
                }
            }
            return [edge(cur)];
        }
        else if (expr.type == "name") {
            return [edge(from, undefined, expr.value)];
        }
        else {
            throw new Error("Unknown expr type");
        }
    }
}
function cmp(a, b) { return b - a; }
// Get the set of nodes reachable by null edges from `node`. Omit
// nodes with only a single null-out-edge, since they may lead to
// needless duplicated nodes.
function nullFrom(nfa, node) {
    let result = [];
    scan(node);
    return result.sort(cmp);
    function scan(node) {
        let edges = nfa[node];
        if (edges.length == 1 && !edges[0].term)
            return scan(edges[0].to);
        result.push(node);
        for (let i = 0; i < edges.length; i++) {
            let { term, to } = edges[i];
            if (!term && result.indexOf(to) == -1)
                scan(to);
        }
    }
}
// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
// of state objects (`ContentMatch` instances) with transitions
// between them.
function dfa(nfa) {
    let labeled = Object.create(null);
    return explore(nullFrom(nfa, 0));
    function explore(states) {
        let out = [];
        states.forEach(node => {
            nfa[node].forEach(({ term, to }) => {
                if (!term)
                    return;
                let set;
                for (let i = 0; i < out.length; i++)
                    if (out[i][0] == term)
                        set = out[i][1];
                nullFrom(nfa, to).forEach(node => {
                    if (!set)
                        out.push([term, set = []]);
                    if (set.indexOf(node) == -1)
                        set.push(node);
                });
            });
        });
        let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
        for (let i = 0; i < out.length; i++) {
            let states = out[i][1].sort(cmp);
            state.next.push({ type: out[i][0], next: labeled[states.join(",")] || explore(states) });
        }
        return state;
    }
}
function checkForDeadEnds(match, stream) {
    for (let i = 0, work = [match]; i < work.length; i++) {
        let state = work[i], dead = !state.validEnd, nodes = [];
        for (let j = 0; j < state.next.length; j++) {
            let { type, next } = state.next[j];
            nodes.push(type.name);
            if (dead && !(type.isText || type.hasRequiredAttrs()))
                dead = false;
            if (work.indexOf(next) == -1)
                work.push(next);
        }
        if (dead)
            stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
    }
}

// For node types where all attrs have a default value (or which don't
// have any attributes), build up a single reusable default attribute
// object, and use it for all nodes that don't specify specific
// attributes.
function defaultAttrs(attrs) {
    let defaults = Object.create(null);
    for (let attrName in attrs) {
        let attr = attrs[attrName];
        if (!attr.hasDefault)
            return null;
        defaults[attrName] = attr.default;
    }
    return defaults;
}
function computeAttrs(attrs, value) {
    let built = Object.create(null);
    for (let name in attrs) {
        let given = value && value[name];
        if (given === undefined) {
            let attr = attrs[name];
            if (attr.hasDefault)
                given = attr.default;
            else
                throw new RangeError("No value supplied for attribute " + name);
        }
        built[name] = given;
    }
    return built;
}
function checkAttrs(attrs, values, type, name) {
    for (let name in values)
        if (!(name in attrs))
            throw new RangeError(`Unsupported attribute ${name} for ${type} of type ${name}`);
    for (let name in attrs) {
        let attr = attrs[name];
        if (attr.validate)
            attr.validate(values[name]);
    }
}
function initAttrs(typeName, attrs) {
    let result = Object.create(null);
    if (attrs)
        for (let name in attrs)
            result[name] = new Attribute(typeName, name, attrs[name]);
    return result;
}
/**
Node types are objects allocated once per `Schema` and used to
[tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information
about the node type, such as its name and what kind of node it
represents.
*/
let NodeType$1 = class NodeType {
    /**
    @internal
    */
    constructor(
    /**
    The name the node type has in this schema.
    */
    name, 
    /**
    A link back to the `Schema` the node type belongs to.
    */
    schema, 
    /**
    The spec that this type is based on
    */
    spec) {
        this.name = name;
        this.schema = schema;
        this.spec = spec;
        /**
        The set of marks allowed in this node. `null` means all marks
        are allowed.
        */
        this.markSet = null;
        this.groups = spec.group ? spec.group.split(" ") : [];
        this.attrs = initAttrs(name, spec.attrs);
        this.defaultAttrs = defaultAttrs(this.attrs);
        this.contentMatch = null;
        this.inlineContent = null;
        this.isBlock = !(spec.inline || name == "text");
        this.isText = name == "text";
    }
    /**
    True if this is an inline type.
    */
    get isInline() { return !this.isBlock; }
    /**
    True if this is a textblock type, a block that contains inline
    content.
    */
    get isTextblock() { return this.isBlock && this.inlineContent; }
    /**
    True for node types that allow no content.
    */
    get isLeaf() { return this.contentMatch == ContentMatch.empty; }
    /**
    True when this node is an atom, i.e. when it does not have
    directly editable content.
    */
    get isAtom() { return this.isLeaf || !!this.spec.atom; }
    /**
    The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
    */
    get whitespace() {
        return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
    }
    /**
    Tells you whether this node type has any required attributes.
    */
    hasRequiredAttrs() {
        for (let n in this.attrs)
            if (this.attrs[n].isRequired)
                return true;
        return false;
    }
    /**
    Indicates whether this node allows some of the same content as
    the given node type.
    */
    compatibleContent(other) {
        return this == other || this.contentMatch.compatible(other.contentMatch);
    }
    /**
    @internal
    */
    computeAttrs(attrs) {
        if (!attrs && this.defaultAttrs)
            return this.defaultAttrs;
        else
            return computeAttrs(this.attrs, attrs);
    }
    /**
    Create a `Node` of this type. The given attributes are
    checked and defaulted (you can pass `null` to use the type's
    defaults entirely, if no required attributes exist). `content`
    may be a `Fragment`, a node, an array of nodes, or
    `null`. Similarly `marks` may be `null` to default to the empty
    set of marks.
    */
    create(attrs = null, content, marks) {
        if (this.isText)
            throw new Error("NodeType.create can't construct text nodes");
        return new Node$1(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
    }
    /**
    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
    against the node type's content restrictions, and throw an error
    if it doesn't match.
    */
    createChecked(attrs = null, content, marks) {
        content = Fragment.from(content);
        this.checkContent(content);
        return new Node$1(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));
    }
    /**
    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
    necessary to add nodes to the start or end of the given fragment
    to make it fit the node. If no fitting wrapping can be found,
    return null. Note that, due to the fact that required nodes can
    always be created, this will always succeed if you pass null or
    `Fragment.empty` as content.
    */
    createAndFill(attrs = null, content, marks) {
        attrs = this.computeAttrs(attrs);
        content = Fragment.from(content);
        if (content.size) {
            let before = this.contentMatch.fillBefore(content);
            if (!before)
                return null;
            content = before.append(content);
        }
        let matched = this.contentMatch.matchFragment(content);
        let after = matched && matched.fillBefore(Fragment.empty, true);
        if (!after)
            return null;
        return new Node$1(this, attrs, content.append(after), Mark.setFrom(marks));
    }
    /**
    Returns true if the given fragment is valid content for this node
    type.
    */
    validContent(content) {
        let result = this.contentMatch.matchFragment(content);
        if (!result || !result.validEnd)
            return false;
        for (let i = 0; i < content.childCount; i++)
            if (!this.allowsMarks(content.child(i).marks))
                return false;
        return true;
    }
    /**
    Throws a RangeError if the given fragment is not valid content for this
    node type.
    @internal
    */
    checkContent(content) {
        if (!this.validContent(content))
            throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);
    }
    /**
    @internal
    */
    checkAttrs(attrs) {
        checkAttrs(this.attrs, attrs, "node", this.name);
    }
    /**
    Check whether the given mark type is allowed in this node.
    */
    allowsMarkType(markType) {
        return this.markSet == null || this.markSet.indexOf(markType) > -1;
    }
    /**
    Test whether the given set of marks are allowed in this node.
    */
    allowsMarks(marks) {
        if (this.markSet == null)
            return true;
        for (let i = 0; i < marks.length; i++)
            if (!this.allowsMarkType(marks[i].type))
                return false;
        return true;
    }
    /**
    Removes the marks that are not allowed in this node from the given set.
    */
    allowedMarks(marks) {
        if (this.markSet == null)
            return marks;
        let copy;
        for (let i = 0; i < marks.length; i++) {
            if (!this.allowsMarkType(marks[i].type)) {
                if (!copy)
                    copy = marks.slice(0, i);
            }
            else if (copy) {
                copy.push(marks[i]);
            }
        }
        return !copy ? marks : copy.length ? copy : Mark.none;
    }
    /**
    @internal
    */
    static compile(nodes, schema) {
        let result = Object.create(null);
        nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
        let topType = schema.spec.topNode || "doc";
        if (!result[topType])
            throw new RangeError("Schema is missing its top node type ('" + topType + "')");
        if (!result.text)
            throw new RangeError("Every schema needs a 'text' type");
        for (let _ in result.text.attrs)
            throw new RangeError("The text node type should not have attributes");
        return result;
    }
};
function validateType(typeName, attrName, type) {
    let types = type.split("|");
    return (value) => {
        let name = value === null ? "null" : typeof value;
        if (types.indexOf(name) < 0)
            throw new RangeError(`Expected value of type ${types} for attribute ${attrName} on type ${typeName}, got ${name}`);
    };
}
// Attribute descriptors
class Attribute {
    constructor(typeName, attrName, options) {
        this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
        this.default = options.default;
        this.validate = typeof options.validate == "string" ? validateType(typeName, attrName, options.validate) : options.validate;
    }
    get isRequired() {
        return !this.hasDefault;
    }
}
// Marks
/**
Like nodes, marks (which are associated with nodes to signify
things like emphasis or being part of a link) are
[tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are
instantiated once per `Schema`.
*/
class MarkType {
    /**
    @internal
    */
    constructor(
    /**
    The name of the mark type.
    */
    name, 
    /**
    @internal
    */
    rank, 
    /**
    The schema that this mark type instance is part of.
    */
    schema, 
    /**
    The spec on which the type is based.
    */
    spec) {
        this.name = name;
        this.rank = rank;
        this.schema = schema;
        this.spec = spec;
        this.attrs = initAttrs(name, spec.attrs);
        this.excluded = null;
        let defaults = defaultAttrs(this.attrs);
        this.instance = defaults ? new Mark(this, defaults) : null;
    }
    /**
    Create a mark of this type. `attrs` may be `null` or an object
    containing only some of the mark's attributes. The others, if
    they have defaults, will be added.
    */
    create(attrs = null) {
        if (!attrs && this.instance)
            return this.instance;
        return new Mark(this, computeAttrs(this.attrs, attrs));
    }
    /**
    @internal
    */
    static compile(marks, schema) {
        let result = Object.create(null), rank = 0;
        marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
        return result;
    }
    /**
    When there is a mark of this type in the given set, a new set
    without it is returned. Otherwise, the input set is returned.
    */
    removeFromSet(set) {
        for (var i = 0; i < set.length; i++)
            if (set[i].type == this) {
                set = set.slice(0, i).concat(set.slice(i + 1));
                i--;
            }
        return set;
    }
    /**
    Tests whether there is a mark of this type in the given set.
    */
    isInSet(set) {
        for (let i = 0; i < set.length; i++)
            if (set[i].type == this)
                return set[i];
    }
    /**
    @internal
    */
    checkAttrs(attrs) {
        checkAttrs(this.attrs, attrs, "mark", this.name);
    }
    /**
    Queries whether a given mark type is
    [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
    */
    excludes(other) {
        return this.excluded.indexOf(other) > -1;
    }
}
/**
A document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark
type](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may
occur in conforming documents, and provides functionality for
creating and deserializing such documents.

When given, the type parameters provide the names of the nodes and
marks in this schema.
*/
class Schema {
    /**
    Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
    */
    constructor(spec) {
        /**
        The [linebreak
        replacement](https://prosemirror.net/docs/ref/#model.NodeSpec.linebreakReplacement) node defined
        in this schema, if any.
        */
        this.linebreakReplacement = null;
        /**
        An object for storing whatever values modules may want to
        compute and cache per schema. (If you want to store something
        in it, try to use property names unlikely to clash.)
        */
        this.cached = Object.create(null);
        let instanceSpec = this.spec = {};
        for (let prop in spec)
            instanceSpec[prop] = spec[prop];
        instanceSpec.nodes = OrderedMap.from(spec.nodes),
            instanceSpec.marks = OrderedMap.from(spec.marks || {}),
            this.nodes = NodeType$1.compile(this.spec.nodes, this);
        this.marks = MarkType.compile(this.spec.marks, this);
        let contentExprCache = Object.create(null);
        for (let prop in this.nodes) {
            if (prop in this.marks)
                throw new RangeError(prop + " can not be both a node and a mark");
            let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
            type.contentMatch = contentExprCache[contentExpr] ||
                (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
            type.inlineContent = type.contentMatch.inlineContent;
            if (type.spec.linebreakReplacement) {
                if (this.linebreakReplacement)
                    throw new RangeError("Multiple linebreak nodes defined");
                if (!type.isInline || !type.isLeaf)
                    throw new RangeError("Linebreak replacement nodes must be inline leaf nodes");
                this.linebreakReplacement = type;
            }
            type.markSet = markExpr == "_" ? null :
                markExpr ? gatherMarks(this, markExpr.split(" ")) :
                    markExpr == "" || !type.inlineContent ? [] : null;
        }
        for (let prop in this.marks) {
            let type = this.marks[prop], excl = type.spec.excludes;
            type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
        }
        this.nodeFromJSON = this.nodeFromJSON.bind(this);
        this.markFromJSON = this.markFromJSON.bind(this);
        this.topNodeType = this.nodes[this.spec.topNode || "doc"];
        this.cached.wrappings = Object.create(null);
    }
    /**
    Create a node in this schema. The `type` may be a string or a
    `NodeType` instance. Attributes will be extended with defaults,
    `content` may be a `Fragment`, `null`, a `Node`, or an array of
    nodes.
    */
    node(type, attrs = null, content, marks) {
        if (typeof type == "string")
            type = this.nodeType(type);
        else if (!(type instanceof NodeType$1))
            throw new RangeError("Invalid node type: " + type);
        else if (type.schema != this)
            throw new RangeError("Node type from different schema used (" + type.name + ")");
        return type.createChecked(attrs, content, marks);
    }
    /**
    Create a text node in the schema. Empty text nodes are not
    allowed.
    */
    text(text, marks) {
        let type = this.nodes.text;
        return new TextNode$2(type, type.defaultAttrs, text, Mark.setFrom(marks));
    }
    /**
    Create a mark with the given type and attributes.
    */
    mark(type, attrs) {
        if (typeof type == "string")
            type = this.marks[type];
        return type.create(attrs);
    }
    /**
    Deserialize a node from its JSON representation. This method is
    bound.
    */
    nodeFromJSON(json) {
        return Node$1.fromJSON(this, json);
    }
    /**
    Deserialize a mark from its JSON representation. This method is
    bound.
    */
    markFromJSON(json) {
        return Mark.fromJSON(this, json);
    }
    /**
    @internal
    */
    nodeType(name) {
        let found = this.nodes[name];
        if (!found)
            throw new RangeError("Unknown node type: " + name);
        return found;
    }
}
function gatherMarks(schema, marks) {
    let found = [];
    for (let i = 0; i < marks.length; i++) {
        let name = marks[i], mark = schema.marks[name], ok = mark;
        if (mark) {
            found.push(mark);
        }
        else {
            for (let prop in schema.marks) {
                let mark = schema.marks[prop];
                if (name == "_" || (mark.spec.group && mark.spec.group.split(" ").indexOf(name) > -1))
                    found.push(ok = mark);
            }
        }
        if (!ok)
            throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
    }
    return found;
}

function isTagRule(rule) { return rule.tag != null; }
function isStyleRule(rule) { return rule.style != null; }
/**
A DOM parser represents a strategy for parsing DOM content into a
ProseMirror document conforming to a given schema. Its behavior is
defined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).
*/
class DOMParser {
    /**
    Create a parser that targets the given schema, using the given
    parsing rules.
    */
    constructor(
    /**
    The schema into which the parser parses.
    */
    schema, 
    /**
    The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser
    uses, in order of precedence.
    */
    rules) {
        this.schema = schema;
        this.rules = rules;
        /**
        @internal
        */
        this.tags = [];
        /**
        @internal
        */
        this.styles = [];
        let matchedStyles = this.matchedStyles = [];
        rules.forEach(rule => {
            if (isTagRule(rule)) {
                this.tags.push(rule);
            }
            else if (isStyleRule(rule)) {
                let prop = /[^=]*/.exec(rule.style)[0];
                if (matchedStyles.indexOf(prop) < 0)
                    matchedStyles.push(prop);
                this.styles.push(rule);
            }
        });
        // Only normalize list elements when lists in the schema can't directly contain themselves
        this.normalizeLists = !this.tags.some(r => {
            if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
                return false;
            let node = schema.nodes[r.node];
            return node.contentMatch.matchType(node);
        });
    }
    /**
    Parse a document from the content of a DOM node.
    */
    parse(dom, options = {}) {
        let context = new ParseContext(this, options, false);
        context.addAll(dom, Mark.none, options.from, options.to);
        return context.finish();
    }
    /**
    Parses the content of the given DOM node, like
    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
    options. But unlike that method, which produces a whole node,
    this one returns a slice that is open at the sides, meaning that
    the schema constraints aren't applied to the start of nodes to
    the left of the input and the end of nodes at the end.
    */
    parseSlice(dom, options = {}) {
        let context = new ParseContext(this, options, true);
        context.addAll(dom, Mark.none, options.from, options.to);
        return Slice.maxOpen(context.finish());
    }
    /**
    @internal
    */
    matchTag(dom, context, after) {
        for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
            let rule = this.tags[i];
            if (matches(dom, rule.tag) &&
                (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                (!rule.context || context.matchesContext(rule.context))) {
                if (rule.getAttrs) {
                    let result = rule.getAttrs(dom);
                    if (result === false)
                        continue;
                    rule.attrs = result || undefined;
                }
                return rule;
            }
        }
    }
    /**
    @internal
    */
    matchStyle(prop, value, context, after) {
        for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
            let rule = this.styles[i], style = rule.style;
            if (style.indexOf(prop) != 0 ||
                rule.context && !context.matchesContext(rule.context) ||
                // Test that the style string either precisely matches the prop,
                // or has an '=' sign after the prop, followed by the given
                // value.
                style.length > prop.length &&
                    (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
                continue;
            if (rule.getAttrs) {
                let result = rule.getAttrs(value);
                if (result === false)
                    continue;
                rule.attrs = result || undefined;
            }
            return rule;
        }
    }
    /**
    @internal
    */
    static schemaRules(schema) {
        let result = [];
        function insert(rule) {
            let priority = rule.priority == null ? 50 : rule.priority, i = 0;
            for (; i < result.length; i++) {
                let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                if (nextPriority < priority)
                    break;
            }
            result.splice(i, 0, rule);
        }
        for (let name in schema.marks) {
            let rules = schema.marks[name].spec.parseDOM;
            if (rules)
                rules.forEach(rule => {
                    insert(rule = copy(rule));
                    if (!(rule.mark || rule.ignore || rule.clearMark))
                        rule.mark = name;
                });
        }
        for (let name in schema.nodes) {
            let rules = schema.nodes[name].spec.parseDOM;
            if (rules)
                rules.forEach(rule => {
                    insert(rule = copy(rule));
                    if (!(rule.node || rule.ignore || rule.mark))
                        rule.node = name;
                });
        }
        return result;
    }
    /**
    Construct a DOM parser using the parsing rules listed in a
    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
    */
    static fromSchema(schema) {
        return schema.cached.domParser ||
            (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
    }
}
const blockTags = {
    address: true, article: true, aside: true, blockquote: true, canvas: true,
    dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
    footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
    h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
    output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
};
const ignoreTags = {
    head: true, noscript: true, object: true, script: true, style: true, title: true
};
const listTags = { ol: true, ul: true };
// Using a bitfield for node context options
const OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;
function wsOptionsFor(type, preserveWhitespace, base) {
    if (preserveWhitespace != null)
        return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
            (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
    return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;
}
class NodeContext {
    constructor(type, attrs, marks, solid, match, options) {
        this.type = type;
        this.attrs = attrs;
        this.marks = marks;
        this.solid = solid;
        this.options = options;
        this.content = [];
        // Marks applied to the node's children
        this.activeMarks = Mark.none;
        this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
    }
    findWrapping(node) {
        if (!this.match) {
            if (!this.type)
                return [];
            let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
            if (fill) {
                this.match = this.type.contentMatch.matchFragment(fill);
            }
            else {
                let start = this.type.contentMatch, wrap;
                if (wrap = start.findWrapping(node.type)) {
                    this.match = start;
                    return wrap;
                }
                else {
                    return null;
                }
            }
        }
        return this.match.findWrapping(node.type);
    }
    finish(openEnd) {
        if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
            let last = this.content[this.content.length - 1], m;
            if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
                let text = last;
                if (last.text.length == m[0].length)
                    this.content.pop();
                else
                    this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
            }
        }
        let content = Fragment.from(this.content);
        if (!openEnd && this.match)
            content = content.append(this.match.fillBefore(Fragment.empty, true));
        return this.type ? this.type.create(this.attrs, content, this.marks) : content;
    }
    inlineContext(node) {
        if (this.type)
            return this.type.inlineContent;
        if (this.content.length)
            return this.content[0].isInline;
        return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
    }
}
class ParseContext {
    constructor(
    // The parser we are using.
    parser, 
    // The options passed to this parse.
    options, isOpen) {
        this.parser = parser;
        this.options = options;
        this.isOpen = isOpen;
        this.open = 0;
        let topNode = options.topNode, topContext;
        let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
        if (topNode)
            topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
        else if (isOpen)
            topContext = new NodeContext(null, null, Mark.none, true, null, topOptions);
        else
            topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, true, null, topOptions);
        this.nodes = [topContext];
        this.find = options.findPositions;
        this.needsBlock = false;
    }
    get top() {
        return this.nodes[this.open];
    }
    // Add a DOM node to the content. Text is inserted as text node,
    // otherwise, the node is passed to `addElement` or, if it has a
    // `style` attribute, `addElementWithStyles`.
    addDOM(dom, marks) {
        if (dom.nodeType == 3)
            this.addTextNode(dom, marks);
        else if (dom.nodeType == 1)
            this.addElement(dom, marks);
    }
    addTextNode(dom, marks) {
        let value = dom.nodeValue;
        let top = this.top;
        if (top.options & OPT_PRESERVE_WS_FULL ||
            top.inlineContext(dom) ||
            /[^ \t\r\n\u000c]/.test(value)) {
            if (!(top.options & OPT_PRESERVE_WS)) {
                value = value.replace(/[ \t\r\n\u000c]+/g, " ");
                // If this starts with whitespace, and there is no node before it, or
                // a hard break, or a text node that ends with whitespace, strip the
                // leading space.
                if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
                    let nodeBefore = top.content[top.content.length - 1];
                    let domNodeBefore = dom.previousSibling;
                    if (!nodeBefore ||
                        (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                        (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
                        value = value.slice(1);
                }
            }
            else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                value = value.replace(/\r?\n|\r/g, " ");
            }
            else {
                value = value.replace(/\r\n?/g, "\n");
            }
            if (value)
                this.insertNode(this.parser.schema.text(value), marks);
            this.findInText(dom);
        }
        else {
            this.findInside(dom);
        }
    }
    // Try to find a handler for the given tag and use that to parse. If
    // none is found, the element's content nodes are added directly.
    addElement(dom, marks, matchAfter) {
        let name = dom.nodeName.toLowerCase(), ruleID;
        if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
            normalizeList(dom);
        let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
            (ruleID = this.parser.matchTag(dom, this, matchAfter));
        if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
            this.findInside(dom);
            this.ignoreFallback(dom, marks);
        }
        else if (!rule || rule.skip || rule.closeParent) {
            if (rule && rule.closeParent)
                this.open = Math.max(0, this.open - 1);
            else if (rule && rule.skip.nodeType)
                dom = rule.skip;
            let sync, top = this.top, oldNeedsBlock = this.needsBlock;
            if (blockTags.hasOwnProperty(name)) {
                if (top.content.length && top.content[0].isInline && this.open) {
                    this.open--;
                    top = this.top;
                }
                sync = true;
                if (!top.type)
                    this.needsBlock = true;
            }
            else if (!dom.firstChild) {
                this.leafFallback(dom, marks);
                return;
            }
            let innerMarks = rule && rule.skip ? marks : this.readStyles(dom, marks);
            if (innerMarks)
                this.addAll(dom, innerMarks);
            if (sync)
                this.sync(top);
            this.needsBlock = oldNeedsBlock;
        }
        else {
            let innerMarks = this.readStyles(dom, marks);
            if (innerMarks)
                this.addElementByRule(dom, rule, innerMarks, rule.consuming === false ? ruleID : undefined);
        }
    }
    // Called for leaf DOM nodes that would otherwise be ignored
    leafFallback(dom, marks) {
        if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
            this.addTextNode(dom.ownerDocument.createTextNode("\n"), marks);
    }
    // Called for ignored nodes
    ignoreFallback(dom, marks) {
        // Ignored BR nodes should at least create an inline context
        if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
            this.findPlace(this.parser.schema.text("-"), marks);
    }
    // Run any style parser associated with the node's styles. Either
    // return an updated array of marks, or null to indicate some of the
    // styles had a rule with `ignore` set.
    readStyles(dom, marks) {
        let styles = dom.style;
        // Because many properties will only show up in 'normalized' form
        // in `style.item` (i.e. text-decoration becomes
        // text-decoration-line, text-decoration-color, etc), we directly
        // query the styles mentioned in our rules instead of iterating
        // over the items.
        if (styles && styles.length)
            for (let i = 0; i < this.parser.matchedStyles.length; i++) {
                let name = this.parser.matchedStyles[i], value = styles.getPropertyValue(name);
                if (value)
                    for (let after = undefined;;) {
                        let rule = this.parser.matchStyle(name, value, this, after);
                        if (!rule)
                            break;
                        if (rule.ignore)
                            return null;
                        if (rule.clearMark)
                            marks = marks.filter(m => !rule.clearMark(m));
                        else
                            marks = marks.concat(this.parser.schema.marks[rule.mark].create(rule.attrs));
                        if (rule.consuming === false)
                            after = rule;
                        else
                            break;
                    }
            }
        return marks;
    }
    // Look up a handler for the given node. If none are found, return
    // false. Otherwise, apply it, use its return value to drive the way
    // the node's content is wrapped, and return true.
    addElementByRule(dom, rule, marks, continueAfter) {
        let sync, nodeType;
        if (rule.node) {
            nodeType = this.parser.schema.nodes[rule.node];
            if (!nodeType.isLeaf) {
                let inner = this.enter(nodeType, rule.attrs || null, marks, rule.preserveWhitespace);
                if (inner) {
                    sync = true;
                    marks = inner;
                }
            }
            else if (!this.insertNode(nodeType.create(rule.attrs), marks)) {
                this.leafFallback(dom, marks);
            }
        }
        else {
            let markType = this.parser.schema.marks[rule.mark];
            marks = marks.concat(markType.create(rule.attrs));
        }
        let startIn = this.top;
        if (nodeType && nodeType.isLeaf) {
            this.findInside(dom);
        }
        else if (continueAfter) {
            this.addElement(dom, marks, continueAfter);
        }
        else if (rule.getContent) {
            this.findInside(dom);
            rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node, marks));
        }
        else {
            let contentDOM = dom;
            if (typeof rule.contentElement == "string")
                contentDOM = dom.querySelector(rule.contentElement);
            else if (typeof rule.contentElement == "function")
                contentDOM = rule.contentElement(dom);
            else if (rule.contentElement)
                contentDOM = rule.contentElement;
            this.findAround(dom, contentDOM, true);
            this.addAll(contentDOM, marks);
        }
        if (sync && this.sync(startIn))
            this.open--;
    }
    // Add all child nodes between `startIndex` and `endIndex` (or the
    // whole node, if not given). If `sync` is passed, use it to
    // synchronize after every block element.
    addAll(parent, marks, startIndex, endIndex) {
        let index = startIndex || 0;
        for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
            this.findAtPoint(parent, index);
            this.addDOM(dom, marks);
        }
        this.findAtPoint(parent, index);
    }
    // Try to find a way to fit the given node type into the current
    // context. May add intermediate wrappers and/or leave non-solid
    // nodes that we're in.
    findPlace(node, marks) {
        let route, sync;
        for (let depth = this.open; depth >= 0; depth--) {
            let cx = this.nodes[depth];
            let found = cx.findWrapping(node);
            if (found && (!route || route.length > found.length)) {
                route = found;
                sync = cx;
                if (!found.length)
                    break;
            }
            if (cx.solid)
                break;
        }
        if (!route)
            return null;
        this.sync(sync);
        for (let i = 0; i < route.length; i++)
            marks = this.enterInner(route[i], null, marks, false);
        return marks;
    }
    // Try to insert the given node, adjusting the context when needed.
    insertNode(node, marks) {
        if (node.isInline && this.needsBlock && !this.top.type) {
            let block = this.textblockFromContext();
            if (block)
                marks = this.enterInner(block, null, marks);
        }
        let innerMarks = this.findPlace(node, marks);
        if (innerMarks) {
            this.closeExtra();
            let top = this.top;
            if (top.match)
                top.match = top.match.matchType(node.type);
            let nodeMarks = Mark.none;
            for (let m of innerMarks.concat(node.marks))
                if (top.type ? top.type.allowsMarkType(m.type) : markMayApply(m.type, node.type))
                    nodeMarks = m.addToSet(nodeMarks);
            top.content.push(node.mark(nodeMarks));
            return true;
        }
        return false;
    }
    // Try to start a node of the given type, adjusting the context when
    // necessary.
    enter(type, attrs, marks, preserveWS) {
        let innerMarks = this.findPlace(type.create(attrs), marks);
        if (innerMarks)
            innerMarks = this.enterInner(type, attrs, marks, true, preserveWS);
        return innerMarks;
    }
    // Open a node of the given type
    enterInner(type, attrs, marks, solid = false, preserveWS) {
        this.closeExtra();
        let top = this.top;
        top.match = top.match && top.match.matchType(type);
        let options = wsOptionsFor(type, preserveWS, top.options);
        if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)
            options |= OPT_OPEN_LEFT;
        let applyMarks = Mark.none;
        marks = marks.filter(m => {
            if (top.type ? top.type.allowsMarkType(m.type) : markMayApply(m.type, type)) {
                applyMarks = m.addToSet(applyMarks);
                return false;
            }
            return true;
        });
        this.nodes.push(new NodeContext(type, attrs, applyMarks, solid, null, options));
        this.open++;
        return marks;
    }
    // Make sure all nodes above this.open are finished and added to
    // their parents
    closeExtra(openEnd = false) {
        let i = this.nodes.length - 1;
        if (i > this.open) {
            for (; i > this.open; i--)
                this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
            this.nodes.length = this.open + 1;
        }
    }
    finish() {
        this.open = 0;
        this.closeExtra(this.isOpen);
        return this.nodes[0].finish(this.isOpen || this.options.topOpen);
    }
    sync(to) {
        for (let i = this.open; i >= 0; i--)
            if (this.nodes[i] == to) {
                this.open = i;
                return true;
            }
        return false;
    }
    get currentPos() {
        this.closeExtra();
        let pos = 0;
        for (let i = this.open; i >= 0; i--) {
            let content = this.nodes[i].content;
            for (let j = content.length - 1; j >= 0; j--)
                pos += content[j].nodeSize;
            if (i)
                pos++;
        }
        return pos;
    }
    findAtPoint(parent, offset) {
        if (this.find)
            for (let i = 0; i < this.find.length; i++) {
                if (this.find[i].node == parent && this.find[i].offset == offset)
                    this.find[i].pos = this.currentPos;
            }
    }
    findInside(parent) {
        if (this.find)
            for (let i = 0; i < this.find.length; i++) {
                if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
                    this.find[i].pos = this.currentPos;
            }
    }
    findAround(parent, content, before) {
        if (parent != content && this.find)
            for (let i = 0; i < this.find.length; i++) {
                if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
                    let pos = content.compareDocumentPosition(this.find[i].node);
                    if (pos & (before ? 2 : 4))
                        this.find[i].pos = this.currentPos;
                }
            }
    }
    findInText(textNode) {
        if (this.find)
            for (let i = 0; i < this.find.length; i++) {
                if (this.find[i].node == textNode)
                    this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
            }
    }
    // Determines whether the given context string matches this context.
    matchesContext(context) {
        if (context.indexOf("|") > -1)
            return context.split(/\s*\|\s*/).some(this.matchesContext, this);
        let parts = context.split("/");
        let option = this.options.context;
        let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
        let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
        let match = (i, depth) => {
            for (; i >= 0; i--) {
                let part = parts[i];
                if (part == "") {
                    if (i == parts.length - 1 || i == 0)
                        continue;
                    for (; depth >= minDepth; depth--)
                        if (match(i - 1, depth))
                            return true;
                    return false;
                }
                else {
                    let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type
                        : option && depth >= minDepth ? option.node(depth - minDepth).type
                            : null;
                    if (!next || (next.name != part && next.groups.indexOf(part) == -1))
                        return false;
                    depth--;
                }
            }
            return true;
        };
        return match(parts.length - 1, this.open);
    }
    textblockFromContext() {
        let $context = this.options.context;
        if ($context)
            for (let d = $context.depth; d >= 0; d--) {
                let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                if (deflt && deflt.isTextblock && deflt.defaultAttrs)
                    return deflt;
            }
        for (let name in this.parser.schema.nodes) {
            let type = this.parser.schema.nodes[name];
            if (type.isTextblock && type.defaultAttrs)
                return type;
        }
    }
}
// Kludge to work around directly nested list nodes produced by some
// tools and allowed by browsers to mean that the nested list is
// actually part of the list item above it.
function normalizeList(dom) {
    for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
        let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
        if (name && listTags.hasOwnProperty(name) && prevItem) {
            prevItem.appendChild(child);
            child = prevItem;
        }
        else if (name == "li") {
            prevItem = child;
        }
        else if (name) {
            prevItem = null;
        }
    }
}
// Apply a CSS selector.
function matches(dom, selector) {
    return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
}
function copy(obj) {
    let copy = {};
    for (let prop in obj)
        copy[prop] = obj[prop];
    return copy;
}
// Used when finding a mark at the top level of a fragment parse.
// Checks whether it would be reasonable to apply a given mark type to
// a given node, by looking at the way the mark occurs in the schema.
function markMayApply(markType, nodeType) {
    let nodes = nodeType.schema.nodes;
    for (let name in nodes) {
        let parent = nodes[name];
        if (!parent.allowsMarkType(markType))
            continue;
        let seen = [], scan = (match) => {
            seen.push(match);
            for (let i = 0; i < match.edgeCount; i++) {
                let { type, next } = match.edge(i);
                if (type == nodeType)
                    return true;
                if (seen.indexOf(next) < 0 && scan(next))
                    return true;
            }
        };
        if (scan(parent.contentMatch))
            return true;
    }
}

/**
A DOM serializer knows how to convert ProseMirror nodes and
marks of various types to DOM nodes.
*/
class DOMSerializer {
    /**
    Create a serializer. `nodes` should map node names to functions
    that take a node and return a description of the corresponding
    DOM. `marks` does the same for mark names, but also gets an
    argument that tells it whether the mark's content is block or
    inline content (for typical use, it'll always be inline). A mark
    serializer may be `null` to indicate that marks of that type
    should not be serialized.
    */
    constructor(
    /**
    The node serialization functions.
    */
    nodes, 
    /**
    The mark serialization functions.
    */
    marks) {
        this.nodes = nodes;
        this.marks = marks;
    }
    /**
    Serialize the content of this fragment to a DOM fragment. When
    not in the browser, the `document` option, containing a DOM
    document, should be passed so that the serializer can create
    nodes.
    */
    serializeFragment(fragment, options = {}, target) {
        if (!target)
            target = doc$1(options).createDocumentFragment();
        let top = target, active = [];
        fragment.forEach(node => {
            if (active.length || node.marks.length) {
                let keep = 0, rendered = 0;
                while (keep < active.length && rendered < node.marks.length) {
                    let next = node.marks[rendered];
                    if (!this.marks[next.type.name]) {
                        rendered++;
                        continue;
                    }
                    if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
                        break;
                    keep++;
                    rendered++;
                }
                while (keep < active.length)
                    top = active.pop()[1];
                while (rendered < node.marks.length) {
                    let add = node.marks[rendered++];
                    let markDOM = this.serializeMark(add, node.isInline, options);
                    if (markDOM) {
                        active.push([add, top]);
                        top.appendChild(markDOM.dom);
                        top = markDOM.contentDOM || markDOM.dom;
                    }
                }
            }
            top.appendChild(this.serializeNodeInner(node, options));
        });
        return target;
    }
    /**
    @internal
    */
    serializeNodeInner(node, options) {
        let { dom, contentDOM } = renderSpec(doc$1(options), this.nodes[node.type.name](node), null, node.attrs);
        if (contentDOM) {
            if (node.isLeaf)
                throw new RangeError("Content hole not allowed in a leaf node spec");
            this.serializeFragment(node.content, options, contentDOM);
        }
        return dom;
    }
    /**
    Serialize this node to a DOM node. This can be useful when you
    need to serialize a part of a document, as opposed to the whole
    document. To serialize a whole document, use
    [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
    its [content](https://prosemirror.net/docs/ref/#model.Node.content).
    */
    serializeNode(node, options = {}) {
        let dom = this.serializeNodeInner(node, options);
        for (let i = node.marks.length - 1; i >= 0; i--) {
            let wrap = this.serializeMark(node.marks[i], node.isInline, options);
            if (wrap) {
                (wrap.contentDOM || wrap.dom).appendChild(dom);
                dom = wrap.dom;
            }
        }
        return dom;
    }
    /**
    @internal
    */
    serializeMark(mark, inline, options = {}) {
        let toDOM = this.marks[mark.type.name];
        return toDOM && renderSpec(doc$1(options), toDOM(mark, inline), null, mark.attrs);
    }
    static renderSpec(doc, structure, xmlNS = null, blockArraysIn) {
        return renderSpec(doc, structure, xmlNS, blockArraysIn);
    }
    /**
    Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
    properties in a schema's node and mark specs.
    */
    static fromSchema(schema) {
        return schema.cached.domSerializer ||
            (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
    }
    /**
    Gather the serializers in a schema's node specs into an object.
    This can be useful as a base to build a custom serializer from.
    */
    static nodesFromSchema(schema) {
        let result = gatherToDOM(schema.nodes);
        if (!result.text)
            result.text = node => node.text;
        return result;
    }
    /**
    Gather the serializers in a schema's mark specs into an object.
    */
    static marksFromSchema(schema) {
        return gatherToDOM(schema.marks);
    }
}
function gatherToDOM(obj) {
    let result = {};
    for (let name in obj) {
        let toDOM = obj[name].spec.toDOM;
        if (toDOM)
            result[name] = toDOM;
    }
    return result;
}
function doc$1(options) {
    return options.document || window.document;
}
const suspiciousAttributeCache = new WeakMap();
function suspiciousAttributes(attrs) {
    let value = suspiciousAttributeCache.get(attrs);
    if (value === undefined)
        suspiciousAttributeCache.set(attrs, value = suspiciousAttributesInner(attrs));
    return value;
}
function suspiciousAttributesInner(attrs) {
    let result = null;
    function scan(value) {
        if (value && typeof value == "object") {
            if (Array.isArray(value)) {
                if (typeof value[0] == "string") {
                    if (!result)
                        result = [];
                    result.push(value);
                }
                else {
                    for (let i = 0; i < value.length; i++)
                        scan(value[i]);
                }
            }
            else {
                for (let prop in value)
                    scan(value[prop]);
            }
        }
    }
    scan(attrs);
    return result;
}
function renderSpec(doc, structure, xmlNS, blockArraysIn) {
    if (typeof structure == "string")
        return { dom: doc.createTextNode(structure) };
    if (structure.nodeType != null)
        return { dom: structure };
    if (structure.dom && structure.dom.nodeType != null)
        return structure;
    let tagName = structure[0], suspicious;
    if (typeof tagName != "string")
        throw new RangeError("Invalid array passed to renderSpec");
    if (blockArraysIn && (suspicious = suspiciousAttributes(blockArraysIn)) &&
        suspicious.indexOf(structure) > -1)
        throw new RangeError("Using an array from an attribute object as a DOM spec. This may be an attempted cross site scripting attack.");
    let space = tagName.indexOf(" ");
    if (space > 0) {
        xmlNS = tagName.slice(0, space);
        tagName = tagName.slice(space + 1);
    }
    let contentDOM;
    let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));
    let attrs = structure[1], start = 1;
    if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
        start = 2;
        for (let name in attrs)
            if (attrs[name] != null) {
                let space = name.indexOf(" ");
                if (space > 0)
                    dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);
                else
                    dom.setAttribute(name, attrs[name]);
            }
    }
    for (let i = start; i < structure.length; i++) {
        let child = structure[i];
        if (child === 0) {
            if (i < structure.length - 1 || i > start)
                throw new RangeError("Content hole must be the only child of its parent node");
            return { dom, contentDOM: dom };
        }
        else {
            let { dom: inner, contentDOM: innerContent } = renderSpec(doc, child, xmlNS, blockArraysIn);
            dom.appendChild(inner);
            if (innerContent) {
                if (contentDOM)
                    throw new RangeError("Multiple content holes");
                contentDOM = innerContent;
            }
        }
    }
    return { dom, contentDOM };
}

// Recovery values encode a range index and an offset. They are
// represented as numbers, because tons of them will be created when
// mapping, for example, a large number of decorations. The number's
// lower 16 bits provide the index, the remaining bits the offset.
//
// Note: We intentionally don't use bit shift operators to en- and
// decode these, since those clip to 32 bits, which we might in rare
// cases want to overflow. A 64-bit float can represent 48-bit
// integers precisely.
const lower16 = 0xffff;
const factor16 = Math.pow(2, 16);
function makeRecover(index, offset) { return index + offset * factor16; }
function recoverIndex(value) { return value & lower16; }
function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
/**
An object representing a mapped position with extra
information.
*/
class MapResult {
    /**
    @internal
    */
    constructor(
    /**
    The mapped version of the position.
    */
    pos, 
    /**
    @internal
    */
    delInfo, 
    /**
    @internal
    */
    recover) {
        this.pos = pos;
        this.delInfo = delInfo;
        this.recover = recover;
    }
    /**
    Tells you whether the position was deleted, that is, whether the
    step removed the token on the side queried (via the `assoc`)
    argument from the document.
    */
    get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
    /**
    Tells you whether the token before the mapped position was deleted.
    */
    get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
    /**
    True when the token after the mapped position was deleted.
    */
    get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
    /**
    Tells whether any of the steps mapped through deletes across the
    position (including both the token before and after the
    position).
    */
    get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
}
/**
A map describing the deletions and insertions made by a step, which
can be used to find the correspondence between positions in the
pre-step version of a document and the same position in the
post-step version.
*/
class StepMap {
    /**
    Create a position map. The modifications to the document are
    represented as an array of numbers, in which each group of three
    represents a modified chunk as `[start, oldSize, newSize]`.
    */
    constructor(
    /**
    @internal
    */
    ranges, 
    /**
    @internal
    */
    inverted = false) {
        this.ranges = ranges;
        this.inverted = inverted;
        if (!ranges.length && StepMap.empty)
            return StepMap.empty;
    }
    /**
    @internal
    */
    recover(value) {
        let diff = 0, index = recoverIndex(value);
        if (!this.inverted)
            for (let i = 0; i < index; i++)
                diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
        return this.ranges[index * 3] + diff + recoverOffset(value);
    }
    mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
    map(pos, assoc = 1) { return this._map(pos, assoc, true); }
    /**
    @internal
    */
    _map(pos, assoc, simple) {
        let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
        for (let i = 0; i < this.ranges.length; i += 3) {
            let start = this.ranges[i] - (this.inverted ? diff : 0);
            if (start > pos)
                break;
            let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
            if (pos <= end) {
                let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                let result = start + diff + (side < 0 ? 0 : newSize);
                if (simple)
                    return result;
                let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                if (assoc < 0 ? pos != start : pos != end)
                    del |= DEL_SIDE;
                return new MapResult(result, del, recover);
            }
            diff += newSize - oldSize;
        }
        return simple ? pos + diff : new MapResult(pos + diff, 0, null);
    }
    /**
    @internal
    */
    touches(pos, recover) {
        let diff = 0, index = recoverIndex(recover);
        let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
        for (let i = 0; i < this.ranges.length; i += 3) {
            let start = this.ranges[i] - (this.inverted ? diff : 0);
            if (start > pos)
                break;
            let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
            if (pos <= end && i == index * 3)
                return true;
            diff += this.ranges[i + newIndex] - oldSize;
        }
        return false;
    }
    /**
    Calls the given function on each of the changed ranges included in
    this map.
    */
    forEach(f) {
        let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
        for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
            let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
            let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
            f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
            diff += newSize - oldSize;
        }
    }
    /**
    Create an inverted version of this map. The result can be used to
    map positions in the post-step document to the pre-step document.
    */
    invert() {
        return new StepMap(this.ranges, !this.inverted);
    }
    /**
    @internal
    */
    toString() {
        return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
    }
    /**
    Create a map that moves all positions by offset `n` (which may be
    negative). This can be useful when applying steps meant for a
    sub-document to a larger document, or vice-versa.
    */
    static offset(n) {
        return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
    }
}
/**
A StepMap that contains no changed ranges.
*/
StepMap.empty = new StepMap([]);
/**
A mapping represents a pipeline of zero or more [step
maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
handling mapping positions through a series of steps in which some
steps are inverted versions of earlier steps. (This comes up when
‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
collaboration or history management.)
*/
class Mapping {
    /**
    Create a new mapping with the given position maps.
    */
    constructor(
    /**
    The step maps in this mapping.
    */
    maps = [], 
    /**
    @internal
    */
    mirror, 
    /**
    The starting position in the `maps` array, used when `map` or
    `mapResult` is called.
    */
    from = 0, 
    /**
    The end position in the `maps` array.
    */
    to = maps.length) {
        this.maps = maps;
        this.mirror = mirror;
        this.from = from;
        this.to = to;
    }
    /**
    Create a mapping that maps only through a part of this one.
    */
    slice(from = 0, to = this.maps.length) {
        return new Mapping(this.maps, this.mirror, from, to);
    }
    /**
    @internal
    */
    copy() {
        return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
    }
    /**
    Add a step map to the end of this mapping. If `mirrors` is
    given, it should be the index of the step map that is the mirror
    image of this one.
    */
    appendMap(map, mirrors) {
        this.to = this.maps.push(map);
        if (mirrors != null)
            this.setMirror(this.maps.length - 1, mirrors);
    }
    /**
    Add all the step maps in a given mapping to this one (preserving
    mirroring information).
    */
    appendMapping(mapping) {
        for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
            let mirr = mapping.getMirror(i);
            this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
        }
    }
    /**
    Finds the offset of the step map that mirrors the map at the
    given offset, in this mapping (as per the second argument to
    `appendMap`).
    */
    getMirror(n) {
        if (this.mirror)
            for (let i = 0; i < this.mirror.length; i++)
                if (this.mirror[i] == n)
                    return this.mirror[i + (i % 2 ? -1 : 1)];
    }
    /**
    @internal
    */
    setMirror(n, m) {
        if (!this.mirror)
            this.mirror = [];
        this.mirror.push(n, m);
    }
    /**
    Append the inverse of the given mapping to this one.
    */
    appendMappingInverted(mapping) {
        for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
            let mirr = mapping.getMirror(i);
            this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
        }
    }
    /**
    Create an inverted version of this mapping.
    */
    invert() {
        let inverse = new Mapping;
        inverse.appendMappingInverted(this);
        return inverse;
    }
    /**
    Map a position through this mapping.
    */
    map(pos, assoc = 1) {
        if (this.mirror)
            return this._map(pos, assoc, true);
        for (let i = this.from; i < this.to; i++)
            pos = this.maps[i].map(pos, assoc);
        return pos;
    }
    /**
    Map a position through this mapping, returning a mapping
    result.
    */
    mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
    /**
    @internal
    */
    _map(pos, assoc, simple) {
        let delInfo = 0;
        for (let i = this.from; i < this.to; i++) {
            let map = this.maps[i], result = map.mapResult(pos, assoc);
            if (result.recover != null) {
                let corr = this.getMirror(i);
                if (corr != null && corr > i && corr < this.to) {
                    i = corr;
                    pos = this.maps[corr].recover(result.recover);
                    continue;
                }
            }
            delInfo |= result.delInfo;
            pos = result.pos;
        }
        return simple ? pos : new MapResult(pos, delInfo, null);
    }
}

const stepsByID = Object.create(null);
/**
A step object represents an atomic change. It generally applies
only to the document it was created for, since the positions
stored in it will only make sense for that document.

New steps are defined by creating classes that extend `Step`,
overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
methods, and registering your class with a unique
JSON-serialization identifier using
[`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
*/
class Step {
    /**
    Get the step map that represents the changes made by this step,
    and which can be used to transform between positions in the old
    and the new document.
    */
    getMap() { return StepMap.empty; }
    /**
    Try to merge this step with another one, to be applied directly
    after it. Returns the merged step when possible, null if the
    steps can't be merged.
    */
    merge(other) { return null; }
    /**
    Deserialize a step from its JSON representation. Will call
    through to the step class' own implementation of this method.
    */
    static fromJSON(schema, json) {
        if (!json || !json.stepType)
            throw new RangeError("Invalid input for Step.fromJSON");
        let type = stepsByID[json.stepType];
        if (!type)
            throw new RangeError(`No step type ${json.stepType} defined`);
        return type.fromJSON(schema, json);
    }
    /**
    To be able to serialize steps to JSON, each step needs a string
    ID to attach to its JSON representation. Use this method to
    register an ID for your step classes. Try to pick something
    that's unlikely to clash with steps from other modules.
    */
    static jsonID(id, stepClass) {
        if (id in stepsByID)
            throw new RangeError("Duplicate use of step JSON ID " + id);
        stepsByID[id] = stepClass;
        stepClass.prototype.jsonID = id;
        return stepClass;
    }
}
/**
The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
new document or a failure value.
*/
class StepResult {
    /**
    @internal
    */
    constructor(
    /**
    The transformed document, if successful.
    */
    doc, 
    /**
    The failure message, if unsuccessful.
    */
    failed) {
        this.doc = doc;
        this.failed = failed;
    }
    /**
    Create a successful step result.
    */
    static ok(doc) { return new StepResult(doc, null); }
    /**
    Create a failed step result.
    */
    static fail(message) { return new StepResult(null, message); }
    /**
    Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
    arguments. Create a successful result if it succeeds, and a
    failed one if it throws a `ReplaceError`.
    */
    static fromReplace(doc, from, to, slice) {
        try {
            return StepResult.ok(doc.replace(from, to, slice));
        }
        catch (e) {
            if (e instanceof ReplaceError)
                return StepResult.fail(e.message);
            throw e;
        }
    }
}

function mapFragment(fragment, f, parent) {
    let mapped = [];
    for (let i = 0; i < fragment.childCount; i++) {
        let child = fragment.child(i);
        if (child.content.size)
            child = child.copy(mapFragment(child.content, f, child));
        if (child.isInline)
            child = f(child, parent, i);
        mapped.push(child);
    }
    return Fragment.fromArray(mapped);
}
/**
Add a mark to all inline content between two positions.
*/
class AddMarkStep extends Step {
    /**
    Create a mark step.
    */
    constructor(
    /**
    The start of the marked range.
    */
    from, 
    /**
    The end of the marked range.
    */
    to, 
    /**
    The mark to add.
    */
    mark) {
        super();
        this.from = from;
        this.to = to;
        this.mark = mark;
    }
    apply(doc) {
        let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
        let parent = $from.node($from.sharedDepth(this.to));
        let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {
            if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                return node;
            return node.mark(this.mark.addToSet(node.marks));
        }, parent), oldSlice.openStart, oldSlice.openEnd);
        return StepResult.fromReplace(doc, this.from, this.to, slice);
    }
    invert() {
        return new RemoveMarkStep(this.from, this.to, this.mark);
    }
    map(mapping) {
        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        if (from.deleted && to.deleted || from.pos >= to.pos)
            return null;
        return new AddMarkStep(from.pos, to.pos, this.mark);
    }
    merge(other) {
        if (other instanceof AddMarkStep &&
            other.mark.eq(this.mark) &&
            this.from <= other.to && this.to >= other.from)
            return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
        return null;
    }
    toJSON() {
        return { stepType: "addMark", mark: this.mark.toJSON(),
            from: this.from, to: this.to };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number")
            throw new RangeError("Invalid input for AddMarkStep.fromJSON");
        return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
    }
}
Step.jsonID("addMark", AddMarkStep);
/**
Remove a mark from all inline content between two positions.
*/
class RemoveMarkStep extends Step {
    /**
    Create a mark-removing step.
    */
    constructor(
    /**
    The start of the unmarked range.
    */
    from, 
    /**
    The end of the unmarked range.
    */
    to, 
    /**
    The mark to remove.
    */
    mark) {
        super();
        this.from = from;
        this.to = to;
        this.mark = mark;
    }
    apply(doc) {
        let oldSlice = doc.slice(this.from, this.to);
        let slice = new Slice(mapFragment(oldSlice.content, node => {
            return node.mark(this.mark.removeFromSet(node.marks));
        }, doc), oldSlice.openStart, oldSlice.openEnd);
        return StepResult.fromReplace(doc, this.from, this.to, slice);
    }
    invert() {
        return new AddMarkStep(this.from, this.to, this.mark);
    }
    map(mapping) {
        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        if (from.deleted && to.deleted || from.pos >= to.pos)
            return null;
        return new RemoveMarkStep(from.pos, to.pos, this.mark);
    }
    merge(other) {
        if (other instanceof RemoveMarkStep &&
            other.mark.eq(this.mark) &&
            this.from <= other.to && this.to >= other.from)
            return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
        return null;
    }
    toJSON() {
        return { stepType: "removeMark", mark: this.mark.toJSON(),
            from: this.from, to: this.to };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number")
            throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
        return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
    }
}
Step.jsonID("removeMark", RemoveMarkStep);
/**
Add a mark to a specific node.
*/
class AddNodeMarkStep extends Step {
    /**
    Create a node mark step.
    */
    constructor(
    /**
    The position of the target node.
    */
    pos, 
    /**
    The mark to add.
    */
    mark) {
        super();
        this.pos = pos;
        this.mark = mark;
    }
    apply(doc) {
        let node = doc.nodeAt(this.pos);
        if (!node)
            return StepResult.fail("No node at mark step's position");
        let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
        return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
    }
    invert(doc) {
        let node = doc.nodeAt(this.pos);
        if (node) {
            let newSet = this.mark.addToSet(node.marks);
            if (newSet.length == node.marks.length) {
                for (let i = 0; i < node.marks.length; i++)
                    if (!node.marks[i].isInSet(newSet))
                        return new AddNodeMarkStep(this.pos, node.marks[i]);
                return new AddNodeMarkStep(this.pos, this.mark);
            }
        }
        return new RemoveNodeMarkStep(this.pos, this.mark);
    }
    map(mapping) {
        let pos = mapping.mapResult(this.pos, 1);
        return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
    }
    toJSON() {
        return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
        if (typeof json.pos != "number")
            throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
        return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
    }
}
Step.jsonID("addNodeMark", AddNodeMarkStep);
/**
Remove a mark from a specific node.
*/
class RemoveNodeMarkStep extends Step {
    /**
    Create a mark-removing step.
    */
    constructor(
    /**
    The position of the target node.
    */
    pos, 
    /**
    The mark to remove.
    */
    mark) {
        super();
        this.pos = pos;
        this.mark = mark;
    }
    apply(doc) {
        let node = doc.nodeAt(this.pos);
        if (!node)
            return StepResult.fail("No node at mark step's position");
        let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
        return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
    }
    invert(doc) {
        let node = doc.nodeAt(this.pos);
        if (!node || !this.mark.isInSet(node.marks))
            return this;
        return new AddNodeMarkStep(this.pos, this.mark);
    }
    map(mapping) {
        let pos = mapping.mapResult(this.pos, 1);
        return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
    }
    toJSON() {
        return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
        if (typeof json.pos != "number")
            throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
        return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
    }
}
Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

/**
Replace a part of the document with a slice of new content.
*/
class ReplaceStep extends Step {
    /**
    The given `slice` should fit the 'gap' between `from` and
    `to`—the depths must line up, and the surrounding nodes must be
    able to be joined with the open sides of the slice. When
    `structure` is true, the step will fail if the content between
    from and to is not just a sequence of closing and then opening
    tokens (this is to guard against rebased replace steps
    overwriting something they weren't supposed to).
    */
    constructor(
    /**
    The start position of the replaced range.
    */
    from, 
    /**
    The end position of the replaced range.
    */
    to, 
    /**
    The slice to insert.
    */
    slice, 
    /**
    @internal
    */
    structure = false) {
        super();
        this.from = from;
        this.to = to;
        this.slice = slice;
        this.structure = structure;
    }
    apply(doc) {
        if (this.structure && contentBetween(doc, this.from, this.to))
            return StepResult.fail("Structure replace would overwrite content");
        return StepResult.fromReplace(doc, this.from, this.to, this.slice);
    }
    getMap() {
        return new StepMap([this.from, this.to - this.from, this.slice.size]);
    }
    invert(doc) {
        return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
    }
    map(mapping) {
        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        if (from.deletedAcross && to.deletedAcross)
            return null;
        return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
    }
    merge(other) {
        if (!(other instanceof ReplaceStep) || other.structure || this.structure)
            return null;
        if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
            let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
            return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
        }
        else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
            let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
            return new ReplaceStep(other.from, this.to, slice, this.structure);
        }
        else {
            return null;
        }
    }
    toJSON() {
        let json = { stepType: "replace", from: this.from, to: this.to };
        if (this.slice.size)
            json.slice = this.slice.toJSON();
        if (this.structure)
            json.structure = true;
        return json;
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number")
            throw new RangeError("Invalid input for ReplaceStep.fromJSON");
        return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
    }
}
Step.jsonID("replace", ReplaceStep);
/**
Replace a part of the document with a slice of content, but
preserve a range of the replaced content by moving it into the
slice.
*/
class ReplaceAroundStep extends Step {
    /**
    Create a replace-around step with the given range and gap.
    `insert` should be the point in the slice into which the content
    of the gap should be moved. `structure` has the same meaning as
    it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
    */
    constructor(
    /**
    The start position of the replaced range.
    */
    from, 
    /**
    The end position of the replaced range.
    */
    to, 
    /**
    The start of preserved range.
    */
    gapFrom, 
    /**
    The end of preserved range.
    */
    gapTo, 
    /**
    The slice to insert.
    */
    slice, 
    /**
    The position in the slice where the preserved range should be
    inserted.
    */
    insert, 
    /**
    @internal
    */
    structure = false) {
        super();
        this.from = from;
        this.to = to;
        this.gapFrom = gapFrom;
        this.gapTo = gapTo;
        this.slice = slice;
        this.insert = insert;
        this.structure = structure;
    }
    apply(doc) {
        if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
            contentBetween(doc, this.gapTo, this.to)))
            return StepResult.fail("Structure gap-replace would overwrite content");
        let gap = doc.slice(this.gapFrom, this.gapTo);
        if (gap.openStart || gap.openEnd)
            return StepResult.fail("Gap is not a flat range");
        let inserted = this.slice.insertAt(this.insert, gap.content);
        if (!inserted)
            return StepResult.fail("Content does not fit in gap");
        return StepResult.fromReplace(doc, this.from, this.to, inserted);
    }
    getMap() {
        return new StepMap([this.from, this.gapFrom - this.from, this.insert,
            this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
    }
    invert(doc) {
        let gap = this.gapTo - this.gapFrom;
        return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
    }
    map(mapping) {
        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        let gapFrom = this.from == this.gapFrom ? from.pos : mapping.map(this.gapFrom, -1);
        let gapTo = this.to == this.gapTo ? to.pos : mapping.map(this.gapTo, 1);
        if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
            return null;
        return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
    }
    toJSON() {
        let json = { stepType: "replaceAround", from: this.from, to: this.to,
            gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
        if (this.slice.size)
            json.slice = this.slice.toJSON();
        if (this.structure)
            json.structure = true;
        return json;
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number" ||
            typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
            throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
        return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
    }
}
Step.jsonID("replaceAround", ReplaceAroundStep);
function contentBetween(doc, from, to) {
    let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
    while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
        depth--;
        dist--;
    }
    if (dist > 0) {
        let next = $from.node(depth).maybeChild($from.indexAfter(depth));
        while (dist > 0) {
            if (!next || next.isLeaf)
                return true;
            next = next.firstChild;
            dist--;
        }
    }
    return false;
}

function addMark(tr, from, to, mark) {
    let removed = [], added = [];
    let removing, adding;
    tr.doc.nodesBetween(from, to, (node, pos, parent) => {
        if (!node.isInline)
            return;
        let marks = node.marks;
        if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
            let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
            let newSet = mark.addToSet(marks);
            for (let i = 0; i < marks.length; i++) {
                if (!marks[i].isInSet(newSet)) {
                    if (removing && removing.to == start && removing.mark.eq(marks[i]))
                        removing.to = end;
                    else
                        removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                }
            }
            if (adding && adding.to == start)
                adding.to = end;
            else
                added.push(adding = new AddMarkStep(start, end, mark));
        }
    });
    removed.forEach(s => tr.step(s));
    added.forEach(s => tr.step(s));
}
function removeMark(tr, from, to, mark) {
    let matched = [], step = 0;
    tr.doc.nodesBetween(from, to, (node, pos) => {
        if (!node.isInline)
            return;
        step++;
        let toRemove = null;
        if (mark instanceof MarkType) {
            let set = node.marks, found;
            while (found = mark.isInSet(set)) {
                (toRemove || (toRemove = [])).push(found);
                set = found.removeFromSet(set);
            }
        }
        else if (mark) {
            if (mark.isInSet(node.marks))
                toRemove = [mark];
        }
        else {
            toRemove = node.marks;
        }
        if (toRemove && toRemove.length) {
            let end = Math.min(pos + node.nodeSize, to);
            for (let i = 0; i < toRemove.length; i++) {
                let style = toRemove[i], found;
                for (let j = 0; j < matched.length; j++) {
                    let m = matched[j];
                    if (m.step == step - 1 && style.eq(matched[j].style))
                        found = m;
                }
                if (found) {
                    found.to = end;
                    found.step = step;
                }
                else {
                    matched.push({ style, from: Math.max(pos, from), to: end, step });
                }
            }
        }
    });
    matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
}
function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch, clearNewlines = true) {
    let node = tr.doc.nodeAt(pos);
    let replSteps = [], cur = pos + 1;
    for (let i = 0; i < node.childCount; i++) {
        let child = node.child(i), end = cur + child.nodeSize;
        let allowed = match.matchType(child.type);
        if (!allowed) {
            replSteps.push(new ReplaceStep(cur, end, Slice.empty));
        }
        else {
            match = allowed;
            for (let j = 0; j < child.marks.length; j++)
                if (!parentType.allowsMarkType(child.marks[j].type))
                    tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
            if (clearNewlines && child.isText && parentType.whitespace != "pre") {
                let m, newline = /\r?\n|\r/g, slice;
                while (m = newline.exec(child.text)) {
                    if (!slice)
                        slice = new Slice(Fragment.from(parentType.schema.text(" ", parentType.allowedMarks(child.marks))), 0, 0);
                    replSteps.push(new ReplaceStep(cur + m.index, cur + m.index + m[0].length, slice));
                }
            }
        }
        cur = end;
    }
    if (!match.validEnd) {
        let fill = match.fillBefore(Fragment.empty, true);
        tr.replace(cur, cur, new Slice(fill, 0, 0));
    }
    for (let i = replSteps.length - 1; i >= 0; i--)
        tr.step(replSteps[i]);
}

function canCut(node, start, end) {
    return (start == 0 || node.canReplace(start, node.childCount)) &&
        (end == node.childCount || node.canReplace(0, end));
}
/**
Try to find a target depth to which the content in the given range
can be lifted. Will not go across
[isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
*/
function liftTarget(range) {
    let parent = range.parent;
    let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
    for (let depth = range.depth;; --depth) {
        let node = range.$from.node(depth);
        let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
        if (depth < range.depth && node.canReplace(index, endIndex, content))
            return depth;
        if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
            break;
    }
    return null;
}
function lift$1(tr, range, target) {
    let { $from, $to, depth } = range;
    let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
    let start = gapStart, end = gapEnd;
    let before = Fragment.empty, openStart = 0;
    for (let d = depth, splitting = false; d > target; d--)
        if (splitting || $from.index(d) > 0) {
            splitting = true;
            before = Fragment.from($from.node(d).copy(before));
            openStart++;
        }
        else {
            start--;
        }
    let after = Fragment.empty, openEnd = 0;
    for (let d = depth, splitting = false; d > target; d--)
        if (splitting || $to.after(d + 1) < $to.end(d)) {
            splitting = true;
            after = Fragment.from($to.node(d).copy(after));
            openEnd++;
        }
        else {
            end++;
        }
    tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
}
/**
Try to find a valid way to wrap the content in the given range in a
node of the given type. May introduce extra nodes around and inside
the wrapper node, if necessary. Returns null if no valid wrapping
could be found. When `innerRange` is given, that range's content is
used as the content to fit into the wrapping, instead of the
content of `range`.
*/
function findWrapping(range, nodeType, attrs = null, innerRange = range) {
    let around = findWrappingOutside(range, nodeType);
    let inner = around && findWrappingInside(innerRange, nodeType);
    if (!inner)
        return null;
    return around.map(withAttrs)
        .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
}
function withAttrs(type) { return { type, attrs: null }; }
function findWrappingOutside(range, type) {
    let { parent, startIndex, endIndex } = range;
    let around = parent.contentMatchAt(startIndex).findWrapping(type);
    if (!around)
        return null;
    let outer = around.length ? around[0] : type;
    return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
}
function findWrappingInside(range, type) {
    let { parent, startIndex, endIndex } = range;
    let inner = parent.child(startIndex);
    let inside = type.contentMatch.findWrapping(inner.type);
    if (!inside)
        return null;
    let lastType = inside.length ? inside[inside.length - 1] : type;
    let innerMatch = lastType.contentMatch;
    for (let i = startIndex; innerMatch && i < endIndex; i++)
        innerMatch = innerMatch.matchType(parent.child(i).type);
    if (!innerMatch || !innerMatch.validEnd)
        return null;
    return inside;
}
function wrap(tr, range, wrappers) {
    let content = Fragment.empty;
    for (let i = wrappers.length - 1; i >= 0; i--) {
        if (content.size) {
            let match = wrappers[i].type.contentMatch.matchFragment(content);
            if (!match || !match.validEnd)
                throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
        }
        content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
    }
    let start = range.start, end = range.end;
    tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
}
function setBlockType$1(tr, from, to, type, attrs) {
    if (!type.isTextblock)
        throw new RangeError("Type given to setBlockType should be a textblock");
    let mapFrom = tr.steps.length;
    tr.doc.nodesBetween(from, to, (node, pos) => {
        let attrsHere = typeof attrs == "function" ? attrs(node) : attrs;
        if (node.isTextblock && !node.hasMarkup(type, attrsHere) &&
            canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
            let convertNewlines = null;
            if (type.schema.linebreakReplacement) {
                let pre = type.whitespace == "pre", supportLinebreak = !!type.contentMatch.matchType(type.schema.linebreakReplacement);
                if (pre && !supportLinebreak)
                    convertNewlines = false;
                else if (!pre && supportLinebreak)
                    convertNewlines = true;
            }
            // Ensure all markup that isn't allowed in the new node type is cleared
            if (convertNewlines === false)
                replaceLinebreaks(tr, node, pos, mapFrom);
            clearIncompatible(tr, tr.mapping.slice(mapFrom).map(pos, 1), type, undefined, convertNewlines === null);
            let mapping = tr.mapping.slice(mapFrom);
            let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
            tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrsHere, null, node.marks)), 0, 0), 1, true));
            if (convertNewlines === true)
                replaceNewlines(tr, node, pos, mapFrom);
            return false;
        }
    });
}
function replaceNewlines(tr, node, pos, mapFrom) {
    node.forEach((child, offset) => {
        if (child.isText) {
            let m, newline = /\r?\n|\r/g;
            while (m = newline.exec(child.text)) {
                let start = tr.mapping.slice(mapFrom).map(pos + 1 + offset + m.index);
                tr.replaceWith(start, start + 1, node.type.schema.linebreakReplacement.create());
            }
        }
    });
}
function replaceLinebreaks(tr, node, pos, mapFrom) {
    node.forEach((child, offset) => {
        if (child.type == child.type.schema.linebreakReplacement) {
            let start = tr.mapping.slice(mapFrom).map(pos + 1 + offset);
            tr.replaceWith(start, start + 1, node.type.schema.text("\n"));
        }
    });
}
function canChangeType(doc, pos, type) {
    let $pos = doc.resolve(pos), index = $pos.index();
    return $pos.parent.canReplaceWith(index, index + 1, type);
}
/**
Change the type, attributes, and/or marks of the node at `pos`.
When `type` isn't given, the existing node type is preserved,
*/
function setNodeMarkup(tr, pos, type, attrs, marks) {
    let node = tr.doc.nodeAt(pos);
    if (!node)
        throw new RangeError("No node at given position");
    if (!type)
        type = node.type;
    let newNode = type.create(attrs, null, marks || node.marks);
    if (node.isLeaf)
        return tr.replaceWith(pos, pos + node.nodeSize, newNode);
    if (!type.validContent(node.content))
        throw new RangeError("Invalid content for node type " + type.name);
    tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
}
/**
Check whether splitting at the given position is allowed.
*/
function canSplit(doc, pos, depth = 1, typesAfter) {
    let $pos = doc.resolve(pos), base = $pos.depth - depth;
    let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
    if (base < 0 || $pos.parent.type.spec.isolating ||
        !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
        !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
        return false;
    for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
        let node = $pos.node(d), index = $pos.index(d);
        if (node.type.spec.isolating)
            return false;
        let rest = node.content.cutByIndex(index, node.childCount);
        let overrideChild = typesAfter && typesAfter[i + 1];
        if (overrideChild)
            rest = rest.replaceChild(0, overrideChild.type.create(overrideChild.attrs));
        let after = (typesAfter && typesAfter[i]) || node;
        if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
            return false;
    }
    let index = $pos.indexAfter(base);
    let baseType = typesAfter && typesAfter[0];
    return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
}
function split(tr, pos, depth = 1, typesAfter) {
    let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
    for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
        before = Fragment.from($pos.node(d).copy(before));
        let typeAfter = typesAfter && typesAfter[i];
        after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
    }
    tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
}
/**
Test whether the blocks before and after a given position can be
joined.
*/
function canJoin(doc, pos) {
    let $pos = doc.resolve(pos), index = $pos.index();
    return joinable($pos.nodeBefore, $pos.nodeAfter) &&
        $pos.parent.canReplace(index, index + 1);
}
function joinable(a, b) {
    return !!(a && b && !a.isLeaf && a.canAppend(b));
}
/**
Find an ancestor of the given position that can be joined to the
block before (or after if `dir` is positive). Returns the joinable
point, if any.
*/
function joinPoint(doc, pos, dir = -1) {
    let $pos = doc.resolve(pos);
    for (let d = $pos.depth;; d--) {
        let before, after, index = $pos.index(d);
        if (d == $pos.depth) {
            before = $pos.nodeBefore;
            after = $pos.nodeAfter;
        }
        else if (dir > 0) {
            before = $pos.node(d + 1);
            index++;
            after = $pos.node(d).maybeChild(index);
        }
        else {
            before = $pos.node(d).maybeChild(index - 1);
            after = $pos.node(d + 1);
        }
        if (before && !before.isTextblock && joinable(before, after) &&
            $pos.node(d).canReplace(index, index + 1))
            return pos;
        if (d == 0)
            break;
        pos = dir < 0 ? $pos.before(d) : $pos.after(d);
    }
}
function join(tr, pos, depth) {
    let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
    tr.step(step);
}
/**
Try to find a point where a node of the given type can be inserted
near `pos`, by searching up the node hierarchy when `pos` itself
isn't a valid place but is at the start or end of a node. Return
null if no position was found.
*/
function insertPoint(doc, pos, nodeType) {
    let $pos = doc.resolve(pos);
    if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
        return pos;
    if ($pos.parentOffset == 0)
        for (let d = $pos.depth - 1; d >= 0; d--) {
            let index = $pos.index(d);
            if ($pos.node(d).canReplaceWith(index, index, nodeType))
                return $pos.before(d + 1);
            if (index > 0)
                return null;
        }
    if ($pos.parentOffset == $pos.parent.content.size)
        for (let d = $pos.depth - 1; d >= 0; d--) {
            let index = $pos.indexAfter(d);
            if ($pos.node(d).canReplaceWith(index, index, nodeType))
                return $pos.after(d + 1);
            if (index < $pos.node(d).childCount)
                return null;
        }
    return null;
}
/**
Finds a position at or around the given position where the given
slice can be inserted. Will look at parent nodes' nearest boundary
and try there, even if the original position wasn't directly at the
start or end of that node. Returns null when no position was found.
*/
function dropPoint(doc, pos, slice) {
    let $pos = doc.resolve(pos);
    if (!slice.content.size)
        return pos;
    let content = slice.content;
    for (let i = 0; i < slice.openStart; i++)
        content = content.firstChild.content;
    for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
        for (let d = $pos.depth; d >= 0; d--) {
            let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
            let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
            let parent = $pos.node(d), fits = false;
            if (pass == 1) {
                fits = parent.canReplace(insertPos, insertPos, content);
            }
            else {
                let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
            }
            if (fits)
                return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
        }
    }
    return null;
}

/**
‘Fit’ a slice into a given position in the document, producing a
[step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
there's no meaningful way to insert the slice here, or inserting it
would be a no-op (an empty slice over an empty range).
*/
function replaceStep(doc, from, to = from, slice = Slice.empty) {
    if (from == to && !slice.size)
        return null;
    let $from = doc.resolve(from), $to = doc.resolve(to);
    // Optimization -- avoid work if it's obvious that it's not needed.
    if (fitsTrivially($from, $to, slice))
        return new ReplaceStep(from, to, slice);
    return new Fitter($from, $to, slice).fit();
}
function fitsTrivially($from, $to, slice) {
    return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
        $from.parent.canReplace($from.index(), $to.index(), slice.content);
}
// Algorithm for 'placing' the elements of a slice into a gap:
//
// We consider the content of each node that is open to the left to be
// independently placeable. I.e. in <p("foo"), p("bar")>, when the
// paragraph on the left is open, "foo" can be placed (somewhere on
// the left side of the replacement gap) independently from p("bar").
//
// This class tracks the state of the placement progress in the
// following properties:
//
//  - `frontier` holds a stack of `{type, match}` objects that
//    represent the open side of the replacement. It starts at
//    `$from`, then moves forward as content is placed, and is finally
//    reconciled with `$to`.
//
//  - `unplaced` is a slice that represents the content that hasn't
//    been placed yet.
//
//  - `placed` is a fragment of placed content. Its open-start value
//    is implicit in `$from`, and its open-end value in `frontier`.
class Fitter {
    constructor($from, $to, unplaced) {
        this.$from = $from;
        this.$to = $to;
        this.unplaced = unplaced;
        this.frontier = [];
        this.placed = Fragment.empty;
        for (let i = 0; i <= $from.depth; i++) {
            let node = $from.node(i);
            this.frontier.push({
                type: node.type,
                match: node.contentMatchAt($from.indexAfter(i))
            });
        }
        for (let i = $from.depth; i > 0; i--)
            this.placed = Fragment.from($from.node(i).copy(this.placed));
    }
    get depth() { return this.frontier.length - 1; }
    fit() {
        // As long as there's unplaced content, try to place some of it.
        // If that fails, either increase the open score of the unplaced
        // slice, or drop nodes from it, and then try again.
        while (this.unplaced.size) {
            let fit = this.findFittable();
            if (fit)
                this.placeNodes(fit);
            else
                this.openMore() || this.dropNode();
        }
        // When there's inline content directly after the frontier _and_
        // directly after `this.$to`, we must generate a `ReplaceAround`
        // step that pulls that content into the node after the frontier.
        // That means the fitting must be done to the end of the textblock
        // node after `this.$to`, not `this.$to` itself.
        let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
        let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
        if (!$to)
            return null;
        // If closing to `$to` succeeded, create a step
        let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
        while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
            content = content.firstChild.content;
            openStart--;
            openEnd--;
        }
        let slice = new Slice(content, openStart, openEnd);
        if (moveInline > -1)
            return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
        if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
            return new ReplaceStep($from.pos, $to.pos, slice);
        return null;
    }
    // Find a position on the start spine of `this.unplaced` that has
    // content that can be moved somewhere on the frontier. Returns two
    // depths, one for the slice and one for the frontier.
    findFittable() {
        let startDepth = this.unplaced.openStart;
        for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {
            let node = cur.firstChild;
            if (cur.childCount > 1)
                openEnd = 0;
            if (node.type.spec.isolating && openEnd <= d) {
                startDepth = d;
                break;
            }
            cur = node.content;
        }
        // Only try wrapping nodes (pass 2) after finding a place without
        // wrapping failed.
        for (let pass = 1; pass <= 2; pass++) {
            for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                let fragment, parent = null;
                if (sliceDepth) {
                    parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                    fragment = parent.content;
                }
                else {
                    fragment = this.unplaced.content;
                }
                let first = fragment.firstChild;
                for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                    let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                    // In pass 1, if the next node matches, or there is no next
                    // node but the parents look compatible, we've found a
                    // place.
                    if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))
                        : parent && type.compatibleContent(parent.type)))
                        return { sliceDepth, frontierDepth, parent, inject };
                    // In pass 2, look for a set of wrapping nodes that make
                    // `first` fit here.
                    else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                        return { sliceDepth, frontierDepth, parent, wrap };
                    // Don't continue looking further up if the parent node
                    // would fit here.
                    if (parent && match.matchType(parent.type))
                        break;
                }
            }
        }
    }
    openMore() {
        let { content, openStart, openEnd } = this.unplaced;
        let inner = contentAt(content, openStart);
        if (!inner.childCount || inner.firstChild.isLeaf)
            return false;
        this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
        return true;
    }
    dropNode() {
        let { content, openStart, openEnd } = this.unplaced;
        let inner = contentAt(content, openStart);
        if (inner.childCount <= 1 && openStart > 0) {
            let openAtEnd = content.size - openStart <= openStart + inner.size;
            this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
        }
        else {
            this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
        }
    }
    // Move content from the unplaced slice at `sliceDepth` to the
    // frontier node at `frontierDepth`. Close that frontier node when
    // applicable.
    placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
        while (this.depth > frontierDepth)
            this.closeFrontierNode();
        if (wrap)
            for (let i = 0; i < wrap.length; i++)
                this.openFrontierNode(wrap[i]);
        let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
        let openStart = slice.openStart - sliceDepth;
        let taken = 0, add = [];
        let { match, type } = this.frontier[frontierDepth];
        if (inject) {
            for (let i = 0; i < inject.childCount; i++)
                add.push(inject.child(i));
            match = match.matchFragment(inject);
        }
        // Computes the amount of (end) open nodes at the end of the
        // fragment. When 0, the parent is open, but no more. When
        // negative, nothing is open.
        let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
        // Scan over the fragment, fitting as many child nodes as
        // possible.
        while (taken < fragment.childCount) {
            let next = fragment.child(taken), matches = match.matchType(next.type);
            if (!matches)
                break;
            taken++;
            if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                match = matches;
                add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
            }
        }
        let toEnd = taken == fragment.childCount;
        if (!toEnd)
            openEndCount = -1;
        this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
        this.frontier[frontierDepth].match = match;
        // If the parent types match, and the entire node was moved, and
        // it's not open, close this frontier node right away.
        if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
            this.closeFrontierNode();
        // Add new frontier nodes for any open nodes at the end.
        for (let i = 0, cur = fragment; i < openEndCount; i++) {
            let node = cur.lastChild;
            this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
            cur = node.content;
        }
        // Update `this.unplaced`. Drop the entire node from which we
        // placed it we got to its end, otherwise just drop the placed
        // nodes.
        this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
            : sliceDepth == 0 ? Slice.empty
                : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
    }
    mustMoveInline() {
        if (!this.$to.parent.isTextblock)
            return -1;
        let top = this.frontier[this.depth], level;
        if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
            (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
            return -1;
        let { depth } = this.$to, after = this.$to.after(depth);
        while (depth > 1 && after == this.$to.end(--depth))
            ++after;
        return after;
    }
    findCloseLevel($to) {
        scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
            let { match, type } = this.frontier[i];
            let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
            let fit = contentAfterFits($to, i, type, match, dropInner);
            if (!fit)
                continue;
            for (let d = i - 1; d >= 0; d--) {
                let { match, type } = this.frontier[d];
                let matches = contentAfterFits($to, d, type, match, true);
                if (!matches || matches.childCount)
                    continue scan;
            }
            return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
        }
    }
    close($to) {
        let close = this.findCloseLevel($to);
        if (!close)
            return null;
        while (this.depth > close.depth)
            this.closeFrontierNode();
        if (close.fit.childCount)
            this.placed = addToFragment(this.placed, close.depth, close.fit);
        $to = close.move;
        for (let d = close.depth + 1; d <= $to.depth; d++) {
            let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
            this.openFrontierNode(node.type, node.attrs, add);
        }
        return $to;
    }
    openFrontierNode(type, attrs = null, content) {
        let top = this.frontier[this.depth];
        top.match = top.match.matchType(type);
        this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
        this.frontier.push({ type, match: type.contentMatch });
    }
    closeFrontierNode() {
        let open = this.frontier.pop();
        let add = open.match.fillBefore(Fragment.empty, true);
        if (add.childCount)
            this.placed = addToFragment(this.placed, this.frontier.length, add);
    }
}
function dropFromFragment(fragment, depth, count) {
    if (depth == 0)
        return fragment.cutByIndex(count, fragment.childCount);
    return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
}
function addToFragment(fragment, depth, content) {
    if (depth == 0)
        return fragment.append(content);
    return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
}
function contentAt(fragment, depth) {
    for (let i = 0; i < depth; i++)
        fragment = fragment.firstChild.content;
    return fragment;
}
function closeNodeStart(node, openStart, openEnd) {
    if (openStart <= 0)
        return node;
    let frag = node.content;
    if (openStart > 1)
        frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
    if (openStart > 0) {
        frag = node.type.contentMatch.fillBefore(frag).append(frag);
        if (openEnd <= 0)
            frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
    }
    return node.copy(frag);
}
function contentAfterFits($to, depth, type, match, open) {
    let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
    if (index == node.childCount && !type.compatibleContent(node.type))
        return null;
    let fit = match.fillBefore(node.content, true, index);
    return fit && !invalidMarks(type, node.content, index) ? fit : null;
}
function invalidMarks(type, fragment, start) {
    for (let i = start; i < fragment.childCount; i++)
        if (!type.allowsMarks(fragment.child(i).marks))
            return true;
    return false;
}
function definesContent(type) {
    return type.spec.defining || type.spec.definingForContent;
}
function replaceRange(tr, from, to, slice) {
    if (!slice.size)
        return tr.deleteRange(from, to);
    let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
    if (fitsTrivially($from, $to, slice))
        return tr.step(new ReplaceStep(from, to, slice));
    let targetDepths = coveredDepths($from, tr.doc.resolve(to));
    // Can't replace the whole document, so remove 0 if it's present
    if (targetDepths[targetDepths.length - 1] == 0)
        targetDepths.pop();
    // Negative numbers represent not expansion over the whole node at
    // that depth, but replacing from $from.before(-D) to $to.pos.
    let preferredTarget = -($from.depth + 1);
    targetDepths.unshift(preferredTarget);
    // This loop picks a preferred target depth, if one of the covering
    // depths is not outside of a defining node, and adds negative
    // depths for any depth that has $from at its start and does not
    // cross a defining node.
    for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
        let spec = $from.node(d).type.spec;
        if (spec.defining || spec.definingAsContext || spec.isolating)
            break;
        if (targetDepths.indexOf(d) > -1)
            preferredTarget = d;
        else if ($from.before(d) == pos)
            targetDepths.splice(1, 0, -d);
    }
    // Try to fit each possible depth of the slice into each possible
    // target depth, starting with the preferred depths.
    let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
    let leftNodes = [], preferredDepth = slice.openStart;
    for (let content = slice.content, i = 0;; i++) {
        let node = content.firstChild;
        leftNodes.push(node);
        if (i == slice.openStart)
            break;
        content = node.content;
    }
    // Back up preferredDepth to cover defining textblocks directly
    // above it, possibly skipping a non-defining textblock.
    for (let d = preferredDepth - 1; d >= 0; d--) {
        let leftNode = leftNodes[d], def = definesContent(leftNode.type);
        if (def && !leftNode.sameMarkup($from.node(Math.abs(preferredTarget) - 1)))
            preferredDepth = d;
        else if (def || !leftNode.type.isTextblock)
            break;
    }
    for (let j = slice.openStart; j >= 0; j--) {
        let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
        let insert = leftNodes[openDepth];
        if (!insert)
            continue;
        for (let i = 0; i < targetDepths.length; i++) {
            // Loop over possible expansion levels, starting with the
            // preferred one
            let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
            if (targetDepth < 0) {
                expand = false;
                targetDepth = -targetDepth;
            }
            let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
            if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
        }
    }
    let startSteps = tr.steps.length;
    for (let i = targetDepths.length - 1; i >= 0; i--) {
        tr.replace(from, to, slice);
        if (tr.steps.length > startSteps)
            break;
        let depth = targetDepths[i];
        if (depth < 0)
            continue;
        from = $from.before(depth);
        to = $to.after(depth);
    }
}
function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
    if (depth < oldOpen) {
        let first = fragment.firstChild;
        fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
    }
    if (depth > newOpen) {
        let match = parent.contentMatchAt(0);
        let start = match.fillBefore(fragment).append(fragment);
        fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
    }
    return fragment;
}
function replaceRangeWith(tr, from, to, node) {
    if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
        let point = insertPoint(tr.doc, from, node.type);
        if (point != null)
            from = to = point;
    }
    tr.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0));
}
function deleteRange(tr, from, to) {
    let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
    let covered = coveredDepths($from, $to);
    for (let i = 0; i < covered.length; i++) {
        let depth = covered[i], last = i == covered.length - 1;
        if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
            return tr.delete($from.start(depth), $to.end(depth));
        if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
            return tr.delete($from.before(depth), $to.after(depth));
    }
    for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
        if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
            return tr.delete($from.before(d), to);
    }
    tr.delete(from, to);
}
// Returns an array of all depths for which $from - $to spans the
// whole content of the nodes at that depth.
function coveredDepths($from, $to) {
    let result = [], minDepth = Math.min($from.depth, $to.depth);
    for (let d = minDepth; d >= 0; d--) {
        let start = $from.start(d);
        if (start < $from.pos - ($from.depth - d) ||
            $to.end(d) > $to.pos + ($to.depth - d) ||
            $from.node(d).type.spec.isolating ||
            $to.node(d).type.spec.isolating)
            break;
        if (start == $to.start(d) ||
            (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                d && $to.start(d - 1) == start - 1))
            result.push(d);
    }
    return result;
}

/**
Update an attribute in a specific node.
*/
class AttrStep extends Step {
    /**
    Construct an attribute step.
    */
    constructor(
    /**
    The position of the target node.
    */
    pos, 
    /**
    The attribute to set.
    */
    attr, 
    // The attribute's new value.
    value) {
        super();
        this.pos = pos;
        this.attr = attr;
        this.value = value;
    }
    apply(doc) {
        let node = doc.nodeAt(this.pos);
        if (!node)
            return StepResult.fail("No node at attribute step's position");
        let attrs = Object.create(null);
        for (let name in node.attrs)
            attrs[name] = node.attrs[name];
        attrs[this.attr] = this.value;
        let updated = node.type.create(attrs, null, node.marks);
        return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
    }
    getMap() {
        return StepMap.empty;
    }
    invert(doc) {
        return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
    }
    map(mapping) {
        let pos = mapping.mapResult(this.pos, 1);
        return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
    }
    toJSON() {
        return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
    }
    static fromJSON(schema, json) {
        if (typeof json.pos != "number" || typeof json.attr != "string")
            throw new RangeError("Invalid input for AttrStep.fromJSON");
        return new AttrStep(json.pos, json.attr, json.value);
    }
}
Step.jsonID("attr", AttrStep);
/**
Update an attribute in the doc node.
*/
class DocAttrStep extends Step {
    /**
    Construct an attribute step.
    */
    constructor(
    /**
    The attribute to set.
    */
    attr, 
    // The attribute's new value.
    value) {
        super();
        this.attr = attr;
        this.value = value;
    }
    apply(doc) {
        let attrs = Object.create(null);
        for (let name in doc.attrs)
            attrs[name] = doc.attrs[name];
        attrs[this.attr] = this.value;
        let updated = doc.type.create(attrs, doc.content, doc.marks);
        return StepResult.ok(updated);
    }
    getMap() {
        return StepMap.empty;
    }
    invert(doc) {
        return new DocAttrStep(this.attr, doc.attrs[this.attr]);
    }
    map(mapping) {
        return this;
    }
    toJSON() {
        return { stepType: "docAttr", attr: this.attr, value: this.value };
    }
    static fromJSON(schema, json) {
        if (typeof json.attr != "string")
            throw new RangeError("Invalid input for DocAttrStep.fromJSON");
        return new DocAttrStep(json.attr, json.value);
    }
}
Step.jsonID("docAttr", DocAttrStep);

/**
@internal
*/
let TransformError = class extends Error {
};
TransformError = function TransformError(message) {
    let err = Error.call(this, message);
    err.__proto__ = TransformError.prototype;
    return err;
};
TransformError.prototype = Object.create(Error.prototype);
TransformError.prototype.constructor = TransformError;
TransformError.prototype.name = "TransformError";
/**
Abstraction to build up and track an array of
[steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

Most transforming methods return the `Transform` object itself, so
that they can be chained.
*/
class Transform {
    /**
    Create a transform that starts with the given document.
    */
    constructor(
    /**
    The current document (the result of applying the steps in the
    transform).
    */
    doc) {
        this.doc = doc;
        /**
        The steps in this transform.
        */
        this.steps = [];
        /**
        The documents before each of the steps.
        */
        this.docs = [];
        /**
        A mapping with the maps for each of the steps in this transform.
        */
        this.mapping = new Mapping;
    }
    /**
    The starting document.
    */
    get before() { return this.docs.length ? this.docs[0] : this.doc; }
    /**
    Apply a new step in this transform, saving the result. Throws an
    error when the step fails.
    */
    step(step) {
        let result = this.maybeStep(step);
        if (result.failed)
            throw new TransformError(result.failed);
        return this;
    }
    /**
    Try to apply a step in this transformation, ignoring it if it
    fails. Returns the step result.
    */
    maybeStep(step) {
        let result = step.apply(this.doc);
        if (!result.failed)
            this.addStep(step, result.doc);
        return result;
    }
    /**
    True when the document has been changed (when there are any
    steps).
    */
    get docChanged() {
        return this.steps.length > 0;
    }
    /**
    @internal
    */
    addStep(step, doc) {
        this.docs.push(this.doc);
        this.steps.push(step);
        this.mapping.appendMap(step.getMap());
        this.doc = doc;
    }
    /**
    Replace the part of the document between `from` and `to` with the
    given `slice`.
    */
    replace(from, to = from, slice = Slice.empty) {
        let step = replaceStep(this.doc, from, to, slice);
        if (step)
            this.step(step);
        return this;
    }
    /**
    Replace the given range with the given content, which may be a
    fragment, node, or array of nodes.
    */
    replaceWith(from, to, content) {
        return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));
    }
    /**
    Delete the content between the given positions.
    */
    delete(from, to) {
        return this.replace(from, to, Slice.empty);
    }
    /**
    Insert the given content at the given position.
    */
    insert(pos, content) {
        return this.replaceWith(pos, pos, content);
    }
    /**
    Replace a range of the document with a given slice, using
    `from`, `to`, and the slice's
    [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
    than fixed start and end points. This method may grow the
    replaced area or close open nodes in the slice in order to get a
    fit that is more in line with WYSIWYG expectations, by dropping
    fully covered parent nodes of the replaced region when they are
    marked [non-defining as
    context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
    open parent node from the slice that _is_ marked as [defining
    its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
    
    This is the method, for example, to handle paste. The similar
    [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
    primitive tool which will _not_ move the start and end of its given
    range, and is useful in situations where you need more precise
    control over what happens.
    */
    replaceRange(from, to, slice) {
        replaceRange(this, from, to, slice);
        return this;
    }
    /**
    Replace the given range with a node, but use `from` and `to` as
    hints, rather than precise positions. When from and to are the same
    and are at the start or end of a parent node in which the given
    node doesn't fit, this method may _move_ them out towards a parent
    that does allow the given node to be placed. When the given range
    completely covers a parent node, this method may completely replace
    that parent node.
    */
    replaceRangeWith(from, to, node) {
        replaceRangeWith(this, from, to, node);
        return this;
    }
    /**
    Delete the given range, expanding it to cover fully covered
    parent nodes until a valid replace is found.
    */
    deleteRange(from, to) {
        deleteRange(this, from, to);
        return this;
    }
    /**
    Split the content in the given range off from its parent, if there
    is sibling content before or after it, and move it up the tree to
    the depth specified by `target`. You'll probably want to use
    [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
    sure the lift is valid.
    */
    lift(range, target) {
        lift$1(this, range, target);
        return this;
    }
    /**
    Join the blocks around the given position. If depth is 2, their
    last and first siblings are also joined, and so on.
    */
    join(pos, depth = 1) {
        join(this, pos, depth);
        return this;
    }
    /**
    Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
    The wrappers are assumed to be valid in this position, and should
    probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
    */
    wrap(range, wrappers) {
        wrap(this, range, wrappers);
        return this;
    }
    /**
    Set the type of all textblocks (partly) between `from` and `to` to
    the given node type with the given attributes.
    */
    setBlockType(from, to = from, type, attrs = null) {
        setBlockType$1(this, from, to, type, attrs);
        return this;
    }
    /**
    Change the type, attributes, and/or marks of the node at `pos`.
    When `type` isn't given, the existing node type is preserved,
    */
    setNodeMarkup(pos, type, attrs = null, marks) {
        setNodeMarkup(this, pos, type, attrs, marks);
        return this;
    }
    /**
    Set a single attribute on a given node to a new value.
    The `pos` addresses the document content. Use `setDocAttribute`
    to set attributes on the document itself.
    */
    setNodeAttribute(pos, attr, value) {
        this.step(new AttrStep(pos, attr, value));
        return this;
    }
    /**
    Set a single attribute on the document to a new value.
    */
    setDocAttribute(attr, value) {
        this.step(new DocAttrStep(attr, value));
        return this;
    }
    /**
    Add a mark to the node at position `pos`.
    */
    addNodeMark(pos, mark) {
        this.step(new AddNodeMarkStep(pos, mark));
        return this;
    }
    /**
    Remove a mark (or a mark of the given type) from the node at
    position `pos`.
    */
    removeNodeMark(pos, mark) {
        if (!(mark instanceof Mark)) {
            let node = this.doc.nodeAt(pos);
            if (!node)
                throw new RangeError("No node at position " + pos);
            mark = mark.isInSet(node.marks);
            if (!mark)
                return this;
        }
        this.step(new RemoveNodeMarkStep(pos, mark));
        return this;
    }
    /**
    Split the node at the given position, and optionally, if `depth` is
    greater than one, any number of nodes above that. By default, the
    parts split off will inherit the node type of the original node.
    This can be changed by passing an array of types and attributes to
    use after the split.
    */
    split(pos, depth = 1, typesAfter) {
        split(this, pos, depth, typesAfter);
        return this;
    }
    /**
    Add the given mark to the inline content between `from` and `to`.
    */
    addMark(from, to, mark) {
        addMark(this, from, to, mark);
        return this;
    }
    /**
    Remove marks from inline nodes between `from` and `to`. When
    `mark` is a single mark, remove precisely that mark. When it is
    a mark type, remove all marks of that type. When it is null,
    remove all marks of any type.
    */
    removeMark(from, to, mark) {
        removeMark(this, from, to, mark);
        return this;
    }
    /**
    Removes all marks and nodes from the content of the node at
    `pos` that don't match the given new parent node type. Accepts
    an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
    third argument.
    */
    clearIncompatible(pos, parentType, match) {
        clearIncompatible(this, pos, parentType, match);
        return this;
    }
}

const classesById = Object.create(null);
/**
Superclass for editor selections. Every selection type should
extend this. Should not be instantiated directly.
*/
class Selection {
    /**
    Initialize a selection with the head and anchor and ranges. If no
    ranges are given, constructs a single range across `$anchor` and
    `$head`.
    */
    constructor(
    /**
    The resolved anchor of the selection (the side that stays in
    place when the selection is modified).
    */
    $anchor, 
    /**
    The resolved head of the selection (the side that moves when
    the selection is modified).
    */
    $head, ranges) {
        this.$anchor = $anchor;
        this.$head = $head;
        this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
    }
    /**
    The selection's anchor, as an unresolved position.
    */
    get anchor() { return this.$anchor.pos; }
    /**
    The selection's head.
    */
    get head() { return this.$head.pos; }
    /**
    The lower bound of the selection's main range.
    */
    get from() { return this.$from.pos; }
    /**
    The upper bound of the selection's main range.
    */
    get to() { return this.$to.pos; }
    /**
    The resolved lower  bound of the selection's main range.
    */
    get $from() {
        return this.ranges[0].$from;
    }
    /**
    The resolved upper bound of the selection's main range.
    */
    get $to() {
        return this.ranges[0].$to;
    }
    /**
    Indicates whether the selection contains any content.
    */
    get empty() {
        let ranges = this.ranges;
        for (let i = 0; i < ranges.length; i++)
            if (ranges[i].$from.pos != ranges[i].$to.pos)
                return false;
        return true;
    }
    /**
    Get the content of this selection as a slice.
    */
    content() {
        return this.$from.doc.slice(this.from, this.to, true);
    }
    /**
    Replace the selection with a slice or, if no slice is given,
    delete the selection. Will append to the given transaction.
    */
    replace(tr, content = Slice.empty) {
        // Put the new selection at the position after the inserted
        // content. When that ended in an inline node, search backwards,
        // to get the position after that node. If not, search forward.
        let lastNode = content.content.lastChild, lastParent = null;
        for (let i = 0; i < content.openEnd; i++) {
            lastParent = lastNode;
            lastNode = lastNode.lastChild;
        }
        let mapFrom = tr.steps.length, ranges = this.ranges;
        for (let i = 0; i < ranges.length; i++) {
            let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
            tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);
            if (i == 0)
                selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
        }
    }
    /**
    Replace the selection with the given node, appending the changes
    to the given transaction.
    */
    replaceWith(tr, node) {
        let mapFrom = tr.steps.length, ranges = this.ranges;
        for (let i = 0; i < ranges.length; i++) {
            let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
            let from = mapping.map($from.pos), to = mapping.map($to.pos);
            if (i) {
                tr.deleteRange(from, to);
            }
            else {
                tr.replaceRangeWith(from, to, node);
                selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
            }
        }
    }
    /**
    Find a valid cursor or leaf node selection starting at the given
    position and searching back if `dir` is negative, and forward if
    positive. When `textOnly` is true, only consider cursor
    selections. Will return null when no valid selection position is
    found.
    */
    static findFrom($pos, dir, textOnly = false) {
        let inner = $pos.parent.inlineContent ? new TextSelection($pos)
            : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
        if (inner)
            return inner;
        for (let depth = $pos.depth - 1; depth >= 0; depth--) {
            let found = dir < 0
                ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
            if (found)
                return found;
        }
        return null;
    }
    /**
    Find a valid cursor or leaf node selection near the given
    position. Searches forward first by default, but if `bias` is
    negative, it will search backwards first.
    */
    static near($pos, bias = 1) {
        return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
    }
    /**
    Find the cursor or leaf node selection closest to the start of
    the given document. Will return an
    [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
    exists.
    */
    static atStart(doc) {
        return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
    }
    /**
    Find the cursor or leaf node selection closest to the end of the
    given document.
    */
    static atEnd(doc) {
        return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
    }
    /**
    Deserialize the JSON representation of a selection. Must be
    implemented for custom classes (as a static class method).
    */
    static fromJSON(doc, json) {
        if (!json || !json.type)
            throw new RangeError("Invalid input for Selection.fromJSON");
        let cls = classesById[json.type];
        if (!cls)
            throw new RangeError(`No selection type ${json.type} defined`);
        return cls.fromJSON(doc, json);
    }
    /**
    To be able to deserialize selections from JSON, custom selection
    classes must register themselves with an ID string, so that they
    can be disambiguated. Try to pick something that's unlikely to
    clash with classes from other modules.
    */
    static jsonID(id, selectionClass) {
        if (id in classesById)
            throw new RangeError("Duplicate use of selection JSON ID " + id);
        classesById[id] = selectionClass;
        selectionClass.prototype.jsonID = id;
        return selectionClass;
    }
    /**
    Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
    which is a value that can be mapped without having access to a
    current document, and later resolved to a real selection for a
    given document again. (This is used mostly by the history to
    track and restore old selections.) The default implementation of
    this method just converts the selection to a text selection and
    returns the bookmark for that.
    */
    getBookmark() {
        return TextSelection.between(this.$anchor, this.$head).getBookmark();
    }
}
Selection.prototype.visible = true;
/**
Represents a selected range in a document.
*/
class SelectionRange {
    /**
    Create a range.
    */
    constructor(
    /**
    The lower bound of the range.
    */
    $from, 
    /**
    The upper bound of the range.
    */
    $to) {
        this.$from = $from;
        this.$to = $to;
    }
}
let warnedAboutTextSelection = false;
function checkTextSelection($pos) {
    if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
        warnedAboutTextSelection = true;
        console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
    }
}
/**
A text selection represents a classical editor selection, with a
head (the moving side) and anchor (immobile side), both of which
point into textblock nodes. It can be empty (a regular cursor
position).
*/
class TextSelection extends Selection {
    /**
    Construct a text selection between the given points.
    */
    constructor($anchor, $head = $anchor) {
        checkTextSelection($anchor);
        checkTextSelection($head);
        super($anchor, $head);
    }
    /**
    Returns a resolved position if this is a cursor selection (an
    empty text selection), and null otherwise.
    */
    get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }
    map(doc, mapping) {
        let $head = doc.resolve(mapping.map(this.head));
        if (!$head.parent.inlineContent)
            return Selection.near($head);
        let $anchor = doc.resolve(mapping.map(this.anchor));
        return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
    }
    replace(tr, content = Slice.empty) {
        super.replace(tr, content);
        if (content == Slice.empty) {
            let marks = this.$from.marksAcross(this.$to);
            if (marks)
                tr.ensureMarks(marks);
        }
    }
    eq(other) {
        return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
    }
    getBookmark() {
        return new TextBookmark(this.anchor, this.head);
    }
    toJSON() {
        return { type: "text", anchor: this.anchor, head: this.head };
    }
    /**
    @internal
    */
    static fromJSON(doc, json) {
        if (typeof json.anchor != "number" || typeof json.head != "number")
            throw new RangeError("Invalid input for TextSelection.fromJSON");
        return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
    }
    /**
    Create a text selection from non-resolved positions.
    */
    static create(doc, anchor, head = anchor) {
        let $anchor = doc.resolve(anchor);
        return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
    }
    /**
    Return a text selection that spans the given positions or, if
    they aren't text positions, find a text selection near them.
    `bias` determines whether the method searches forward (default)
    or backwards (negative number) first. Will fall back to calling
    [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
    doesn't contain a valid text position.
    */
    static between($anchor, $head, bias) {
        let dPos = $anchor.pos - $head.pos;
        if (!bias || dPos)
            bias = dPos >= 0 ? 1 : -1;
        if (!$head.parent.inlineContent) {
            let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
            if (found)
                $head = found.$head;
            else
                return Selection.near($head, bias);
        }
        if (!$anchor.parent.inlineContent) {
            if (dPos == 0) {
                $anchor = $head;
            }
            else {
                $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                if (($anchor.pos < $head.pos) != (dPos < 0))
                    $anchor = $head;
            }
        }
        return new TextSelection($anchor, $head);
    }
}
Selection.jsonID("text", TextSelection);
class TextBookmark {
    constructor(anchor, head) {
        this.anchor = anchor;
        this.head = head;
    }
    map(mapping) {
        return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
    }
    resolve(doc) {
        return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
    }
}
/**
A node selection is a selection that points at a single node. All
nodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the
target of a node selection. In such a selection, `from` and `to`
point directly before and after the selected node, `anchor` equals
`from`, and `head` equals `to`..
*/
class NodeSelection extends Selection {
    /**
    Create a node selection. Does not verify the validity of its
    argument.
    */
    constructor($pos) {
        let node = $pos.nodeAfter;
        let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
        super($pos, $end);
        this.node = node;
    }
    map(doc, mapping) {
        let { deleted, pos } = mapping.mapResult(this.anchor);
        let $pos = doc.resolve(pos);
        if (deleted)
            return Selection.near($pos);
        return new NodeSelection($pos);
    }
    content() {
        return new Slice(Fragment.from(this.node), 0, 0);
    }
    eq(other) {
        return other instanceof NodeSelection && other.anchor == this.anchor;
    }
    toJSON() {
        return { type: "node", anchor: this.anchor };
    }
    getBookmark() { return new NodeBookmark(this.anchor); }
    /**
    @internal
    */
    static fromJSON(doc, json) {
        if (typeof json.anchor != "number")
            throw new RangeError("Invalid input for NodeSelection.fromJSON");
        return new NodeSelection(doc.resolve(json.anchor));
    }
    /**
    Create a node selection from non-resolved positions.
    */
    static create(doc, from) {
        return new NodeSelection(doc.resolve(from));
    }
    /**
    Determines whether the given node may be selected as a node
    selection.
    */
    static isSelectable(node) {
        return !node.isText && node.type.spec.selectable !== false;
    }
}
NodeSelection.prototype.visible = false;
Selection.jsonID("node", NodeSelection);
class NodeBookmark {
    constructor(anchor) {
        this.anchor = anchor;
    }
    map(mapping) {
        let { deleted, pos } = mapping.mapResult(this.anchor);
        return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
    }
    resolve(doc) {
        let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
        if (node && NodeSelection.isSelectable(node))
            return new NodeSelection($pos);
        return Selection.near($pos);
    }
}
/**
A selection type that represents selecting the whole document
(which can not necessarily be expressed with a text selection, when
there are for example leaf block nodes at the start or end of the
document).
*/
class AllSelection extends Selection {
    /**
    Create an all-selection over the given document.
    */
    constructor(doc) {
        super(doc.resolve(0), doc.resolve(doc.content.size));
    }
    replace(tr, content = Slice.empty) {
        if (content == Slice.empty) {
            tr.delete(0, tr.doc.content.size);
            let sel = Selection.atStart(tr.doc);
            if (!sel.eq(tr.selection))
                tr.setSelection(sel);
        }
        else {
            super.replace(tr, content);
        }
    }
    toJSON() { return { type: "all" }; }
    /**
    @internal
    */
    static fromJSON(doc) { return new AllSelection(doc); }
    map(doc) { return new AllSelection(doc); }
    eq(other) { return other instanceof AllSelection; }
    getBookmark() { return AllBookmark; }
}
Selection.jsonID("all", AllSelection);
const AllBookmark = {
    map() { return this; },
    resolve(doc) { return new AllSelection(doc); }
};
// FIXME we'll need some awareness of text direction when scanning for selections
// Try to find a selection inside the given node. `pos` points at the
// position where the search starts. When `text` is true, only return
// text selections.
function findSelectionIn(doc, node, pos, index, dir, text = false) {
    if (node.inlineContent)
        return TextSelection.create(doc, pos);
    for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
        let child = node.child(i);
        if (!child.isAtom) {
            let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
            if (inner)
                return inner;
        }
        else if (!text && NodeSelection.isSelectable(child)) {
            return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
        }
        pos += child.nodeSize * dir;
    }
    return null;
}
function selectionToInsertionEnd(tr, startLen, bias) {
    let last = tr.steps.length - 1;
    if (last < startLen)
        return;
    let step = tr.steps[last];
    if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
        return;
    let map = tr.mapping.maps[last], end;
    map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)
        end = newTo; });
    tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
}

const UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;
/**
An editor state transaction, which can be applied to a state to
create an updated state. Use
[`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.

Transactions track changes to the document (they are a subclass of
[`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,
like selection updates and adjustments of the set of [stored
marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store
metadata properties in a transaction, which are extra pieces of
information that client code or plugins can use to describe what a
transaction represents, so that they can update their [own
state](https://prosemirror.net/docs/ref/#state.StateField) accordingly.

The [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata
properties: it will attach a property `"pointer"` with the value
`true` to selection transactions directly caused by mouse or touch
input, a `"composition"` property holding an ID identifying the
composition that caused it to transactions caused by composed DOM
input, and a `"uiEvent"` property of that may be `"paste"`,
`"cut"`, or `"drop"`.
*/
class Transaction extends Transform {
    /**
    @internal
    */
    constructor(state) {
        super(state.doc);
        // The step count for which the current selection is valid.
        this.curSelectionFor = 0;
        // Bitfield to track which aspects of the state were updated by
        // this transaction.
        this.updated = 0;
        // Object used to store metadata properties for the transaction.
        this.meta = Object.create(null);
        this.time = Date.now();
        this.curSelection = state.selection;
        this.storedMarks = state.storedMarks;
    }
    /**
    The transaction's current selection. This defaults to the editor
    selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
    transaction, but can be overwritten with
    [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
    */
    get selection() {
        if (this.curSelectionFor < this.steps.length) {
            this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
            this.curSelectionFor = this.steps.length;
        }
        return this.curSelection;
    }
    /**
    Update the transaction's current selection. Will determine the
    selection that the editor gets when the transaction is applied.
    */
    setSelection(selection) {
        if (selection.$from.doc != this.doc)
            throw new RangeError("Selection passed to setSelection must point at the current document");
        this.curSelection = selection;
        this.curSelectionFor = this.steps.length;
        this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
        this.storedMarks = null;
        return this;
    }
    /**
    Whether the selection was explicitly updated by this transaction.
    */
    get selectionSet() {
        return (this.updated & UPDATED_SEL) > 0;
    }
    /**
    Set the current stored marks.
    */
    setStoredMarks(marks) {
        this.storedMarks = marks;
        this.updated |= UPDATED_MARKS;
        return this;
    }
    /**
    Make sure the current stored marks or, if that is null, the marks
    at the selection, match the given set of marks. Does nothing if
    this is already the case.
    */
    ensureMarks(marks) {
        if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
            this.setStoredMarks(marks);
        return this;
    }
    /**
    Add a mark to the set of stored marks.
    */
    addStoredMark(mark) {
        return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
    }
    /**
    Remove a mark or mark type from the set of stored marks.
    */
    removeStoredMark(mark) {
        return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
    }
    /**
    Whether the stored marks were explicitly set for this transaction.
    */
    get storedMarksSet() {
        return (this.updated & UPDATED_MARKS) > 0;
    }
    /**
    @internal
    */
    addStep(step, doc) {
        super.addStep(step, doc);
        this.updated = this.updated & ~UPDATED_MARKS;
        this.storedMarks = null;
    }
    /**
    Update the timestamp for the transaction.
    */
    setTime(time) {
        this.time = time;
        return this;
    }
    /**
    Replace the current selection with the given slice.
    */
    replaceSelection(slice) {
        this.selection.replace(this, slice);
        return this;
    }
    /**
    Replace the selection with the given node. When `inheritMarks` is
    true and the content is inline, it inherits the marks from the
    place where it is inserted.
    */
    replaceSelectionWith(node, inheritMarks = true) {
        let selection = this.selection;
        if (inheritMarks)
            node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)));
        selection.replaceWith(this, node);
        return this;
    }
    /**
    Delete the selection.
    */
    deleteSelection() {
        this.selection.replace(this);
        return this;
    }
    /**
    Replace the given range, or the selection if no range is given,
    with a text node containing the given string.
    */
    insertText(text, from, to) {
        let schema = this.doc.type.schema;
        if (from == null) {
            if (!text)
                return this.deleteSelection();
            return this.replaceSelectionWith(schema.text(text), true);
        }
        else {
            if (to == null)
                to = from;
            to = to == null ? from : to;
            if (!text)
                return this.deleteRange(from, to);
            let marks = this.storedMarks;
            if (!marks) {
                let $from = this.doc.resolve(from);
                marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
            }
            this.replaceRangeWith(from, to, schema.text(text, marks));
            if (!this.selection.empty)
                this.setSelection(Selection.near(this.selection.$to));
            return this;
        }
    }
    /**
    Store a metadata property in this transaction, keyed either by
    name or by plugin.
    */
    setMeta(key, value) {
        this.meta[typeof key == "string" ? key : key.key] = value;
        return this;
    }
    /**
    Retrieve a metadata property for a given name or plugin.
    */
    getMeta(key) {
        return this.meta[typeof key == "string" ? key : key.key];
    }
    /**
    Returns true if this transaction doesn't contain any metadata,
    and can thus safely be extended.
    */
    get isGeneric() {
        for (let _ in this.meta)
            return false;
        return true;
    }
    /**
    Indicate that the editor should scroll the selection into view
    when updated to the state produced by this transaction.
    */
    scrollIntoView() {
        this.updated |= UPDATED_SCROLL;
        return this;
    }
    /**
    True when this transaction has had `scrollIntoView` called on it.
    */
    get scrolledIntoView() {
        return (this.updated & UPDATED_SCROLL) > 0;
    }
}

function bind(f, self) {
    return !self || !f ? f : f.bind(self);
}
class FieldDesc {
    constructor(name, desc, self) {
        this.name = name;
        this.init = bind(desc.init, self);
        this.apply = bind(desc.apply, self);
    }
}
const baseFields = [
    new FieldDesc("doc", {
        init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
        apply(tr) { return tr.doc; }
    }),
    new FieldDesc("selection", {
        init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
        apply(tr) { return tr.selection; }
    }),
    new FieldDesc("storedMarks", {
        init(config) { return config.storedMarks || null; },
        apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
    }),
    new FieldDesc("scrollToSelection", {
        init() { return 0; },
        apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
    })
];
// Object wrapping the part of a state object that stays the same
// across transactions. Stored in the state's `config` property.
class Configuration {
    constructor(schema, plugins) {
        this.schema = schema;
        this.plugins = [];
        this.pluginsByKey = Object.create(null);
        this.fields = baseFields.slice();
        if (plugins)
            plugins.forEach(plugin => {
                if (this.pluginsByKey[plugin.key])
                    throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                this.plugins.push(plugin);
                this.pluginsByKey[plugin.key] = plugin;
                if (plugin.spec.state)
                    this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
            });
    }
}
/**
The state of a ProseMirror editor is represented by an object of
this type. A state is a persistent data structure—it isn't
updated, but rather a new state value is computed from an old one
using the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.

A state holds a number of built-in fields, and plugins can
[define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.
*/
class EditorState {
    /**
    @internal
    */
    constructor(
    /**
    @internal
    */
    config) {
        this.config = config;
    }
    /**
    The schema of the state's document.
    */
    get schema() {
        return this.config.schema;
    }
    /**
    The plugins that are active in this state.
    */
    get plugins() {
        return this.config.plugins;
    }
    /**
    Apply the given transaction to produce a new state.
    */
    apply(tr) {
        return this.applyTransaction(tr).state;
    }
    /**
    @internal
    */
    filterTransaction(tr, ignore = -1) {
        for (let i = 0; i < this.config.plugins.length; i++)
            if (i != ignore) {
                let plugin = this.config.plugins[i];
                if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
                    return false;
            }
        return true;
    }
    /**
    Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
    returns the precise transactions that were applied (which might
    be influenced by the [transaction
    hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
    plugins) along with the new state.
    */
    applyTransaction(rootTr) {
        if (!this.filterTransaction(rootTr))
            return { state: this, transactions: [] };
        let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
        // This loop repeatedly gives plugins a chance to respond to
        // transactions as new transactions are added, making sure to only
        // pass the transactions the plugin did not see before.
        for (;;) {
            let haveNew = false;
            for (let i = 0; i < this.config.plugins.length; i++) {
                let plugin = this.config.plugins[i];
                if (plugin.spec.appendTransaction) {
                    let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
                    let tr = n < trs.length &&
                        plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                    if (tr && newState.filterTransaction(tr, i)) {
                        tr.setMeta("appendedTransaction", rootTr);
                        if (!seen) {
                            seen = [];
                            for (let j = 0; j < this.config.plugins.length; j++)
                                seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
                        }
                        trs.push(tr);
                        newState = newState.applyInner(tr);
                        haveNew = true;
                    }
                    if (seen)
                        seen[i] = { state: newState, n: trs.length };
                }
            }
            if (!haveNew)
                return { state: newState, transactions: trs };
        }
    }
    /**
    @internal
    */
    applyInner(tr) {
        if (!tr.before.eq(this.doc))
            throw new RangeError("Applying a mismatched transaction");
        let newInstance = new EditorState(this.config), fields = this.config.fields;
        for (let i = 0; i < fields.length; i++) {
            let field = fields[i];
            newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
        }
        return newInstance;
    }
    /**
    Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
    */
    get tr() { return new Transaction(this); }
    /**
    Create a new state.
    */
    static create(config) {
        let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
        let instance = new EditorState($config);
        for (let i = 0; i < $config.fields.length; i++)
            instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
        return instance;
    }
    /**
    Create a new state based on this one, but with an adjusted set
    of active plugins. State fields that exist in both sets of
    plugins are kept unchanged. Those that no longer exist are
    dropped, and those that are new are initialized using their
    [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
    configuration object..
    */
    reconfigure(config) {
        let $config = new Configuration(this.schema, config.plugins);
        let fields = $config.fields, instance = new EditorState($config);
        for (let i = 0; i < fields.length; i++) {
            let name = fields[i].name;
            instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
        }
        return instance;
    }
    /**
    Serialize this state to JSON. If you want to serialize the state
    of plugins, pass an object mapping property names to use in the
    resulting JSON object to plugin objects. The argument may also be
    a string or number, in which case it is ignored, to support the
    way `JSON.stringify` calls `toString` methods.
    */
    toJSON(pluginFields) {
        let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
        if (this.storedMarks)
            result.storedMarks = this.storedMarks.map(m => m.toJSON());
        if (pluginFields && typeof pluginFields == 'object')
            for (let prop in pluginFields) {
                if (prop == "doc" || prop == "selection")
                    throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                let plugin = pluginFields[prop], state = plugin.spec.state;
                if (state && state.toJSON)
                    result[prop] = state.toJSON.call(plugin, this[plugin.key]);
            }
        return result;
    }
    /**
    Deserialize a JSON representation of a state. `config` should
    have at least a `schema` field, and should contain array of
    plugins to initialize the state with. `pluginFields` can be used
    to deserialize the state of plugins, by associating plugin
    instances with the property names they use in the JSON object.
    */
    static fromJSON(config, json, pluginFields) {
        if (!json)
            throw new RangeError("Invalid input for EditorState.fromJSON");
        if (!config.schema)
            throw new RangeError("Required config field 'schema' missing");
        let $config = new Configuration(config.schema, config.plugins);
        let instance = new EditorState($config);
        $config.fields.forEach(field => {
            if (field.name == "doc") {
                instance.doc = Node$1.fromJSON(config.schema, json.doc);
            }
            else if (field.name == "selection") {
                instance.selection = Selection.fromJSON(instance.doc, json.selection);
            }
            else if (field.name == "storedMarks") {
                if (json.storedMarks)
                    instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
            }
            else {
                if (pluginFields)
                    for (let prop in pluginFields) {
                        let plugin = pluginFields[prop], state = plugin.spec.state;
                        if (plugin.key == field.name && state && state.fromJSON &&
                            Object.prototype.hasOwnProperty.call(json, prop)) {
                            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                            return;
                        }
                    }
                instance[field.name] = field.init(config, instance);
            }
        });
        return instance;
    }
}

function bindProps(obj, self, target) {
    for (let prop in obj) {
        let val = obj[prop];
        if (val instanceof Function)
            val = val.bind(self);
        else if (prop == "handleDOMEvents")
            val = bindProps(val, self, {});
        target[prop] = val;
    }
    return target;
}
/**
Plugins bundle functionality that can be added to an editor.
They are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and
may influence that state and the view that contains it.
*/
class Plugin {
    /**
    Create a plugin.
    */
    constructor(
    /**
    The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).
    */
    spec) {
        this.spec = spec;
        /**
        The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.
        */
        this.props = {};
        if (spec.props)
            bindProps(spec.props, this, this.props);
        this.key = spec.key ? spec.key.key : createKey("plugin");
    }
    /**
    Extract the plugin's state field from an editor state.
    */
    getState(state) { return state[this.key]; }
}
const keys = Object.create(null);
function createKey(name) {
    if (name in keys)
        return name + "$" + ++keys[name];
    keys[name] = 0;
    return name + "$";
}
/**
A key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way
that makes it possible to find them, given an editor state.
Assigning a key does mean only one plugin of that type can be
active in a state.
*/
class PluginKey {
    /**
    Create a plugin key.
    */
    constructor(name = "key") { this.key = createKey(name); }
    /**
    Get the active plugin with this key, if any, from an editor
    state.
    */
    get(state) { return state.config.pluginsByKey[this.key]; }
    /**
    Get the plugin's state from an editor state.
    */
    getState(state) { return state[this.key]; }
}

const domIndex = function (node) {
    for (var index = 0;; index++) {
        node = node.previousSibling;
        if (!node)
            return index;
    }
};
const parentNode = function (node) {
    let parent = node.assignedSlot || node.parentNode;
    return parent && parent.nodeType == 11 ? parent.host : parent;
};
let reusedRange = null;
// Note that this will always return the same range, because DOM range
// objects are every expensive, and keep slowing down subsequent DOM
// updates, for some reason.
const textRange$1 = function (node, from, to) {
    let range = reusedRange || (reusedRange = document.createRange());
    range.setEnd(node, to == null ? node.nodeValue.length : to);
    range.setStart(node, from || 0);
    return range;
};
const clearReusedRange = function () {
    reusedRange = null;
};
// Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)
const isEquivalentPosition = function (node, off, targetNode, targetOff) {
    return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
        scanFor(node, off, targetNode, targetOff, 1));
};
const atomElements = /^(img|br|input|textarea|hr)$/i;
function scanFor(node, off, targetNode, targetOff, dir) {
    for (;;) {
        if (node == targetNode && off == targetOff)
            return true;
        if (off == (dir < 0 ? 0 : nodeSize(node))) {
            let parent = node.parentNode;
            if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                node.contentEditable == "false")
                return false;
            off = domIndex(node) + (dir < 0 ? 0 : 1);
            node = parent;
        }
        else if (node.nodeType == 1) {
            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
            if (node.contentEditable == "false")
                return false;
            off = dir < 0 ? nodeSize(node) : 0;
        }
        else {
            return false;
        }
    }
}
function nodeSize(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function textNodeBefore$1(node, offset) {
    for (;;) {
        if (node.nodeType == 3 && offset)
            return node;
        if (node.nodeType == 1 && offset > 0) {
            if (node.contentEditable == "false")
                return null;
            node = node.childNodes[offset - 1];
            offset = nodeSize(node);
        }
        else if (node.parentNode && !hasBlockDesc(node)) {
            offset = domIndex(node);
            node = node.parentNode;
        }
        else {
            return null;
        }
    }
}
function textNodeAfter$1(node, offset) {
    for (;;) {
        if (node.nodeType == 3 && offset < node.nodeValue.length)
            return node;
        if (node.nodeType == 1 && offset < node.childNodes.length) {
            if (node.contentEditable == "false")
                return null;
            node = node.childNodes[offset];
            offset = 0;
        }
        else if (node.parentNode && !hasBlockDesc(node)) {
            offset = domIndex(node) + 1;
            node = node.parentNode;
        }
        else {
            return null;
        }
    }
}
function isOnEdge(node, offset, parent) {
    for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
        if (node == parent)
            return true;
        let index = domIndex(node);
        node = node.parentNode;
        if (!node)
            return false;
        atStart = atStart && index == 0;
        atEnd = atEnd && index == nodeSize(node);
    }
}
function hasBlockDesc(dom) {
    let desc;
    for (let cur = dom; cur; cur = cur.parentNode)
        if (desc = cur.pmViewDesc)
            break;
    return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
}
// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
// (isCollapsed inappropriately returns true in shadow dom)
const selectionCollapsed = function (domSel) {
    return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
};
function keyEvent(keyCode, key) {
    let event = document.createEvent("Event");
    event.initEvent("keydown", true, true);
    event.keyCode = keyCode;
    event.key = event.code = key;
    return event;
}
function deepActiveElement(doc) {
    let elt = doc.activeElement;
    while (elt && elt.shadowRoot)
        elt = elt.shadowRoot.activeElement;
    return elt;
}
function caretFromPoint(doc, x, y) {
    if (doc.caretPositionFromPoint) {
        try { // Firefox throws for this call in hard-to-predict circumstances (#994)
            let pos = doc.caretPositionFromPoint(x, y);
            if (pos)
                return { node: pos.offsetNode, offset: pos.offset };
        }
        catch (_) { }
    }
    if (doc.caretRangeFromPoint) {
        let range = doc.caretRangeFromPoint(x, y);
        if (range)
            return { node: range.startContainer, offset: range.startOffset };
    }
}

const nav = typeof navigator != "undefined" ? navigator : null;
const doc = typeof document != "undefined" ? document : null;
const agent = (nav && nav.userAgent) || "";
const ie_edge = /Edge\/(\d+)/.exec(agent);
const ie_upto10 = /MSIE \d/.exec(agent);
const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
const ie$1 = !!(ie_upto10 || ie_11up || ie_edge);
const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
const gecko = !ie$1 && /gecko\/(\d+)/i.test(agent);
gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
const _chrome = !ie$1 && /Chrome\/(\d+)/.exec(agent);
const chrome = !!_chrome;
const chrome_version = _chrome ? +_chrome[1] : 0;
const safari = !ie$1 && !!nav && /Apple Computer/.test(nav.vendor);
// Is true for both iOS and iPadOS for convenience
const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
const mac$4 = ios || (nav ? /Mac/.test(nav.platform) : false);
const windows = nav ? /Win/.test(nav.platform) : false;
const android = /Android \d/.test(agent);
const webkit = !!doc && "webkitFontSmoothing" in doc.documentElement.style;
const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

function windowRect(doc) {
    let vp = doc.defaultView && doc.defaultView.visualViewport;
    if (vp)
        return {
            left: 0, right: vp.width,
            top: 0, bottom: vp.height
        };
    return { left: 0, right: doc.documentElement.clientWidth,
        top: 0, bottom: doc.documentElement.clientHeight };
}
function getSide(value, side) {
    return typeof value == "number" ? value : value[side];
}
function clientRect(node) {
    let rect = node.getBoundingClientRect();
    // Adjust for elements with style "transform: scale()"
    let scaleX = (rect.width / node.offsetWidth) || 1;
    let scaleY = (rect.height / node.offsetHeight) || 1;
    // Make sure scrollbar width isn't included in the rectangle
    return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
        top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
}
function scrollRectIntoView(view, rect, startDOM) {
    let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
    let doc = view.dom.ownerDocument;
    for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
        if (!parent)
            break;
        if (parent.nodeType != 1)
            continue;
        let elt = parent;
        let atTop = elt == doc.body;
        let bounding = atTop ? windowRect(doc) : clientRect(elt);
        let moveX = 0, moveY = 0;
        if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
            moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
        else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
            moveY = rect.bottom - rect.top > bounding.bottom - bounding.top
                ? rect.top + getSide(scrollMargin, "top") - bounding.top
                : rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
        if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
            moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
        else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
            moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
        if (moveX || moveY) {
            if (atTop) {
                doc.defaultView.scrollBy(moveX, moveY);
            }
            else {
                let startX = elt.scrollLeft, startY = elt.scrollTop;
                if (moveY)
                    elt.scrollTop += moveY;
                if (moveX)
                    elt.scrollLeft += moveX;
                let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
            }
        }
        if (atTop || /^(fixed|sticky)$/.test(getComputedStyle(parent).position))
            break;
    }
}
// Store the scroll position of the editor's parent nodes, along with
// the top position of an element near the top of the editor, which
// will be used to make sure the visible viewport remains stable even
// when the size of the content above changes.
function storeScrollPos(view) {
    let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
    let refDOM, refTop;
    for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
        let dom = view.root.elementFromPoint(x, y);
        if (!dom || dom == view.dom || !view.dom.contains(dom))
            continue;
        let localRect = dom.getBoundingClientRect();
        if (localRect.top >= startY - 20) {
            refDOM = dom;
            refTop = localRect.top;
            break;
        }
    }
    return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
}
function scrollStack(dom) {
    let stack = [], doc = dom.ownerDocument;
    for (let cur = dom; cur; cur = parentNode(cur)) {
        stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
        if (dom == doc)
            break;
    }
    return stack;
}
// Reset the scroll position of the editor's parent nodes to that what
// it was before, when storeScrollPos was called.
function resetScrollPos({ refDOM, refTop, stack }) {
    let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
    restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
}
function restoreScrollStack(stack, dTop) {
    for (let i = 0; i < stack.length; i++) {
        let { dom, top, left } = stack[i];
        if (dom.scrollTop != top + dTop)
            dom.scrollTop = top + dTop;
        if (dom.scrollLeft != left)
            dom.scrollLeft = left;
    }
}
let preventScrollSupported = null;
// Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.
function focusPreventScroll(dom) {
    if (dom.setActive)
        return dom.setActive(); // in IE
    if (preventScrollSupported)
        return dom.focus(preventScrollSupported);
    let stored = scrollStack(dom);
    dom.focus(preventScrollSupported == null ? {
        get preventScroll() {
            preventScrollSupported = { preventScroll: true };
            return true;
        }
    } : undefined);
    if (!preventScrollSupported) {
        preventScrollSupported = false;
        restoreScrollStack(stored, 0);
    }
}
function findOffsetInNode(node, coords) {
    let closest, dxClosest = 2e8, coordsClosest, offset = 0;
    let rowBot = coords.top, rowTop = coords.top;
    let firstBelow, coordsBelow;
    for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
        let rects;
        if (child.nodeType == 1)
            rects = child.getClientRects();
        else if (child.nodeType == 3)
            rects = textRange$1(child).getClientRects();
        else
            continue;
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.top <= rowBot && rect.bottom >= rowTop) {
                rowBot = Math.max(rect.bottom, rowBot);
                rowTop = Math.min(rect.top, rowTop);
                let dx = rect.left > coords.left ? rect.left - coords.left
                    : rect.right < coords.left ? coords.left - rect.right : 0;
                if (dx < dxClosest) {
                    closest = child;
                    dxClosest = dx;
                    coordsClosest = dx && closest.nodeType == 3 ? {
                        left: rect.right < coords.left ? rect.right : rect.left,
                        top: coords.top
                    } : coords;
                    if (child.nodeType == 1 && dx)
                        offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                    continue;
                }
            }
            else if (rect.top > coords.top && !firstBelow && rect.left <= coords.left && rect.right >= coords.left) {
                firstBelow = child;
                coordsBelow = { left: Math.max(rect.left, Math.min(rect.right, coords.left)), top: rect.top };
            }
            if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                coords.left >= rect.left && coords.top >= rect.bottom))
                offset = childIndex + 1;
        }
    }
    if (!closest && firstBelow) {
        closest = firstBelow;
        coordsClosest = coordsBelow;
        dxClosest = 0;
    }
    if (closest && closest.nodeType == 3)
        return findOffsetInText(closest, coordsClosest);
    if (!closest || (dxClosest && closest.nodeType == 1))
        return { node, offset };
    return findOffsetInNode(closest, coordsClosest);
}
function findOffsetInText(node, coords) {
    let len = node.nodeValue.length;
    let range = document.createRange();
    for (let i = 0; i < len; i++) {
        range.setEnd(node, i + 1);
        range.setStart(node, i);
        let rect = singleRect(range, 1);
        if (rect.top == rect.bottom)
            continue;
        if (inRect(coords, rect))
            return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
    }
    return { node, offset: 0 };
}
function inRect(coords, rect) {
    return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
        coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
}
function targetKludge(dom, coords) {
    let parent = dom.parentNode;
    if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
        return parent;
    return dom;
}
function posFromElement(view, elt, coords) {
    let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
    if (node.nodeType == 1 && !node.firstChild) {
        let rect = node.getBoundingClientRect();
        bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
    }
    return view.docView.posFromDOM(node, offset, bias);
}
function posFromCaret(view, node, offset, coords) {
    // Browser (in caretPosition/RangeFromPoint) will agressively
    // normalize towards nearby inline nodes. Since we are interested in
    // positions between block nodes too, we first walk up the hierarchy
    // of nodes to see if there are block nodes that the coordinates
    // fall outside of. If so, we take the position before/after that
    // block. If not, we call `posFromDOM` on the raw node/offset.
    let outsideBlock = -1;
    for (let cur = node, sawBlock = false;;) {
        if (cur == view.dom)
            break;
        let desc = view.docView.nearestDesc(cur, true);
        if (!desc)
            return null;
        if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent || !desc.contentDOM)) {
            let rect = desc.dom.getBoundingClientRect();
            if (desc.node.isBlock && desc.parent) {
                // Only apply the horizontal test to the innermost block. Vertical for any parent.
                if (!sawBlock && rect.left > coords.left || rect.top > coords.top)
                    outsideBlock = desc.posBefore;
                else if (!sawBlock && rect.right < coords.left || rect.bottom < coords.top)
                    outsideBlock = desc.posAfter;
                sawBlock = true;
            }
            if (!desc.contentDOM && outsideBlock < 0 && !desc.node.isText) {
                // If we are inside a leaf, return the side of the leaf closer to the coords
                let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2
                    : coords.left < (rect.left + rect.right) / 2;
                return before ? desc.posBefore : desc.posAfter;
            }
        }
        cur = desc.dom.parentNode;
    }
    return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node, offset, -1);
}
function elementFromPoint(element, coords, box) {
    let len = element.childNodes.length;
    if (len && box.top < box.bottom) {
        for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
            let child = element.childNodes[i];
            if (child.nodeType == 1) {
                let rects = child.getClientRects();
                for (let j = 0; j < rects.length; j++) {
                    let rect = rects[j];
                    if (inRect(coords, rect))
                        return elementFromPoint(child, coords, rect);
                }
            }
            if ((i = (i + 1) % len) == startI)
                break;
        }
    }
    return element;
}
// Given an x,y position on the editor, get the position in the document.
function posAtCoords(view, coords) {
    let doc = view.dom.ownerDocument, node, offset = 0;
    let caret = caretFromPoint(doc, coords.left, coords.top);
    if (caret)
        ({ node, offset } = caret);
    let elt = (view.root.elementFromPoint ? view.root : doc)
        .elementFromPoint(coords.left, coords.top);
    let pos;
    if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
        let box = view.dom.getBoundingClientRect();
        if (!inRect(coords, box))
            return null;
        elt = elementFromPoint(view.dom, coords, box);
        if (!elt)
            return null;
    }
    // Safari's caretRangeFromPoint returns nonsense when on a draggable element
    if (safari) {
        for (let p = elt; node && p; p = parentNode(p))
            if (p.draggable)
                node = undefined;
    }
    elt = targetKludge(elt, coords);
    if (node) {
        if (gecko && node.nodeType == 1) {
            // Firefox will sometimes return offsets into <input> nodes, which
            // have no actual children, from caretPositionFromPoint (#953)
            offset = Math.min(offset, node.childNodes.length);
            // It'll also move the returned position before image nodes,
            // even if those are behind it.
            if (offset < node.childNodes.length) {
                let next = node.childNodes[offset], box;
                if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                    box.bottom > coords.top)
                    offset++;
            }
        }
        let prev;
        // When clicking above the right side of an uneditable node, Chrome will report a cursor position after that node.
        if (webkit && offset && node.nodeType == 1 && (prev = node.childNodes[offset - 1]).nodeType == 1 &&
            prev.contentEditable == "false" && prev.getBoundingClientRect().top >= coords.top)
            offset--;
        // Suspiciously specific kludge to work around caret*FromPoint
        // never returning a position at the end of the document
        if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
            coords.top > node.lastChild.getBoundingClientRect().bottom)
            pos = view.state.doc.content.size;
        // Ignore positions directly after a BR, since caret*FromPoint
        // 'round up' positions that would be more accurately placed
        // before the BR node.
        else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
            pos = posFromCaret(view, node, offset, coords);
    }
    if (pos == null)
        pos = posFromElement(view, elt, coords);
    let desc = view.docView.nearestDesc(elt, true);
    return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
}
function nonZero(rect) {
    return rect.top < rect.bottom || rect.left < rect.right;
}
function singleRect(target, bias) {
    let rects = target.getClientRects();
    if (rects.length) {
        let first = rects[bias < 0 ? 0 : rects.length - 1];
        if (nonZero(first))
            return first;
    }
    return Array.prototype.find.call(rects, nonZero) || target.getBoundingClientRect();
}
const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
// Given a position in the document model, get a bounding box of the
// character at that position, relative to the window.
function coordsAtPos(view, pos, side) {
    let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
    let supportEmptyRange = webkit || gecko;
    if (node.nodeType == 3) {
        // These browsers support querying empty text ranges. Prefer that in
        // bidi context or when at the end of a node.
        if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
            let rect = singleRect(textRange$1(node, offset, offset), side);
            // Firefox returns bad results (the position before the space)
            // when querying a position directly after line-broken
            // whitespace. Detect this situation and and kludge around it
            if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                let rectBefore = singleRect(textRange$1(node, offset - 1, offset - 1), -1);
                if (rectBefore.top == rect.top) {
                    let rectAfter = singleRect(textRange$1(node, offset, offset + 1), -1);
                    if (rectAfter.top != rect.top)
                        return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                }
            }
            return rect;
        }
        else {
            let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
            if (side < 0 && !offset) {
                to++;
                takeSide = -1;
            }
            else if (side >= 0 && offset == node.nodeValue.length) {
                from--;
                takeSide = 1;
            }
            else if (side < 0) {
                from--;
            }
            else {
                to++;
            }
            return flattenV(singleRect(textRange$1(node, from, to), takeSide), takeSide < 0);
        }
    }
    let $dom = view.state.doc.resolve(pos - (atom || 0));
    // Return a horizontal line in block context
    if (!$dom.parent.inlineContent) {
        if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
            let before = node.childNodes[offset - 1];
            if (before.nodeType == 1)
                return flattenH(before.getBoundingClientRect(), false);
        }
        if (atom == null && offset < nodeSize(node)) {
            let after = node.childNodes[offset];
            if (after.nodeType == 1)
                return flattenH(after.getBoundingClientRect(), true);
        }
        return flattenH(node.getBoundingClientRect(), side >= 0);
    }
    // Inline, not in text node (this is not Bidi-safe)
    if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
        let before = node.childNodes[offset - 1];
        let target = before.nodeType == 3 ? textRange$1(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
            // BR nodes tend to only return the rectangle before them.
            // Only use them if they are the last element in their parent
            : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
        if (target)
            return flattenV(singleRect(target, 1), false);
    }
    if (atom == null && offset < nodeSize(node)) {
        let after = node.childNodes[offset];
        while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
            after = after.nextSibling;
        let target = !after ? null : after.nodeType == 3 ? textRange$1(after, 0, (supportEmptyRange ? 0 : 1))
            : after.nodeType == 1 ? after : null;
        if (target)
            return flattenV(singleRect(target, -1), true);
    }
    // All else failed, just try to get a rectangle for the target node
    return flattenV(singleRect(node.nodeType == 3 ? textRange$1(node) : node, -side), side >= 0);
}
function flattenV(rect, left) {
    if (rect.width == 0)
        return rect;
    let x = left ? rect.left : rect.right;
    return { top: rect.top, bottom: rect.bottom, left: x, right: x };
}
function flattenH(rect, top) {
    if (rect.height == 0)
        return rect;
    let y = top ? rect.top : rect.bottom;
    return { top: y, bottom: y, left: rect.left, right: rect.right };
}
function withFlushedState(view, state, f) {
    let viewState = view.state, active = view.root.activeElement;
    if (viewState != state)
        view.updateState(state);
    if (active != view.dom)
        view.focus();
    try {
        return f();
    }
    finally {
        if (viewState != state)
            view.updateState(viewState);
        if (active != view.dom && active)
            active.focus();
    }
}
// Whether vertical position motion in a given direction
// from a position would leave a text block.
function endOfTextblockVertical(view, state, dir) {
    let sel = state.selection;
    let $pos = dir == "up" ? sel.$from : sel.$to;
    return withFlushedState(view, state, () => {
        let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
        for (;;) {
            let nearest = view.docView.nearestDesc(dom, true);
            if (!nearest)
                break;
            if (nearest.node.isBlock) {
                dom = nearest.contentDOM || nearest.dom;
                break;
            }
            dom = nearest.dom.parentNode;
        }
        let coords = coordsAtPos(view, $pos.pos, 1);
        for (let child = dom.firstChild; child; child = child.nextSibling) {
            let boxes;
            if (child.nodeType == 1)
                boxes = child.getClientRects();
            else if (child.nodeType == 3)
                boxes = textRange$1(child, 0, child.nodeValue.length).getClientRects();
            else
                continue;
            for (let i = 0; i < boxes.length; i++) {
                let box = boxes[i];
                if (box.bottom > box.top + 1 &&
                    (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                        : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                    return false;
            }
        }
        return true;
    });
}
const maybeRTL = /[\u0590-\u08ac]/;
function endOfTextblockHorizontal(view, state, dir) {
    let { $head } = state.selection;
    if (!$head.parent.isTextblock)
        return false;
    let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
    let sel = view.domSelection();
    if (!sel)
        return $head.pos == $head.start() || $head.pos == $head.end();
    // If the textblock is all LTR, or the browser doesn't support
    // Selection.modify (Edge), fall back to a primitive approach
    if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
        return dir == "left" || dir == "backward" ? atStart : atEnd;
    return withFlushedState(view, state, () => {
        // This is a huge hack, but appears to be the best we can
        // currently do: use `Selection.modify` to move the selection by
        // one character, and see if that moves the cursor out of the
        // textblock (or doesn't move it at all, when at the start/end of
        // the document).
        let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
        let oldBidiLevel = sel.caretBidiLevel // Only for Firefox
        ;
        sel.modify("move", dir, "character");
        let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
        let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
        let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) ||
            (oldNode == newNode && oldOff == newOff);
        // Restore the previous selection
        try {
            sel.collapse(anchorNode, anchorOffset);
            if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
                sel.extend(oldNode, oldOff);
        }
        catch (_) { }
        if (oldBidiLevel != null)
            sel.caretBidiLevel = oldBidiLevel;
        return result;
    });
}
let cachedState = null;
let cachedDir = null;
let cachedResult = false;
function endOfTextblock(view, state, dir) {
    if (cachedState == state && cachedDir == dir)
        return cachedResult;
    cachedState = state;
    cachedDir = dir;
    return cachedResult = dir == "up" || dir == "down"
        ? endOfTextblockVertical(view, state, dir)
        : endOfTextblockHorizontal(view, state, dir);
}

// View descriptions are data structures that describe the DOM that is
// used to represent the editor's content. They are used for:
//
// - Incremental redrawing when the document changes
//
// - Figuring out what part of the document a given DOM position
//   corresponds to
//
// - Wiring in custom implementations of the editing interface for a
//   given node
//
// They form a doubly-linked mutable tree, starting at `view.docView`.
const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
// Superclass for the various kinds of descriptions. Defines their
// basic structure and shared methods.
class ViewDesc {
    constructor(parent, children, dom, 
    // This is the node that holds the child views. It may be null for
    // descs that don't have children.
    contentDOM) {
        this.parent = parent;
        this.children = children;
        this.dom = dom;
        this.contentDOM = contentDOM;
        this.dirty = NOT_DIRTY;
        // An expando property on the DOM node provides a link back to its
        // description.
        dom.pmViewDesc = this;
    }
    // Used to check whether a given description corresponds to a
    // widget/mark/node.
    matchesWidget(widget) { return false; }
    matchesMark(mark) { return false; }
    matchesNode(node, outerDeco, innerDeco) { return false; }
    matchesHack(nodeName) { return false; }
    // When parsing in-editor content (in domchange.js), we allow
    // descriptions to determine the parse rules that should be used to
    // parse them.
    parseRule() { return null; }
    // Used by the editor's event handler to ignore events that come
    // from certain descs.
    stopEvent(event) { return false; }
    // The size of the content represented by this desc.
    get size() {
        let size = 0;
        for (let i = 0; i < this.children.length; i++)
            size += this.children[i].size;
        return size;
    }
    // For block nodes, this represents the space taken up by their
    // start/end tokens.
    get border() { return 0; }
    destroy() {
        this.parent = undefined;
        if (this.dom.pmViewDesc == this)
            this.dom.pmViewDesc = undefined;
        for (let i = 0; i < this.children.length; i++)
            this.children[i].destroy();
    }
    posBeforeChild(child) {
        for (let i = 0, pos = this.posAtStart;; i++) {
            let cur = this.children[i];
            if (cur == child)
                return pos;
            pos += cur.size;
        }
    }
    get posBefore() {
        return this.parent.posBeforeChild(this);
    }
    get posAtStart() {
        return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
    }
    get posAfter() {
        return this.posBefore + this.size;
    }
    get posAtEnd() {
        return this.posAtStart + this.size - 2 * this.border;
    }
    localPosFromDOM(dom, offset, bias) {
        // If the DOM position is in the content, use the child desc after
        // it to figure out a position.
        if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
            if (bias < 0) {
                let domBefore, desc;
                if (dom == this.contentDOM) {
                    domBefore = dom.childNodes[offset - 1];
                }
                else {
                    while (dom.parentNode != this.contentDOM)
                        dom = dom.parentNode;
                    domBefore = dom.previousSibling;
                }
                while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                    domBefore = domBefore.previousSibling;
                return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
            }
            else {
                let domAfter, desc;
                if (dom == this.contentDOM) {
                    domAfter = dom.childNodes[offset];
                }
                else {
                    while (dom.parentNode != this.contentDOM)
                        dom = dom.parentNode;
                    domAfter = dom.nextSibling;
                }
                while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                    domAfter = domAfter.nextSibling;
                return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
            }
        }
        // Otherwise, use various heuristics, falling back on the bias
        // parameter, to determine whether to return the position at the
        // start or at the end of this view desc.
        let atEnd;
        if (dom == this.dom && this.contentDOM) {
            atEnd = offset > domIndex(this.contentDOM);
        }
        else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
            atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
        }
        else if (this.dom.firstChild) {
            if (offset == 0)
                for (let search = dom;; search = search.parentNode) {
                    if (search == this.dom) {
                        atEnd = false;
                        break;
                    }
                    if (search.previousSibling)
                        break;
                }
            if (atEnd == null && offset == dom.childNodes.length)
                for (let search = dom;; search = search.parentNode) {
                    if (search == this.dom) {
                        atEnd = true;
                        break;
                    }
                    if (search.nextSibling)
                        break;
                }
        }
        return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
    }
    nearestDesc(dom, onlyNodes = false) {
        for (let first = true, cur = dom; cur; cur = cur.parentNode) {
            let desc = this.getDesc(cur), nodeDOM;
            if (desc && (!onlyNodes || desc.node)) {
                // If dom is outside of this desc's nodeDOM, don't count it.
                if (first && (nodeDOM = desc.nodeDOM) &&
                    !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                    first = false;
                else
                    return desc;
            }
        }
    }
    getDesc(dom) {
        let desc = dom.pmViewDesc;
        for (let cur = desc; cur; cur = cur.parent)
            if (cur == this)
                return desc;
    }
    posFromDOM(dom, offset, bias) {
        for (let scan = dom; scan; scan = scan.parentNode) {
            let desc = this.getDesc(scan);
            if (desc)
                return desc.localPosFromDOM(dom, offset, bias);
        }
        return -1;
    }
    // Find the desc for the node after the given pos, if any. (When a
    // parent node overrode rendering, there might not be one.)
    descAt(pos) {
        for (let i = 0, offset = 0; i < this.children.length; i++) {
            let child = this.children[i], end = offset + child.size;
            if (offset == pos && end != offset) {
                while (!child.border && child.children.length)
                    child = child.children[0];
                return child;
            }
            if (pos < end)
                return child.descAt(pos - offset - child.border);
            offset = end;
        }
    }
    domFromPos(pos, side) {
        if (!this.contentDOM)
            return { node: this.dom, offset: 0, atom: pos + 1 };
        // First find the position in the child array
        let i = 0, offset = 0;
        for (let curPos = 0; i < this.children.length; i++) {
            let child = this.children[i], end = curPos + child.size;
            if (end > pos || child instanceof TrailingHackViewDesc) {
                offset = pos - curPos;
                break;
            }
            curPos = end;
        }
        // If this points into the middle of a child, call through
        if (offset)
            return this.children[i].domFromPos(offset - this.children[i].border, side);
        // Go back if there were any zero-length widgets with side >= 0 before this point
        for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
        // Scan towards the first useable node
        if (side <= 0) {
            let prev, enter = true;
            for (;; i--, enter = false) {
                prev = i ? this.children[i - 1] : null;
                if (!prev || prev.dom.parentNode == this.contentDOM)
                    break;
            }
            if (prev && side && enter && !prev.border && !prev.domAtom)
                return prev.domFromPos(prev.size, side);
            return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
        }
        else {
            let next, enter = true;
            for (;; i++, enter = false) {
                next = i < this.children.length ? this.children[i] : null;
                if (!next || next.dom.parentNode == this.contentDOM)
                    break;
            }
            if (next && enter && !next.border && !next.domAtom)
                return next.domFromPos(0, side);
            return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
        }
    }
    // Used to find a DOM range in a single parent for a given changed
    // range.
    parseRange(from, to, base = 0) {
        if (this.children.length == 0)
            return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
        let fromOffset = -1, toOffset = -1;
        for (let offset = base, i = 0;; i++) {
            let child = this.children[i], end = offset + child.size;
            if (fromOffset == -1 && from <= end) {
                let childBase = offset + child.border;
                // FIXME maybe descend mark views to parse a narrower range?
                if (from >= childBase && to <= end - child.border && child.node &&
                    child.contentDOM && this.contentDOM.contains(child.contentDOM))
                    return child.parseRange(from, to, childBase);
                from = offset;
                for (let j = i; j > 0; j--) {
                    let prev = this.children[j - 1];
                    if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                        fromOffset = domIndex(prev.dom) + 1;
                        break;
                    }
                    from -= prev.size;
                }
                if (fromOffset == -1)
                    fromOffset = 0;
            }
            if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                to = end;
                for (let j = i + 1; j < this.children.length; j++) {
                    let next = this.children[j];
                    if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                        toOffset = domIndex(next.dom);
                        break;
                    }
                    to += next.size;
                }
                if (toOffset == -1)
                    toOffset = this.contentDOM.childNodes.length;
                break;
            }
            offset = end;
        }
        return { node: this.contentDOM, from, to, fromOffset, toOffset };
    }
    emptyChildAt(side) {
        if (this.border || !this.contentDOM || !this.children.length)
            return false;
        let child = this.children[side < 0 ? 0 : this.children.length - 1];
        return child.size == 0 || child.emptyChildAt(side);
    }
    domAfterPos(pos) {
        let { node, offset } = this.domFromPos(pos, 0);
        if (node.nodeType != 1 || offset == node.childNodes.length)
            throw new RangeError("No node after pos " + pos);
        return node.childNodes[offset];
    }
    // View descs are responsible for setting any selection that falls
    // entirely inside of them, so that custom implementations can do
    // custom things with the selection. Note that this falls apart when
    // a selection starts in such a node and ends in another, in which
    // case we just use whatever domFromPos produces as a best effort.
    setSelection(anchor, head, root, force = false) {
        // If the selection falls entirely in a child, give it to that child
        let from = Math.min(anchor, head), to = Math.max(anchor, head);
        for (let i = 0, offset = 0; i < this.children.length; i++) {
            let child = this.children[i], end = offset + child.size;
            if (from > offset && to < end)
                return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
            offset = end;
        }
        let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
        let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
        let domSel = root.getSelection();
        let brKludge = false;
        // On Firefox, using Selection.collapse to put the cursor after a
        // BR node for some reason doesn't always work (#1073). On Safari,
        // the cursor sometimes inexplicable visually lags behind its
        // reported position in such situations (#1092).
        if ((gecko || safari) && anchor == head) {
            let { node, offset } = anchorDOM;
            if (node.nodeType == 3) {
                brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                // Issue #1128
                if (brKludge && offset == node.nodeValue.length) {
                    for (let scan = node, after; scan; scan = scan.parentNode) {
                        if (after = scan.nextSibling) {
                            if (after.nodeName == "BR")
                                anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                            break;
                        }
                        let desc = scan.pmViewDesc;
                        if (desc && desc.node && desc.node.isBlock)
                            break;
                    }
                }
            }
            else {
                let prev = node.childNodes[offset - 1];
                brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
            }
        }
        // Firefox can act strangely when the selection is in front of an
        // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
        if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
            let after = domSel.focusNode.childNodes[domSel.focusOffset];
            if (after && after.contentEditable == "false")
                force = true;
        }
        if (!(force || brKludge && safari) &&
            isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
            isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
            return;
        // Selection.extend can be used to create an 'inverted' selection
        // (one where the focus is before the anchor), but not all
        // browsers support it yet.
        let domSelExtended = false;
        if ((domSel.extend || anchor == head) && !brKludge) {
            domSel.collapse(anchorDOM.node, anchorDOM.offset);
            try {
                if (anchor != head)
                    domSel.extend(headDOM.node, headDOM.offset);
                domSelExtended = true;
            }
            catch (_) {
                // In some cases with Chrome the selection is empty after calling
                // collapse, even when it should be valid. This appears to be a bug, but
                // it is difficult to isolate. If this happens fallback to the old path
                // without using extend.
                // Similarly, this could crash on Safari if the editor is hidden, and
                // there was no selection.
            }
        }
        if (!domSelExtended) {
            if (anchor > head) {
                let tmp = anchorDOM;
                anchorDOM = headDOM;
                headDOM = tmp;
            }
            let range = document.createRange();
            range.setEnd(headDOM.node, headDOM.offset);
            range.setStart(anchorDOM.node, anchorDOM.offset);
            domSel.removeAllRanges();
            domSel.addRange(range);
        }
    }
    ignoreMutation(mutation) {
        return !this.contentDOM && mutation.type != "selection";
    }
    get contentLost() {
        return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
    }
    // Remove a subtree of the element tree that has been touched
    // by a DOM change, so that the next update will redraw it.
    markDirty(from, to) {
        for (let offset = 0, i = 0; i < this.children.length; i++) {
            let child = this.children[i], end = offset + child.size;
            if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                let startInside = offset + child.border, endInside = end - child.border;
                if (from >= startInside && to <= endInside) {
                    this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                    if (from == startInside && to == endInside &&
                        (child.contentLost || child.dom.parentNode != this.contentDOM))
                        child.dirty = NODE_DIRTY;
                    else
                        child.markDirty(from - startInside, to - startInside);
                    return;
                }
                else {
                    child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                        ? CONTENT_DIRTY : NODE_DIRTY;
                }
            }
            offset = end;
        }
        this.dirty = CONTENT_DIRTY;
    }
    markParentsDirty() {
        let level = 1;
        for (let node = this.parent; node; node = node.parent, level++) {
            let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
            if (node.dirty < dirty)
                node.dirty = dirty;
        }
    }
    get domAtom() { return false; }
    get ignoreForCoords() { return false; }
    isText(text) { return false; }
}
// A widget desc represents a widget decoration, which is a DOM node
// drawn between the document nodes.
class WidgetViewDesc extends ViewDesc {
    constructor(parent, widget, view, pos) {
        let self, dom = widget.type.toDOM;
        if (typeof dom == "function")
            dom = dom(view, () => {
                if (!self)
                    return pos;
                if (self.parent)
                    return self.parent.posBeforeChild(self);
            });
        if (!widget.type.spec.raw) {
            if (dom.nodeType != 1) {
                let wrap = document.createElement("span");
                wrap.appendChild(dom);
                dom = wrap;
            }
            dom.contentEditable = "false";
            dom.classList.add("ProseMirror-widget");
        }
        super(parent, [], dom, null);
        this.widget = widget;
        this.widget = widget;
        self = this;
    }
    matchesWidget(widget) {
        return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
    }
    parseRule() { return { ignore: true }; }
    stopEvent(event) {
        let stop = this.widget.spec.stopEvent;
        return stop ? stop(event) : false;
    }
    ignoreMutation(mutation) {
        return mutation.type != "selection" || this.widget.spec.ignoreSelection;
    }
    destroy() {
        this.widget.type.destroy(this.dom);
        super.destroy();
    }
    get domAtom() { return true; }
    get side() { return this.widget.type.side; }
}
class CompositionViewDesc extends ViewDesc {
    constructor(parent, dom, textDOM, text) {
        super(parent, [], dom, null);
        this.textDOM = textDOM;
        this.text = text;
    }
    get size() { return this.text.length; }
    localPosFromDOM(dom, offset) {
        if (dom != this.textDOM)
            return this.posAtStart + (offset ? this.size : 0);
        return this.posAtStart + offset;
    }
    domFromPos(pos) {
        return { node: this.textDOM, offset: pos };
    }
    ignoreMutation(mut) {
        return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
    }
}
// A mark desc represents a mark. May have multiple children,
// depending on how the mark is split. Note that marks are drawn using
// a fixed nesting order, for simplicity and predictability, so in
// some cases they will be split more often than would appear
// necessary.
class MarkViewDesc extends ViewDesc {
    constructor(parent, mark, dom, contentDOM) {
        super(parent, [], dom, contentDOM);
        this.mark = mark;
    }
    static create(parent, mark, inline, view) {
        let custom = view.nodeViews[mark.type.name];
        let spec = custom && custom(mark, view, inline);
        if (!spec || !spec.dom)
            spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline), null, mark.attrs);
        return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
    }
    parseRule() {
        if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
            return null;
        return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
    }
    matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
    markDirty(from, to) {
        super.markDirty(from, to);
        // Move dirty info to nearest node view
        if (this.dirty != NOT_DIRTY) {
            let parent = this.parent;
            while (!parent.node)
                parent = parent.parent;
            if (parent.dirty < this.dirty)
                parent.dirty = this.dirty;
            this.dirty = NOT_DIRTY;
        }
    }
    slice(from, to, view) {
        let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
        let nodes = this.children, size = this.size;
        if (to < size)
            nodes = replaceNodes(nodes, to, size, view);
        if (from > 0)
            nodes = replaceNodes(nodes, 0, from, view);
        for (let i = 0; i < nodes.length; i++)
            nodes[i].parent = copy;
        copy.children = nodes;
        return copy;
    }
}
// Node view descs are the main, most common type of view desc, and
// correspond to an actual node in the document. Unlike mark descs,
// they populate their child array themselves.
class NodeViewDesc extends ViewDesc {
    constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
        super(parent, [], dom, contentDOM);
        this.node = node;
        this.outerDeco = outerDeco;
        this.innerDeco = innerDeco;
        this.nodeDOM = nodeDOM;
    }
    // By default, a node is rendered using the `toDOM` method from the
    // node type spec. But client code can use the `nodeViews` spec to
    // supply a custom node view, which can influence various aspects of
    // the way the node works.
    //
    // (Using subclassing for this was intentionally decided against,
    // since it'd require exposing a whole slew of finicky
    // implementation details to the user code that they probably will
    // never need.)
    static create(parent, node, outerDeco, innerDeco, view, pos) {
        let custom = view.nodeViews[node.type.name], descObj;
        let spec = custom && custom(node, view, () => {
            // (This is a function that allows the custom view to find its
            // own position)
            if (!descObj)
                return pos;
            if (descObj.parent)
                return descObj.parent.posBeforeChild(descObj);
        }, outerDeco, innerDeco);
        let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
        if (node.isText) {
            if (!dom)
                dom = document.createTextNode(node.text);
            else if (dom.nodeType != 3)
                throw new RangeError("Text must be rendered as a DOM text node");
        }
        else if (!dom) {
            let spec = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node), null, node.attrs);
            ({ dom, contentDOM } = spec);
        }
        if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
            if (!dom.hasAttribute("contenteditable"))
                dom.contentEditable = "false";
            if (node.type.spec.draggable)
                dom.draggable = true;
        }
        let nodeDOM = dom;
        dom = applyOuterDeco(dom, outerDeco, node);
        if (spec)
            return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
        else if (node.isText)
            return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
        else
            return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
    }
    parseRule() {
        // Experimental kludge to allow opt-in re-parsing of nodes
        if (this.node.type.spec.reparseInView)
            return null;
        // FIXME the assumption that this can always return the current
        // attrs means that if the user somehow manages to change the
        // attrs in the dom, that won't be picked up. Not entirely sure
        // whether this is a problem
        let rule = { node: this.node.type.name, attrs: this.node.attrs };
        if (this.node.type.whitespace == "pre")
            rule.preserveWhitespace = "full";
        if (!this.contentDOM) {
            rule.getContent = () => this.node.content;
        }
        else if (!this.contentLost) {
            rule.contentElement = this.contentDOM;
        }
        else {
            // Chrome likes to randomly recreate parent nodes when
            // backspacing things. When that happens, this tries to find the
            // new parent.
            for (let i = this.children.length - 1; i >= 0; i--) {
                let child = this.children[i];
                if (this.dom.contains(child.dom.parentNode)) {
                    rule.contentElement = child.dom.parentNode;
                    break;
                }
            }
            if (!rule.contentElement)
                rule.getContent = () => Fragment.empty;
        }
        return rule;
    }
    matchesNode(node, outerDeco, innerDeco) {
        return this.dirty == NOT_DIRTY && node.eq(this.node) &&
            sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
    }
    get size() { return this.node.nodeSize; }
    get border() { return this.node.isLeaf ? 0 : 1; }
    // Syncs `this.children` to match `this.node.content` and the local
    // decorations, possibly introducing nesting for marks. Then, in a
    // separate step, syncs the DOM inside `this.contentDOM` to
    // `this.children`.
    updateChildren(view, pos) {
        let inline = this.node.inlineContent, off = pos;
        let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
        let localComposition = composition && composition.pos > -1 ? composition : null;
        let compositionInChild = composition && composition.pos < 0;
        let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
        iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
            if (widget.spec.marks)
                updater.syncToMarks(widget.spec.marks, inline, view);
            else if (widget.type.side >= 0 && !insideNode)
                updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view);
            // If the next node is a desc matching this widget, reuse it,
            // otherwise insert the widget as a new view desc.
            updater.placeWidget(widget, view, off);
        }, (child, outerDeco, innerDeco, i) => {
            // Make sure the wrapping mark descs match the node's marks.
            updater.syncToMarks(child.marks, inline, view);
            // Try several strategies for drawing this node
            let compIndex;
            if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
            else if (compositionInChild && view.state.selection.from > off &&
                view.state.selection.to < off + child.nodeSize &&
                (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
            else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i, off)) ;
            else {
                // Add it as a new view
                updater.addNode(child, outerDeco, innerDeco, view, off);
            }
            off += child.nodeSize;
        });
        // Drop all remaining descs after the current position.
        updater.syncToMarks([], inline, view);
        if (this.node.isTextblock)
            updater.addTextblockHacks();
        updater.destroyRest();
        // Sync the DOM if anything changed
        if (updater.changed || this.dirty == CONTENT_DIRTY) {
            // May have to protect focused DOM from being changed if a composition is active
            if (localComposition)
                this.protectLocalComposition(view, localComposition);
            renderDescs(this.contentDOM, this.children, view);
            if (ios)
                iosHacks(this.dom);
        }
    }
    localCompositionInfo(view, pos) {
        // Only do something if both the selection and a focused text node
        // are inside of this node
        let { from, to } = view.state.selection;
        if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size)
            return null;
        let textNode = view.input.compositionNode;
        if (!textNode || !this.dom.contains(textNode.parentNode))
            return null;
        if (this.node.inlineContent) {
            // Find the text in the focused node in the node, stop if it's not
            // there (may have been modified through other means, in which
            // case it should overwritten)
            let text = textNode.nodeValue;
            let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
            return textPos < 0 ? null : { node: textNode, pos: textPos, text };
        }
        else {
            return { node: textNode, pos: -1, text: "" };
        }
    }
    protectLocalComposition(view, { node, pos, text }) {
        // The node is already part of a local view desc, leave it there
        if (this.getDesc(node))
            return;
        // Create a composition view for the orphaned nodes
        let topNode = node;
        for (;; topNode = topNode.parentNode) {
            if (topNode.parentNode == this.contentDOM)
                break;
            while (topNode.previousSibling)
                topNode.parentNode.removeChild(topNode.previousSibling);
            while (topNode.nextSibling)
                topNode.parentNode.removeChild(topNode.nextSibling);
            if (topNode.pmViewDesc)
                topNode.pmViewDesc = undefined;
        }
        let desc = new CompositionViewDesc(this, topNode, node, text);
        view.input.compositionNodes.push(desc);
        // Patch up this.children to contain the composition view
        this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
    }
    // If this desc must be updated to match the given node decoration,
    // do so and return true.
    update(node, outerDeco, innerDeco, view) {
        if (this.dirty == NODE_DIRTY ||
            !node.sameMarkup(this.node))
            return false;
        this.updateInner(node, outerDeco, innerDeco, view);
        return true;
    }
    updateInner(node, outerDeco, innerDeco, view) {
        this.updateOuterDeco(outerDeco);
        this.node = node;
        this.innerDeco = innerDeco;
        if (this.contentDOM)
            this.updateChildren(view, this.posAtStart);
        this.dirty = NOT_DIRTY;
    }
    updateOuterDeco(outerDeco) {
        if (sameOuterDeco(outerDeco, this.outerDeco))
            return;
        let needsWrap = this.nodeDOM.nodeType != 1;
        let oldDOM = this.dom;
        this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
        if (this.dom != oldDOM) {
            oldDOM.pmViewDesc = undefined;
            this.dom.pmViewDesc = this;
        }
        this.outerDeco = outerDeco;
    }
    // Mark this node as being the selected node.
    selectNode() {
        if (this.nodeDOM.nodeType == 1)
            this.nodeDOM.classList.add("ProseMirror-selectednode");
        if (this.contentDOM || !this.node.type.spec.draggable)
            this.dom.draggable = true;
    }
    // Remove selected node marking from this node.
    deselectNode() {
        if (this.nodeDOM.nodeType == 1) {
            this.nodeDOM.classList.remove("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.removeAttribute("draggable");
        }
    }
    get domAtom() { return this.node.isAtom; }
}
// Create a view desc for the top-level document node, to be exported
// and used by the view class.
function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
    applyOuterDeco(dom, outerDeco, doc);
    let docView = new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
    if (docView.contentDOM)
        docView.updateChildren(view, 0);
    return docView;
}
class TextViewDesc extends NodeViewDesc {
    constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
        super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
    }
    parseRule() {
        let skip = this.nodeDOM.parentNode;
        while (skip && skip != this.dom && !skip.pmIsDeco)
            skip = skip.parentNode;
        return { skip: (skip || true) };
    }
    update(node, outerDeco, innerDeco, view) {
        if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
            !node.sameMarkup(this.node))
            return false;
        this.updateOuterDeco(outerDeco);
        if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
            this.nodeDOM.nodeValue = node.text;
            if (view.trackWrites == this.nodeDOM)
                view.trackWrites = null;
        }
        this.node = node;
        this.dirty = NOT_DIRTY;
        return true;
    }
    inParent() {
        let parentDOM = this.parent.contentDOM;
        for (let n = this.nodeDOM; n; n = n.parentNode)
            if (n == parentDOM)
                return true;
        return false;
    }
    domFromPos(pos) {
        return { node: this.nodeDOM, offset: pos };
    }
    localPosFromDOM(dom, offset, bias) {
        if (dom == this.nodeDOM)
            return this.posAtStart + Math.min(offset, this.node.text.length);
        return super.localPosFromDOM(dom, offset, bias);
    }
    ignoreMutation(mutation) {
        return mutation.type != "characterData" && mutation.type != "selection";
    }
    slice(from, to, view) {
        let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
        return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
    }
    markDirty(from, to) {
        super.markDirty(from, to);
        if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
            this.dirty = NODE_DIRTY;
    }
    get domAtom() { return false; }
    isText(text) { return this.node.text == text; }
}
// A dummy desc used to tag trailing BR or IMG nodes created to work
// around contentEditable terribleness.
class TrailingHackViewDesc extends ViewDesc {
    parseRule() { return { ignore: true }; }
    matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
    get domAtom() { return true; }
    get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
}
// A separate subclass is used for customized node views, so that the
// extra checks only have to be made for nodes that are actually
// customized.
class CustomNodeViewDesc extends NodeViewDesc {
    constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
        super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
        this.spec = spec;
    }
    // A custom `update` method gets to decide whether the update goes
    // through. If it does, and there's a `contentDOM` node, our logic
    // updates the children.
    update(node, outerDeco, innerDeco, view) {
        if (this.dirty == NODE_DIRTY)
            return false;
        if (this.spec.update) {
            let result = this.spec.update(node, outerDeco, innerDeco);
            if (result)
                this.updateInner(node, outerDeco, innerDeco, view);
            return result;
        }
        else if (!this.contentDOM && !node.isLeaf) {
            return false;
        }
        else {
            return super.update(node, outerDeco, innerDeco, view);
        }
    }
    selectNode() {
        this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
    }
    deselectNode() {
        this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
    }
    setSelection(anchor, head, root, force) {
        this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
            : super.setSelection(anchor, head, root, force);
    }
    destroy() {
        if (this.spec.destroy)
            this.spec.destroy();
        super.destroy();
    }
    stopEvent(event) {
        return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
    }
    ignoreMutation(mutation) {
        return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
    }
}
// Sync the content of the given DOM node with the nodes associated
// with the given array of view descs, recursing into mark descs
// because this should sync the subtree for a whole node at a time.
function renderDescs(parentDOM, descs, view) {
    let dom = parentDOM.firstChild, written = false;
    for (let i = 0; i < descs.length; i++) {
        let desc = descs[i], childDOM = desc.dom;
        if (childDOM.parentNode == parentDOM) {
            while (childDOM != dom) {
                dom = rm(dom);
                written = true;
            }
            dom = dom.nextSibling;
        }
        else {
            written = true;
            parentDOM.insertBefore(childDOM, dom);
        }
        if (desc instanceof MarkViewDesc) {
            let pos = dom ? dom.previousSibling : parentDOM.lastChild;
            renderDescs(desc.contentDOM, desc.children, view);
            dom = pos ? pos.nextSibling : parentDOM.firstChild;
        }
    }
    while (dom) {
        dom = rm(dom);
        written = true;
    }
    if (written && view.trackWrites == parentDOM)
        view.trackWrites = null;
}
const OuterDecoLevel = function (nodeName) {
    if (nodeName)
        this.nodeName = nodeName;
};
OuterDecoLevel.prototype = Object.create(null);
const noDeco = [new OuterDecoLevel];
function computeOuterDeco(outerDeco, node, needsWrap) {
    if (outerDeco.length == 0)
        return noDeco;
    let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
    for (let i = 0; i < outerDeco.length; i++) {
        let attrs = outerDeco[i].type.attrs;
        if (!attrs)
            continue;
        if (attrs.nodeName)
            result.push(top = new OuterDecoLevel(attrs.nodeName));
        for (let name in attrs) {
            let val = attrs[name];
            if (val == null)
                continue;
            if (needsWrap && result.length == 1)
                result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
            if (name == "class")
                top.class = (top.class ? top.class + " " : "") + val;
            else if (name == "style")
                top.style = (top.style ? top.style + ";" : "") + val;
            else if (name != "nodeName")
                top[name] = val;
        }
    }
    return result;
}
function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
    // Shortcut for trivial case
    if (prevComputed == noDeco && curComputed == noDeco)
        return nodeDOM;
    let curDOM = nodeDOM;
    for (let i = 0; i < curComputed.length; i++) {
        let deco = curComputed[i], prev = prevComputed[i];
        if (i) {
            let parent;
            if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                curDOM = parent;
            }
            else {
                parent = document.createElement(deco.nodeName);
                parent.pmIsDeco = true;
                parent.appendChild(curDOM);
                prev = noDeco[0];
                curDOM = parent;
            }
        }
        patchAttributes(curDOM, prev || noDeco[0], deco);
    }
    return curDOM;
}
function patchAttributes(dom, prev, cur) {
    for (let name in prev)
        if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
            dom.removeAttribute(name);
    for (let name in cur)
        if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
            dom.setAttribute(name, cur[name]);
    if (prev.class != cur.class) {
        let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
        let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
        for (let i = 0; i < prevList.length; i++)
            if (curList.indexOf(prevList[i]) == -1)
                dom.classList.remove(prevList[i]);
        for (let i = 0; i < curList.length; i++)
            if (prevList.indexOf(curList[i]) == -1)
                dom.classList.add(curList[i]);
        if (dom.classList.length == 0)
            dom.removeAttribute("class");
    }
    if (prev.style != cur.style) {
        if (prev.style) {
            let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
            while (m = prop.exec(prev.style))
                dom.style.removeProperty(m[1]);
        }
        if (cur.style)
            dom.style.cssText += cur.style;
    }
}
function applyOuterDeco(dom, deco, node) {
    return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
}
function sameOuterDeco(a, b) {
    if (a.length != b.length)
        return false;
    for (let i = 0; i < a.length; i++)
        if (!a[i].type.eq(b[i].type))
            return false;
    return true;
}
// Remove a DOM node and return its next sibling.
function rm(dom) {
    let next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
}
// Helper class for incrementally updating a tree of mark descs and
// the widget and node descs inside of them.
class ViewTreeUpdater {
    constructor(top, lock, view) {
        this.lock = lock;
        this.view = view;
        // Index into `this.top`'s child array, represents the current
        // update position.
        this.index = 0;
        // When entering a mark, the current top and index are pushed
        // onto this.
        this.stack = [];
        // Tracks whether anything was changed
        this.changed = false;
        this.top = top;
        this.preMatch = preMatch(top.node.content, top);
    }
    // Destroy and remove the children between the given indices in
    // `this.top`.
    destroyBetween(start, end) {
        if (start == end)
            return;
        for (let i = start; i < end; i++)
            this.top.children[i].destroy();
        this.top.children.splice(start, end - start);
        this.changed = true;
    }
    // Destroy all remaining children in `this.top`.
    destroyRest() {
        this.destroyBetween(this.index, this.top.children.length);
    }
    // Sync the current stack of mark descs with the given array of
    // marks, reusing existing mark descs when possible.
    syncToMarks(marks, inline, view) {
        let keep = 0, depth = this.stack.length >> 1;
        let maxKeep = Math.min(depth, marks.length);
        while (keep < maxKeep &&
            (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
            keep++;
        while (keep < depth) {
            this.destroyRest();
            this.top.dirty = NOT_DIRTY;
            this.index = this.stack.pop();
            this.top = this.stack.pop();
            depth--;
        }
        while (depth < marks.length) {
            this.stack.push(this.top, this.index + 1);
            let found = -1;
            for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                let next = this.top.children[i];
                if (next.matchesMark(marks[depth]) && !this.isLocked(next.dom)) {
                    found = i;
                    break;
                }
            }
            if (found > -1) {
                if (found > this.index) {
                    this.changed = true;
                    this.destroyBetween(this.index, found);
                }
                this.top = this.top.children[this.index];
            }
            else {
                let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                this.top.children.splice(this.index, 0, markDesc);
                this.top = markDesc;
                this.changed = true;
            }
            this.index = 0;
            depth++;
        }
    }
    // Try to find a node desc matching the given data. Skip over it and
    // return true when successful.
    findNodeMatch(node, outerDeco, innerDeco, index) {
        let found = -1, targetDesc;
        if (index >= this.preMatch.index &&
            (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
            targetDesc.matchesNode(node, outerDeco, innerDeco)) {
            found = this.top.children.indexOf(targetDesc, this.index);
        }
        else {
            for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                let child = this.top.children[i];
                if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                    found = i;
                    break;
                }
            }
        }
        if (found < 0)
            return false;
        this.destroyBetween(this.index, found);
        this.index++;
        return true;
    }
    updateNodeAt(node, outerDeco, innerDeco, index, view) {
        let child = this.top.children[index];
        if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
            child.dirty = CONTENT_DIRTY;
        if (!child.update(node, outerDeco, innerDeco, view))
            return false;
        this.destroyBetween(this.index, index);
        this.index++;
        return true;
    }
    findIndexWithChild(domNode) {
        for (;;) {
            let parent = domNode.parentNode;
            if (!parent)
                return -1;
            if (parent == this.top.contentDOM) {
                let desc = domNode.pmViewDesc;
                if (desc)
                    for (let i = this.index; i < this.top.children.length; i++) {
                        if (this.top.children[i] == desc)
                            return i;
                    }
                return -1;
            }
            domNode = parent;
        }
    }
    // Try to update the next node, if any, to the given data. Checks
    // pre-matches to avoid overwriting nodes that could still be used.
    updateNextNode(node, outerDeco, innerDeco, view, index, pos) {
        for (let i = this.index; i < this.top.children.length; i++) {
            let next = this.top.children[i];
            if (next instanceof NodeViewDesc) {
                let preMatch = this.preMatch.matched.get(next);
                if (preMatch != null && preMatch != index)
                    return false;
                let nextDOM = next.dom, updated;
                // Can't update if nextDOM is or contains this.lock, except if
                // it's a text node whose content already matches the new text
                // and whose decorations match the new ones.
                let locked = this.isLocked(nextDOM) &&
                    !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                        next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                    this.destroyBetween(this.index, i);
                    if (next.dom != nextDOM)
                        this.changed = true;
                    this.index++;
                    return true;
                }
                else if (!locked && (updated = this.recreateWrapper(next, node, outerDeco, innerDeco, view, pos))) {
                    this.top.children[this.index] = updated;
                    if (updated.contentDOM) {
                        updated.dirty = CONTENT_DIRTY;
                        updated.updateChildren(view, pos + 1);
                        updated.dirty = NOT_DIRTY;
                    }
                    this.changed = true;
                    this.index++;
                    return true;
                }
                break;
            }
        }
        return false;
    }
    // When a node with content is replaced by a different node with
    // identical content, move over its children.
    recreateWrapper(next, node, outerDeco, innerDeco, view, pos) {
        if (next.dirty || node.isAtom || !next.children.length ||
            !next.node.content.eq(node.content))
            return null;
        let wrapper = NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos);
        if (wrapper.contentDOM) {
            wrapper.children = next.children;
            next.children = [];
            for (let ch of wrapper.children)
                ch.parent = wrapper;
        }
        next.destroy();
        return wrapper;
    }
    // Insert the node as a newly created node desc.
    addNode(node, outerDeco, innerDeco, view, pos) {
        let desc = NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos);
        if (desc.contentDOM)
            desc.updateChildren(view, pos + 1);
        this.top.children.splice(this.index++, 0, desc);
        this.changed = true;
    }
    placeWidget(widget, view, pos) {
        let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
        if (next && next.matchesWidget(widget) &&
            (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
            this.index++;
        }
        else {
            let desc = new WidgetViewDesc(this.top, widget, view, pos);
            this.top.children.splice(this.index++, 0, desc);
            this.changed = true;
        }
    }
    // Make sure a textblock looks and behaves correctly in
    // contentEditable.
    addTextblockHacks() {
        let lastChild = this.top.children[this.index - 1], parent = this.top;
        while (lastChild instanceof MarkViewDesc) {
            parent = lastChild;
            lastChild = parent.children[parent.children.length - 1];
        }
        if (!lastChild || // Empty textblock
            !(lastChild instanceof TextViewDesc) ||
            /\n$/.test(lastChild.node.text) ||
            (this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text))) {
            // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
            if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
                this.addHackNode("IMG", parent);
            this.addHackNode("BR", this.top);
        }
    }
    addHackNode(nodeName, parent) {
        if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
            this.index++;
        }
        else {
            let dom = document.createElement(nodeName);
            if (nodeName == "IMG") {
                dom.className = "ProseMirror-separator";
                dom.alt = "";
            }
            if (nodeName == "BR")
                dom.className = "ProseMirror-trailingBreak";
            let hack = new TrailingHackViewDesc(this.top, [], dom, null);
            if (parent != this.top)
                parent.children.push(hack);
            else
                parent.children.splice(this.index++, 0, hack);
            this.changed = true;
        }
    }
    isLocked(node) {
        return this.lock && (node == this.lock || node.nodeType == 1 && node.contains(this.lock.parentNode));
    }
}
// Iterate from the end of the fragment and array of descs to find
// directly matching ones, in order to avoid overeagerly reusing those
// for other nodes. Returns the fragment index of the first node that
// is part of the sequence of matched nodes at the end of the
// fragment.
function preMatch(frag, parentDesc) {
    let curDesc = parentDesc, descI = curDesc.children.length;
    let fI = frag.childCount, matched = new Map, matches = [];
    outer: while (fI > 0) {
        let desc;
        for (;;) {
            if (descI) {
                let next = curDesc.children[descI - 1];
                if (next instanceof MarkViewDesc) {
                    curDesc = next;
                    descI = next.children.length;
                }
                else {
                    desc = next;
                    descI--;
                    break;
                }
            }
            else if (curDesc == parentDesc) {
                break outer;
            }
            else {
                // FIXME
                descI = curDesc.parent.children.indexOf(curDesc);
                curDesc = curDesc.parent;
            }
        }
        let node = desc.node;
        if (!node)
            continue;
        if (node != frag.child(fI - 1))
            break;
        --fI;
        matched.set(desc, fI);
        matches.push(desc);
    }
    return { index: fI, matched, matches: matches.reverse() };
}
function compareSide(a, b) {
    return a.type.side - b.type.side;
}
// This function abstracts iterating over the nodes and decorations in
// a fragment. Calls `onNode` for each node, with its local and child
// decorations. Splits text nodes when there is a decoration starting
// or ending inside of them. Calls `onWidget` for each widget.
function iterDeco(parent, deco, onWidget, onNode) {
    let locals = deco.locals(parent), offset = 0;
    // Simple, cheap variant for when there are no local decorations
    if (locals.length == 0) {
        for (let i = 0; i < parent.childCount; i++) {
            let child = parent.child(i);
            onNode(child, locals, deco.forChild(offset, child), i);
            offset += child.nodeSize;
        }
        return;
    }
    let decoIndex = 0, active = [], restNode = null;
    for (let parentIndex = 0;;) {
        let widget, widgets;
        while (decoIndex < locals.length && locals[decoIndex].to == offset) {
            let next = locals[decoIndex++];
            if (next.widget) {
                if (!widget)
                    widget = next;
                else
                    (widgets || (widgets = [widget])).push(next);
            }
        }
        if (widget) {
            if (widgets) {
                widgets.sort(compareSide);
                for (let i = 0; i < widgets.length; i++)
                    onWidget(widgets[i], parentIndex, !!restNode);
            }
            else {
                onWidget(widget, parentIndex, !!restNode);
            }
        }
        let child, index;
        if (restNode) {
            index = -1;
            child = restNode;
            restNode = null;
        }
        else if (parentIndex < parent.childCount) {
            index = parentIndex;
            child = parent.child(parentIndex++);
        }
        else {
            break;
        }
        for (let i = 0; i < active.length; i++)
            if (active[i].to <= offset)
                active.splice(i--, 1);
        while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
            active.push(locals[decoIndex++]);
        let end = offset + child.nodeSize;
        if (child.isText) {
            let cutAt = end;
            if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                cutAt = locals[decoIndex].from;
            for (let i = 0; i < active.length; i++)
                if (active[i].to < cutAt)
                    cutAt = active[i].to;
            if (cutAt < end) {
                restNode = child.cut(cutAt - offset);
                child = child.cut(0, cutAt - offset);
                end = cutAt;
                index = -1;
            }
        }
        else {
            while (decoIndex < locals.length && locals[decoIndex].to < end)
                decoIndex++;
        }
        let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
        onNode(child, outerDeco, deco.forChild(offset, child), index);
        offset = end;
    }
}
// List markers in Mobile Safari will mysteriously disappear
// sometimes. This works around that.
function iosHacks(dom) {
    if (dom.nodeName == "UL" || dom.nodeName == "OL") {
        let oldCSS = dom.style.cssText;
        dom.style.cssText = oldCSS + "; list-style: square !important";
        window.getComputedStyle(dom).listStyle;
        dom.style.cssText = oldCSS;
    }
}
// Find a piece of text in an inline fragment, overlapping from-to
function findTextInFragment(frag, text, from, to) {
    for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
        let child = frag.child(i++), childStart = pos;
        pos += child.nodeSize;
        if (!child.isText)
            continue;
        let str = child.text;
        while (i < frag.childCount) {
            let next = frag.child(i++);
            pos += next.nodeSize;
            if (!next.isText)
                break;
            str += next.text;
        }
        if (pos >= from) {
            if (pos >= to && str.slice(to - text.length - childStart, to - childStart) == text)
                return to - text.length;
            let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
            if (found >= 0 && found + text.length + childStart >= from)
                return childStart + found;
            if (from == to && str.length >= (to + text.length) - childStart &&
                str.slice(to - childStart, to - childStart + text.length) == text)
                return to;
        }
    }
    return -1;
}
// Replace range from-to in an array of view descs with replacement
// (may be null to just delete). This goes very much against the grain
// of the rest of this code, which tends to create nodes with the
// right shape in one go, rather than messing with them after
// creation, but is necessary in the composition hack.
function replaceNodes(nodes, from, to, view, replacement) {
    let result = [];
    for (let i = 0, off = 0; i < nodes.length; i++) {
        let child = nodes[i], start = off, end = off += child.size;
        if (start >= to || end <= from) {
            result.push(child);
        }
        else {
            if (start < from)
                result.push(child.slice(0, from - start, view));
            if (replacement) {
                result.push(replacement);
                replacement = undefined;
            }
            if (end > to)
                result.push(child.slice(to - start, child.size, view));
        }
    }
    return result;
}

function selectionFromDOM(view, origin = null) {
    let domSel = view.domSelectionRange(), doc = view.state.doc;
    if (!domSel.focusNode)
        return null;
    let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
    let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
    if (head < 0)
        return null;
    let $head = doc.resolve(head), $anchor, selection;
    if (selectionCollapsed(domSel)) {
        $anchor = $head;
        while (nearestDesc && !nearestDesc.node)
            nearestDesc = nearestDesc.parent;
        let nearestDescNode = nearestDesc.node;
        if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
            && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
            let pos = nearestDesc.posBefore;
            selection = new NodeSelection(head == pos ? $head : doc.resolve(pos));
        }
    }
    else {
        let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
        if (anchor < 0)
            return null;
        $anchor = doc.resolve(anchor);
    }
    if (!selection) {
        let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
        selection = selectionBetween(view, $anchor, $head, bias);
    }
    return selection;
}
function editorOwnsSelection(view) {
    return view.editable ? view.hasFocus() :
        hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
}
function selectionToDOM(view, force = false) {
    let sel = view.state.selection;
    syncNodeSelection(view, sel);
    if (!editorOwnsSelection(view))
        return;
    // The delayed drag selection causes issues with Cell Selections
    // in Safari. And the drag selection delay is to workarond issues
    // which only present in Chrome.
    if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
        let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
        if (domSel.anchorNode && curSel.anchorNode &&
            isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
            view.input.mouseDown.delayedSelectionSync = true;
            view.domObserver.setCurSelection();
            return;
        }
    }
    view.domObserver.disconnectSelection();
    if (view.cursorWrapper) {
        selectCursorWrapper(view);
    }
    else {
        let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
        if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
            if (!sel.$from.parent.inlineContent)
                resetEditableFrom = temporarilyEditableNear(view, sel.from);
            if (!sel.empty && !sel.$from.parent.inlineContent)
                resetEditableTo = temporarilyEditableNear(view, sel.to);
        }
        view.docView.setSelection(anchor, head, view.root, force);
        if (brokenSelectBetweenUneditable) {
            if (resetEditableFrom)
                resetEditable(resetEditableFrom);
            if (resetEditableTo)
                resetEditable(resetEditableTo);
        }
        if (sel.visible) {
            view.dom.classList.remove("ProseMirror-hideselection");
        }
        else {
            view.dom.classList.add("ProseMirror-hideselection");
            if ("onselectionchange" in document)
                removeClassOnSelectionChange(view);
        }
    }
    view.domObserver.setCurSelection();
    view.domObserver.connectSelection();
}
// Kludge to work around Webkit not allowing a selection to start/end
// between non-editable block nodes. We briefly make something
// editable, set the selection, then set it uneditable again.
const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
function temporarilyEditableNear(view, pos) {
    let { node, offset } = view.docView.domFromPos(pos, 0);
    let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
    let before = offset ? node.childNodes[offset - 1] : null;
    if (safari && after && after.contentEditable == "false")
        return setEditable(after);
    if ((!after || after.contentEditable == "false") &&
        (!before || before.contentEditable == "false")) {
        if (after)
            return setEditable(after);
        else if (before)
            return setEditable(before);
    }
}
function setEditable(element) {
    element.contentEditable = "true";
    if (safari && element.draggable) {
        element.draggable = false;
        element.wasDraggable = true;
    }
    return element;
}
function resetEditable(element) {
    element.contentEditable = "false";
    if (element.wasDraggable) {
        element.draggable = true;
        element.wasDraggable = null;
    }
}
function removeClassOnSelectionChange(view) {
    let doc = view.dom.ownerDocument;
    doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
    let domSel = view.domSelectionRange();
    let node = domSel.anchorNode, offset = domSel.anchorOffset;
    doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
        if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
            doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
            setTimeout(() => {
                if (!editorOwnsSelection(view) || view.state.selection.visible)
                    view.dom.classList.remove("ProseMirror-hideselection");
            }, 20);
        }
    });
}
function selectCursorWrapper(view) {
    let domSel = view.domSelection(), range = document.createRange();
    if (!domSel)
        return;
    let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
    if (img)
        range.setStart(node.parentNode, domIndex(node) + 1);
    else
        range.setStart(node, 0);
    let sel = view.state.selection;
    if (sel.empty) {
        range.collapse(true);
    }
    else {
        let end = view.domAtPos(sel.to);
        range.setEnd(end.node, end.offset);
    }
    domSel.removeAllRanges();
    domSel.addRange(range);
    // Kludge to kill 'control selection' in IE11 when selecting an
    // invisible cursor wrapper, since that would result in those weird
    // resize handles and a selection that considers the absolutely
    // positioned wrapper, rather than the root editable node, the
    // focused element.
    if (!img && !view.state.selection.visible && ie$1 && ie_version <= 11) {
        node.disabled = true;
        node.disabled = false;
    }
}
function syncNodeSelection(view, sel) {
    if (sel instanceof NodeSelection) {
        let desc = view.docView.descAt(sel.from);
        if (desc != view.lastSelectedViewDesc) {
            clearNodeSelection(view);
            if (desc)
                desc.selectNode();
            view.lastSelectedViewDesc = desc;
        }
    }
    else {
        clearNodeSelection(view);
    }
}
// Clear all DOM statefulness of the last node selection.
function clearNodeSelection(view) {
    if (view.lastSelectedViewDesc) {
        if (view.lastSelectedViewDesc.parent)
            view.lastSelectedViewDesc.deselectNode();
        view.lastSelectedViewDesc = undefined;
    }
}
function selectionBetween(view, $anchor, $head, bias) {
    return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
        || TextSelection.between($anchor, $head, bias);
}
function hasFocusAndSelection(view) {
    if (view.editable && !view.hasFocus())
        return false;
    return hasSelection(view);
}
function hasSelection(view) {
    let sel = view.domSelectionRange();
    if (!sel.anchorNode)
        return false;
    try {
        // Firefox will raise 'permission denied' errors when accessing
        // properties of `sel.anchorNode` when it's in a generated CSS
        // element.
        return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
            (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
    }
    catch (_) {
        return false;
    }
}
function anchorInRightPlace(view) {
    let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
    let domSel = view.domSelectionRange();
    return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
}

function moveSelectionBlock(state, dir) {
    let { $anchor, $head } = state.selection;
    let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
    let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
    return $start && Selection.findFrom($start, dir);
}
function apply(view, sel) {
    view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
    return true;
}
function selectHorizontally(view, dir, mods) {
    let sel = view.state.selection;
    if (sel instanceof TextSelection) {
        if (mods.indexOf("s") > -1) {
            let { $head } = sel, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter;
            if (!node || node.isText || !node.isLeaf)
                return false;
            let $newHead = view.state.doc.resolve($head.pos + node.nodeSize * (dir < 0 ? -1 : 1));
            return apply(view, new TextSelection(sel.$anchor, $newHead));
        }
        else if (!sel.empty) {
            return false;
        }
        else if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) {
            let next = moveSelectionBlock(view.state, dir);
            if (next && (next instanceof NodeSelection))
                return apply(view, next);
            return false;
        }
        else if (!(mac$4 && mods.indexOf("m") > -1)) {
            let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
            if (!node || node.isText)
                return false;
            let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
            if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                return false;
            if (NodeSelection.isSelectable(node)) {
                return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
            }
            else if (webkit) {
                // Chrome and Safari will introduce extra pointless cursor
                // positions around inline uneditable nodes, so we have to
                // take over and move the cursor past them (#937)
                return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
            }
            else {
                return false;
            }
        }
    }
    else if (sel instanceof NodeSelection && sel.node.isInline) {
        return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
    }
    else {
        let next = moveSelectionBlock(view.state, dir);
        if (next)
            return apply(view, next);
        return false;
    }
}
function nodeLen(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function isIgnorable(dom, dir) {
    let desc = dom.pmViewDesc;
    return desc && desc.size == 0 && (dir < 0 || dom.nextSibling || dom.nodeName != "BR");
}
function skipIgnoredNodes(view, dir) {
    return dir < 0 ? skipIgnoredNodesBefore(view) : skipIgnoredNodesAfter(view);
}
// Make sure the cursor isn't directly after one or more ignored
// nodes, which will confuse the browser's cursor motion logic.
function skipIgnoredNodesBefore(view) {
    let sel = view.domSelectionRange();
    let node = sel.focusNode, offset = sel.focusOffset;
    if (!node)
        return;
    let moveNode, moveOffset, force = false;
    // Gecko will do odd things when the selection is directly in front
    // of a non-editable node, so in that case, move it into the next
    // node if possible. Issue prosemirror/prosemirror#832.
    if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset], -1))
        force = true;
    for (;;) {
        if (offset > 0) {
            if (node.nodeType != 1) {
                break;
            }
            else {
                let before = node.childNodes[offset - 1];
                if (isIgnorable(before, -1)) {
                    moveNode = node;
                    moveOffset = --offset;
                }
                else if (before.nodeType == 3) {
                    node = before;
                    offset = node.nodeValue.length;
                }
                else
                    break;
            }
        }
        else if (isBlockNode(node)) {
            break;
        }
        else {
            let prev = node.previousSibling;
            while (prev && isIgnorable(prev, -1)) {
                moveNode = node.parentNode;
                moveOffset = domIndex(prev);
                prev = prev.previousSibling;
            }
            if (!prev) {
                node = node.parentNode;
                if (node == view.dom)
                    break;
                offset = 0;
            }
            else {
                node = prev;
                offset = nodeLen(node);
            }
        }
    }
    if (force)
        setSelFocus(view, node, offset);
    else if (moveNode)
        setSelFocus(view, moveNode, moveOffset);
}
// Make sure the cursor isn't directly before one or more ignored
// nodes.
function skipIgnoredNodesAfter(view) {
    let sel = view.domSelectionRange();
    let node = sel.focusNode, offset = sel.focusOffset;
    if (!node)
        return;
    let len = nodeLen(node);
    let moveNode, moveOffset;
    for (;;) {
        if (offset < len) {
            if (node.nodeType != 1)
                break;
            let after = node.childNodes[offset];
            if (isIgnorable(after, 1)) {
                moveNode = node;
                moveOffset = ++offset;
            }
            else
                break;
        }
        else if (isBlockNode(node)) {
            break;
        }
        else {
            let next = node.nextSibling;
            while (next && isIgnorable(next, 1)) {
                moveNode = next.parentNode;
                moveOffset = domIndex(next) + 1;
                next = next.nextSibling;
            }
            if (!next) {
                node = node.parentNode;
                if (node == view.dom)
                    break;
                offset = len = 0;
            }
            else {
                node = next;
                offset = 0;
                len = nodeLen(node);
            }
        }
    }
    if (moveNode)
        setSelFocus(view, moveNode, moveOffset);
}
function isBlockNode(dom) {
    let desc = dom.pmViewDesc;
    return desc && desc.node && desc.node.isBlock;
}
function textNodeAfter(node, offset) {
    while (node && offset == node.childNodes.length && !hasBlockDesc(node)) {
        offset = domIndex(node) + 1;
        node = node.parentNode;
    }
    while (node && offset < node.childNodes.length) {
        let next = node.childNodes[offset];
        if (next.nodeType == 3)
            return next;
        if (next.nodeType == 1 && next.contentEditable == "false")
            break;
        node = next;
        offset = 0;
    }
}
function textNodeBefore(node, offset) {
    while (node && !offset && !hasBlockDesc(node)) {
        offset = domIndex(node);
        node = node.parentNode;
    }
    while (node && offset) {
        let next = node.childNodes[offset - 1];
        if (next.nodeType == 3)
            return next;
        if (next.nodeType == 1 && next.contentEditable == "false")
            break;
        node = next;
        offset = node.childNodes.length;
    }
}
function setSelFocus(view, node, offset) {
    if (node.nodeType != 3) {
        let before, after;
        if (after = textNodeAfter(node, offset)) {
            node = after;
            offset = 0;
        }
        else if (before = textNodeBefore(node, offset)) {
            node = before;
            offset = before.nodeValue.length;
        }
    }
    let sel = view.domSelection();
    if (!sel)
        return;
    if (selectionCollapsed(sel)) {
        let range = document.createRange();
        range.setEnd(node, offset);
        range.setStart(node, offset);
        sel.removeAllRanges();
        sel.addRange(range);
    }
    else if (sel.extend) {
        sel.extend(node, offset);
    }
    view.domObserver.setCurSelection();
    let { state } = view;
    // If no state update ends up happening, reset the selection.
    setTimeout(() => {
        if (view.state == state)
            selectionToDOM(view);
    }, 50);
}
function findDirection(view, pos) {
    let $pos = view.state.doc.resolve(pos);
    if (!(chrome || windows) && $pos.parent.inlineContent) {
        let coords = view.coordsAtPos(pos);
        if (pos > $pos.start()) {
            let before = view.coordsAtPos(pos - 1);
            let mid = (before.top + before.bottom) / 2;
            if (mid > coords.top && mid < coords.bottom && Math.abs(before.left - coords.left) > 1)
                return before.left < coords.left ? "ltr" : "rtl";
        }
        if (pos < $pos.end()) {
            let after = view.coordsAtPos(pos + 1);
            let mid = (after.top + after.bottom) / 2;
            if (mid > coords.top && mid < coords.bottom && Math.abs(after.left - coords.left) > 1)
                return after.left > coords.left ? "ltr" : "rtl";
        }
    }
    let computed = getComputedStyle(view.dom).direction;
    return computed == "rtl" ? "rtl" : "ltr";
}
// Check whether vertical selection motion would involve node
// selections. If so, apply it (if not, the result is left to the
// browser)
function selectVertically(view, dir, mods) {
    let sel = view.state.selection;
    if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
        return false;
    if (mac$4 && mods.indexOf("m") > -1)
        return false;
    let { $from, $to } = sel;
    if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
        let next = moveSelectionBlock(view.state, dir);
        if (next && (next instanceof NodeSelection))
            return apply(view, next);
    }
    if (!$from.parent.inlineContent) {
        let side = dir < 0 ? $from : $to;
        let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
        return beyond ? apply(view, beyond) : false;
    }
    return false;
}
function stopNativeHorizontalDelete(view, dir) {
    if (!(view.state.selection instanceof TextSelection))
        return true;
    let { $head, $anchor, empty } = view.state.selection;
    if (!$head.sameParent($anchor))
        return true;
    if (!empty)
        return false;
    if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
        return true;
    let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
    if (nextNode && !nextNode.isText) {
        let tr = view.state.tr;
        if (dir < 0)
            tr.delete($head.pos - nextNode.nodeSize, $head.pos);
        else
            tr.delete($head.pos, $head.pos + nextNode.nodeSize);
        view.dispatch(tr);
        return true;
    }
    return false;
}
function switchEditable(view, node, state) {
    view.domObserver.stop();
    node.contentEditable = state;
    view.domObserver.start();
}
// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
// In which Safari (and at some point in the past, Chrome) does really
// wrong things when the down arrow is pressed when the cursor is
// directly at the start of a textblock and has an uneditable node
// after it
function safariDownArrowBug(view) {
    if (!safari || view.state.selection.$head.parentOffset > 0)
        return false;
    let { focusNode, focusOffset } = view.domSelectionRange();
    if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
        focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
        let child = focusNode.firstChild;
        switchEditable(view, child, "true");
        setTimeout(() => switchEditable(view, child, "false"), 20);
    }
    return false;
}
// A backdrop key mapping used to make sure we always suppress keys
// that have a dangerous default effect, even if the commands they are
// bound to return false, and to make sure that cursor-motion keys
// find a cursor (as opposed to a node selection) when pressed. For
// cursor-motion keys, the code in the handlers also takes care of
// block selections.
function getMods(event) {
    let result = "";
    if (event.ctrlKey)
        result += "c";
    if (event.metaKey)
        result += "m";
    if (event.altKey)
        result += "a";
    if (event.shiftKey)
        result += "s";
    return result;
}
function captureKeyDown(view, event) {
    let code = event.keyCode, mods = getMods(event);
    if (code == 8 || (mac$4 && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
        return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodes(view, -1);
    }
    else if ((code == 46 && !event.shiftKey) || (mac$4 && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
        return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodes(view, 1);
    }
    else if (code == 13 || code == 27) { // Enter, Esc
        return true;
    }
    else if (code == 37 || (mac$4 && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
        let dir = code == 37 ? (findDirection(view, view.state.selection.from) == "ltr" ? -1 : 1) : -1;
        return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
    }
    else if (code == 39 || (mac$4 && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
        let dir = code == 39 ? (findDirection(view, view.state.selection.from) == "ltr" ? 1 : -1) : 1;
        return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
    }
    else if (code == 38 || (mac$4 && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
        return selectVertically(view, -1, mods) || skipIgnoredNodes(view, -1);
    }
    else if (code == 40 || (mac$4 && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
        return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodes(view, 1);
    }
    else if (mods == (mac$4 ? "m" : "c") &&
        (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
        return true;
    }
    return false;
}

function serializeForClipboard(view, slice) {
    view.someProp("transformCopied", f => { slice = f(slice, view); });
    let context = [], { content, openStart, openEnd } = slice;
    while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
        openStart--;
        openEnd--;
        let node = content.firstChild;
        context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
        content = node.content;
    }
    let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
    let doc = detachedDoc(), wrap = doc.createElement("div");
    wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
    let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
    while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
        for (let i = needsWrap.length - 1; i >= 0; i--) {
            let wrapper = doc.createElement(needsWrap[i]);
            while (wrap.firstChild)
                wrapper.appendChild(wrap.firstChild);
            wrap.appendChild(wrapper);
            wrappers++;
        }
        firstChild = wrap.firstChild;
    }
    if (firstChild && firstChild.nodeType == 1)
        firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
    let text = view.someProp("clipboardTextSerializer", f => f(slice, view)) ||
        slice.content.textBetween(0, slice.content.size, "\n\n");
    return { dom: wrap, text, slice };
}
// Read a slice of content from the clipboard (or drop data).
function parseFromClipboard(view, text, html, plainText, $context) {
    let inCode = $context.parent.type.spec.code;
    let dom, slice;
    if (!html && !text)
        return null;
    let asText = text && (plainText || inCode || !html);
    if (asText) {
        view.someProp("transformPastedText", f => { text = f(text, inCode || plainText, view); });
        if (inCode)
            return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
        let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText, view));
        if (parsed) {
            slice = parsed;
        }
        else {
            let marks = $context.marks();
            let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
            dom = document.createElement("div");
            text.split(/(?:\r\n?|\n)+/).forEach(block => {
                let p = dom.appendChild(document.createElement("p"));
                if (block)
                    p.appendChild(serializer.serializeNode(schema.text(block, marks)));
            });
        }
    }
    else {
        view.someProp("transformPastedHTML", f => { html = f(html, view); });
        dom = readHTML(html);
        if (webkit)
            restoreReplacedSpaces(dom);
    }
    let contextNode = dom && dom.querySelector("[data-pm-slice]");
    let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
    if (sliceData && sliceData[3])
        for (let i = +sliceData[3]; i > 0; i--) {
            let child = dom.firstChild;
            while (child && child.nodeType != 1)
                child = child.nextSibling;
            if (!child)
                break;
            dom = child;
        }
    if (!slice) {
        let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
        slice = parser.parseSlice(dom, {
            preserveWhitespace: !!(asText || sliceData),
            context: $context,
            ruleFromNode(dom) {
                if (dom.nodeName == "BR" && !dom.nextSibling &&
                    dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                    return { ignore: true };
                return null;
            }
        });
    }
    if (sliceData) {
        slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
    }
    else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
        slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
        if (slice.openStart || slice.openEnd) {
            let openStart = 0, openEnd = 0;
            for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
            for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
            slice = closeSlice(slice, openStart, openEnd);
        }
    }
    view.someProp("transformPasted", f => { slice = f(slice, view); });
    return slice;
}
const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
// Takes a slice parsed with parseSlice, which means there hasn't been
// any content-expression checking done on the top nodes, tries to
// find a parent node in the current context that might fit the nodes,
// and if successful, rebuilds the slice so that it fits into that parent.
//
// This addresses the problem that Transform.replace expects a
// coherent slice, and will fail to place a set of siblings that don't
// fit anywhere in the schema.
function normalizeSiblings(fragment, $context) {
    if (fragment.childCount < 2)
        return fragment;
    for (let d = $context.depth; d >= 0; d--) {
        let parent = $context.node(d);
        let match = parent.contentMatchAt($context.index(d));
        let lastWrap, result = [];
        fragment.forEach(node => {
            if (!result)
                return;
            let wrap = match.findWrapping(node.type), inLast;
            if (!wrap)
                return result = null;
            if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                result[result.length - 1] = inLast;
            }
            else {
                if (result.length)
                    result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                let wrapped = withWrappers(node, wrap);
                result.push(wrapped);
                match = match.matchType(wrapped.type);
                lastWrap = wrap;
            }
        });
        if (result)
            return Fragment.from(result);
    }
    return fragment;
}
function withWrappers(node, wrap, from = 0) {
    for (let i = wrap.length - 1; i >= from; i--)
        node = wrap[i].create(null, Fragment.from(node));
    return node;
}
// Used to group adjacent nodes wrapped in similar parents by
// normalizeSiblings into the same parent node
function addToSibling(wrap, lastWrap, node, sibling, depth) {
    if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
        let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
        if (inner)
            return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
        let match = sibling.contentMatchAt(sibling.childCount);
        if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
            return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))));
    }
}
function closeRight(node, depth) {
    if (depth == 0)
        return node;
    let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
    let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
    return node.copy(fragment.append(fill));
}
function closeRange(fragment, side, from, to, depth, openEnd) {
    let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
    if (fragment.childCount > 1)
        openEnd = 0;
    if (depth < to - 1)
        inner = closeRange(inner, side, from, to, depth + 1, openEnd);
    if (depth >= from)
        inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, openEnd <= depth).append(inner)
            : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true));
    return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
}
function closeSlice(slice, openStart, openEnd) {
    if (openStart < slice.openStart)
        slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
    if (openEnd < slice.openEnd)
        slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
    return slice;
}
// Trick from jQuery -- some elements must be wrapped in other
// elements for innerHTML to work. I.e. if you do `div.innerHTML =
// "<td>..</td>"` the table cells are ignored.
const wrapMap = {
    thead: ["table"],
    tbody: ["table"],
    tfoot: ["table"],
    caption: ["table"],
    colgroup: ["table"],
    col: ["table", "colgroup"],
    tr: ["table", "tbody"],
    td: ["table", "tbody", "tr"],
    th: ["table", "tbody", "tr"]
};
let _detachedDoc = null;
function detachedDoc() {
    return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
}
function readHTML(html) {
    let metas = /^(\s*<meta [^>]*>)*/.exec(html);
    if (metas)
        html = html.slice(metas[0].length);
    let elt = detachedDoc().createElement("div");
    let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
    if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
        html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
    elt.innerHTML = html;
    if (wrap)
        for (let i = 0; i < wrap.length; i++)
            elt = elt.querySelector(wrap[i]) || elt;
    return elt;
}
// Webkit browsers do some hard-to-predict replacement of regular
// spaces with non-breaking spaces when putting content on the
// clipboard. This tries to convert such non-breaking spaces (which
// will be wrapped in a plain span on Chrome, a span with class
// Apple-converted-space on Safari) back to regular spaces.
function restoreReplacedSpaces(dom) {
    let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
    for (let i = 0; i < nodes.length; i++) {
        let node = nodes[i];
        if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
            node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
    }
}
function addContext(slice, context) {
    if (!slice.size)
        return slice;
    let schema = slice.content.firstChild.type.schema, array;
    try {
        array = JSON.parse(context);
    }
    catch (e) {
        return slice;
    }
    let { content, openStart, openEnd } = slice;
    for (let i = array.length - 2; i >= 0; i -= 2) {
        let type = schema.nodes[array[i]];
        if (!type || type.hasRequiredAttrs())
            break;
        content = Fragment.from(type.create(array[i + 1], content));
        openStart++;
        openEnd++;
    }
    return new Slice(content, openStart, openEnd);
}

// A collection of DOM events that occur within the editor, and callback functions
// to invoke when the event fires.
const handlers = {};
const editHandlers = {};
const passiveHandlers = { touchstart: true, touchmove: true };
class InputState {
    constructor() {
        this.shiftKey = false;
        this.mouseDown = null;
        this.lastKeyCode = null;
        this.lastKeyCodeTime = 0;
        this.lastClick = { time: 0, x: 0, y: 0, type: "" };
        this.lastSelectionOrigin = null;
        this.lastSelectionTime = 0;
        this.lastIOSEnter = 0;
        this.lastIOSEnterFallbackTimeout = -1;
        this.lastFocus = 0;
        this.lastTouch = 0;
        this.lastAndroidDelete = 0;
        this.composing = false;
        this.compositionNode = null;
        this.composingTimeout = -1;
        this.compositionNodes = [];
        this.compositionEndedAt = -2e8;
        this.compositionID = 1;
        // Set to a composition ID when there are pending changes at compositionend
        this.compositionPendingChanges = 0;
        this.domChangeCount = 0;
        this.eventHandlers = Object.create(null);
        this.hideSelectionGuard = null;
    }
}
function initInput(view) {
    for (let event in handlers) {
        let handler = handlers[event];
        view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
            if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                (view.editable || !(event.type in editHandlers)))
                handler(view, event);
        }, passiveHandlers[event] ? { passive: true } : undefined);
    }
    // On Safari, for reasons beyond my understanding, adding an input
    // event handler makes an issue where the composition vanishes when
    // you press enter go away.
    if (safari)
        view.dom.addEventListener("input", () => null);
    ensureListeners(view);
}
function setSelectionOrigin(view, origin) {
    view.input.lastSelectionOrigin = origin;
    view.input.lastSelectionTime = Date.now();
}
function destroyInput(view) {
    view.domObserver.stop();
    for (let type in view.input.eventHandlers)
        view.dom.removeEventListener(type, view.input.eventHandlers[type]);
    clearTimeout(view.input.composingTimeout);
    clearTimeout(view.input.lastIOSEnterFallbackTimeout);
}
function ensureListeners(view) {
    view.someProp("handleDOMEvents", currentHandlers => {
        for (let type in currentHandlers)
            if (!view.input.eventHandlers[type])
                view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
    });
}
function runCustomHandler(view, event) {
    return view.someProp("handleDOMEvents", handlers => {
        let handler = handlers[event.type];
        return handler ? handler(view, event) || event.defaultPrevented : false;
    });
}
function eventBelongsToView(view, event) {
    if (!event.bubbles)
        return true;
    if (event.defaultPrevented)
        return false;
    for (let node = event.target; node != view.dom; node = node.parentNode)
        if (!node || node.nodeType == 11 ||
            (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
            return false;
    return true;
}
function dispatchEvent(view, event) {
    if (!runCustomHandler(view, event) && handlers[event.type] &&
        (view.editable || !(event.type in editHandlers)))
        handlers[event.type](view, event);
}
editHandlers.keydown = (view, _event) => {
    let event = _event;
    view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
    if (inOrNearComposition(view, event))
        return;
    view.input.lastKeyCode = event.keyCode;
    view.input.lastKeyCodeTime = Date.now();
    // Suppress enter key events on Chrome Android, because those tend
    // to be part of a confused sequence of composition events fired,
    // and handling them eagerly tends to corrupt the input.
    if (android && chrome && event.keyCode == 13)
        return;
    if (event.keyCode != 229)
        view.domObserver.forceFlush();
    // On iOS, if we preventDefault enter key presses, the virtual
    // keyboard gets confused. So the hack here is to set a flag that
    // makes the DOM change code recognize that what just happens should
    // be replaced by whatever the Enter key handlers do.
    if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
        let now = Date.now();
        view.input.lastIOSEnter = now;
        view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
            if (view.input.lastIOSEnter == now) {
                view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                view.input.lastIOSEnter = 0;
            }
        }, 200);
    }
    else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
        event.preventDefault();
    }
    else {
        setSelectionOrigin(view, "key");
    }
};
editHandlers.keyup = (view, event) => {
    if (event.keyCode == 16)
        view.input.shiftKey = false;
};
editHandlers.keypress = (view, _event) => {
    let event = _event;
    if (inOrNearComposition(view, event) || !event.charCode ||
        event.ctrlKey && !event.altKey || mac$4 && event.metaKey)
        return;
    if (view.someProp("handleKeyPress", f => f(view, event))) {
        event.preventDefault();
        return;
    }
    let sel = view.state.selection;
    if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
        let text = String.fromCharCode(event.charCode);
        if (!/[\r\n]/.test(text) && !view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
            view.dispatch(view.state.tr.insertText(text).scrollIntoView());
        event.preventDefault();
    }
};
function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
function isNear(event, click) {
    let dx = click.x - event.clientX, dy = click.y - event.clientY;
    return dx * dx + dy * dy < 100;
}
function runHandlerOnContext(view, propName, pos, inside, event) {
    if (inside == -1)
        return false;
    let $pos = view.state.doc.resolve(inside);
    for (let i = $pos.depth + 1; i > 0; i--) {
        if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
            : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
            return true;
    }
    return false;
}
function updateSelection(view, selection, origin) {
    if (!view.focused)
        view.focus();
    if (view.state.selection.eq(selection))
        return;
    let tr = view.state.tr.setSelection(selection);
    tr.setMeta("pointer", true);
    view.dispatch(tr);
}
function selectClickedLeaf(view, inside) {
    if (inside == -1)
        return false;
    let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
    if (node && node.isAtom && NodeSelection.isSelectable(node)) {
        updateSelection(view, new NodeSelection($pos));
        return true;
    }
    return false;
}
function selectClickedNode(view, inside) {
    if (inside == -1)
        return false;
    let sel = view.state.selection, selectedNode, selectAt;
    if (sel instanceof NodeSelection)
        selectedNode = sel.node;
    let $pos = view.state.doc.resolve(inside);
    for (let i = $pos.depth + 1; i > 0; i--) {
        let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
        if (NodeSelection.isSelectable(node)) {
            if (selectedNode && sel.$from.depth > 0 &&
                i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                selectAt = $pos.before(sel.$from.depth);
            else
                selectAt = $pos.before(i);
            break;
        }
    }
    if (selectAt != null) {
        updateSelection(view, NodeSelection.create(view.state.doc, selectAt));
        return true;
    }
    else {
        return false;
    }
}
function handleSingleClick(view, pos, inside, event, selectNode) {
    return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
        view.someProp("handleClick", f => f(view, pos, event)) ||
        (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
}
function handleDoubleClick(view, pos, inside, event) {
    return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
        view.someProp("handleDoubleClick", f => f(view, pos, event));
}
function handleTripleClick$1(view, pos, inside, event) {
    return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
        view.someProp("handleTripleClick", f => f(view, pos, event)) ||
        defaultTripleClick(view, inside, event);
}
function defaultTripleClick(view, inside, event) {
    if (event.button != 0)
        return false;
    let doc = view.state.doc;
    if (inside == -1) {
        if (doc.inlineContent) {
            updateSelection(view, TextSelection.create(doc, 0, doc.content.size));
            return true;
        }
        return false;
    }
    let $pos = doc.resolve(inside);
    for (let i = $pos.depth + 1; i > 0; i--) {
        let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
        let nodePos = $pos.before(i);
        if (node.inlineContent)
            updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size));
        else if (NodeSelection.isSelectable(node))
            updateSelection(view, NodeSelection.create(doc, nodePos));
        else
            continue;
        return true;
    }
}
function forceDOMFlush(view) {
    return endComposition(view);
}
const selectNodeModifier = mac$4 ? "metaKey" : "ctrlKey";
handlers.mousedown = (view, _event) => {
    let event = _event;
    view.input.shiftKey = event.shiftKey;
    let flushed = forceDOMFlush(view);
    let now = Date.now(), type = "singleClick";
    if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
        if (view.input.lastClick.type == "singleClick")
            type = "doubleClick";
        else if (view.input.lastClick.type == "doubleClick")
            type = "tripleClick";
    }
    view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
    let pos = view.posAtCoords(eventCoords(event));
    if (!pos)
        return;
    if (type == "singleClick") {
        if (view.input.mouseDown)
            view.input.mouseDown.done();
        view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
    }
    else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick$1)(view, pos.pos, pos.inside, event)) {
        event.preventDefault();
    }
    else {
        setSelectionOrigin(view, "pointer");
    }
};
class MouseDown {
    constructor(view, pos, event, flushed) {
        this.view = view;
        this.pos = pos;
        this.event = event;
        this.flushed = flushed;
        this.delayedSelectionSync = false;
        this.mightDrag = null;
        this.startDoc = view.state.doc;
        this.selectNode = !!event[selectNodeModifier];
        this.allowDefault = event.shiftKey;
        let targetNode, targetPos;
        if (pos.inside > -1) {
            targetNode = view.state.doc.nodeAt(pos.inside);
            targetPos = pos.inside;
        }
        else {
            let $pos = view.state.doc.resolve(pos.pos);
            targetNode = $pos.parent;
            targetPos = $pos.depth ? $pos.before() : 0;
        }
        const target = flushed ? null : event.target;
        const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
        this.target = targetDesc && targetDesc.dom.nodeType == 1 ? targetDesc.dom : null;
        let { selection } = view.state;
        if (event.button == 0 &&
            targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
            selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
            this.mightDrag = {
                node: targetNode,
                pos: targetPos,
                addAttr: !!(this.target && !this.target.draggable),
                setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
            };
        if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
            this.view.domObserver.stop();
            if (this.mightDrag.addAttr)
                this.target.draggable = true;
            if (this.mightDrag.setUneditable)
                setTimeout(() => {
                    if (this.view.input.mouseDown == this)
                        this.target.setAttribute("contentEditable", "false");
                }, 20);
            this.view.domObserver.start();
        }
        view.root.addEventListener("mouseup", this.up = this.up.bind(this));
        view.root.addEventListener("mousemove", this.move = this.move.bind(this));
        setSelectionOrigin(view, "pointer");
    }
    done() {
        this.view.root.removeEventListener("mouseup", this.up);
        this.view.root.removeEventListener("mousemove", this.move);
        if (this.mightDrag && this.target) {
            this.view.domObserver.stop();
            if (this.mightDrag.addAttr)
                this.target.removeAttribute("draggable");
            if (this.mightDrag.setUneditable)
                this.target.removeAttribute("contentEditable");
            this.view.domObserver.start();
        }
        if (this.delayedSelectionSync)
            setTimeout(() => selectionToDOM(this.view));
        this.view.input.mouseDown = null;
    }
    up(event) {
        this.done();
        if (!this.view.dom.contains(event.target))
            return;
        let pos = this.pos;
        if (this.view.state.doc != this.startDoc)
            pos = this.view.posAtCoords(eventCoords(event));
        this.updateAllowDefault(event);
        if (this.allowDefault || !pos) {
            setSelectionOrigin(this.view, "pointer");
        }
        else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
            event.preventDefault();
        }
        else if (event.button == 0 &&
            (this.flushed ||
                // Safari ignores clicks on draggable elements
                (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                // Chrome will sometimes treat a node selection as a
                // cursor, but still report that the node is selected
                // when asked through getSelection. You'll then get a
                // situation where clicking at the point where that
                // (hidden) cursor is doesn't change the selection, and
                // thus doesn't get a reaction from ProseMirror. This
                // works around that.
                (chrome && !this.view.state.selection.visible &&
                    Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
            updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)));
            event.preventDefault();
        }
        else {
            setSelectionOrigin(this.view, "pointer");
        }
    }
    move(event) {
        this.updateAllowDefault(event);
        setSelectionOrigin(this.view, "pointer");
        if (event.buttons == 0)
            this.done();
    }
    updateAllowDefault(event) {
        if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
            Math.abs(this.event.y - event.clientY) > 4))
            this.allowDefault = true;
    }
}
handlers.touchstart = view => {
    view.input.lastTouch = Date.now();
    forceDOMFlush(view);
    setSelectionOrigin(view, "pointer");
};
handlers.touchmove = view => {
    view.input.lastTouch = Date.now();
    setSelectionOrigin(view, "pointer");
};
handlers.contextmenu = view => forceDOMFlush(view);
function inOrNearComposition(view, event) {
    if (view.composing)
        return true;
    // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
    // On Japanese input method editors (IMEs), the Enter key is used to confirm character
    // selection. On Safari, when Enter is pressed, compositionend and keydown events are
    // emitted. The keydown event triggers newline insertion, which we don't want.
    // This method returns true if the keydown event should be ignored.
    // We only ignore it once, as pressing Enter a second time *should* insert a newline.
    // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
    // This guards against the case where compositionend is triggered without the keyboard
    // (e.g. character confirmation may be done with the mouse), and keydown is triggered
    // afterwards- we wouldn't want to ignore the keydown event in this case.
    if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
        view.input.compositionEndedAt = -2e8;
        return true;
    }
    return false;
}
// Drop active composition after 5 seconds of inactivity on Android
const timeoutComposition = android ? 5000 : -1;
editHandlers.compositionstart = editHandlers.compositionupdate = view => {
    if (!view.composing) {
        view.domObserver.flush();
        let { state } = view, $pos = state.selection.$to;
        if (state.selection instanceof TextSelection &&
            (state.storedMarks ||
                (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
            // Need to wrap the cursor in mark nodes different from the ones in the DOM context
            view.markCursor = view.state.storedMarks || $pos.marks();
            endComposition(view, true);
            view.markCursor = null;
        }
        else {
            endComposition(view);
            // In firefox, if the cursor is after but outside a marked node,
            // the inserted text won't inherit the marks. So this moves it
            // inside if necessary.
            if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                let sel = view.domSelectionRange();
                for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                    let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                    if (!before)
                        break;
                    if (before.nodeType == 3) {
                        let sel = view.domSelection();
                        if (sel)
                            sel.collapse(before, before.nodeValue.length);
                        break;
                    }
                    else {
                        node = before;
                        offset = -1;
                    }
                }
            }
        }
        view.input.composing = true;
    }
    scheduleComposeEnd(view, timeoutComposition);
};
editHandlers.compositionend = (view, event) => {
    if (view.composing) {
        view.input.composing = false;
        view.input.compositionEndedAt = event.timeStamp;
        view.input.compositionPendingChanges = view.domObserver.pendingRecords().length ? view.input.compositionID : 0;
        view.input.compositionNode = null;
        if (view.input.compositionPendingChanges)
            Promise.resolve().then(() => view.domObserver.flush());
        view.input.compositionID++;
        scheduleComposeEnd(view, 20);
    }
};
function scheduleComposeEnd(view, delay) {
    clearTimeout(view.input.composingTimeout);
    if (delay > -1)
        view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
}
function clearComposition(view) {
    if (view.composing) {
        view.input.composing = false;
        view.input.compositionEndedAt = timestampFromCustomEvent();
    }
    while (view.input.compositionNodes.length > 0)
        view.input.compositionNodes.pop().markParentsDirty();
}
function findCompositionNode(view) {
    let sel = view.domSelectionRange();
    if (!sel.focusNode)
        return null;
    let textBefore = textNodeBefore$1(sel.focusNode, sel.focusOffset);
    let textAfter = textNodeAfter$1(sel.focusNode, sel.focusOffset);
    if (textBefore && textAfter && textBefore != textAfter) {
        let descAfter = textAfter.pmViewDesc, lastChanged = view.domObserver.lastChangedTextNode;
        if (textBefore == lastChanged || textAfter == lastChanged)
            return lastChanged;
        if (!descAfter || !descAfter.isText(textAfter.nodeValue)) {
            return textAfter;
        }
        else if (view.input.compositionNode == textAfter) {
            let descBefore = textBefore.pmViewDesc;
            if (!(!descBefore || !descBefore.isText(textBefore.nodeValue)))
                return textAfter;
        }
    }
    return textBefore || textAfter;
}
function timestampFromCustomEvent() {
    let event = document.createEvent("Event");
    event.initEvent("event", true, true);
    return event.timeStamp;
}
/**
@internal
*/
function endComposition(view, forceUpdate = false) {
    if (android && view.domObserver.flushingSoon >= 0)
        return;
    view.domObserver.forceFlush();
    clearComposition(view);
    if (forceUpdate || view.docView && view.docView.dirty) {
        let sel = selectionFromDOM(view);
        if (sel && !sel.eq(view.state.selection))
            view.dispatch(view.state.tr.setSelection(sel));
        else
            view.updateState(view.state);
        return true;
    }
    return false;
}
function captureCopy(view, dom) {
    // The extra wrapper is somehow necessary on IE/Edge to prevent the
    // content from being mangled when it is put onto the clipboard
    if (!view.dom.parentNode)
        return;
    let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
    wrap.appendChild(dom);
    wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
    let sel = getSelection(), range = document.createRange();
    range.selectNodeContents(dom);
    // Done because IE will fire a selectionchange moving the selection
    // to its start when removeAllRanges is called and the editor still
    // has focus (which will mess up the editor's selection state).
    view.dom.blur();
    sel.removeAllRanges();
    sel.addRange(range);
    setTimeout(() => {
        if (wrap.parentNode)
            wrap.parentNode.removeChild(wrap);
        view.focus();
    }, 50);
}
// This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.
const brokenClipboardAPI = (ie$1 && ie_version < 15) ||
    (ios && webkit_version < 604);
handlers.copy = editHandlers.cut = (view, _event) => {
    let event = _event;
    let sel = view.state.selection, cut = event.type == "cut";
    if (sel.empty)
        return;
    // IE and Edge's clipboard interface is completely broken
    let data = brokenClipboardAPI ? null : event.clipboardData;
    let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
    if (data) {
        event.preventDefault();
        data.clearData();
        data.setData("text/html", dom.innerHTML);
        data.setData("text/plain", text);
    }
    else {
        captureCopy(view, dom);
    }
    if (cut)
        view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function sliceSingleNode(slice) {
    return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
}
function capturePaste(view, event) {
    if (!view.dom.parentNode)
        return;
    let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
    let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
    if (!plainText)
        target.contentEditable = "true";
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
    setTimeout(() => {
        view.focus();
        if (target.parentNode)
            target.parentNode.removeChild(target);
        if (plainText)
            doPaste(view, target.value, null, plain, event);
        else
            doPaste(view, target.textContent, target.innerHTML, plain, event);
    }, 50);
}
function doPaste(view, text, html, preferPlain, event) {
    let slice = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);
    if (view.someProp("handlePaste", f => f(view, event, slice || Slice.empty)))
        return true;
    if (!slice)
        return false;
    let singleNode = sliceSingleNode(slice);
    let tr = singleNode
        ? view.state.tr.replaceSelectionWith(singleNode, preferPlain)
        : view.state.tr.replaceSelection(slice);
    view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
    hurmet.updateCalculations(view, view.state.schema.nodes.calculation, true);
    return true;
}
function getText(clipboardData) {
    let text = clipboardData.getData("text/plain") || clipboardData.getData("Text");
    if (text)
        return text;
    let uris = clipboardData.getData("text/uri-list");
    return uris ? uris.replace(/\r?\n/g, " ") : "";
}
editHandlers.paste = (view, _event) => {
    let event = _event;
    // Handling paste from JavaScript during composition is very poorly
    // handled by browsers, so as a dodgy but preferable kludge, we just
    // let the browser do its native thing there, except on Android,
    // where the editor is almost always composing.
    if (view.composing && !android)
        return;
    let data = brokenClipboardAPI ? null : event.clipboardData;
    let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
    if (data && doPaste(view, getText(data), data.getData("text/html"), plain, event))
        event.preventDefault();
    else
        capturePaste(view, event);
};
class Dragging {
    constructor(slice, move, node) {
        this.slice = slice;
        this.move = move;
        this.node = node;
    }
}
const dragCopyModifier = mac$4 ? "altKey" : "ctrlKey";
handlers.dragstart = (view, _event) => {
    let event = _event;
    let mouseDown = view.input.mouseDown;
    if (mouseDown)
        mouseDown.done();
    if (!event.dataTransfer)
        return;
    let sel = view.state.selection;
    let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
    let node;
    if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to)) ;
    else if (mouseDown && mouseDown.mightDrag) {
        node = NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos);
    }
    else if (event.target && event.target.nodeType == 1) {
        let desc = view.docView.nearestDesc(event.target, true);
        if (desc && desc.node.type.spec.draggable && desc != view.docView)
            node = NodeSelection.create(view.state.doc, desc.posBefore);
    }
    let draggedSlice = (node || view.state.selection).content();
    let { dom, text, slice } = serializeForClipboard(view, draggedSlice);
    // Pre-120 Chrome versions clear files when calling `clearData` (#1472)
    if (!event.dataTransfer.files.length || !chrome || chrome_version > 120)
        event.dataTransfer.clearData();
    event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
    // See https://github.com/ProseMirror/prosemirror/issues/1156
    event.dataTransfer.effectAllowed = "copyMove";
    if (!brokenClipboardAPI)
        event.dataTransfer.setData("text/plain", text);
    view.dragging = new Dragging(slice, !event[dragCopyModifier], node);
};
handlers.dragend = view => {
    let dragging = view.dragging;
    window.setTimeout(() => {
        if (view.dragging == dragging)
            view.dragging = null;
    }, 50);
};
editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
editHandlers.drop = (view, _event) => {
    let event = _event;
    let dragging = view.dragging;
    view.dragging = null;
    if (!event.dataTransfer)
        return;
    let eventPos = view.posAtCoords(eventCoords(event));
    if (!eventPos)
        return;
    let $mouse = view.state.doc.resolve(eventPos.pos);
    let slice = dragging && dragging.slice;
    if (slice) {
        view.someProp("transformPasted", f => { slice = f(slice, view); });
    }
    else {
        slice = parseFromClipboard(view, getText(event.dataTransfer), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
    }
    let move = !!(dragging && !event[dragCopyModifier]);
    if (view.someProp("handleDrop", f => f(view, event, slice || Slice.empty, move))) {
        event.preventDefault();
        return;
    }
    if (!slice)
        return;
    event.preventDefault();
    let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
    if (insertPos == null)
        insertPos = $mouse.pos;
    let tr = view.state.tr;
    if (move) {
        let { node } = dragging;
        if (node)
            node.replace(tr);
        else
            tr.deleteSelection();
    }
    let pos = tr.mapping.map(insertPos);
    let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
    let beforeInsert = tr.doc;
    if (isNode)
        tr.replaceRangeWith(pos, pos, slice.content.firstChild);
    else
        tr.replaceRange(pos, pos, slice);
    if (tr.doc.eq(beforeInsert))
        return;
    let $pos = tr.doc.resolve(pos);
    if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&
        $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
        tr.setSelection(new NodeSelection($pos));
    }
    else {
        let end = tr.mapping.map(insertPos);
        tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
        tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
    }
    view.focus();
    view.dispatch(tr.setMeta("uiEvent", "drop"));
};
handlers.focus = view => {
    view.input.lastFocus = Date.now();
    if (!view.focused) {
        view.domObserver.stop();
        view.dom.classList.add("ProseMirror-focused");
        view.domObserver.start();
        view.focused = true;
        setTimeout(() => {
            if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
                selectionToDOM(view);
        }, 20);
    }
};
handlers.blur = (view, _event) => {
    let event = _event;
    if (view.focused) {
        view.domObserver.stop();
        view.dom.classList.remove("ProseMirror-focused");
        view.domObserver.start();
        if (event.relatedTarget && view.dom.contains(event.relatedTarget))
            view.domObserver.currentSelection.clear();
        view.focused = false;
    }
};
handlers.beforeinput = (view, _event) => {
    let event = _event;
    // We should probably do more with beforeinput events, but support
    // is so spotty that I'm still waiting to see where they are going.
    // Very specific hack to deal with backspace sometimes failing on
    // Chrome Android when after an uneditable node.
    if (chrome && android && event.inputType == "deleteContentBackward") {
        view.domObserver.flushSoon();
        let { domChangeCount } = view.input;
        setTimeout(() => {
            if (view.input.domChangeCount != domChangeCount)
                return; // Event already had some effect
            // This bug tends to close the virtual keyboard, so we refocus
            view.dom.blur();
            view.focus();
            if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                return;
            let { $cursor } = view.state.selection;
            // Crude approximation of backspace behavior when no command handled it
            if ($cursor && $cursor.pos > 0)
                view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
        }, 50);
    }
};
// Make sure all handlers get registered
for (let prop in editHandlers)
    handlers[prop] = editHandlers[prop];

function compareObjs(a, b) {
    if (a == b)
        return true;
    for (let p in a)
        if (a[p] !== b[p])
            return false;
    for (let p in b)
        if (!(p in a))
            return false;
    return true;
}
class WidgetType {
    constructor(toDOM, spec) {
        this.toDOM = toDOM;
        this.spec = spec || noSpec;
        this.side = this.spec.side || 0;
    }
    map(mapping, span, offset, oldOffset) {
        let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
        return deleted ? null : new Decoration(pos - offset, pos - offset, this);
    }
    valid() { return true; }
    eq(other) {
        return this == other ||
            (other instanceof WidgetType &&
                (this.spec.key && this.spec.key == other.spec.key ||
                    this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
    }
    destroy(node) {
        if (this.spec.destroy)
            this.spec.destroy(node);
    }
}
class InlineType {
    constructor(attrs, spec) {
        this.attrs = attrs;
        this.spec = spec || noSpec;
    }
    map(mapping, span, offset, oldOffset) {
        let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
        let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
        return from >= to ? null : new Decoration(from, to, this);
    }
    valid(_, span) { return span.from < span.to; }
    eq(other) {
        return this == other ||
            (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                compareObjs(this.spec, other.spec));
    }
    static is(span) { return span.type instanceof InlineType; }
    destroy() { }
}
class NodeType {
    constructor(attrs, spec) {
        this.attrs = attrs;
        this.spec = spec || noSpec;
    }
    map(mapping, span, offset, oldOffset) {
        let from = mapping.mapResult(span.from + oldOffset, 1);
        if (from.deleted)
            return null;
        let to = mapping.mapResult(span.to + oldOffset, -1);
        if (to.deleted || to.pos <= from.pos)
            return null;
        return new Decoration(from.pos - offset, to.pos - offset, this);
    }
    valid(node, span) {
        let { index, offset } = node.content.findIndex(span.from), child;
        return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
    }
    eq(other) {
        return this == other ||
            (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
                compareObjs(this.spec, other.spec));
    }
    destroy() { }
}
/**
Decoration objects can be provided to the view through the
[`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
several variants—see the static members of this class for details.
*/
class Decoration {
    /**
    @internal
    */
    constructor(
    /**
    The start position of the decoration.
    */
    from, 
    /**
    The end position. Will be the same as `from` for [widget
    decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
    */
    to, 
    /**
    @internal
    */
    type) {
        this.from = from;
        this.to = to;
        this.type = type;
    }
    /**
    @internal
    */
    copy(from, to) {
        return new Decoration(from, to, this.type);
    }
    /**
    @internal
    */
    eq(other, offset = 0) {
        return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
    }
    /**
    @internal
    */
    map(mapping, offset, oldOffset) {
        return this.type.map(mapping, this, offset, oldOffset);
    }
    /**
    Creates a widget decoration, which is a DOM node that's shown in
    the document at the given position. It is recommended that you
    delay rendering the widget by passing a function that will be
    called when the widget is actually drawn in a view, but you can
    also directly pass a DOM node. `getPos` can be used to find the
    widget's current document position.
    */
    static widget(pos, toDOM, spec) {
        return new Decoration(pos, pos, new WidgetType(toDOM, spec));
    }
    /**
    Creates an inline decoration, which adds the given attributes to
    each inline node between `from` and `to`.
    */
    static inline(from, to, attrs, spec) {
        return new Decoration(from, to, new InlineType(attrs, spec));
    }
    /**
    Creates a node decoration. `from` and `to` should point precisely
    before and after a node in the document. That node, and only that
    node, will receive the given attributes.
    */
    static node(from, to, attrs, spec) {
        return new Decoration(from, to, new NodeType(attrs, spec));
    }
    /**
    The spec provided when creating this decoration. Can be useful
    if you've stored extra information in that object.
    */
    get spec() { return this.type.spec; }
    /**
    @internal
    */
    get inline() { return this.type instanceof InlineType; }
    /**
    @internal
    */
    get widget() { return this.type instanceof WidgetType; }
}
const none = [], noSpec = {};
/**
A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
a way that the drawing algorithm can efficiently use and compare
them. This is a persistent data structure—it is not modified,
updates create a new value.
*/
class DecorationSet {
    /**
    @internal
    */
    constructor(local, children) {
        this.local = local.length ? local : none;
        this.children = children.length ? children : none;
    }
    /**
    Create a set of decorations, using the structure of the given
    document. This will consume (modify) the `decorations` array, so
    you must make a copy if you want need to preserve that.
    */
    static create(doc, decorations) {
        return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;
    }
    /**
    Find all decorations in this set which touch the given range
    (including decorations that start or end directly at the
    boundaries) and match the given predicate on their spec. When
    `start` and `end` are omitted, all decorations in the set are
    considered. When `predicate` isn't given, all decorations are
    assumed to match.
    */
    find(start, end, predicate) {
        let result = [];
        this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
        return result;
    }
    findInner(start, end, result, offset, predicate) {
        for (let i = 0; i < this.local.length; i++) {
            let span = this.local[i];
            if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                result.push(span.copy(span.from + offset, span.to + offset));
        }
        for (let i = 0; i < this.children.length; i += 3) {
            if (this.children[i] < end && this.children[i + 1] > start) {
                let childOff = this.children[i] + 1;
                this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
            }
        }
    }
    /**
    Map the set of decorations in response to a change in the
    document.
    */
    map(mapping, doc, options) {
        if (this == empty || mapping.maps.length == 0)
            return this;
        return this.mapInner(mapping, doc, 0, 0, options || noSpec);
    }
    /**
    @internal
    */
    mapInner(mapping, node, offset, oldOffset, options) {
        let newLocal;
        for (let i = 0; i < this.local.length; i++) {
            let mapped = this.local[i].map(mapping, offset, oldOffset);
            if (mapped && mapped.type.valid(node, mapped))
                (newLocal || (newLocal = [])).push(mapped);
            else if (options.onRemove)
                options.onRemove(this.local[i].spec);
        }
        if (this.children.length)
            return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
        else
            return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
    }
    /**
    Add the given array of decorations to the ones in the set,
    producing a new set. Consumes the `decorations` array. Needs
    access to the current document to create the appropriate tree
    structure.
    */
    add(doc, decorations) {
        if (!decorations.length)
            return this;
        if (this == empty)
            return DecorationSet.create(doc, decorations);
        return this.addInner(doc, decorations, 0);
    }
    addInner(doc, decorations, offset) {
        let children, childIndex = 0;
        doc.forEach((childNode, childOffset) => {
            let baseOffset = childOffset + offset, found;
            if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                return;
            if (!children)
                children = this.children.slice();
            while (childIndex < children.length && children[childIndex] < childOffset)
                childIndex += 3;
            if (children[childIndex] == childOffset)
                children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
            else
                children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
            childIndex += 3;
        });
        let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
        for (let i = 0; i < local.length; i++)
            if (!local[i].type.valid(doc, local[i]))
                local.splice(i--, 1);
        return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
    }
    /**
    Create a new set that contains the decorations in this set, minus
    the ones in the given array.
    */
    remove(decorations) {
        if (decorations.length == 0 || this == empty)
            return this;
        return this.removeInner(decorations, 0);
    }
    removeInner(decorations, offset) {
        let children = this.children, local = this.local;
        for (let i = 0; i < children.length; i += 3) {
            let found;
            let from = children[i] + offset, to = children[i + 1] + offset;
            for (let j = 0, span; j < decorations.length; j++)
                if (span = decorations[j]) {
                    if (span.from > from && span.to < to) {
                        decorations[j] = null;
                        (found || (found = [])).push(span);
                    }
                }
            if (!found)
                continue;
            if (children == this.children)
                children = this.children.slice();
            let removed = children[i + 2].removeInner(found, from + 1);
            if (removed != empty) {
                children[i + 2] = removed;
            }
            else {
                children.splice(i, 3);
                i -= 3;
            }
        }
        if (local.length)
            for (let i = 0, span; i < decorations.length; i++)
                if (span = decorations[i]) {
                    for (let j = 0; j < local.length; j++)
                        if (local[j].eq(span, offset)) {
                            if (local == this.local)
                                local = this.local.slice();
                            local.splice(j--, 1);
                        }
                }
        if (children == this.children && local == this.local)
            return this;
        return local.length || children.length ? new DecorationSet(local, children) : empty;
    }
    forChild(offset, node) {
        if (this == empty)
            return this;
        if (node.isLeaf)
            return DecorationSet.empty;
        let child, local;
        for (let i = 0; i < this.children.length; i += 3)
            if (this.children[i] >= offset) {
                if (this.children[i] == offset)
                    child = this.children[i + 2];
                break;
            }
        let start = offset + 1, end = start + node.content.size;
        for (let i = 0; i < this.local.length; i++) {
            let dec = this.local[i];
            if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                if (from < to)
                    (local || (local = [])).push(dec.copy(from, to));
            }
        }
        if (local) {
            let localSet = new DecorationSet(local.sort(byPos), none);
            return child ? new DecorationGroup([localSet, child]) : localSet;
        }
        return child || empty;
    }
    /**
    @internal
    */
    eq(other) {
        if (this == other)
            return true;
        if (!(other instanceof DecorationSet) ||
            this.local.length != other.local.length ||
            this.children.length != other.children.length)
            return false;
        for (let i = 0; i < this.local.length; i++)
            if (!this.local[i].eq(other.local[i]))
                return false;
        for (let i = 0; i < this.children.length; i += 3)
            if (this.children[i] != other.children[i] ||
                this.children[i + 1] != other.children[i + 1] ||
                !this.children[i + 2].eq(other.children[i + 2]))
                return false;
        return true;
    }
    /**
    @internal
    */
    locals(node) {
        return removeOverlap(this.localsInner(node));
    }
    /**
    @internal
    */
    localsInner(node) {
        if (this == empty)
            return none;
        if (node.inlineContent || !this.local.some(InlineType.is))
            return this.local;
        let result = [];
        for (let i = 0; i < this.local.length; i++) {
            if (!(this.local[i].type instanceof InlineType))
                result.push(this.local[i]);
        }
        return result;
    }
}
/**
The empty set of decorations.
*/
DecorationSet.empty = new DecorationSet([], []);
/**
@internal
*/
DecorationSet.removeOverlap = removeOverlap;
const empty = DecorationSet.empty;
// An abstraction that allows the code dealing with decorations to
// treat multiple DecorationSet objects as if it were a single object
// with (a subset of) the same interface.
class DecorationGroup {
    constructor(members) {
        this.members = members;
    }
    map(mapping, doc) {
        const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
        return DecorationGroup.from(mappedDecos);
    }
    forChild(offset, child) {
        if (child.isLeaf)
            return DecorationSet.empty;
        let found = [];
        for (let i = 0; i < this.members.length; i++) {
            let result = this.members[i].forChild(offset, child);
            if (result == empty)
                continue;
            if (result instanceof DecorationGroup)
                found = found.concat(result.members);
            else
                found.push(result);
        }
        return DecorationGroup.from(found);
    }
    eq(other) {
        if (!(other instanceof DecorationGroup) ||
            other.members.length != this.members.length)
            return false;
        for (let i = 0; i < this.members.length; i++)
            if (!this.members[i].eq(other.members[i]))
                return false;
        return true;
    }
    locals(node) {
        let result, sorted = true;
        for (let i = 0; i < this.members.length; i++) {
            let locals = this.members[i].localsInner(node);
            if (!locals.length)
                continue;
            if (!result) {
                result = locals;
            }
            else {
                if (sorted) {
                    result = result.slice();
                    sorted = false;
                }
                for (let j = 0; j < locals.length; j++)
                    result.push(locals[j]);
            }
        }
        return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
    }
    // Create a group for the given array of decoration sets, or return
    // a single set when possible.
    static from(members) {
        switch (members.length) {
            case 0: return empty;
            case 1: return members[0];
            default: return new DecorationGroup(members.every(m => m instanceof DecorationSet) ? members :
                members.reduce((r, m) => r.concat(m instanceof DecorationSet ? m : m.members), []));
        }
    }
}
function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
    let children = oldChildren.slice();
    // Mark the children that are directly touched by changes, and
    // move those that are after the changes.
    for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
        let moved = 0;
        mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
            let dSize = (newEnd - newStart) - (oldEnd - oldStart);
            for (let i = 0; i < children.length; i += 3) {
                let end = children[i + 1];
                if (end < 0 || oldStart > end + baseOffset - moved)
                    continue;
                let start = children[i] + baseOffset - moved;
                if (oldEnd >= start) {
                    children[i + 1] = oldStart <= start ? -2 : -1;
                }
                else if (oldStart >= baseOffset && dSize) {
                    children[i] += dSize;
                    children[i + 1] += dSize;
                }
            }
            moved += dSize;
        });
        baseOffset = mapping.maps[i].map(baseOffset, -1);
    }
    // Find the child nodes that still correspond to a single node,
    // recursively call mapInner on them and update their positions.
    let mustRebuild = false;
    for (let i = 0; i < children.length; i += 3)
        if (children[i + 1] < 0) { // Touched nodes
            if (children[i + 1] == -2) {
                mustRebuild = true;
                children[i + 1] = -1;
                continue;
            }
            let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
            if (fromLocal < 0 || fromLocal >= node.content.size) {
                mustRebuild = true;
                continue;
            }
            // Must read oldChildren because children was tagged with -1
            let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
            let { index, offset: childOffset } = node.content.findIndex(fromLocal);
            let childNode = node.maybeChild(index);
            if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                let mapped = children[i + 2]
                    .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                if (mapped != empty) {
                    children[i] = fromLocal;
                    children[i + 1] = toLocal;
                    children[i + 2] = mapped;
                }
                else {
                    children[i + 1] = -2;
                    mustRebuild = true;
                }
            }
            else {
                mustRebuild = true;
            }
        }
    // Remaining children must be collected and rebuilt into the appropriate structure
    if (mustRebuild) {
        let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
        let built = buildTree(decorations, node, 0, options);
        newLocal = built.local;
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] < 0) {
                children.splice(i, 3);
                i -= 3;
            }
        for (let i = 0, j = 0; i < built.children.length; i += 3) {
            let from = built.children[i];
            while (j < children.length && children[j] < from)
                j += 3;
            children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
        }
    }
    return new DecorationSet(newLocal.sort(byPos), children);
}
function moveSpans(spans, offset) {
    if (!offset || !spans.length)
        return spans;
    let result = [];
    for (let i = 0; i < spans.length; i++) {
        let span = spans[i];
        result.push(new Decoration(span.from + offset, span.to + offset, span.type));
    }
    return result;
}
function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
    // Gather all decorations from the remaining marked children
    function gather(set, oldOffset) {
        for (let i = 0; i < set.local.length; i++) {
            let mapped = set.local[i].map(mapping, offset, oldOffset);
            if (mapped)
                decorations.push(mapped);
            else if (options.onRemove)
                options.onRemove(set.local[i].spec);
        }
        for (let i = 0; i < set.children.length; i += 3)
            gather(set.children[i + 2], set.children[i] + oldOffset + 1);
    }
    for (let i = 0; i < children.length; i += 3)
        if (children[i + 1] == -1)
            gather(children[i + 2], oldChildren[i] + oldOffset + 1);
    return decorations;
}
function takeSpansForNode(spans, node, offset) {
    if (node.isLeaf)
        return null;
    let end = offset + node.nodeSize, found = null;
    for (let i = 0, span; i < spans.length; i++) {
        if ((span = spans[i]) && span.from > offset && span.to < end) {
            (found || (found = [])).push(span);
            spans[i] = null;
        }
    }
    return found;
}
function withoutNulls(array) {
    let result = [];
    for (let i = 0; i < array.length; i++)
        if (array[i] != null)
            result.push(array[i]);
    return result;
}
// Build up a tree that corresponds to a set of decorations. `offset`
// is a base offset that should be subtracted from the `from` and `to`
// positions in the spans (so that we don't have to allocate new spans
// for recursive calls).
function buildTree(spans, node, offset, options) {
    let children = [], hasNulls = false;
    node.forEach((childNode, localStart) => {
        let found = takeSpansForNode(spans, childNode, localStart + offset);
        if (found) {
            hasNulls = true;
            let subtree = buildTree(found, childNode, offset + localStart + 1, options);
            if (subtree != empty)
                children.push(localStart, localStart + childNode.nodeSize, subtree);
        }
    });
    let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
    for (let i = 0; i < locals.length; i++)
        if (!locals[i].type.valid(node, locals[i])) {
            if (options.onRemove)
                options.onRemove(locals[i].spec);
            locals.splice(i--, 1);
        }
    return locals.length || children.length ? new DecorationSet(locals, children) : empty;
}
// Used to sort decorations so that ones with a low start position
// come first, and within a set with the same start position, those
// with an smaller end position come first.
function byPos(a, b) {
    return a.from - b.from || a.to - b.to;
}
// Scan a sorted array of decorations for partially overlapping spans,
// and split those so that only fully overlapping spans are left (to
// make subsequent rendering easier). Will return the input array if
// no partially overlapping spans are found (the common case).
function removeOverlap(spans) {
    let working = spans;
    for (let i = 0; i < working.length - 1; i++) {
        let span = working[i];
        if (span.from != span.to)
            for (let j = i + 1; j < working.length; j++) {
                let next = working[j];
                if (next.from == span.from) {
                    if (next.to != span.to) {
                        if (working == spans)
                            working = spans.slice();
                        // Followed by a partially overlapping larger span. Split that
                        // span.
                        working[j] = next.copy(next.from, span.to);
                        insertAhead(working, j + 1, next.copy(span.to, next.to));
                    }
                    continue;
                }
                else {
                    if (next.from < span.to) {
                        if (working == spans)
                            working = spans.slice();
                        // The end of this one overlaps with a subsequent span. Split
                        // this one.
                        working[i] = span.copy(span.from, next.from);
                        insertAhead(working, j, span.copy(next.from, span.to));
                    }
                    break;
                }
            }
    }
    return working;
}
function insertAhead(array, i, deco) {
    while (i < array.length && byPos(deco, array[i]) > 0)
        i++;
    array.splice(i, 0, deco);
}
// Get the decorations associated with the current props of a view.
function viewDecorations(view) {
    let found = [];
    view.someProp("decorations", f => {
        let result = f(view.state);
        if (result && result != empty)
            found.push(result);
    });
    if (view.cursorWrapper)
        found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
    return DecorationGroup.from(found);
}

const observeOptions = {
    childList: true,
    characterData: true,
    characterDataOldValue: true,
    attributes: true,
    attributeOldValue: true,
    subtree: true
};
// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
const useCharData = ie$1 && ie_version <= 11;
class SelectionState {
    constructor() {
        this.anchorNode = null;
        this.anchorOffset = 0;
        this.focusNode = null;
        this.focusOffset = 0;
    }
    set(sel) {
        this.anchorNode = sel.anchorNode;
        this.anchorOffset = sel.anchorOffset;
        this.focusNode = sel.focusNode;
        this.focusOffset = sel.focusOffset;
    }
    clear() {
        this.anchorNode = this.focusNode = null;
    }
    eq(sel) {
        return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
            sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
    }
}
class DOMObserver {
    constructor(view, handleDOMChange) {
        this.view = view;
        this.handleDOMChange = handleDOMChange;
        this.queue = [];
        this.flushingSoon = -1;
        this.observer = null;
        this.currentSelection = new SelectionState;
        this.onCharData = null;
        this.suppressingSelectionUpdates = false;
        this.lastChangedTextNode = null;
        this.observer = window.MutationObserver &&
            new window.MutationObserver(mutations => {
                for (let i = 0; i < mutations.length; i++)
                    this.queue.push(mutations[i]);
                // IE11 will sometimes (on backspacing out a single character
                // text node after a BR node) call the observer callback
                // before actually updating the DOM, which will cause
                // ProseMirror to miss the change (see #930)
                if (ie$1 && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                    m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
        if (useCharData) {
            this.onCharData = e => {
                this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                this.flushSoon();
            };
        }
        this.onSelectionChange = this.onSelectionChange.bind(this);
    }
    flushSoon() {
        if (this.flushingSoon < 0)
            this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
    }
    forceFlush() {
        if (this.flushingSoon > -1) {
            window.clearTimeout(this.flushingSoon);
            this.flushingSoon = -1;
            this.flush();
        }
    }
    start() {
        if (this.observer) {
            this.observer.takeRecords();
            this.observer.observe(this.view.dom, observeOptions);
        }
        if (this.onCharData)
            this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
        this.connectSelection();
    }
    stop() {
        if (this.observer) {
            let take = this.observer.takeRecords();
            if (take.length) {
                for (let i = 0; i < take.length; i++)
                    this.queue.push(take[i]);
                window.setTimeout(() => this.flush(), 20);
            }
            this.observer.disconnect();
        }
        if (this.onCharData)
            this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        this.disconnectSelection();
    }
    connectSelection() {
        this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
    }
    disconnectSelection() {
        this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
    }
    suppressSelectionUpdates() {
        this.suppressingSelectionUpdates = true;
        setTimeout(() => this.suppressingSelectionUpdates = false, 50);
    }
    onSelectionChange() {
        if (!hasFocusAndSelection(this.view))
            return;
        if (this.suppressingSelectionUpdates)
            return selectionToDOM(this.view);
        // Deletions on IE11 fire their events in the wrong order, giving
        // us a selection change event before the DOM changes are
        // reported.
        if (ie$1 && ie_version <= 11 && !this.view.state.selection.empty) {
            let sel = this.view.domSelectionRange();
            // Selection.isCollapsed isn't reliable on IE
            if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                return this.flushSoon();
        }
        this.flush();
    }
    setCurSelection() {
        this.currentSelection.set(this.view.domSelectionRange());
    }
    ignoreSelectionChange(sel) {
        if (!sel.focusNode)
            return true;
        let ancestors = new Set, container;
        for (let scan = sel.focusNode; scan; scan = parentNode(scan))
            ancestors.add(scan);
        for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
            if (ancestors.has(scan)) {
                container = scan;
                break;
            }
        let desc = container && this.view.docView.nearestDesc(container);
        if (desc && desc.ignoreMutation({
            type: "selection",
            target: container.nodeType == 3 ? container.parentNode : container
        })) {
            this.setCurSelection();
            return true;
        }
    }
    pendingRecords() {
        if (this.observer)
            for (let mut of this.observer.takeRecords())
                this.queue.push(mut);
        return this.queue;
    }
    flush() {
        let { view } = this;
        if (!view.docView || this.flushingSoon > -1)
            return;
        let mutations = this.pendingRecords();
        if (mutations.length)
            this.queue = [];
        let sel = view.domSelectionRange();
        let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
        let from = -1, to = -1, typeOver = false, added = [];
        if (view.editable) {
            for (let i = 0; i < mutations.length; i++) {
                let result = this.registerMutation(mutations[i], added);
                if (result) {
                    from = from < 0 ? result.from : Math.min(result.from, from);
                    to = to < 0 ? result.to : Math.max(result.to, to);
                    if (result.typeOver)
                        typeOver = true;
                }
            }
        }
        if (gecko && added.length) {
            let brs = added.filter(n => n.nodeName == "BR");
            if (brs.length == 2) {
                let [a, b] = brs;
                if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                    b.remove();
                else
                    a.remove();
            }
            else {
                let { focusNode } = this.currentSelection;
                for (let br of brs) {
                    let parent = br.parentNode;
                    if (parent && parent.nodeName == "LI" && (!focusNode || blockParent(view, focusNode) != parent))
                        br.remove();
                }
            }
        }
        let readSel = null;
        // If it looks like the browser has reset the selection to the
        // start of the document after focus, restore the selection from
        // the state
        if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 &&
            Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 &&
            selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) &&
            readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
            view.input.lastFocus = 0;
            selectionToDOM(view);
            this.currentSelection.set(sel);
            view.scrollToSelection();
        }
        else if (from > -1 || newSel) {
            if (from > -1) {
                view.docView.markDirty(from, to);
                checkCSS(view);
            }
            this.handleDOMChange(from, to, typeOver, added);
            if (view.docView && view.docView.dirty)
                view.updateState(view.state);
            else if (!this.currentSelection.eq(sel))
                selectionToDOM(view);
            this.currentSelection.set(sel);
        }
    }
    registerMutation(mut, added) {
        // Ignore mutations inside nodes that were already noted as inserted
        if (added.indexOf(mut.target) > -1)
            return null;
        let desc = this.view.docView.nearestDesc(mut.target);
        if (mut.type == "attributes" &&
            (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                // Firefox sometimes fires spurious events for null/empty styles
                (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
            return null;
        if (!desc || desc.ignoreMutation(mut))
            return null;
        if (mut.type == "childList") {
            for (let i = 0; i < mut.addedNodes.length; i++) {
                let node = mut.addedNodes[i];
                added.push(node);
                if (node.nodeType == 3)
                    this.lastChangedTextNode = node;
            }
            if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                return { from: desc.posBefore, to: desc.posAfter };
            let prev = mut.previousSibling, next = mut.nextSibling;
            if (ie$1 && ie_version <= 11 && mut.addedNodes.length) {
                // IE11 gives us incorrect next/prev siblings for some
                // insertions, so if there are added nodes, recompute those
                for (let i = 0; i < mut.addedNodes.length; i++) {
                    let { previousSibling, nextSibling } = mut.addedNodes[i];
                    if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                        prev = previousSibling;
                    if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                        next = nextSibling;
                }
            }
            let fromOffset = prev && prev.parentNode == mut.target
                ? domIndex(prev) + 1 : 0;
            let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
            let toOffset = next && next.parentNode == mut.target
                ? domIndex(next) : mut.target.childNodes.length;
            let to = desc.localPosFromDOM(mut.target, toOffset, 1);
            return { from, to };
        }
        else if (mut.type == "attributes") {
            return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
        }
        else { // "characterData"
            this.lastChangedTextNode = mut.target;
            return {
                from: desc.posAtStart,
                to: desc.posAtEnd,
                // An event was generated for a text change that didn't change
                // any text. Mark the dom change to fall back to assuming the
                // selection was typed over with an identical value if it can't
                // find another change.
                typeOver: mut.target.nodeValue == mut.oldValue
            };
        }
    }
}
let cssChecked = new WeakMap();
let cssCheckWarned = false;
function checkCSS(view) {
    if (cssChecked.has(view))
        return;
    cssChecked.set(view, null);
    if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
        view.requiresGeckoHackNode = gecko;
        if (cssCheckWarned)
            return;
        console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
        cssCheckWarned = true;
    }
}
function rangeToSelectionRange(view, range) {
    let anchorNode = range.startContainer, anchorOffset = range.startOffset;
    let focusNode = range.endContainer, focusOffset = range.endOffset;
    let currentAnchor = view.domAtPos(view.state.selection.anchor);
    // Since such a range doesn't distinguish between anchor and head,
    // use a heuristic that flips it around if its end matches the
    // current anchor.
    if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return { anchorNode, anchorOffset, focusNode, focusOffset };
}
// Used to work around a Safari Selection/shadow DOM bug
// Based on https://github.com/codemirror/dev/issues/414 fix
function safariShadowSelectionRange(view, selection) {
    if (selection.getComposedRanges) {
        let range = selection.getComposedRanges(view.root)[0];
        if (range)
            return rangeToSelectionRange(view, range);
    }
    let found;
    function read(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        found = event.getTargetRanges()[0];
    }
    // Because Safari (at least in 2018-2022) doesn't provide regular
    // access to the selection inside a shadowRoot, we have to perform a
    // ridiculous hack to get at it—using `execCommand` to trigger a
    // `beforeInput` event so that we can read the target range from the
    // event.
    view.dom.addEventListener("beforeinput", read, true);
    document.execCommand("indent");
    view.dom.removeEventListener("beforeinput", read, true);
    return found ? rangeToSelectionRange(view, found) : null;
}
function blockParent(view, node) {
    for (let p = node.parentNode; p && p != view.dom; p = p.parentNode) {
        let desc = view.docView.nearestDesc(p, true);
        if (desc && desc.node.isBlock)
            return p;
    }
    return null;
}

// Note that all referencing and parsing is done with the
// start-of-operation selection and document, since that's the one
// that the DOM represents. If any changes came in in the meantime,
// the modification is mapped over those before it is applied, in
// readDOMChange.
function parseBetween(view, from_, to_) {
    let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
    let domSel = view.domSelectionRange();
    let find;
    let anchor = domSel.anchorNode;
    if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
        find = [{ node: anchor, offset: domSel.anchorOffset }];
        if (!selectionCollapsed(domSel))
            find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
    }
    // Work around issue in Chrome where backspacing sometimes replaces
    // the deleted content with a random BR node (issues #799, #831)
    if (chrome && view.input.lastKeyCode === 8) {
        for (let off = toOffset; off > fromOffset; off--) {
            let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
            if (node.nodeName == "BR" && !desc) {
                toOffset = off;
                break;
            }
            if (!desc || desc.size)
                break;
        }
    }
    let startDoc = view.state.doc;
    let parser = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
    let $from = startDoc.resolve(from);
    let sel = null, doc = parser.parse(parent, {
        topNode: $from.parent,
        topMatch: $from.parent.contentMatchAt($from.index()),
        topOpen: true,
        from: fromOffset,
        to: toOffset,
        preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
        findPositions: find,
        ruleFromNode,
        context: $from
    });
    if (find && find[0].pos != null) {
        let anchor = find[0].pos, head = find[1] && find[1].pos;
        if (head == null)
            head = anchor;
        sel = { anchor: anchor + from, head: head + from };
    }
    return { doc, sel, from, to };
}
function ruleFromNode(dom) {
    let desc = dom.pmViewDesc;
    if (desc) {
        return desc.parseRule();
    }
    else if (dom.nodeName == "BR" && dom.parentNode) {
        // Safari replaces the list item or table cell with a BR
        // directly in the list node (?!) if you delete the last
        // character in a list item or table cell (#708, #862)
        if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
            let skip = document.createElement("div");
            skip.appendChild(document.createElement("li"));
            return { skip };
        }
        else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
            return { ignore: true };
        }
    }
    else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
        return { ignore: true };
    }
    return null;
}
const isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function readDOMChange(view, from, to, typeOver, addedNodes) {
    let compositionID = view.input.compositionPendingChanges || (view.composing ? view.input.compositionID : 0);
    view.input.compositionPendingChanges = 0;
    if (from < 0) {
        let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
        let newSel = selectionFromDOM(view, origin);
        if (newSel && !view.state.selection.eq(newSel)) {
            if (chrome && android &&
                view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime &&
                view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter"))))
                return;
            let tr = view.state.tr.setSelection(newSel);
            if (origin == "pointer")
                tr.setMeta("pointer", true);
            else if (origin == "key")
                tr.scrollIntoView();
            if (compositionID)
                tr.setMeta("composition", compositionID);
            view.dispatch(tr);
        }
        return;
    }
    let $before = view.state.doc.resolve(from);
    let shared = $before.sharedDepth(to);
    from = $before.before(shared + 1);
    to = view.state.doc.resolve(to).after(shared + 1);
    let sel = view.state.selection;
    let parse = parseBetween(view, from, to);
    let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
    let preferredPos, preferredSide;
    // Prefer anchoring to end when Backspace is pressed
    if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
        preferredPos = view.state.selection.to;
        preferredSide = "end";
    }
    else {
        preferredPos = view.state.selection.from;
        preferredSide = "start";
    }
    view.input.lastKeyCode = null;
    let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
    if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
        addedNodes.some(n => n.nodeType == 1 && !isInline.test(n.nodeName)) &&
        (!change || change.endA >= change.endB) &&
        view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
        view.input.lastIOSEnter = 0;
        return;
    }
    if (!change) {
        if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
            !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
            change = { start: sel.from, endA: sel.to, endB: sel.to };
        }
        else {
            if (parse.sel) {
                let sel = resolveSelection(view, view.state.doc, parse.sel);
                if (sel && !sel.eq(view.state.selection)) {
                    let tr = view.state.tr.setSelection(sel);
                    if (compositionID)
                        tr.setMeta("composition", compositionID);
                    view.dispatch(tr);
                }
            }
            return;
        }
    }
    view.input.domChangeCount++;
    // Handle the case where overwriting a selection by typing matches
    // the start or end of the selected content, creating a change
    // that's smaller than what was actually overwritten.
    if (view.state.selection.from < view.state.selection.to &&
        change.start == change.endB &&
        view.state.selection instanceof TextSelection) {
        if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
            view.state.selection.from >= parse.from) {
            change.start = view.state.selection.from;
        }
        else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
            view.state.selection.to <= parse.to) {
            change.endB += (view.state.selection.to - change.endA);
            change.endA = view.state.selection.to;
        }
    }
    // IE11 will insert a non-breaking space _ahead_ of the space after
    // the cursor space when adding a space before another space. When
    // that happened, adjust the change to cover the space instead.
    if (ie$1 && ie_version <= 11 && change.endB == change.start + 1 &&
        change.endA == change.start && change.start > parse.from &&
        parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
        change.start--;
        change.endA--;
        change.endB--;
    }
    let $from = parse.doc.resolveNoCache(change.start - parse.from);
    let $to = parse.doc.resolveNoCache(change.endB - parse.from);
    let $fromA = doc.resolve(change.start);
    let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
    let nextSel;
    // If this looks like the effect of pressing Enter (or was recorded
    // as being an iOS enter press), just dispatch an Enter key instead.
    if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
        (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
        (!inlineChange && $from.pos < parse.doc.content.size && !$from.sameParent($to) &&
            (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
            nextSel.head == $to.pos)) &&
        view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
        view.input.lastIOSEnter = 0;
        return;
    }
    // Same for backspace
    if (view.state.selection.anchor > change.start &&
        looksLikeBackspace(doc, change.start, change.endA, $from, $to) &&
        view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
        if (android && chrome)
            view.domObserver.suppressSelectionUpdates(); // #820
        return;
    }
    // Chrome Android will occasionally, during composition, delete the
    // entire composition and then immediately insert it again. This is
    // used to detect that situation.
    if (chrome && android && change.endB == change.start)
        view.input.lastAndroidDelete = Date.now();
    // This tries to detect Android virtual keyboard
    // enter-and-pick-suggestion action. That sometimes (see issue
    // #1059) first fires a DOM mutation, before moving the selection to
    // the newly created block. And then, because ProseMirror cleans up
    // the DOM selection, it gives up moving the selection entirely,
    // leaving the cursor in the wrong place. When that happens, we drop
    // the new paragraph from the initial change, and fire a simulated
    // enter key afterwards.
    if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
        parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
        change.endB -= 2;
        $to = parse.doc.resolveNoCache(change.endB - parse.from);
        setTimeout(() => {
            view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
        }, 20);
    }
    let chFrom = change.start, chTo = change.endA;
    let tr, storedMarks, markChange;
    if (inlineChange) {
        if ($from.pos == $to.pos) { // Deletion
            // IE11 sometimes weirdly moves the DOM selection around after
            // backspacing out the first element in a textblock
            if (ie$1 && ie_version <= 11 && $from.parentOffset == 0) {
                view.domObserver.suppressSelectionUpdates();
                setTimeout(() => selectionToDOM(view), 20);
            }
            tr = view.state.tr.delete(chFrom, chTo);
            storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
        }
        else if ( // Adding or removing a mark
        change.endA == change.endB &&
            (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
            tr = view.state.tr;
            if (markChange.type == "add")
                tr.addMark(chFrom, chTo, markChange.mark);
            else
                tr.removeMark(chFrom, chTo, markChange.mark);
        }
        else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
            // Both positions in the same text node -- simply insert text
            let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
            if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                return;
            tr = view.state.tr.insertText(text, chFrom, chTo);
        }
    }
    if (!tr)
        tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
    if (parse.sel) {
        let sel = resolveSelection(view, tr.doc, parse.sel);
        // Chrome Android will sometimes, during composition, report the
        // selection in the wrong place. If it looks like that is
        // happening, don't update the selection.
        // Edge just doesn't move the cursor forward when you start typing
        // in an empty block or between br nodes.
        if (sel && !(chrome && android && view.composing && sel.empty &&
            (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
            (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
            ie$1 && sel.empty && sel.head == chFrom))
            tr.setSelection(sel);
    }
    if (storedMarks)
        tr.ensureMarks(storedMarks);
    if (compositionID)
        tr.setMeta("composition", compositionID);
    view.dispatch(tr.scrollIntoView());
}
function resolveSelection(view, doc, parsedSel) {
    if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
        return null;
    return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
}
// Given two same-length, non-empty fragments of inline content,
// determine whether the first could be created from the second by
// removing or adding a single mark type.
function isMarkChange(cur, prev) {
    let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
    let added = curMarks, removed = prevMarks, type, mark, update;
    for (let i = 0; i < prevMarks.length; i++)
        added = prevMarks[i].removeFromSet(added);
    for (let i = 0; i < curMarks.length; i++)
        removed = curMarks[i].removeFromSet(removed);
    if (added.length == 1 && removed.length == 0) {
        mark = added[0];
        type = "add";
        update = (node) => node.mark(mark.addToSet(node.marks));
    }
    else if (added.length == 0 && removed.length == 1) {
        mark = removed[0];
        type = "remove";
        update = (node) => node.mark(mark.removeFromSet(node.marks));
    }
    else {
        return null;
    }
    let updated = [];
    for (let i = 0; i < prev.childCount; i++)
        updated.push(update(prev.child(i)));
    if (Fragment.from(updated).eq(cur))
        return { mark, type };
}
function looksLikeBackspace(old, start, end, $newStart, $newEnd) {
    if ( // The content must have shrunk
    end - start <= $newEnd.pos - $newStart.pos ||
        // newEnd must point directly at or after the end of the block that newStart points into
        skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
        return false;
    let $start = old.resolve(start);
    // Handle the case where, rather than joining blocks, the change just removed an entire block
    if (!$newStart.parent.isTextblock) {
        let after = $start.nodeAfter;
        return after != null && end == start + after.nodeSize;
    }
    // Start must be at the end of a block
    if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
        return false;
    let $next = old.resolve(skipClosingAndOpening($start, true, true));
    // The next textblock must start before end and end near it
    if (!$next.parent.isTextblock || $next.pos > end ||
        skipClosingAndOpening($next, true, false) < end)
        return false;
    // The fragments after the join point must match
    return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
}
function skipClosingAndOpening($pos, fromEnd, mayOpen) {
    let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
    while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
        depth--;
        end++;
        fromEnd = false;
    }
    if (mayOpen) {
        let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
        while (next && !next.isLeaf) {
            next = next.firstChild;
            end++;
        }
    }
    return end;
}
function findDiff(a, b, pos, preferredPos, preferredSide) {
    let start = a.findDiffStart(b, pos);
    if (start == null)
        return null;
    let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
    if (preferredSide == "end") {
        let adjust = Math.max(0, start - Math.min(endA, endB));
        preferredPos -= endA + adjust - start;
    }
    if (endA < start && a.size < b.size) {
        let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
        start -= move;
        if (start && start < b.size && isSurrogatePair(b.textBetween(start - 1, start + 1)))
            start += move ? 1 : -1;
        endB = start + (endB - endA);
        endA = start;
    }
    else if (endB < start) {
        let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
        start -= move;
        if (start && start < a.size && isSurrogatePair(a.textBetween(start - 1, start + 1)))
            start += move ? 1 : -1;
        endA = start + (endA - endB);
        endB = start;
    }
    return { start, endA, endB };
}
function isSurrogatePair(str) {
    if (str.length != 2)
        return false;
    let a = str.charCodeAt(0), b = str.charCodeAt(1);
    return a >= 0xDC00 && a <= 0xDFFF && b >= 0xD800 && b <= 0xDBFF;
}
/**
An editor view manages the DOM structure that represents an
editable document. Its state and behavior are determined by its
[props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
*/
class EditorView {
    /**
    Create a view. `place` may be a DOM node that the editor should
    be appended to, a function that will place it into the document,
    or an object whose `mount` property holds the node to use as the
    document container. If it is `null`, the editor will not be
    added to the document.
    */
    constructor(place, props) {
        this._root = null;
        /**
        @internal
        */
        this.focused = false;
        /**
        Kludge used to work around a Chrome bug @internal
        */
        this.trackWrites = null;
        this.mounted = false;
        /**
        @internal
        */
        this.markCursor = null;
        /**
        @internal
        */
        this.cursorWrapper = null;
        /**
        @internal
        */
        this.lastSelectedViewDesc = undefined;
        /**
        @internal
        */
        this.input = new InputState;
        this.prevDirectPlugins = [];
        this.pluginViews = [];
        /**
        Holds `true` when a hack node is needed in Firefox to prevent the
        [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)
        @internal
        */
        this.requiresGeckoHackNode = false;
        /**
        When editor content is being dragged, this object contains
        information about the dragged slice and whether it is being
        copied or moved. At any other time, it is null.
        */
        this.dragging = null;
        this._props = props;
        this.state = props.state;
        this.directPlugins = props.plugins || [];
        this.directPlugins.forEach(checkStateComponent);
        this.dispatch = this.dispatch.bind(this);
        this.dom = (place && place.mount) || document.createElement("div");
        if (place) {
            if (place.appendChild)
                place.appendChild(this.dom);
            else if (typeof place == "function")
                place(this.dom);
            else if (place.mount)
                this.mounted = true;
        }
        this.editable = getEditable(this);
        updateCursorWrapper(this);
        this.nodeViews = buildNodeViews(this);
        this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
        this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
        this.domObserver.start();
        initInput(this);
        this.updatePluginViews();
    }
    /**
    Holds `true` when a
    [composition](https://w3c.github.io/uievents/#events-compositionevents)
    is active.
    */
    get composing() { return this.input.composing; }
    /**
    The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
    */
    get props() {
        if (this._props.state != this.state) {
            let prev = this._props;
            this._props = {};
            for (let name in prev)
                this._props[name] = prev[name];
            this._props.state = this.state;
        }
        return this._props;
    }
    /**
    Update the view's props. Will immediately cause an update to
    the DOM.
    */
    update(props) {
        if (props.handleDOMEvents != this._props.handleDOMEvents)
            ensureListeners(this);
        let prevProps = this._props;
        this._props = props;
        if (props.plugins) {
            props.plugins.forEach(checkStateComponent);
            this.directPlugins = props.plugins;
        }
        this.updateStateInner(props.state, prevProps);
    }
    /**
    Update the view by updating existing props object with the object
    given as argument. Equivalent to `view.update(Object.assign({},
    view.props, props))`.
    */
    setProps(props) {
        let updated = {};
        for (let name in this._props)
            updated[name] = this._props[name];
        updated.state = this.state;
        for (let name in props)
            updated[name] = props[name];
        this.update(updated);
    }
    /**
    Update the editor's `state` prop, without touching any of the
    other props.
    */
    updateState(state) {
        this.updateStateInner(state, this._props);
    }
    updateStateInner(state, prevProps) {
        var _a;
        let prev = this.state, redraw = false, updateSel = false;
        // When stored marks are added, stop composition, so that they can
        // be displayed.
        if (state.storedMarks && this.composing) {
            clearComposition(this);
            updateSel = true;
        }
        this.state = state;
        let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
        if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
            let nodeViews = buildNodeViews(this);
            if (changedNodeViews(nodeViews, this.nodeViews)) {
                this.nodeViews = nodeViews;
                redraw = true;
            }
        }
        if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
            ensureListeners(this);
        }
        this.editable = getEditable(this);
        updateCursorWrapper(this);
        let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
        let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset"
            : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
        let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
        if (updateDoc || !state.selection.eq(prev.selection))
            updateSel = true;
        let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
        if (updateSel) {
            this.domObserver.stop();
            // Work around an issue in Chrome, IE, and Edge where changing
            // the DOM around an active selection puts it into a broken
            // state where the thing the user sees differs from the
            // selection reported by the Selection object (#710, #973,
            // #1011, #1013, #1035).
            let forceSelUpdate = updateDoc && (ie$1 || chrome) && !this.composing &&
                !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
            if (updateDoc) {
                // If the node that the selection points into is written to,
                // Chrome sometimes starts misreporting the selection, so this
                // tracks that and forces a selection reset when our update
                // did write to the node.
                let chromeKludge = chrome ? (this.trackWrites = this.domSelectionRange().focusNode) : null;
                if (this.composing)
                    this.input.compositionNode = findCompositionNode(this);
                if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                    this.docView.updateOuterDeco(outerDeco);
                    this.docView.destroy();
                    this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                }
                if (chromeKludge && !this.trackWrites)
                    forceSelUpdate = true;
            }
            // Work around for an issue where an update arriving right between
            // a DOM selection change and the "selectionchange" event for it
            // can cause a spurious DOM selection update, disrupting mouse
            // drag selection.
            if (forceSelUpdate ||
                !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) &&
                    anchorInRightPlace(this))) {
                selectionToDOM(this, forceSelUpdate);
            }
            else {
                syncNodeSelection(this, state.selection);
                this.domObserver.setCurSelection();
            }
            this.domObserver.start();
        }
        this.updatePluginViews(prev);
        if (((_a = this.dragging) === null || _a === void 0 ? void 0 : _a.node) && !prev.doc.eq(state.doc))
            this.updateDraggedNode(this.dragging, prev);
        if (scroll == "reset") {
            this.dom.scrollTop = 0;
        }
        else if (scroll == "to selection") {
            this.scrollToSelection();
        }
        else if (oldScrollPos) {
            resetScrollPos(oldScrollPos);
        }
    }
    /**
    @internal
    */
    scrollToSelection() {
        let startDOM = this.domSelectionRange().focusNode;
        if (this.someProp("handleScrollToSelection", f => f(this))) ;
        else if (this.state.selection instanceof NodeSelection) {
            let target = this.docView.domAfterPos(this.state.selection.from);
            if (target.nodeType == 1)
                scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
        }
        else {
            scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
        }
    }
    destroyPluginViews() {
        let view;
        while (view = this.pluginViews.pop())
            if (view.destroy)
                view.destroy();
    }
    updatePluginViews(prevState) {
        if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
            this.prevDirectPlugins = this.directPlugins;
            this.destroyPluginViews();
            for (let i = 0; i < this.directPlugins.length; i++) {
                let plugin = this.directPlugins[i];
                if (plugin.spec.view)
                    this.pluginViews.push(plugin.spec.view(this));
            }
            for (let i = 0; i < this.state.plugins.length; i++) {
                let plugin = this.state.plugins[i];
                if (plugin.spec.view)
                    this.pluginViews.push(plugin.spec.view(this));
            }
        }
        else {
            for (let i = 0; i < this.pluginViews.length; i++) {
                let pluginView = this.pluginViews[i];
                if (pluginView.update)
                    pluginView.update(this, prevState);
            }
        }
    }
    updateDraggedNode(dragging, prev) {
        let sel = dragging.node, found = -1;
        if (this.state.doc.nodeAt(sel.from) == sel.node) {
            found = sel.from;
        }
        else {
            let movedPos = sel.from + (this.state.doc.content.size - prev.doc.content.size);
            let moved = movedPos > 0 && this.state.doc.nodeAt(movedPos);
            if (moved == sel.node)
                found = movedPos;
        }
        this.dragging = new Dragging(dragging.slice, dragging.move, found < 0 ? undefined : NodeSelection.create(this.state.doc, found));
    }
    someProp(propName, f) {
        let prop = this._props && this._props[propName], value;
        if (prop != null && (value = f ? f(prop) : prop))
            return value;
        for (let i = 0; i < this.directPlugins.length; i++) {
            let prop = this.directPlugins[i].props[propName];
            if (prop != null && (value = f ? f(prop) : prop))
                return value;
        }
        let plugins = this.state.plugins;
        if (plugins)
            for (let i = 0; i < plugins.length; i++) {
                let prop = plugins[i].props[propName];
                if (prop != null && (value = f ? f(prop) : prop))
                    return value;
            }
    }
    /**
    Query whether the view has focus.
    */
    hasFocus() {
        // Work around IE not handling focus correctly if resize handles are shown.
        // If the cursor is inside an element with resize handles, activeElement
        // will be that element instead of this.dom.
        if (ie$1) {
            // If activeElement is within this.dom, and there are no other elements
            // setting `contenteditable` to false in between, treat it as focused.
            let node = this.root.activeElement;
            if (node == this.dom)
                return true;
            if (!node || !this.dom.contains(node))
                return false;
            while (node && this.dom != node && this.dom.contains(node)) {
                if (node.contentEditable == 'false')
                    return false;
                node = node.parentElement;
            }
            return true;
        }
        return this.root.activeElement == this.dom;
    }
    /**
    Focus the editor.
    */
    focus() {
        this.domObserver.stop();
        if (this.editable)
            focusPreventScroll(this.dom);
        selectionToDOM(this);
        this.domObserver.start();
    }
    /**
    Get the document root in which the editor exists. This will
    usually be the top-level `document`, but might be a [shadow
    DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
    root if the editor is inside one.
    */
    get root() {
        let cached = this._root;
        if (cached == null)
            for (let search = this.dom.parentNode; search; search = search.parentNode) {
                if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                    if (!search.getSelection)
                        Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                    return this._root = search;
                }
            }
        return cached || document;
    }
    /**
    When an existing editor view is moved to a new document or
    shadow tree, call this to make it recompute its root.
    */
    updateRoot() {
        this._root = null;
    }
    /**
    Given a pair of viewport coordinates, return the document
    position that corresponds to them. May return null if the given
    coordinates aren't inside of the editor. When an object is
    returned, its `pos` property is the position nearest to the
    coordinates, and its `inside` property holds the position of the
    inner node that the position falls inside of, or -1 if it is at
    the top level, not in any node.
    */
    posAtCoords(coords) {
        return posAtCoords(this, coords);
    }
    /**
    Returns the viewport rectangle at a given document position.
    `left` and `right` will be the same number, as this returns a
    flat cursor-ish rectangle. If the position is between two things
    that aren't directly adjacent, `side` determines which element
    is used. When < 0, the element before the position is used,
    otherwise the element after.
    */
    coordsAtPos(pos, side = 1) {
        return coordsAtPos(this, pos, side);
    }
    /**
    Find the DOM position that corresponds to the given document
    position. When `side` is negative, find the position as close as
    possible to the content before the position. When positive,
    prefer positions close to the content after the position. When
    zero, prefer as shallow a position as possible.
    
    Note that you should **not** mutate the editor's internal DOM,
    only inspect it (and even that is usually not necessary).
    */
    domAtPos(pos, side = 0) {
        return this.docView.domFromPos(pos, side);
    }
    /**
    Find the DOM node that represents the document node after the
    given position. May return `null` when the position doesn't point
    in front of a node or if the node is inside an opaque node view.
    
    This is intended to be able to call things like
    `getBoundingClientRect` on that DOM node. Do **not** mutate the
    editor DOM directly, or add styling this way, since that will be
    immediately overriden by the editor as it redraws the node.
    */
    nodeDOM(pos) {
        let desc = this.docView.descAt(pos);
        return desc ? desc.nodeDOM : null;
    }
    /**
    Find the document position that corresponds to a given DOM
    position. (Whenever possible, it is preferable to inspect the
    document structure directly, rather than poking around in the
    DOM, but sometimes—for example when interpreting an event
    target—you don't have a choice.)
    
    The `bias` parameter can be used to influence which side of a DOM
    node to use when the position is inside a leaf node.
    */
    posAtDOM(node, offset, bias = -1) {
        let pos = this.docView.posFromDOM(node, offset, bias);
        if (pos == null)
            throw new RangeError("DOM position not inside the editor");
        return pos;
    }
    /**
    Find out whether the selection is at the end of a textblock when
    moving in a given direction. When, for example, given `"left"`,
    it will return true if moving left from the current cursor
    position would leave that position's parent textblock. Will apply
    to the view's current state by default, but it is possible to
    pass a different state.
    */
    endOfTextblock(dir, state) {
        return endOfTextblock(this, state || this.state, dir);
    }
    /**
    Run the editor's paste logic with the given HTML string. The
    `event`, if given, will be passed to the
    [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
    */
    pasteHTML(html, event) {
        return doPaste(this, "", html, false, event || new ClipboardEvent("paste"));
    }
    /**
    Run the editor's paste logic with the given plain-text input.
    */
    pasteText(text, event) {
        return doPaste(this, text, null, true, event || new ClipboardEvent("paste"));
    }
    /**
    Removes the editor from the DOM and destroys all [node
    views](https://prosemirror.net/docs/ref/#view.NodeView).
    */
    destroy() {
        if (!this.docView)
            return;
        destroyInput(this);
        this.destroyPluginViews();
        if (this.mounted) {
            this.docView.update(this.state.doc, [], viewDecorations(this), this);
            this.dom.textContent = "";
        }
        else if (this.dom.parentNode) {
            this.dom.parentNode.removeChild(this.dom);
        }
        this.docView.destroy();
        this.docView = null;
        clearReusedRange();
    }
    /**
    This is true when the view has been
    [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
    used anymore).
    */
    get isDestroyed() {
        return this.docView == null;
    }
    /**
    Used for testing.
    */
    dispatchEvent(event) {
        return dispatchEvent(this, event);
    }
    /**
    Dispatch a transaction. Will call
    [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
    when given, and otherwise defaults to applying the transaction to
    the current state and calling
    [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
    This method is bound to the view instance, so that it can be
    easily passed around.
    */
    dispatch(tr) {
        let dispatchTransaction = this._props.dispatchTransaction;
        if (dispatchTransaction)
            dispatchTransaction.call(this, tr);
        else
            this.updateState(this.state.apply(tr));
    }
    /**
    @internal
    */
    domSelectionRange() {
        let sel = this.domSelection();
        if (!sel)
            return { focusNode: null, focusOffset: 0, anchorNode: null, anchorOffset: 0 };
        return safari && this.root.nodeType === 11 &&
            deepActiveElement(this.dom.ownerDocument) == this.dom && safariShadowSelectionRange(this, sel) || sel;
    }
    /**
    @internal
    */
    domSelection() {
        return this.root.getSelection();
    }
}
function computeDocDeco(view) {
    let attrs = Object.create(null);
    attrs.class = "ProseMirror";
    attrs.contenteditable = String(view.editable);
    view.someProp("attributes", value => {
        if (typeof value == "function")
            value = value(view.state);
        if (value)
            for (let attr in value) {
                if (attr == "class")
                    attrs.class += " " + value[attr];
                else if (attr == "style")
                    attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                    attrs[attr] = String(value[attr]);
            }
    });
    if (!attrs.translate)
        attrs.translate = "no";
    return [Decoration.node(0, view.state.doc.content.size, attrs)];
}
function updateCursorWrapper(view) {
    if (view.markCursor) {
        let dom = document.createElement("img");
        dom.className = "ProseMirror-separator";
        dom.setAttribute("mark-placeholder", "true");
        dom.setAttribute("alt", "");
        view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.from, dom, { raw: true, marks: view.markCursor }) };
    }
    else {
        view.cursorWrapper = null;
    }
}
function getEditable(view) {
    return !view.someProp("editable", value => value(view.state) === false);
}
function selectionContextChanged(sel1, sel2) {
    let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
    return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
}
function buildNodeViews(view) {
    let result = Object.create(null);
    function add(obj) {
        for (let prop in obj)
            if (!Object.prototype.hasOwnProperty.call(result, prop))
                result[prop] = obj[prop];
    }
    view.someProp("nodeViews", add);
    view.someProp("markViews", add);
    return result;
}
function changedNodeViews(a, b) {
    let nA = 0, nB = 0;
    for (let prop in a) {
        if (a[prop] != b[prop])
            return true;
        nA++;
    }
    for (let _ in b)
        nB++;
    return nA != nB;
}
function checkStateComponent(plugin) {
    if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
        throw new RangeError("Plugins passed directly to the view must not have a state component");
}

var GOOD_LEAF_SIZE = 200;

// :: class<T> A rope sequence is a persistent sequence data structure
// that supports appending, prepending, and slicing without doing a
// full copy. It is represented as a mostly-balanced tree.
var RopeSequence = function RopeSequence () {};

RopeSequence.prototype.append = function append (other) {
  if (!other.length) { return this }
  other = RopeSequence.from(other);

  return (!this.length && other) ||
    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
    this.appendInner(other)
};

// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
// Prepend an array or other rope to this one, returning a new rope.
RopeSequence.prototype.prepend = function prepend (other) {
  if (!other.length) { return this }
  return RopeSequence.from(other).append(this)
};

RopeSequence.prototype.appendInner = function appendInner (other) {
  return new Append(this, other)
};

// :: (?number, ?number) → RopeSequence<T>
// Create a rope repesenting a sub-sequence of this rope.
RopeSequence.prototype.slice = function slice (from, to) {
    if ( from === void 0 ) from = 0;
    if ( to === void 0 ) to = this.length;

  if (from >= to) { return RopeSequence.empty }
  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
};

// :: (number) → T
// Retrieve the element at the given position from this rope.
RopeSequence.prototype.get = function get (i) {
  if (i < 0 || i >= this.length) { return undefined }
  return this.getInner(i)
};

// :: ((element: T, index: number) → ?bool, ?number, ?number)
// Call the given function for each element between the given
// indices. This tends to be more efficient than looping over the
// indices and calling `get`, because it doesn't have to descend the
// tree for every element.
RopeSequence.prototype.forEach = function forEach (f, from, to) {
    if ( from === void 0 ) from = 0;
    if ( to === void 0 ) to = this.length;

  if (from <= to)
    { this.forEachInner(f, from, to, 0); }
  else
    { this.forEachInvertedInner(f, from, to, 0); }
};

// :: ((element: T, index: number) → U, ?number, ?number) → [U]
// Map the given functions over the elements of the rope, producing
// a flat array.
RopeSequence.prototype.map = function map (f, from, to) {
    if ( from === void 0 ) from = 0;
    if ( to === void 0 ) to = this.length;

  var result = [];
  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
  return result
};

// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
// Create a rope representing the given array, or return the rope
// itself if a rope was given.
RopeSequence.from = function from (values) {
  if (values instanceof RopeSequence) { return values }
  return values && values.length ? new Leaf(values) : RopeSequence.empty
};

var Leaf = /*@__PURE__*/(function (RopeSequence) {
  function Leaf(values) {
    RopeSequence.call(this);
    this.values = values;
  }

  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
  Leaf.prototype.constructor = Leaf;

  var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

  Leaf.prototype.flatten = function flatten () {
    return this.values
  };

  Leaf.prototype.sliceInner = function sliceInner (from, to) {
    if (from == 0 && to == this.length) { return this }
    return new Leaf(this.values.slice(from, to))
  };

  Leaf.prototype.getInner = function getInner (i) {
    return this.values[i]
  };

  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
    for (var i = from; i < to; i++)
      { if (f(this.values[i], start + i) === false) { return false } }
  };

  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
    for (var i = from - 1; i >= to; i--)
      { if (f(this.values[i], start + i) === false) { return false } }
  };

  Leaf.prototype.leafAppend = function leafAppend (other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE)
      { return new Leaf(this.values.concat(other.flatten())) }
  };

  Leaf.prototype.leafPrepend = function leafPrepend (other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE)
      { return new Leaf(other.flatten().concat(this.values)) }
  };

  prototypeAccessors.length.get = function () { return this.values.length };

  prototypeAccessors.depth.get = function () { return 0 };

  Object.defineProperties( Leaf.prototype, prototypeAccessors );

  return Leaf;
}(RopeSequence));

// :: RopeSequence
// The empty rope sequence.
RopeSequence.empty = new Leaf([]);

var Append = /*@__PURE__*/(function (RopeSequence) {
  function Append(left, right) {
    RopeSequence.call(this);
    this.left = left;
    this.right = right;
    this.length = left.length + right.length;
    this.depth = Math.max(left.depth, right.depth) + 1;
  }

  if ( RopeSequence ) Append.__proto__ = RopeSequence;
  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
  Append.prototype.constructor = Append;

  Append.prototype.flatten = function flatten () {
    return this.left.flatten().concat(this.right.flatten())
  };

  Append.prototype.getInner = function getInner (i) {
    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
  };

  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
    var leftLen = this.left.length;
    if (from < leftLen &&
        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
      { return false }
    if (to > leftLen &&
        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
      { return false }
  };

  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
    var leftLen = this.left.length;
    if (from > leftLen &&
        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
      { return false }
    if (to < leftLen &&
        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
      { return false }
  };

  Append.prototype.sliceInner = function sliceInner (from, to) {
    if (from == 0 && to == this.length) { return this }
    var leftLen = this.left.length;
    if (to <= leftLen) { return this.left.slice(from, to) }
    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
  };

  Append.prototype.leafAppend = function leafAppend (other) {
    var inner = this.right.leafAppend(other);
    if (inner) { return new Append(this.left, inner) }
  };

  Append.prototype.leafPrepend = function leafPrepend (other) {
    var inner = this.left.leafPrepend(other);
    if (inner) { return new Append(inner, this.right) }
  };

  Append.prototype.appendInner = function appendInner (other) {
    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
      { return new Append(this.left, new Append(this.right, other)) }
    return new Append(this, other)
  };

  return Append;
}(RopeSequence));

// ProseMirror's history isn't simply a way to roll back to a previous
// state, because ProseMirror supports applying changes without adding
// them to the history (for example during collaboration).
//
// To this end, each 'Branch' (one for the undo history and one for
// the redo history) keeps an array of 'Items', which can optionally
// hold a step (an actual undoable change), and always hold a position
// map (which is needed to move changes below them to apply to the
// current document).
//
// An item that has both a step and a selection bookmark is the start
// of an 'event' — a group of changes that will be undone or redone at
// once. (It stores only the bookmark, since that way we don't have to
// provide a document until the selection is actually applied, which
// is useful when compressing.)
// Used to schedule history compression
const max_empty_items = 500;
class Branch {
    constructor(items, eventCount) {
        this.items = items;
        this.eventCount = eventCount;
    }
    // Pop the latest event off the branch's history and apply it
    // to a document transform.
    popEvent(state, preserveItems) {
        if (this.eventCount == 0)
            return null;
        let end = this.items.length;
        for (;; end--) {
            let next = this.items.get(end - 1);
            if (next.selection) {
                --end;
                break;
            }
        }
        let remap, mapFrom;
        if (preserveItems) {
            remap = this.remapping(end, this.items.length);
            mapFrom = remap.maps.length;
        }
        let transform = state.tr;
        let selection, remaining;
        let addAfter = [], addBefore = [];
        this.items.forEach((item, i) => {
            if (!item.step) {
                if (!remap) {
                    remap = this.remapping(end, i + 1);
                    mapFrom = remap.maps.length;
                }
                mapFrom--;
                addBefore.push(item);
                return;
            }
            if (remap) {
                addBefore.push(new Item(item.map));
                let step = item.step.map(remap.slice(mapFrom)), map;
                if (step && transform.maybeStep(step).doc) {
                    map = transform.mapping.maps[transform.mapping.maps.length - 1];
                    addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));
                }
                mapFrom--;
                if (map)
                    remap.appendMap(map, mapFrom);
            }
            else {
                transform.maybeStep(item.step);
            }
            if (item.selection) {
                selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
                return false;
            }
        }, this.items.length, 0);
        return { remaining: remaining, transform, selection: selection };
    }
    // Create a new branch with the given transform added.
    addTransform(transform, selection, histOptions, preserveItems) {
        let newItems = [], eventCount = this.eventCount;
        let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
        for (let i = 0; i < transform.steps.length; i++) {
            let step = transform.steps[i].invert(transform.docs[i]);
            let item = new Item(transform.mapping.maps[i], step, selection), merged;
            if (merged = lastItem && lastItem.merge(item)) {
                item = merged;
                if (i)
                    newItems.pop();
                else
                    oldItems = oldItems.slice(0, oldItems.length - 1);
            }
            newItems.push(item);
            if (selection) {
                eventCount++;
                selection = undefined;
            }
            if (!preserveItems)
                lastItem = item;
        }
        let overflow = eventCount - histOptions.depth;
        if (overflow > DEPTH_OVERFLOW) {
            oldItems = cutOffEvents(oldItems, overflow);
            eventCount -= overflow;
        }
        return new Branch(oldItems.append(newItems), eventCount);
    }
    remapping(from, to) {
        let maps = new Mapping;
        this.items.forEach((item, i) => {
            let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                ? maps.maps.length - item.mirrorOffset : undefined;
            maps.appendMap(item.map, mirrorPos);
        }, from, to);
        return maps;
    }
    addMaps(array) {
        if (this.eventCount == 0)
            return this;
        return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);
    }
    // When the collab module receives remote changes, the history has
    // to know about those, so that it can adjust the steps that were
    // rebased on top of the remote changes, and include the position
    // maps for the remote changes in its array of items.
    rebased(rebasedTransform, rebasedCount) {
        if (!this.eventCount)
            return this;
        let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
        let mapping = rebasedTransform.mapping;
        let newUntil = rebasedTransform.steps.length;
        let eventCount = this.eventCount;
        this.items.forEach(item => { if (item.selection)
            eventCount--; }, start);
        let iRebased = rebasedCount;
        this.items.forEach(item => {
            let pos = mapping.getMirror(--iRebased);
            if (pos == null)
                return;
            newUntil = Math.min(newUntil, pos);
            let map = mapping.maps[pos];
            if (item.step) {
                let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                if (selection)
                    eventCount++;
                rebasedItems.push(new Item(map, step, selection));
            }
            else {
                rebasedItems.push(new Item(map));
            }
        }, start);
        let newMaps = [];
        for (let i = rebasedCount; i < newUntil; i++)
            newMaps.push(new Item(mapping.maps[i]));
        let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
        let branch = new Branch(items, eventCount);
        if (branch.emptyItemCount() > max_empty_items)
            branch = branch.compress(this.items.length - rebasedItems.length);
        return branch;
    }
    emptyItemCount() {
        let count = 0;
        this.items.forEach(item => { if (!item.step)
            count++; });
        return count;
    }
    // Compressing a branch means rewriting it to push the air (map-only
    // items) out. During collaboration, these naturally accumulate
    // because each remote change adds one. The `upto` argument is used
    // to ensure that only the items below a given level are compressed,
    // because `rebased` relies on a clean, untouched set of items in
    // order to associate old items with rebased steps.
    compress(upto = this.items.length) {
        let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
        let items = [], events = 0;
        this.items.forEach((item, i) => {
            if (i >= upto) {
                items.push(item);
                if (item.selection)
                    events++;
            }
            else if (item.step) {
                let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                mapFrom--;
                if (map)
                    remap.appendMap(map, mapFrom);
                if (step) {
                    let selection = item.selection && item.selection.map(remap.slice(mapFrom));
                    if (selection)
                        events++;
                    let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
                    if (merged = items.length && items[last].merge(newItem))
                        items[last] = merged;
                    else
                        items.push(newItem);
                }
            }
            else if (item.map) {
                mapFrom--;
            }
        }, this.items.length, 0);
        return new Branch(RopeSequence.from(items.reverse()), events);
    }
}
Branch.empty = new Branch(RopeSequence.empty, 0);
function cutOffEvents(items, n) {
    let cutPoint;
    items.forEach((item, i) => {
        if (item.selection && (n-- == 0)) {
            cutPoint = i;
            return false;
        }
    });
    return items.slice(cutPoint);
}
class Item {
    constructor(
    // The (forward) step map for this item.
    map, 
    // The inverted step
    step, 
    // If this is non-null, this item is the start of a group, and
    // this selection is the starting selection for the group (the one
    // that was active before the first step was applied)
    selection, 
    // If this item is the inverse of a previous mapping on the stack,
    // this points at the inverse's offset
    mirrorOffset) {
        this.map = map;
        this.step = step;
        this.selection = selection;
        this.mirrorOffset = mirrorOffset;
    }
    merge(other) {
        if (this.step && other.step && !other.selection) {
            let step = other.step.merge(this.step);
            if (step)
                return new Item(step.getMap().invert(), step, this.selection);
        }
    }
}
// The value of the state field that tracks undo/redo history for that
// state. Will be stored in the plugin state when the history plugin
// is active.
class HistoryState {
    constructor(done, undone, prevRanges, prevTime, prevComposition) {
        this.done = done;
        this.undone = undone;
        this.prevRanges = prevRanges;
        this.prevTime = prevTime;
        this.prevComposition = prevComposition;
    }
}
const DEPTH_OVERFLOW = 20;
// Record a transformation in undo history.
function applyTransaction(history, state, tr, options) {
    let historyTr = tr.getMeta(historyKey), rebased;
    if (historyTr)
        return historyTr.historyState;
    if (tr.getMeta(closeHistoryKey))
        history = new HistoryState(history.done, history.undone, null, 0, -1);
    let appended = tr.getMeta("appendedTransaction");
    if (tr.steps.length == 0) {
        return history;
    }
    else if (appended && appended.getMeta(historyKey)) {
        if (appended.getMeta(historyKey).redo)
            return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps), history.prevTime, history.prevComposition);
        else
            return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime, history.prevComposition);
    }
    else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
        // Group transforms that occur in quick succession into one event.
        let composition = tr.getMeta("composition");
        let newGroup = history.prevTime == 0 ||
            (!appended && history.prevComposition != composition &&
                (history.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history.prevRanges)));
        let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps);
        return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time, composition == null ? history.prevComposition : composition);
    }
    else if (rebased = tr.getMeta("rebased")) {
        // Used by the collab module to tell the history that some of its
        // content has been rebased.
        return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);
    }
    else {
        return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);
    }
}
function isAdjacentTo(transform, prevRanges) {
    if (!prevRanges)
        return false;
    if (!transform.docChanged)
        return true;
    let adjacent = false;
    transform.mapping.maps[0].forEach((start, end) => {
        for (let i = 0; i < prevRanges.length; i += 2)
            if (start <= prevRanges[i + 1] && end >= prevRanges[i])
                adjacent = true;
    });
    return adjacent;
}
function rangesFor(maps) {
    let result = [];
    for (let i = maps.length - 1; i >= 0 && result.length == 0; i--)
        maps[i].forEach((_from, _to, from, to) => result.push(from, to));
    return result;
}
function mapRanges(ranges, mapping) {
    if (!ranges)
        return null;
    let result = [];
    for (let i = 0; i < ranges.length; i += 2) {
        let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
        if (from <= to)
            result.push(from, to);
    }
    return result;
}
// Apply the latest event from one branch to the document and shift the event
// onto the other branch.
function histTransaction(history, state, redo) {
    let preserveItems = mustPreserveItems(state);
    let histOptions = historyKey.get(state).spec.config;
    let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
    if (!pop)
        return null;
    let selection = pop.selection.resolve(pop.transform.doc);
    let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
    let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0, -1);
    return pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist });
}
let cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
// Check whether any plugin in the given state has a
// `historyPreserveItems` property in its spec, in which case we must
// preserve steps exactly as they came in, so that they can be
// rebased.
function mustPreserveItems(state) {
    let plugins = state.plugins;
    if (cachedPreserveItemsPlugins != plugins) {
        cachedPreserveItems = false;
        cachedPreserveItemsPlugins = plugins;
        for (let i = 0; i < plugins.length; i++)
            if (plugins[i].spec.historyPreserveItems) {
                cachedPreserveItems = true;
                break;
            }
    }
    return cachedPreserveItems;
}
const historyKey = new PluginKey("history");
const closeHistoryKey = new PluginKey("closeHistory");
/**
Returns a plugin that enables the undo history for an editor. The
plugin will track undo and redo stacks, which can be used with the
[`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.

You can set an `"addToHistory"` [metadata
property](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction
to prevent it from being rolled back by undo.
*/
function history(config = {}) {
    config = { depth: config.depth || 100,
        newGroupDelay: config.newGroupDelay || 500 };
    return new Plugin({
        key: historyKey,
        state: {
            init() {
                return new HistoryState(Branch.empty, Branch.empty, null, 0, -1);
            },
            apply(tr, hist, state) {
                return applyTransaction(hist, state, tr, config);
            }
        },
        config,
        props: {
            handleDOMEvents: {
                beforeinput(view, e) {
                    let inputType = e.inputType;
                    let command = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
                    if (!command)
                        return false;
                    e.preventDefault();
                    return command(view.state, view.dispatch);
                }
            }
        }
    });
}
function buildCommand(redo, scroll) {
    return (state, dispatch) => {
        let hist = historyKey.getState(state);
        if (!hist || (redo ? hist.undone : hist.done).eventCount == 0)
            return false;
        if (dispatch) {
            let tr = histTransaction(hist, state, redo);
            if (tr)
                dispatch(scroll ? tr.scrollIntoView() : tr);
        }
        return true;
    };
}
/**
A command function that undoes the last change, if any.
*/
const undo = buildCommand(false, true);
/**
A command function that redoes the last undone change, if any.
*/
const redo = buildCommand(true, true);

var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};

var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: "\""
};

var mac$3 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

// Fill in the digit keys
for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

// The function keys
for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

// And the alphabetic keys
for (var i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}

// For each code that doesn't have a shift-equivalent, copy the base name
for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

function keyName(event) {
  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
  // On IE, shift effect is never included in `.key`.
  var ignoreKey = mac$3 && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
      ie && event.shiftKey && event.key && event.key.length == 1 ||
      event.key == "Unidentified";
  var name = (!ignoreKey && event.key) ||
    (event.shiftKey ? shift : base)[event.keyCode] ||
    event.key || "Unidentified";
  // Edge sometimes produces wrong names (Issue #3)
  if (name == "Esc") name = "Escape";
  if (name == "Del") name = "Delete";
  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
  if (name == "Left") name = "ArrowLeft";
  if (name == "Up") name = "ArrowUp";
  if (name == "Right") name = "ArrowRight";
  if (name == "Down") name = "ArrowDown";
  return name
}

const mac$2 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
function normalizeKeyName(name) {
    let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
    if (result == "Space")
        result = " ";
    let alt, ctrl, shift, meta;
    for (let i = 0; i < parts.length - 1; i++) {
        let mod = parts[i];
        if (/^(cmd|meta|m)$/i.test(mod))
            meta = true;
        else if (/^a(lt)?$/i.test(mod))
            alt = true;
        else if (/^(c|ctrl|control)$/i.test(mod))
            ctrl = true;
        else if (/^s(hift)?$/i.test(mod))
            shift = true;
        else if (/^mod$/i.test(mod)) {
            if (mac$2)
                meta = true;
            else
                ctrl = true;
        }
        else
            throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt)
        result = "Alt-" + result;
    if (ctrl)
        result = "Ctrl-" + result;
    if (meta)
        result = "Meta-" + result;
    if (shift)
        result = "Shift-" + result;
    return result;
}
function normalize$1(map) {
    let copy = Object.create(null);
    for (let prop in map)
        copy[normalizeKeyName(prop)] = map[prop];
    return copy;
}
function modifiers(name, event, shift = true) {
    if (event.altKey)
        name = "Alt-" + name;
    if (event.ctrlKey)
        name = "Ctrl-" + name;
    if (event.metaKey)
        name = "Meta-" + name;
    if (shift && event.shiftKey)
        name = "Shift-" + name;
    return name;
}
/**
Create a keymap plugin for the given set of bindings.

Bindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style
functions, which will be called with `(EditorState, dispatch,
EditorView)` arguments, and should return true when they've handled
the key. Note that the view argument isn't part of the command
protocol, but can be used as an escape hatch if a binding needs to
directly interact with the UI.

Key names may be strings like `"Shift-Ctrl-Enter"`—a key
identifier prefixed with zero or more modifiers. Key identifiers
are based on the strings that can appear in
[`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
Use lowercase letters to refer to letter keys (or uppercase letters
if you want shift to be held). You may use `"Space"` as an alias
for the `" "` name.

Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
`a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
`Meta-`) are recognized. For characters that are created by holding
shift, the `Shift-` prefix is implied, and should not be added
explicitly.

You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
other platforms.

You can add multiple keymap plugins to an editor. The order in
which they appear determines their precedence (the ones early in
the array get to dispatch first).
*/
function keymap(bindings) {
    return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
}
/**
Given a set of bindings (using the same format as
[`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown
handler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.
*/
function keydownHandler(bindings) {
    let map = normalize$1(bindings);
    return function (view, event) {
        let name = keyName(event), baseName, direct = map[modifiers(name, event)];
        if (direct && direct(view.state, view.dispatch, view))
            return true;
        // A character key
        if (name.length == 1 && name != " ") {
            if (event.shiftKey) {
                // In case the name was already modified by shift, try looking
                // it up without its shift modifier
                let noShift = map[modifiers(name, event, false)];
                if (noShift && noShift(view.state, view.dispatch, view))
                    return true;
            }
            if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                // Try falling back to the keyCode when there's a modifier
                // active or the character produced isn't ASCII, and our table
                // produces a different name from the the keyCode. See #668,
                // #1060
                let fromCode = map[modifiers(baseName, event)];
                if (fromCode && fromCode(view.state, view.dispatch, view))
                    return true;
            }
        }
        return false;
    };
}

/**
Gap cursor selections are represented using this class. Its
`$anchor` and `$head` properties both point at the cursor position.
*/
class GapCursor extends Selection {
    /**
    Create a gap cursor.
    */
    constructor($pos) {
        super($pos, $pos);
    }
    map(doc, mapping) {
        let $pos = doc.resolve(mapping.map(this.head));
        return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
    }
    content() { return Slice.empty; }
    eq(other) {
        return other instanceof GapCursor && other.head == this.head;
    }
    toJSON() {
        return { type: "gapcursor", pos: this.head };
    }
    /**
    @internal
    */
    static fromJSON(doc, json) {
        if (typeof json.pos != "number")
            throw new RangeError("Invalid input for GapCursor.fromJSON");
        return new GapCursor(doc.resolve(json.pos));
    }
    /**
    @internal
    */
    getBookmark() { return new GapBookmark(this.anchor); }
    /**
    @internal
    */
    static valid($pos) {
        let parent = $pos.parent;
        if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
            return false;
        let override = parent.type.spec.allowGapCursor;
        if (override != null)
            return override;
        let deflt = parent.contentMatchAt($pos.index()).defaultType;
        return deflt && deflt.isTextblock;
    }
    /**
    @internal
    */
    static findGapCursorFrom($pos, dir, mustMove = false) {
        search: for (;;) {
            if (!mustMove && GapCursor.valid($pos))
                return $pos;
            let pos = $pos.pos, next = null;
            // Scan up from this position
            for (let d = $pos.depth;; d--) {
                let parent = $pos.node(d);
                if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
                    next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
                    break;
                }
                else if (d == 0) {
                    return null;
                }
                pos += dir;
                let $cur = $pos.doc.resolve(pos);
                if (GapCursor.valid($cur))
                    return $cur;
            }
            // And then down into the next node
            for (;;) {
                let inside = dir > 0 ? next.firstChild : next.lastChild;
                if (!inside) {
                    if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
                        $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
                        mustMove = false;
                        continue search;
                    }
                    break;
                }
                next = inside;
                pos += dir;
                let $cur = $pos.doc.resolve(pos);
                if (GapCursor.valid($cur))
                    return $cur;
            }
            return null;
        }
    }
}
GapCursor.prototype.visible = false;
GapCursor.findFrom = GapCursor.findGapCursorFrom;
Selection.jsonID("gapcursor", GapCursor);
class GapBookmark {
    constructor(pos) {
        this.pos = pos;
    }
    map(mapping) {
        return new GapBookmark(mapping.map(this.pos));
    }
    resolve(doc) {
        let $pos = doc.resolve(this.pos);
        return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
    }
}
function closedBefore($pos) {
    for (let d = $pos.depth; d >= 0; d--) {
        let index = $pos.index(d), parent = $pos.node(d);
        // At the start of this parent, look at next one
        if (index == 0) {
            if (parent.type.spec.isolating)
                return true;
            continue;
        }
        // See if the node before (or its first ancestor) is closed
        for (let before = parent.child(index - 1);; before = before.lastChild) {
            if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)
                return true;
            if (before.inlineContent)
                return false;
        }
    }
    // Hit start of document
    return true;
}
function closedAfter($pos) {
    for (let d = $pos.depth; d >= 0; d--) {
        let index = $pos.indexAfter(d), parent = $pos.node(d);
        if (index == parent.childCount) {
            if (parent.type.spec.isolating)
                return true;
            continue;
        }
        for (let after = parent.child(index);; after = after.firstChild) {
            if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)
                return true;
            if (after.inlineContent)
                return false;
        }
    }
    return true;
}

/**
Create a gap cursor plugin. When enabled, this will capture clicks
near and arrow-key-motion past places that don't have a normally
selectable position nearby, and create a gap cursor selection for
them. The cursor is drawn as an element with class
`ProseMirror-gapcursor`. You can either include
`style/gapcursor.css` from the package's directory or add your own
styles to make it visible.
*/
function gapCursor() {
    return new Plugin({
        props: {
            decorations: drawGapCursor,
            createSelectionBetween(_view, $anchor, $head) {
                return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
            },
            handleClick,
            handleKeyDown: handleKeyDown$1,
            handleDOMEvents: { beforeinput: beforeinput }
        }
    });
}
const handleKeyDown$1 = keydownHandler({
    "ArrowLeft": arrow$1("horiz", -1),
    "ArrowRight": arrow$1("horiz", 1),
    "ArrowUp": arrow$1("vert", -1),
    "ArrowDown": arrow$1("vert", 1)
});
function arrow$1(axis, dir) {
    const dirStr = axis == "vert" ? (dir > 0 ? "down" : "up") : (dir > 0 ? "right" : "left");
    return function (state, dispatch, view) {
        let sel = state.selection;
        let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
        if (sel instanceof TextSelection) {
            if (!view.endOfTextblock(dirStr) || $start.depth == 0)
                return false;
            mustMove = false;
            $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
        }
        let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
        if (!$found)
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(new GapCursor($found)));
        return true;
    };
}
function handleClick(view, pos, event) {
    if (!view || !view.editable)
        return false;
    let $pos = view.state.doc.resolve(pos);
    if (!GapCursor.valid($pos))
        return false;
    let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
    if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
        return false;
    view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
    return true;
}
// This is a hack that, when a composition starts while a gap cursor
// is active, quickly creates an inline context for the composition to
// happen in, to avoid it being aborted by the DOM selection being
// moved into a valid position.
function beforeinput(view, event) {
    if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
        return false;
    let { $from } = view.state.selection;
    let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
    if (!insert)
        return false;
    let frag = Fragment.empty;
    for (let i = insert.length - 1; i >= 0; i--)
        frag = Fragment.from(insert[i].createAndFill(null, frag));
    let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
    tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
    view.dispatch(tr);
    return false;
}
function drawGapCursor(state) {
    if (!(state.selection instanceof GapCursor))
        return null;
    let node = document.createElement("div");
    node.className = "ProseMirror-gapcursor";
    return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
}

/**
Delete the selection, if there is one.
*/
const deleteSelection = (state, dispatch) => {
    if (state.selection.empty)
        return false;
    if (dispatch)
        dispatch(state.tr.deleteSelection().scrollIntoView());
    return true;
};
function atBlockStart(state, view) {
    let { $cursor } = state.selection;
    if (!$cursor || (view ? !view.endOfTextblock("backward", state)
        : $cursor.parentOffset > 0))
        return null;
    return $cursor;
}
/**
If the selection is empty and at the start of a textblock, try to
reduce the distance between that block and the one before it—if
there's a block directly before it that can be joined, join them.
If not, try to move the selected block closer to the next one in
the document structure by lifting it out of its parent or moving it
into a parent of the previous block. Will use the view for accurate
(bidi-aware) start-of-textblock detection if given.
*/
const joinBackward = (state, dispatch, view) => {
    let $cursor = atBlockStart(state, view);
    if (!$cursor)
        return false;
    let $cut = findCutBefore($cursor);
    // If there is no node before this, try to lift
    if (!$cut) {
        let range = $cursor.blockRange(), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    }
    let before = $cut.nodeBefore;
    // Apply the joining algorithm
    if (deleteBarrier(state, $cut, dispatch, -1))
        return true;
    // If the node below has no content and the node above is
    // selectable, delete the node below and select the one above.
    if ($cursor.parent.content.size == 0 &&
        (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
        for (let depth = $cursor.depth;; depth--) {
            let delStep = replaceStep(state.doc, $cursor.before(depth), $cursor.after(depth), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(before, "end")
                        ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
            if (depth == 1 || $cursor.node(depth - 1).childCount > 1)
                break;
        }
    }
    // If the node before is an atom, delete it
    if (before.isAtom && $cut.depth == $cursor.depth - 1) {
        if (dispatch)
            dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
        return true;
    }
    return false;
};
function textblockAt(node, side, only = false) {
    for (let scan = node; scan; scan = (side == "start" ? scan.firstChild : scan.lastChild)) {
        if (scan.isTextblock)
            return true;
        if (only && scan.childCount != 1)
            return false;
    }
    return false;
}
/**
When the selection is empty and at the start of a textblock, select
the node before that textblock, if possible. This is intended to be
bound to keys like backspace, after
[`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting
commands, as a fall-back behavior when the schema doesn't allow
deletion at the selected point.
*/
const selectNodeBackward = (state, dispatch, view) => {
    let { $head, empty } = state.selection, $cut = $head;
    if (!empty)
        return false;
    if ($head.parent.isTextblock) {
        if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
            return false;
        $cut = findCutBefore($head);
    }
    let node = $cut && $cut.nodeBefore;
    if (!node || !NodeSelection.isSelectable(node))
        return false;
    if (dispatch)
        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
    return true;
};
function findCutBefore($pos) {
    if (!$pos.parent.type.spec.isolating)
        for (let i = $pos.depth - 1; i >= 0; i--) {
            if ($pos.index(i) > 0)
                return $pos.doc.resolve($pos.before(i + 1));
            if ($pos.node(i).type.spec.isolating)
                break;
        }
    return null;
}
function atBlockEnd(state, view) {
    let { $cursor } = state.selection;
    if (!$cursor || (view ? !view.endOfTextblock("forward", state)
        : $cursor.parentOffset < $cursor.parent.content.size))
        return null;
    return $cursor;
}
/**
If the selection is empty and the cursor is at the end of a
textblock, try to reduce or remove the boundary between that block
and the one after it, either by joining them or by moving the other
block closer to this one in the tree structure. Will use the view
for accurate start-of-textblock detection if given.
*/
const joinForward = (state, dispatch, view) => {
    let $cursor = atBlockEnd(state, view);
    if (!$cursor)
        return false;
    let $cut = findCutAfter($cursor);
    // If there is no node after this, there's nothing to do
    if (!$cut)
        return false;
    let after = $cut.nodeAfter;
    // Try the joining algorithm
    if (deleteBarrier(state, $cut, dispatch, 1))
        return true;
    // If the node above has no content and the node below is
    // selectable, delete the node above and select the one below.
    if ($cursor.parent.content.size == 0 &&
        (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
        let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
        if (delStep && delStep.slice.size < delStep.to - delStep.from) {
            if (dispatch) {
                let tr = state.tr.step(delStep);
                tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                    : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
    }
    // If the next node is an atom, delete it
    if (after.isAtom && $cut.depth == $cursor.depth - 1) {
        if (dispatch)
            dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
        return true;
    }
    return false;
};
/**
When the selection is empty and at the end of a textblock, select
the node coming after that textblock, if possible. This is intended
to be bound to keys like delete, after
[`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting
commands, to provide a fall-back behavior when the schema doesn't
allow deletion at the selected point.
*/
const selectNodeForward = (state, dispatch, view) => {
    let { $head, empty } = state.selection, $cut = $head;
    if (!empty)
        return false;
    if ($head.parent.isTextblock) {
        if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
            return false;
        $cut = findCutAfter($head);
    }
    let node = $cut && $cut.nodeAfter;
    if (!node || !NodeSelection.isSelectable(node))
        return false;
    if (dispatch)
        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
    return true;
};
function findCutAfter($pos) {
    if (!$pos.parent.type.spec.isolating)
        for (let i = $pos.depth - 1; i >= 0; i--) {
            let parent = $pos.node(i);
            if ($pos.index(i) + 1 < parent.childCount)
                return $pos.doc.resolve($pos.after(i + 1));
            if (parent.type.spec.isolating)
                break;
        }
    return null;
}
/**
Join the selected block or, if there is a text selection, the
closest ancestor block of the selection that can be joined, with
the sibling above it.
*/
const joinUp = (state, dispatch) => {
    let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;
    if (nodeSel) {
        if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
            return false;
        point = sel.from;
    }
    else {
        point = joinPoint(state.doc, sel.from, -1);
        if (point == null)
            return false;
    }
    if (dispatch) {
        let tr = state.tr.join(point);
        if (nodeSel)
            tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
        dispatch(tr.scrollIntoView());
    }
    return true;
};
/**
Join the selected block, or the closest ancestor of the selection
that can be joined, with the sibling after it.
*/
const joinDown = (state, dispatch) => {
    let sel = state.selection, point;
    if (sel instanceof NodeSelection) {
        if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
            return false;
        point = sel.to;
    }
    else {
        point = joinPoint(state.doc, sel.to, 1);
        if (point == null)
            return false;
    }
    if (dispatch)
        dispatch(state.tr.join(point).scrollIntoView());
    return true;
};
/**
Lift the selected block, or the closest ancestor block of the
selection that can be lifted, out of its parent node.
*/
const lift = (state, dispatch) => {
    let { $from, $to } = state.selection;
    let range = $from.blockRange($to), target = range && liftTarget(range);
    if (target == null)
        return false;
    if (dispatch)
        dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
};
/**
If the selection is in a node whose type has a truthy
[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the
selection with a newline character.
*/
const newlineInCode = (state, dispatch) => {
    let { $head, $anchor } = state.selection;
    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
        return false;
    if (dispatch)
        dispatch(state.tr.insertText("\n").scrollIntoView());
    return true;
};
function defaultBlockAt(match) {
    for (let i = 0; i < match.edgeCount; i++) {
        let { type } = match.edge(i);
        if (type.isTextblock && !type.hasRequiredAttrs())
            return type;
    }
    return null;
}
/**
When the selection is in a node with a truthy
[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a
default block after the code block, and move the cursor there.
*/
const exitCode = (state, dispatch) => {
    let { $head, $anchor } = state.selection;
    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
        return false;
    let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
    if (!type || !above.canReplaceWith(after, after, type))
        return false;
    if (dispatch) {
        let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
        tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
        dispatch(tr.scrollIntoView());
    }
    return true;
};
/**
If a block node is selected, create an empty paragraph before (if
it is its parent's first child) or after it.
*/
const createParagraphNear = (state, dispatch) => {
    let sel = state.selection, { $from, $to } = sel;
    if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
        return false;
    let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
    if (!type || !type.isTextblock)
        return false;
    if (dispatch) {
        let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
        let tr = state.tr.insert(side, type.createAndFill());
        tr.setSelection(TextSelection.create(tr.doc, side + 1));
        dispatch(tr.scrollIntoView());
    }
    return true;
};
/**
If the cursor is in an empty textblock that can be lifted, lift the
block.
*/
const liftEmptyBlock = (state, dispatch) => {
    let { $cursor } = state.selection;
    if (!$cursor || $cursor.parent.content.size)
        return false;
    if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
        let before = $cursor.before();
        if (canSplit(state.doc, before)) {
            if (dispatch)
                dispatch(state.tr.split(before).scrollIntoView());
            return true;
        }
    }
    let range = $cursor.blockRange(), target = range && liftTarget(range);
    if (target == null)
        return false;
    if (dispatch)
        dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
};
/**
Create a variant of [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock) that uses
a custom function to determine the type of the newly split off block.
*/
function splitBlockAs(splitNode) {
    return (state, dispatch) => {
        let { $from, $to } = state.selection;
        if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
            if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
                return false;
            if (dispatch)
                dispatch(state.tr.split($from.pos).scrollIntoView());
            return true;
        }
        if (!$from.parent.isBlock)
            return false;
        if (dispatch) {
            let atEnd = $to.parentOffset == $to.parent.content.size;
            let tr = state.tr;
            if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
                tr.deleteSelection();
            let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
            let types = atEnd && deflt ? [{ type: deflt }] : undefined;
            let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
            if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                if (deflt)
                    types = [{ type: deflt }];
                can = true;
            }
            if (can) {
                tr.split(tr.mapping.map($from.pos), 1, types);
                if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
                    let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
                    if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
                        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                }
            }
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
}
/**
Split the parent block of the selection. If the selection is a text
selection, also delete its content.
*/
const splitBlock = splitBlockAs();
/**
Move the selection to the node wrapping the current selection, if
any. (Will not select the document node.)
*/
const selectParentNode = (state, dispatch) => {
    let { $from, to } = state.selection, pos;
    let same = $from.sharedDepth(to);
    if (same == 0)
        return false;
    pos = $from.before(same);
    if (dispatch)
        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
    return true;
};
/**
Select the whole document.
*/
const selectAll = (state, dispatch) => {
    if (dispatch)
        dispatch(state.tr.setSelection(new AllSelection(state.doc)));
    return true;
};
function joinMaybeClear(state, $pos, dispatch) {
    let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
    if (!before || !after || !before.type.compatibleContent(after.type))
        return false;
    if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
        if (dispatch)
            dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
        return true;
    }
    if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
        return false;
    if (dispatch)
        dispatch(state.tr
            .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
            .join($pos.pos)
            .scrollIntoView());
    return true;
}
function deleteBarrier(state, $cut, dispatch, dir) {
    let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
    let isolated = before.type.spec.isolating || after.type.spec.isolating;
    if (!isolated && joinMaybeClear(state, $cut, dispatch))
        return true;
    let canDelAfter = !isolated && $cut.parent.canReplace($cut.index(), $cut.index() + 1);
    if (canDelAfter &&
        (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
        match.matchType(conn[0] || after.type).validEnd) {
        if (dispatch) {
            let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;
            for (let i = conn.length - 1; i >= 0; i--)
                wrap = Fragment.from(conn[i].create(null, wrap));
            wrap = Fragment.from(before.copy(wrap));
            let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));
            let joinAt = end + 2 * conn.length;
            if (canJoin(tr.doc, joinAt))
                tr.join(joinAt);
            dispatch(tr.scrollIntoView());
        }
        return true;
    }
    let selAfter = after.type.spec.isolating || (dir > 0 && isolated) ? null : Selection.findFrom($cut, 1);
    let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
    if (target != null && target >= $cut.depth) {
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    }
    if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
        let at = before, wrap = [];
        for (;;) {
            wrap.push(at);
            if (at.isTextblock)
                break;
            at = at.lastChild;
        }
        let afterText = after, afterDepth = 1;
        for (; !afterText.isTextblock; afterText = afterText.firstChild)
            afterDepth++;
        if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
            if (dispatch) {
                let end = Fragment.empty;
                for (let i = wrap.length - 1; i >= 0; i--)
                    end = Fragment.from(wrap[i].copy(end));
                let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
    }
    return false;
}
function selectTextblockSide(side) {
    return function (state, dispatch) {
        let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
        let depth = $pos.depth;
        while ($pos.node(depth).isInline) {
            if (!depth)
                return false;
            depth--;
        }
        if (!$pos.node(depth).isTextblock)
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
        return true;
    };
}
/**
Moves the cursor to the start of current text block.
*/
const selectTextblockStart = selectTextblockSide(-1);
/**
Moves the cursor to the end of current text block.
*/
const selectTextblockEnd = selectTextblockSide(1);
// Parameterized commands
/**
Wrap the selection in a node of the given type with the given
attributes.
*/
function wrapIn(nodeType, attrs = null) {
    return function (state, dispatch) {
        let { $from, $to } = state.selection;
        let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
        if (!wrapping)
            return false;
        if (dispatch)
            dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
        return true;
    };
}
/**
Returns a command that tries to set the selected textblocks to the
given node type with the given attributes.
*/
function setBlockType(nodeType, attrs = null) {
    return function (state, dispatch) {
        let applicable = false;
        for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
            let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
            state.doc.nodesBetween(from, to, (node, pos) => {
                if (applicable)
                    return false;
                if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
                    return;
                if (node.type == nodeType) {
                    applicable = true;
                }
                else {
                    let $pos = state.doc.resolve(pos), index = $pos.index();
                    applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                }
            });
        }
        if (!applicable)
            return false;
        if (dispatch) {
            let tr = state.tr;
            for (let i = 0; i < state.selection.ranges.length; i++) {
                let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
                tr.setBlockType(from, to, nodeType, attrs);
            }
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
}
function markApplies(doc, ranges, type, enterAtoms) {
    for (let i = 0; i < ranges.length; i++) {
        let { $from, $to } = ranges[i];
        let can = $from.depth == 0 ? doc.inlineContent && doc.type.allowsMarkType(type) : false;
        doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
            if (can || !enterAtoms)
                return false;
            can = node.inlineContent && node.type.allowsMarkType(type);
        });
        if (can)
            return true;
    }
    return false;
}
/**
Create a command function that toggles the given mark with the
given attributes. Will return `false` when the current selection
doesn't support that mark. This will remove the mark if any marks
of that type exist in the selection, or add it otherwise. If the
selection is empty, this applies to the [stored
marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the
document.
*/
function toggleMark(markType, attrs = null, options) {
    let enterAtoms = (options) !== false;
    return function (state, dispatch) {
        let { empty, $cursor, ranges } = state.selection;
        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType, enterAtoms))
            return false;
        if (dispatch) {
            if ($cursor) {
                if (markType.isInSet(state.storedMarks || $cursor.marks()))
                    dispatch(state.tr.removeStoredMark(markType));
                else
                    dispatch(state.tr.addStoredMark(markType.create(attrs)));
            }
            else {
                let add, tr = state.tr;
                {
                    add = !ranges.some(r => state.doc.rangeHasMark(r.$from.pos, r.$to.pos, markType));
                }
                for (let i = 0; i < ranges.length; i++) {
                    let { $from, $to } = ranges[i];
                    if (!add) {
                        tr.removeMark($from.pos, $to.pos, markType);
                    }
                    else {
                        let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;
                        let spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
                        let spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
                        if (from + spaceStart < to) {
                            from += spaceStart;
                            to -= spaceEnd;
                        }
                        tr.addMark(from, to, markType.create(attrs));
                    }
                }
                dispatch(tr.scrollIntoView());
            }
        }
        return true;
    };
}
/**
Combine a number of command functions into a single function (which
calls them one by one until one returns true).
*/
function chainCommands(...commands) {
    return function (state, dispatch, view) {
        for (let i = 0; i < commands.length; i++)
            if (commands[i](state, dispatch, view))
                return true;
        return false;
    };
}
let backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
let del = chainCommands(deleteSelection, joinForward, selectNodeForward);
/**
A basic keymap containing bindings not specific to any schema.
Binds the following keys (when multiple commands are listed, they
are chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):

* **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
* **Mod-Enter** to `exitCode`
* **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
* **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
* **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
* **Mod-a** to `selectAll`
*/
const pcBaseKeymap = {
    "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
    "Mod-Enter": exitCode,
    "Backspace": backspace,
    "Mod-Backspace": backspace,
    "Shift-Backspace": backspace,
    "Delete": del,
    "Mod-Delete": del,
    "Mod-a": selectAll
};
/**
A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
**Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
**Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
Ctrl-Delete.
*/
const macBaseKeymap = {
    "Ctrl-h": pcBaseKeymap["Backspace"],
    "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
    "Ctrl-d": pcBaseKeymap["Delete"],
    "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
    "Alt-Delete": pcBaseKeymap["Mod-Delete"],
    "Alt-d": pcBaseKeymap["Mod-Delete"],
    "Ctrl-a": selectTextblockStart,
    "Ctrl-e": selectTextblockEnd
};
for (let key in pcBaseKeymap)
    macBaseKeymap[key] = pcBaseKeymap[key];
const mac$1 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
    // @ts-ignore
    : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
/**
Depending on the detected platform, this will hold
[`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or
[`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).
*/
const baseKeymap = mac$1 ? macBaseKeymap : pcBaseKeymap;

// src/index.ts

// src/tablemap.ts
var readFromCache;
var addToCache;
if (typeof WeakMap != "undefined") {
  let cache = /* @__PURE__ */ new WeakMap();
  readFromCache = (key) => cache.get(key);
  addToCache = (key, value) => {
    cache.set(key, value);
    return value;
  };
} else {
  const cache = [];
  const cacheSize = 10;
  let cachePos = 0;
  readFromCache = (key) => {
    for (let i = 0; i < cache.length; i += 2)
      if (cache[i] == key)
        return cache[i + 1];
  };
  addToCache = (key, value) => {
    if (cachePos == cacheSize)
      cachePos = 0;
    cache[cachePos++] = key;
    return cache[cachePos++] = value;
  };
}
var TableMap = class {
  constructor(width, height, map, problems) {
    this.width = width;
    this.height = height;
    this.map = map;
    this.problems = problems;
  }
  // Find the dimensions of the cell at the given position.
  findCell(pos) {
    for (let i = 0; i < this.map.length; i++) {
      const curPos = this.map[i];
      if (curPos != pos)
        continue;
      const left = i % this.width;
      const top = i / this.width | 0;
      let right = left + 1;
      let bottom = top + 1;
      for (let j = 1; right < this.width && this.map[i + j] == curPos; j++) {
        right++;
      }
      for (let j = 1; bottom < this.height && this.map[i + this.width * j] == curPos; j++) {
        bottom++;
      }
      return { left, top, right, bottom };
    }
    throw new RangeError(`No cell with offset ${pos} found`);
  }
  // Find the left side of the cell at the given position.
  colCount(pos) {
    for (let i = 0; i < this.map.length; i++) {
      if (this.map[i] == pos) {
        return i % this.width;
      }
    }
    throw new RangeError(`No cell with offset ${pos} found`);
  }
  // Find the next cell in the given direction, starting from the cell
  // at `pos`, if any.
  nextCell(pos, axis, dir) {
    const { left, right, top, bottom } = this.findCell(pos);
    if (axis == "horiz") {
      if (dir < 0 ? left == 0 : right == this.width)
        return null;
      return this.map[top * this.width + (dir < 0 ? left - 1 : right)];
    } else {
      if (dir < 0 ? top == 0 : bottom == this.height)
        return null;
      return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)];
    }
  }
  // Get the rectangle spanning the two given cells.
  rectBetween(a, b) {
    const {
      left: leftA,
      right: rightA,
      top: topA,
      bottom: bottomA
    } = this.findCell(a);
    const {
      left: leftB,
      right: rightB,
      top: topB,
      bottom: bottomB
    } = this.findCell(b);
    return {
      left: Math.min(leftA, leftB),
      top: Math.min(topA, topB),
      right: Math.max(rightA, rightB),
      bottom: Math.max(bottomA, bottomB)
    };
  }
  // Return the position of all cells that have the top left corner in
  // the given rectangle.
  cellsInRect(rect) {
    const result = [];
    const seen = {};
    for (let row = rect.top; row < rect.bottom; row++) {
      for (let col = rect.left; col < rect.right; col++) {
        const index = row * this.width + col;
        const pos = this.map[index];
        if (seen[pos])
          continue;
        seen[pos] = true;
        if (col == rect.left && col && this.map[index - 1] == pos || row == rect.top && row && this.map[index - this.width] == pos) {
          continue;
        }
        result.push(pos);
      }
    }
    return result;
  }
  // Return the position at which the cell at the given row and column
  // starts, or would start, if a cell started there.
  positionAt(row, col, table) {
    for (let i = 0, rowStart = 0; ; i++) {
      const rowEnd = rowStart + table.child(i).nodeSize;
      if (i == row) {
        let index = col + row * this.width;
        const rowEndIndex = (row + 1) * this.width;
        while (index < rowEndIndex && this.map[index] < rowStart)
          index++;
        return index == rowEndIndex ? rowEnd - 1 : this.map[index];
      }
      rowStart = rowEnd;
    }
  }
  // Find the table map for the given table node.
  static get(table) {
    return readFromCache(table) || addToCache(table, computeMap(table));
  }
};
function computeMap(table) {
  if (table.type.spec.tableRole != "table")
    throw new RangeError("Not a table node: " + table.type.name);
  const width = findWidth(table), height = table.childCount;
  const map = [];
  let mapPos = 0;
  let problems = null;
  const colWidths = [];
  for (let i = 0, e = width * height; i < e; i++)
    map[i] = 0;
  for (let row = 0, pos = 0; row < height; row++) {
    const rowNode = table.child(row);
    pos++;
    for (let i = 0; ; i++) {
      while (mapPos < map.length && map[mapPos] != 0)
        mapPos++;
      if (i == rowNode.childCount)
        break;
      const cellNode = rowNode.child(i);
      const { colspan, rowspan, colwidth } = cellNode.attrs;
      for (let h = 0; h < rowspan; h++) {
        if (h + row >= height) {
          (problems || (problems = [])).push({
            type: "overlong_rowspan",
            pos,
            n: rowspan - h
          });
          break;
        }
        const start = mapPos + h * width;
        for (let w = 0; w < colspan; w++) {
          if (map[start + w] == 0)
            map[start + w] = pos;
          else
            (problems || (problems = [])).push({
              type: "collision",
              row,
              pos,
              n: colspan - w
            });
          const colW = colwidth && colwidth[w];
          if (colW) {
            const widthIndex = (start + w) % width * 2, prev = colWidths[widthIndex];
            if (prev == null || prev != colW && colWidths[widthIndex + 1] == 1) {
              colWidths[widthIndex] = colW;
              colWidths[widthIndex + 1] = 1;
            } else if (prev == colW) {
              colWidths[widthIndex + 1]++;
            }
          }
        }
      }
      mapPos += colspan;
      pos += cellNode.nodeSize;
    }
    const expectedPos = (row + 1) * width;
    let missing = 0;
    while (mapPos < expectedPos)
      if (map[mapPos++] == 0)
        missing++;
    if (missing)
      (problems || (problems = [])).push({ type: "missing", row, n: missing });
    pos++;
  }
  const tableMap = new TableMap(width, height, map, problems);
  let badWidths = false;
  for (let i = 0; !badWidths && i < colWidths.length; i += 2)
    if (colWidths[i] != null && colWidths[i + 1] < height)
      badWidths = true;
  if (badWidths)
    findBadColWidths(tableMap, colWidths, table);
  return tableMap;
}
function findWidth(table) {
  let width = -1;
  let hasRowSpan = false;
  for (let row = 0; row < table.childCount; row++) {
    const rowNode = table.child(row);
    let rowWidth = 0;
    if (hasRowSpan)
      for (let j = 0; j < row; j++) {
        const prevRow = table.child(j);
        for (let i = 0; i < prevRow.childCount; i++) {
          const cell = prevRow.child(i);
          if (j + cell.attrs.rowspan > row)
            rowWidth += cell.attrs.colspan;
        }
      }
    for (let i = 0; i < rowNode.childCount; i++) {
      const cell = rowNode.child(i);
      rowWidth += cell.attrs.colspan;
      if (cell.attrs.rowspan > 1)
        hasRowSpan = true;
    }
    if (width == -1)
      width = rowWidth;
    else if (width != rowWidth)
      width = Math.max(width, rowWidth);
  }
  return width;
}
function findBadColWidths(map, colWidths, table) {
  if (!map.problems)
    map.problems = [];
  const seen = {};
  for (let i = 0; i < map.map.length; i++) {
    const pos = map.map[i];
    if (seen[pos])
      continue;
    seen[pos] = true;
    const node = table.nodeAt(pos);
    if (!node) {
      throw new RangeError(`No cell with offset ${pos} found`);
    }
    let updated = null;
    const attrs = node.attrs;
    for (let j = 0; j < attrs.colspan; j++) {
      const col = (i + j) % map.width;
      const colWidth = colWidths[col * 2];
      if (colWidth != null && (!attrs.colwidth || attrs.colwidth[j] != colWidth))
        (updated || (updated = freshColWidth(attrs)))[j] = colWidth;
    }
    if (updated)
      map.problems.unshift({
        type: "colwidth mismatch",
        pos,
        colwidth: updated
      });
  }
}
function freshColWidth(attrs) {
  if (attrs.colwidth)
    return attrs.colwidth.slice();
  const result = [];
  for (let i = 0; i < attrs.colspan; i++)
    result.push(0);
  return result;
}
function tableNodeTypes(schema) {
  let result = schema.cached.tableNodeTypes;
  if (!result) {
    result = schema.cached.tableNodeTypes = {};
    for (const name in schema.nodes) {
      const type = schema.nodes[name], role = type.spec.tableRole;
      if (role)
        result[role] = type;
    }
  }
  return result;
}

// src/util.ts
var tableEditingKey = new PluginKey("selectingCells");
function cellAround($pos) {
  for (let d = $pos.depth - 1; d > 0; d--)
    if ($pos.node(d).type.spec.tableRole == "row")
      return $pos.node(0).resolve($pos.before(d + 1));
  return null;
}
function cellWrapping($pos) {
  for (let d = $pos.depth; d > 0; d--) {
    const role = $pos.node(d).type.spec.tableRole;
    if (role === "cell" || role === "header_cell")
      return $pos.node(d);
  }
  return null;
}
function isInTable(state) {
  const $head = state.selection.$head;
  for (let d = $head.depth; d > 0; d--)
    if ($head.node(d).type.spec.tableRole == "row")
      return true;
  return false;
}
function selectionCell(state) {
  const sel = state.selection;
  if ("$anchorCell" in sel && sel.$anchorCell) {
    return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;
  } else if ("node" in sel && sel.node && sel.node.type.spec.tableRole == "cell") {
    return sel.$anchor;
  }
  const $cell = cellAround(sel.$head) || cellNear(sel.$head);
  if ($cell) {
    return $cell;
  }
  throw new RangeError(`No cell found around position ${sel.head}`);
}
function cellNear($pos) {
  for (let after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++) {
    const role = after.type.spec.tableRole;
    if (role == "cell" || role == "header_cell")
      return $pos.doc.resolve(pos);
  }
  for (let before = $pos.nodeBefore, pos = $pos.pos; before; before = before.lastChild, pos--) {
    const role = before.type.spec.tableRole;
    if (role == "cell" || role == "header_cell")
      return $pos.doc.resolve(pos - before.nodeSize);
  }
}
function pointsAtCell($pos) {
  return $pos.parent.type.spec.tableRole == "row" && !!$pos.nodeAfter;
}
function moveCellForward($pos) {
  return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);
}
function inSameTable($cellA, $cellB) {
  return $cellA.depth == $cellB.depth && $cellA.pos >= $cellB.start(-1) && $cellA.pos <= $cellB.end(-1);
}
function nextCell($pos, axis, dir) {
  const table = $pos.node(-1);
  const map = TableMap.get(table);
  const tableStart = $pos.start(-1);
  const moved = map.nextCell($pos.pos - tableStart, axis, dir);
  return moved == null ? null : $pos.node(0).resolve(tableStart + moved);
}
function removeColSpan(attrs, pos, n = 1) {
  const result = { ...attrs, colspan: attrs.colspan - n };
  if (result.colwidth) {
    result.colwidth = result.colwidth.slice();
    result.colwidth.splice(pos, n);
    if (!result.colwidth.some((w) => w > 0))
      result.colwidth = null;
  }
  return result;
}
function addColSpan(attrs, pos, n = 1) {
  const result = { ...attrs, colspan: attrs.colspan + n };
  if (result.colwidth) {
    result.colwidth = result.colwidth.slice();
    for (let i = 0; i < n; i++)
      result.colwidth.splice(pos, 0, 0);
  }
  return result;
}
function columnIsHeader(map, table, col) {
  const headerCell = tableNodeTypes(table.type.schema).header_cell;
  for (let row = 0; row < map.height; row++)
    if (table.nodeAt(map.map[col + row * map.width]).type != headerCell)
      return false;
  return true;
}

// src/cellselection.ts
var CellSelection = class _CellSelection extends Selection {
  // A table selection is identified by its anchor and head cells. The
  // positions given to this constructor should point _before_ two
  // cells in the same table. They may be the same, to select a single
  // cell.
  constructor($anchorCell, $headCell = $anchorCell) {
    const table = $anchorCell.node(-1);
    const map = TableMap.get(table);
    const tableStart = $anchorCell.start(-1);
    const rect = map.rectBetween(
      $anchorCell.pos - tableStart,
      $headCell.pos - tableStart
    );
    const doc = $anchorCell.node(0);
    const cells = map.cellsInRect(rect).filter((p) => p != $headCell.pos - tableStart);
    cells.unshift($headCell.pos - tableStart);
    const ranges = cells.map((pos) => {
      const cell = table.nodeAt(pos);
      if (!cell) {
        throw RangeError(`No cell with offset ${pos} found`);
      }
      const from = tableStart + pos + 1;
      return new SelectionRange(
        doc.resolve(from),
        doc.resolve(from + cell.content.size)
      );
    });
    super(ranges[0].$from, ranges[0].$to, ranges);
    this.$anchorCell = $anchorCell;
    this.$headCell = $headCell;
  }
  map(doc, mapping) {
    const $anchorCell = doc.resolve(mapping.map(this.$anchorCell.pos));
    const $headCell = doc.resolve(mapping.map(this.$headCell.pos));
    if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {
      const tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);
      if (tableChanged && this.isRowSelection())
        return _CellSelection.rowSelection($anchorCell, $headCell);
      else if (tableChanged && this.isColSelection())
        return _CellSelection.colSelection($anchorCell, $headCell);
      else
        return new _CellSelection($anchorCell, $headCell);
    }
    return TextSelection.between($anchorCell, $headCell);
  }
  // Returns a rectangular slice of table rows containing the selected
  // cells.
  content() {
    const table = this.$anchorCell.node(-1);
    const map = TableMap.get(table);
    const tableStart = this.$anchorCell.start(-1);
    const rect = map.rectBetween(
      this.$anchorCell.pos - tableStart,
      this.$headCell.pos - tableStart
    );
    const seen = {};
    const rows = [];
    for (let row = rect.top; row < rect.bottom; row++) {
      const rowContent = [];
      for (let index = row * map.width + rect.left, col = rect.left; col < rect.right; col++, index++) {
        const pos = map.map[index];
        if (seen[pos])
          continue;
        seen[pos] = true;
        const cellRect = map.findCell(pos);
        let cell = table.nodeAt(pos);
        if (!cell) {
          throw RangeError(`No cell with offset ${pos} found`);
        }
        const extraLeft = rect.left - cellRect.left;
        const extraRight = cellRect.right - rect.right;
        if (extraLeft > 0 || extraRight > 0) {
          let attrs = cell.attrs;
          if (extraLeft > 0) {
            attrs = removeColSpan(attrs, 0, extraLeft);
          }
          if (extraRight > 0) {
            attrs = removeColSpan(
              attrs,
              attrs.colspan - extraRight,
              extraRight
            );
          }
          if (cellRect.left < rect.left) {
            cell = cell.type.createAndFill(attrs);
            if (!cell) {
              throw RangeError(
                `Could not create cell with attrs ${JSON.stringify(attrs)}`
              );
            }
          } else {
            cell = cell.type.create(attrs, cell.content);
          }
        }
        if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {
          const attrs = {
            ...cell.attrs,
            rowspan: Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top)
          };
          if (cellRect.top < rect.top) {
            cell = cell.type.createAndFill(attrs);
          } else {
            cell = cell.type.create(attrs, cell.content);
          }
        }
        rowContent.push(cell);
      }
      rows.push(table.child(row).copy(Fragment.from(rowContent)));
    }
    const fragment = this.isColSelection() && this.isRowSelection() ? table : rows;
    return new Slice(Fragment.from(fragment), 1, 1);
  }
  replace(tr, content = Slice.empty) {
    const mapFrom = tr.steps.length, ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++) {
      const { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
      tr.replace(
        mapping.map($from.pos),
        mapping.map($to.pos),
        i ? Slice.empty : content
      );
    }
    const sel = Selection.findFrom(
      tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)),
      -1
    );
    if (sel)
      tr.setSelection(sel);
  }
  replaceWith(tr, node) {
    this.replace(tr, new Slice(Fragment.from(node), 0, 0));
  }
  forEachCell(f) {
    const table = this.$anchorCell.node(-1);
    const map = TableMap.get(table);
    const tableStart = this.$anchorCell.start(-1);
    const cells = map.cellsInRect(
      map.rectBetween(
        this.$anchorCell.pos - tableStart,
        this.$headCell.pos - tableStart
      )
    );
    for (let i = 0; i < cells.length; i++) {
      f(table.nodeAt(cells[i]), tableStart + cells[i]);
    }
  }
  // True if this selection goes all the way from the top to the
  // bottom of the table.
  isColSelection() {
    const anchorTop = this.$anchorCell.index(-1);
    const headTop = this.$headCell.index(-1);
    if (Math.min(anchorTop, headTop) > 0)
      return false;
    const anchorBottom = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan;
    const headBottom = headTop + this.$headCell.nodeAfter.attrs.rowspan;
    return Math.max(anchorBottom, headBottom) == this.$headCell.node(-1).childCount;
  }
  // Returns the smallest column selection that covers the given anchor
  // and head cell.
  static colSelection($anchorCell, $headCell = $anchorCell) {
    const table = $anchorCell.node(-1);
    const map = TableMap.get(table);
    const tableStart = $anchorCell.start(-1);
    const anchorRect = map.findCell($anchorCell.pos - tableStart);
    const headRect = map.findCell($headCell.pos - tableStart);
    const doc = $anchorCell.node(0);
    if (anchorRect.top <= headRect.top) {
      if (anchorRect.top > 0)
        $anchorCell = doc.resolve(tableStart + map.map[anchorRect.left]);
      if (headRect.bottom < map.height)
        $headCell = doc.resolve(
          tableStart + map.map[map.width * (map.height - 1) + headRect.right - 1]
        );
    } else {
      if (headRect.top > 0)
        $headCell = doc.resolve(tableStart + map.map[headRect.left]);
      if (anchorRect.bottom < map.height)
        $anchorCell = doc.resolve(
          tableStart + map.map[map.width * (map.height - 1) + anchorRect.right - 1]
        );
    }
    return new _CellSelection($anchorCell, $headCell);
  }
  // True if this selection goes all the way from the left to the
  // right of the table.
  isRowSelection() {
    const table = this.$anchorCell.node(-1);
    const map = TableMap.get(table);
    const tableStart = this.$anchorCell.start(-1);
    const anchorLeft = map.colCount(this.$anchorCell.pos - tableStart);
    const headLeft = map.colCount(this.$headCell.pos - tableStart);
    if (Math.min(anchorLeft, headLeft) > 0)
      return false;
    const anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan;
    const headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;
    return Math.max(anchorRight, headRight) == map.width;
  }
  eq(other) {
    return other instanceof _CellSelection && other.$anchorCell.pos == this.$anchorCell.pos && other.$headCell.pos == this.$headCell.pos;
  }
  // Returns the smallest row selection that covers the given anchor
  // and head cell.
  static rowSelection($anchorCell, $headCell = $anchorCell) {
    const table = $anchorCell.node(-1);
    const map = TableMap.get(table);
    const tableStart = $anchorCell.start(-1);
    const anchorRect = map.findCell($anchorCell.pos - tableStart);
    const headRect = map.findCell($headCell.pos - tableStart);
    const doc = $anchorCell.node(0);
    if (anchorRect.left <= headRect.left) {
      if (anchorRect.left > 0)
        $anchorCell = doc.resolve(
          tableStart + map.map[anchorRect.top * map.width]
        );
      if (headRect.right < map.width)
        $headCell = doc.resolve(
          tableStart + map.map[map.width * (headRect.top + 1) - 1]
        );
    } else {
      if (headRect.left > 0)
        $headCell = doc.resolve(tableStart + map.map[headRect.top * map.width]);
      if (anchorRect.right < map.width)
        $anchorCell = doc.resolve(
          tableStart + map.map[map.width * (anchorRect.top + 1) - 1]
        );
    }
    return new _CellSelection($anchorCell, $headCell);
  }
  toJSON() {
    return {
      type: "cell",
      anchor: this.$anchorCell.pos,
      head: this.$headCell.pos
    };
  }
  static fromJSON(doc, json) {
    return new _CellSelection(doc.resolve(json.anchor), doc.resolve(json.head));
  }
  static create(doc, anchorCell, headCell = anchorCell) {
    return new _CellSelection(doc.resolve(anchorCell), doc.resolve(headCell));
  }
  getBookmark() {
    return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);
  }
};
CellSelection.prototype.visible = false;
Selection.jsonID("cell", CellSelection);
var CellBookmark = class _CellBookmark {
  constructor(anchor, head) {
    this.anchor = anchor;
    this.head = head;
  }
  map(mapping) {
    return new _CellBookmark(mapping.map(this.anchor), mapping.map(this.head));
  }
  resolve(doc) {
    const $anchorCell = doc.resolve(this.anchor), $headCell = doc.resolve(this.head);
    if ($anchorCell.parent.type.spec.tableRole == "row" && $headCell.parent.type.spec.tableRole == "row" && $anchorCell.index() < $anchorCell.parent.childCount && $headCell.index() < $headCell.parent.childCount && inSameTable($anchorCell, $headCell))
      return new CellSelection($anchorCell, $headCell);
    else
      return Selection.near($headCell, 1);
  }
};
function drawCellSelection(state) {
  if (!(state.selection instanceof CellSelection))
    return null;
  const cells = [];
  state.selection.forEachCell((node, pos) => {
    cells.push(
      Decoration.node(pos, pos + node.nodeSize, { class: "selectedCell" })
    );
  });
  return DecorationSet.create(state.doc, cells);
}
function isCellBoundarySelection({ $from, $to }) {
  if ($from.pos == $to.pos || $from.pos < $from.pos - 6)
    return false;
  let afterFrom = $from.pos;
  let beforeTo = $to.pos;
  let depth = $from.depth;
  for (; depth >= 0; depth--, afterFrom++)
    if ($from.after(depth + 1) < $from.end(depth))
      break;
  for (let d = $to.depth; d >= 0; d--, beforeTo--)
    if ($to.before(d + 1) > $to.start(d))
      break;
  return afterFrom == beforeTo && /row|table/.test($from.node(depth).type.spec.tableRole);
}
function isTextSelectionAcrossCells({ $from, $to }) {
  let fromCellBoundaryNode;
  let toCellBoundaryNode;
  for (let i = $from.depth; i > 0; i--) {
    const node = $from.node(i);
    if (node.type.spec.tableRole === "cell" || node.type.spec.tableRole === "header_cell") {
      fromCellBoundaryNode = node;
      break;
    }
  }
  for (let i = $to.depth; i > 0; i--) {
    const node = $to.node(i);
    if (node.type.spec.tableRole === "cell" || node.type.spec.tableRole === "header_cell") {
      toCellBoundaryNode = node;
      break;
    }
  }
  return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;
}
function normalizeSelection(state, tr, allowTableNodeSelection) {
  const sel = (tr || state).selection;
  const doc = (tr || state).doc;
  let normalize;
  let role;
  if (sel instanceof NodeSelection && (role = sel.node.type.spec.tableRole)) {
    if (role == "cell" || role == "header_cell") {
      normalize = CellSelection.create(doc, sel.from);
    } else if (role == "row") {
      const $cell = doc.resolve(sel.from + 1);
      normalize = CellSelection.rowSelection($cell, $cell);
    } else if (!allowTableNodeSelection) {
      const map = TableMap.get(sel.node);
      const start = sel.from + 1;
      const lastCell = start + map.map[map.width * map.height - 1];
      normalize = CellSelection.create(doc, start + 1, lastCell);
    }
  } else if (sel instanceof TextSelection && isCellBoundarySelection(sel)) {
    normalize = TextSelection.create(doc, sel.from);
  } else if (sel instanceof TextSelection && isTextSelectionAcrossCells(sel)) {
    normalize = TextSelection.create(doc, sel.$from.start(), sel.$from.end());
  }
  if (normalize)
    (tr || (tr = state.tr)).setSelection(normalize);
  return tr;
}
var fixTablesKey = new PluginKey("fix-tables");
function changedDescendants(old, cur, offset, f) {
  const oldSize = old.childCount, curSize = cur.childCount;
  outer:
    for (let i = 0, j = 0; i < curSize; i++) {
      const child = cur.child(i);
      for (let scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++) {
        if (old.child(scan) == child) {
          j = scan + 1;
          offset += child.nodeSize;
          continue outer;
        }
      }
      f(child, offset);
      if (j < oldSize && old.child(j).sameMarkup(child))
        changedDescendants(old.child(j), child, offset + 1, f);
      else
        child.nodesBetween(0, child.content.size, f, offset + 1);
      offset += child.nodeSize;
    }
}
function fixTables(state, oldState) {
  let tr;
  const check = (node, pos) => {
    if (node.type.spec.tableRole == "table")
      tr = fixTable(state, node, pos, tr);
  };
  if (!oldState)
    state.doc.descendants(check);
  else if (oldState.doc != state.doc)
    changedDescendants(oldState.doc, state.doc, 0, check);
  return tr;
}
function fixTable(state, table, tablePos, tr) {
  const map = TableMap.get(table);
  if (!map.problems)
    return tr;
  if (!tr)
    tr = state.tr;
  const mustAdd = [];
  for (let i = 0; i < map.height; i++)
    mustAdd.push(0);
  for (let i = 0; i < map.problems.length; i++) {
    const prob = map.problems[i];
    if (prob.type == "collision") {
      const cell = table.nodeAt(prob.pos);
      if (!cell)
        continue;
      const attrs = cell.attrs;
      for (let j = 0; j < attrs.rowspan; j++)
        mustAdd[prob.row + j] += prob.n;
      tr.setNodeMarkup(
        tr.mapping.map(tablePos + 1 + prob.pos),
        null,
        removeColSpan(attrs, attrs.colspan - prob.n, prob.n)
      );
    } else if (prob.type == "missing") {
      mustAdd[prob.row] += prob.n;
    } else if (prob.type == "overlong_rowspan") {
      const cell = table.nodeAt(prob.pos);
      if (!cell)
        continue;
      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {
        ...cell.attrs,
        rowspan: cell.attrs.rowspan - prob.n
      });
    } else if (prob.type == "colwidth mismatch") {
      const cell = table.nodeAt(prob.pos);
      if (!cell)
        continue;
      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {
        ...cell.attrs,
        colwidth: prob.colwidth
      });
    }
  }
  let first, last;
  for (let i = 0; i < mustAdd.length; i++)
    if (mustAdd[i]) {
      if (first == null)
        first = i;
      last = i;
    }
  for (let i = 0, pos = tablePos + 1; i < map.height; i++) {
    const row = table.child(i);
    const end = pos + row.nodeSize;
    const add = mustAdd[i];
    if (add > 0) {
      let role = "cell";
      if (row.firstChild) {
        role = row.firstChild.type.spec.tableRole;
      }
      const nodes = [];
      for (let j = 0; j < add; j++) {
        const node = tableNodeTypes(state.schema)[role].createAndFill();
        if (node)
          nodes.push(node);
      }
      const side = (i == 0 || first == i - 1) && last == i ? pos + 1 : end - 1;
      tr.insert(tr.mapping.map(side), nodes);
    }
    pos = end;
  }
  return tr.setMeta(fixTablesKey, { fixTables: true });
}
function pastedCells(slice) {
  if (!slice.size)
    return null;
  let { content, openStart, openEnd } = slice;
  while (content.childCount == 1 && (openStart > 0 && openEnd > 0 || content.child(0).type.spec.tableRole == "table")) {
    openStart--;
    openEnd--;
    content = content.child(0).content;
  }
  const first = content.child(0);
  const role = first.type.spec.tableRole;
  const schema = first.type.schema, rows = [];
  if (role == "row") {
    for (let i = 0; i < content.childCount; i++) {
      let cells = content.child(i).content;
      const left = i ? 0 : Math.max(0, openStart - 1);
      const right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);
      if (left || right)
        cells = fitSlice(
          tableNodeTypes(schema).row,
          new Slice(cells, left, right)
        ).content;
      rows.push(cells);
    }
  } else if (role == "cell" || role == "header_cell") {
    rows.push(
      openStart || openEnd ? fitSlice(
        tableNodeTypes(schema).row,
        new Slice(content, openStart, openEnd)
      ).content : content
    );
  } else {
    return null;
  }
  return ensureRectangular(schema, rows);
}
function ensureRectangular(schema, rows) {
  const widths = [];
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    for (let j = row.childCount - 1; j >= 0; j--) {
      const { rowspan, colspan } = row.child(j).attrs;
      for (let r = i; r < i + rowspan; r++)
        widths[r] = (widths[r] || 0) + colspan;
    }
  }
  let width = 0;
  for (let r = 0; r < widths.length; r++)
    width = Math.max(width, widths[r]);
  for (let r = 0; r < widths.length; r++) {
    if (r >= rows.length)
      rows.push(Fragment.empty);
    if (widths[r] < width) {
      const empty = tableNodeTypes(schema).cell.createAndFill();
      const cells = [];
      for (let i = widths[r]; i < width; i++) {
        cells.push(empty);
      }
      rows[r] = rows[r].append(Fragment.from(cells));
    }
  }
  return { height: rows.length, width, rows };
}
function fitSlice(nodeType, slice) {
  const node = nodeType.createAndFill();
  const tr = new Transform(node).replace(0, node.content.size, slice);
  return tr.doc;
}
function clipCells({ width, height, rows }, newWidth, newHeight) {
  if (width != newWidth) {
    const added = [];
    const newRows = [];
    for (let row = 0; row < rows.length; row++) {
      const frag = rows[row], cells = [];
      for (let col = added[row] || 0, i = 0; col < newWidth; i++) {
        let cell = frag.child(i % frag.childCount);
        if (col + cell.attrs.colspan > newWidth)
          cell = cell.type.createChecked(
            removeColSpan(
              cell.attrs,
              cell.attrs.colspan,
              col + cell.attrs.colspan - newWidth
            ),
            cell.content
          );
        cells.push(cell);
        col += cell.attrs.colspan;
        for (let j = 1; j < cell.attrs.rowspan; j++)
          added[row + j] = (added[row + j] || 0) + cell.attrs.colspan;
      }
      newRows.push(Fragment.from(cells));
    }
    rows = newRows;
    width = newWidth;
  }
  if (height != newHeight) {
    const newRows = [];
    for (let row = 0, i = 0; row < newHeight; row++, i++) {
      const cells = [], source = rows[i % height];
      for (let j = 0; j < source.childCount; j++) {
        let cell = source.child(j);
        if (row + cell.attrs.rowspan > newHeight)
          cell = cell.type.create(
            {
              ...cell.attrs,
              rowspan: Math.max(1, newHeight - cell.attrs.rowspan)
            },
            cell.content
          );
        cells.push(cell);
      }
      newRows.push(Fragment.from(cells));
    }
    rows = newRows;
    height = newHeight;
  }
  return { width, height, rows };
}
function growTable(tr, map, table, start, width, height, mapFrom) {
  const schema = tr.doc.type.schema;
  const types = tableNodeTypes(schema);
  let empty;
  let emptyHead;
  if (width > map.width) {
    for (let row = 0, rowEnd = 0; row < map.height; row++) {
      const rowNode = table.child(row);
      rowEnd += rowNode.nodeSize;
      const cells = [];
      let add;
      if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell)
        add = empty || (empty = types.cell.createAndFill());
      else
        add = emptyHead || (emptyHead = types.header_cell.createAndFill());
      for (let i = map.width; i < width; i++)
        cells.push(add);
      tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);
    }
  }
  if (height > map.height) {
    const cells = [];
    for (let i = 0, start2 = (map.height - 1) * map.width; i < Math.max(map.width, width); i++) {
      const header = i >= map.width ? false : table.nodeAt(map.map[start2 + i]).type == types.header_cell;
      cells.push(
        header ? emptyHead || (emptyHead = types.header_cell.createAndFill()) : empty || (empty = types.cell.createAndFill())
      );
    }
    const emptyRow = types.row.create(null, Fragment.from(cells)), rows = [];
    for (let i = map.height; i < height; i++)
      rows.push(emptyRow);
    tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);
  }
  return !!(empty || emptyHead);
}
function isolateHorizontal(tr, map, table, start, left, right, top, mapFrom) {
  if (top == 0 || top == map.height)
    return false;
  let found = false;
  for (let col = left; col < right; col++) {
    const index = top * map.width + col, pos = map.map[index];
    if (map.map[index - map.width] == pos) {
      found = true;
      const cell = table.nodeAt(pos);
      const { top: cellTop, left: cellLeft } = map.findCell(pos);
      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, {
        ...cell.attrs,
        rowspan: top - cellTop
      });
      tr.insert(
        tr.mapping.slice(mapFrom).map(map.positionAt(top, cellLeft, table)),
        cell.type.createAndFill({
          ...cell.attrs,
          rowspan: cellTop + cell.attrs.rowspan - top
        })
      );
      col += cell.attrs.colspan - 1;
    }
  }
  return found;
}
function isolateVertical(tr, map, table, start, top, bottom, left, mapFrom) {
  if (left == 0 || left == map.width)
    return false;
  let found = false;
  for (let row = top; row < bottom; row++) {
    const index = row * map.width + left, pos = map.map[index];
    if (map.map[index - 1] == pos) {
      found = true;
      const cell = table.nodeAt(pos);
      const cellLeft = map.colCount(pos);
      const updatePos = tr.mapping.slice(mapFrom).map(pos + start);
      tr.setNodeMarkup(
        updatePos,
        null,
        removeColSpan(
          cell.attrs,
          left - cellLeft,
          cell.attrs.colspan - (left - cellLeft)
        )
      );
      tr.insert(
        updatePos + cell.nodeSize,
        cell.type.createAndFill(
          removeColSpan(cell.attrs, 0, left - cellLeft)
        )
      );
      row += cell.attrs.rowspan - 1;
    }
  }
  return found;
}
function insertCells(state, dispatch, tableStart, rect, cells) {
  let table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc;
  if (!table) {
    throw new Error("No table found");
  }
  let map = TableMap.get(table);
  const { top, left } = rect;
  const right = left + cells.width, bottom = top + cells.height;
  const tr = state.tr;
  let mapFrom = 0;
  function recomp() {
    table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;
    if (!table) {
      throw new Error("No table found");
    }
    map = TableMap.get(table);
    mapFrom = tr.mapping.maps.length;
  }
  if (growTable(tr, map, table, tableStart, right, bottom, mapFrom))
    recomp();
  if (isolateHorizontal(tr, map, table, tableStart, left, right, top, mapFrom))
    recomp();
  if (isolateHorizontal(tr, map, table, tableStart, left, right, bottom, mapFrom))
    recomp();
  if (isolateVertical(tr, map, table, tableStart, top, bottom, left, mapFrom))
    recomp();
  if (isolateVertical(tr, map, table, tableStart, top, bottom, right, mapFrom))
    recomp();
  for (let row = top; row < bottom; row++) {
    const from = map.positionAt(row, left, table), to = map.positionAt(row, right, table);
    tr.replace(
      tr.mapping.slice(mapFrom).map(from + tableStart),
      tr.mapping.slice(mapFrom).map(to + tableStart),
      new Slice(cells.rows[row - top], 0, 0)
    );
  }
  recomp();
  tr.setSelection(
    new CellSelection(
      tr.doc.resolve(tableStart + map.positionAt(top, left, table)),
      tr.doc.resolve(tableStart + map.positionAt(bottom - 1, right - 1, table))
    )
  );
  dispatch(tr);
}

// src/input.ts
var handleKeyDown = keydownHandler({
  ArrowLeft: arrow("horiz", -1),
  ArrowRight: arrow("horiz", 1),
  ArrowUp: arrow("vert", -1),
  ArrowDown: arrow("vert", 1),
  "Shift-ArrowLeft": shiftArrow("horiz", -1),
  "Shift-ArrowRight": shiftArrow("horiz", 1),
  "Shift-ArrowUp": shiftArrow("vert", -1),
  "Shift-ArrowDown": shiftArrow("vert", 1),
  Backspace: deleteCellSelection,
  "Mod-Backspace": deleteCellSelection,
  Delete: deleteCellSelection,
  "Mod-Delete": deleteCellSelection
});
function maybeSetSelection(state, dispatch, selection) {
  if (selection.eq(state.selection))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(selection).scrollIntoView());
  return true;
}
function arrow(axis, dir) {
  return (state, dispatch, view) => {
    if (!view)
      return false;
    const sel = state.selection;
    if (sel instanceof CellSelection) {
      return maybeSetSelection(
        state,
        dispatch,
        Selection.near(sel.$headCell, dir)
      );
    }
    if (axis != "horiz" && !sel.empty)
      return false;
    const end = atEndOfCell(view, axis, dir);
    if (end == null)
      return false;
    if (axis == "horiz") {
      return maybeSetSelection(
        state,
        dispatch,
        Selection.near(state.doc.resolve(sel.head + dir), dir)
      );
    } else {
      const $cell = state.doc.resolve(end);
      const $next = nextCell($cell, axis, dir);
      let newSel;
      if ($next)
        newSel = Selection.near($next, 1);
      else if (dir < 0)
        newSel = Selection.near(state.doc.resolve($cell.before(-1)), -1);
      else
        newSel = Selection.near(state.doc.resolve($cell.after(-1)), 1);
      return maybeSetSelection(state, dispatch, newSel);
    }
  };
}
function shiftArrow(axis, dir) {
  return (state, dispatch, view) => {
    if (!view)
      return false;
    const sel = state.selection;
    let cellSel;
    if (sel instanceof CellSelection) {
      cellSel = sel;
    } else {
      const end = atEndOfCell(view, axis, dir);
      if (end == null)
        return false;
      cellSel = new CellSelection(state.doc.resolve(end));
    }
    const $head = nextCell(cellSel.$headCell, axis, dir);
    if (!$head)
      return false;
    return maybeSetSelection(
      state,
      dispatch,
      new CellSelection(cellSel.$anchorCell, $head)
    );
  };
}
function deleteCellSelection(state, dispatch) {
  const sel = state.selection;
  if (!(sel instanceof CellSelection))
    return false;
  if (dispatch) {
    const tr = state.tr;
    const baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;
    sel.forEachCell((cell, pos) => {
      if (!cell.content.eq(baseContent))
        tr.replace(
          tr.mapping.map(pos + 1),
          tr.mapping.map(pos + cell.nodeSize - 1),
          new Slice(baseContent, 0, 0)
        );
    });
    if (tr.docChanged)
      dispatch(tr);
  }
  return true;
}
function handleTripleClick(view, pos) {
  const doc = view.state.doc, $cell = cellAround(doc.resolve(pos));
  if (!$cell)
    return false;
  view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));
  return true;
}
function handlePaste(view, _, slice) {
  if (!isInTable(view.state))
    return false;
  let cells = pastedCells(slice);
  const sel = view.state.selection;
  if (sel instanceof CellSelection) {
    if (!cells)
      cells = {
        width: 1,
        height: 1,
        rows: [
          Fragment.from(
            fitSlice(tableNodeTypes(view.state.schema).cell, slice)
          )
        ]
      };
    const table = sel.$anchorCell.node(-1);
    const start = sel.$anchorCell.start(-1);
    const rect = TableMap.get(table).rectBetween(
      sel.$anchorCell.pos - start,
      sel.$headCell.pos - start
    );
    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);
    insertCells(view.state, view.dispatch, start, rect, cells);
    return true;
  } else if (cells) {
    const $cell = selectionCell(view.state);
    const start = $cell.start(-1);
    insertCells(
      view.state,
      view.dispatch,
      start,
      TableMap.get($cell.node(-1)).findCell($cell.pos - start),
      cells
    );
    return true;
  } else {
    return false;
  }
}
function handleMouseDown(view, startEvent) {
  var _a;
  if (startEvent.ctrlKey || startEvent.metaKey)
    return;
  const startDOMCell = domInCell(view, startEvent.target);
  let $anchor;
  if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {
    setCellSelection(view.state.selection.$anchorCell, startEvent);
    startEvent.preventDefault();
  } else if (startEvent.shiftKey && startDOMCell && ($anchor = cellAround(view.state.selection.$anchor)) != null && ((_a = cellUnderMouse(view, startEvent)) == null ? void 0 : _a.pos) != $anchor.pos) {
    setCellSelection($anchor, startEvent);
    startEvent.preventDefault();
  } else if (!startDOMCell) {
    return;
  }
  function setCellSelection($anchor2, event) {
    let $head = cellUnderMouse(view, event);
    const starting = tableEditingKey.getState(view.state) == null;
    if (!$head || !inSameTable($anchor2, $head)) {
      if (starting)
        $head = $anchor2;
      else
        return;
    }
    const selection = new CellSelection($anchor2, $head);
    if (starting || !view.state.selection.eq(selection)) {
      const tr = view.state.tr.setSelection(selection);
      if (starting)
        tr.setMeta(tableEditingKey, $anchor2.pos);
      view.dispatch(tr);
    }
  }
  function stop() {
    view.root.removeEventListener("mouseup", stop);
    view.root.removeEventListener("dragstart", stop);
    view.root.removeEventListener("mousemove", move);
    if (tableEditingKey.getState(view.state) != null)
      view.dispatch(view.state.tr.setMeta(tableEditingKey, -1));
  }
  function move(_event) {
    const event = _event;
    const anchor = tableEditingKey.getState(view.state);
    let $anchor2;
    if (anchor != null) {
      $anchor2 = view.state.doc.resolve(anchor);
    } else if (domInCell(view, event.target) != startDOMCell) {
      $anchor2 = cellUnderMouse(view, startEvent);
      if (!$anchor2)
        return stop();
    }
    if ($anchor2)
      setCellSelection($anchor2, event);
  }
  view.root.addEventListener("mouseup", stop);
  view.root.addEventListener("dragstart", stop);
  view.root.addEventListener("mousemove", move);
}
function atEndOfCell(view, axis, dir) {
  if (!(view.state.selection instanceof TextSelection))
    return null;
  const { $head } = view.state.selection;
  for (let d = $head.depth - 1; d >= 0; d--) {
    const parent = $head.node(d), index = dir < 0 ? $head.index(d) : $head.indexAfter(d);
    if (index != (dir < 0 ? 0 : parent.childCount))
      return null;
    if (parent.type.spec.tableRole == "cell" || parent.type.spec.tableRole == "header_cell") {
      const cellPos = $head.before(d);
      const dirStr = axis == "vert" ? dir > 0 ? "down" : "up" : dir > 0 ? "right" : "left";
      return view.endOfTextblock(dirStr) ? cellPos : null;
    }
  }
  return null;
}
function domInCell(view, dom) {
  for (; dom && dom != view.dom; dom = dom.parentNode) {
    if (dom.nodeName == "TD" || dom.nodeName == "TH") {
      return dom;
    }
  }
  return null;
}
function cellUnderMouse(view, event) {
  const mousePos = view.posAtCoords({
    left: event.clientX,
    top: event.clientY
  });
  if (!mousePos)
    return null;
  return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;
}

// src/tableview.ts
var TableView = class {
  constructor(node, cellMinWidth) {
    this.node = node;
    this.cellMinWidth = cellMinWidth;
    this.dom = document.createElement("div");
    this.dom.className = "tableWrapper";
    this.table = this.dom.appendChild(document.createElement("table"));
    this.table.className = node.attrs.class;
    this.table.id = node.attrs.name;
    this.colgroup = this.table.appendChild(document.createElement("colgroup"));
    updateColumnsOnResize(node, this.colgroup, this.table, cellMinWidth);
    this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(node) {
    if (node.type != this.node.type)
      return false;
    this.node = node;
    updateColumnsOnResize(node, this.colgroup, this.table, this.cellMinWidth);
    return true;
  }
  ignoreMutation(record) {
    return record.type == "attributes" && (record.target == this.table || this.colgroup.contains(record.target));
  }
};
function updateColumnsOnResize(node, colgroup, table, cellMinWidth, overrideCol, overrideValue) {
  var _a;
  let totalWidth = 0;
  let fixedWidth = true;
  let nextDOM = colgroup.firstChild;
  const row = node.firstChild;
  if (!row)
    return;
  for (let i = 0, col = 0; i < row.childCount; i++) {
    const { colspan, colwidth } = row.child(i).attrs;
    for (let j = 0; j < colspan; j++, col++) {
      const hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j];
      const cssWidth = hasWidth ? hasWidth + "px" : "";
      totalWidth += hasWidth || cellMinWidth;
      if (!hasWidth)
        fixedWidth = false;
      if (!nextDOM) {
        colgroup.appendChild(document.createElement("col")).style.width = cssWidth;
      } else {
        if (nextDOM.style.width != cssWidth)
          nextDOM.style.width = cssWidth;
        nextDOM = nextDOM.nextSibling;
      }
    }
  }
  while (nextDOM) {
    const after = nextDOM.nextSibling;
    (_a = nextDOM.parentNode) == null ? void 0 : _a.removeChild(nextDOM);
    nextDOM = after;
  }
  if (fixedWidth) {
    table.style.width = totalWidth + "px";
    table.style.minWidth = "";
  } else {
    table.style.width = "";
    table.style.minWidth = totalWidth + "px";
  }
    table.className = node.attrs.class
    table.id = node.attrs.name}

// src/columnresizing.ts
var columnResizingPluginKey = new PluginKey(
  "tableColumnResizing"
);
function columnResizing({
  handleWidth = 5,
  cellMinWidth = 25,
  View = TableView,
  lastColumnResizable = true
} = {}) {
  const plugin = new Plugin({
    key: columnResizingPluginKey,
    state: {
      init(_, state) {
        var _a, _b;
        const nodeViews = (_b = (_a = plugin.spec) == null ? void 0 : _a.props) == null ? void 0 : _b.nodeViews;
        const tableName = tableNodeTypes(state.schema).table.name;
        if (View && nodeViews) {
          nodeViews[tableName] = (node, view) => {
            return new View(node, cellMinWidth, view);
          };
        }
        return new ResizeState(-1, false);
      },
      apply(tr, prev) {
        return prev.apply(tr);
      }
    },
    props: {
      attributes: (state) => {
        const pluginState = columnResizingPluginKey.getState(state);
        return pluginState && pluginState.activeHandle > -1 ? { class: "resize-cursor" } : {};
      },
      handleDOMEvents: {
        mousemove: (view, event) => {
          handleMouseMove(
            view,
            event,
            handleWidth,
            cellMinWidth,
            lastColumnResizable
          );
        },
        mouseleave: (view) => {
          handleMouseLeave(view);
        },
        mousedown: (view, event) => {
          handleMouseDown2(view, event, cellMinWidth);
        }
      },
      decorations: (state) => {
        const pluginState = columnResizingPluginKey.getState(state);
        if (pluginState && pluginState.activeHandle > -1) {
          return handleDecorations(state, pluginState.activeHandle);
        }
      },
      nodeViews: {}
    }
  });
  return plugin;
}
var ResizeState = class _ResizeState {
  constructor(activeHandle, dragging) {
    this.activeHandle = activeHandle;
    this.dragging = dragging;
  }
  apply(tr) {
    const state = this;
    const action = tr.getMeta(columnResizingPluginKey);
    if (action && action.setHandle != null)
      return new _ResizeState(action.setHandle, false);
    if (action && action.setDragging !== void 0)
      return new _ResizeState(state.activeHandle, action.setDragging);
    if (state.activeHandle > -1 && tr.docChanged) {
      let handle = tr.mapping.map(state.activeHandle, -1);
      if (!pointsAtCell(tr.doc.resolve(handle))) {
        handle = -1;
      }
      return new _ResizeState(handle, state.dragging);
    }
    return state;
  }
};
function handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable) {
  const pluginState = columnResizingPluginKey.getState(view.state);
  if (!pluginState)
    return;
  if (!pluginState.dragging) {
    const target = domCellAround(event.target);
    let cell = -1;
    if (target) {
      const { left, right } = target.getBoundingClientRect();
      if (event.clientX - left <= handleWidth)
        cell = edgeCell(view, event, "left", handleWidth);
      else if (right - event.clientX <= handleWidth)
        cell = edgeCell(view, event, "right", handleWidth);
    }
    if (cell != pluginState.activeHandle) {
      if (!lastColumnResizable && cell !== -1) {
        const $cell = view.state.doc.resolve(cell);
        const table = $cell.node(-1);
        const map = TableMap.get(table);
        const tableStart = $cell.start(-1);
        const col = map.colCount($cell.pos - tableStart) + $cell.nodeAfter.attrs.colspan - 1;
        if (col == map.width - 1) {
          return;
        }
      }
      updateHandle(view, cell);
    }
  }
}
function handleMouseLeave(view) {
  const pluginState = columnResizingPluginKey.getState(view.state);
  if (pluginState && pluginState.activeHandle > -1 && !pluginState.dragging)
    updateHandle(view, -1);
}
function handleMouseDown2(view, event, cellMinWidth) {
  var _a;
  const win = (_a = view.dom.ownerDocument.defaultView) != null ? _a : window;
  const pluginState = columnResizingPluginKey.getState(view.state);
  if (!pluginState || pluginState.activeHandle == -1 || pluginState.dragging)
    return false;
  const cell = view.state.doc.nodeAt(pluginState.activeHandle);
  const width = currentColWidth(view, pluginState.activeHandle, cell.attrs);
  view.dispatch(
    view.state.tr.setMeta(columnResizingPluginKey, {
      setDragging: { startX: event.clientX, startWidth: width }
    })
  );
  function finish(event2) {
    win.removeEventListener("mouseup", finish);
    win.removeEventListener("mousemove", move);
    const pluginState2 = columnResizingPluginKey.getState(view.state);
    if (pluginState2 == null ? void 0 : pluginState2.dragging) {
      updateColumnWidth(
        view,
        pluginState2.activeHandle,
        draggedWidth(pluginState2.dragging, event2, cellMinWidth)
      );
      view.dispatch(
        view.state.tr.setMeta(columnResizingPluginKey, { setDragging: null })
      );
    }
  }
  function move(event2) {
    if (!event2.which)
      return finish(event2);
    const pluginState2 = columnResizingPluginKey.getState(view.state);
    if (!pluginState2)
      return;
    if (pluginState2.dragging) {
      const dragged = draggedWidth(pluginState2.dragging, event2, cellMinWidth);
      displayColumnWidth(view, pluginState2.activeHandle, dragged, cellMinWidth);
    }
  }
  win.addEventListener("mouseup", finish);
  win.addEventListener("mousemove", move);
  event.preventDefault();
  return true;
}
function currentColWidth(view, cellPos, { colspan, colwidth }) {
  const width = colwidth && colwidth[colwidth.length - 1];
  if (width)
    return width;
  const dom = view.domAtPos(cellPos);
  const node = dom.node.childNodes[dom.offset];
  let domWidth = node.offsetWidth, parts = colspan;
  if (colwidth) {
    for (let i = 0; i < colspan; i++)
      if (colwidth[i]) {
        domWidth -= colwidth[i];
        parts--;
      }
  }
  return domWidth / parts;
}
function domCellAround(target) {
  while (target && target.nodeName != "TD" && target.nodeName != "TH")
    target = target.classList && target.classList.contains("ProseMirror") ? null : target.parentNode;
  return target;
}
function edgeCell(view, event, side, handleWidth) {
  const offset = side == "right" ? -handleWidth : handleWidth;
  const found = view.posAtCoords({
    left: event.clientX + offset,
    top: event.clientY
  });
  if (!found)
    return -1;
  const { pos } = found;
  const $cell = cellAround(view.state.doc.resolve(pos));
  if (!$cell)
    return -1;
  if (side == "right")
    return $cell.pos;
  const map = TableMap.get($cell.node(-1)), start = $cell.start(-1);
  const index = map.map.indexOf($cell.pos - start);
  return index % map.width == 0 ? -1 : start + map.map[index - 1];
}
function draggedWidth(dragging, event, cellMinWidth) {
  const offset = event.clientX - dragging.startX;
  return Math.max(cellMinWidth, dragging.startWidth + offset);
}
function updateHandle(view, value) {
  view.dispatch(
    view.state.tr.setMeta(columnResizingPluginKey, { setHandle: value })
  );
}
function updateColumnWidth(view, cell, width) {
  const $cell = view.state.doc.resolve(cell);
  const table = $cell.node(-1), map = TableMap.get(table), start = $cell.start(-1);
  const col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
  const tr = view.state.tr;
  for (let row = 0; row < map.height; row++) {
    const mapIndex = row * map.width + col;
    if (row && map.map[mapIndex] == map.map[mapIndex - map.width])
      continue;
    const pos = map.map[mapIndex];
    const attrs = table.nodeAt(pos).attrs;
    const index = attrs.colspan == 1 ? 0 : col - map.colCount(pos);
    if (attrs.colwidth && attrs.colwidth[index] == width)
      continue;
    const colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);
    colwidth[index] = width;
    tr.setNodeMarkup(start + pos, null, { ...attrs, colwidth });
  }
  if (tr.docChanged)
    view.dispatch(tr);
}
function displayColumnWidth(view, cell, width, cellMinWidth) {
  const $cell = view.state.doc.resolve(cell);
  const table = $cell.node(-1), start = $cell.start(-1);
  const col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
  let dom = view.domAtPos($cell.start(-1)).node;
  while (dom && dom.nodeName != "TABLE") {
    dom = dom.parentNode;
  }
  if (!dom)
    return;
  updateColumnsOnResize(
    table,
    dom.firstChild,
    dom,
    cellMinWidth,
    col,
    width
  );
}
function zeroes(n) {
  return Array(n).fill(0);
}
function handleDecorations(state, cell) {
  const decorations = [];
  const $cell = state.doc.resolve(cell);
  const table = $cell.node(-1);
  if (!table) {
    return DecorationSet.empty;
  }
  const map = TableMap.get(table);
  const start = $cell.start(-1);
  const col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
  for (let row = 0; row < map.height; row++) {
    const index = col + row * map.width;
    if ((col == map.width - 1 || map.map[index] != map.map[index + 1]) && (row == 0 || map.map[index] != map.map[index - map.width])) {
      const cellPos = map.map[index];
      const pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;
      const dom = document.createElement("div");
      dom.className = "column-resize-handle";
      decorations.push(Decoration.widget(pos, dom));
    }
  }
  return DecorationSet.create(state.doc, decorations);
}
function selectedRect(state) {
  const sel = state.selection;
  const $pos = selectionCell(state);
  const table = $pos.node(-1);
  const tableStart = $pos.start(-1);
  const map = TableMap.get(table);
  const rect = sel instanceof CellSelection ? map.rectBetween(
    sel.$anchorCell.pos - tableStart,
    sel.$headCell.pos - tableStart
  ) : map.findCell($pos.pos - tableStart);
  return { ...rect, tableStart, map, table };
}
function addColumn(tr, { map, tableStart, table }, col) {
  let refColumn = col > 0 ? -1 : 0;
  if (columnIsHeader(map, table, col + refColumn)) {
    refColumn = col == 0 || col == map.width ? null : 0;
  }
  for (let row = 0; row < map.height; row++) {
    const index = row * map.width + col;
    if (col > 0 && col < map.width && map.map[index - 1] == map.map[index]) {
      const pos = map.map[index];
      const cell = table.nodeAt(pos);
      tr.setNodeMarkup(
        tr.mapping.map(tableStart + pos),
        null,
        addColSpan(cell.attrs, col - map.colCount(pos))
      );
      row += cell.attrs.rowspan - 1;
    } else {
      const type = refColumn == null ? tableNodeTypes(table.type.schema).cell : table.nodeAt(map.map[index + refColumn]).type;
      const pos = map.positionAt(row, col, table);
      tr.insert(tr.mapping.map(tableStart + pos), type.createAndFill());
    }
  }
  return tr;
}
function addColumnBefore(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    dispatch(addColumn(state.tr, rect, rect.left));
  }
  return true;
}
function removeColumn(tr, { map, table, tableStart }, col) {
  const mapStart = tr.mapping.maps.length;
  for (let row = 0; row < map.height; ) {
    const index = row * map.width + col;
    const pos = map.map[index];
    const cell = table.nodeAt(pos);
    const attrs = cell.attrs;
    if (col > 0 && map.map[index - 1] == pos || col < map.width - 1 && map.map[index + 1] == pos) {
      tr.setNodeMarkup(
        tr.mapping.slice(mapStart).map(tableStart + pos),
        null,
        removeColSpan(attrs, col - map.colCount(pos))
      );
    } else {
      const start = tr.mapping.slice(mapStart).map(tableStart + pos);
      tr.delete(start, start + cell.nodeSize);
    }
    row += attrs.rowspan;
  }
}
function deleteColumn(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    const tr = state.tr;
    if (rect.left == 0 && rect.right == rect.map.width)
      return false;
    for (let i = rect.right - 1; ; i--) {
      removeColumn(tr, rect, i);
      if (i == rect.left)
        break;
      const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;
      if (!table) {
        throw RangeError("No table found");
      }
      rect.table = table;
      rect.map = TableMap.get(table);
    }
    dispatch(tr);
  }
  return true;
}
function rowIsHeader(map, table, row) {
  var _a;
  const headerCell = tableNodeTypes(table.type.schema).header_cell;
  for (let col = 0; col < map.width; col++)
    if (((_a = table.nodeAt(map.map[col + row * map.width])) == null ? void 0 : _a.type) != headerCell)
      return false;
  return true;
}
function addRow(tr, { map, tableStart, table }, row) {
  var _a;
  let rowPos = tableStart;
  for (let i = 0; i < row; i++)
    rowPos += table.child(i).nodeSize;
  const cells = [];
  let refRow = row > 0 ? -1 : 0;
  if (rowIsHeader(map, table, row + refRow))
    refRow = 0;
  for (let col = 0, index = map.width * row; col < map.width; col++, index++) {
    if (row > 0 && row < map.height && map.map[index] == map.map[index - map.width]) {
      const pos = map.map[index];
      const attrs = table.nodeAt(pos).attrs;
      tr.setNodeMarkup(tableStart + pos, null, {
        ...attrs,
        rowspan: attrs.rowspan + 1
      });
      col += attrs.colspan - 1;
    } else {
      const type = refRow == null ? tableNodeTypes(table.type.schema).cell : (_a = table.nodeAt(map.map[index + refRow * map.width])) == null ? void 0 : _a.type;
      const node = type == null ? void 0 : type.createAndFill();
      if (node)
        cells.push(node);
    }
  }
  tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));
  return tr;
}
function addRowBefore(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state);
    dispatch(addRow(state.tr, rect, rect.top));
  }
  return true;
}
function removeRow(tr, { map, table, tableStart }, row) {
  let rowPos = 0;
  for (let i = 0; i < row; i++)
    rowPos += table.child(i).nodeSize;
  const nextRow = rowPos + table.child(row).nodeSize;
  const mapFrom = tr.mapping.maps.length;
  tr.delete(rowPos + tableStart, nextRow + tableStart);
  const seen = /* @__PURE__ */ new Set();
  for (let col = 0, index = row * map.width; col < map.width; col++, index++) {
    const pos = map.map[index];
    if (seen.has(pos))
      continue;
    seen.add(pos);
    if (row > 0 && pos == map.map[index - map.width]) {
      const attrs = table.nodeAt(pos).attrs;
      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, {
        ...attrs,
        rowspan: attrs.rowspan - 1
      });
      col += attrs.colspan - 1;
    } else if (row < map.height && pos == map.map[index + map.width]) {
      const cell = table.nodeAt(pos);
      const attrs = cell.attrs;
      const copy = cell.type.create(
        { ...attrs, rowspan: cell.attrs.rowspan - 1 },
        cell.content
      );
      const newPos = map.positionAt(row + 1, col, table);
      tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy);
      col += attrs.colspan - 1;
    }
  }
}
function deleteRow(state, dispatch) {
  if (!isInTable(state))
    return false;
  if (dispatch) {
    const rect = selectedRect(state), tr = state.tr;
    if (rect.top == 0 && rect.bottom == rect.map.height)
      return false;
    for (let i = rect.bottom - 1; ; i--) {
      removeRow(tr, rect, i);
      if (i == rect.top)
        break;
      const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;
      if (!table) {
        throw RangeError("No table found");
      }
      rect.table = table;
      rect.map = TableMap.get(rect.table);
    }
    dispatch(tr);
  }
  return true;
}
function isEmpty(cell) {
  const c = cell.content;
  return c.childCount == 1 && c.child(0).isTextblock && c.child(0).childCount == 0;
}
function cellsOverlapRectangle({ width, height, map }, rect) {
  let indexTop = rect.top * width + rect.left, indexLeft = indexTop;
  let indexBottom = (rect.bottom - 1) * width + rect.left, indexRight = indexTop + (rect.right - rect.left - 1);
  for (let i = rect.top; i < rect.bottom; i++) {
    if (rect.left > 0 && map[indexLeft] == map[indexLeft - 1] || rect.right < width && map[indexRight] == map[indexRight + 1])
      return true;
    indexLeft += width;
    indexRight += width;
  }
  for (let i = rect.left; i < rect.right; i++) {
    if (rect.top > 0 && map[indexTop] == map[indexTop - width] || rect.bottom < height && map[indexBottom] == map[indexBottom + width])
      return true;
    indexTop++;
    indexBottom++;
  }
  return false;
}
function mergeCells(state, dispatch) {
  const sel = state.selection;
  if (!(sel instanceof CellSelection) || sel.$anchorCell.pos == sel.$headCell.pos)
    return false;
  const rect = selectedRect(state), { map } = rect;
  if (cellsOverlapRectangle(map, rect))
    return false;
  if (dispatch) {
    const tr = state.tr;
    const seen = {};
    let content = Fragment.empty;
    let mergedPos;
    let mergedCell;
    for (let row = rect.top; row < rect.bottom; row++) {
      for (let col = rect.left; col < rect.right; col++) {
        const cellPos = map.map[row * map.width + col];
        const cell = rect.table.nodeAt(cellPos);
        if (seen[cellPos] || !cell)
          continue;
        seen[cellPos] = true;
        if (mergedPos == null) {
          mergedPos = cellPos;
          mergedCell = cell;
        } else {
          if (!isEmpty(cell))
            content = content.append(cell.content);
          const mapped = tr.mapping.map(cellPos + rect.tableStart);
          tr.delete(mapped, mapped + cell.nodeSize);
        }
      }
    }
    if (mergedPos == null || mergedCell == null) {
      return true;
    }
    tr.setNodeMarkup(mergedPos + rect.tableStart, null, {
      ...addColSpan(
        mergedCell.attrs,
        mergedCell.attrs.colspan,
        rect.right - rect.left - mergedCell.attrs.colspan
      ),
      rowspan: rect.bottom - rect.top
    });
    if (content.size) {
      const end = mergedPos + 1 + mergedCell.content.size;
      const start = isEmpty(mergedCell) ? mergedPos + 1 : end;
      tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);
    }
    tr.setSelection(
      new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart))
    );
    dispatch(tr);
  }
  return true;
}
function splitCell(state, dispatch) {
  const nodeTypes = tableNodeTypes(state.schema);
  return splitCellWithType(({ node }) => {
    return nodeTypes[node.type.spec.tableRole];
  })(state, dispatch);
}
function splitCellWithType(getCellType) {
  return (state, dispatch) => {
    var _a;
    const sel = state.selection;
    let cellNode;
    let cellPos;
    if (!(sel instanceof CellSelection)) {
      cellNode = cellWrapping(sel.$from);
      if (!cellNode)
        return false;
      cellPos = (_a = cellAround(sel.$from)) == null ? void 0 : _a.pos;
    } else {
      if (sel.$anchorCell.pos != sel.$headCell.pos)
        return false;
      cellNode = sel.$anchorCell.nodeAfter;
      cellPos = sel.$anchorCell.pos;
    }
    if (cellNode == null || cellPos == null) {
      return false;
    }
    if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {
      return false;
    }
    if (dispatch) {
      let baseAttrs = cellNode.attrs;
      const attrs = [];
      const colwidth = baseAttrs.colwidth;
      if (baseAttrs.rowspan > 1)
        baseAttrs = { ...baseAttrs, rowspan: 1 };
      if (baseAttrs.colspan > 1)
        baseAttrs = { ...baseAttrs, colspan: 1 };
      const rect = selectedRect(state), tr = state.tr;
      for (let i = 0; i < rect.right - rect.left; i++)
        attrs.push(
          colwidth ? {
            ...baseAttrs,
            colwidth: colwidth && colwidth[i] ? [colwidth[i]] : null
          } : baseAttrs
        );
      let lastCell;
      for (let row = rect.top; row < rect.bottom; row++) {
        let pos = rect.map.positionAt(row, rect.left, rect.table);
        if (row == rect.top)
          pos += cellNode.nodeSize;
        for (let col = rect.left, i = 0; col < rect.right; col++, i++) {
          if (col == rect.left && row == rect.top)
            continue;
          tr.insert(
            lastCell = tr.mapping.map(pos + rect.tableStart, 1),
            getCellType({ node: cellNode, row, col }).createAndFill(attrs[i])
          );
        }
      }
      tr.setNodeMarkup(
        cellPos,
        getCellType({ node: cellNode, row: rect.top, col: rect.left }),
        attrs[0]
      );
      if (sel instanceof CellSelection)
        tr.setSelection(
          new CellSelection(
            tr.doc.resolve(sel.$anchorCell.pos),
            lastCell ? tr.doc.resolve(lastCell) : void 0
          )
        );
      dispatch(tr);
    }
    return true;
  };
}
function deprecated_toggleHeader(type) {
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const types = tableNodeTypes(state.schema);
      const rect = selectedRect(state), tr = state.tr;
      const cells = rect.map.cellsInRect(
        type == "column" ? {
          left: rect.left,
          top: 0,
          right: rect.right,
          bottom: rect.map.height
        } : type == "row" ? {
          left: 0,
          top: rect.top,
          right: rect.map.width,
          bottom: rect.bottom
        } : rect
      );
      const nodes = cells.map((pos) => rect.table.nodeAt(pos));
      for (let i = 0; i < cells.length; i++)
        if (nodes[i].type == types.header_cell)
          tr.setNodeMarkup(
            rect.tableStart + cells[i],
            types.cell,
            nodes[i].attrs
          );
      if (tr.steps.length == 0)
        for (let i = 0; i < cells.length; i++)
          tr.setNodeMarkup(
            rect.tableStart + cells[i],
            types.header_cell,
            nodes[i].attrs
          );
      dispatch(tr);
    }
    return true;
  };
}
function isHeaderEnabledByType(type, rect, types) {
  const cellPositions = rect.map.cellsInRect({
    left: 0,
    top: 0,
    right: type == "row" ? rect.map.width : 1,
    bottom: type == "column" ? rect.map.height : 1
  });
  for (let i = 0; i < cellPositions.length; i++) {
    const cell = rect.table.nodeAt(cellPositions[i]);
    if (cell && cell.type !== types.header_cell) {
      return false;
    }
  }
  return true;
}
function toggleHeader(type, options) {
  options = options || { useDeprecatedLogic: false };
  if (options.useDeprecatedLogic)
    return deprecated_toggleHeader(type);
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const types = tableNodeTypes(state.schema);
      const rect = selectedRect(state), tr = state.tr;
      const isHeaderRowEnabled = isHeaderEnabledByType("row", rect, types);
      const isHeaderColumnEnabled = isHeaderEnabledByType(
        "column",
        rect,
        types
      );
      const isHeaderEnabled = type === "column" ? isHeaderRowEnabled : type === "row" ? isHeaderColumnEnabled : false;
      const selectionStartsAt = isHeaderEnabled ? 1 : 0;
      const cellsRect = type == "column" ? {
        left: 0,
        top: selectionStartsAt,
        right: 1,
        bottom: rect.map.height
      } : type == "row" ? {
        left: selectionStartsAt,
        top: 0,
        right: rect.map.width,
        bottom: 1
      } : rect;
      const newType = type == "column" ? isHeaderColumnEnabled ? types.cell : types.header_cell : type == "row" ? isHeaderRowEnabled ? types.cell : types.header_cell : types.cell;
      rect.map.cellsInRect(cellsRect).forEach((relativeCellPos) => {
        const cellPos = relativeCellPos + rect.tableStart;
        const cell = tr.doc.nodeAt(cellPos);
        if (cell) {
          tr.setNodeMarkup(cellPos, newType, cell.attrs);
        }
      });
      dispatch(tr);
    }
    return true;
  };
}
toggleHeader("row", {
  useDeprecatedLogic: true
});
toggleHeader("column", {
  useDeprecatedLogic: true
});
toggleHeader("cell", {
  useDeprecatedLogic: true
});
function findNextCell($cell, dir) {
  if (dir < 0) {
    const before = $cell.nodeBefore;
    if (before)
      return $cell.pos - before.nodeSize;
    for (let row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {
      const rowNode = $cell.node(-1).child(row);
      const lastChild = rowNode.lastChild;
      if (lastChild) {
        return rowEnd - 1 - lastChild.nodeSize;
      }
      rowEnd -= rowNode.nodeSize;
    }
  } else {
    if ($cell.index() < $cell.parent.childCount - 1) {
      return $cell.pos + $cell.nodeAfter.nodeSize;
    }
    const table = $cell.node(-1);
    for (let row = $cell.indexAfter(-1), rowStart = $cell.after(); row < table.childCount; row++) {
      const rowNode = table.child(row);
      if (rowNode.childCount)
        return rowStart + 1;
      rowStart += rowNode.nodeSize;
    }
  }
  return null;
}
function goToNextCell(direction) {
  return function(state, dispatch) {
    if (!isInTable(state))
      return false;
    const cell = findNextCell(selectionCell(state), direction);
    if (cell == null)
      return false;
    if (dispatch) {
      const $cell = state.doc.resolve(cell);
      dispatch(
        state.tr.setSelection(TextSelection.between($cell, moveCellForward($cell))).scrollIntoView()
      );
    }
    return true;
  };
}

// src/index.ts
function tableEditing({
  allowTableNodeSelection = false
} = {}) {
  return new Plugin({
    key: tableEditingKey,
    // This piece of state is used to remember when a mouse-drag
    // cell-selection is happening, so that it can continue even as
    // transactions (which might move its anchor cell) come in.
    state: {
      init() {
        return null;
      },
      apply(tr, cur) {
        const set = tr.getMeta(tableEditingKey);
        if (set != null)
          return set == -1 ? null : set;
        if (cur == null || !tr.docChanged)
          return cur;
        const { deleted, pos } = tr.mapping.mapResult(cur);
        return deleted ? null : pos;
      }
    },
    props: {
      decorations: drawCellSelection,
      handleDOMEvents: {
        mousedown: handleMouseDown
      },
      createSelectionBetween(view) {
        return tableEditingKey.getState(view.state) != null ? view.state.selection : null;
      },
      handleTripleClick,
      handleKeyDown,
      handlePaste
    },
    appendTransaction(_, oldState, state) {
      return normalizeSelection(
        state,
        fixTables(state, oldState),
        allowTableNodeSelection
      );
    }
  });
}

function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string") elt = document.createElement(elt);
  var i = 1, next = arguments[1];
  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
      var value = next[name];
      if (typeof value == "string") elt.setAttribute(name, value);
      else if (value != null) elt[name] = value;
    }
    i++;
  }
  for (; i < arguments.length; i++) add$2(elt, arguments[i]);
  return elt
}

function add$2(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) ; else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++) add$2(elt, child[i]);
  } else {
    throw new RangeError("Unsupported child node: " + child)
  }
}

const SVG = "http://www.w3.org/2000/svg";
const XLINK = "http://www.w3.org/1999/xlink";
const prefix$2 = "ProseMirror-icon";
function hashPath(path) {
    let hash = 0;
    for (let i = 0; i < path.length; i++)
        hash = (((hash << 5) - hash) + path.charCodeAt(i)) | 0;
    return hash;
}
function getIcon(root, icon) {
    let doc = (root.nodeType == 9 ? root : root.ownerDocument) || document;
    let node = doc.createElement("div");
    node.className = prefix$2;
    if (icon.path) {
        let { path, width, height } = icon;
        let name = "pm-icon-" + hashPath(path).toString(16);
        if (!doc.getElementById(name))
            buildSVG(root, name, icon);
        let svg = node.appendChild(doc.createElementNS(SVG, "svg"));
        svg.style.width = (width / height) + "em";
        let use = svg.appendChild(doc.createElementNS(SVG, "use"));
        use.setAttributeNS(XLINK, "href", /([^#]*)/.exec(doc.location.toString())[1] + "#" + name);
    }
    else if (icon.dom) {
        node.appendChild(icon.dom.cloneNode(true));
    }
    else {
        let { text, css } = icon;
        node.appendChild(doc.createElement("span")).textContent = text || '';
        if (css)
            node.firstChild.style.cssText = css;
    }
    return node;
}
function buildSVG(root, name, data) {
    let [doc, top] = root.nodeType == 9 ? [root, root.body] : [root.ownerDocument || document, root];
    let collection = doc.getElementById(prefix$2 + "-collection");
    if (!collection) {
        collection = doc.createElementNS(SVG, "svg");
        collection.id = prefix$2 + "-collection";
        collection.style.display = "none";
        top.insertBefore(collection, top.firstChild);
    }
    let sym = doc.createElementNS(SVG, "symbol");
    sym.id = name;
    sym.setAttribute("viewBox", "0 0 " + data.width + " " + data.height);
    let path = sym.appendChild(doc.createElementNS(SVG, "path"));
    path.setAttribute("d", data.path);
    collection.appendChild(sym);
}

const prefix$1$1 = "ProseMirror-menu";
/**
An icon or label that, when clicked, executes a command.
*/
class MenuItem {
    /**
    Create a menu item.
    */
    constructor(
    /**
    The spec used to create this item.
    */
    spec) {
        this.spec = spec;
    }
    /**
    Renders the icon according to its [display
    spec](https://prosemirror.net/docs/ref/#menu.MenuItemSpec.display), and adds an event handler which
    executes the command when the representation is clicked.
    */
    render(view) {
        let spec = this.spec;
        let dom = spec.render ? spec.render(view)
            : spec.icon ? getIcon(view.root, spec.icon)
                : spec.label ? crelt("div", null, translate(view, spec.label))
                    : null;
        if (!dom)
            throw new RangeError("MenuItem without icon or label property");
        if (spec.title) {
            const title = (typeof spec.title === "function" ? spec.title(view.state) : spec.title);
            dom.setAttribute("title", translate(view, title));
        }
        if (spec.class)
            dom.classList.add(spec.class);
        if (spec.css)
            dom.style.cssText += spec.css;
        dom.addEventListener("mousedown", e => {
            e.preventDefault();
            if (!dom.classList.contains(prefix$1$1 + "-disabled"))
                spec.run(view.state, view.dispatch, view, e);
        });
        function update(state) {
            if (spec.select) {
                let selected = spec.select(state);
                dom.style.display = selected ? "" : "none";
                if (!selected)
                    return false;
            }
            let enabled = true;
            if (spec.enable) {
                enabled = spec.enable(state) || false;
                setClass(dom, prefix$1$1 + "-disabled", !enabled);
            }
            if (spec.active) {
                let active = enabled && spec.active(state) || false;
                setClass(dom, prefix$1$1 + "-active", active);
            }
            return true;
        }
        return { dom, update };
    }
}
function translate(view, text) {
    return view._props.translate ? view._props.translate(text) : text;
}
let lastMenuEvent = { time: 0, node: null };
function markMenuEvent(e) {
    lastMenuEvent.time = Date.now();
    lastMenuEvent.node = e.target;
}
function isMenuEvent(wrapper) {
    return Date.now() - 100 < lastMenuEvent.time &&
        lastMenuEvent.node && wrapper.contains(lastMenuEvent.node);
}
/**
A drop-down menu, displayed as a label with a downwards-pointing
triangle to the right of it.
*/
class Dropdown {
    /**
    Create a dropdown wrapping the elements.
    */
    constructor(content, 
    /**
    @internal
    */
    options = {}) {
        this.options = options;
        this.options = options || {};
        this.content = Array.isArray(content) ? content : [content];
    }
    /**
    Render the dropdown menu and sub-items.
    */
    render(view) {
        let content = renderDropdownItems(this.content, view);
        let win = view.dom.ownerDocument.defaultView || window;
        let label = crelt("div", { class: prefix$1$1 + "-dropdown " + (this.options.class || ""),
            style: this.options.css }, translate(view, this.options.label || ""));
        if (this.options.title)
            label.setAttribute("title", translate(view, this.options.title));
        let wrap = crelt("div", { class: prefix$1$1 + "-dropdown-wrap" }, label);
        let open = null;
        let listeningOnClose = null;
        let close = () => {
            if (open && open.close()) {
                open = null;
                win.removeEventListener("mousedown", listeningOnClose);
            }
        };
        label.addEventListener("mousedown", e => {
            e.preventDefault();
            markMenuEvent(e);
            if (open) {
                close();
            }
            else {
                open = this.expand(wrap, content.dom);
                win.addEventListener("mousedown", listeningOnClose = () => {
                    if (!isMenuEvent(wrap))
                        close();
                });
            }
        });
        function update(state) {
            let inner = content.update(state);
            wrap.style.display = inner ? "" : "none";
            return inner;
        }
        return { dom: wrap, update };
    }
    /**
    @internal
    */
    expand(dom, items) {
        let menuDOM = crelt("div", { class: prefix$1$1 + "-dropdown-menu " + (this.options.class || "") }, items);
        let done = false;
        function close() {
            if (done)
                return false;
            done = true;
            dom.removeChild(menuDOM);
            return true;
        }
        dom.appendChild(menuDOM);
        return { close, node: menuDOM };
    }
}
function renderDropdownItems(items, view) {
    let rendered = [], updates = [];
    for (let i = 0; i < items.length; i++) {
        let { dom, update } = items[i].render(view);
        rendered.push(crelt("div", { class: prefix$1$1 + "-dropdown-item" }, dom));
        updates.push(update);
    }
    return { dom: rendered, update: combineUpdates(updates, rendered) };
}
function combineUpdates(updates, nodes) {
    return (state) => {
        let something = false;
        for (let i = 0; i < updates.length; i++) {
            let up = updates[i](state);
            nodes[i].style.display = up ? "" : "none";
            if (up)
                something = true;
        }
        return something;
    };
}
/**
Represents a submenu wrapping a group of elements that start
hidden and expand to the right when hovered over or tapped.
*/
class DropdownSubmenu {
    /**
    Creates a submenu for the given group of menu elements. The
    following options are recognized:
    */
    constructor(content, 
    /**
    @internal
    */
    options = {}) {
        this.options = options;
        this.content = Array.isArray(content) ? content : [content];
    }
    /**
    Renders the submenu.
    */
    render(view) {
        let items = renderDropdownItems(this.content, view);
        let win = view.dom.ownerDocument.defaultView || window;
        let label = crelt("div", { class: prefix$1$1 + "-submenu-label" }, translate(view, this.options.label || ""));
        let wrap = crelt("div", { class: prefix$1$1 + "-submenu-wrap" }, label, crelt("div", { class: prefix$1$1 + "-submenu" }, items.dom));
        let listeningOnClose = null;
        label.addEventListener("mousedown", e => {
            e.preventDefault();
            markMenuEvent(e);
            setClass(wrap, prefix$1$1 + "-submenu-wrap-active", false);
            if (!listeningOnClose)
                win.addEventListener("mousedown", listeningOnClose = () => {
                    if (!isMenuEvent(wrap)) {
                        wrap.classList.remove(prefix$1$1 + "-submenu-wrap-active");
                        win.removeEventListener("mousedown", listeningOnClose);
                        listeningOnClose = null;
                    }
                });
        });
        function update(state) {
            let inner = items.update(state);
            wrap.style.display = inner ? "" : "none";
            return inner;
        }
        return { dom: wrap, update };
    }
}
/**
Render the given, possibly nested, array of menu elements into a
document fragment, placing separators between them (and ensuring no
superfluous separators appear when some of the groups turn out to
be empty).
*/
function renderGrouped(view, content) {
    let result = document.createDocumentFragment();
    let updates = [], separators = [];
    for (let i = 0; i < content.length; i++) {
        let items = content[i], localUpdates = [], localNodes = [];
        for (let j = 0; j < items.length; j++) {
            let { dom, update } = items[j].render(view);
            let span = crelt("span", { class: prefix$1$1 + "item" }, dom);
            result.appendChild(span);
            localNodes.push(span);
            localUpdates.push(update);
        }
        if (localUpdates.length) {
            updates.push(combineUpdates(localUpdates, localNodes));
            if (i < content.length - 1)
                separators.push(result.appendChild(separator()));
        }
    }
    function update(state) {
        let something = false, needSep = false;
        for (let i = 0; i < updates.length; i++) {
            let hasContent = updates[i](state);
            if (i)
                separators[i - 1].style.display = needSep && hasContent ? "" : "none";
            needSep = hasContent;
            if (hasContent)
                something = true;
        }
        return something;
    }
    return { dom: result, update };
}
function separator() {
    return crelt("span", { class: prefix$1$1 + "separator" });
}
/**
A set of basic editor-related icons. Contains the properties
`join`, `lift`, `selectParentNode`, `undo`, `redo`, `strong`, `em`,
`code`, `link`, `bulletList`, `orderedList`, and `blockquote`, each
holding an object that can be used as the `icon` option to
`MenuItem`.
*/
const icons = {
    join: {
        width: 800, height: 900,
        path: "M0 75h800v125h-800z M0 825h800v-125h-800z M250 400h100v-100h100v100h100v100h-100v100h-100v-100h-100z"
    },
    lift: {
        width: 1024, height: 1024,
        path: "M219 310v329q0 7-5 12t-12 5q-8 0-13-5l-164-164q-5-5-5-13t5-13l164-164q5-5 13-5 7 0 12 5t5 12zM1024 749v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12zM1024 530v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 310v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 91v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12z"
    },
    selectParentNode: { text: "\u2b1a", css: "font-weight: bold" },
    undo: {
        width: 1024, height: 1024,
        path: "M761 1024c113-206 132-520-313-509v253l-384-384 384-384v248c534-13 594 472 313 775z"
    },
    redo: {
        width: 1024, height: 1024,
        path: "M576 248v-248l384 384-384 384v-253c-446-10-427 303-313 509-280-303-221-789 313-775z"
    },
    strong: {
        width: 805, height: 1024,
        path: "M317 869q42 18 80 18 214 0 214-191 0-65-23-102-15-25-35-42t-38-26-46-14-48-6-54-1q-41 0-57 5 0 30-0 90t-0 90q0 4-0 38t-0 55 2 47 6 38zM309 442q24 4 62 4 46 0 81-7t62-25 42-51 14-81q0-40-16-70t-45-46-61-24-70-8q-28 0-74 7 0 28 2 86t2 86q0 15-0 45t-0 45q0 26 0 39zM0 950l1-53q8-2 48-9t60-15q4-6 7-15t4-19 3-18 1-21 0-19v-37q0-561-12-585-2-4-12-8t-25-6-28-4-27-2-17-1l-2-47q56-1 194-6t213-5q13 0 39 0t38 0q40 0 78 7t73 24 61 40 42 59 16 78q0 29-9 54t-22 41-36 32-41 25-48 22q88 20 146 76t58 141q0 57-20 102t-53 74-78 48-93 27-100 8q-25 0-75-1t-75-1q-60 0-175 6t-132 6z"
    },
    em: {
        width: 585, height: 1024,
        path: "M0 949l9-48q3-1 46-12t63-21q16-20 23-57 0-4 35-165t65-310 29-169v-14q-13-7-31-10t-39-4-33-3l10-58q18 1 68 3t85 4 68 1q27 0 56-1t69-4 56-3q-2 22-10 50-17 5-58 16t-62 19q-4 10-8 24t-5 22-4 26-3 24q-15 84-50 239t-44 203q-1 5-7 33t-11 51-9 47-3 32l0 10q9 2 105 17-1 25-9 56-6 0-18 0t-18 0q-16 0-49-5t-49-5q-78-1-117-1-29 0-81 5t-69 6z"
    },
    code: {
        width: 896, height: 1024,
        path: "M608 192l-96 96 224 224-224 224 96 96 288-320-288-320zM288 192l-288 320 288 320 96-96-224-224 224-224-96-96z"
    },
    link: {
        width: 951, height: 1024,
        path: "M832 694q0-22-16-38l-118-118q-16-16-38-16-24 0-41 18 1 1 10 10t12 12 8 10 7 14 2 15q0 22-16 38t-38 16q-8 0-15-2t-14-7-10-8-12-12-10-10q-18 17-18 41 0 22 16 38l117 118q15 15 38 15 22 0 38-14l84-83q16-16 16-38zM430 292q0-22-16-38l-117-118q-16-16-38-16-22 0-38 15l-84 83q-16 16-16 38 0 22 16 38l118 118q15 15 38 15 24 0 41-17-1-1-10-10t-12-12-8-10-7-14-2-15q0-22 16-38t38-16q8 0 15 2t14 7 10 8 12 12 10 10q18-17 18-41zM941 694q0 68-48 116l-84 83q-47 47-116 47-69 0-116-48l-117-118q-47-47-47-116 0-70 50-119l-50-50q-49 50-118 50-68 0-116-48l-118-118q-48-48-48-116t48-116l84-83q47-47 116-47 69 0 116 48l117 118q47 47 47 116 0 70-50 119l50 50q49-50 118-50 68 0 116 48l118 118q48 48 48 116z"
    },
    bulletList: {
        width: 768, height: 896,
        path: "M0 512h128v-128h-128v128zM0 256h128v-128h-128v128zM0 768h128v-128h-128v128zM256 512h512v-128h-512v128zM256 256h512v-128h-512v128zM256 768h512v-128h-512v128z"
    },
    orderedList: {
        width: 768, height: 896,
        path: "M320 512h448v-128h-448v128zM320 768h448v-128h-448v128zM320 128v128h448v-128h-448zM79 384h78v-256h-36l-85 23v50l43-2v185zM189 590c0-36-12-78-96-78-33 0-64 6-83 16l1 66c21-10 42-15 67-15s32 11 32 28c0 26-30 58-110 112v50h192v-67l-91 2c49-30 87-66 87-113l1-1z"
    },
    blockquote: {
        width: 640, height: 896,
        path: "M0 448v256h256v-256h-128c0 0 0-128 128-128v-128c0 0-256 0-256 256zM640 320v-128c0 0-256 0-256 256v256h256v-256h-128c0 0 0-128 128-128z"
    }
};
/**
Menu item for the `joinUp` command.
*/
const joinUpItem = new MenuItem({
    title: "Join with above block",
    run: joinUp,
    select: state => joinUp(state),
    icon: icons.join
});
/**
Menu item for the `undo` command.
*/
let undoItem = new MenuItem({
    title: "Undo last change",
    run: undo,
    enable: state => undo(state),
    icon: icons.undo
});
/**
Menu item for the `redo` command.
*/
let redoItem = new MenuItem({
    title: "Redo last undone change",
    run: redo,
    enable: state => redo(state),
    icon: icons.redo
});
/**
Build a menu item for wrapping the selection in a given node type.
Adds `run` and `select` properties to the ones present in
`options`. `options.attrs` may be an object that provides
attributes for the wrapping node.
*/
function wrapItem(nodeType, options) {
    let passedOptions = {
        run(state, dispatch) {
            return wrapIn(nodeType, options.attrs)(state, dispatch);
        },
        select(state) {
            return wrapIn(nodeType, options.attrs)(state);
        }
    };
    for (let prop in options)
        passedOptions[prop] = options[prop];
    return new MenuItem(passedOptions);
}
/**
Build a menu item for changing the type of the textblock around the
selection to the given type. Provides `run`, `active`, and `select`
properties. Others must be given in `options`. `options.attrs` may
be an object to provide the attributes for the textblock node.
*/
function blockTypeItem(nodeType, options) {
    let command = setBlockType(nodeType, options.attrs);
    let passedOptions = {
        run: command,
        enable(state) { return command(state); },
        active(state) {
            let { $from, to, node } = state.selection;
            if (node)
                return node.hasMarkup(nodeType, options.attrs);
            return to <= $from.end() && $from.parent.hasMarkup(nodeType, options.attrs);
        }
    };
    for (let prop in options)
        passedOptions[prop] = options[prop];
    return new MenuItem(passedOptions);
}
// Work around classList.toggle being broken in IE11
function setClass(dom, cls, on) {
    if (on)
        dom.classList.add(cls);
    else
        dom.classList.remove(cls);
}

const prefix$3 = "ProseMirror-menubar";
function isIOS() {
    if (typeof navigator == "undefined")
        return false;
    let agent = navigator.userAgent;
    return !/Edge\/\d/.test(agent) && /AppleWebKit/.test(agent) && /Mobile\/\w+/.test(agent);
}
/**
A plugin that will place a menu bar above the editor. Note that
this involves wrapping the editor in an additional `<div>`.
*/
function menuBar(options) {
    return new Plugin({
        view(editorView) { return new MenuBarView(editorView, options); }
    });
}
class MenuBarView {
    constructor(editorView, options) {
        this.editorView = editorView;
        this.options = options;
        this.spacer = null;
        this.maxHeight = 0;
        this.widthForMaxHeight = 0;
        this.floating = false;
        this.scrollHandler = null;
        this.wrapper = crelt("div", { class: prefix$3 + "-wrapper" });
        this.menu = this.wrapper.appendChild(crelt("div", { class: prefix$3 }));
        this.menu.className = prefix$3;
        if (editorView.dom.parentNode)
            editorView.dom.parentNode.replaceChild(this.wrapper, editorView.dom);
        this.wrapper.appendChild(editorView.dom);
        let { dom, update } = renderGrouped(this.editorView, this.options.content);
        this.contentUpdate = update;
        this.menu.appendChild(dom);
        this.update();
        if (options.floating && !isIOS()) {
            this.updateFloat();
            let potentialScrollers = getAllWrapping(this.wrapper);
            this.scrollHandler = (e) => {
                let root = this.editorView.root;
                if (!(root.body || root).contains(this.wrapper))
                    potentialScrollers.forEach(el => el.removeEventListener("scroll", this.scrollHandler));
                else
                    this.updateFloat(e.target.getBoundingClientRect ? e.target : undefined);
            };
            potentialScrollers.forEach(el => el.addEventListener('scroll', this.scrollHandler));
        }
    }
    update() {
        this.contentUpdate(this.editorView.state);
        if (this.floating) {
            this.updateScrollCursor();
        }
        else {
            if (this.menu.offsetWidth != this.widthForMaxHeight) {
                this.widthForMaxHeight = this.menu.offsetWidth;
                this.maxHeight = 0;
            }
            if (this.menu.offsetHeight > this.maxHeight) {
                this.maxHeight = this.menu.offsetHeight;
                this.menu.style.minHeight = this.maxHeight + "px";
            }
        }
    }
    updateScrollCursor() {
        let selection = this.editorView.root.getSelection();
        if (!selection.focusNode)
            return;
        let rects = selection.getRangeAt(0).getClientRects();
        let selRect = rects[selectionIsInverted(selection) ? 0 : rects.length - 1];
        if (!selRect)
            return;
        let menuRect = this.menu.getBoundingClientRect();
        if (selRect.top < menuRect.bottom && selRect.bottom > menuRect.top) {
            let scrollable = findWrappingScrollable(this.wrapper);
            if (scrollable)
                scrollable.scrollTop -= (menuRect.bottom - selRect.top);
        }
    }
    updateFloat(scrollAncestor) {
        let parent = this.wrapper, editorRect = parent.getBoundingClientRect(), top = scrollAncestor ? Math.max(0, scrollAncestor.getBoundingClientRect().top) : 0;
        if (this.floating) {
            if (editorRect.top >= top || editorRect.bottom < this.menu.offsetHeight + 10) {
                this.floating = false;
                this.menu.style.position = this.menu.style.left = this.menu.style.top = this.menu.style.width = "";
                this.menu.style.display = "";
                this.spacer.parentNode.removeChild(this.spacer);
                this.spacer = null;
            }
            else {
                let border = (parent.offsetWidth - parent.clientWidth) / 2;
                this.menu.style.left = (editorRect.left + border) + "px";
                this.menu.style.display = editorRect.top > (this.editorView.dom.ownerDocument.defaultView || window).innerHeight
                    ? "none" : "";
                if (scrollAncestor)
                    this.menu.style.top = top + "px";
            }
        }
        else {
            if (editorRect.top < top && editorRect.bottom >= this.menu.offsetHeight + 10) {
                this.floating = true;
                let menuRect = this.menu.getBoundingClientRect();
                this.menu.style.left = menuRect.left + "px";
                this.menu.style.width = menuRect.width + "px";
                if (scrollAncestor)
                    this.menu.style.top = top + "px";
                this.menu.style.position = "fixed";
                this.spacer = crelt("div", { class: prefix$3 + "-spacer", style: `height: ${menuRect.height}px` });
                parent.insertBefore(this.spacer, this.menu);
            }
        }
    }
    destroy() {
        if (this.wrapper.parentNode)
            this.wrapper.parentNode.replaceChild(this.editorView.dom, this.wrapper);
    }
}
// Not precise, but close enough
function selectionIsInverted(selection) {
    if (selection.anchorNode == selection.focusNode)
        return selection.anchorOffset > selection.focusOffset;
    return selection.anchorNode.compareDocumentPosition(selection.focusNode) == Node.DOCUMENT_POSITION_FOLLOWING;
}
function findWrappingScrollable(node) {
    for (let cur = node.parentNode; cur; cur = cur.parentNode)
        if (cur.scrollHeight > cur.clientHeight)
            return cur;
}
function getAllWrapping(node) {
    let res = [node.ownerDocument.defaultView || window];
    for (let cur = node.parentNode; cur; cur = cur.parentNode)
        res.push(cur);
    return res;
}

/*
 * Hurmet, copyright (c) by Ron Kok
 * Distributed under an MIT license: https://hurmet.org/LICENSE.txt
 *
 * Hurmet adds calculation cells to the ProseMirror rich text editor.
 * See https://hurmet.org and https://hurmet.org/docs/en/manual.html
 */

// utils.js

const isValidIdentifier$1 = /^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;
// Detect string interpolation ${varName}
const interpolateRegEx = /\$\{[^}\s]+\}/g;

const clone = obj => {
  // Clone a JavaScript object.
  // That is, make a deep copy that does not contain any reference to the original object.
  // This function works if the object contains only these types:
  //     boolean, number, bigint, string, null, undefined, date, array, object, Map
  // Any other type, or non-tree structure (e.g., "this"), cannot be handled by this function.
  // This is a modified version of https://stackoverflow.com/a/728694

  // Handle boolean, number, bigint, string, null, or undefined
  // eslint-disable-next-line eqeqeq
  if (null == obj || "object" != typeof obj) { return obj }

  if (obj instanceof Date) { return new Date().setTime(obj.valueOf()) }

  if (Array.isArray(obj)) {
    const copy = [];
    for (let i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy
  }

  if (obj instanceof Map) {
    const copy = new Map();
    for (const [key, value] of obj.entries()) {
      copy.set(key, clone(value));
    }
    return copy
  }

  if (obj instanceof Set) {
    return new Set([...obj])
  }

  if (typeof obj === "object") {
    const copy = Object.create(null);
    Object.entries(obj).forEach(([key, value]) => {
      copy[key] = clone(value);
    });
    return copy
  }

  throw new Error("Unable to clone obj! Its type isn't supported.")
};

const memoizeFunction = passedFunction => {
  const cache = {};
  return function(x) {
    if (x in cache) { return cache[x] }
    cache[x] = passedFunction(x);
    return cache[x]
  }
};

// A function to return an array containing all matches to a RegEx pattern.
const arrayOfRegExMatches = (regex, text) => {
  if (regex.constructor !== RegExp) { throw new Error('not RegExp') }
  const result = [];
  let match = null;

  /* eslint-disable no-cond-assign */
  if (regex.global) {
    while (match = regex.exec(text)) {
      result.push({ value: match[0], index: match.index, length: match[0].length });
    }
  } else if (match = regex.exec(text)) {
    result.push({ value: match[0], index: match.index, length: match[0].length });
  }
  /* eslint-enable no-cond-assign */

  return result
};

const verbatimArg = str => {
  if (str[0] !== "{" && str[0] !== "(" && str[0] !== "[") {
    return ""
  }
  const openDelimiter = str[0];
  const closeDelimiter = openDelimiter === "{"
    ? "}"
    : openDelimiter === "["
    ? "]"
    : ")";
  let result = "";
  let level = 1;
  for (let i = 1; i < str.length; i++) {
    const char = str[i];
    if (char === openDelimiter && ((openDelimiter === "(" || openDelimiter === "[")
      || (i === 1 || str[i - 1] !== "\\"))) {
      level += 1;
    } else if (char === closeDelimiter && ((closeDelimiter === ")" || closeDelimiter === "]")
        || (i === 1 || str[i - 1] !== "\\"))) {
      level -= 1;
    }
    if (level === 0) {
      return result
    }
    result += char;
  }
  return ""
};

const textAccent = {
  "\u0300": "`",
  "\u0301": "'",
  "\u0302": "^",
  "\u0303": "~",
  "\u0304": "=",
  "\u0305": "=",
  "\u0306": "u",
  "\u0307": ".",
  "\u0308": '"',
  "\u030A": 'r',
  "\u030c": "v"
};

const escapeRegEx = /[#$&%_~^]/g;
const accentRegEx$2 = /[\u0300-\u0308\u030A\u030c]/g;

const addTextEscapes = str => {
  // Insert escapes for # $ & % _ ~ ^ \ { }
  // TODO: \textbackslash.
  // TODO: How to escape { } without messing up Lex?
  if (str.length > 1) {
    let matches = arrayOfRegExMatches(escapeRegEx, str);
    let L = matches.length;
    if (L > 0) {
      for (let i = L - 1; i >= 0; i--) {
        const match = matches[i];
        const pos = match.index;
        if (match.value === "~") {
          str = str.slice(0, pos) + "\\textasciitilde " + str.slice(pos + 1);
        } else if (match.value === "^") {
          str = str.slice(0, pos) + "\\textasciicircum " + str.slice(pos + 1);
        } else if (pos === 0) {
          str = "\\" + str;
        } else {
          const pc = str.substr(pos - 1, 1);
          if (pc !== "\\") {
            str = str.slice(0, pos) + "\\" + str.slice(pos);
          }
        }
      }
    }
    matches = arrayOfRegExMatches(accentRegEx$2, str);
    L = matches.length;
    if (L > 0) {
      for (let i = L - 1; i >= 0; i--) {
        const match = matches[i];
        const pos = match.index;
        if (pos > 0) {
          str = str.slice(0, pos - 1) + "\\" + textAccent[match.value]
              + str.slice(pos - 1, pos) + str.slice(pos + 1);
        }
      }
    }
  }
  return str
};

const numeralFromSuperScript = ch => {
  // convert a superscript character, ⁰¹²³ etc, to the regular numeral equivalent.
  switch (ch) {
    case "²":
      return "2"
    case "³":
      return "3"
    case "⁻":
      return "-"
    case "¹":
      return "1"
    case "⁰":
      return "0"
    default:
      return String.fromCharCode(ch.charCodeAt(0) - 0x2040)
  }
};

// Trim spaces except for tabs. This is used to read tab-separated values (TSV).
const leadingSpaceRegEx$4 = /^[ \r\n\f]+/;
const trailingSpaceRegEx$2 = /[ \r\n\f]+$/;
const tablessTrim = str => {
  return str.replace(leadingSpaceRegEx$4, "").replace(trailingSpaceRegEx$2, "")
};

const midDotRegEx = /^(\*|·|\.|-[A-Za-z])/;
const exponentRegEx = /[⁰¹²³\u2074-\u2079⁻]/;

const unitTeXFromString = str => {
  // I wrap a unit name with an extra pair of braces {}.
  // Tt's a hint so that plugValsIntoEcho() can easily remove a unit name.
  let unit = " {\\text{";
  let inExponent = false;

  for (let i = 0; i < str.length; i++) {
    let ch = str.charAt(i);
    if (exponentRegEx.test(ch)) {
      ch = numeralFromSuperScript(ch);
    }
    if (midDotRegEx.test(str.slice(i))) {
      unit += "}\\mkern1mu{\\cdot}\\mkern1mu\\text{";
    } else if (/[0-9-]/.test(ch)) {
      ch = ch === "-" ? "\\text{-}" : ch;
      if (inExponent) {
        unit += ch;
      } else {
        unit += "}^{" + ch;
        inExponent = true;
      }
    } else if (ch === "^") {
      unit += "}^{";
      inExponent = true;
    } else if (inExponent) {
      unit += "}\\text{" + ch;
      inExponent = false;
    } else if (ch === "$") {
      unit += "\\$";
    } else {
      unit += ch;
    }
  }

  return unit + "}}"
};

// unit exponents of a number with no unit.
const allZeros = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0]);

// Data types
// Some operands will be two types at the same time, e.g. RATIONAL + MATRIX.
// So we'll enumerate data types in powers of two.
// That way, we can use a bit-wise "&" operator to test for an individual type.
const dt = Object.freeze({
  NULL: 0,
  RATIONAL: 1,
  COMPLEX: 2,
  BOOLEAN: 4,
  FROMCOMPARISON: 8,
  BOOLEANFROMCOMPARISON: 12, // 4 + 8, useful for chained comparisons
  STRING: 16,
  QUANTITY: 32, // Contains both a magnitude and a unit-of-measure
  DATE: 64, //     Number of seconds after start of Jan 1, 1970, UTC.
  RANGE: 128, //   as in:  1:10
  TUPLE: 256, //   Used for multiple assignment from a module.
  MAP: 512,  //    A key:value store with all the same data type the same unit
  ROWVECTOR: 1024,
  COLUMNVECTOR: 2048,
  MATRIX: 4096, // two dimensional
  DATAFRAME: 8192,
  MODULE: 16384, // contains user-defined functions
  ERROR: 32768,
  UNIT: 65536, // User-defined units.
  DRAWING: 131072,
  RICHTEXT: 262144,
  DICTIONARY: 524288,
  MACRO: 1048576,
  SPREADSHEET: 2097152
});

const errorMessages = Object.freeze({
  EN: {
    ERROR:     "Error. Hurmet does not understand the expression.",
    ERR_FUNC:  "@",
    BAD_FUN_NM:"Error. Unrecognized function name \"@\".",
    DIV:       "Error. Divide by zero.",
    NAN:       "Error. Value of $@$ is not numeric.",
    NANARG:    "Error. Argument to function $@$ must be numeric.",
    // eslint-disable-next-line max-len
    NANEL:     "Error. A numeric vector must have numeric elements. The value of $@$ is not numeric.",
    NULL:      "Error. Missing value for $@$.", // $@$ will be italic in TeX
    BAD_EQ:    'Error. Use "==" instead of "=" to check for equality.',
    V_NAME:    "Error. Variable $@$ not found.",
    F_NAME:    "Error. Function @ not found.",
    NAN_OP:    "Error. Arithmetic operation on a non-numeric value.",
    UNIT_ADD:  "Error. Adding incompatible units.",
    UNIT_COMP: "Error. Comparing incompatible units.",
    UNIT_APEND:"Error. Apppending incompatible units.",
    UNIT_RES:  "Error. Calculated units are not compatible with the desired result unit:",
    UNIT_MISS: "Error. No units specified for the result.",
    UNIT_IN:   "Error. Incorrect unit for input to function @.",
    UNIT_ARG:  "Error. Unit mis-match between arguments to function @.",
    UNIT_COL:  "Error. Data frame column @ has no units. Do not make a unit-aware call to it.",
    UNIT_AWARE: "Error. Calculation must be unit-aware in order to apply unit @",
    UNIT_UN:    "Error. Hurmet does not do unit aware calculations involving @",
    DATE:      "Error. Date required.",
    LOGIC:     "Error. Logic operation “@” on a non-boolean value.",
    FACT:      "Error. Factorial may be applied only to a unit-less non-negative integer.",
    PER:       "Error. Percentage may be applied only to a unit-less number.",
    BINOM:     "Error. Binomial may be applied only to unit-less numbers.",
    LOGF:      "Error. Argument to log!() must be a non-negative integer.",
    Γ0:        "Error. Γ(0) is infinite.",
    ΓPOLE:     "Error. Γ() of a negative integer is infinite.",
    LOGΓ:      "Error. Argument to Hurmet lgamma() must be a positive number.",
    TAN90:     "Error. tan($@$) is infinite.",
    ATRIG:     "Error. Input to @ must be between -1 and 1.",
    COT:       "Error. Input to @ must not be zero.",
    ASEC:      "Error. Absolute value of input to @ must be ≥ 1",
    STRING:    "Error. Text operand required.",
    NUMARGS:   "Error. Wrong number of arguments passed to function @.",
    NONSQUARE: "Error. Only a square matrix can be inverted.",
    SINGULAR:  "Error. Matrix is singular and cannot be inverted.",
    BAD_ROW_NAME:     "Error. Data frame does not have a row named @.",
    BAD_COLUMN_NAME:  "Error. Data frame does not have a column named @.",
    BAD_COLUMN_TYPE:  "Error. A map must have only one data type and one unit.",
    SINGLE_ARG:"Error. A call to a data frame must have two arguments in the brackets.",
    BAD_TYPE:  "Error. Unrecognized data type for $@$.",
    CONCAT:    "Error. Cannot add strings. Use \"&\" if concatenation is desired.",
    MATRIX_DIV:"Error. Cannot divide one matrix by another.",
    MATRIX_MOD:"Error. Cannot take the modulo of one matrix by another.",
    BAD_INDEX: "Error. Index to a matrix must be numeric.",
    FUNC_LINE: "Error in function @",
    BAD_BREAK: "Error in function @. break called outside of a loop",
    FETCH:     "Error. A fetch() function must be the only item in its expression.",
    STR_INDEX: "Error. The index to text may be only a real number or a range.",
    UNIT_NAME: "Error. Unrecognized unit name: @",
    INT_NUM:   "Error. Number display type \"@\" must be an integer.",
    TWO_MAPS:  "Error. Both operands are maps. Hurmet accepts only one.",
    BAD_FORMAT:"Error. Invalid format @.",
    BAD_PREC:  "Error. Significant digit specification must be between 1 and 15.",
    ZERO_ROOT: "Error. Zeroth root.",
    BAD_ROOT:  "Error while taking root.",
    UNREAL:    "Error. Argument to function \"@\" must be a real number.",
    BIGINDEX:  "Error. Index too large.",
    MIS_ELNUM: "Error. Mis-matched number of elements",
    // eslint-disable-next-line max-len
    CROSS:     "Error. Cross product can be performed only on three-vectors. Use * if you want element-wise multiplication.",
    QUANT_NUM: "Error. A Quantity must include a numeric magnitude.",
    CURRENCY:  "Error. Currency exchange rates must be defined before using a monetary unit.",
    DF_UNIT:   "Invalid unit \"&\" in data frame.",
    FORM_FRAC: "Error. Hurmet can do binary or hexadecimal format only on integers.",
    PRIVATE:   "Error. Function @ is not private.",
    INT_ARG:   "Error. The @ function can take only integers as arguments.",
    BAD_KEY:   "Error. Data structure does not contain key \"@\".",
    BAD_SHT_KEY: "Error. Spreadsheet does not contain key \"@\".",
    NUM_KEY:   "Error. A key must be a string, not a number.",
    IMMUT_UDF: `Error. Variable @ already contains a user-defined function.
                Hurmet cannot assign a different value to @.`,
    NO_PROP:   `Error. Cannot call a property from variable "@" because it has no properties.`,
    NOT_ARRAY: `Error. Cannot The second operand is not an array.`,
    MULT_MIS:  "Error. Mismatch in number of multiple assignment.",
    COUNT:     "Error. The count() function works only on strings.",
    NOT_VECTOR:"Error. Arguments to @() must be vectors.",
    BAD_DISPLAY:"Error. Result may not be suppressed. Use '?' display selector.",
    NA_COMPL_OP:"Error. \"@\" cannot be performed on a complex number.",
    NA_REAL:    "Error. \"@\" can be performed only a complex number.",
    ORIGIN:     "Error. Function \"@\" is undefined at the origin.",
    LOG_ZERO:   "Error. Logarithm of zero is negative infinity.",
    END_MISS:   "Error. Too few END statments in function @.",
    BAD_CONCAT: "Error. Unmatched dimensions.",
    BAD_KEYSTR: "Error. The key in a key:value pair must be a string.",
    BAD_APPEND: "Error. Can not append a @",
    MAP_APPEND: "Error. Can not append. Wrong data type.",
    BAD_TRANS:  "Error. Only a matrix can be transposed.",
    BAD_ARGS:   "Error. Wrong number of arguments to function @",
    BAD_SUM:    "Error. Second argument to sum function must be 1 or 2.",
    ZERO_STEP:  "Error. Step value must be > zero.",
    SHEET_INDEX:"Error. Bad column or row index.",
    UNSAVED:    "Error. The current document has not been saved.",
    UNIT_IN_MAT:"Error. Matrix elements cannot contain a unit." +
                " Write the unit outside the matrix."
  }
});

const errorOprnd = (errorCode, messageInsert) => {
  if (errorCode === "") { return { value: "Error", unit: null, dtype: dt.ERROR } }
  let msg = errorMessages["EN"][errorCode];
  if (msg === undefined) { return { value: "Error", unit: null, dtype: dt.ERROR } }
  if (messageInsert) {
    messageInsert = addTextEscapes(messageInsert);
    msg = msg.replace(/@/g, messageInsert);
  } else {
    msg = msg.replace(/@ ?/, "");
  }
  return { value: msg, unit: null, dtype: dt.ERROR }
};

/*
 * This file implements a rational number data type.
 * Each rational number, r, is held as an array containing two BigInts.
 * r[0] is the numerator and r[1] is the denominator.
 * Negative rationals have a negative numerator, not a negative denominator.
 *
 * The code in this file is heavily influenced by Chapter 5 of
 * __How JavaScript Works__ by Douglas Crockford
 */

const iZero = BigInt(0);
const iOne = BigInt(1);
const iTwo = BigInt(2);
const iTen = BigInt(10);
const zero = [iZero, iOne];
const one = [iOne, iOne];
const two = [iTwo, iOne];
const pi$1 = [BigInt("31415926535897932384626433832795028841971693993751"),
  BigInt("10000000000000000000000000000000000000000000000000")];
const e$1 = [BigInt("2718281828459045235360287471352662497757247093699959574966"),
  BigInt("1000000000000000000000000000000000000000000000000000000000")];
// reduced Planck constant
const hbar = [BigInt(1054571817),
  BigInt("10000000000000000000000000000000000000000000")];

const intAbs$1 = i => i >= iZero ? i : BigInt(-1) * i;  // absolute value of a BigInt

// eslint-disable-next-line max-len
const numberPattern = "^(-?)(?:(0x[0-9A-Fa-f]+)|([0-9]+)(?: ([0-9]+)\\/([0-9]+)|(?:\\.([0-9]+))?(?:e([+-]?[0-9]+)|(%))?))";
const numberRegEx$6 = new RegExp(numberPattern);
// Capturing groups:
//    [1] sign
//    [2] hexadecimal integer
//    [3] integer part
//    [4] numerator of a mixed fraction
//    [5] denominator of a mixed fraction
//    [6] decimal fraction of significand, not including decimal point
//    [7] exponent of a number in scientific notation
//    [8] percentage sign

const fromNumber = num => {
  // Convert a JavaScript Number to a rational.
  if (Number.isInteger(num)) {
    return [BigInt(num), iOne]
  } else {
    const parts = num.toExponential().match(numberRegEx$6);
    const decimalFrac = parts[6] || "";
    const exp = BigInt(parts[7]) - BigInt(decimalFrac.length);
    if (exp < 0) {
      return [BigInt(parts[1] + parts[3] + decimalFrac), iTen ** -exp]
    } else if (parts[5]) {
      const denominator = BigInt(parts[5]);
      return normalize(
        [BigInt(parts[1] + parts[3]) * denominator + BigInt(parts[4]) ])
    } else {
      return normalize([BigInt(parts[1] + parts[3] + decimalFrac) * iTen ** exp, iOne])
    }
  }
};

const fromString = str => {
  // Convert an author's input string to a number.
  const parts = str.match(numberRegEx$6);
  let r;
  if (parts[5]) {
    // mixed fraction
    const denominator = BigInt(parts[5]);
    const numerator = BigInt(parts[1] + parts[3]) * denominator + BigInt(parts[4]);
    r = normalize([numerator, denominator]);

  } else if (parts[2]) {
    // hexadecimal
    r = [BigInt(parts[2]), iOne];

  } else {
    // decimal
    const decimalFrac = parts[6] || "";
    const numerator = BigInt(parts[3] + decimalFrac);
    const exp = parts[7]
      ? BigInt(parts[7]) - BigInt(decimalFrac.length)  // scientific notation.
      : parts[8]
      ? BigInt(-2) - BigInt(decimalFrac.length)  // percentage.
      : BigInt(0) - BigInt(decimalFrac.length);
    r = (exp < 0)
      ? [numerator, iTen ** -exp]
      : normalize([numerator * iTen ** exp, iOne]);
  }
  if (parts[1]) { r = negate$1(r); }
  return r
};

const gcdi = (a, b) => {
  // Greatest common divisor of two big integers
  a = intAbs$1(a);
  b = intAbs$1(b);
  while (b !== iZero) {
    const remainder = a % b;
    a = b;
    b = remainder;
  }
  return a
};

const gcd = (m, n) => {
  // Greatest common divisor of two rationals
  if (!Rnl.isInteger(m) || !Rnl.isInteger(n)) { return errorOprnd("INT_ARG", "gcd") }
  return [gcdi(m[0] / m[1], n[0] / n[1]), iOne]
};

const normalize = r => {
  const [numerator, denominator] = r;
  if (denominator === iOne) { return r }
  const gcD = gcdi(numerator, denominator);
  return gcD === iOne ? r : [numerator / gcD, denominator / gcD]
};

const isRational = a => {
  return Array.isArray(a) && a.length === 2
    && typeof a[0] === "bigint" && typeof a[1] === "bigint"
};

const isInteger = r => r[1] === iOne || (r[0] % r[1]) === iZero;

const isZero = r => r[0] === iZero;

const isNegative = r => r[0] < iZero;
const isPositive = r => r[0] > iZero;
const intSign = i => i >= iZero ? iOne : BigInt(-1);
const sign = r => isPositive(r) ? one : isZero(r) ? zero : negate$1(one);

const negate$1 = r => [BigInt(-1) * r[0], r[1]];

const abs$1 = r => {
  const numerator = r[0] < iZero ? BigInt(-1) * r[0] : r[0];
  return [numerator, r[1]]
};

const increment$1 = r => [r[0] + r[1], r[1]];

const decrement$1 = r => [r[0] - r[1], r[1]];

const floor = r => {
  if (r[0] % r[1] === iZero) { return [r[0] / r[1], iOne] }
  return (r[0] >= iZero)
    ? [r[0] / r[1], iOne]
    : [r[0] / r[1] - iOne, iOne]
};

const ceil = r => {
  if (r[0] % r[1] === iZero) { return [r[0] / r[1], iOne] }
  return (r[0] >= iZero)
    ? [r[0] / r[1] + iOne, iOne]
    : [r[0] / r[1], iOne]
};

const add$1 = (a, b) => {
  return a[1] === b[1]
    ? [a[0] + b[0], a[1]]
    : normalize([a[0] * b[1] + b[0] * a[1], a[1] * b[1]])
};

const subtract$1 = (a, b) => {
  return (a[1] === b[1])
    ? [a[0] - b[0], a[1]]
    : normalize([a[0] * b[1] - b[0] * a[1], a[1] * b[1]])
};

const multiply$1 = (a, b) => [a[0] * b[0], a[1] * b[1]];

const divide$1 = (a, b) => {
  let numerator = a[0] * b[1];
  let denominator = a[1] * b[0];
  if (denominator < 0) {
    // Move the negative from the denominator to the numerator.
    numerator *= BigInt(-1);
    denominator *= BigInt(-1);
  }
  return [numerator, denominator]
};

const power$1 = (a, b) => {
  if (b[0] === iZero) {
    return [iOne, iOne]
  } else {
    b = normalize(b);
    let result;
    try {
      result = isInteger(b) && isNegative(b)
        ? [a[1] ** (BigInt(-1) * b[0]), a[0] ** (BigInt(-1) * b[0])]
        : isInteger(b)
        ? [a[0] ** b[0], a[1] ** b[0]]
        : isPositive(a) || greaterThan(b, one) || lessThan(b, negate$1(one))
        ? fromNumber(toNumber(a) ** toNumber(b))
        : areEqual(mod(b, two), one)
        ? fromNumber(-1 * (-1 * toNumber(a)) ** toNumber(b))
        : errorOprnd("BAD_ROOT");
    // eslint-disable-next-line no-unused-vars
    } catch (err) {
      result = fromNumber(toNumber(a) ** toNumber(b));
    }
    return result
  }
};

const sqrt$1 = r => fromNumber(Math.sqrt(toNumber(r)));

const exp$1 = r => fromNumber(Math.exp(toNumber(r)));

const reciprocal = r => {
  let numerator = r[1];
  let denominator = r[0];
  if (denominator < 0) {
    numerator *= BigInt(-1);
    denominator *= BigInt(-1);
  }
  return [numerator, denominator]
};

const hypot = (a, b) => {
  // Ref: https://www.johndcook.com/blog/2010/06/02/whats-so-hard-about-finding-a-hypotenuse/
  const absA = abs$1(a);
  const absB = abs$1(b);
  const maximum = max(absA, absB);
  const minimum = min(absA, absB);
  const r = Rnl.divide(minimum, maximum);
  return Rnl.multiply(maximum, sqrt$1(Rnl.increment(Rnl.multiply(r, r))))
};

const mod = (a, b) => {
  const quotient = divide$1(normalize(a), normalize(b));
  return [intAbs$1(quotient[0] % quotient[1]), iOne]
};

const rem = (a, b) => {
  const quotient = divide$1(normalize(a), normalize(b));
  return [quotient[0] % quotient[1], iOne]
};

const areEqual = (a, b) => {
  return (a[1] === b[1])
    ? a[0] === b[0]
    : a[0] * b[1] === a[1] * b[0]
};

const lessThan = (a, b) => {
  return (isNegative(a) !== isNegative(b))
    ? isNegative(a)
    : isNegative(subtract$1(a, b))
};

const greaterThan = (a, b) => {
  return (isPositive(a) !== isPositive(b))
    ? isPositive(a)
    : isPositive(subtract$1(a, b))
};

const lessThanOrEqualTo = (a, b) => lessThan(a, b) || areEqual(a, b);

const greaterThanOrEqualTo = (a, b) => greaterThan(a, b) || areEqual(a, b);

const max = (a, b) => greaterThan(a, b) ? [a[0], a[1]] : [b[0], b[1]];

const min = (a, b) => lessThan(a, b) ? [a[0], a[1]] : [b[0], b[1]];

const cos$1 = x => {
  return areEqual(x, divide$1(pi$1, two))
    ? zero
    : fromNumber(Math.cos(toNumber(x)))
};

const sin$1 = x => fromNumber(Math.sin(toNumber(x)));

const tan = x => {
  if (areEqual(x, divide$1(pi$1, two))) {
    return errorOprnd("TAN90", "π/2")
  }
  return fromNumber(Math.tan(toNumber(x)))
};

const cosh = x => {
  // cosh(n) = (eⁿ + e⁻ⁿ) / 2
  const num = toNumber(x);
  return fromNumber((Math.exp(num) + Math.exp(-num)) / 2)
};

const sinh = x => {
  // sinh(n) = (eⁿ - e⁻ⁿ) / 2
  const num = toNumber(x);
  return fromNumber((Math.exp(num) - Math.exp(-num)) / 2)
};

const tanh = x => {
  // tanh(n) = (eⁿ - e⁻ⁿ) / (eⁿ + e⁻ⁿ)
  const num = toNumber(x);
  return fromNumber(
    (Math.exp(num) - Math.exp(-num)) / (Math.exp(num) + Math.exp(-num))
  )
};

const toNumber = r => {
  // Return a JavaScript Number
  const num = Number(r[0]) / Number(r[1]);  // May be imprecise.
  if (!isNaN(num) && num !== Infinity ) { return num }
  const numStr = toStringSignificant(r, 20);
  return Number(numStr)
};

const toStringSignificant = (r, numSignificantDigits) => {
  // Return a string rounded to numSignificantDigits.
  if (isZero(r)) {
    return "0"
  } else {
    const quotient = intAbs$1(r[0] / r[1]);
    if (quotient > 0) {
      return toString(r, numSignificantDigits - String(quotient).length)
    } else {
      const inverseQuotientLength = String(intAbs$1(r[1] / r[0])).length;
      return toString(r, inverseQuotientLength + numSignificantDigits - 1)
    }
  }
};

const toString = (r, numDigitsAfterDecimal) => {
  // Return a string rounded to numDigitsAfterDecimal.
  if (isZero(r)) {
    return "0"
  } else if (numDigitsAfterDecimal < 0) {
    const N = -numDigitsAfterDecimal;
    const significand = toString(divide$1(r, [iTen ** BigInt(N), iOne]), 0);
    return significand + "0".repeat(N)
  } else {
    const [numerator, denominator] = normalize(r);
    const quotient = numerator / denominator;
    let remainder = numerator % denominator;
    let result = String(quotient);
    if (remainder === iZero && numDigitsAfterDecimal > 0) {
      result += "." + "0".repeat(numDigitsAfterDecimal);
    } else if (remainder !== iZero) {
      remainder = intAbs$1(remainder);
      const bigNumDigitsAfterDecimal = (iTen ** BigInt(numDigitsAfterDecimal));
      const newNumerator = remainder * bigNumDigitsAfterDecimal;
      let fractus = newNumerator / denominator;
      const residue = newNumerator % denominator;
      if (numDigitsAfterDecimal === 0) {
        return (intAbs$1(iTwo * residue) >= intAbs$1(denominator))
          ? String((intAbs$1(quotient) + iOne) * intSign(quotient))
          : result
      }
      if (intAbs$1(iTwo * residue) >= intAbs$1(denominator)) {
        fractus = fractus + iOne;
        if (fractus === bigNumDigitsAfterDecimal) {
          return String((intAbs$1(quotient) + iOne) * intSign(quotient)) +
            "." + "0".repeat(numDigitsAfterDecimal)
        }
      }
      result += "." + String(fractus).padStart(numDigitsAfterDecimal, "0");
    }
    return result
  }
};

// eslint-disable-next-line max-len
const preComputedFactorials = ["1", "1", "2", "6", "24", "120", "720", "5040", "40320", "362880", "3628800", "39916800", "479001600", "6227020800", "87178291200", "1307674368000", "20922789888000", "355687428096000", "6402373705728000", "121645100408832000", "2432902008176640000", "51090942171709440000", "1124000727777607680000", "25852016738884976640000", "620448401733239439360000", "15511210043330985984000000", "403291461126605635584000000", "10888869450418352160768000000", "304888344611713860501504000000", "8841761993739701954543616000000", "265252859812191058636308480000000", "8222838654177922817725562880000000", "263130836933693530167218012160000000", "8683317618811886495518194401280000000", "295232799039604140847618609643520000000", "10333147966386144929666651337523200000000", "371993326789901217467999448150835200000000", "13763753091226345046315979581580902400000000", "523022617466601111760007224100074291200000000", "20397882081197443358640281739902897356800000000", "815915283247897734345611269596115894272000000000", "33452526613163807108170062053440751665152000000000", "1405006117752879898543142606244511569936384000000000", "60415263063373835637355132068513997507264512000000000", "2658271574788448768043625811014615890319638528000000000", "119622220865480194561963161495657715064383733760000000000", "5502622159812088949850305428800254892961651752960000000000", "258623241511168180642964355153611979969197632389120000000000", "12413915592536072670862289047373375038521486354677760000000000", "608281864034267560872252163321295376887552831379210240000000000", "30414093201713378043612608166064768844377641568960512000000000000", "1551118753287382280224243016469303211063259720016986112000000000000", "80658175170943878571660636856403766975289505440883277824000000000000", "4274883284060025564298013753389399649690343788366813724672000000000000", "230843697339241380472092742683027581083278564571807941132288000000000000", "12696403353658275925965100847566516959580321051449436762275840000000000000", "710998587804863451854045647463724949736497978881168458687447040000000000000", "40526919504877216755680601905432322134980384796226602145184481280000000000000", "2350561331282878571829474910515074683828862318181142924420699914240000000000000", "138683118545689835737939019720389406345902876772687432540821294940160000000000000", "8320987112741390144276341183223364380754172606361245952449277696409600000000000000", "507580213877224798800856812176625227226004528988036003099405939480985600000000000000", "31469973260387937525653122354950764088012280797258232192163168247821107200000000000000", "1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000", "126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000", "8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000", "544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000", "36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000", "2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000", "171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000", "11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000", "850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000", "61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000", "4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000", "330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000", "24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000", "1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000", "145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000", "11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000", "894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000", "71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000", "5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000", "475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000", "39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000", "3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000", "281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000", "24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000", "2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000", "185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000", "16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000", "1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000", "135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000", "12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000", "1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000", "108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000", "10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000", "991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000", "96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000", "9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000", "933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000", "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"];
// eslint-disable-next-line max-len
const preComputedDoubleFactorials = ["1", "1", "2", "3", "8", "15", "48", "105", "384", "945", "3840", "10395", "46080", "135135", "645120", "2027025", "10321920", "34459425", "185794560", "654729075", "3715891200", "13749310575", "81749606400", "316234143225", "1961990553600", "7905853580625", "51011754393600", "213458046676875", "1428329123020800"];

const factorial = (n) => {
  if (lessThan(n, [BigInt(101), iOne])) {
    return fromString(preComputedFactorials[toNumber(n)])
  } else {
    return lanczos$1(increment$1(n))
  }
};

const doubleFactorial = n => {
  if (lessThan(n, [BigInt(29), iOne])) {
    return fromString(preComputedDoubleFactorials[toNumber(n)])
  } else {
    let r = n;
    for (let i = Rnl.toNumber(n) - 2; i > 0; i -= 2) {
      r = multiply$1(r, fromNumber(i));
    }
    return r
  }
};

const lanczos$1 = xPlusOne => {
  // Lanczos approximation of Gamma function.
  // Coefficients are from 2004 PhD thesis by Glendon Pugh.
  // *An Analysis of the Lanczos Gamma Approximation*
  // The following equation is from p. 116 of the Pugh thesis:
  // Γ(x+1) ≈ 2 * √(e / π) * ((x + 10.900511 + 0.5) / e) ^ (x + 0.5) * sum
  const x = subtract$1(xPlusOne, one);
  const term1 = multiply$1(two, sqrt$1(divide$1(e$1, pi$1)));
  const term2 = power$1(divide$1(add$1(x, fromNumber(11.400511)), e$1), add$1(x, [iOne, iTwo]));

  // Coefficients from Pugh, Table 8.5
  const d = ["2.48574089138753565546e-5", "1.05142378581721974210",
    "-3.45687097222016235469", "4.51227709466894823700", "-2.98285225323576655721",
    "1.05639711577126713077", "-0.195428773191645869583", "0.0170970543404441224307",
    "-0.000571926117404305781283", "0.00000463399473359905636708",
    "-0.00000000271994908488607703910"];

  // sum = d_0 + ∑_(k=1)^10 d_k/(x+k)
  let sum = fromString(d[0]);
  for (let k = 1; k <= 10; k++) {
    sum = add$1(sum, divide$1(fromString(d[k]), add$1(x, fromNumber(k))));
  }

  return multiply$1(multiply$1(term1, term2), sum)
};

const Rnl = Object.freeze({
  fromNumber,
  fromString,
  normalize,
  isRational,
  isInteger,
  isZero,
  isNegative,
  isPositive,
  sign,
  negate: negate$1,
  abs: abs$1,
  increment: increment$1,
  decrement: decrement$1,
  exp: exp$1,
  floor,
  ceil,
  add: add$1,
  subtract: subtract$1,
  multiply: multiply$1,
  divide: divide$1,
  reciprocal,
  gcd,
  hbar,
  mod,
  rem,
  hypot,
  one,
  pi: pi$1,
  power: power$1,
  sqrt: sqrt$1,
  two,
  cos: cos$1,
  sin: sin$1,
  tan,
  cosh,
  sinh,
  tanh,
  areEqual,
  lessThan,
  greaterThan,
  lessThanOrEqualTo,
  greaterThanOrEqualTo,
  factorial,
  doubleFactorial,
  lanczos: lanczos$1,
  max,
  min,
  numberPattern,
  toNumber,
  toString,
  toStringSignificant,
  zero
});

const siPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k",
  "M", "G", "T", "P", "E", "Z", "Y"];

const groupByThreeRegEx = /\B(?=(\d{3})+$)/g;
const groupByFourRegEx = /\B(?=(\d{4})+$)/g;  // use sometimes in China
// Grouping as common in south Asia: 10,10,000
const groupByLakhCroreRegEx = /(\d)(?=(\d\d)+\d$)/g;

const formatRegEx = /^([beEfhkmprsStx%])?(-?[\d]+)?([∠°]{0,2})?$/;

const superscript$1 = str => {
  // Convert a numeral string to Unicode superscript characters.
  // Used for denominator in mixed fractions/
  let result = "";
  for (let i = 0; i < str.length; i++) {
    const charCode = str.charCodeAt(i);
    result += (charCode === 0x31)
      ? "¹"
      : charCode === 0x32
      ? "²"
      : charCode === 0x33
      ? "³"
      : String.fromCharCode(charCode + 0x2040);
  }
  return result
};

const subscript = str => {
  // Convert a numeral string to Unicode subscript characters.
  // Used for mixed fraction denominators.
  let result = "";
  for (let i = 0; i < str.length; i++) {
    result += String.fromCharCode(str.charCodeAt(i) + 0x2050);
  }
  return result
};

const texFromMixedFraction = (numParts) => {
  return (numParts[1] ? "-" : "") +
    numParts[3] + "\\,\\class{special-fraction}{\\text{" +
    superscript$1(numParts[4]) + "\u2044" + subscript(numParts[5]) + "}}"
};

const intAbs = i => i >= BigInt(0) ? i : BigInt(-1) * i;  // absolute value of a BigInt

const roundedString = (r, spec) => {
  // Return a string rounded to the correct number of digits
  const N = spec.numDigits;

  switch (spec.ftype) {
    case "h": {
      // Round a fraction, but not an integer, to N significant digits.
      const integerStr = String(Rnl.toString(r, 0));
      if (integerStr.replace("-", "").length >= N) { return integerStr }
      if (N < 1 || N > 15) { return errorOprnd("BAD_PREC") }
      return Rnl.toNumber(r).toPrecision(N)
    }

    case "f":
    case "%":
      // Exactly N digits after the decimal.
      return Rnl.toString(r, N)

    case "r":
    case "p": {
      // Round to N significant digits
      if (N < 1 || N > 15) { return errorOprnd("BAD_PREC") }
      const numStr = Rnl.toNumber(r).toPrecision(N);
      return numStr.indexOf("e") > -1 ? Number(numStr).toPrecision() : numStr
    }

    case "s":
    case "S":
    case "e":
    case "E":
    case "n":
    case "N":
    case "k":
      // Some variety of scientific notation.
      if (N < 1 || N > 15) { return errorOprnd("BAD_PREC") }
      return Rnl.toNumber(r).toExponential(N - 1).replace("+", "")

    default: {
      r = Rnl.normalize(r);
      const sign =  Rnl.isNegative(r) ? "-" : "";
      const numerator = intAbs(r[0]);
      const denominator = r[1];

      switch (spec.ftype) {
        case "m": {
          // Mixed fraction
          const quotientStr = String(numerator / denominator);
          const remainder = numerator % denominator;
          return sign + quotientStr + "\u00a0" + superscript$1(remainder) +
            "⁄" + subscript(denominator)
        }

        case "t":
          // Truncate to integer
          return sign + String(numerator / denominator)

        case "b":
        case "x":
        case "X":
          // binary or hexadecimal integer
          if (denominator !== BigInt(1)) { return errorOprnd("INT_NUM", spec.ftype) }
          if (numerator <= Number.MAX_SAFE_INTEGER) {
            return (spec.ftype === "b")
              ? sign + "0b" + Number(numerator).toString(2)
              : spec.ftype === "x"
              ? sign + "0x" + Number(numerator).toString(16)
              : sign + "0x" + Number(numerator).toString(16).toUpperCase()
          } else {
            // TODO: display large hex or binary.
            return ""
          }
      }
    }
  }
};

const formattedInteger = (intStr, decimalFormat) => {
  const thousandsSeparator = decimalFormat.charAt(1);
  if (thousandsSeparator === "0") {
    return intStr
  } else if (decimalFormat === "1,00,000.") {
    return intStr.replace(groupByLakhCroreRegEx, "$1{,}")
  } else if (decimalFormat === "1,0000,0000.") {
    return intStr.replace(groupByFourRegEx, "$1{,}")
  } else {
    return intStr.replace(groupByThreeRegEx,
      (thousandsSeparator === ",")
      ? "{,}"
      : (thousandsSeparator === " ")
      ? "\u2008"
      : (thousandsSeparator === "’")
      ? "’"
      : "."
    )
  }
};

const formattedDecimal = (numStr, decimalFormat, truncateTrailingZeros) => {
  const pos = numStr.indexOf(".");
  if (pos === -1) {
    return formattedInteger(numStr, decimalFormat)
  } else {
    const intStr = numStr.slice(0, pos);
    const decimalSeparator = decimalFormat.slice(-1);
    let frac = (decimalSeparator === "." ? "." : "{,}") + numStr.slice(pos + 1);
    if (truncateTrailingZeros) { frac = frac.replace(/(\.|{,})?0+$/, ""); }
    return formattedInteger(intStr, decimalFormat) + frac
  }
};

const validateFormatSpec = str => {
  /*
   * Use a RegEx to determine if a format specification string is valid.
   * Return the string if valid. Return an error message otherwise.
   *
   * str ≔ "Tn∠° (w, m-d-y L)?", where:
   *    T = type, [bEefhkmNnprSstx%], default: "h"
   *    n = number of digits, [0-9]+, default: 15
   *    ∠ = optional. Specifies polar notation for complex numbers
   *    ° = optional. Specifies polar noation in degrees
   */

  const match = formatRegEx.exec(str);
  if (!match) {
    const message = errorOprnd("BAD_FORMAT", str).value;
    return [str, undefined, dt.ERROR, "\\text{" + message + "}"]
  }

  let ftype = match[1] || "h";
  let N = Number(match[2] || "15");
  const ctype = match[3]  || "";

  // Check the specified number of digits
  switch (ftype) {
    case "b":
    case "x":
    case "X":
      return [str, undefined, dt.STRING, "\\text{" + ftype + ctype + "}" ]
    case "t":
      N = 0;
      break
    case "f":
    case "%":
      break
    default:
      if (N < 1 || N > 15) {
        const message = "\\text{" + errorOprnd("BAD_PREC").value + "}";
        return [str, undefined, dt.ERROR, message]
      }
  }

  if (ftype === "%") { ftype = "\\%"; }
  return [str, undefined, dt.STRING, "\\text{" + ftype + String(N) + ctype + "}" ]
};

const angleRegEx = /[∠°]+$/;

const format = (num, specStr = "h3", decimalFormat = "1,000,000.") => {
  if (Rnl.isZero(num)) { return "0" }

  const spec = { ftype: specStr.charAt(0) };
  specStr = specStr.replace(angleRegEx, "");
  if (specStr.length > 1) { spec.numDigits = Number(specStr.slice(1)); }

  if (spec.ftype === "%" || spec.ftype === "p") { num[0] = num[0] * BigInt(100); }

  if ((spec .ftype === "b" || spec.ftype === "x") && !Rnl.isInteger(num)) {
    return errorOprnd("FORM_FRAC")
  }

  // Round the number
  const numStr = roundedString(num, spec);

  // Add separators
  switch (spec.ftype) {
    case "f":
    case "r":
    case "h":
      return formattedDecimal(numStr, decimalFormat, spec.ftype === "h")
    case "t":
      return formattedInteger(numStr, decimalFormat)
    case "%":
    case "p":
      return formattedDecimal(numStr, decimalFormat) + "\\%"
    case "m":
    case "b":
    case "x":
    case "X":
      return numStr
    default: {
      // Some sort of scientific notation.
      const pos = numStr.indexOf("e");
      let significand = numStr.slice(0, pos);
      if (decimalFormat.slice(-1) === ",") { significand = significand.replace(".", "{,}"); }

      switch (spec.ftype) {
        case "e":
        case "E": {
          const result = significand + "\\text{" + spec.ftype;
          if (numStr.charAt(pos + 1) === "-") {
            return result + "-}" + numStr.slice(pos + 2)
          } else {
            return result + "}" + numStr.slice(pos + 1)
          }
        }

        case "s":
        case "S":
        case "n":
        case "N": {
          const op = spec.ftype === "S" ? "×" : "\\mkern2mu{\\cdot}\\mkern1mu";
          return significand + op + "10^{" + numStr.slice(pos + 1) + "}"
        }

        case "k": {
          const exponent = Number(numStr.slice(pos + 1));
          const quotient = exponent  / 3;
          const q = quotient >= 0 ? Math.floor(quotient) : Math.ceil(quotient);
          const modulo = exponent  % 3;
          if (modulo !== 0) {
            significand = String(Number(significand) * Math.pow(10, modulo));
          }
          return significand + siPrefixes[8 + q]
        }
      }
    }
  }
};

/*
 * Hurmet operands often have numeric values. Sometimes they are the numbers originally
 * input by the writer, henceforward known as "plain". Sometimes we work instead with
 * values that have been converted to SI base units. It turns out that operands inside
 * evalRpn() can often get by with less information than in the original cell assignment attrs.
 * Some details for various data types:
 *
 * RATIONAL operand: { value: plain, unit: allZeros, dtype: RATIONAL }
 * RATIONAL cell attrs: ditto.
 * Note: "allZeros" is the array of unit-checking exponents for a number: [0,0,0,0,0,0,0,0,0]
 *
 * RATIONAL + QUANTITY unit-unaware operand: same as RATIONAL.
 * RATIONAL + QUANTITY unit-AWARE oprnd: {
 *   value: inBaseUnits, unit: expos, dtype: RATIONAL + QUANTITY
 * }
 * RATIONAL + QUANTITY cell attrs include both of the above and also a `resultdisplay` string.
 *
 * RATIONAL + ROWVECTOR is the same as RATIONAL except the value is an array of plains.
 * RATIONAL + ROWVECTOR + QUANTITY is the same as RATIONAL + QUANTITY except values are arrays.
 * COLUMNVECTOR is the same as ROWVECTOR exept that they are treated differently by operators.
 * MATRIX indicates that values are each an array of row vectors.
 * *
 * A MAP's values are all the same data type and all have the same unit of measure.
 * MAP oprnd: {name, value: see below, unit: {name, factor, gauge, expos}, dtype: dMAP + ...}
 *    where: value is: {name1: value, name2: value} or
 *    where value is: {plain: {name1: value, name2: value},
 *                     inBaseUnits: {name1: value, name2: value},
 *                     etc}
 * A `resultdisplay` string is always in a MAP's cell attrs and sometimes in an operand.
 *
 * ERROR operand: { value: error message, unit: undefined, dtype: ERROR }
 *
 * When this module creates Hurmet operands, it does not make defensive copies of
 * cell attributes. The deep data is referenced. So Hurmet evaluate.js must copy whenever
 * operators or functions might change a cell attribute.
 *
 */

const fromAssignment = (cellAttrs, unitAware) => {
  // Get the value that was assigned to a variable. Load it into an operand.
  if (cellAttrs.value === null) {
    // Return an error message.
    const insert = (cellAttrs.name) ? cellAttrs.name : "?";
    return errorOprnd("NULL", insert)
  }

  const oprnd = Object.create(null);
  oprnd.dtype = cellAttrs.dtype;
  oprnd.name = cellAttrs.name;

  // Get the unit data.
  const dtype = cellAttrs.dtype;
  if (dtype === dt.STRING || dtype === dt.BOOLEAN || dtype === dt.DRAWING ||
      dtype === dt.MODULE || dtype === dt.NULL) {
    oprnd.unit = null;
  } else if (cellAttrs.unit) {
    oprnd.unit = clone(cellAttrs.unit);
  } else {
    oprnd.unit = null;
  }

  // Get the value.
  if (cellAttrs.dtype & dt.QUANTITY) {
    // Here we discard some of the cellAttrs information. In a unit-aware calculation,
    // number, matrix, and map operands contain only the value.inBaseUnits.
    if (cellAttrs.dtype & dt.MAP) {
      oprnd.value = clone(cellAttrs.value);
      oprnd.value.data = unitAware
        ? oprnd.value.data.inBaseUnits
        : oprnd.value.data.plain;
    } else {
      oprnd.value = Object.freeze(unitAware
        ? clone(cellAttrs.value.inBaseUnits)
        : clone(cellAttrs.value.plain)
      );
    }
    oprnd.dtype = cellAttrs.dtype - dt.QUANTITY;
    // Delete the factor and gauge information
    if (unitAware) {
      oprnd.unit = { expos: oprnd.unit.expos, isConverted: true };
    }

  } else if (cellAttrs.dtype === dt.STRING) {
    const str = cellAttrs.value;
    const ch = str.charAt(0);
    const chEnd = str.charAt(str.length - 1);
    oprnd.value = ch === '"' && chEnd === '"' ? str.slice(1, -1).trim() : str.trim();

  } else if (cellAttrs.dtype === dt.DATAFRAME) {
    // For data frames, Hurmet employs copy-on-write tactics.
    // So at this point, we can pass a reference to the value
    oprnd.value = cellAttrs.value;

    // Note the only operations on data frames are: (1) access, and (2) concatenate.
    // That's where the copy-on-write takes place.

  } else if (cellAttrs.dtype === dt.SPREADSHEET) {
    return cellAttrs

  } else {
    // For all other data types, we employ copy-on-read. So we return a deep copy from here.
    oprnd.value = clone(cellAttrs.value);
  }

  return Object.freeze(oprnd)
};

// units.js

/*
 *  Unit-aware calculation is a core feature of Hurmet.
 *  Dimensional analysis is used to verify that a calculation contains compatible units.
 *  Example: Check unit compatibility for:  L = 145 'N·m'/15.2 'lbf' = ?? feet
 *  Analysis step 1: first operand:  N·m →  mass¹·length²·time⁻²
 *                   2nd  operand:  lbf →  mass¹·length¹·time⁻²
 *  Note the exponents of those two operands. When terms multiply, we add exponents.
 *  When terms divide, we subtract exponents. As in step 2, next line:
 *                   mass^(1-1)∙length^(2-1)∙time^(-2-(-2)) = mass⁰·length¹·time⁰ = length¹
 *  In the example, the exponents for mass and time both zero'd out.
 *  Only length has a non-zero exponent. In fact, the result dimension = length¹.
 *  This matches the desired result dimension (feet is a length), so this example checks out.
 *
 *  Hurmet automates this process of checking unit compatibility.
 *  Each instance of a Hurmet quantity operand contains an array of unit-checking exponents.
 *  Each element of that array contains an exponent of one of the Hurmet base dimensions.
 *  Those exponent values come from the unitTable, below.
 *
 *  The Hurmet base dimensions and standard units are, in order of array values:
 *      length (meter)
 *      mass (kg)
 *      time (second)
 *      electrical current (ampere)
 *      temperature (Kelvin)
 *      finite amount (1 unit)   (Yes, I know that SI uses a mole. That's just silly.)
 *      luminous intensity (cd)
 *      money (Euro)   (A user can redefine the default to some other currency)
 */

const unitsAreCompatible = (a, b) => {
  // Do a compatibility check on the unit-checking exponents  a and b.
  if (a == null && b == null) { return true }
  if (a == null || b == null) { return false }
  if (!Array.isArray(a) || !Array.isArray(b)) { return false }
  // Compare the exponents in the arrays.
  if (a.length !== b.length) { return false }
  return a.every((value, index) => value === b[index])
};

// JSON.parse() is faster than a big object literal
// eslint-disable-next-line max-len
const prefixFactor = JSON.parse('{"Y":1e24,"yotta":1e24,"Z":1e21,"zetta":1e21,"E":1e18,"exa":1e18,"P":1e15,"peta":1e15,"T":1e12,"tera":1e12,"G":1e9,"giga":1e9,"M":1e6,"mega":1e6,"k":1000,"kilo":1000,"h":100,"hecto":100,"deka":10,"d":0.1,"deci":0.1,"c":0.01,"centi":0.01,"m":0.001,"milli":0.001,"µ":1e-6,"\u00B5":1e-6,"\u03bc":1e-6,"micro":1e-6,"n":1e-9,"nano":1e-9,"p":1e-12,"pico":1e-12,"f":1e-15,"femto":1e-15,"a":1e-18,"atto":1e-18,"z":1e-21,"zepto":1e-21,"y":1e-24,"yocto":1e-24,"Ki":1024,"kibi":1024,"Mi":1048576,"mebi":1048576,"Gi":1073741824,"gibi":1073741824,"Ti":1099511627776,"tebi":1099511627776}');

  //  factor, numerator, denominator,  gauge, prefix|logarithm|currency, exponents
  //  exponent break-down: length, mass, time, elect, temp, amount, lum inten, money
  //  Each money factor is a revised weekly with data from the European Central Bank.
const unitTable = Object.freeze(JSON.parse(`{
"#":["0.45359237", "1","0","0",[0,1,0,0,0,0,0,0]],
"$":["1","1","0","USD",[0,0,0,0,0,0,0,1]],
"£":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],
"'":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],
"A":["1","1","0","siSymbol",[0,0,0,1,0,0,0,0]],
"AUD":["1.7258","1","0","AUD",[0,0,0,0,0,0,0,1]],
"Adobe point":["0.0254","72","0","0",[1,0,0,0,0,0,0,0]],
"At":["1","1","0","siSymbol",[0,0,0,0,1,0,1,0]],
"Australian dollar":["1","1","0","AUD",[0,0,0,0,0,0,0,1]],
"BRL":["6.2617","1","0","BRL",[0,0,0,0,0,0,0,1]],
"BTU":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],
"BThU":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],
"Bq":["1","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],
"Brazilian Real":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],
"British Pound":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],
"Btu":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],
"C":["1","1","0","siSymbol",[0,0,1,1,0,0,0,0]],
"C$":["1","1","0","CAD",[0,0,0,0,0,0,0,1]],
"CAD":["1.5566","1","0","CAD",[0,0,0,0,0,0,0,1]],
"CCF":["1","1","0","0",[3,0,0,0,0,0,0,0]],
"CHF":["0.9557","1","0","CHF",[0,0,0,0,0,0,0,1]],
"CNY":["7.8561","1","0","CNY",[0,0,0,0,0,0,0,1]],
"CY":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],
"Calorie":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],
"Canadian dollar":["1","1","0","CAD",[0,0,0,0,0,0,0,1]],
"Celsius":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],
"Chinese Yuan":["1","1","0","CNY",[0,0,0,0,0,0,0,1]],
"Ci":["37000000000","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],
"Ckm":["100000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],
"Da":["1.66053872e-24","1","0","siSymbol",[0,1,0,0,0,0,0,0]],
"Dalton":["1.66053872e-24","1","0","0",[0,1,0,0,0,0,0,0]],
"Didot point":["15.625","41559","0","0",[1,0,0,0,0,0,0,0]],
"EB":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],
"EMU":["0.01","360000","0","0",[1,0,0,0,0,0,0,0]],
"EUR":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],
"EiB":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],
"Euro":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],
"F":["1","1","0","siSymbol",[-2,-1,4,2,0,0,0,0]],
"Fahrenheit":["5","9","459","0",[0,0,0,0,1,0,0,0]],
"G":["0.0001","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],
"GB":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],
"GBP":["0.84088","1","0","GBP",[0,0,0,0,0,0,0,1]],
"Gal":["0.01","1","0","siSymbol",[1,0,-2,0,0,0,0,0]],
"Gi":["10","12.5663706143592","0","siWord",[0,0,0,0,1,0,1,0]],
"GiB":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],
"Gregorian year":["31556952","1","0","0",[0,0,1,0,0,0,0,0]],
"Gy":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],
"H":["1","1","0","siSymbol",[2,1,-2,-2,0,0,0,0]],
"HK$":["1","1","0","HKD",[0,0,0,0,0,0,0,1]],
"HKD":["8.4357","1","0","HKD",[0,0,0,0,0,0,0,1]],
"HP":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],
"Hong Kong dollar":["1","1","0","HKD",[0,0,0,0,0,0,0,1]],
"Hz":["1","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],
"ILS":["3.9340","1","0","ILS",[0,0,0,0,0,0,0,1]],
"INR":["94.4435","1","0","INR",[0,0,0,0,0,0,0,1]],
"Indian Rupee":["1","1","0","INR",[0,0,0,0,0,0,0,1]],
"Israeli New Shekel":["1","1","0","ILS",[0,0,0,0,0,0,0,1]],
"J":["1","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],
"JPY":["160.35","1","0","JPY",[0,0,0,0,0,0,0,1]],
"Japanese Yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],
"Joule":["1","1","0","0",[2,1,-2,0,0,0,0,0]],
"Julian year":["31557600","1","0","0",[0,0,1,0,0,0,0,0]],
"Jy":["1e-26","1","0","siSymbol",[0,1,-2,0,0,0,0,0]],
"K":["1","1","0","0",[0,0,0,0,1,0,0,0]],
"KiB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],
"KRW":["1570.47","1","0","KRW",[0,0,0,0,0,0,0,1]],
"L":["0.001","1","0","siSymbol",[3,0,0,0,0,0,0,0]],
"Lego stud":["0.008","1","0","siSymbol",[1,0,0,0,0,0,0,0]],
"MB":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],
"MCM":["5.06707479097497e-07","1","0","0",[2,0,0,0,0,0,0,0]],
"MMBtu":["1055056000","1","0","0",[2,1,-2,0,0,0,0,0]],
"MMbbl":["158987.294928","1","0","0",[3,0,0,0,0,0,0,0]],
"MMbblpd":["158987.294928","86400","0","0",[3,0,-1,0,0,0,0,0]],
"MMscf":["28316.846592","1","0","0",[3,0,0,0,0,0,0,0]],
"MMscfd":["0.32774128","1","0","0",[3,0,0,0,0,0,0,0]],
"MT":["1000","1","0","0",[0,1,0,0,0,0,0,0]],
"MXN":["22.0490","1","0","MXN",[0,0,0,0,0,0,0,1]],
"Mach":["331.6","1","0","0",[1,0,-1,0,0,0,0,0]],
"Mbbl":["158.987294928","1","0","0",[3,0,0,0,0,0,0,0]],
"Mexican Peso":["1","1","0","MXN",[0,0,0,0,0,0,0,1]],
"MiB":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],
"Mscfd":["0.00032774128","1","0","0",[3,0,0,0,0,0,0,0]],
"Mscfh":["0.00786579072","1","0","0",[3,0,0,0,0,0,0,0]],
"N":["1","1","0","siSymbol",[1,1,-2,0,0,0,0,0]],
"NM":["1852","1","0","0",[1,0,0,0,0,0,0,0]],
"PB":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],
"PS":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"Pa":["1","1","0","siSymbol",[-1,1,-2,0,0,0,0,0]],
"Pascal":["1","1","0","siWord",[-1,1,-2,0,0,0,0,0]],
"Pferdestärke":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"PiB":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],
"R":["0.000258","1","0","siSymbol",[0,-1,1,1,0,0,0,0]],
"R$":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],
"RT":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],
"RUB":["1","1","0","RUB",[0,0,0,0,0,0,0,1]],
"S":["1","1","0","siSymbol",[-2,-1,3,2,0,0,0,0]],
"SF":["0.09290304","1","0","0",[2,0,0,0,0,0,0,0]],
"SY":["0.83612736","1","0","0",[2,0,0,0,0,0,0,0]],
"Sv":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],
"Swiss Franc":["1","1","0","CHF",[0,0,0,0,0,0,0,1]],
"T":["1","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],
"TB":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],
"TWD":["1","1","0","TWD",[0,0,0,0,0,0,0,1]],
"TeX point":["0.0003515","1","0","0",[1,0,0,0,0,0,0,0]],
"TiB":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],
"US$":["1","1","0","USD",[0,0,0,0,0,0,0,1]],
"USD":["1.0857","1","0","USD",[0,0,0,0,0,0,0,1]],
"V":["1","1","0","siSymbol",[2,1,-3,-1,0,0,0,0]],
"VA":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],
"W":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],
"Wb":["1","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],
"Wh":["3600","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],
"Won":["1","1","0","KRW",[0,0,0,0,0,0,0,1]],
"Yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],
"a":["31556925.9747","1","0","siSymbol",[0,0,1,0,0,0,0,0]],
"ac":["4046.8564224","1","0","0",[2,0,0,0,0,0,0,0]],
"acre":["4046.8564224","1","0","0",[2,0,0,0,0,0,0,0]],
"admiralty mile":["1853.188","1","0","0",[1,0,0,0,0,0,0,0]],
"af":["1233.48183754752","1","0","0",[3,0,0,0,0,0,0,0]],
"amp":["1","1","0","0",[0,0,0,1,0,0,0,0]],
"ampere":["1","1","0","siWord",[0,0,0,1,0,0,0,0]],
"ampere turn":["1","1","0","siWord",[0,0,0,0,1,0,1,0]],
"amu":["1.66053872e-24","1","0","0",[0,1,0,0,0,0,0,0]],
"angstrom":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0]],
"angstrom star":["0.00000000010000015","1","0","0",[1,0,0,0,0,0,0,0]],
"apostilb":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],
"arcminute":["3.14159265358979","10800","0","0",[0,0,0,0,0,0,0,0]],
"arcsecond":["3.14159265358979","648000","0","0",[0,0,0,0,0,0,0,0]],
"are":["100","1","0","0",[2,0,0,0,0,0,0,0]],
"as":["4.3.14159265358979","648000","0","0",[0,0,0,0,0,0,0,0]],
"asb":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],
"assay ton":["0.0875","3","0","0",[0,1,0,0,0,0,0,0]],
"astronomical unit":["149597870691","1","0","0",[1,0,0,0,0,0,0,0]],
"atmosphere":["101325","1","0","siSymbol",[-1,1,-2,0,0,0,0,0]],
"au":["149597870691","1","0","0",[1,0,0,0,0,0,0,0]],
"bar":["100000","1","0","siWord",[-1,1,-2,0,0,0,0,0]],
"barg":["100000","1","0","0",[-1,1,-2,0,0,0,0,0]],
"barleycorn":["0.0254","3","0","0",[1,0,0,0,0,0,0,0]],
"barrel":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],
"barrel bulk":["0.14158423296","1","0","0",[3,0,0,0,0,0,0,0]],
"basis point":["0.0001","1","0","0",[0,0,0,0,0,0,0,0]],
"baud":["1","1","0","siSymbol",[0,0,-1,0,0,1,0,0]],
"bbl":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],
"becquerel":["1","1","0","siWord",[0,0,-1,0,0,0,0,0]],
"beer barrel":["0.119240471196","1","0","0",[3,0,0,0,0,0,0,0]],
"bit":["1","1","0","0",[0,0,0,0,0,1,0,0]],
"blink":["0.864","1","0","0",[0,0,1,0,0,0,0,0]],
"bo":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],
"boe":["6119000000","1","0","0",[2,1,-2,0,0,0,0,0]],
"boiler horsepower":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],
"bpd":["0.158987294928","86400","0","0",[3,0,-1,0,0,0,0,0]],
"bph":["0.158987294928","3600","0","0",[3,0,-1,0,0,0,0,0]],
"breadth":["0.2286","1","0","0",[1,0,0,0,0,0,0,0]],
"bushel":["0.03523907016688","1","0","0",[3,0,0,0,0,0,0,0]],
"byte":["8","1","0","0",[0,0,0,0,0,1,0,0]],
"caballo de vapor":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"cal":["4.1868","1","0","0",[2,1,-2,0,0,0,0,0]],
"calorie":["4.1868","1","0","siWord",[2,1,-2,0,0,0,0,0]],
"candela":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],
"candlepower":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],
"carat":["0.00002","1","0","0",[0,1,0,0,0,0,0,0]],
"cc":["0.000001","1","0","0",[3,0,0,0,0,0,0,0]],
"cd":["1","1","0","siSymbol",[0,0,0,0,0,0,1,0]],
"centipoise":["0.001","1","0","0",[-1,1,-1,0,0,0,0,0]],
"centistoke":["0.000001","1","0","0",[2,0,-1,0,0,0,0,0]],
"cfm":["0.0004719474432","1","0","0",[3,0,-1,0,0,0,0,0]],
"cfs":["0.028316846592","1","0","0",[3,0,-1,0,0,0,0,0]],
"ch":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"chain":["20.116","1","0","0",[1,0,0,0,0,0,0,0]],
"cheval vapeur":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"cmil":["5.06707479097497e-10","1","0","0",[2,0,0,0,0,0,0,0]],
"cmm":["0.00001","1","0","0",[1,0,0,0,0,0,0,0]],
"constant":["1","1","0","0",[0,0,0,0,0,0,0,0]],
"coulomb":["1","1","0","siWord",[0,0,1,1,0,0,0,0]],
"cp":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],
"cps":["1","1","0","0",[0,0,-1,0,0,0,0,0]],
"cu ft":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],
"cu in":["0.000016387064","1","0","0",[3,0,0,0,0,0,0,0]],
"cu yd":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],
"cubic meter":["1","1","0","0",[3,0,0,0,0,0,0,0]],
"cubic metre":["1","1","0","0",[3,0,0,0,0,0,0,0]],
"cup":["0.0002365882365","1","0","0",[3,0,0,0,0,0,0,0]],
"curie":["37000000000","1","0","siWord",[0,0,-1,0,0,0,0,0]],
"cv":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"cy":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],
"d":["86400","1","0","0",[0,0,1,0,0,0,0,0]],
"daN":["10","1","0","0",[1,1,-2,0,0,0,0,0]],
"darcy":["0.0000000000009869233","1","0","0",[2,0,0,0,0,0,0,0]],
"day":["86400","1","0","0",[0,0,1,0,0,0,0,0]],
"deg":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],
"degree":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],
"dekan":["31.4159265358979","180","0","0",[0,0,0,0,0,0,0,0]],
"diopter":["1","1","0","0",[-1,0,0,0,0,0,0,0]],
"dioptre":["1","1","0","0",[-1,0,0,0,0,0,0,0]],
"dollar":["1","1","0","USD",[0,0,0,0,0,0,0,1]],
"drum":["0.20819764812","1","0","0",[3,0,0,0,0,0,0,0]],
"dscf":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],
"dyn":["0.00001","1","0","0",[1,1,-2,0,0,0,0,0]],
"dyne":["0.00001","1","0","0",[1,1,-2,0,0,0,0,0]],
"eV":["1.602176462e-19","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],
"electric horsepower":["746","1","0","0",[2,1,-3,0,0,0,0,0]],
"electrical horsepower":["746","1","0","0",[2,1,-3,0,0,0,0,0]],
"electron volt":["1.602176462e-19","1","0","0",[2,1,-2,0,0,0,0,0]],
"erg":["0.0000001","1","0","0",[2,1,-2,0,0,0,0,0]],
"euro":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],
"exabyte":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],
"exbibyte":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],
"farad":["1","1","0","siWord",[-2,-1,4,2,0,0,0,0]],
"faraday":["96485.339924","1","0","0",[0,0,1,1,0,0,0,0]],
"fathom":["1.8288","1","0","0",[1,0,0,0,0,0,0,0]],
"fc":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],
"feet":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],
"fermi":["0.000000000000001","1","0","siWord",[1,0,0,0,0,0,0,0]],
"fl oz":["0.003785411784","128","0","0",[3,0,0,0,0,0,0,0]],
"flop":["1","1","0","0",[0,0,-1,0,0,0,0,0]],
"fluid ounce":["0.003785411784","128","0","0",[3,0,0,0,0,0,0,0]],
"food calorie":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],
"foot":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],
"footcandle":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],
"footlambert":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],
"fortnight":["1209600","1","0","0",[0,0,1,0,0,0,0,0]],
"fps":["0.3048","1","0","0",[1,0,-1,0,0,0,0,0]],
"franklin":["0.00000000033356","1","0","siWord",[0,0,1,1,0,0,0,0]],
"ft":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],
"ft water":["2988.874","1","0","0",[-1,1,-2,0,0,0,0,0]],
"ftc":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],
"ftl":["3.426259","1","0","0",[-2,0,0,0,0,0,1,0]],
"furlong":["201.168","1","0","0",[1,0,0,0,0,0,0,0]],
"g":["0.001","1","0","siSymbol",[0,1,0,0,0,0,0,0]],
"gal":["0.003785411784","1","0","0",[3,0,0,0,0,0,0,0]],
"galileo":["0.01","1","0","siWord",[1,0,-2,0,0,0,0,0]],
"gallon":["0.003785411784","1","0","0",[3,0,0,0,0,0,0,0]],
"gauss":["0.0001","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],
"gigabyte":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],
"gilbert":["10","12.5663706143592","0","siWord",[0,0,0,0,1,0,1,0]],
"gill":["0.003785411784","32","0","0",[3,0,0,0,0,0,0,0]],
"gon":["3.14159265358979","200","0","0",[0,0,0,0,0,0,0,0]],
"gongjin":["1","1","0","siSymbol",[0,1,0,0,0,0,0,0]],
"gongli":["1000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],
"gpd":["0.003785411784","86400","0","0",[3,0,-1,0,0,0,0,0]],
"gph":["0.003785411784","3600","0","0",[3,0,-1,0,0,0,0,0]],
"gpm":["0.003785411784","60","0","0",[3,0,-1,0,0,0,0,0]],
"gps":["0.003785411784","1","0","0",[3,0,-1,0,0,0,0,0]],
"gr":["0.00006479891","1","0","0",[0,1,0,0,0,0,0,0]],
"grad":["3.14159265358979","200","0","0",[0,0,0,0,0,0,0,0]],
"grain":["0.00006479891","1","0","0",[0,1,0,0,0,0,0,0]],
"gram":["0.001","1","0","0",[0,1,0,0,0,0,0,0]],
"gramme":["0.001","1","0","0",[0,1,0,0,0,0,0,0]],
"gray":["1","1","0","0",[2,0,-2,0,0,0,0,0]],
"great year":["814000000000","1","0","0",[0,0,1,0,0,0,0,0]],
"gsm":["0.001","1","0","0",[-2,1,0,0,0,0,0,0]],
"gutenberg":["0.0254","7200","0","0",[1,0,0,0,0,0,0,0]],
"gōngjin":["1","1","0","siSymbol",[0,1,0,0,0,0,0,0]],
"gōngli":["1000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],
"h":["3600","1","0","0",[0,0,1,0,0,0,0,0]],
"ha":["10000","1","0","siSymbol",[2,0,0,0,0,0,0,0]],
"hand":["0.1016","1","0","0",[1,0,0,0,0,0,0,0]],
"hectare":["10000","1","0","siWord",[2,0,0,0,0,0,0,0]],
"helek":["10","3","0","0",[0,0,1,0,0,0,0,0]],
"hemisphere":["6.28318530717959","1","0","0",[0,0,0,0,0,0,0,0]],
"henrie":["1","1","0","siWord",[2,1,-2,-2,0,0,0,0]],
"henry":["1","1","0","siWord",[2,1,-2,-2,0,0,0,0]],
"hertz":["1","1","0","siWord",[0,0,-1,0,0,0,0,0]],
"hk":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"horsepower":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],
"hour":["3600","1","0","0",[0,0,1,0,0,0,0,0]],
"hp":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],
"hpE":["746","1","0","0",[2,1,-3,0,0,0,0,0]],
"hpI":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],
"hpM":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"hpS":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],
"hr":["3600","1","0","0",[0,0,1,0,0,0,0,0]],
"in":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],
"in Hg":["3863.8","1","0","0",[-1,1,-2,0,0,0,0,0]],
"inch":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],
"inche":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],
"jansky":["1e-26","1","0","0",[0,1,-2,0,0,0,0,0]],
"jar":["1","900000000","0","0",[-2,-1,4,2,0,0,0,0]],
"joule":["1","1","0","0",[2,1,-2,0,0,0,0,0]],
"k":["4448.2216152605","1","0","0",[1,1,-2,0,0,0,0,0]],
"kB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],
"kB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],
"kairi":["1852","1","0","0",[1,0,0,0,0,0,0,0]],
"kanal":["505.8570528","1","0","0",[2,0,0,0,0,0,0,0]],
"katal":["6.02214179e+23","1","0","siWord",[0,0,-1,0,0,1,0,0]],
"kcal":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],
"kcmil":["5.06707479097497e-07","1","0","0",[2,0,0,0,0,0,0,0]],
"keg":["0.058673882652","1","0","0",[3,0,0,0,0,0,0,0]],
"kelvin":["1","1","0","0",[0,0,0,0,1,0,0,0]],
"kgf":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],
"kilo":["1","1","0","0",[0,1,0,0,0,0,0,0]],
"kilobyte":["8192","1","0","0",[0,0,0,0,0,1,0,0]],
"kilogram":["1","1","0","0",[0,1,0,0,0,0,0,0]],
"kilogramme":["1","1","0","0",[0,1,0,0,0,0,0,0]],
"kilopond":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],
"kip":["4448.2216152605","1","0","0",[1,1,-2,0,0,0,0,0]],
"klf":["4448.2216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],
"kn":["1852","3600","0","0",[1,0,-1,0,0,0,0,0]],
"knot":["1852","3600","0","0",[1,0,-1,0,0,0,0,0]],
"kp":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],
"kpf":["4448.2216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],
"kph":["1000/3600","1","0","0",[1,0,-1,0,0,0,0,0]],
"kpph":["1000/3600","1","0","0",[-1,1,-3,0,0,0,0,0]],
"ks":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"ksf":["47880.2589803358","1","0","0",[-1,1,-2,0,0,0,0,0]],
"ksi":["6894757.29316836","1","0","0",[-1,1,-2,0,0,0,0,0]],
"kwh":["3600000","1","0","0",[2,1,-2,0,0,0,0,0]],
"l":["0.001","1","0","siSymbol",[3,0,0,0,0,0,0,0]],
"lambert":["10000","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],
"lb":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],
"lbf":["4.4482216152605","1","0","0",[1,1,-2,0,0,0,0,0]],
"lbm":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],
"league":["5556","1","0","0",[1,0,0,0,0,0,0,0]],
"lf":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],
"li":["500","1","0","0",[1,0,0,0,0,0,0,0]],
"light year":["9460730472580800","1","0","0",[1,0,0,0,0,0,0,0]],
"link":["0.201168","1","0","0",[1,0,0,0,0,0,0,0]],
"liter":["0.001","1","0","siWord",[3,0,0,0,0,0,0,0]],
"litre":["0.001","1","0","siWord",[3,0,0,0,0,0,0,0]],
"lm":["1","1","0","siSymbol",[0,0,0,0,0,0,1,0]],
"long ton":["1016.0469088","1","0","0",[0,1,0,0,0,0,0,0]],
"lt":["1016.0469088","1","0","0",[0,1,0,0,0,0,0,0]],
"ltpd":["0.0117598021851852","1","0","0",[0,1,-1,0,0,0,0,0]],
"lumen":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],
"lunar day":["89416.32","1","0","0",[0,0,1,0,0,0,0,0]],
"lunar month":["2551442.976","1","0","0",[0,0,1,0,0,0,0,0]],
"lux":["1","1","0","siWord",[-2,0,0,0,0,0,1,0]],
"lx":["1","1","0","siSymbol",[-2,0,0,0,0,0,1,0]],
"m":["1","1","0","siSymbol",[1,0,0,0,0,0,0,0]],
"mD":["9.869233e-16","1","0","0",[2,0,0,0,0,0,0,0]],
"marathon":["42195","1","0","0",[1,0,0,0,0,0,0,0]],
"marla":["25.29285264","1","0","0",[2,0,0,0,0,0,0,0]],
"mas":["3.14159265358979","648000000","0","0",[0,0,0,0,0,0,0,0]],
"maxwell":["0.00000001","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],
"mb":["100","1","0","0",[-1,1,-2,0,0,0,0,0]],
"megabyte":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],
"megaton TNT":["4184000000000000","1","0","0",[2,1,-2,0,0,0,0,0]],
"megatons TNT":["4184000000000000","1","0","0",[2,1,-2,0,0,0,0,0]],
"megohm":["1000000","1","0","0",[2,1,-3,-2,0,0,0,0]],
"meter":["1","1","0","siWord",[1,0,0,0,0,0,0,0]],
"metre":["1","1","0","siWord",[1,0,0,0,0,0,0,0]],
"metric horsepower":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"metric ton":["1000","1","0","0",[0,1,0,0,0,0,0,0]],
"mgd":["3785.411784","86400","0","0",[3,0,-1,0,0,0,0,0]],
"mho":["1","1","0","0",[-2,-1,3,2,0,0,0,0]],
"mi":["1609.344","1","0","0",[1,0,0,0,0,0,0,0]],
"micron":["0.000001","1","0","0",[1,0,0,0,0,0,0,0]],
"mil":["0.0000254","1","0","0",[1,0,0,0,0,0,0,0]],
"mile":["1609.344","1","0","0",[1,0,0,0,0,0,0,0]],
"min":["60","1","0","0",[0,0,1,0,0,0,0,0]],
"minute":["60","1","0","0",[0,0,1,0,0,0,0,0]],
"moa":["3.14159265358979","10800","0","0",[0,0,0,0,0,0,0,0]],
"mol":["6.02214179e+23","1","0","0",[0,0,0,0,0,1,0,0]],
"mole":["6.02214179e+23","1","0","0",[0,0,0,0,0,1,0,0]],
"mpg":["1609.344","0.003785411784","0","0",[-2,0,0,0,0,0,0,0]],
"mph":["0.44704","1","0","0",[1,0,-1,0,0,0,0,0]],
"mt":["1000","1","0","0",[0,1,0,0,0,0,0,0]],
"nautical mile":["1852","1","0","0",[1,0,0,0,0,0,0,0]],
"newton":["1","1","0","0",[1,1,-2,0,0,0,0,0]],
"nit":["1","1","0","0",[-2,0,0,0,0,0,1,0]],
"ohm":["1","1","0","siWord",[2,1,-3,-2,0,0,0,0]],
"ounce":["0.45359237","16","0","0",[0,1,0,0,0,0,0,0]],
"oz":["0.45359237","16","0","0",[0,1,0,0,0,0,0,0]],
"oz t":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],
"parsec":["30856780000000000","1","0","0",[1,0,0,0,0,0,0,0]],
"pc":["0.0254","6","0","0",[1,0,0,0,0,0,0,0]],
"pcf":["4.4482216152605","0.028316846592","0","0",[-2,1,-2,0,0,0,0,0]],
"pci":["4.4482216152605","0.000016387064","0","0",[-2,1,-2,0,0,0,0,0]],
"pebibyte":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],
"peck":["0.00880976754172","1","0","0",[3,0,0,0,0,0,0,0]],
"perfect ream":["516","1","0","0",[0,0,0,0,0,1,0,0]],
"person":["1","1","0","0",[0,0,0,0,0,1,0,0]],
"petabyte":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],
"pfd":["0.5","1","0","0",[0,1,0,0,0,0,0,0]],
"pferdestärke":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"pfund":["0.5","1","0","0",[0,1,0,0,0,0,0,0]],
"phot":["10000","1","0","0",[-2,0,0,0,0,0,1,0]],
"pica":["0.0254","6","0","0",[1,0,0,0,0,0,0,0]],
"pied du roi":["9000","27706","0","0",[1,0,0,0,0,0,0,0]],
"pieze":["1000","1","0","0",[-1,1,-2,0,0,0,0,0]],
"pint":["0.000473176473","1","0","0",[3,0,0,0,0,0,0,0]],
"pk":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"platonic year":["814000000000","1","0","0",[0,0,1,0,0,0,0,0]],
"plf":["4.4482216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],
"point":["0.0254","72","0","0",[1,0,0,0,0,0,0,0]],
"poise":["0.1","1","0","siWord",[-1,1,-1,0,0,0,0,0]],
"pound":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],
"poundal":["4.4482216152605","32.174","0","0",[1,1,-2,0,0,0,0,0]],
"ppm":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],
"ppmdv":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],
"ppmv":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],
"ppmw":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],
"printer's point":["0.0003515","1","0","0",[1,0,0,0,0,0,0,0]],
"printer's ream":["516","1","0","0",[0,0,0,0,0,1,0,0]],
"ps":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"psf":["4.4482216152605","0.09290304","0","0",[-1,1,-2,0,0,0,0,0]],
"psi":["4.4482216152605","0.00064516","0","0",[-1,1,-2,0,0,0,0,0]],
"psia":["6894.75729316836","1","0","0",[-1,1,-2,0,0,0,0,0]],
"psig":["6894.75729316836","1","14.6959","0",[-1,1,-2,0,0,0,0,0]],
"px":["0.0254","96","0","0",[1,0,0,0,0,0,0,0]],
"pz":["1000","1","0","0",[-1,1,-2,0,0,0,0,0]],
"quart":["0.003785411784","4","0","0",[3,0,0,0,0,0,0,0]],
"quire":["25","1","0","0",[0,0,0,0,0,1,0,0]],
"rad":["1","1","0","0",[0,0,0,0,0,0,0,0]],
"radian":["1","1","0","0",[0,0,0,0,0,0,0,0]],
"rankin":["5","9","0","0",[0,0,0,0,1,0,0,0]],
"rd":["0.01","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],
"real":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],
"ream":["500","1","0","0",[0,0,0,0,0,1,0,0]],
"rem":["0.01","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],
"rev":["6.28318530717959","1","0","0",[0,0,0,0,0,0,0,0]],
"rod":["5.0292","1","0","0",[1,0,0,0,0,0,0,0]],
"roentgen":["0.000258","1","0","siWord",[0,-1,1,1,0,0,0,0]],
"rpm":["6.28318530717959","3600","0","0",[0,0,-1,0,0,0,0,0]],
"ruble":["1","1","0","RUB",[0,0,0,0,0,0,0,1]],
"röntgen":["0.000258","1","0","siWord",[0,-1,1,1,0,0,0,0]],
"s":["1","1","0","siSymbol",[0,0,1,0,0,0,0,0]],
"saltspoon":["0.003785411784","3072","0","0",[3,0,0,0,0,0,0,0]],
"scf":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],
"scfd":["0.028316846592","86400","0","0",[3,0,-1,0,0,0,0,0]],
"scfh":["0.028316846592","3600","0","0",[3,0,-1,0,0,0,0,0]],
"scfm":["0.028316846592","60","0","0",[3,0,-1,0,0,0,0,0]],
"sea mile":["1852","1","0","0",[1,0,0,0,0,0,0,0]],
"sec":["1","1","0","0",[0,0,1,0,0,0,0,0]],
"second":["1","1","0","0",[0,0,1,0,0,0,0,0]],
"section":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],
"sennight":["604800","1","0","0",[0,0,1,0,0,0,0,0]],
"sheet":["1","1","0","0",[0,0,0,0,0,1,0,0]],
"short ream":["480","1","0","0",[0,0,0,0,0,1,0,0]],
"short ton":["907.18474","1","0","0",[0,1,0,0,0,0,0,0]],
"siemen":["1","1","0","siWord",[-2,-1,3,2,0,0,0,0]],
"sievert":["1","1","0","siWord",[2,0,-2,0,0,0,0,0]],
"slinch":["175.126835246477","1","0","0",[0,1,0,0,0,0,0,0]],
"slug":["14.5939029372064","1","0","0",[0,1,0,0,0,0,0,0]],
"smoot":["1.7018","1","0","0",[0,1,0,0,0,0,0,0]],
"span":["0.2286","1","0","0",[1,0,0,0,0,0,0,0]],
"sphere":["12.5663706143592","1","0","0",[0,0,0,0,0,0,0,0]],
"sq ft":["0.09290304","1","0","0",[2,0,0,0,0,0,0,0]],
"sq in":["0.00064516","1","0","0",[2,0,0,0,0,0,0,0]],
"sq km":["1000000","1","0","0",[2,0,0,0,0,0,0,0]],
"sq mi":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],
"sq yd":["0.83612736","1","0","0",[2,0,0,0,0,0,0,0]],
"square degree":["0.000304617419786709","1","0","0",[0,0,0,0,0,0,0,0]],
"square meter":["1","1","0","0",[2,0,0,0,0,0,0,0]],
"square metre":["1","1","0","0",[2,0,0,0,0,0,0,0]],
"square mi":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],
"sr":["1","1","0","siSymbol",[0,0,0,0,0,0,0,0]],
"ssp":["0.003785411784","3072","0","0",[3,0,0,0,0,0,0,0]],
"standard volume":["22.414","1","0","0",[3,0,0,0,0,0,0,0]],
"statampere":["0.00000000033356","1","0","0",[0,0,0,1,0,0,0,0]],
"statcoulomb":["0.00000000033356","1","0","0",[0,0,1,1,0,0,0,0]],
"statfarad":["0.0000000000011126","1","0","0",[-2,-1,4,2,0,0,0,0]],
"stathenrie":["898760000000","1","0","0",[2,1,-2,-2,0,0,0,0]],
"stathenry":["898760000000","1","0","0",[2,1,-2,-2,0,0,0,0]],
"statohm":["898760000000","1","0","0",[2,1,-3,-2,0,0,0,0]],
"statvolt":["299.79","1","0","0",[2,1,-3,-1,0,0,0,0]],
"statwatt":["0.0000001","1","0","0",[2,1,-3,0,0,0,0,0]],
"steam horsepower":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],
"steradian":["1","1","0","0",[0,0,0,0,0,0,0,0]],
"stere":["1","1","0","0",[3,0,0,0,0,0,0,0]],
"stoke":["0.0001","1","0","0",[2,0,-1,0,0,0,0,0]],
"stone":["6.35029318","1","0","0",[0,1,0,0,0,0,0,0]],
"stpd":["0.0104998233796296","1","0","0",[0,1,-1,0,0,0,0,0]],
"stunde":["3600","1","0","0",[0,0,1,0,0,0,0,0]],
"survey feet":["1200","3937","0","0",[1,0,0,0,0,0,0,0]],
"survey foot":["1200","3937","0","0",[1,0,0,0,0,0,0,0]],
"Sv":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],
"sverdrup":["1000000","1","0","0",[3,0,-1,0,0,0,0,0]],
"sym":["1","1","0","siSymbol",[0,0,0,0,0,1,0,0]],
"tablespoon":["0.003785411784","256","0","0",[3,0,0,0,0,0,0,0]],
"tbsp":["0.003785411784","256","0","0",[3,0,0,0,0,0,0,0]],
"teaspoon":["0.003785411784","768","0","0",[3,0,0,0,0,0,0,0]],
"tebibyte":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],
"terabyte":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],
"tesla":["1","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],
"therm":["105480400","1","0","0",[2,1,-2,0,0,0,0,0]],
"tidal day":["89416.32","1","0","0",[0,0,1,0,0,0,0,0]],
"ton":["907.18474","1","0","0",[0,1,0,0,0,0,0,0]],
"tonf":["8896.443230521","1","0","0",[1,1,-2,0,0,0,0,0]],
"ton TNT":["4184000000","1","0","0",[2,1,-2,0,0,0,0,0]],
"ton refrigeration":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],
"tonne":["1000","1","0","0",[0,1,0,0,0,0,0,0]],
"tons TNT":["4184000000","1","0","0",[2,1,-2,0,0,0,0,0]],
"tons refrigeration":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],
"township":["93239571.972096","1","0","0",[2,0,0,0,0,0,0,0]],
"toz":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],
"tpy":["0.0000287475400032297","1","0","0",[0,1,-1,0,0,0,0,0]],
"tropical year":["31556925.9747","1","0","0",[0,0,1,0,0,0,0,0]],
"troy ounce":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],
"tsp":["0.003785411784","768","0","0",[3,0,0,0,0,0,0,0]],
"turn":["6.28318530717958","1","0","0",[0,0,0,0,0,0,0,0]],
"twip":["0.0254","1440","0","0",[1,0,0,0,0,0,0,0]],
"unit":["1","1","0","0",[0,0,0,0,0,1,0,0]],
"vapeur":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],
"var":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],
"varistor":["1","1","0","siWord",[2,1,-3,0,0,0,0,0]],
"volt":["1","1","0","siWord",[2,1,-3,-1,0,0,0,0]],
"watt":["1","1","0","siWord",[2,1,-3,0,0,0,0,0]],
"weber":["1","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],
"week":["604800","1","0","0",[0,0,1,0,0,0,0,0]],
"won":["1","1","0","KRW",[0,0,0,0,0,0,0,1]],
"wppm":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],
"yard":["0.9144","1","0","0",[1,0,0,0,0,0,0,0]],
"yd":["0.9144","1","0","0",[1,0,0,0,0,0,0,0]],
"year":["31556952","1","0","0",[0,0,1,0,0,0,0,0]],
"yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],
"£":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],
"¥":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],
"°":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],
"°C":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],
"°F":["5","9","459","0",[0,0,0,0,1,0,0,0]],
"°K":["1","1","0","0",[0,0,0,0,1,0,0,0]],
"°R":["5","9","0","0",[0,0,0,0,1,0,0,0]],
"°R":["5","9","0","0",[0,0,0,0,1,0,0,0]],
"Å":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0]],
"Ω":["1","1","0","siSymbol",[2,1,-3,-2,0,0,0,0]],
"”":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],
"₨":["1","1","0","INR",[0,0,0,0,0,0,0,1]],
"₪":["1","1","0","ILS",[0,0,0,0,0,0,0,1]],
"€":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],
"℃":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],
"℉":["5","9","459","0",[0,0,0,0,1,0,0,0]],
"Ω":["1","1","0","siSymbol",[2,1,-3,-2,0,0,0,0]],
"K":["1","1","0","0",[0,0,0,0,1,0,0,0]],
"Å":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0,0]]
}`));

const synonyms = Object.freeze({
  "$": "USD",
  "US$": "USD",
  "dollar": "USD",
  "A$": "AUD",
  "Australian dollar": "AUD",
  "Brazilian Real": "BRL",
  "real": "BRL",
  "R$": "BRL",
  "British Pound": "GBP",
  "£": "GBP",
  "C$": "CAD",
  "Canadian dollar": "CAD",
  "Chinese Yuan": "CNY",
  "€": "EUR",
  "Euro": "EUR",
  "euro": "EUR",
  "HK$": "HKD",
  "Hong Kong dollar":"HKD",
  "Indian Rupee": "IDR",
  "₨": "IDR",
  "Israeli New Shekel": "ILS",
  "₪": "ILS",
  "Mexican Peso": "MXN",
  "Swiss Franc": "CHF",
  "Won": "KRW",
  "won": "KRW",
  "yen": "JPY",
  "Yen": "JPY",
  "Japanese Yen": "JPY",
  "¥": "JPY"
});

const siPrefixRegEx = /^(yotta|zetta|exa|peta|tera|giga|mega|kilo|hecto|deka|deci|centi|milli|micro|nano|pico|femto|atto|zepto|yocto)/;

const unitFromWord = (inputStr) => {
  const str = inputStr.trim();
  const L = str.length;
  const u = {
    name: str,
    factor: Rnl.one,
    gauge: Rnl.zero,
    log: "",
    expos: [0, 0, 0, 0, 0, 0, 0, 0]
  };
  if (inputStr === "") { return u }
  let word = "";
  let unitArray;
  let doTheSearch = false;
  let prefix = "";
  let gotSiPrefixUnit = false;
  let gotMatch = false;

  for (let iPass = 1; iPass < 3; iPass++) {
    if (iPass === 1) {
      // The first pass will search with the assumption of no short-form SI prefix.
      // We will, however, check for a long form SI prefix if the word is long enough.

      doTheSearch = true;
      word = str;

      // Translate plural to signular
      if (L > 2) {
        if (word.charAt(word.length - 1) === "s") {
          if (!(word === "cfs" || (L === 3 & word.charAt(1) === "p"))) {
            word = word.slice(0, -1);
          }
        }
      }

      prefix = "";
      if (L > 3) {
        const match = siPrefixRegEx.exec(word);
        if (match && word !== "micron") {
          prefix = match[0];
          doTheSearch = true;
          word = word.slice(prefix.length);
        }
      }
    } else {
      // We're in the second pass. Try an SI short-form prefix.
      doTheSearch = false;
      prefix = word.charAt(0);
      if ("YZEPTGMkhdcmnpfazyµμµ".indexOf(prefix) > -1) {
        doTheSearch = true;
        word = word.substring(1);
      }
    }

    if (doTheSearch) {
      unitArray = unitTable[word];
      if (unitArray) { gotMatch = true; }
      if (iPass === 1 && gotMatch && prefix === "") {
        break
      } else if (gotMatch) {
        if (iPass === 1) {
          gotMatch = (unitArray[3] === "siWord");
          gotSiPrefixUnit = true;
          break
        } else {
          gotMatch = (unitArray[3] === "siSymbol");
          gotSiPrefixUnit = true;
        }
      }
    }
  }

  if (gotMatch) {
    u.gauge = Rnl.fromString(unitArray[2]);
    u.expos = Object.freeze(unitArray[4]);
    if (u.expos[7] === 1) {
      const currencyCode = (synonyms[word] ? synonyms[word] : word);
      // Read the line whose key is the standard 3-letter currency code.
      unitArray = unitTable[currencyCode];
      if (unitArray[0] === "0") {
        return errorOprnd("CURRENCY")
      } else {
        // eslint-disable-next-line no-undef
        u.factor = Rnl.reciprocal(Rnl.fromString(currencyExchangeRates[currencyCode]));
      }
    } else {
      // TODO: Change factor table to integers and use BigInt() instead of Rnl.fromString
      u.factor = Rnl.divide(Rnl.fromString(unitArray[0]), Rnl.fromString(unitArray[1]));
    }

    if (gotSiPrefixUnit) {
      u.factor =  Rnl.multiply(u.factor, Rnl.fromNumber(prefixFactor[prefix]));
    }

    // TODO: Logarithmic units like dB or EMM
//    const misc = unitArray[3] // SI prefix, or logarithm data, or 3-letter currency code
//    if (misc === "10") {
//      u.log = "°"
//    } else if (misc === "10+")  {
//      u.log = "10+" + " " + u.gauge + " " + u.factor
//    }

  } else {
    return errorOprnd("UNIT_NAME", str)
  }

  return Object.freeze(u)
};

const opOrNumRegEx = /[0-9·\-⁰¹²³\u2074-\u2079⁻/^()]/;
const numeralRegEx = /[0-9-]/;
const opRegEx = /^[·/\-^]$/;

const unitFromUnitName = memoizeFunction(function(inputStr) {

  // TODO: Handle ° ʹ ″

  if (!inputStr) { return { name: null, factor: null, gauge: null, log: "", expos: null } }

  let str = inputStr.trim();
  // Replace dashes & bullets with half-high dot
  str = str.replace(/[*.•×\-−](?![0-9.])/g, "·");

  // Create a unit object with default values.
  const u = { name: str, factor: Rnl.one, gauge: Rnl.zero, log: "", expos: allZeros };

  if (str === "") {
    return u
  } else if (str === "°" || str === "°ʹ" || str === "degMinSec") {
    u.factor = Rnl.fromString("0.0174532925199433");
    return u
  } else if (str === "feetInch") {
    u.unitExpos = [1, 0, 0, 0, 0, 0, 0, 0];
    u.factor = Rnl.fromString("0.3048");
    return u
  } else if (str === "″" || str === "ʹʹ") {
    // TODO: Move to unitTable
    u.unitExpos = [1, 0, 0, 0, 0, 0, 0, 0];
    u.factor = Rnl.fromString("0.0254");
    return u
  }

  // Parse str for compound units
  const tokenSep = ";";
  let inExponent = false;
  let ch = "";
  let word = "";
  let rpnString = "";
  let expoRpnString = "";
  const expoQueue = [];
  let iQueue = 0;
  const opStack = [{ symbol: "", prec: -1 }];
  let simpleUnit = "";

  // Operator Precedence for shunting yard algorithm
  // 0   ( )    parentheses
  // 1   · /    multiplication or division
  // 2   -      unary minus operator
  // 3   ^      exponentiation, right-to-left

  for (let i = 0; i < str.length; i++) {
    ch = str.charAt(i);

    if (numeralRegEx.test(ch)) {
      if (!inExponent) {
        rpnString += tokenSep;
        expoRpnString += tokenSep;
        opStack.push({ symbol: "^", prec: 3 });
        inExponent = true;
      }
      rpnString += ch;  // Append numbers directly to the RPN string.
      expoRpnString += ch;

    } else if (exponentRegEx.test(ch)) {
      if (!inExponent) {
        rpnString += tokenSep;
        expoRpnString += tokenSep;
        opStack.push({ symbol: "^", prec: 3 });
        inExponent = true;
      }
      const asciiCh = numeralFromSuperScript(ch);
      rpnString += asciiCh;  // Append numbers directly to the RPN string.
      expoRpnString += asciiCh;

    } else if (ch === "^") {
      // The "^" character is not required, but it is permitted.
      rpnString += tokenSep;
      expoRpnString += tokenSep;
      opStack.push({ symbol: "^", prec: 3 });
      inExponent = true;

    } else if (ch === "·" || ch === "/") {
      inExponent = false;
      rpnString += tokenSep;
      expoRpnString += tokenSep;
      while (opStack[opStack.length - 1].prec >= 1) {
        const symbol = opStack.pop().symbol;
        rpnString += symbol + tokenSep;
        expoRpnString += symbol + tokenSep;
      }
      opStack.push({ symbol: ch, prec: 1 });

    } else if (ch === "(") {
      opStack.push({ symbol: "(", prec: 0 });

    } else if (ch === ")") {
      while (opStack[opStack.length - 1].prec > 0) {
        const symbol = opStack.pop().symbol;
        rpnString += symbol + tokenSep;
        expoRpnString += symbol + tokenSep;
      }
      opStack.pop();  // Discard the opening parenthesis.
      inExponent = false;

    } else if (ch === "-") {  // Negative unary operator at the start of an exponent.
      inExponent = true;
      opStack.push({ symbol: "^", prec: 3 });
      opStack.push({ symbol: "-", prec: 2 });
      rpnString += tokenSep;
      expoRpnString += tokenSep;

    } else {
      inExponent = false;
      let j;
      for (j = i + 1; j < str.length; j++) {
        if (opOrNumRegEx.test(str.charAt(j))) { break }
      }
      word = str.substring(i, j);   // May actually be two words, as in "nautical miles"
      simpleUnit = unitFromWord(word);

      if (simpleUnit.dtype && simpleUnit.dtype === dt.ERROR) { return simpleUnit }

      if (simpleUnit.factor === 0) {
        u.name = "";
        return u
      }

      rpnString += String(simpleUnit.factor[0]) + "," + String(simpleUnit.factor[1]);
      expoRpnString += "¿" + iQueue;
      expoQueue.push(simpleUnit.expos);
      iQueue += 1;

      i = j - 1;
    }

  }

  if (word === u.name) {
    return Object.freeze(simpleUnit)
  }

  // All the input characters have been addresssed. Clear the opStack.
  while (opStack.length > 1) {
    const symbol = opStack.pop().symbol;
    rpnString += tokenSep + symbol;
    expoRpnString +=  tokenSep + symbol;
  }

  // Now, resolve the RPN string
  const factors = [];
  const expoStack = [];
  const rpnArray = rpnString.split(tokenSep);
  const expoRpnArray = expoRpnString.split(tokenSep);
  let val2 = 1;
  let e2;
  iQueue = 0;

  for (let i = 0; i < rpnArray.length; i++) {
    if (opRegEx.test(rpnArray[i])) {
      val2 = factors.pop();
      e2 = expoStack.pop();
    }

    switch (rpnArray[i]) {
      case "·":
        factors[factors.length - 1] = Rnl.multiply(factors[factors.length - 1], val2);
        expoStack[expoStack.length - 1] = expoStack[expoStack.length - 1].map((el, j) => {
          return el + e2[j]
        });
        break

      case "/":
        // TODO: Rewrite next line.
        if (Rnl.isZero(val2)) { return errorOprnd("DIV") }
        factors[factors.length - 1] = Rnl.divide(factors[factors.length - 1], val2);
        expoStack[expoStack.length - 1] = expoStack[expoStack.length - 1].map((el, j) => {
          return el - e2[j]
        });
        break

      case "^":
        factors[factors.length - 1] = Rnl.power(factors[factors.length - 1], val2);
        expoStack[expoStack.length - 1] = expoStack[expoStack.length - 1].map((el) => el * e2);
        break

      case "-":   // Negative unary operator
        factors[factors.length - 1] = Rnl.negate(factors[factors.length - 1]);
        break

      default:
        if (rpnArray[i].indexOf(",") > -1) {
          const ints = rpnArray[i].split(",");
          factors.push([BigInt(ints[0]), BigInt(ints[1])]);
        } else {
          factors.push([BigInt(rpnArray[i]), BigInt(1)]);
        }
        if (expoRpnArray[i].charAt(0) === "¿") {
          expoStack.push(expoQueue[iQueue]);
          iQueue += 1;
        } else {
          expoStack.push(expoRpnArray[i]);
        }
    }
  }

  u.factor = Object.freeze(factors.pop());
  u.expos = Object.freeze(expoStack.pop());
  return Object.freeze(u)
});

/* eslint-disable */

/*
 * This file implements a complex number data type.
 * Each complex number, z, is held as an array containing two rational number.
 * z[0] is the real part and z[1] is the imaginary part.
 *
 * This module is a work in progress.
 */

const j = [Rnl.zero, Rnl.one];

const isComplex = a => {
  return Array.isArray(a) && a.length === 2
    && Rnl.isRational(a[0]) && Rnl.isRational(a[1])
};

const real = z => z[0];
const imag = z => z[1];
const abs = z => Rnl.hypot(z[0], z[1]);
const negate = z => [Rnl.negate(z[0]), Rnl.negate(z[1])];
const conjugate = z => [z[0], Rnl.negate(z[1])];

const angle = (z) => {
    // For a complex number z, the angle (in radians) from
    // the positive real axis to the vector representing z.  + implies counter-clockwise.
    // Electrical engineers call this the phase angle of the complex number.
  if (Rnl.isZero(z[0]) && Rnl.isZero(z[1])) {
    return errorOprnd("ORIGIN", "angle")
  } else if (Rnl.isZero(z[1])) {
    return  Rnl.isPositive(z[0]) ? Rnl.zero : Rnl.pi
  } else if (Rnl.isZero(z[0])) {
    return  Rnl.isPositive(z[1])
      ? Rnl.divide(Rnl.pi, Rnl.two)
      : Rnl.negate(Rnl.divide(Rnl.pi, Rnl.two))
  } else {
    return  Rnl.fromNumber(Math.atan2(Rnl.toNumber(z[1]), Rnl.toNumber(z[0])))
  }
};

const add = (x, y) => [Rnl.add(x[0], y[0]), Rnl.add(x[1], y[1])];
const subtract = (x, y) => [Rnl.subtract(x[0], y[0]), Rnl.subtract(x[1], y[1])];

const multiply = (x, y) => {
  return [
    Rnl.subtract(Rnl.multiply(x[0], y[0]), Rnl.multiply(x[1], y[1])),
    Rnl.add(Rnl.multiply(x[0], y[1]), Rnl.multiply(x[1], y[0]))
  ]
};

const divide = (x, y) => {
  if (!Rnl.isZero(x[1]) && !Rnl.isZero(y[1])) {
    if (Rnl.lessThan(Rnl.abs(y[1]), Rnl.abs(y[0]))) {
      const ratio = Rnl.divide(y[1], y[0]);
      const denom = Rnl.add(y[0], Rnl.multiply(y[1], ratio));
      return  [
        Rnl.divide(Rnl.add(x[0], Rnl.multiply(x[1], ratio)), denom),
        Rnl.divide(Rnl.subtract(x[1], Rnl.multiply(x[0], ratio)), denom),
      ]
    } else {
      const ratio = Rnl.divide(y[0], y[1]);
      const denom = Rnl.add(y[1], Rnl.multiply(y[0], ratio));
      return  [
        Rnl.divide(Rnl.add(x[1], Rnl.multiply(x[0], ratio)), denom),
        Rnl.divide(Rnl.add(Rnl.negate(x[0]), Rnl.multiply(x[1], ratio)), denom),
      ]
    }
  } else if (Rnl.isZero(x[1])) {
    // real x divided by complex y
    if (Rnl.lessThan(Rnl.abs(y[1]), Rnl.abs(y[0]))) {
      const ratio = Rnl.divide(y[1], y[0]);
      const denom = Rnl.add(y[0], Rnl.multiply(y[1], ratio));
      return  [
        Rnl.divide(x[0], denom),
        Rnl.negate(Rnl.multiply(x[0], Rnl.divide(ratio, denom))),
      ]
    } else {
      const ratio = Rnl.divide(y[0], y[1]);
      const denom = Rnl.add(y[1], Rnl.multiply(y[0], ratio));
      return  [
        Rnl.divide(Rnl.multiply(x[0], ratio), denom),
        Rnl.negate(Rnl.divide(x[0], denom)),
      ]
    }
  } else if (Rnl.isZero(y[1])) {
    // Complex x divided by real y
    if (Rnl.isZero(y[0])) ; else {
      return  [Rnl.divide(x[0], y[0]), Rnl.divide(x[1], y[0])]
    }
  } else {
    // both x and y are reals
    if (Rnl.isZero(y[0])) {
      return errorOprnd("DIV")
    } else {
      return [Rnl.divide(x[0], y[0]), Rnl.zero ]
    }
  }
};

const increment = z => [Rnl.increment(z[0]), z[1]];
const decrement = z => [Rnl.decrement(z[0]), z[1]];

const inverse = z => {
  // Complex inverse 1 / z
  if (Rnl.isZero(z[1])) {
    if (Rnl.isZero((z[0]))) { return errorOprnd("DIV") }
    return [Rnl.inverse(z[0]), 0]
  } else {
    return divide([Rnl.one, Rnl.zero], z)
  }
};

const cos = z => {
  const real = Rnl.multiply(Rnl.cos(z[0]), Rnl.cosh(z[1]));
  const imPart = Rnl.multiply(Rnl.negate(Rnl.sin(z[0])), Rnl.sinh(z[1]));
  return [real, imPart]
};

const sin = z => {
  const real = Rnl.multiply(Rnl.sin(z[0]), Rnl.cosh(z[1]));
  const imPart = Rnl.multiply(Rnl.cos(z[0]), Rnl.sinh(z[1]));
  return [real, imPart]
};

const log = x => {
  let z = [Rnl.zero, Rnl.zero];
  // Natural (base e) logarithm of a complex number, x
  if (Rnl.isZero(x[0]) && Rnl.isZero(x[1])) {
    return errorOprnd("ORIGIN", "log")
  } else {
    z[0] = Rnl.fromNumber(Math.log(Rnl.toNumber(Rnl.hypot(x[0], x[1]))));
    z[1] = angle(x);   // phase angle, in radians
  }
  return z
};

const isSmall = x => Rnl.lessThan(Rnl.abs(x), [BigInt(1), BigInt(100000000000000)]);

const exp = x => {
  // Complex exponentiation
  let z = [Rnl.zero, Rnl.zero];
  if (isSmall(x[1])) {
    z[1] = Rnl.zero;
    z[0] = Rnl.exp(x[0]);
  } else {
    if (Rnl.isZero(x[0])) {
      z[0] = Rnl.cos(x[1]);
      if (isSmall(z[0])) { z[0] = Rnl.zero; }
      z[1] = Rnl.sin(x[1]);
      if (isSmall(z[1])) { z[1] = Rnl.zero; }
    } else {
      const realExp = Rnl.exp(x[0]);
      z[0] = Rnl.multiply(realExp, Rnl.cos(x[1]));
      z[1] = Rnl.multiply(realExp, Rnl.sin(x[1]));
    }
  }
  return z
};

const power = (x, y) =>{
  let z = [Rnl.zero, Rnl.zero];
  // powers: z = e^(log(x) × y)
  if (!isComplex(y)) {
    z = log(x);
    z[0] = Rnl.multiply(z[0], y);
    z[1] = Rnl.multiply(z[1], y);
  } else if (Rnl.isZero(y[1])) {
    z = log(x);
    z[0] = Rnl.multiply(z[0], y[0]);
    z[1] = Rnl.multiply(z[1], y[0]);
  } else if (Rnl.isZero(x[1]) && !Rnl.isNegative(x[0])) { 
    x[0] = Rnl.fromNumber(Math.log(Rnl.toNumber(x[0])));
    z[0] = Rnl.multiply(x[0], y[0]);
    z[1] = Rnl.multiply(x[0], y[1]);
  } else {
    x = log(x);
    z[0] = Rnl.subtract(Rnl.multiply(x[0], y[0]), Rnl.multiply(x[1], y[1]));
    z[1] = Rnl.add(Rnl.multiply(x[1], y[0]), Rnl.multiply(x[0], y[1]));
  }
  
  z = exp(z);
  if (isSmall(z[1])) { z[1] = Rnl.zero; }
  if (isSmall(z[0])) { z[0] = Rnl.zero; }
  return z
};

const acosh = z => {
  // acosh(z) = log( z + √(z - 1) × √(z + 1) )
  return log(add(z, multiply(sqrt(decrement(z)), sqrt(increment(z)))))
};

const asinh = z => {
  // Log(z + Sqrt(z * z + 1))
  const s = sqrt(add(multiply(z, z), [Rnl.one, Rnl.zero]));
  return log(add(z, s))
};

const atanh = z => {
  // atanh(z) = [ log(1+z) - log(1-z) ] / 2
  return divide(subtract(log(increment(z)), log(subtract([Rnl.one, Rnl.zero], z))), [Rnl.two, Rnl.zero])
};

const asin = z => {
  // arcsinh (i * z) / i
  return divide(asinh(multiply(j, z)), j)
};

const atan = z => {
  // (Log(1 + iz) - Log(1 - iz)) / (2 * i)  cf Kahan
  const term1 = log(increment(multiply(j, z)));
  const term2 = log(subtract([Rnl.one, Rnl.zero],(multiply(j, z))));
  return divide(subtract(term1, term2), [Rnl.zero, Rnl.two])  
};

const sqrt = x => {
  const z = log(x);
  z[0] = Rnl.divide(z[0], Rnl.two);
  z[1] = Rnl.divide(z[1], Rnl.two);
  return exp(z)
};

const lanczos = zPlusOne => {
  // Lanczos approximation of Gamma function.
  // Coefficients are from 2004 PhD thesis by Glendon Pugh.
  // *An Analysis of the Lanczos Gamma Approximation*
  // The following equation is from p. 116 of the Pugh thesis:
  // Γ(z+1) ≈ 2 * √(e / π) * ((z + 10.900511 + 0.5) / e) ^ (z + 0.5) * sum
  const z = subtract(zPlusOne, [Rnl.one, Rnl.zero]);
  const sqr = Rnl.sqrt(Rnl.divide(e, pi));
  const term1 = multiply([Rnl.two, Rnl.zero], [sqr, Rnl.zero]);
  const k = Rnl.fromNumber(11.400511);
  const oneHalf = [[BigInt(1), BigInt(2)], Rnl.zero];
  const term2 = power(divide(add(z, [k, Rnl.zero]), [e, Rnl.zero]), add(z, oneHalf));

  // Coefficients from Pugh, Table 8.5
  const d = ["2.48574089138753565546e-5", "1.05142378581721974210",
    "-3.45687097222016235469", "4.51227709466894823700", "-2.98285225323576655721",
    "1.05639711577126713077", "-0.195428773191645869583", "0.0170970543404441224307",
    "-0.000571926117404305781283", "0.00000463399473359905636708",
    "-0.00000000271994908488607703910"];

  // sum = d_0 + ∑_(k=1)^10 d_k/(z+k)
  let sum = [Rnl.fromString(d[0]), Rnl.zero];
  for (let k = 1; k <= 10; k++) {
    const d = [Rnl.fromString(d[k]), Rnl.zero];
    const complexK = [Rnl.fromNumber(k), Rnl.zero];
    sum = add(sum, divide(d, add(z, complexK)));
  }

  return multiply(multiply(term1, term2), sum)
};

const display$3 = (z, formatSpec, decimalFormat) => {
  const complexSpec = /[∠°]/.test(formatSpec) ? formatSpec.slice(-1) : "j";
  let resultDisplay = "";
  let altResultDisplay = "";
  if (complexSpec === "j") {
    const real = format(z[0], formatSpec, decimalFormat);
    let imPart = format(z[1], formatSpec, decimalFormat);
    if (imPart.charAt(0) === "-") {
      resultDisplay = real + " - j\\," + -imPart;
      altResultDisplay = real + " - j " + -imPart;
    } else {
      resultDisplay = real + " + j\\, " + imPart;
      altResultDisplay = real + " + j " + imPart;
    }
  } else {
    const mag = Rnl.hypot(z[0], z[1]);
    let angle = Cpx.angle(z);
    const inDegrees = complexSpec.indexOf("°") > -1;
    if (inDegrees) {
      angle = Rnl.divide(Rnl.multiply(angle, Rnl.fromNumber(180)), Rnl.pi);
    }
    resultDisplay = format(mag, formatSpec, decimalFormat) + "∠" +
                    format(angle, formatSpec, decimalFormat) + (inDegrees ? "°" : "");
    altResultDisplay = resultDisplay;
  }
  return [resultDisplay, altResultDisplay]
};

const Cpx = Object.freeze({
  j,
  real,
  imag,
  abs,
  conjugate,
  angle,
  inverse,
  increment,
  decrement,
  isComplex,
  add,
  subtract,
  divide,
  multiply,
  negate,
  power,
  exp,
  log,
  sqrt,
  sin,
  cos,
  asin,
  atan,
  acosh,
  asinh,
  atanh,
  lanczos,
  display: display$3
});

// Two helper functions
const isMatrix = oprnd => {
  return (
    (oprnd.dtype & dt.ROWVECTOR) ||
    (oprnd.dtype & dt.COLUMNVECTOR) ||
    (oprnd.dtype & dt.MATRIX)
  )
};
const isVector = oprnd => {
  return (((oprnd.dtype & dt.ROWVECTOR) || (oprnd.dtype & dt.COLUMNVECTOR)) > 0)
};

const transpose = oprnd => {
  const result = { unit: oprnd.unit };
  if (isVector(oprnd)) {
    result.value = oprnd.value;
    const delta = ((oprnd.dtype & dt.ROWVECTOR) ? 1  : -1 ) * (dt.COLUMNVECTOR - dt.ROWVECTOR);
    result.dtype = oprnd.dtype + delta;
  } else if (oprnd.dtype & dt.MATRIX) {
    result.value = oprnd.value[0].map((x, i) => oprnd.value.map(y => y[i]));
    result.dtype = oprnd.dtype;
  } else {
    return errorOprnd("BAD_TRANS")
  }
  return result
};

const convertFromBaseUnits$1 = (oprnd, gauge, factor) => {
  let conversion = (isVector(oprnd))
    ? oprnd.value.map((e) => Rnl.divide(e, factor))
    : oprnd.value.map(row => row.map(e => Rnl.divide(e, factor)));
  if (!Rnl.isZero(gauge)) {
    conversion = (isVector(oprnd))
      ? oprnd.value.map((e) => Rnl.subtract(e, gauge))
      : oprnd.value.map(row => row.map(e => Rnl.subtract(e, gauge)));
  }
  return Object.freeze(conversion)
};

const convertToBaseUnits$1 = (oprnd, gauge, factor) => {
  let conversion = clone(oprnd.value);
  if (!Rnl.isZero(gauge)) {
    conversion = (isVector(oprnd))
      ? oprnd.value.map((e) => Rnl.add(e, gauge))
      : oprnd.value.map(row => row.map(e => Rnl.add(e, gauge)));
  }
  conversion = (isVector(oprnd))
    ? conversion.map((e) => Rnl.multiply(e, factor))
    : conversion.map(row => row.map(e => Rnl.multiply(e, factor)));
  return Object.freeze(conversion)
};

const elementDisplay = (value, dtype, formatSpec, decimalFormat, isAlt = false) => {
  let display = value === undefined
    ? ""
    : (dtype & dt.RATIONAL)
    ? format(value, formatSpec, decimalFormat)
    : (dtype & dt.COMPLEX)
    ? Cpx.display(value, formatSpec, decimalFormat)[0]
    : (dtype & dt.BOOLEAN) || (dtype & dt.STRING)
    ? (isAlt ? value : "\\text{" + value + "}")
    : value;
  if (isAlt && ((dtype & dt.RATIONAL) || (dtype & dt.COMPLEX))) {
    display = display.replace(/{,}/g, ",");
  }
  return display
};

const display$2 = (m, formatSpec, decimalFormat) => {
  let str = "";
  if (m.dtype & dt.MATRIX) {
    str += "\\begin{pmatrix}";
    const numRows = m.value.length;
    const numCols = m.value[0].length;
    for (let i = 0; i < numRows; i++) {
      for (let j = 0; j < numCols; j++) {
        str += elementDisplay(m.value[i][j], m.dtype, formatSpec, decimalFormat) + " &";
      }
      str = str.slice(0, -1) + " \\\\ ";
    }
    str = str.slice(0, -3).trim();
    str += "\\end{pmatrix}";
  } else {
    const numArgs = m.value.plain ? m.value.plain.length : m.value.length;
    if (numArgs === 0) {
      str += "[\\,]";
    } else {
      str += "\\begin{bmatrix}";
      const argSep = (m.dtype & dt.ROWVECTOR) ? " & " : " \\\\ ";
      if (m.value.plain) {
        for (let i = 0; i < numArgs; i++) {
          str += elementDisplay(m.value.plain[i], m.dtype, formatSpec, decimalFormat) +
                ((i < numArgs - 1) ? argSep : "");
        }
      } else {
        for (let i = 0; i < numArgs; i++) {
          str += elementDisplay(m.value[i], m.dtype, formatSpec, decimalFormat) +
                ((i < numArgs - 1) ? argSep : "");
        }
      }
      str += "\\end{bmatrix}";
    }
  }
  return str
};

const displayAlt$2 = (m, formatSpec, decimalFormat) => {
  let str = "";
  if (m.dtype & dt.MATRIX) {
    str += "(";
    const numRows = m.value.length;
    const numCols = m.value[0].length;
    for (let i = 0; i < numRows; i++) {
      for (let j = 0; j < numCols; j++) {
        str += elementDisplay(m.value[i][j], m.dtype, formatSpec, decimalFormat, true) + ", ";
      }
      str = str.slice(0, -2) + "; ";
    }
    str = str.slice(0, -2).trim();
    str += ")";
  } else {
    str += "[";
    const argSep = (m.dtype & dt.ROWVECTOR) ? ", " : "; ";
    if (m.value.plain) {
      const numArgs = m.value.plain.length;
      for (let i = 0; i < numArgs; i++) {
        str += elementDisplay(m.value.plain[i], m.dtype, formatSpec, decimalFormat, true) +
           ((i < numArgs - 1) ? argSep : "");
      }
    } else {
      const numArgs = m.value.length;
      for (let i = 0; i < numArgs; i++) {
        str += elementDisplay(m.value[i], m.dtype, formatSpec, decimalFormat, true) +
               ((i < numArgs - 1) ? argSep : "");
      }
    }
    str += "]";
  }
  return str
};

const findfirst$1 = (el, array) => {
  if (!isVector(array)) { return errorOprnd("NOT_VECTOR", "findfirst") }
  const isNumeric = Rnl.isRational(el);
  for (let i = 0; i < array.value.length; i++) {
    const val = array.value[i];
    if ((isNumeric & Rnl.areEqual(val, el)) || val === el ) {
      return Rnl.fromNumber(i + 1)
    }
  }
  return Rnl.zero
};

const identity = (num, mutable) => {
  const n = Rnl.isRational(num) ? Rnl.toNumber(num) : num;
  if (n === 1) {
    return  [Rnl.one]
  } else {
    const M = [];
    for (let i = 0; i < n; i++) {
      M.push(new Array(n).fill(Rnl.zero));
      M[i][i] = Rnl.one;
    }
    return mutable ? M : Object.freeze(M)
  }
};

const invert = (matrix, returnDeterminant) => {
  // Invert a square matrix via Gaussian elimination.
  // A lightly editied copy of http://blog.acipo.com/matrix-inversion-in-javascript/

  if (matrix.length !== matrix[0].length) {
    return errorOprnd("NONSQUARE")
  }
  const dim = matrix.length;
  let i = 0;
  let ii = 0;
  let j = 0;
  let temp = Rnl.zero;
  let determinant = Rnl.one;

  const C = clone(matrix);
  const I = identity(dim, true);

  for (i = 0; i < dim; i += 1) {
    // get the element temp on the diagonal
    temp = C[i][i];

    // if we have a 0 on the diagonal (we'll need to swap with a lower row)
    if (Rnl.isZero(temp)) {
      //look through every row below the i'th row
      for (ii = i + 1; ii < dim; ii++) {
        //if the ii'th row has a non-0 in the i'th col
        if (!Rnl.isZero(C[ii][i])) {
          //it would make the diagonal have a non-0 so swap it
          for (j = 0; j < dim; j++) {
            temp = C[i][j];     // temp store i'th row
            C[i][j] = C[ii][j]; // replace i'th row by ii'th
            C[ii][j] = temp;    // repace ii'th by temp
            temp = I[i][j];     // temp store i'th row
            I[i][j] = I[ii][j]; // replace i'th row by ii'th
            I[ii][j] = temp;    // repace ii'th by temp
          }
          //don't bother checking other rows since we've swapped
          break
        }
      }
      //get the new diagonal
      temp = C[i][i];
      //if it's still 0, not invertable (error)
      if (Rnl.isZero(temp)) { return errorOprnd("SINGULAR") }
    }

    if (returnDeterminant) {
      determinant = Rnl.divide(determinant, temp);
      if (i === dim - 1) {
        return determinant
      }
    }

    // Scale this row down by temp (so we have a 1 on the diagonal)
    for (j = 0; j < dim; j++) {
      C[i][j] = Rnl.divide(C[i][j], temp); //apply to original matrix
      I[i][j] = Rnl.divide(I[i][j], temp); //apply to identity
    }

    // Subtract this row (scaled appropriately for each row) from ALL of
    // the other rows so that there will be 0's in this column in the
    // rows above and below this one
    for (ii = 0; ii < dim; ii++) {
      // Only apply to other rows (we want a 1 on the diagonal)
      if (ii === i) { continue }

      // We want to change this element to 0
      temp = C[ii][i];

      // Subtract (the row above(or below) scaled by temp) from (the
      // current row) but start at the i'th column and assume all the
      // stuff left of diagonal is 0 (which it should be if we made this
      // algorithm correctly)
      for (j = 0; j < dim; j++) {
        C[ii][j] = Rnl.subtract(C[ii][j], Rnl.multiply(temp, C[i][j])); // original matrix
        I[ii][j] = Rnl.subtract(I[ii][j], Rnl.multiply(temp, I[i][j])); // identity
      }
    }
  }

  // We've finished. C should be the identity matrix.
  // Matrix I should be the inverse.
  return Object.freeze(I)
};


const submatrix = (oprnd, index, colIndex) => {
  if (!((index.dtype & dt.RATIONAL) || (index.dtype & dt.RANGE))) {
    return errorOprnd("BAD_INDEX")
  }
  let value = [];
  let dtype = oprnd.dtype;

  // Get the row index
  let start = 0;
  let step = 1;
  let end = 0;
  if (index.dtype & dt.RANGE) {
    start = Rnl.toNumber(index.value[0]);
    step = Rnl.toNumber(index.value[1]);
    end = index.value[2] === "∞"
      ? oprnd.value.length
      : Rnl.toNumber(index.value[2]);
  } else if (Rnl.areEqual(index.value, Rnl.zero)) {
    // Return all the rows
    start = 1;
    end = oprnd.value.length;
  } else {
    start = Rnl.toNumber(index.value);
    end = start;
  }

  if (isVector(oprnd)) {
    // Skip the column index. Proceed directly to load values into the result.
    if (start === end) {
      // return a scalar
      value = oprnd.value[start - 1];
      dtype = oprnd.dtype - (oprnd.dtype & dt.ROWVECTOR) -
        (oprnd.dtype & dt.COLUMNVECTOR);
    } else if (step === 1) {
      value = oprnd.value.slice(start - 1, end);
    } else {
      for (let i = start - 1; i < end; i += step) {
        value.push(oprnd.value[i]);
      }
    }
    Object.freeze(value);
    return Object.freeze({ value, unit: oprnd.unit, dtype })
  }

  // Get the column index
  let colStart = 0;
  let colStep = 1;
  let colEnd = 0;
  if (colIndex) {
    if (colIndex.dtype & dt.RANGE) {
      colStart = Rnl.toNumber(colIndex.value[0]);
      colStep = Rnl.toNumber(colIndex.value[1]);
      colEnd = colIndex.value[2] === "∞"
        ? oprnd.value[0].length
        : Rnl.toNumber(colIndex.value[2]);
    } else if (Rnl.areEqual(colIndex.value, Rnl.zero)) {
      // Return an entire row.
      colStart = 1;
      colEnd = oprnd.value[0].length;
    } else {
      colStart = Rnl.toNumber(colIndex.value);
      colEnd = colStart;
    }
  }

  // Now load values into the result
  if (start === end && colStart === colEnd) {
    // return a scalar
    value = oprnd.value[start - 1][colStart - 1];
    dtype -= dt.MATRIX;

  } else if (start === end) {
    // return a row vector
    if (colStep === 1) {
      value = oprnd.value[start - 1].slice(colStart - 1, colEnd);
    } else {
      for (let j = colStart - 1; j < colEnd; j += colStep) {
        value.push(oprnd.value[start - 1][j]);
      }
    }
    dtype = dtype - dt.MATRIX + dt.ROWVECTOR;

  } else if (colStart === colEnd) {
    // return a column vector
    for (let i = start - 1; i < end; i += step) {
      value.push(oprnd.value[i][colStart - 1]);
    }
    dtype = dtype - dt.MATRIX + dt.COLUMNVECTOR;

  } else if (colStep === 1) {
    for (let i = start - 1; i < end; i += step) {
      value.push([]);
      value[value.length - 1] = oprnd.value[i].slice(colStart - 1, colEnd);
    }

  } else {
    for (let i = start - 1; i < end; i += step) {
      value.push([]);
      for (let j = colStart - 1; j < colEnd; j += colStep) {
        value[value.length - 1].push(oprnd[i][j]);
      }
    }
  }
  Object.freeze(value);
  return Object.freeze({ value, unit: oprnd.unit, dtype })
};

const multResultType = (o1, o2) => {
  // o1 and o2 are to undergo matrix multiplication.
  // The value is found elsewhere.
  // Here we find the resulting data type.
  if ((o1.dtype & dt.ROWVECTOR) && (o2.dtype & dt.COLUMNVECTOR)) {
    return dt.RATIONAL
  } else if ((o1.dtype & dt.MATRIX) && (o2.dtype & dt.COLUMNVECTOR)) {
    return o2.dtype
  } else if ((o1.dtype & dt.ROWVECTOR) && (o2.dtype & dt.MATRIX)) {
    return o1.dtype
  } else {
    return dt.MATRIX + dt.RATIONAL
  }
};

const operandFromRange = range => {
  // Input was [start:step:end...]
  // Populate a vector with values from a range
  if (Rnl.isZero(range[1])) { return errorOprnd("ZERO_STEP") }
  if (!Rnl.areEqual(Rnl.sign(Rnl.subtract(range[2], range[0])), Rnl.sign(range[1]))) {
    range[1] = Rnl.negate(range[1]);
  }
  const array = [];
  if (Rnl.greaterThan(range[2], range[0])) {
    for (let j = range[0]; Rnl.lessThan(j, range[2]); j = Rnl.add(j, range[1])) {
      array.push(j);
    }
  } else {
    for (let j = range[0]; Rnl.greaterThanOrEqualTo(j, range[2]); j = Rnl.add(j, range[1])) {
      array.push(j);
    }
  }
  if (!Rnl.areEqual(array[array.length - 1], range[2])) {
    array.push(range[2]);
  }
  Object.freeze(array);
  return Object.freeze({
    value: array,
    unit: { expos: allZeros },
    dtype: dt.RATIONAL + dt.COLUMNVECTOR
  })
};

const operandFromTokenStack = (tokenStack, numRows, numCols) => {
  // TODO: Get dtype correct for matrices that contain strings or booleans.
  if (numRows === 0 && numCols === 0) {
    return Object.freeze({ value: new Array(0), unit: null, dtype: dt.COLUMNVECTOR })
  } else if (numRows === 1 && numCols === 1) {
    // One element. Return a scalar.
    return tokenStack.pop()

  } else if (numRows === 1 || numCols === 1) {
    const numArgs = Math.max(numRows, numCols);
    let array;
    let dtype = tokenStack[tokenStack.length - 1].dtype;
    if (numRows === 1 && (dtype & dt.COLUMNVECTOR)) {
      // Matrix composed of column vectors appended side by side
      dtype = dtype - dt.COLUMNVECTOR + dt.MATRIX;
      array = new Array(tokenStack[0].value.length);
      for (let i = 0; i < tokenStack[0].value.length; i++) {
        array[i] = [];
        for (let j = 0; j < numArgs; j++) {
          const token = tokenStack[j].value[i];
          if (token.unit && token.unit.isConverted) { return errorOprnd("UNIT_IN_MAT") }
          array[i][j] = token.value;
        }
      }
      for (let i = 0; i < numArgs; i++) { tokenStack.pop(); }
    } else  {
      // Vector
      array = new Array(numArgs);
      dtype += numRows === 1 ? dt.ROWVECTOR : dt.COLUMNVECTOR;
      for (let j = numArgs - 1; j >= 0; j--) {
        const token = tokenStack.pop();
        if (token.unit && token.unit.isConverted) { return errorOprnd("UNIT_IN_MAT") }
        array[j] = token.value;
      }
    }
    Object.freeze((array));
    return Object.freeze({
      value: array,
      unit: (dtype & dt.RATIONAL) ? { expos: allZeros } : null,
      dtype
    })

  } else {
    // 2D matrix
    const array = new Array(numRows);
    const dtype = tokenStack[tokenStack.length - 1].dtype + dt.MATRIX;
    for (let j = 0; j < numRows; j++) {
      array[j] = new Array(numCols);
    }
    for (let k = numRows - 1; k >= 0; k--) {
      for (let j = numCols - 1; j >= 0; j--) {
        const token = tokenStack.pop();
        if (token.unit && token.unit.isConverted) { return errorOprnd("UNIT_IN_MAT") }
        array[k][j] =  token.value;
      }
    }
    Object.freeze((array));
    return Object.freeze({
      value: array,
      unit: (dtype & dt.RATIONAL) ? { expos: allZeros } : null,
      dtype
    })
  }
};

const ones = (m, n) => {
  if (m === 1 || n === 1) {
    return {
      value: new Array(n).fill(Rnl.one),
      unit: allZeros,
      dtype: dt.RATIONAL + (m === 1 ? dt.ROWVECTOR : dt.COLUMNVECTOR)
    }
  } else {
    const value = [];
    for (let i = 0; i < m; i++) {
      value.push(new Array(n).fill(Rnl.one));
    }
    Object.freeze(value);
    return Object.freeze({
      value: value,
      unit: { expos: allZeros },
      dtype: dt.RATIONAL + dt.MATRIX
    })
  }
};

const zeros = (m, n) => {
  if (m === 1 || n === 1) {
    return {
      value: new Array(n).fill(Rnl.zero),
      unit: allZeros,
      dtype: dt.RATIONAL + (m === 1 ? dt.ROWVECTOR : dt.COLUMNVECTOR)
    }
  } else {
    const value = [];
    for (let i = 0; i < m; i++) {
      value.push(new Array(n).fill(Rnl.zero));
    }
    Object.freeze(value);
    return Object.freeze({
      value: value,
      unit: { expos: allZeros },
      dtype: dt.RATIONAL + dt.MATRIX
    })
  }
};

const Matrix = Object.freeze({
  convertFromBaseUnits: convertFromBaseUnits$1,
  convertToBaseUnits: convertToBaseUnits$1,
  display: display$2,
  displayAlt: displayAlt$2,
  elementDisplay,
  findfirst: findfirst$1,
  identity,
  invert,
  multResultType,
  ones,
  operandFromRange,
  operandFromTokenStack,
  submatrix,
  transpose,
  zeros
});

const columnListFromRange = (start, end) => {
  const columnList = [];
  for (let i = start; i <= end; i++) {
    columnList.push(i);
  }
  return columnList
};

const valueFromDatum = datum => {
  return datum === "true"
  ? true
  : datum === "false"
  ? false
  : numberRegEx$5.test(datum)
  ? Rnl.fromString(datum)
  : datum === ""
  ? undefined
  : datum
};

const datumFromValue = (value, dtype, formatSpec) => {
  return value === true
    ? "true"
    : value === false
    ? "false"
    : value === undefined
    ? ""
    : (dtype === dt.RATIONAL)
    ? format(value, formatSpec, "1000000.")
    : value
};

const identifyRange = (df, args) => {
  // A helper function for range(). Also used by map.range()

  let iStart;
  let iEnd;
  let rowList = [];
  let columnList = [];

  // Find what must be returned. I.e. populate rowList and columnList
  if (df.value.data[0].length === 1) {
    // The source is a single-row data frame. Each argument calls a column.
    iStart = 0;
    iEnd = 0;
    if (df.dtype === dt.DATAFRAME) { df.value.usedRows.add(0); }
    for (let i = 0; i < args.length; i++) {
      if (args[i].dtype === dt.STRING) {
        columnList.push(df.value.columnMap[args[i].value]);
      } else if (args[i].dtype === dt.RATIONAL) {
        columnList.push(Rnl.toNumber(args[i].value));
      } else if (args[i].dtype === dt.RANGE) {
        const jStart = Rnl.toNumber(args[i].value[0]) - 1;
        const jEnd = Rnl.toNumber(args[i].value[2]) - 1;
        for (let j = jStart; j <= jEnd; j++) {
          columnList.push(j);
        }
      }
    }
  } else if (args.length === 1 && args[0].dtype === dt.RATIONAL) {
    // Return a column vector
    iStart = 0;
    iEnd = df.value.data[0].length - 1;
    columnList.push(Rnl.toNumber(args[0].value) - 1);
  } else if (args.length === 1 && args[0].dtype === dt.RANGE) {
    columnList = columnListFromRange(
      Rnl.toNumber(args[0].value[0]) - 1,
      Rnl.toNumber(args[0].value[2]) - 1
    );
    iStart = 0;
    iEnd = df.value.data[0].length - 1;
    if (df.dtype === dt.DATAFRAME) {
      for (let i = iStart; i <= iEnd; i++) { df.value.usedRows.add(i); }
    }
  } else if (args.length === 1 && args[0].dtype === dt.STRING) {
    // Only one indicator has been given.
    // Check both the rowMap and the columnMap.
    if (df.value.rowMap && args[0].value in df.value.rowMap) {
      // Return a row
      iStart = df.value.rowMap[args[0].value];
      iEnd = iStart;
      if (df.dtype === dt.DATAFRAME) { df.value.usedRows.add(iStart); }
      columnList = columnListFromRange(0, df.value.data.length - 1);
    } else if (df.value.columnMap && args[0].value in df.value.columnMap) {
      // Return a column vector
      iStart = 0;
      iEnd = df.value.data[0].length - 1;
      columnList.push(df.value.columnMap[args[0].value]);
    } else {
      return [errorOprnd("BAD_ROW_NAME", args[0].value), null, null, null]
    }
  } else if (args.length === 1 && args[0].dtype === dt.STRING + dt.COLUMNVECTOR) {
    // A vector of row names
    for (const rowName of args[0].value) {
      rowList.push(rowName);
      if (df.dtype === dt.DATAFRAME) { df.value.usedRows.add(df.value.rowMap[rowName]); }
    }
    columnList = columnListFromRange(0, df.value.data.length - 1); // All the columns.
  } else if (args.length === 1 && args[0].dtype === dt.STRING + dt.ROWVECTOR) {
    // A vector of column names
    iStart = 0;
    iEnd = df.value.data[0].length;
    for (const colName of args[0].value) {
      columnList.push(df.columnIndicator[colName]);
    }
  } else if (args.length === 2) {
    // Get rows
    if (args[0].dtype === dt.STRING) {
      if (df.value.rowMap && args[0].value in df.value.rowMap) {
        iStart = df.value.rowMap[args[0].value];
        iEnd = iStart;
      } else if (args[0].value === "end") {
        iStart = df.value.data[0].length - 1;
        iEnd = iStart;
      } else {
        iStart = 0;
        iEnd = df.value.data.length - 1;
      }
    } else if (args[0].dtype === dt.RATIONAL) {
      iStart = Rnl.toNumber(args[0].value) - 1;
      iEnd = iStart;
    } else if (args[0].dtype === dt.RANGE) {
      iStart = Rnl.toNumber(args[0].value[0]) - 1;
      iEnd = Rnl.toNumber(args[0].value[2]) - 1;
    } else ;
    if (df.dtype === dt.DATAFRAME) {
      for (let i = iStart; i <= iEnd; i++) {
        df.value.usedRows.add(i);
      }
    }

    // Get columns
    if (args[0].dtype === dt.STRING && df.value.columnMap
        && (args[0].value in df.value.columnMap)) {
      columnList.push(df.value.columnMap[args[0].value]);
    }
    if (args[1].dtype === dt.STRING && df.value.columnMap
        && (args[1].value in df.value.columnMap)) {
      columnList.push(df.value.columnMap[args[1].value]);
    } else if (args[1].dtype === dt.STRING && args[1].value === "end") {
      columnList.push(df.value.headings.length - 1);
    } else if (args[1].dtype === dt.RATIONAL) {
      columnList.push(Rnl.toNumber(args[1].value) - 1);
    } else if (args[1].dtype === dt.RANGE) {
      const jStart = Rnl.toNumber(args[1].value[0]) - 1;
      const jEnd = Rnl.toNumber(args[1].value[2]) - 1;
      for (let i = jStart; i <= jEnd; i++) {
        columnList.push(df.value.columnMap[Rnl.toNumber(args[1].value) - 1]);
      }
    } else ;

  } else {
    // Default for args is a list of (row|column) names
    iStart = 0;
    iEnd = args.length;
    if (df.value.rowMap && df.value.rowMap[args[iEnd - 1].value]) {
      // A row list
      rowList = args.map(arg => arg.value);
      columnList = columnListFromRange(0, df.value.data.length - 1); // All the columns.
    } else {
      // A column list
      columnList = args.map(arg => df.value.columnMap[arg.value]);
    }
  }
  return [rowList, columnList, iStart, iEnd]
};

const range$1 = (df, args, unitAware) => {
  const [rowList, columnList, iStart, iEnd] = identifyRange(df, args);
  let unit = Object.create(null);
  if (rowList.dtype && rowList.dtype === dt.ERROR) { return rowList }
  if (rowList.length === 0 && iStart === iEnd && columnList.length === 1) {
    // Return one value.
    let dtype = df.value.dtype[columnList[0]];
    if (dtype & dt.QUANTITY) { dtype -= dt.QUANTITY; }
    const j = columnList[0];
    let value = valueFromDatum(df.value.data[j][iStart]);
    unit.expos = (dtype & dt.RATIONAL) ? allZeros : null;
    if (unitAware && df.value.units[j]) {
      const unitName = df.value.units[j] ? df.value.units[j] : undefined;
      const unitObj = unitFromUnitName(unitName);
      value = Rnl.multiply(Rnl.add(value, unitObj.gauge), unitObj.factor);
      unit.expos = unitObj.expos;
    }
    return { value, unit, dtype }

  } else if (columnList.length === 1) {
    // Return data from one column, in a column vector
    const j = columnList[0];
    const unitName = df.value.units[j] ? df.value.units[j] : {};
    unit = (df.unit && df.unit[unitName]) ? df.unit[unitName] : { expos: null };
    let value = df.value.data[j].slice(iStart, iEnd + 1).map(e => valueFromDatum(e));
    let dtype = df.value.dtype[j] + dt.COLUMNVECTOR;
    if (dtype & dt.QUANTITY) { dtype -= dt.QUANTITY; }
    if ((dtype & dt.RATIONAL) && unitAware && unit.gauge) {
      value = value.map(el => Rnl.multiply(Rnl.add(el, unit.gauge), unit.factor));
    }
    return { value, name: df.value.headings[j], unit, dtype }
  } else {
    // Return a data frame.
    const headings = [];
    const units = [];
    const dtype = [];
    const data = [];
    const columnMap = Object.create(null);
    const unitMap = Object.create(null);
    const rowMap = rowList.length === 0 ? false : Object.create(null);
    for (let j = 0; j < columnList.length; j++) {
      headings.push(df.value.headings[columnList[j]]);
      const unitName = df.value.units[columnList[j]];
      units.push(unitName);
      if (unitName && !unitMap[unitName]) { unitMap[unitName] = df.unit[unitName]; }
      dtype.push(df.value.dtype[columnList[j]]);
      columnMap[df.value.headings[j]] = j;
      if (rowList.length > 0) {
        const elements = [];
        for (let i = 0; i < rowList.length; i++) {
          const rowName = rowList[i];
          elements.push(df.value.data[columnList[j]][df.value.rowMap[rowName]]);
          rowMap[rowName] = i;
        }
        data.push(elements);
      } else {
        data.push(df.value.data[columnList[j]].slice(iStart, iEnd + 1));
      }
    }
    return {
      value: {
        data,
        headings,
        columnMap,
        rowMap,
        units,
        usedRows: new Set(),
        dtype
      },
      unit: clone(unitMap),
      dtype: dt.DATAFRAME
    }
  }
};

const numberRegEx$5 = new RegExp("^(?:=|" + Rnl.numberPattern.slice(1) + "$)");
const mixedFractionRegEx = /^-?(?:[0-9]+(?: [0-9]+\/[0-9]+))$/;
const escRegEx = /^\\#/;

const hasUnitRow = lines => {
  // Determine if there is a row for unit names.
  if (lines.length < 3) { return false }
  const units = lines[1].split("\t").map(el => el.trim());
  for (const unitName of units) {
    if (numberRegEx$5.test(unitName)) { return false }
  }
  const firstDataLine = lines[2].split("\t").map(el => el.trim());
  for (const datum of firstDataLine) {
    if (numberRegEx$5.test(datum)) { return true }
  }
  return false
};

const dataFrameFromTSV = (str, vars) => {
  // Load a TSV string into a data frame.
  // Data frames are loaded column-wise. The subordinate data structures are:
  let data = [];   // where the main data lives, not including column names or units.
  const headings = [];                  // An array containing the column names
  const columnMap = Object.create(null); // map of column names to column index numbers
  let rowMap =  false;                   // ditto for rows.
  const units = [];                     // array of unit names, one for each column
  const dtype = [];                     // each column's Hurmet operand type
  const unitMap = Object.create(null);   // map from unit names to unit data
  const usedRows = new Set();

  if (str.charAt(0) === "`") { str = str.slice(1); }

  if (vars) {
    // Substitute values in for string interpolation, ${…}
    const matches = arrayOfRegExMatches(interpolateRegEx, str);
    for (let i = matches.length - 1; i >= 0; i--) {
      const mch = matches[i];
      const varName = mch.value.slice(2, -1);
      let value = "";
      if (varName === "undefined") {
        value = "";
      } else if (varName === "j" && !vars.j) {
        value = "j";
      } else {
        const cellAttrs = vars[varName];
        if (!cellAttrs) { return errorOprnd("V_NAME", varName) }
        const oprnd = fromAssignment(cellAttrs, false);
        if (oprnd.dtype === dt.ERROR) { return oprnd }
        value = Rnl.isRational(oprnd.value) ? String(Rnl.toNumber(oprnd.value)) : oprnd.value;
      }
      str = str.slice(0, mch.index) + value + str.slice(mch.index + mch.length);
    }
  }

  // It's tab-separated values, so we can use splits to load in the data.
  const lines = str.split(/\r?\n/g);
  const gotUnits = hasUnitRow(lines);

  // Read in the column headings.
  const cols = lines[0].split('\t');
  if (cols[0].length > 0 && cols[0].charAt(0) === "#") {
    // Create a rowMap. The first datum in each row is a key to the row.
    rowMap = Object.create(null);
    cols[0] = cols[0].slice(1);
  } else if (escRegEx.test(cols[0])) {
    cols[0] = cols[0].slice(1);
  }
  cols.forEach((datum, col) => {
    datum = datum.trim();
    headings.push(datum);
    columnMap[datum] = col;
    data.push([]);
  });

  // Units
  if (gotUnits) {
    const unitNames = lines[1].split('\t');
    unitNames.forEach(unitName => {
      unitName = unitName.trim();
      units.push(unitName);
      if (unitName.length > 0 && !unitMap[unitName]) {
        const unit = unitFromUnitName(unitName);
        if (unit) {
          unitMap[unitName] = unit;
        } else {
          return errorOprnd("DF_UNIT", unitName)
        }
      }
    });
  }

  // Data
  let row = -1;
  for (let i = (gotUnits ? 2 : 1); i < lines.length; i++) {
    const line = lines[i];
    row += 1;
    line.split('\t').forEach((datum, col) => {
      datum = datum.trim();
      if (datum === "=sum(up)") {
        let sum = Rnl.zero;
        for (const num of data[col]) {
          if (!isNaN(num)) {
            sum = Rnl.add(sum, Rnl.fromString(num));
          }
        }
        datum = String(Rnl.toNumber(sum));
      }
      data[col].push(datum);
      if (rowMap && col === 0) {
        rowMap[datum] = row;
      }
    });
  }

  // Data is loaded in. Determinine the operand type of each column
  for (let j = 0; j < data.length; j++) {
    for (let i = 0; i < data[0].length; i++) {
      const datum = data[j][i];
      if (datum === "") { continue } // undefined datum.
      dtype.push(
        numberRegEx$5.test(datum)
        ? dt.RATIONAL + ((units.length > 0 && units[j].length > 0) ? dt.QUANTITY : 0)
        : (datum === "true" || datum === "false")
        ? dt.BOOLEAN
        : dt.STRING
      );
      break
    }
  }

  // Check if this data qualifies as a Hurmet Map.
  let isMap = false;
  let iStart = 0;
  if (Object.keys(unitMap).length === 0) {
    isMap = true;
    iStart = (rowMap) ? 1 : 0;
    for (let i = iStart + 1; i < dtype.length; i++) {
      if (dtype[i] !== dtype[iStart]) { isMap = false; break }
    }
  }

  if (isMap) {
    if (dtype[iStart] === dt.RATIONAL) {
      data = data.map((col, i) => dtype[i] === dt.RATIONAL
        ? col.map(el => Rnl.fromString(el))
        : col
      );
    }
    return {
      value: { data, headings, columnMap, rowMap, usedRows },
      unit: (dtype[0] === dt.RATIONAL ? { expos: allZeros } : null),
      dtype: dt.MAP + dtype[iStart]
    }
  } else {
    return {
      value: { data, headings, columnMap, rowMap, units, usedRows, dtype },
      unit: unitMap,
      dtype: dt.DATAFRAME
    }
  }
};

const dataFrameFromVectors = (vectors, formatSpec) => {
  // Take an array of vectors and return a dataframe.
  const data = [];
  const headings = [];
  const columnMap = Object.create(null);
  const units = [];
  const dtype = [];
  const unitMap = Object.create(null);
  const rowMap = (vectors[0].name && vectors[0].name === "name") ? Object.create(null) : false;
  for (let j = 0; j < vectors.length; j++) {
    const vector = vectors[j];
    const vectorType = (vector.dtype & dt.ROWVECTOR)
      ? dt.ROWVECTOR
      : (vector.dtype & dt.COLUMNVECTOR)
      ? dt.COLUMNVECTOR
      : dt.ERROR;
    if (vectorType === dt.ERROR) { return errorOprnd("NOT_VECTOR", "dataframe") }
    headings.push(vector.name);
    columnMap[vector.name] = j;
    const colDtype = vector.dtype - vectorType;
    data.push(vector.value.map(e => datumFromValue(e, colDtype, formatSpec)));
    dtype.push(colDtype);
    if (vector.unit && vector.unit.name) {
      units.push(vector.unit.name);
      if (!unitMap[vector.unit.name]) {
        const unit = unitFromUnitName(vector.unit.name);
        unitMap[vector.unit.name] = unit;
      }
    } else {
      units.push(null);
    }
    if (rowMap) {
      const nameVector = vectors[0].value;
      for (let i = 0; i < nameVector.length; i++) {
        rowMap[nameVector[i]] = i;
      }
    }
  }
  return {
    value: {
      data: data,
      headings: headings,
      columnMap: columnMap,
      rowMap: rowMap,
      units: units,
      usedRows: new Set(),
      dtype: dtype
    },
    unit: unitMap,
    dtype: dt.DATAFRAME
  }
};

const matrix2table = (matrix, headings, rowHeadings) => {
  // Use the contents of a matrix to create a dataframe.
  if (rowHeadings.length > 0) { headings = [""].concat(headings); }
  const columnMap = Object.create(null);
  for (let i = 0; i < headings.length; i++) {
    columnMap[headings[i]] = i;
  }
  let rowMap = false;
  if (rowHeadings.length > 0) {
    rowMap = Object.create(null);
    for (let i = 0; i < rowHeadings.length; i++) {
      rowMap[rowHeadings[i]] = i;
    }
  }
  const data = new Array(headings.length);
  let delta = 0;
  if (rowHeadings.length > 0) {
    data[0] = rowHeadings;
    delta = 1;
  }
  for (let j = 0; j < matrix.value[0].length; j++) {
    const k = j + delta;
    data[k] = [];
    for (let i = 0; i < matrix.value.length; i++) {
      data[k].push(matrix.value[i][j]);
    }
  }
  return {
    value: { data, headings, columnMap, rowMap },
    unit: matrix.unit,
    dtype: matrix.dtype - dt.MATRIX + dt.MAP
  }
};

const append$1 = (o1, o2, formatSpec, unitAware) => {
  // Append a vector or single value to a dataframe.
  // We use copy-on-write for dataframes, so copy it here.
  const oprnd = o1.dtype === dt.DATAFRAME ? clone(o1) : clone(o2);
  const addend = o1.dtype === dt.DATAFRAME ? o2 : o1;
  if (o1.dtype === dt.DATAFRAME) {
    oprnd.value.columnMap[addend.name] = oprnd.value.headings.length;
    oprnd.value.headings.push(addend.name);
  } else {
    for (const [key, value] of Object.entries(oprnd.value.columnMap)) {
      oprnd.value.columnMap[key] = value + 1;
    }
    oprnd.value.columnMap[addend.name] = 0;
    oprnd.value.headings.unshift(addend.name);
  }
  let unit;
  if (addend.unit && addend.unit.name && addend.unit.name.length > 0) {
    if (o1.dtype === dt.DATAFRAME) {
      oprnd.value.units.push(addend.unit.name);
    } else {
      oprnd.value.units.unshift(addend.unit.name);
    }
    unit = unitFromUnitName(addend.unit.name);
    if (!oprnd.unit[addend.unit.name]) {
      oprnd.unit[addend.unit.name] = unit;
    }
  }
  const dtype = addend.dype === dt.RATIONAL && unit
    ? dt.RATIONAL + dt.QUANTITY
    : !isMatrix(addend)
    ? addend.dtype
    : (addend.dtype & dt.COLUMNVECTOR)
    ? addend.dtype - dt.COLUMNVECTOR
    : addend.dtype - dt.ROWVECTOR;
  const numRows = oprnd.value.data[0].length;
  if (numRows === 1 && !isMatrix(addend)) {
    const v = unitAware && dtype === dt.RATIONAL && unit
      ? Rnl.subtract(Rnl.divide(addend.value, unit.factor), unit.gauge)
      : addend.value;
    if (o1.dtype === dt.DATAFRAME) {
      oprnd.value.data.push([datumFromValue(v, dtype, formatSpec)]);
    } else {
      oprnd.value.data.unshift([datumFromValue(v, dtype, formatSpec)]);
    }
  } else {
    if (unitAware && dtype === dt.RATIONAL && unit) {
      const v = Matrix.convertFromBaseUnits(addend, unit.gauge, unit.factor);
      if (o1.dtype === dt.DATAFRAME) {
        oprnd.value.data.push(v.map(e => datumFromValue(e, dtype, formatSpec)));
      } else {
        oprnd.value.data.unshift(v.map(e => datumFromValue(e, dtype, formatSpec)));
      }
    } else {
      if (o1.dtype === dt.DATAFRAME) {
        oprnd.value.data.push(addend.value.map(
          e => datumFromValue(e, dtype, formatSpec)
        ));
      } else {
        oprnd.value.data.unshift(addend.value.map(
          e => datumFromValue(e, dtype, formatSpec)
        ));
      }
    }
  }
  if (o1.dtype === dt.DATAFRAME) {
    oprnd.value.dtype.push(dtype);
  } else {
    oprnd.value.dtype.unshift(dtype);
  }
  return oprnd
};

const quickDisplay = str => {
  // This is called from the lexer for a display that changes with every keystroke.
  if (str === "") { return "" }
  str = str.trim();
  let arrayFormat = "";
  if (str.charAt(0) === "#") {
    str = str.slice(1).trim();
    arrayFormat = "l|cccccccccccccccccccccccc";
  } else {
    arrayFormat = "c";
  }
  str = addTextEscapes(str);
  const sepRegEx = / *\t */g;
  const lines = str.split(/\r?\n/g);
  let tex = "";
  if (lines.length < 3) {
    tex = "\\begin{matrix}\\text{";
    for (let i = 0; i < lines.length; i++) {
      tex += tablessTrim(lines[i]).replace(sepRegEx, "} & \\text{") + "} \\\\ \\text{";
    }
    tex = tex.slice(0, -10) + "\\end{matrix}";
  } else {
    tex = `\\begin{array}{${arrayFormat}}\\text{`;
    const cells = new Array(lines.length);
    for (let i = 0; i < lines.length; i++) {
      cells[i] = tablessTrim(lines[i]).split(sepRegEx);
    }

    let gotUnits = false;
    let gotAnswer = false;
    for (let j = 0; j < cells[1].length; j++) {
      if (numberRegEx$5.test(cells[1][j])) { gotAnswer = true; break }
    }
    if (!gotAnswer) {
      // line[1] had no numbers. If any numbers are in line[2] then line[1] is units.
      for (let j = 0; j < cells[2].length; j++) {
        if (numberRegEx$5.test(cells[2][j])) { gotUnits = true; break }
      }
    }

    for (let i = 0; i < lines.length; i++) {
      tex += tablessTrim(lines[i]).replace(sepRegEx, "} & \\text{");
      tex += ((gotUnits && i === 1) || (!gotUnits && i === 0))
        ? "} \\\\ \\hline \\text{"
        : "} \\\\ \\text{";
    }

    tex = tex.slice(0, -10) + "\\end{array}";
  }
  tex = tex.replace(/·/g, "$·$");
  return tex
};

// The next 40 lines contain helper functions for display().
const accentRegEx$1 = /^([^\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]+)([\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1])(.+)?/;
const subscriptRegEx = /([^_]+)(_[^']+)?(.*)?/;
const accentFromChar$1 = Object.freeze({
  "\u0300": "\\grave",
  "\u0301": "\\acute",
  "\u0302": "\\hat",
  "\u0303": "\\tilde",
  "\u0304": "\\bar",
  "\u0305": "\\bar",
  "\u0307": "\\dot",
  "\u0308": "\\ddot",
  "\u030A": "\\mathring",
  "\u030C": "\\check",
  "\u0332": "\\underline",
  "\u20d0": "\\overleftharpoon",
  "\u20d1": "\\overrightharpoon",
  "\u20d6": "\\overleftarrow",
  "\u20d7": "\\vec",
  "\u20e1": "\\overleftrightarrow"
});

const formatColumnName = str => {
  // We can't call parse(str) because that would be a circular dependency.
  // So this module needs its own function to format dataframe column names.
  if (!isValidIdentifier$1.test(str)) {
    return "\\text{" + addTextEscapes(str) + "}"
  } else {
    // Format it like a Hurmet identifier.
    str = str.replace(/′/g, "'"); // primes
    let parts = str.match(accentRegEx$1);
    if (parts) {
      str = accentFromChar$1[parts[2]] + "{" + parts[1] + "}";
      return str + (parts[3] ? parts[3] : "")
    } else {
      parts = str.match(subscriptRegEx);
      let result = parts[1].length > 1 ? `\\text{${parts[1]}}` : parts[1];
      if (parts[2]) {
        result += "_" + `\\text{${parts[2].slice(1)}}`;
      }
      return result + (parts[3] ? parts[3] : "")
    }
  }
};

const isNotEmpty = row => {
  if (!row) { return false }
  for (let i = 0; i < row.length; i++) {
    if (row[i] !== "" && row[i] !== null) { return true }
  }
  return false
};

const getNumInfo =  df => {
  // Gather info for use in setting numbers on a decimal tab.
  const data = df.data.plain ? df.data.plain : df.data;
  const numCols = data.length;
  const colInfo = new Array(numCols);
  const cellInfo = new Array(numCols);
  const DFisRational = !df.dtype && Rnl.isRational(data[0][0]);
  for (let j = 0; j < numCols; j++) {
    if (DFisRational || (df.dtype && df.dtype[j] & dt.RATIONAL)) {
      colInfo[j] = {
        hasAlignChar: false,
        maxLenBeforeAlignChar: 0,
        maxLenAfterAlignChar: 0
      };
      cellInfo[j] = [];
      for (let i = 0; i < data[0].length; i++) {
        const datum = data[j][i];
        const pos = datum.indexOf(".");
        const hasAlignChar = pos > -1;
        const lenBeforeAlignChar = hasAlignChar ? pos : datum.length;
        const lenAfterAlignChar = hasAlignChar ? datum.length - pos - 1 : 0;
        cellInfo[j].push({ hasAlignChar, lenBeforeAlignChar, lenAfterAlignChar });
        if (hasAlignChar) {
          colInfo[j].hasAlignChar = true;
          if (lenAfterAlignChar > colInfo[j].maxLenAfterAlignChar) {
            colInfo[j].maxLenAfterAlignChar = lenAfterAlignChar;
          }
        }
        if (lenBeforeAlignChar > colInfo[j].maxLenBeforeAlignChar) {
          colInfo[j].maxLenBeforeAlignChar = lenBeforeAlignChar;
        }
      }
    }
  }
  return [colInfo, cellInfo]
};

const displayNum = (datum, colInfo, cellInfo, decimalFormat) => {
  let str = "";
  const m = colInfo.maxLenBeforeAlignChar - cellInfo.lenBeforeAlignChar;
  if ( m > 0) {
    str = "\\phantom{" + "0".repeat(m) + "}";
  }

  str += formattedDecimal(datum, decimalFormat);

  const n = colInfo.maxLenAfterAlignChar - cellInfo.lenAfterAlignChar;
  if (colInfo.hasAlignChar && (n > 0 || !cellInfo.hasAlignChar)) {
    str += "\\phantom{";
    if (colInfo.hasAlignChar && !cellInfo.hasAlignChar) {
      str += decimalFormat.slice(-1) === "." ? "." : "{,}";
    }
    if (n > 0) { str += "0".repeat(n); }
    str += "}";
  }
  return str
};

const totalRegEx = /^(?:total|sum)/i;

const display$1 = (df, formatSpec = "h3", decimalFormat = "1,000,000.", omitHeading = false) => {
  const data = df.data.plain ? df.data.plain : df.data;
  if (data.length === 0) { return "" }
  const numRows = data[0].length;
  const numCols = data.length;
  const writeRowNums = numRows > 5 && !df.rowMap;
  const isMap = !df.dtype;
  let str = "\\renewcommand{\\arraycolsep}{8pt}\\renewcommand{\\arraystretch}{1.15}";
  str += "\\begin{array}{";
  str += df.rowMap
    ? "l|"
    : writeRowNums
    ? "r|"
    : "";
  for (let j = 0; j < numCols; j++) {
    str += "c";
  }
  str += "}";

  if (!omitHeading) {
    // Write the column names
    if (writeRowNums) { str += "&"; }
    for (let j = 0; j < numCols; j++) {
      str += "{" + formatColumnName(df.headings[j]) + "}&";
    }
    str = str.slice(0, -1) + " \\\\ ";
  }

  // Write the unit names
  if (isNotEmpty(df.units)) {
    if (writeRowNums) { str += "&"; }
    for (let j = 0; j < numCols; j++) {
      let rowTex = "";
      if (df.units[j] && df.units[j].length > 0) {
        const unitTex = unitTeXFromString(df.units[j]);
        rowTex = unitTex.replace("\\;\\, ", "");
      } else {
        rowTex = "";
      }
      str += rowTex + "&";
    }
    str = str.slice(0, -1) + " \\\\ ";
  }
  str += "\\hline ";

  const [colInfo, cellInfo] = getNumInfo(df);

  // Write the data
  for (let i = 0; i < numRows; i++) {
    if (i === numRows - 1 && totalRegEx.test(data[0][i])) { str += "\\hline "; }
    if (writeRowNums) { str += String(i + 1) + " & "; }
    for (let j = 0; j < numCols; j++) {
      const datum = data[j][i];
      if (isMap) {
        str += datum === undefined
        ? " & "
        : Rnl.isRational(datum)
        ? format(datum, formatSpec, decimalFormat) + "&"
        : Cpx.isComplex(datum)
        ? Cpx.display(datum, formatSpec, decimalFormat)[0] + "&"
        : "\\text{" + addTextEscapes(datum) + "} &";
      } else {
        str += mixedFractionRegEx.test(datum)
          ? format(Rnl.fromString(datum), formatSpec, decimalFormat) + "&"
          : numberRegEx$5.test(datum)
          ? displayNum(datum, colInfo[j], cellInfo[j][i], decimalFormat) + "&"
          : datum === ""
          ? "&"
          : "\\text{" + addTextEscapes(datum) + "}&";
      }
    }
    str = str.slice(0, -1) + " \\\\ ";
  }

  str = str.slice(0, -3).trim();
  str += "\\end{array}";
  return str
};

const displayAlt$1 = (df, formatSpec = "h3", decimalFormat = "1,000,000.",
                   omitHeading = false) => {
  const data = df.data.plain ? df.data.plain : df.data;
  if (data.length === 0) { return "" }
  const numRows = data[0].length;
  const numCols = data.length;
  const writeRowNums = numRows > 5 && !df.rowMap;
  let str = "``";

  if (!omitHeading) {
    // Write the column names
    if (writeRowNums) { str += "\t"; }
    str += ( (df.headings[0] === "name" || df.headings[0] === "item")
      ? ""
      : df.headings[0]) + "\t";
    for (let j = 1; j < numCols; j++) {
      str += df.headings[j] + "\t";
    }
    str = str.slice(0, -1) + "\n";
  }

  // Write the unit names
  if (isNotEmpty(df.units)) {
    if (writeRowNums) { str += "\t"; }
    for (let j = 0; j < numCols; j++) {
      str += df.units[j] + "\t";
    }
    str = str.slice(0, -1) + "\n";
  }

  // Write the data
  const isMap = !df.dtype;
  for (let i = 0; i < numRows; i++) {
    if (writeRowNums) { str += String(i + 1) + "\t"; }
    for (let j = 0; j < numCols; j++) {
      const datum = data[j][i];
      if (isMap) {
        str += datum === undefined
          ? "\t"
          : Rnl.isRational(datum)
          ? format(datum, formatSpec, decimalFormat).replace(/{,}/g, ",") + "\t"
          : Cpx.isComplex(datum)
          ? Cpx.display(datum, formatSpec, decimalFormat)[1].replace(/{,}/g, ",") + "\t"
          : datum + "\t";
      } else {
        if (mixedFractionRegEx.test(datum)) {
          str += format(Rnl.fromString(datum), formatSpec, "100000.") + "\t";
        } else {
          str += datum + "\t";
        }
      }
    }
    str = str.slice(0, -1) + "\n";
  }

  str = str.slice(0, -1).trim();
  str += "``";
  return str
};

const DataFrame = Object.freeze({
  append: append$1,
  dataFrameFromTSV,
  dataFrameFromVectors,
  matrix2table,
  display: display$1,
  displayAlt: displayAlt$1,
  quickDisplay,
  range: range$1
});

const dateFormatRegEx = /^(?:(w{3,4}), )?(y{1,4}|m{3,4}|d{1,2})([- .]| de )(m{2,4}|d{1,2})([- .]|, | de )(y{4}|d{2})(?: ([a-z]{2,3}))?$/;
// Capturing groups:
//  [1] weekday, optional
//  [2] day, month, or year
//  [3] separator between first & second [dmy]
//  [4] day or month
//  [5] separator
//  [6] day or year
//  [7] language code, optional


const dateRegEx$1 = /^'(\d{4})-(\d{1,2})-(\d{1,2})'$/;
const dateInSecondsFromIsoString = dateStr => {
  // Return the number of seconds after the start January 1, 1970, UTC.
  const match = dateStr.match(dateRegEx$1);
  const timeZoneOffset = new Date().getTimezoneOffset() / 60; // in hours
  const date = new Date( match[1], match[2] - 1, match[3], -timeZoneOffset );
  return Math.floor(date.getTime() / 1000) // seconds after Jan 1, 1970, UTC
};

const dateInSecondsFromToday = _ => {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const isoString = `'${year}-${month}-${day}'`;
  return dateInSecondsFromIsoString(isoString)
};

const dateRPN = dateStr => {
  return "⌾" + String(dateInSecondsFromIsoString(dateStr))
};

const dateDisplayFromIsoString = (str, dateFormatSpec, inExpression = false) => {
  const rnlDate = [BigInt(dateInSecondsFromIsoString(str)), BigInt(1)];
  return formatDate(rnlDate, dateFormatSpec, inExpression)
};

const processDMY = (dmy, date, language, inExpression) => {
  return dmy === "d"
    ? String(date.getUTCDate())
    : dmy === "dd"
    ? String(date.getUTCDate()).padStart(2, '0')
    : dmy === "mm"
    ? String(date.getUTCMonth() + 1).padStart(2, '0')
    : dmy === "mmm" || (inExpression && dmy === "mmmm")
    ? new Intl.DateTimeFormat(language, { month: 'short', timeZone: 'GMT' }).format(date)
    : dmy === "mmmm"
    ? new Intl.DateTimeFormat(language, { month: 'long', timeZone: 'GMT' }).format(date)
    : String(date.getUTCFullYear())
};

const formatDate = (dateValue, dateFormatSpec, inExpression = false) => {
  // dateValue = number of seconds after start of January 1, 1970
  const date = new Date(Rnl.toNumber(dateValue) * 1000);
  // Write results in the document's main font.
  const dateClass = inExpression ? "" : "\\class{date-result}{";

  if (!dateFormatSpec || dateFormatSpec === "yyyy-mm-dd" ||
    (inExpression && dateFormatSpec.indexOf("de") > -1)) {
    let result = `${dateClass}\\text{${date.toISOString().split("T")[0]}}`;
    if (!inExpression)  { result += "}"; }
    return result
  }

  const match = dateFormatRegEx.exec(dateFormatSpec);
  const language = match[7] ? match[7] : "en";

  let str = "";
  if (match[1] && !inExpression) {
    const length = match[1].length === "3" ? "short" : "long";
    str += new Intl.DateTimeFormat(language, { weekday: length, timeZone: 'GMT' }).format(date);
    str += ", ";
  }
  str += processDMY(match[2], date, language, inExpression);
  str += match[3];
  str += processDMY(match[4], date, language, inExpression);
  str += match[5];
  str += processDMY(match[6], date, language, inExpression);

  let result = `${dateClass}\\text{${str}}`;
  if (!inExpression)  { result += "}"; }
  return result
};

/*
 * lexer.js
 * This file supports parser.js.
 */

// Define constants for token types.
const tt = Object.freeze({
  UNARY: 0, //  unary TeX function, e.g. \sqrt
  BINARY: 1, // binary TeX function, e.g. \xrightarrow, differs from tt.BIN
  SUB: 2,
  SUP: 3,
  ACCENT: 4,
  // A left paren or bracket, ( or [], will be made invisible if located
  // directly after a token whose token type < 5.
  UNARYMINUS: 5,
  DIV: 6, //    stacked division: / \atop
  PRIME: 7,
  CURRENCY: 8, // currency symbol: $,£,¥,€, etc. Precedes its number.
  ORD: 9,
  VAR: 10,   // variable name, one letter long
  NUM: 11,
  SPACE: 12,
  LONGVAR: 13,
  LEFTBRACKET: 14,
  RIGHTBRACKET: 15,
  BIG_OPERATOR: 16,
  LEFTRIGHT: 17, //   |
  STRING: 18,
  UNIT: 19, //    unit-of-measure, e.g., 'meters' or °
  BIN: 20, //     binary infix operators that render but don't calculate, e.g., ± \cdots
  ADD: 21, //     binary infix addition or subtraction operator: + -
  MULT: 22, //    binary infix multiplication or division operator: × * · // ÷ modulo
  REL: 23, //     relational operator:  ≟ > < ≤ ≥ etc.
  LOGIC: 24, //   if and or xor else otherwise
  SEP: 25, //     argument separators, cell separators and row separators: , ;
  FUNCTION: 26,
  ACCESSOR: 28, //   dot between a data frame name and a property, as in r.prop
  ENVIRONMENT: 29,
  FACTORIAL: 30,
  SUPCHAR: 31,
  ANGLE: 32,
  RANGE: 33, //       separator for ranges (1:n)
  KEYWORD: 34, //     keywords: for in while
  PROPERTY: 36, //    property name after a dot accessor
  COMMENT: 37,
  RETURN: 38,  // A return statement inside a user-defined function.
  TO: 39,
  DATAFRAME: 40,
  RICHTEXT: 41,
  BOOLEAN: 42,
  MACRO: 43,
  DATE: 44  // Input format is 'yyyy-mm-dd'
});

const minusRegEx = /^-(?![-=<>:])/;
const numberRegEx$4 = new RegExp(Rnl.numberPattern);
const unitRegEx = /^(?:'[^']+'|[°ΩÅK])/;
const dateRegEx = /^'\d{4}-\d{1,2}-\d{1,2}'/;

const texFromNumStr = (numParts, decimalFormat) => {
  let num = "";
  if (numParts[2]) {
    // Hexadecimal
    num = "\\mathrm{" + numParts[2] + "}";
  } else if (numParts[5]) {
    return texFromMixedFraction(numParts)
  } else {
    // Decimal
    num = numParts[3];
    if (numParts[6]) { num += "." + numParts[6]; }
    num = formattedDecimal(num, decimalFormat);
    if (numParts[8]) {
      num += "\\%";
    } else if (numParts[7]) {
      if (numParts[7].charAt(0) === "-") {
        num += "\\text{e-}" + numParts[7].slice(1);
      } else {
        num += "\\text{e}" + numParts[7];
      }
    }
  }
  if (numParts[1]) {
    num = "\\text{-}" + num;
  }
  return num
};

const isUnary = (prevToken) => {
  switch (prevToken.ttype) {
    case tt.NUM:
    case tt.ORD:
    case tt.VAR:
    case tt.DATE:
    case tt.RIGHTBRACKET:
    case tt.LONGVAR:
    case tt.UNIT:
    case tt.CURRENCY:
    case tt.SUPCHAR:
    case tt.PRIME:
    case tt.FACTORIAL:
      return false
    default:
      return true
  }
};

const wordRegEx = /^(?:(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u212C\u2130\u2131\u210B\u2110\u2112\u2133\u211B\u212F\u210A\u2113\u2134]|(?:\uD835[\uDC00-\udc33\udc9c-\udccf\udd38-\udd50]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*|!in|-->|->|left\.|right\.|log10|log2)/;

const words = Object.freeze({
  //       input,    tex output,          calc output, type, closeDelim
  "true": ["true", "\\mathord{\\text{true}}", "true", tt.BOOLEAN, ""],
  "false": ["false", "\\mathord{\\text{false}}", "false", tt.BOOLEAN, ""],
  cos: ["cos", "\\cos", "cos", tt.FUNCTION, ""],
  cosd: ["cosd", "\\operatorname{\\cos_d}", "cosd", tt.FUNCTION, ""],
  if: ["if", "\\mathrel{\\mathrm{if}}", "if", tt.LOGIC, ""],
  else: ["else", "\\mathrel{\\mathrm{else}}", "else", tt.LOGIC, ""],
  elseif: ["elseif", "\\mathrel{\\mathrm{elseif}}", "elseif", tt.LOGIC, ""],
  and: ["and", "\\mathrel{\\mathrm{and}}", "and", tt.LOGIC, ""],
  or: ["or", "\\mathrel{\\mathrm{or}}", "or", tt.LOGIC, ""],
  for: ["for", "\\mathrel{\\mathrm{for}}", "for", tt.KEYWORD, ""],
  while: ["while", "\\mathrel{\\mathrm{while}}", "while", tt.KEYWORD, ""],
  in: ["in", "\\mathrel{\\mathrm{in}}", "in", tt.REL, ""],
  "!in": ["!in", "\\mathrel{\\mathrm{!in}}", "∉", tt.REL, ""],
  break: ["break", "\\mathrel{\\mathrm{break}}", "break", tt.KEYWORD, ""],
  to: ["to", "\\mathbin{\\mathrm{to}}", "to", tt.TO, "" ],
  throw: ["throw", "\\mathrel{\\mathrm{throw}}", "throw", tt.UNARY, ""],
  print: ["print", "\\mathrel{\\mathrm{print}}", "print", tt.UNARY, ""],
  return: ["return", "\\mathrel{\\mathrm{return}}", "print", tt.RETURN, ""],
  sqrt: ["sqrt", "\\sqrt", "√", tt.UNARY, ""],
  otherwise: ["otherwise", "\\mathrel{\\mathrm{otherwise}}", "otherwise", tt.LOGIC, ""],
  root: ["root", "\\sqrt", "root", tt.BINARY, ""],
  modulo: ["modulo", "\\mathbin{modulo}", "modulo", tt.MULT],
  sin: ["sin", "\\sin", "sin", tt.FUNCTION, ""],
  sind: ["sind", "\\operatorname{\\sin_d}", "sind", tt.FUNCTION, ""],
  tan: ["tan", "\\tan", "tan", tt.FUNCTION, ""],
  tand: ["tand", "\\operatorname{\\tan_d}", "tand", tt.FUNCTION, ""],
  cotd: ["cotd", "\\operatorname{\\cot_d}", "cotd", tt.FUNCTION, ""],
  secd: ["secd", "\\operatorname{\\sec_d}", "secd", tt.FUNCTION, ""],
  cscd: ["cscd", "\\operatorname{\\csc_d}", "cscd", tt.FUNCTION, ""],
  log: ["log", "\\log", "log", tt.FUNCTION, ""],
  ln: ["ln", "\\ln", "ln", tt.FUNCTION, ""],
  log10: ["log10", "\\log_{10}", "log10", tt.FUNCTION, ""],
  log2: ["log2", "\\log_{2}", "log2", tt.FUNCTION, ""],
  "log!": ["log!", "\\operatorname{log!}", "log!", tt.FUNCTION, ""],
  pi: ["pi", "\\mathrm{pi}", "π", tt.ORD, ""],
  π: ["π", "π", "π", tt.ORD, ""],
  "ℓ": ["ℓ", "ℓ", "ℓ", tt.VAR, ""],
  // A few arrows are placed here to give them priority over other arrows
  "->": ["->", "\u2192", "\u2192", tt.REL, ""], // right arrow
  "-->": ["-->", "\\xrightarrow", "-->", tt.UNARY, ""],
  "<-->": ["<-->", "\\xrightleftarrows", "<-->", tt.UNARY, ""]
});

const miscRegEx = /^([/÷\u2215_:,;\t^+\\\-–−*∗×∘⊗⦼⊙√∛∜·.%|╏‖¦><=≈≟≠≡≤≥≅∈∉∋∌⊂⊄⊆⊈⊃⊇⊉!¡‼¬∧∨⊻~#?⇒⟶⟵→←&@′″∀∃([{⟨⌊⎿⌈⎾〖〗⏋⌉⏌⌋⟩}\])˽∣ℂℕℚℝℤℓℏ∠¨ˆˉ˙˜▪✓\u00A0\u20D7$£¥€₨₩₪]+)/;

const miscSymbols = Object.freeze({
  //    input, output, type,  closeDelim
  "#": ["#", "#", "#", tt.COMMENT, ""],
  "/": ["/", "\\dfrac{", "///", tt.DIV, ""],   // displaystyle fraction
  "//": ["//", "\\tfrac{", "//", tt.DIV, ""], // textstyle fraction
  "///": ["///", "/", "\u2215", tt.MULT, ""],     // inline (shilling) fraction
  "\u2215": ["\u2215", "\u2215", "\u2215", tt.MULT, ""], // inline (shilling) fraction
  "÷": ["÷", "÷", "÷", tt.MULT, ""],
  "./": ["./", "\\mathbin{.'}", "./", tt.MULT, ""],
  "_": ["_", "_", "_", tt.SUB, ""],
  "^": ["^", "^", "^", tt.SUP, ""],
  ".^": [".^", "\\mathbin{.^}", ".^", tt.SUP, ""],
  "+": ["+", "+", "+", tt.ADD, ""],
  "-": ["-", "-", "-", tt.ADD, ""],
  "–": ["-", "-", "-", tt.ADD, ""], // \u2013 en dash
  "−": ["-", "-", "-", tt.ADD, ""], // \u2212 math minus
  ".+": [".+", "\\mathbin{.+}", ".+", tt.ADD, ""],
  ".-": [".-", "\\mathbin{.-}", ".-", tt.ADD, ""],
  "*": ["*", "*", "*", tt.MULT, ""],
  "∗": ["∗", "∗", "∗", tt.MULT, ""],
  "×": ["×", "×", "×", tt.MULT, ""],
  "∘": ["∘", "∘", "∘", tt.MULT, ""], // U+2218
  "⊗": ["⊗", "⊗", "⊗", tt.MULT, ""],
  ".*": [".*", "\\mathbin{.*}", ".*", tt.MULT, ""],
  "√": ["√", "\\sqrt", "√", tt.UNARY, ""],
  "\u221B": ["\u221B", "\\sqrt[3]", "\u221B", tt.UNARY, ""],
  "\u221C": ["\u221C", "\\sqrt[4]", "\u221C", tt.UNARY, ""],
  "+-": ["+-", "\u00B1", "\u00B1", tt.BIN, ""],
  "**": ["**", "\\star", "**", tt.BIN, ""],
  "·": ["·", "\u22C5", "·", tt.MULT, ""], // dot operator
  "...": ["...", "\\dots", "...", tt.RANGE, ""],
  "\\dots": ["\\dots", "\\dots", "...", tt.RANGE, ""],
  "%": ["%", "\\%", "%", tt.FACTORIAL, ""],
  "-:": ["-:", "÷", "÷", tt.MULT, ""],
  "=": ["=", "=", "=", tt.REL, ""],
  "≈": ["≈", "≈", "≈", tt.REL, ""],
  "==": ["==", "⩵", "==", tt.REL, ""],
  "≡": ["≡", "≡", "≡", tt.REL, ""],
  ">": [">", "\\gt", ">", tt.REL, ""],
  "\u226f": ["\u226f", "\\ngtr", "\u226f", tt.REL, ""],
  "<": ["<", "\\lt", "<", tt.REL, ""],
  "\u226e": ["\u226e", "\\nless", "\u226e", tt.REL, ""],
  "?=": ["?=", "\u225F", "\u225F", tt.REL, ""],
  "≟": ["≟", "\u225F", "\u225F", tt.REL, ""],
  "≠": ["≠", "≠", "≠", tt.REL, ""],
  "!=": ["!=", "≠", "≠", tt.REL, ""],
  "<>": ["<>", "≠", "≠", tt.REL, ""],
  ":=": [":=", "\u2254", "\u2254", tt.REL, ""],
  "<=": ["<=", "≤", "≤", tt.REL, ""],
  "≤": ["≤", "≤", "≤", tt.REL, ""],
  ">=": [">=", "\u2265", "\u2265", tt.REL, ""],
  "≥": ["≥", "≥", "≥", tt.REL, ""],
  "-=": ["-=", "\u2261", "\u2261", tt.REL, ""],
  "~=": ["~=", "\u2245", "\u2245", tt.REL, ""],
  "≅": ["≅", "≅", "≅", tt.REL, ""],
  "~~": ["~~", "\u2248", "\u2248", tt.REL, ""],
  "~": ["~", "\\sim", "˽", tt.REL, ""],
  "=>": ["=>", "\u21D2", "\u21D2", tt.REL, ""],
  "⇒": ["⇒", "\u21D2", tt.REL, ""],
  "⟶": ["⟶", "\\xrightarrow", "⟶", tt.UNARY, ""],
  "⟵": ["⟵", "\\xleftarrow", "⟵", tt.UNARY, ""],
  "<=>": ["<=>", "\u21D4", "\u21D4", tt.REL, ""],
  "-<": ["-<", "\u227A", "\u227A", tt.REL, ""],
  ">-": [">-", "\u227B", "\u227B", tt.REL, ""],
  "-<=": ["-<=", "\u2AAF", "\u2AAF", tt.REL, ""],
  ">-=": [">-=", "\u2AB0", "\u2AB0", tt.REL, ""],
  "_|_": ["_|_", "\\bot", "_|_", tt.REL, ""],
  "|--": ["|--", "\u22A2", "\u22A2", tt.REL, ""],
  "|==": ["|==", "\\models", "⊨", tt.REL, ""],
  "∈": ["∈", "∈", "∈", tt.REL, ""],
  "∉": ["∉", "∉", "∉", tt.REL, ""],
  "∋": ["∋", "∋", "∋", tt.REL, ""],
  "∌": ["∌", "∌", "∌", tt.REL, ""],
  "⊂": ["⊂", "⊂", "⊂", tt.REL, ""],
  "⊃": ["⊃", "⊃", "⊃", tt.REL, ""],
  "⊄": ["⊄", "⊄", "⊄", tt.REL, ""],
  "⊅": ["⊅", "⊅", "⊅", tt.REL, ""],
  "⊆": ["⊆", "⊆", "⊆", tt.REL, ""],
  "⊈": ["⊈", "⊈", "⊈", tt.REL, ""],
  "⊇": ["⊇", "⊇", "⊇", tt.REL, ""],
  "⊉": ["⊉", "⊉", "⊉", tt.REL, ""],
  "▪": ["▪", "\\mathrel{▪}", "▪", tt.REL, ""],

  "!": ["!", "!", "!", tt.FACTORIAL, ""],
  "‼": ["‼", "!!", "‼", tt.FACTORIAL, ""],
  "!!": ["!!", "!!", "‼", tt.FACTORIAL, ""],
  "¡": ["¡", "¡", "¡", tt.FACTORIAL, ""],
  "&": ["&", "\\mathbin{\\&}", "&", tt.ADD, ""], // string concatenator
  "&_": ["&_", "\\mathbin{\\underline{\\&}}", "&_", tt.ADD, ""], // concatenate to bottom
  "′": ["′", "'", "′", tt.PRIME, ""],
  "″": ["″", "''", "″", tt.PRIME, ""],
  "′′": ["′′", "''", "′′", tt.PRIME, ""],
  "′′′": ["′′′", "'''", "′′′", tt.PRIME, ""],

  "∀": ["∀", "∀", "∀", tt.LOGIC, ""],
  "∃": ["∃", "∃", "∃", tt.LOGIC, ""],
  "∧": ["∧", "∧", "∧", tt.LOGIC, ""],
  "∨": ["∨", "∨", "∨", tt.LOGIC, ""],
  "⊻": ["⊻", "⊻", "⊻", tt.LOGIC, ""], // xor
  "¬": ["¬", "¬", "¬", tt.UNARY, ""], // logical not
  "&&": ["&&", "{\\;\\&\\&\\;}", "&&", tt.LOGIC, ""],

  "(": ["(", "(", "(", tt.LEFTBRACKET, ")"],
  "[": ["[", "[", "[", tt.LEFTBRACKET, "]"],
  "{": ["{", "\\{", "{", tt.LEFTBRACKET, "\\}"],
  "{:": ["{:", "{", "{:", tt.LEFTBRACKET, "}"],
  "⟨": ["⟨", "⟨", "⟨", tt.LEFTBRACKET, "⟩"],
  ")": [")", ")", ")", tt.RIGHTBRACKET, ""],
  "]": ["]", "]", "]", tt.RIGHTBRACKET, ""],
  "}": ["}", "\\}", "}", tt.RIGHTBRACKET, ""],
  "⟩": ["⟩", "⟩", "⟩", tt.RIGHTBRACKET, ""],
  ":}": [":}", "}", ":}", tt.RIGHTBRACKET, ""],
  "|": ["|", "|", "|", tt.LEFTRIGHT, ""],
  "||": ["||", "\\mathbin{||}", "||", tt.BIN, ""],
  "\\|": ["\\|", "‖", "‖", tt.LEFTRIGHT, ""],
  "‖": ["‖", "‖", "‖", tt.LEFTRIGHT, ""],
  "<<": ["<<", "\u27E8", "\u27E8", tt.LEFTBRACKET, "\u27E9"],
  ">>": [">>", "\u27E9", "\u27E9", tt.RIGHTBRACKET, ""],
  "\u230A": ["\u230A", "\\lfloor ", "\u230A", tt.LEFTBRACKET, "\u230B"],
  "\u23BF": ["\u23BF", "\\lfloor ", "\u230A", tt.LEFTBRACKET, "\u230B"],
  "\u230B": ["\u230B", "\\rfloor ", "\u230B", tt.RIGHTBRACKET, ""],
  "\u23CC": ["\u23CC", "\\rfloor ", "\u230B", tt.RIGHTBRACKET, ""],
  "\u2308": ["\u2308", "\\lceil ", "\u2308", tt.LEFTBRACKET, "\u2309"],
  "\u23BE": ["\u23BE", "\\lceil ", "\u2308", tt.LEFTBRACKET, "\u2309"],
  "\u2309": ["\u2309", "\\rceil ", "\u2309", tt.RIGHTBRACKET, ""],
  "\u23CB": ["\u23CB", "\\rceil ", "\u2309", tt.RIGHTBRACKET, ""],
  "\u3016": ["\u3016", "{", "\u3016", tt.LEFTBRACKET, "\u3017"],
  "\u3017": ["\u3017", "}", "\u3017", tt.RIGHTBRACKET, "\u3017"],
  "¦": ["¦", "\\mid ", "¦", tt.REL, ""],

  // double-struck, i.e. blackboard bold
  "ℂ": ["ℂ", "\u2102", "ℂ", tt.ORD, ""],
  "ℕ": ["ℕ", "\u2115", "ℕ", tt.ORD, ""],
  "ℚ": ["ℚ", "\u211A", "ℚ", tt.ORD, ""],
  "ℝ": ["ℝ", "\u211D", "ℝ", tt.ORD, ""],
  "ℤ": ["ℤ", "\u2124", "ℤ", tt.ORD, ""],

  "ℏ": ["ℏ", "ℏ", "ℏ", tt.ORD, ""],

  //arrows
  "\u2192": ["\u2192", "\u2192", "\u2192", tt.REL, ""],
  "\u2190": ["\u2190", "\u2190", "\u2190", tt.REL, ""], // left arrow
  ">->": [">->", "\u21a3", "\u21a3", tt.REL, ""], // \rightarrowtail
  "->>": ["->>", "\u21a0", "\u21a0", tt.REL, ""], // \twoheadrightarrow
  "|->": ["|->", "\u21a6", "\u21a6", tt.REL, ""], // \mapsto

  // extensible arrows
  "<--": ["<--", "\\xleftarrow", "\u27f5", tt.UNARY, ""],
  "==>": ["==>", "\\xRightarrow", "==>", tt.UNARY, ""],
  "<==": ["<==", "\\xLeftarrow", "<==", tt.UNARY, ""],
  "<-->": ["<-->", "\\xleftrightarrow", "<-->", tt.UNARY, ""],
  "<==>": ["<==>", "\\xLeftrightarrow", "<==>", tt.UNARY, ""],

  "\u2220": ["\u2220", "\u2220", "\u2220", tt.ANGLE, ""],
  "✓": ["✓", "✓", "✓", tt.ORD, ""],
  "˽": ["˽", "~", "˽", tt.SPACE, ""],  // "~" is a no-break space in LaTeX.
  "\\;": ["\\;", ";\\:", "\\;", tt.SEP, ""],
  "…": ["…", "…", "…", tt.ORD, ""],

  ":": [":", "{:}", ":", tt.RANGE, ""], // range separator
  ",": [",", ",\\:", ", ", tt.SEP, ""], // function argument or matrix element separator
  "\t": ["\t", " & ", "\t", tt.SEP, ""],  // dataframe element separator
  ";": [";", " \\\\ ", ";", tt.SEP, ""], // row separator
  "\\\\": ["\\\\", " \\\\ ", ";", tt.SEP, ""], // row separator
  "\\cr": ["\\cr", " \\\\ ", ";", tt.SEP, ""], // row separator

  "$": ["$", "\\$", "$", tt.CURRENCY, ""],
  "£": ["£", "£", "£", tt.CURRENCY, ""],
  "¥": ["¥", "¥", "¥", tt.CURRENCY, ""],
  "€": ["€", "€", "€", tt.CURRENCY, ""],
  "₨": ["₨", "₨", "₨", tt.CURRENCY, ""],
  "₩": ["₩", "₩", "₩", tt.CURRENCY, ""],
  "₪": ["₪", "₪", "₪", tt.CURRENCY, ""]
});

const texFunctionRegEx = /^(\\[A-Za-z]+\.?|\\([:.!\u0020\u220F-\u2211\u222B-\u2230]|'+))/;

const texFunctions = Object.freeze({
  //       input, tex output, calc output,  type,  closeDelim
  "\\aleph": ["\\aleph", "\u2135", "\u2135", tt.VAR, ""],
  "\\beth": ["\\beth", "\u2136", "\u2136", tt.VAR, ""],
  "\\gimel": ["\\gimel", "\u2137", "\u2137", tt.VAR, ""],
  "\\daleth": ["\\daleth", "\u2138", "\u2138", tt.VAR, ""],
  "\\ast": ["\\ast", "∗", "∗", tt.MULT, ""],
  "\\div": ["\\div", "÷", "÷", tt.MULT, ""],
  "\\times": ["\\times", "×", "×", tt.MULT, ""],
  "\\pm": ["\\pm", "±", "±", tt.BIN, ""],
  "\\bmod": ["\\bmod", "\\bmod", "modulo", tt.MULT],
  "\\circ": ["\\circ", "∘", "∘", tt.MULT, ""], // U+2218
  "\\nabla": ["\\nabla", "∇", "∇", tt.ORD, ""],
  "\\otimes": ["\\otimes", "⊗", "⊗", tt.MULT, ""],
  "\\ne": ["\\ne", "≠", "≠", tt.REL, ""],
  "\\cdot": ["\\cdot", "\u22C5", "·", tt.MULT, ""], // dot operator
  "\\le": ["\\le", "≤", "≤", tt.REL, ""],
  "\\leq": ["\\leq", "≤", "≤", tt.REL, ""],
  "\\ge": ["\\ge", "≥", "≥", tt.REL, ""],
  "\\geq": ["\\geq", "≥", "≥", tt.REL, ""],
  "\\equiv": ["\\equiv", "\u2261", "\u2261", tt.REL, ""],
  "\\cong": ["\\cong", "≅", "≅", tt.REL, ""],
  "\\approx": ["\\approx", "\u2248", "\u2248", tt.REL, ""],
  "\\Rightarrow": ["\\Rightarrow", "\u21D2", "\u21D2", tt.REL, ""],
  "\\forall": ["\\forall", "∀", "∀", tt.LOGIC, ""],
  "\\exists": ["\\exists", "∃", "∃", tt.LOGIC, ""],
  "\\infty": ["\\infty", "∞", "∞", tt.ORD, ""],
  "\\sqrt": ["\\sqrt", "\\sqrt", "√", tt.UNARY, ""],
  "\\atop": ["\\atop", "\\atop{", "\\atop", tt.DIV, ""],
  "\\cdots": ["\\cdots", "\u22ef", "\u22ef", tt.BIN, ""],
  "\\vdots": ["\\vdots", "\u22ee", "\u22ee", tt.BIN, ""],
  "\\ddots": ["\\ddots", "\u22f1", "\u22f1", tt.BIN, ""],
  "\\iff": ["\\iff", "\\iff", "\\iff", tt.LOGIC, ""],
  "\\land": ["\\land", "\\land", "\\land", tt.BIN, ""],
  "\\lor": ["\\lor", "\\lor", "\\lor", tt.BIN, ""],
  "\\ngtr": ["\\ngtr", "\\ngtr", "\u226f", tt.REL, ""],
  "\\nless": ["\\nless", "\\nless", "\u226E", tt.REL, ""],
  "\\nleq": ["\\nleq", "\\nleq", "\u2270", tt.REL, ""],
  "\\ngeq": ["\\ngeq", "\\ngeq", "\u2271", tt.REL, ""],
  "\\in": ["\\in", "∈", "∈", tt.REL, ""],
  "\\notin": ["\\notin", "∉", "∉", tt.REL, ""],
  "\\subset": ["\\subset", "⊂", "⊂", tt.REL, ""],
  "\\subseteq": ["\\subseteq", "⊆", "⊆", tt.REL, ""],
  "\\nsubset": ["\\nsubset", "⊄", "⊄", tt.REL, ""],
  "\\nsubseteq": ["\\nsubseteq", "⊈", "⊈", tt.REL, ""],
  "\\supset": ["\\supset", "⊃", "⊃", tt.REL, ""],
  "\\left.": ["\\left.", "\\left.", "{:", tt.LEFTBRACKET, "\\right."],
  "\\right.": ["\\right.", "\\right.", ":}", tt.RIGHTBRACKET, ""],
  "\\mod": ["\\mod", "\\mod", "\\mod", tt.BIN, ""],
  "\\lim": ["\\lim", "\\lim", "\\lim", tt.ORD, ""],
  "\\diamond": ["\\diamond", "\\diamond", "\\diamond", tt.ORD, ""],
  "\\square": ["\\square", "\\square", "\\square", tt.ORD, ""],
  "\\int": ["\\int", "∫", "∫", tt.BIG_OPERATOR, ""],
  "\\iint": ["\\iint", "∬", "∬", tt.BIG_OPERATOR, ""],
  "\\iiint": ["\\iiint", "∭", "∭", tt.BIG_OPERATOR, ""],
  "\\oint": ["\\oint", "∮", "∮", tt.BIG_OPERATOR, ""],
  "\\oiint": ["\\oiint", "∯", "∯", tt.BIG_OPERATOR, ""],
  "\\oiiint": ["\\oiiint", "∰", "∰", tt.BIG_OPERATOR, ""],
  "\\∫": ["\\∫", "\\displaystyle∫", "\\∫", tt.BIG_OPERATOR, ""],
  "\\∬": ["\\∬", "\\displaystyle∬", "\\∬", tt.BIG_OPERATOR, ""],
  "\\∭": ["\\∭", "\\displaystyle∭", "\\∭", tt.BIG_OPERATOR, ""],
  "\\∮": ["\\∮", "\\displaystyle∮", "\\∮", tt.BIG_OPERATOR, ""],
  "\\∯": ["\\∯", "\\displaystyle∯", "\\∯", tt.BIG_OPERATOR, ""],
  "\\∰": ["\\∰", "\\displaystyle∰", "\\∰", tt.BIG_OPERATOR, ""],
  "\\over": ["\\over", "\\dfrac{", "\\over", tt.DIV],
  "\\sum": ["\\sum", "\\displaystyle∑", "∑", tt.BIG_OPERATOR, ""],
  "\\∑": ["\\∑", "\\displaystyle∑", "\\∑", tt.BIG_OPERATOR, ""],
  "\\prod": ["\\prod", "∏", "∏", tt.BIG_OPERATOR, ""],
  "\\∏": ["\\∏", "\\displaystyle∏", "\\∏", tt.BIG_OPERATOR, ""],
  "\\quad": ["\\quad", "\\quad", "\\quad", tt.SPACE, ""],
  "\\qquad": ["\\qquad", "\\qquad", "\\qquad", tt.SPACE, ""],
  "\\align": ["\\align", "\\begin{align}", "\\align", tt.ENVIRONMENT, "\\end{align}"],
  /* eslint-disable max-len */
  "\\aligned": ["\\aligned", "\\begin{aligned}", "\\aligned", tt.ENVIRONMENT, "\\end{aligned}"],
  "\\alignat": ["\\alignat", "\\begin{alignat}", "\\alignat", tt.ENVIRONMENT, "\\end{alignat}"],
  "\\alignedat": ["\\alignedat", "\\begin{alignedat}", "\\alignedat", tt.ENVIRONMENT, "\\end{alignedat}"],
  "\\array": ["\\array", "\\begin{array}", "\\array", tt.ENVIRONMENT, "\\end{array}"],
  "\\darray": ["\\darray", "\\begin{darray}", "\\darray", tt.ENVIRONMENT, "\\end{darray}"],
  "\\subarray": ["\\subarray", "\\begin{subarray}", "\\subarray", tt.ENVIRONMENT, "\\end{subarray}"],
  "\\cases": ["\\cases", "\\begin{cases}", "\\cases", tt.ENVIRONMENT, "\\end{cases}"],
  "\\dcases": ["\\dcases", "\\begin{dcases}", "\\dcases", tt.ENVIRONMENT, "\\end{dcases}"],
  "\\rcases": ["\\rcases", "\\begin{rcases}", "\\rcases", tt.ENVIRONMENT, "\\end{rcases}"],
  "\\drcases": ["\\drcases", "\\begin{drcases}", "\\drcases", tt.ENVIRONMENT, "\\end{drcases}"],
  "\\smallmatrix": ["\\smallmatrix", "\\begin{smallmatrix}", "\\smallmatrix", tt.ENVIRONMENT, "\\end{smallmatrix}"],
  "\\bordermatrix": ["\\bordermatrix", "\\bordermatrix", "\\bordermatrix", tt.ENVIRONMENT, "}"],
  "\\equation": ["\\equation", "\\begin{equation}", "\\equation", tt.ENVIRONMENT, "\\end{equation}"],
  "\\split": ["\\split", "\\begin{split}", "\\split", tt.ENVIRONMENT, "\\end{split}"],
  "\\gather": ["\\gather", "\\begin{gather}", "\\gather", tt.ENVIRONMENT, "\\end{gather}"],
  "\\gathered": ["\\gathered", "\\begin{gathered}", "\\gathered", tt.ENVIRONMENT, "\\end{gathered}"],
  "\\CD": ["\\CD", "\\begin{CD}", "\\CD", tt.ENVIRONMENT, "\\end{CD}"],
  "\\multline": ["\\multline", "\\begin{multline}", "\\multline", tt.ENVIRONMENT, "\\end{multline}"]
  /* eslint-enable max-len */
});

const accents$1 = new Set([
  "Bbb",
  "Overrightarrow",
  "acute",
  "bar",
  "bm",
  "bold",
  "boldsymbol",
  "breve",
  "check",
  "ddot",
  "dot",
  "frak",
  "grave",
  "hat",
  "mathring",
  "overbrace",
  "overgroup",
  "overleftarrow",
  "overleftharpoon",
  "overleftrightarrow",
  "overline",
  "overrightarrow",
  "overrightharpoon",
  "tilde",
  "underbrace",
  "undergroup",
  "underleftarrow",
  "underleftrightarrow",
  "underline",
  "underrightarrow",
  "utilde",
  "vec",
  "widecheck",
  "widehat",
  "widetilde"
]);

// Avoid "operatorname" for functions that are already math operators.
const mathOperators = new Set([
  "arccos",
  "arcsin",
  "arctan",
  "arctg",
  "arcctg",
  "cos",
  "cosec",
  "cosh",
  "cot",
  "cotg",
  "coth",
  "csc",
  "ctg",
  "cth",
  "det",
  "dim",
  "exp",
  "gcd",
  "lg",
  "ln",
  "log",
  "max",
  "min",
  "sec",
  "sin",
  "sinh",
  "sh",
  "sqrt",
  "sup",
  "tan",
  "tanh",
  "tg",
  "th"
]);

const colors = new Set([
  "blue",
  "firebrick",
  "gray",
  "green",
  "orange",
  "pink",
  "purple",
  "red"
]);

const unaries = new Set([
  "bcancel",
  "boxed",
  "Bra",
  "bra",
  "braket",
  "cancel",
  "ce",
  "clap",
  "color",
  "hphantom",
  "hskip",
  "hspace",
  "kern",
  "Ket",
  "ket",
  "label",
  "llap",
  "longdiv",
  "mathclap",
  "mathbb",
  "mathbf",
  "mathcal",
  "mathfrak",
  "mathit",
  "mathnormal",
  "mathrm",
  "mathscr",
  "mathsf",
  "mathtt",
  "mkern",
  "mskip",
  "not",
  "operatorname",
  "phantom",
  "phase",
  "pu",
  "reflectbox",
  "rlap",
  "sout",
  "tag",
  "text",
  "textbf",
  "textcircled",
  "textit",
  "textmd",
  "textnormal",
  "textrm",
  "textsc",
  "textsf",
  "texttt",
  "textup",
  "vcenter",
  "vphantom",
  "xLeftarrow",
  "xLeftrightarrow",
  "xRightarrow",
  "xcancel",
  "xleftarrow",
  "xleftrightarrow",
  "xleftharpoondown",
  "xleftharpoons",
  "xleftharpoonup",
  "xlongequal",
  "xmapsto",
  "xrightarrow",
  "xrightharpoondown",
  "xrightharpoonup",
  "xrightleftarrows",
  "xrightleftharpoons",
  "xtofrom",
  "xtwoheadleftarrow",
  "xtwoheadrightarrow"
]);

const greek = {
  alpha: "α",
  beta: "β",
  chi: "χ",
  delta: "δ",
  Delta: "Δ",
  epsilon: "ε",
  varepsilon: "\u025B",
  eta: "\u03B7",
  gamma: "γ",
  Gamma: "Γ",
  iota: "\u03B9",
  kappa: "\u03BA",
  lambda: "λ",
  Lambda: "Λ",
  mu: "μ",
  nu: "\u03BD",
  omega: "ω",
  Omega: "Ω",
  phi: "\u03D5",
  varphi: "\u03C6",
  Phi: "\u03A6",
  pi: "π",
  Pi: "Π",
  psi: "ψ",
  Psi: "Ψ",
  rho: "ρ",
  sigma: "σ",
  Sigma: "Σ",
  tau: "τ",
  theta: "θ",
  vartheta: "\u03D1",
  Theta: "Θ",
  upsilon: "\u03C5",
  xi: "\u03BE",
  Xi: "\u039E",
  zeta: "\u03B6"
};

const binaries = new Set([
  "colorbox",
  "dfrac",
  "frac",
  "lower",
  "overset",
  "raisebox",
  "stackrel",
  "textcolor",
  "tfrac",
  "underset"
]);

const texREL = new Set([
  "Bumpeq", "Colonapprox", "Coloneq", "Coloneqq", "Colonsim", "Darr", "Doteq", "Downarrow",
  "Eqcolon", "Eqqcolon", "Harr", "Larr", "Leftarrow", "Leftrightarrow", "Lleftarrow",
  "Longleftarrow", "Longleftrightarrow", "Longrightarrow", "Lrarr", "Lsh", "Rarr",
  "Rrightarrow", "Rsh", "Supset", "Subset", "Uarr", "Uparrow", "Updownarrow",
  "Vdash", "Vvdash", "approxeq", "asymp", "backepsilon", "backsim", "backsimeq",
  "between", "bowtie", "bumpeq", "circeq", "circlearrowleft", "circlearrowright",
  "colonapprox", "coloneq", "coloneqq", "colonsim", "curlyeqprec", "curlyeqsucc",
  "curvearrowleft", "curvearrowright", "dArr", "darr", "dashleftarrow", "dashrightarrow",
  "dashv", "dblcolon", "doteq", "doteqdot", "downarrow", "downdownarrows", "downharpoonleft",
  "downharpoonright", "eqcirc", "eqcolon", "eqqcolon", "eqsim", "eqslantgtr", "eqslantless",
  "fallingdotseq", "frown", "geqq", "geqslant", "gets", "gg", "ggg",
  "gggtr", "gnapprox", "gneq", "gneqq", "gnsim", "gt", "gtrapprox", "gtreqless", "gtreqqless",
  "gtrless", "gtrsim", "gvertneqq", "hArr", "harr", "hookleftarrow", "hookrightarrow",
  "impliedby", "implies", "isin", "Join", "gets", "impliedby", "implies",
  "lArr", "larr", "leadsto", "leftarrow", "leftarrowtail", "leftharpoondown",
  "leftharpoonup", "leftleftarrows", "leftrightarrow", "leftrightarrows", "leftrightharpoons",
  "leftrightsquigarrow", "leqq", "leqslant", "lessapprox", "lesseqgtr", "lesseqqgtr",
  "lessgtr", "lesssim", "ll", "lll", "llless", "lnapprox", "lneq", "lneqq", "lnsim",
  "longleftarrow", "longleftrightarrow", "longmapsto", "longrightarrow", "looparrowleft",
  "looparrowright", "lrArr", "lrarr", "lt", "lvertneqq", "mapsto", "mid", "models",
  "multimap", "nLeftarrow", "nLeftrightarrow", "nRightarrow", "nVDash", "nVdash", "ncong",
  "nearrow", "neq", "nexists", "ngeq", "ngeqq", "ngeqslant", "ngtr", "ni", "nleftarrow",
  "nleftrightarrow", "nleq", "nleqq", "nleqslant", "nless", "nmid", "notni",
  "nparallel", "nprec", "npreceq", "nrightarrow", "nshortmid", "nshortparallel", "nsim",
  "nsubseteq", "nsubseteqq", "nsucc", "nsucceq", "nsupseteq", "nsupseteqq", "ntriangleleft",
  "ntrianglelefteq", "ntriangleright", "ntrianglerighteq", "nvDash", "nvdash", "nwarrow",
  "owns", "parallel", "perp", "pitchfork", "prec", "precapprox", "preccurlyeq", "preceq",
  "precnapprox", "precneqq", "precnsim", "precsim", "propto", "rArr", "rarr", "restriction",
  "rightarrow", "rightarrowtail", "rightharpoondown", "rightharpoonup", "rightleftarrows",
  "rightleftharpoons", "rightrightarrows", "rightsquigarrow", "risingdotseq", "searrow",
  "shortmid", "shortparallel", "sim", "simeq", "smallfrown", "smallsmile", "smile",
  "sqsubset", "sqsubseteq", "sqsupset", "sqsupseteq", "sub", "sube",
  "subseteqq", "subsetneq", "subsetneqq", "succ", "succapprox", "succcurlyeq", "succeq",
  "succnapprox", "succneqq", "succnsim", "succsim", "supe", "supset", "supseteq", "supseteqq",
  "supsetneq", "supsetneqq", "swarrow", "thickapprox", "thicksim", "to", "trianglelefteq",
  "triangleq", "trianglerighteq", "twoheadleftarrow", "twoheadrightarrow", "uArr", "uarr",
  "uparrow", "updownarrow", "upharpoonleft", "upharpoonright", "upuparrows", "varpropto",
  "varsubsetneq", "varsubsetneqq", "varsupsetneq", "varsupsetneqq", "vartriangle",
  "vartriangleleft", "vartriangleright", "vcentcolon", "vdash", "vDash"
]);

const superRegEx = /^⁻?[²³¹⁰⁴⁵⁶⁷⁸⁹]+/;

const cloneToken$1 = tkn => [tkn[0], tkn[1], tkn[2], tkn[3], tkn[4]];

const accentFromChar = Object.freeze({
  "\u0300": "\\grave",
  "\u0301": "\\acute",
  "\u0302": "\\hat",
  "\u0303": "\\tilde",
  "\u0304": "\\bar",
  "\u0305": "\\bar",
  "\u0307": "\\dot",
  "\u0308": "\\ddot",
  "\u030A": "\\mathring",
  "\u030C": "\\check",
  "\u0332": "\\underline",
  "\u20d0": "\\overleftharpoon",
  "\u20d1": "\\overrightharpoon",
  "\u20d6": "\\overleftarrow",
  "\u20d7": "\\vec",
  "\u20e1": "\\overleftrightarrow"
});

const wideAccentFromChar = Object.freeze({
  "\u0300": "\\grave",
  "\u0301": "\\acute",
  "\u0302": "\\widehat",
  "\u0303": "\\widetilde",
  "\u0304": "\\overline",
  "\u0305": "\\overline",
  "\u0307": "\\dot",
  "\u0308": "\\ddot",
  "\u030A": "\\mathring",
  "\u030C": "\\check",
  "\u0332": "\\underline",
  "\u20d0": "\\overleftharpoon",
  "\u20d1": "\\overrightharpoon",
  "\u20d6": "\\overleftarrow",
  "\u20d7": "\\overrightarrow",
  "\u20e1": "\\overleftrightarrow"
});

const groupSubscript = word => {
  const pos = word.indexOf("_");
  return pos === -1
    ? word
    : word.slice(0, pos + 1) + "{" + word.slice(pos + 1) + "}"
};

const checkForTrailingAccent = word => {
  const ch = word.slice(-1);
  if (/[\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]/.test(ch)) {
    word = word.slice(0, -1);
    return word === "i"
      ? accentFromChar[ch] + "{ı}"  // dotless i
      : word === "j"
      ? accentFromChar[ch] + "{ȷ}"  // dotless j
      : word.length === 1
      ? accentFromChar[ch] + "{" + word + "}"
      : wideAccentFromChar[ch] + "{" + word + "}"
  } else {
    return word
  }
};

const lexOneWord = (str, prevToken) => {
  const matchObj = wordRegEx.exec(str);
  if (matchObj) {
    let match = matchObj[0].replace(/_*$/, ""); // drop trailing underscores

    // Get the immediately following character
    const fc = str.charAt(match.length);

    const word = words[match];
    if (word && fc !== "′") {
      return word
    } else if (/^\(/.test(fc)) {
      // word is followed by an open paren. Treat it as a function name
      return (prevToken.ttype === tt.ACCENT)
        ? [match, match + "}{", match + "}{", tt.FUNCTION, ""]
        : match === "sqrt"
        ? [match, "\\sqrt", "√", tt.UNARY, ""]
        : match === "f"
        ? [match, match, "f", tt.FUNCTION, ""]
        : mathOperators.has(match)
        ? [match, "\\" + match, match, tt.FUNCTION, ""]
        : [match, "\\operatorname{" + groupSubscript(match) + "}", match, tt.FUNCTION, ""]
    } else if (prevToken.ttype === tt.ACCESSOR) {
      return [match, match, match, tt.PROPERTY, ""]
    } else if (/[_\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]/.test(match)) {
      let identifier = "";
      if (match.indexOf("_") === -1) {
        identifier = checkForTrailingAccent(match);
        return [match, identifier, match, (match.length > 2) ? tt.LONGVAR : tt.VAR, ""]
      } else {
        const segments = match.split("_");
        for (let i = segments.length - 1; i >= 0; i--) {
          segments[i] = checkForTrailingAccent(segments[i]);
          if (i > 0) {
            segments[i] = "_\\text{" + segments[i] + "}";
          }
        }
        identifier = segments.join("");
        const primes = /^′*/.exec(str.slice(match.length));
        if (primes) {
          match += primes[0];
          identifier += "'".repeat(primes[0].length);
        }
        const pos = identifier.indexOf("_");
        if (pos > -1) {
          // Cramp subscript placement by wrapping it with braces.
          // This helps Cambria Math to supply the correct size radical.
          identifier = identifier.slice(0, pos) + "{" + identifier.slice(pos) + "}";
        }
        return [match, identifier, match, (segments[0].length > 1) ? tt.LONGVAR : tt.VAR, ""]
      }
    } else if (match.length === 2 & match.charAt(0) === "\uD835") {
      return [match, match, match, tt.VAR, ""]
    } else if (match.length > 1) {
      return [match, match, match, tt.LONGVAR, ""]
    } else {
      // Return a single character variable name
      if (match.charAt(0) === "\uD835") {
        return [match.substring(0, 2), match.substring(0, 2),
          match.substring(0, 2), tt.VAR, ""]
      } else {
        return [match.charAt(0), match.charAt(0), match.charAt(0), tt.VAR, ""]
      }
    }
  }
};

// Support a unit name written w/o a space after a number
const unitStartRegEx = /^(?:[A-Za-z°ʹ″$£¥₨₪€ÅΩ℃℉ΩKÅ]|ʹʹ)/;
const unitAndExpo = "(?:(?:[A-Za-z][A-Za-zōö]*\\$?|[°ʹ″$£¥₨₪€ÅΩ℃℉ΩKÅ]|ʹʹ)(?:(?:(?:(?:\\^|\\^-)"
  + "[1-9][0-9]*)|(?:\\^\\(-?[1-9][0-9]*\\))|⁻?[¹²³\\u2074-\\u2079][⁰¹²³\\u2074-\\u2079]*))?)";
const productOfUnits = "(?:" + unitAndExpo + "(?:[*·.•×]" + unitAndExpo + ")*)";
const unitNameRegEx = new RegExp("^" + productOfUnits + "(?:\\/" + productOfUnits + ")?");
const lexUnitName = str => {
  const match = unitNameRegEx.exec(str);
  return [match[0], unitTeXFromString(match[0]), match[0], tt.UNIT, ""]
};

const lex = (str, formats, prevToken, inRealTime = false) => {
  // Get the next token in str. Return an array with the token's information:
  // [input, TeX output, calc output, type, associated close delimiter]
  let pos = 0;
  let st = "";
  let matchObj;

  if (str.length > 3 && str.slice(0, 3) === "===") {
    // A macro between triple-double quotation marks.
    pos = str.indexOf('"""', 3);
    if (pos > 0) {
      st = str.slice(3, pos);
      return ['"""' + st + '"""', st, st, tt.MACRO, ""]
    } else {
      return [str, str.slice(3), str.slice(3), tt.MACRO, ""]
    }
  }

  if (str.charAt(0) === '"') {
    // String between double quotation marks. Parser will convert it to \text{…}
    pos = str.indexOf('"', 1);
    if (pos > 0) {
      // Disallow \r or \n by truncating the string.
      st = str.substring(1, pos).replace(/\r?\n.*/, "");
      return ['"' + st + '"', st, st, tt.STRING, ""]
    } else {
      return [str, str.replace(/\r?\n.*/, ""), str.replace(/\r?\n.*/, ""), tt.STRING, ""]
    }
  }

  if (/^#/.test(str)) {
    // comment
    st = str.slice(2);
    pos = st.indexOf("\n");
    if (pos > -1) {
      const posReturn = st.indexOf("\n");
      if (posReturn > -1 && posReturn < pos) { pos = posReturn; }
    }
    if (pos > -1) {
      st = st.slice(0, pos);
    }
    return [`#${st}`, `\\text{\\texttt{ \\#${st}}}`, `#${st}`, tt.COMMENT, ""]
  }

  if (/^``/.test(str)) {
    // inline TSV string between double back ticks, a data frame literal.
    pos = str.indexOf("`", (str.charAt(2) === "`" ? 3 : 2));
    const inputStr = (pos > 0 ? str.slice(2, pos) : str.slice(2));
    const st = tablessTrim(inputStr);
    let tex = "";
    if (inRealTime) {
      tex = DataFrame.quickDisplay(st);
    } else {
      const dataStructure = DataFrame.dataFrameFromTSV(st);
      tex = DataFrame.display(dataStructure.value, "h3", formats.decimalFormat);
    }
    return ["``" + inputStr + "``", tex, inputStr, tt.DATAFRAME, ""]
  }

  if (str.charAt(0) === '`') {
    // Rich text string. Usually a return from a calculation.
    // String between double quotation marks. Parser will convert it to \text{…}
    pos = str.indexOf('`', 1);
    if (pos > 0) {
      // Disallow \r or \n by truncating the string.
      st = str.substring(1, pos).replace(/\r?\n.*/, "");
      return ['`' + st + '`', st, st, tt.RICHTEXT, ""]
    } else {
      return [str, str.replace(/\r?\n.*/, ""), str, tt.RICHTEXT, ""]
    }
  }

  if (unitRegEx.test(str)) {
    // String between single quotation marks. That signals a tt.UNIT or a tt.DATE.
    pos = str.indexOf("'", 1);
    if (pos > 0) {
      st = str.substring(1, pos);
      const strWithDelimiters = "'" + st + "'";
      if (dateRegEx.test(str)) {
        const dateTex = dateDisplayFromIsoString(strWithDelimiters, formats.dateFormat, true);
        return [strWithDelimiters, dateTex, st, tt.DATE, ""]
      } else {
        return [strWithDelimiters, unitTeXFromString(st), st, tt.UNIT, ""]
      }
    } else {
      // One of the unambiguous unit symbols, like ° or Å
      return [str.charAt(0), str.charAt(0), str.charAt(0), tt.UNIT, ""]
    }
  }

  // Strings beginning with "\" are passed through as a TeX control word.
  matchObj = texFunctionRegEx.exec(str);
  if (matchObj) {
    // TeX control word, starting with backslash. e.g. \, or \circ
    const match = matchObj[0];
    st = match.slice(1);
    if (accents$1.has(st)) {
      return [match, match, match, tt.ACCENT, ""]
    }
    if (unaries.has(st)) {
      return [match, match, match, tt.UNARY, ""]
    }
    if (colors.has(st)) {
      return [match, "\\textcolor{" + st + "}", match, tt.UNARY, ""]
    }
    if (binaries.has(st)) {
      return [match, match, match, tt.BINARY, ""]
    }
    if (texREL.has(st)) {
      return [match, match, match, tt.REL, ""]
    }
    const texFunc = texFunctions[match];
    if (texFunc) {
      return cloneToken$1(texFunc)
    }
    if (mathOperators.has(st)) {
      return [match, match, st, tt.FUNCTION, ""]
    }
    if (greek[st]) {
      const ch = greek[st];
      return [match, ch, ch, tt.VAR, ""]
    }

    // default case is a mathord. So I have not enumerated any ORDs
    return [match, match, match, tt.ORD, ""]
  }

  if (minusRegEx.test(str)) {
    if (isUnary(prevToken)) {
      // Check if the unary minus is part of a number
      const numParts = str.match(numberRegEx$4);
      if (numParts) {
        // numbers
        st = texFromNumStr(numParts, formats.decimalFormat);
        return [numParts[0], st, numParts[0], tt.NUM, ""]
      }
    }
    return ["-", "-", "-", tt.ADD, ""]
  }

  const numParts = str.match(numberRegEx$4);
  if (numParts) {
    // numbers
    st = texFromNumStr(numParts, formats.decimalFormat);
    return [numParts[0], st, numParts[0], tt.NUM, ""]
  }

  // Before lexing for a word, find underscores before a group
  if (/^_[([{]/.test(str)) {
    return ["_", "_", "_", tt.SUB, ""]
  }

  const word = lexOneWord(str, prevToken);
  if (word) { return cloneToken$1(word) }

  const nums = superRegEx.exec(str);
  if (nums) {
    return [nums[0], nums[0], nums[0], tt.SUPCHAR, ""]
  }

  const bigOperators = "∑∫∬∭⨌∮∯∰⨍⨚⨙∏∐";
  if (bigOperators.indexOf(str[0]) > -1) {
    const ch = str[0];
    return [ch, ch, ch, tt.BIG_OPERATOR, ""]
  }

  //return maximal initial substring of str that appears in misc names
  matchObj = miscRegEx.exec(str);
  if (matchObj) {
    const match = matchObj[0];
    for (let i = match.length; i >= 1; i--) {
      st = match.slice(0, i);
      if (miscSymbols[st]) { return cloneToken$1(miscSymbols[st]) }
    }
  }

  // No keywords were matched. Return 1 character.
  const c1 = str.charAt(0);
  if (c1 === "." && (prevToken.ttype === tt.VAR || prevToken.ttype === tt.LONGVAR ||
    prevToken.ttype === tt.STRING || prevToken.input === "]" || prevToken.input === ")" ||
    prevToken.ttype === tt.PROPERTY)) {
    // Suppress the spacing of the accessor dot.
    return [".", "{.}", ",", tt.ACCESSOR, ""]
  }
  return [c1, addTextEscapes(c1), c1, tt.VAR, ""]
};

/*
 * parser.js
 *
 * This file takes a text string and compiles it to TeX.
 * If the isCalc flag is set, then parse() also compiles the text to an RPN string
 * used elsewhere for further Hurmet computation.
 *
*/

const builtInFunctions = new Set([
  "Char", "Int", "abs", "acos", "acosd", "acosh", "acot", "acotd", "acoth", "acsc", "acscd",
  "acsch", "angle", "asec", "asecd", "asech", "asin", "asind", "asinh", "atan", "atan2",
  "atand", "atanh", "binomial", "ceil", "conj", "cos", "cosd", "cosh",
  "cot", "cotd", "coth", "count", "csc", "cscd", "csch", "exp",
  "factorial", "fetch", "findmax", "floor", "gamma", "gcd", "hcat",
  "imag", "isnan", "length", "lerp", "ln", "log", "log10", "log2", "lfact", "lgamma",
  "logn", "mod", "number", "ones", "real", "rem", "rms", "round", "roundSig", "roundn",
  "savedate", "sec", "secd", "sech", "sech", "sign", "sin", "sind", "sinh", "startSvg",
  "string", "tan", "tand", "tanh", "tanh", "today", "trace", "transpose", "vcat", "zeros", "Γ"
]);

const builtInReducerFunctions = new Set(["accumulate", "beamDiagram", "dataframe",
  "findfirst", "hypot", "matrix2table", "max", "mean", "median", "min", "product", "rand",
  "range", "stddev", "sum", "variance"
]);

const trigFunctions = new Set(["cos", "cosd", "cot", "cotd", "csc", "cscd", "sec", "secd",
  "sin", "sind", "tand", "tan"]);

const verbatims = new Set(["\\alignat", "\\alignedat", "\\array", "\\darray", "\\ce",
  "\\color", "\\colorbox", "\\hskip", "\\hspace", "\\label", "\\kern", "\\mathrm", "\\mkern",
  "\\mskin", "\\pu", "\\subarray", "\\tag", "\\text", "\\textcolor"]);

const rationalRPN = numStr => {
  // Return a representation of a rational number that is recognized by evalRPN().
  const num = Rnl.fromString(numStr);
  return "®" + String(num[0]) + "/" + String(num[1])
};

const checkForUnaryMinus = (token, prevToken) => {
  switch (prevToken.ttype) {
    case tt.NUM:
    case tt.ORD:
    case tt.VAR:
    case tt.DATE:
    case tt.RIGHTBRACKET:
    case tt.LONGVAR:
    case tt.PROPERTY:
    case tt.UNIT:
    case tt.SUPCHAR:
    case tt.PRIME:
    case tt.FACTORIAL:
      return token
    // do nothing
  }
  if (token.output === "-") {
    return { input: "~", output: "\\text{-}", ttype: tt.UNARYMINUS }
  } else {
    return { input: "+", output: "~+", ttype: tt.UNARYMINUS }
  }
};

const numFromSuperChar = {
  "⁻": "-",
  "²": "2",
  "³": "3",
  "¹": "1",
  "⁰": "0",
  "⁴": "4",
  "⁵": "5",
  "⁶": "6",
  "⁷": "7",
  "⁸": "8",
  "⁹": "9"
};

const numFromSupChars = str => {
  let num = "";
  for (const ch of str) {
    num += numFromSuperChar[ch];
  }
  return num
};

const accentRegEx = /^(?:.|\uD835.)[\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]_/;
const spreadsheetCellRegEx = /^[A-Z](\d+|_end)$/;
const dfracRegEx = /\\dfrac{/g;

const factorsAfterSpace = /^[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133\uD835]/;
const factors = /^[[({√∛∜]/;

const setUpIf = (rpn, tokenInput, exprStack, delim) => {
  // The Hurmet CASES expression acts lazily. To accommodate that, push the
  // sub-expression onto a stack of expressions. At the closing brace,
  // we'll pop all the expressions off the stack and place them after the conditions.
  // Later, evaluate.js will evaluate the conditions and then pick the correct expression.
  const expression = rpn.replace(/^.*\xa0/, "").replace(/§$/, "\xa0");
  exprStack.push(expression);
  rpn = rpn.length === expression.length ? "" : rpn.slice(0, rpn.length - expression.length);
  delim.numArgs += 1;
  if (tokenInput === "otherwise") { rpn += "true"; }
  return rpn
};

const functionExpoRegEx = /^[\^⁻⁰¹²³\u2074-\u2079]/;

const openParenRegEx$2 = /^ *\(/;

const exponentOfFunction = (str, decimalFormat, isCalc) => {
  // As in: sin²()
  let expoInput = "";
  if (str.charAt(0) !== "^") {
    expoInput = /^⁻?[⁰¹²³\u2074-\u2079⁻]+/.exec(str)[0];
    expoInput = expoInput.split("").map(ch => numeralFromSuperScript(ch)).join("");
  } else if (!openParenRegEx$2.test(str.slice(1))) {
    expoInput = lex(str.slice(1), { decimalFormat }, { input: "", output: "", ttype: 50 })[0];
  } else {
    // The exponent is in parens. Find its extent.
    expoInput = "(";
    let level = 1;
    for (let i = 2; i < str.length; i++) {
      const ch = str.charAt(i);
      expoInput += ch;
      if ("\"'`".indexOf(ch) > -1) {
        const pos = str.indexOf(ch, i + 1);
        expoInput += str.slice(i + 1, pos + 1);
        i = pos;
      } else if ("([{⟨\u2308\u23BF\u23BE\u3016".indexOf(ch) > -1) {
        level += 1;
      } else if (")]}⟩\u2309\u230B\u23CC\u3017".indexOf(ch) > -1) {
        level -= 1;
      }
      if (level === 0) { break }
    }
  }

  const parseInput = (expoInput.charAt(0) === "(")
    ? expoInput.slice(1, -1).trim()
    : expoInput;

  if (isCalc) {
    const expoOutput = parse$1(parseInput, { decimalFormat }, true);
    return [expoInput, "{" + expoOutput[0] + "}", expoOutput[1]]
  } else {
    const expoTex = parse$1(parseInput, { decimalFormat }, false);
    return [expoInput, "{" + expoTex + "}", ""]
  }
};

const testForImplicitMult = (prevToken, texStack, str, isFollowedBySpace) => {
  // Some math expressions imply a multiplication without writing an explicit operator token.
  // Examples:  e = m c², y = 3(2+5), n = (a+5) x, z = 5 + 2 j2
  // Hurmet writes the echo expression with a more explicit written form of multiplication.
  // The echo shows each multiplication in one of three ways: a x b,  a · b, or (a)(b)
  // This sub is going to determine if such an adjustment is required for the current position.

  if (texStack.length > 0) {
    // Test for a tex unary function or a function w/ tt.SUP or tt.SUB
    const topType = texStack[texStack.length - 1].ttype;
    if (topType === tt.UNARY || topType === tt.BINARY) { return false }
    if (topType === tt.SUB || topType === tt.SUP) {
      if (texStack[texStack.length - 1].isOnFunction) { return false }
    }
  }

  let isPreceededByFactor = false;
  if (prevToken.output) {
    const pc = prevToken.output.charAt(prevToken.length - 1);
    if (")]}".indexOf(pc) > -1) {
      if ((pc === ")" || pc === "]") && /^[([]/.test(str)) {
        // This was already handled by the tt.RIGHTBRACKET case
        return false
      } else {
        isPreceededByFactor = true;
      }
    } else {
      switch (prevToken.ttype) {
        case tt.ORD:
        case tt.NUM:
        case tt.VAR:
        case tt.LONGVAR:
        case tt.PRIME:
        case tt.SUP:
        case tt.SUPCHAR:
        case tt.SUB:
        case tt.PROPERTY:
        case tt.UNIT:
        case tt.RIGHTBRACKET:
        case tt.FACTORIAL:
          isPreceededByFactor = true;
          break
        default:
          isPreceededByFactor = false;
      }
    }
  }
  if (isPreceededByFactor && nextCharIsFactor(str, prevToken.ttype, isFollowedBySpace)) {
    return true
  }
  return false
};

const multiplicands = new Set([tt.ORD, tt.VAR, tt.NUM, tt.LONGVAR, tt.RIGHTBRACKET,
  tt.CURRENCY, tt.SUPCHAR, tt.BIG_OPERATOR]);

const nextCharIsFactor = (str, tokenType, isFollowedBySpace) => {
  const st = str.replace(leadingLaTeXSpaceRegEx, "");
  const fc = st.charAt(0);

  let fcMeetsTest = false;
  if (st.length > 0) {
    if (fc === "|" || fc === "‖") ; else if (/^[({[√∛∜∑0-9]/.test(st) && multiplicands.has(tokenType)) {
      return true
    } else {
      if (factors.test(fc) || (isFollowedBySpace && factorsAfterSpace.test(fc))) {
        fcMeetsTest = !/^(if|and|atop|or|else|elseif|modulo|otherwise|not|for|in|while|end)\b/.test(st);
      }
    }
  }
  return fcMeetsTest
};

const cloneToken = token => {
  return {
    input: token.input,
    output: token.output,
    ttype: token.ttype,
    closeDelim: token.closeDelim
  }
};

const endOfOrd = new Set([tt.ORD, tt.VAR, tt.NUM, tt.DATE, tt.LONGVAR,
  tt.RIGHTBRACKET, tt.SUPCHAR]);

// The RegEx below is equal to /^\s+/ except it omits \n, \t, and the no-break space \xa0.
// I use \xa0 to precede the combining arrow accent character \u20D7.
const leadingSpaceRegEx$3 = /^[ \f\r\v\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
const leadingLaTeXSpaceRegEx = /^(˽|\\quad|\\qquad)+/;
const sumRegEx$1 = /\\∑_¿([^\xa0]+)([^=]+)\xa0=(\xa0[^^]+)\xa0\^\xa0([^∑]+)\xa0∑/;

/* eslint-disable indent-legacy */
const rpnPrecFromType = [
  13, 13, 16, 14, 17, 10,
       8, 10, 13, -1, -1,
      -1,  1, -1,  0,  0,
       7,  0, -1, 15,  0,
       6,  8,  5,  4,  1,
      13, 17, 16, -1, 15,
      14, 10,  3,  2, 11,
      -1, -1,  4,  3, -1,
      -1, -1, -1, -1
];

const texPrecFromType = [
  12, 12, 15, 13, 16, 10,
       2, 10, 12,  2,  2,
       2,  1,  2,  2,  0,
       2,  1,  2, 14,  1,
       2,  2,  1,  1,  1,
       2, -1, 15,  2, 14,
      13,  9, -1,  1, -1,
      15, -1,  1, -1,  2,
       2,  2,  2,  2
];
/* eslint-enable indent-legacy */

/* Operator Precedence
TeX  RPN
  0    0    ( [ {        delimiters
  1    1    , ;  :       separators for arguments, elements, rows, and ranges
  1    2    for in while loop keywords
  1    3    :            range separator
  1    4    if ∧ ∨       logical operators, return
  1    5    < > ≤ ≥      comparisons
  2    6    + -          addition and subtraction
  2    7    ∑            big operators
  2    8    * (x)(y) /   multiplication, division
  9   10    ∠            \angle. Used as a separator for complex numbers in polar notation
 10   11    -            unary minus
 12   13    sqrt sin     unary functions, math functions, and binary functions (e.g. root 3 x)
 13   14    ^            superscript, i.e. exponent
 14   15    ! % ‰ °      factorial, percent, permil, degree
 15   16    _ ' .        subscript, prime, dot notation property accessor
 16   17    hat bb       accent and font
*/

// Delimiter types
const dNOTHING = 0;
const dPAREN = 1; //           () or [] or {}, but not one of the use cases below
const dFUNCTION = 2; //        sin(x)
const dACCESSOR = 3; //        identifier[index] or identifier[start:step:end]
const dMATRIX = 4; //          [1; 2] or (1, 2; 3, 4)
const dVECTORFROMRANGE = 5; // [start:end] or [start:step:end]
const dDICTIONARY = 6; //      {key => value, key => value}
const dCASES = 7; //           { a if b; c otherwise }
const dBINOMIAL = 8;
const dSUBSCRIPT = 9; //       Parens around a subscript do not get converted into matrices.
const dDISTRIB = 10; //        A probability distribution defined by a confidence interval.
const dENVIRONMENT = 11; //   \align{...}, etc. Stand in for LaTeX AMS environments

const parse$1 = (
  str,
  formats = { decimalFormat: "1,000,000.", dateFormat: "yyy-mm-dd" },
  isCalc = false,     // true when parsing the blue echo of an expression
  inRealTime = false, // true when updating a rendering with every keystroke in the editor.
  sheetName = ""      // The RPN for a spreadsheet cell differs from other variables.
) => {
  // Variable definitions
  let tex = "";
  let rpn = "";
  let token = {};
  let prevToken = { input: "", output: "", ttype: 50 };
  const dependencies = [];
  const exponentPrec = rpnPrecFromType[tt.SUP];
  let mustLex = true;
  let mustAlign = false;
  let posOfPrevRun = 0;
  let isPrecededBySpace = false;
  let isFollowedBySpace = false;
  let isFollowedBySpaceOrNewline = false;
  let isImplicitMult = false;
  let followedByFactor = false;
  let op;
  const texStack = []; // operator stack for TeX rendering
  const rpnStack = []; // operator stack for RPN
  const delims = [{ delimType: dNOTHING, isTall: false }]; // delimiter stack
  let okToAppend = true;
  let fc = "";
  let pendingFunctionName = "";
  let tokenSep = "\xa0"; // no break space
  let rpnPrec = -1;
  const exprStack = []; // Use for lazy evalulation of ternary (If) expressions
  let numFreeCommas = 0; // # of items in a tuple
  let posArrow = 0;

  // This function, parse(), is the main function for this module.
  // Before we get to the start line, we write two enclosed functions,
  // popRpnTokens() and popTexTokens().
  // They are placed here in order to share variable scope with parse().

  const popRpnTokens = rpnPrec => {
    if (isCalc && rpnPrec >= 0) {
      // Pop operators off the rpnStack and append them to the rpn string
      while (rpnStack.length > 0) {
        const topPrec = rpnStack[rpnStack.length - 1].prec;
        //                         exponents, from right to left.
        if (topPrec < rpnPrec || (topPrec === exponentPrec && rpnPrec === exponentPrec)) {
          break
        }
        const symbol = rpnStack.pop().symbol;
        if (symbol === "→") {
          rpn = rpn.slice(0, posArrow + 1) + '"'
            + rpn.slice(posArrow + 1, -1).replace(/\u00a0/g, "§") + '"' + tokenSep;
          posArrow = 0;
        }
        rpn += symbol + tokenSep;
      }
    }
  };

  const popTexTokens = (texPrec, okToAppend) => {

    if (!okToAppend) { return }

    // Pop tokens off the texStack. Append closing delimiters to the tex string.
    // When necessary, insert an opening brace before a fraction numerator.
    if (texStack.length === 0) {
      if (prevToken.ttype !== tt.RIGHTBRACKET && prevToken.ttype !== tt.LEFTRIGHT) {
        // The purpose of op.pos in general is to let some possible
        // upcoming division know where to insert a "\frac{" before the numerator.
        // If we've gotten here, then no operators are on the texStack, so set op.pos
        // at the beginning of the previous token.
        op = { pos: posOfPrevRun, ttype: prevToken.ttype, closeDelim: "" };
      }
      return
    }

    const topOp = texStack[texStack.length - 1];
    if (
      (texPrec === 2 || texPrec === 12  || texPrec === 14 || texPrec === 15) &&
      (prevToken.ttype !== tt.RIGHTBRACKET && prevToken.ttype !== tt.LEFTRIGHT) &&
      topOp.prec < texPrec
    ) {
      op = { pos: posOfPrevRun, ttype: prevToken.ttype, closeDelim: "" };
      return
    }

    //  Pop operators whose precedence ≥ texPrec. Append a close delimiter for each.
    let delim = {};
    while (texStack[texStack.length - 1].prec >= texPrec &&
      // Also handle exponents, from right to left, as in 3^4^5
      !(texStack[texStack.length - 1].prec === 13 && texPrec === 13)) {
      op = texStack.pop();

      // Before we append braces, check if we must hide a pair of parens.
      if (op.prec === 0) {
        // We just popped a delimiter operator.
        delim = delims[delims.length - 1];
        if ((op.ttype === tt.LEFTBRACKET || op.ttype === tt.LEFTRIGHT) &&
          op.closeDelim.length > 0) {
          if (texStack.length > 0) {
            if (
              op.ttype === tt.LEFTRIGHT &&
              token.output === ")" &&
              texStack[texStack.length - 1].closeDelim === ")"
            ) {
              // op is a middle |, as in P(A|B). Check if it's tall.
              if (delim.isTall) {
                tex = tex.substring(0, op.pos) + "\\middle" + tex.substring(op.pos);
                delims[delims.length - 1].isTall = true;
              }
              // Pop another delim.
              op = texStack.pop();
              delims.pop();
              delim = delims[delims.length - 1];
            }
          }

          if (delim.delimType === dDICTIONARY && delim.open.length > 3) {
            tex = tex.slice(0, op.pos) + delim.open + tex.slice(op.pos + 2);
            op.closeDelim = delim.close;
          } else if (delim.delimType === dMATRIX && delim.open.length > 1) {
            const inc = tex.slice(op.pos, op.pos + 1) === "\\" ? 2 : 1;
            tex = tex.slice(0, op.pos) + delim.open + tex.slice(op.pos + inc);
            op.closeDelim = delim.close;
          } else if (delim.delimType === dACCESSOR) {
            const inc = tex.slice(op.pos, op.pos + 1) === "\\" ? 2 : 1;
            const addTall = delim.isTall && delim.open.indexOf("\\begin") === -1;
            tex = tex.slice(0, op.pos) + (addTall ? "\\left" : "") + delim.open
                + tex.slice(op.pos + inc);
            op.closeDelim = (addTall ? "\\right" : "") + delim.close;
          } else if (delim.delimType === dCASES) {
            tex = tex.slice(0, op.pos) + delim.open + tex.slice(op.pos + 2);
            op.closeDelim = delim.close;
          } else if (delim.delimType === dPAREN &&
            delim.name === "(" && /^(\/|\\atop\s)/.test(str)) {
            // The parens surround a numerator. Delete them.
            tex = tex.substring(0, op.pos) + tex.substring(op.pos + 1);
            op.closeDelim = "";
          } else if (delim.isPrecededByDiv && delim.delimType === dPAREN &&
              delim.name === "(" && (/^[^^_!%°⁻²³¹⁰⁴⁵⁶⁷⁸⁹]/.test(str) || str.length === 0)) {
            // The parens surround a denominator. Delete them.
            tex = tex.substring(0, op.pos) + tex.substring(op.pos + 1);
            op.closeDelim = "";
          } else if (delim.isTall) {
            // Make the delims tall.
            if (/^\\left/.test(tex.substring(op.pos)) === false) {
              tex = tex.substring(0, op.pos) + "\\left" + tex.substring(op.pos);
            }
            if (/\\right/.test(op.closeDelim) === false) {
              op.closeDelim = "\\right" + token.output;
            }
          }
        }
      }

      tex = tex.replace(/\\, *$/, ""); // Remove an implicit multiplication space.
      tex += op.closeDelim;

      if (op.closeDelim.slice(-1) === "{") {
        // We just closed the first part of a binary function, root()(),
        // or a function exponent (sin^2 θ) or function subscript (log_10)
        if (op.ttype === tt.BINARY) {
          texStack.push({ prec: 12, pos: op.pos, ttype: tt.UNARY, closeDelim: "}" });
          if (isCalc) {
            rpn += tokenSep;
            if (rpnStack[rpnStack.length - 1].symbol === "\\sqrt") {
              rpnStack[rpnStack.length - 1].symbol = "root";
            }
          }
        }
        op.ttype = tt.UNARY;
        prevToken = { input: "", output: "", ttype: tt.UNARY };
        return
      }

      if (texStack.length === 0 || op.prec === 0) {
        return
      }
    }
  };

  // With the closed functions out of the way, execute the main parse loop.
  str = str.replace(leadingSpaceRegEx$3, ""); //       trim leading white space from string
  str = str.replace(/\s+$/, ""); //                  trim trailing white space

  while (str.length > 0) {
    // Get the next token.
    if (str.charAt(0) === "\n") {
      str = str.slice(1);
      const prevChar = prevToken ? prevToken.input.slice(-1) : "0";
      if (
        prevToken.ttype === tt.COMMENT ||
        ("{[(,;+-".indexOf(prevChar) === -1 && !/^ *[)}\]]/.test(str))
      ) {
        popTexTokens(0, true);
        tex += "\\\\ ";
        const matchObj = /^ +/.exec(str);
        str = str.replace(/^ */, "");
        if (str.length > 0 && str.charAt(0) === "=" & tex.indexOf("=") > -1) {
          mustAlign = true; // We'll use the TeX {aligned} environment to align = signs.
          tex += "&";
        } else if (matchObj) {
          tex += "\\quad ".repeat(matchObj[0].length - 1);
        }
      }
      str = str.trim();
    }

    mustLex = true; // default

    isImplicitMult = isPrecededBySpace && okToAppend &&
                     testForImplicitMult(prevToken, texStack, str, isFollowedBySpace);
    if (isCalc) {
      if (prevToken.input === "⌧" && rpnStack.length > 1
            && rpnStack[rpnStack.length - 2].symbol === "∑"
            && rpn.charAt(rpn.length - 2) === "^"
      ) {
        // This is the space after a ∑_(i=0)^n symbol. Do not treat as implicit multiplication.
        rpnStack.pop();
      }
    }

    if (isImplicitMult) {
      const prevType = prevToken.ttype;
      token = {
        input: "⌧",
        output: [tt.LONGVAR, tt.NUM, tt.UNIT].includes(prevType) ? "\\," : "",
        ttype: tt.MULT
      };
      isFollowedBySpace = false;
      isFollowedBySpaceOrNewline = false;
      mustLex = false;
    }

    if (mustLex) {
      const tkn = prevToken.ttype === tt.NUM && !isFollowedBySpace && unitStartRegEx.test(str)
        ? lexUnitName(str)                                // something like the "m" in "5m"
        : lex(str, formats, prevToken, inRealTime);  // default
      token = { input: tkn[0], output: tkn[1], ttype: tkn[3], closeDelim: tkn[4] };
      str = str.substring(token.input.length);
      isFollowedBySpace = leadingSpaceRegEx$3.test(str) || /^(˽|\\quad|\\qquad)+/.test(str);
      isFollowedBySpaceOrNewline = /^[ \n]/.test(str);
      str = str.replace(leadingSpaceRegEx$3, "");
      followedByFactor = nextCharIsFactor(str, token.ttype, isFollowedBySpace);
    }

    if (token.input === "!" && (isPrecededBySpace || !endOfOrd.has(prevToken.ttype))) {
      // Redefine ! as logical not in certain contexts, to match Julia syntax.
      token.ttype = tt.UNARY;
      token.input = "¬";
    }

    switch (token.ttype) {
      case tt.SPACE: //      spaces and newlines
      case tt.BIN: //        infix math operators that render but don't calc, e.g. \bowtie
      case tt.ADD: //        infix add/subtract operators, + -
      case tt.MULT: //       infix mult/divide operators, × * · // ÷ modulo \bmod
      case tt.REL: //        relational operators, e.g  < == →
      case tt.BIG_OPERATOR: { // int, sum, lim, etc
        if (token.output.length > 0 && "- +".indexOf(token.output) > -1) {
          token = checkForUnaryMinus(token, prevToken);
        }

        if (isCalc && token.output === "→") {
          // This arrow is used for anonymous functions, e.g., x → cos x.
          rpn = rpn.replace(/¿([^\u00a0]+)$/, '"$1"');
          posArrow = rpn.length;
          const posBracket = tex.lastIndexOf("〖");
          tex = tex.slice(0, posBracket) + tex.slice(posBracket + 1);
        }

        if (isCalc && token.ttype !== tt.SPACE) {
          if (token.output !== "\\text{-}" && token.ttype !== tt.BIG_OPERATOR) {
            rpn += tokenSep;
          }
          popRpnTokens(rpnPrecFromType[token.ttype === tt.BIG_OPERATOR ? tt.VAR : token.ttype]);
        }

        const texPrec = texPrecFromType[token.ttype];
        popTexTokens(texPrec, okToAppend);
        tex += token.output + " ";
        posOfPrevRun = tex.length;

        if (token.ttype === tt.BIG_OPERATOR && delims.length > 1) {
          delims[delims.length - 1].isTall = true;
        }
        if (isCalc) {
          if (token.input === "∑" || token.input === "\\sum") {
            rpn += "\\∑";
            token.input === "∑";
          }
          rpnStack.push({ prec: rpnPrecFromType[token.ttype], symbol: token.input });
        }

        okToAppend = true;
        break
      }

      case tt.ACCESSOR:  //   dot between a map name and a property, as in r.PROPERTY
      case tt.ANGLE:    // \angle. Used as a separator for complex numbers in polar notation
        token = checkForUnaryMinus(token, prevToken);
        if (isCalc) {
          rpn += tokenSep;
          rpnPrec = rpnPrecFromType[token.ttype];
          popRpnTokens(rpnPrec);
          rpnStack.push({ prec: rpnPrec, symbol: token.input });
        }
        popTexTokens(texPrecFromType[token.ttype], okToAppend);
        tex += isCalc ? token.input : token.output + " ";
        okToAppend = true;
        break

      case tt.BOOLEAN:
        popTexTokens(2, okToAppend);
        if (isCalc) {
          popRpnTokens(-1);
          rpn += token.input;
        }
        if (isPrecededBySpace) { posOfPrevRun = tex.length; }
        tex += token.output;
        okToAppend = true;
        break

      case tt.NUM:
      case tt.ORD:
      case tt.DATE:
        popTexTokens(2, okToAppend);
        if (isCalc) {
          // Numbers and ORDs get appended directly onto rpn. Pass -1 to suppress an rpn pop.
          popRpnTokens(-1);
          rpn += token.ttype === tt.NUM
            ? rationalRPN(token.input)
            : token.ttype === tt.DATE
            ? dateRPN(token.input)
            : token.input;
        }
        if (isPrecededBySpace) { posOfPrevRun = tex.length; }
        if (isCalc &&
          (prevToken.ttype === tt.MULT || (followedByFactor && prevToken.ttype !== tt.DIV))) {
          token.output = "(" + token.output + ")";
        }
        tex += token.output + " ";
        okToAppend = true;

        if (!isFollowedBySpace && followedByFactor) {
          // We've encountered something like the expression "2(a)".
          popTexTokens(2, okToAppend);
          if (isCalc) {
            rpnPrec = rpnPrecFromType[tt.MULT];
            rpn += tokenSep;
            popRpnTokens(rpnPrec);
            rpnStack.push({ prec: rpnPrec, symbol: "⌧" });
          }
        }
        break

      case tt.STRING: {
        popTexTokens(2, okToAppend);
        const ch = token.input.charAt(0);
        if (isCalc) { rpn += ch + token.output + ch; }  // Keep before addTextEscapes()
        if (isPrecededBySpace) { posOfPrevRun = tex.length; }
        token.output = addTextEscapes(token.output);
        token.output = token.output.replace(/ +$/, "\\,"); // Prevent loss of trailing space
        tex += "\\text{" + token.output + "}";
        okToAppend = true;
        break
      }

      case tt.RICHTEXT: {
        popTexTokens(2, okToAppend);
        const ch = token.input.charAt(0);
        if (isCalc) { rpn += ch + token.output + ch; }
        if (isPrecededBySpace) { posOfPrevRun = tex.length; }
        token.output = token.output === "`" ? "`" : parse$1(token.output, formats, false);
        tex += "{" + token.output + "}";
        okToAppend = true;
        break
      }

      case tt.MACRO: {
        popTexTokens(2, okToAppend);
        if (isCalc) { rpn += '"""' + token.output + '"""'; }  // Keep before addTextEscapes()
        if (isPrecededBySpace) { posOfPrevRun = tex.length; }
        token.output = addTextEscapes(token.output);
        tex += "\\text{" + token.output + "}";
        okToAppend = true;
        break
      }

      case tt.DATAFRAME:
        popTexTokens(2, okToAppend);
        posOfPrevRun = tex.length;
        tex += token.output;
        if (isCalc) {
          rpn += token.input;
          // Identify string interpolation
          const matches = arrayOfRegExMatches(interpolateRegEx, token.input);
          for (const match of matches) {
            dependencies.push(match.value.slice(2, -1));
          }
        }
        okToAppend = true;
        break

      case tt.VAR:         // variable name, one letter long
      case tt.LONGVAR: {   // multi-letter variable name
        if (token.ttype === tt.LONGVAR && prevToken.input === "⌧") {
          tex += "\\,"; // Place a space before a long variable name.
        }
        // variables get appended directly onto rpn.
        popTexTokens(7, okToAppend);
        if (isPrecededBySpace) { posOfPrevRun = tex.length; }

        if (!isCalc) {
          if (token.ttype === tt.LONGVAR) {
            if (!accentRegEx.test(token.input)) {
              token.output = "\\mathrm{" + token.output + "}";
            }
          }
        } else if (prevToken.input === "for") {
          rpn += '"' + token.input + '"'; // a loop index variable name.
        } else {
          // We're in the echo of a Hurmet calculation.
          if (/^(\.[^.]|\[)/.test(str)) {
            // When the blue echo has an index in a bracket, e.g., varName[index], it renders
            // the name of the variable, not the value. The value of the value of the index.
            token.output = token.ttype === tt.LONGVAR
              ? "\\mathrm{" + token.output + "}"
              : token.output;
          } else {
            token.output = token.input;
            token.output = (posArrow > 0 ? "" : "〖") + token.output;
          }
          if (sheetName && spreadsheetCellRegEx.test(token.input)) {
            rpn += "¿" + sheetName + tokenSep + `"${token.input}"` + tokenSep + ".";
          } else {
            rpn += "¿" + token.input;
          }
          dependencies.push(token.input);
        }

        tex += token.output + (str.charAt(0) === "." ? "" : " ");
        if (isCalc) {
          // The variable's value may be tall. We don't know.
          delims[delims.length - 1].isTall = true;
        }
        okToAppend = true;
        break
      }

      case tt.UNIT: {  //  e.g.  'meters'
        if (delims.length > 1 && delims[delims.length - 1].delimType === dMATRIX) {
          token.output = "\\text{Error. Write a unit name outside a matrix, not inside. "
              + "Apply one unit to the entire matrix.}";
        }
        popTexTokens(14, true);
        texStack.push({ prec: 14, pos: op.pos, ttype: tt.UNIT, closeDelim: "" });
        if (isCalc) {
          popRpnTokens(rpnPrecFromType[tt.UNIT]);
          rpn += tokenSep + "applyUnit" + tokenSep + token.input.replace(/'/g, "");
        }
        if (!/^'?°'?$/.test(token.input)) { tex += "\\;"; }
        tex += token.output;
        okToAppend = true;
        break
      }

      case tt.PROPERTY: {
        // A word after a dot ACCESSOR operator. I.e., A property in dot notation
        // Treat somewhat similarly to tt.STRING
        popTexTokens(15, okToAppend);
        const pos = token.input.indexOf("_");
        if (isCalc) {
          rpn += '"' + token.output + '"';
          tex += `\\mathrm{${token.output}}`;
          if (str.charAt(0) !== ".") { tex += " "; }
        } else if (pos > -1) {
          tex += token.input.substring(0, pos) + "_\\mathrm{" +
            token.input.substring(pos + 1) + "}";
        } else {
          token.output = addTextEscapes(token.output);
          token.output = token.output.replace(/ +$/, "\\,"); // Prevent loss of trailing space
          tex += "\\text{" + token.output + "}";
        }
        okToAppend = true;
        break
      }

      case tt.TO: {
        // A probability distribution defined by its low and high values.
        // As in: (2 to 3) or [2 to 3] or {2 to 3}
        delims[delims.length - 1].delimType = dDISTRIB;
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        tex += token.output;
        if (isCalc) {
          rpn += tokenSep;
          popRpnTokens(3);
          const symbol = delims[delims.length - 1].symbol;
          const distribution = symbol === "("
            ? "normal"
            : symbol === "["
            ? "uniform"
            : "lognormal";
          rpnStack.push({ prec: 3, symbol: distribution });
        }
        break
      }

      case tt.RANGE: {
        //   range separator, as in 1:n
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        if (isCalc && token.input !== "...") {
          rpn += tokenSep;
          popRpnTokens(3);
          rpnStack.push({ prec: 3, symbol: ":" });
          if (["[", ","].includes(prevToken.input) && /^[,\]]/.test(str)) {
            // A bare colon in a accessor, e.g., M[:, 2]
            rpn += `®1/1${tokenSep}"∞"`;
          } else if (/^end[,\]]/.test(str)) {
            rpn += '"∞"'; // slice of the form: identifier[n:end]
            str = str.slice(3);
          }
        }
        const topDelim = delims[delims.length - 1];
        tex += topDelim.delimType === dPAREN && topDelim.symbol === "{"
          ? "\\colon"
          : token.output;
        break
      }

      case tt.DIV: { //  / or \atop
        if (isCalc) { rpn += tokenSep; }
        popTexTokens(2, true);
        rpnPrec = rpnPrecFromType[tt.DIV];
        popRpnTokens(rpnPrec);
        if (token.input === "//") {
          // case fraction
          texStack.push({ prec: 2, pos: op.pos, ttype: tt.DIV, closeDelim: "}" });
          tex = tex.substring(0, op.pos) + "\\tfrac{" + tex.substring(op.pos) + "}{";
        } else if (token.input === "/" || token.input === "\\over") {
          // displaystyle fraction
          texStack.push({ prec: 2, pos: op.pos, ttype: tt.DIV, closeDelim: "}" });
          // If the fraction contains other fractions, convert them from \dfrac to \frac
          tex = tex.slice(0, op.pos) + tex.slice(op.pos).replace(dfracRegEx, "\\frac{");
          // Wrap with \dfrac
          tex = tex.substring(0, op.pos) + "\\dfrac{" + tex.substring(op.pos) + "}{";
        } else {
          // atop, for binomials
          texStack.push({ prec: 2, pos: op.pos, ttype: tt.DIV, closeDelim: "}}" });
          tex = tex.substring(0, op.pos) + "{{" + tex.substring(op.pos) + "}\\atop{";
          if (delims[delims.length - 1].name === "(") {
            delims[delims.length - 1].delimType = dBINOMIAL;
          }
        }
        if (isCalc) {
          if (token.input === "\\atop") {
            if (delims[delims.length - 1].delimType === dBINOMIAL) {
              rpnStack.push({ prec: rpnPrec, symbol: "()" });
            }
          } else {
            rpnStack.push({ prec: rpnPrec, symbol: token.input });
          }
        }
        delims[delims.length - 1].isTall = true;
        posOfPrevRun = tex.length;
        okToAppend = false;
        break
      }

      case tt.SUB: { // _
        popTexTokens(15, true);
        const subCD = prevToken.ttype === tt.FUNCTION ? "}{" : "}";
        texStack.push({ prec: 15, pos: op.pos, ttype: tt.SUB, closeDelim: subCD });
        tex += "_{";
        if (isCalc) { rpn += "_"; }
        okToAppend = false;
        break
      }

      case tt.SUP: // ^
        if (isCalc) {
          if (/¿e$/.test(rpn)) {
            // e^3. Replace e with 2.7182818284590452353602874713527
            // eslint-disable-next-line max-len
            rpn = rpn.slice(0, -2) + "®27182818284590452353602874713527/10000000000000000000000000000000";
          }
          rpn += tokenSep;
          popRpnTokens(rpnPrecFromType[tt.SUP]);
        }
        popTexTokens(13, true);
        if (prevToken.ttype === tt.RIGHTBRACKET) {
          texStack.push({ prec: 13, pos: op.pos, ttype: tt.SUP, closeDelim: "}" });
        } else {
          texStack.push({ prec: 13, pos: posOfPrevRun, ttype: tt.SUP, closeDelim: "}" });
        }
        if (isCalc) { rpnStack.push({ prec: rpnPrecFromType[tt.SUP], symbol: "^" }); }
        if (delims.length > 0 && str.charAt(0) === "(") {
          delims[delims.length - 1].isTall = true;
        }
        tex += "^{";
        okToAppend = false;
        break

      case tt.SUPCHAR: { //  ²³¹⁰⁴⁵⁶⁷⁸⁹⁻
        if (isCalc) {
          if (/¿e$/.test(rpn)) {
            // e^3. Replace e with 2.7182818284590452353602874713527
            // eslint-disable-next-line max-len
            rpn = rpn.slice(0, -2) + "®27182818284590452353602874713527/10000000000000000000000000000000";
          }
          rpn += tokenSep;
          popRpnTokens(rpnPrecFromType[tt.SUPCHAR]);
        }
        popTexTokens(13, true);
        const supNum = numFromSupChars(token.output);
        if (prevToken.ttype === tt.RIGHTBRACKET) {
          texStack.push({ prec: 13, pos: op.pos, ttype: tt.SUP, closeDelim: "}" });
        } else {
          texStack.push({ prec: 13, pos: posOfPrevRun, ttype: tt.SUP, closeDelim: "}" });
        }
        tex += "^{" + supNum;
        if (isCalc) {
          rpnStack.push({ prec: rpnPrecFromType[tt.SUPCHAR], symbol: "^" });
          rpn += rationalRPN(supNum);
        }
        okToAppend = true;
        break
      }

      case tt.FUNCTION: { // e.g. sin or tan,  shows parens
        popTexTokens(2, okToAppend);
        posOfPrevRun = tex.length;
        // Is there an exponent on the function name?
        if (functionExpoRegEx.test(str)) {
          // eslint-disable-next-line max-len
          const [expoInput, expoTex, expoRPN] = exponentOfFunction(str, formats.decimalFormat, isCalc);
          if (isCalc && expoRPN === `®-1/1` && trigFunctions.has(token.input)) {
            // Inverse trig function.
            token.input = "a" + token.input;
            token.output = "\\a" + token.output.slice(1);
          } else {
            if (isCalc) { token.input += tokenSep + expoRPN + tokenSep + "^"; }
            token.output += "^" + expoTex;
          }
          const L = expoInput.length + (str.charAt(0) === "^" ? 1 : 0);
          str = str.slice(L).trim();
        }
        if (isCalc) {
          rpnStack.push({ prec: rpnPrecFromType[tt.FUNCTION], symbol: token.input });
          if (prevToken.input === "⌧") { tex += "×"; }
        }
        fc = str.charAt(0);
        texStack.push({
          prec: 12,
          pos: tex.length,
          ttype: tt.FUNCTION,
          closeDelim: fc === "(" ? "" : "}"
        });
        tex += token.output;
        tex += fc === "(" ? "" : "{";
        pendingFunctionName = token.input;
        okToAppend = false;
        break
      }

      case tt.ACCENT:
        if (isCalc) {
          rpn += tokenSep;
          popRpnTokens(rpnPrecFromType[tt.ACCENT]);
        }
        popTexTokens(1, okToAppend);

        if (isCalc) {
          texStack.push({ prec: 16, pos: tex.length, ttype: tt.ACCENT, closeDelim: "〗" });
          tex += (posArrow > 0 ? "" : "〖") + token.input;
          rpn += "¿" + token.input;
          dependencies.push(token.input);
        } else {
          texStack.push({ prec: 16, pos: tex.length, ttype: tt.ACCENT, closeDelim: "}" });
          tex += token.output + "{";
        }

        delims[delims.length - 1].isTall = true;
        okToAppend = false;
        break

      case tt.PRIME:
        popTexTokens(15, true);
        if (isCalc) {
          rpn += token.input;
          dependencies.push(prevToken.input + token.input);
        }
        tex = tex.trim() + token.output + " ";
        okToAppend = true;
        break

      case tt.BINARY: { // e.g. root(3)(x)
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        if (token.input === "root") {
          texStack.push({ prec: 12, pos: tex.length, ttype: tt.BINARY, closeDelim: "]{" });
          tex += "\\sqrt[";
        } else if (verbatims.has(token.input)) {
          texStack.push({ prec: 0, pos: tex.length, ttype: tt.UNARY, closeDelim: "}" });
          const arg = verbatimArg(str);
          tex += token.output + "{" + arg + "}{";
          str = str.slice(arg.length + 2);
          str = str.replace(leadingSpaceRegEx$3, "");
          str = str.slice(1);
          str = str.replace(leadingSpaceRegEx$3, "");
        } else {
          texStack.push({ prec: 12, pos: tex.length, ttype: tt.BINARY, closeDelim: "}{" });
          tex += token.output + "{";
        }
        if (isCalc && token.input === "root") {
          rpnStack.push({ prec: rpnPrecFromType[tt.BINARY], symbol: token.output });
        }
        delims[delims.length - 1].isTall = true;
        okToAppend = false;
        break
      }

      case tt.CURRENCY: {  // e.g. $, £, etc
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        texStack.push({ prec: 12, pos: tex.length, ttype: tt.CURRENCY, closeDelim: "" });
        if (isCalc) {
          rpnStack.push({
            prec: rpnPrecFromType[tt.CURRENCY],
            symbol: "applyUnit" + tokenSep + token.input
          });
          if (prevToken.input === "⌧") { tex += "×"; }
        }
        tex += token.output;
        okToAppend = false;
        break
      }

      case tt.ENVIRONMENT: {
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        tex += token.output;
        if (verbatims.has(token.input) ||
          (token.input === "\\bordermatrix" && str.slice(0, 1) === "[")) {
          const arg = verbatimArg(str);
          tex += token.output === "\\bordermatrix" ? "[" + arg + "]" : "{" + arg + "}";
          str = str.slice(arg.length + 2);
        }
        if (token.output === "\\bordermatrix") { tex += "{"; }
        str = str.slice(1);
        str = str.replace(leadingSpaceRegEx$3, "");
        texStack.push({ prec: 0, pos: tex.length,
          ttype: tt.ENVIRONMENT, closeDelim: token.closeDelim });
        delims.push({
          name: token.input,
          delimType: dENVIRONMENT,
          isTall: true,
          open: token.output,
          close: token.closeDelim,
          numArgs: 1,
          numRows: 1,
          isPrecededByDiv: prevToken.ttype === tt.DIV,
          isFuncParen: false,
          isControlWordParen: true
        });
        okToAppend = true;
        break
      }

      case tt.UNARY: // e.g. bb, hat, or sqrt, or xrightarrow, hides parens
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        if (verbatims.has(token.input)) {
          const arg = verbatimArg(str);
          tex += token.output + "{" + arg + "}";
          str = str.slice(arg.length + 2);
          str = str.replace(leadingSpaceRegEx$3, "");
          token.ttype = tt.RIGHTBRACKET;
          okToAppend = true;
        } else {
          texStack.push({ prec: 12, pos: tex.length, ttype: tt.UNARY, closeDelim: "}" });
          if (isCalc) {
            rpnStack.push({ prec: rpnPrecFromType[tt.UNARY], symbol: token.input });
            if (prevToken.input === "⌧") { tex += "×"; }
          }
          tex += token.output;

          if (/det|inf/.test(token.input) && str.charAt(0) === "_") {
            texStack.push({ prec: 15, pos: tex.length, ttype: tt.SUB, closeDelim: "}" });
            token = { input: "_", output: "_", ttype: tt.SUB };
            tex += "_{";
            str = str.substring(1);
            str = str.replace(/^\s+/, "");
          } else {
            tex += "{";
          }
          delims[delims.length - 1].isTall = true;
          okToAppend = false;
        }
        break

      case tt.FACTORIAL:
        popTexTokens(12, true);
        texStack.push({ prec: 12, pos: op.pos, ttype: tt.FACTORIAL, closeDelim: "" });
        if (isCalc) {
          popRpnTokens(rpnPrecFromType[tt.FACTORIAL]);
          rpn += tokenSep + token.output;
        }
        tex += token.output;
        okToAppend = true;
        break

      case tt.RETURN:
        // Special treatment in order to enable user-defined functions.
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        if (isCalc) {
          popRpnTokens(4);
          rpnStack.push({ prec: 4, symbol: "return" });
        }
        tex += token.output + " ";
        break

      case tt.KEYWORD:
        // Either "for", "while", or "break"
        popTexTokens(1, true);
        posOfPrevRun = tex.length;
        if (isCalc) { popRpnTokens(2); }
        tex += token.output + " ";
        break

      case tt.LOGIC: {
        // logic words: if and or otherwise
        popTexTokens(1, okToAppend);
        if (isCalc) { rpn += tokenSep; }
        popRpnTokens(4);
        const topDelim = delims[delims.length - 1];
        if (token.input === "if" || token.input === "otherwise") {
          if (topDelim.delimType === dPAREN && topDelim.name === "{") {
            // Change the enclosing delim pair to a CASES expression.
            topDelim.delimType = dCASES;
            topDelim.close = "\\end{cases}";
            topDelim.open = "\\begin{cases}";
            // In order to get lazy evaluation of a CASES, we will have to move the
            // expressions after the conditions. Temporarily change the token separator.
            if (isCalc && tokenSep === "\xa0" && token.input === "if") {
              // Change the token separators in the preceding RPN.
              rpn = rpn.slice(0, topDelim.rpnPos) +
                rpn.slice(topDelim.rpnPos).replace(/\xa0/g, "§");
            }
          }
        }
        if (topDelim.delimType === dCASES && ["if", "otherwise"].includes(token.input)) {
          tex += `& \\text{${token.input}}~ `;
        } else {
          tex += token.output;
        }
        if (isCalc) {
          if (topDelim.delimType === dCASES &&
            (token.input === "if" || token.input === "otherwise")) {
            // We're in an If Expression and we just reached the end of an expression.
            rpn = setUpIf(rpn, token.input, exprStack, topDelim);
            tokenSep = "\xa0";
          } else {
            rpnStack.push({ prec: 4, symbol: token.input });
          }
        }
        posOfPrevRun = tex.length;
        okToAppend = true;
        break
      }

      case tt.LEFTBRACKET: {
        popTexTokens(2, okToAppend);
        const isPrecededByDiv = prevToken.ttype === tt.DIV;
        let isFuncParen = false;

        const texStackItem = {
          prec: 0,
          pos: tex.length,
          ttype: tt.LEFTBRACKET,
          closeDelim: token.closeDelim
        };

        if ((token.input === "(" || token.input === "[") && prevToken.ttype < 5) {
          // The delimiters are here to delimit a TeX function extent.
          // Make the delimiters invisible.
          texStackItem.closeDelim = "";
        } else if (token.input === "(" && op.ttype === tt.BINARY) {
          texStackItem.closeDelim = "";
        } else {
          texStackItem.closeDelim = token.closeDelim;
          isFuncParen = (token.input === "(" || token.input === "[") &&
            prevToken.ttype === tt.FUNCTION;
          tex += token.output;
        }
        texStack.push(texStackItem);

        if (isCalc) {
          while (rpnStack.length > 0 && rpnStack[rpnStack.length - 1].symbol === ".") {
            rpn += tokenSep + rpnStack.pop().symbol;
          }
          rpnStack.push({ prec: 0, symbol: token.output.trim() });
        }

        const numArgs = /^\s*[)}\]]/.test(str) ? 0 : 1;

        const delim = {
          name: token.input,
          isTall: false,
          open: token.output,
          close: texStackItem.closeDelim,
          numArgs,
          numRows: numArgs,
          rpnPos: rpn.length,
          isPrecededByDiv,
          isFuncParen,
          isControlWordParen: prevToken.ttype < 5
        };

        if (isFuncParen) {
          delim.delimType = dFUNCTION;
          delim.name = pendingFunctionName;
        } else if (prevToken.ttype === tt.SUB) {
          delim.delimType = dSUBSCRIPT;
          delim.name = "(";
        } else if (token.input === "{") {
          // This may change to a CASES.
          delim.delimType = dPAREN;
          delim.rpnLength = rpn.length;
        } else if (token.input === "[" &&
            ([tt.VAR, tt.LONGVAR, tt.STRING, tt.PROPERTY].includes(prevToken.ttype) ||
            prevToken.input === "]" || (prevToken.input === ")" && !isPrecededBySpace))) {
          rpn += tokenSep;
          delim.delimType = dACCESSOR;
        } else {
          // This may change to a MATRIX, but for now we'll say it's a paren.
          delim.delimType = dPAREN;
          delim.name = token.input;
        }
        delims.push(delim);

        pendingFunctionName = "";
        posOfPrevRun = tex.length;
        okToAppend = false;
        break
      }

      case tt.SEP: {
        // Either a comma or a tab or a semi-colon. Colons are handled elsewhere.
        popTexTokens(1, okToAppend);
        posOfPrevRun = tex.length;
        const delim = delims[delims.length - 1];
        if ((delim.delimType === dPAREN || delim.delimType === dACCESSOR)
            && ([";", "\t"].includes(token.input)
            || token.input === "," && isFollowedBySpaceOrNewline)) {
          delim.delimType = delim.delimType === dPAREN ? dMATRIX : dACCESSOR;
          const ch = delim.name === "["
            ? "b"
            : delim.name === "("
            ? "p"
            : delim.name === "{:"
            ? ""
            : delim.name === "|"
            ? "v"
            : delim.name === "‖"
            ? "V"
            : "B";
          delim.open = `\\begin{${ch}matrix}`;
          delim.close = `\\end{${ch}matrix}`;
          for (let i = delims.length - 1; i > 0; i--) {
            delims[i].isTall = true;
          }
        }
        if (isCalc) {
          if (prevToken.ttype === tt.LEFTBRACKET && delim.delimType === dACCESSOR) {
            rpn += "®0/1";
          }
          rpn += tokenSep;
          popRpnTokens(1);
        }
        if ((delim.delimType === dMATRIX || delim.delimType === dCASES
          || delim.delimType === dENVIRONMENT )
          && token.input === ",") {
          token.output = " & ";
        }

        tex += token.output + " ";

        if (isCalc) {
          if (delims.length === 1) {
            if (token.input === ",") {
              numFreeCommas += 1; // item in a tuple
            }
          } else {
            if (token.input === ";") {
              delim.numRows += 1;
              if (delims.length > 0 && delim.delimType === dCASES) {
              // We're about to begin an expression inside an If Expression.
              // Temporarily change the token separator.
                tokenSep = "§";
              }
            }

            if (delim.numRows === 1) {
              if ([",", "\t"].includes(token.input) && (str.charAt(0) === "]")) {
                rpn += "®0/1";
              }
              if (token.input === "," && delim.delimType === dFUNCTION) {
                if (delim.numArgs === 2 && delim.name === "plot" ) {
                  // The literal function for a plot() statement inside a draw()
                  // Wrap the rpn in quotation marks.
                  rpn = rpn.slice(0, delim.rpnPos + 5) + '"'
                      + rpn.slice(delim.rpnPos + 5, -1).replace(/\u00a0/g, "§") + '"' + tokenSep;
                }
              }
            }
            delim.numArgs += 1;
          }
        }

        okToAppend = true;
        break
      }

      case tt.RIGHTBRACKET: {
        popTexTokens(0, true, token.output);
        const topDelim = delims.pop();

        if (topDelim.delimType === dPAREN && (!topDelim.isControlWordParen)
            && topDelim.close !== token.output) {
          // Enable unmatched delims, such as (1.2] or |ϕ⟩
          tex = tex.slice(0, -1 * topDelim.close.length) + token.output;
        }

        if (topDelim.isTall && delims.length > 1) {
          // If the inner parens are tall, then the outer parens must also be tall.
          delims[delims.length - 1].isTall = true;
        }

        if (isCalc) {
          while (rpnStack.length > 0 && rpnStack[rpnStack.length - 1].prec > 0) {
            rpn += tokenSep + rpnStack.pop().symbol;
          }
          if (topDelim.delimType === dCASES && prevToken.input !== "otherwise") {
            // "otherwise" is optional. We've just found a case where it is omitted.
            // So run function setUpIf as if "otherwise" were present.
            rpn = setUpIf(rpn, "otherwise", exprStack, topDelim);
            tokenSep = "\xa0";
          }
          const rpnOp = rpnStack.pop();
          const numArgs = topDelim.numArgs;
          const numRows = topDelim.numRows;
          const numCols = topDelim.numArgs / topDelim.numRows;

          const firstSep = numArgs === 0 ? "" : tokenSep;

          switch (topDelim.delimType) {
            case dFUNCTION: {
              let symbol = rpnStack.pop().symbol;
              const regEx = new RegExp(tokenSep + '!$');
              if (numArgs === 2) {
                if (symbol === "log") { symbol = "logn"; }
                if (symbol === "round") { symbol = "roundn"; }
                if (symbol === "atan") { symbol = "atan2"; }
                if (symbol === "plot") {
                  rpn = rpn.slice(0, 6) + '"' + rpn.slice(6).replace(/\u00a0/g, "§") + '"';
                }
              } else if (symbol === "log" && regEx.test(rpn)) {
                rpn = rpn.slice(0, rpn.length - 1) + "lfact";
                break
              }
              rpn += (symbol.slice(-1) === "^")
                ? firstSep + symbol
                : builtInFunctions.has(symbol)
                ? firstSep + symbol
                : builtInReducerFunctions.has(symbol)
                ? firstSep + symbol + tokenSep + numArgs
                : firstSep + "function" + tokenSep + symbol + tokenSep + numArgs;
              break
            }

            case dACCESSOR:
              // This is the end of a […] following a variable name.
              rpn += firstSep + "[]" + tokenSep + numArgs;
              break

            case dMATRIX:
              rpn += firstSep + "matrix" + tokenSep + numRows + tokenSep + numCols;
              break

            case dCASES:
              tokenSep = "\xa0";
              rpn += tokenSep + "cases" + tokenSep + numRows + tokenSep;
              while (exprStack.length > 0) {
                // Append the expressions that correspond to each condition.
                rpn += exprStack.shift();
              }
              rpn = rpn.slice(0, -1);
              break

            case dVECTORFROMRANGE:
              // [start:step:end]
              rpn += tokenSep + "matrix" + tokenSep + "1" + tokenSep + "1";
              break

            case dDISTRIB:
              // (bottom to top)
              // Do nothing. This is handled by tt.TO above.
              break

            default:
              if (numArgs === 0 && topDelim.open === "[") {
                // Treat as an empty matrix
                rpn += "matrix" + tokenSep + 0 + tokenSep + 0;
              } else if (numArgs === 1 && topDelim.open === "[") {
                rpn += tokenSep + "matrix" + tokenSep + 1 + tokenSep + 1;
              }
              if (rpnOp.symbol === "\\lfloor") { rpn += tokenSep + "⎿⏌"; }
              if (rpnOp.symbol === "\\lceil") { rpn += tokenSep + "⎾⏋"; }
          }
          if ((token.input === ")" &&
            // eslint-disable-next-line max-len
            !(topDelim.delimType === dFUNCTION && str.charAt(0) === "[" && !isFollowedBySpace) &&
            nextCharIsFactor(str, tt.RIGHTBRACKET, isFollowedBySpace)) ||
            (token.input === "]" && /^\(/.test(str) ||
             topDelim.delimType === dMATRIX && /^\[/.test(str))) {
            // Implicit multiplication between parens, as in (2)(3)
            rpn += tokenSep;
            popRpnTokens(rpnPrecFromType[tt.MULT]);
            rpnStack.push({ prec: rpnPrecFromType[tt.MULT], symbol: "⌧" });
            isFollowedBySpace = false;
            token = { input: "⌧", output: "⌧", ttype: tt.MULT };
          }
        }

        posOfPrevRun = tex.length;
        okToAppend = op.ttype !== tt.BINARY;
        break
      }

      case tt.LEFTRIGHT: {
        // A "|" or "‖" character, which are used as |x|, ‖M‖,  P(A|B),  {x|x ∈ℝ}, |ϕ⟩
        popTexTokens(1, okToAppend);
        const topDelim = delims[delims.length - 1];

        let isRightDelim = false;
        if (texStack.length > 0) {
          isRightDelim =
            texStack[texStack.length - 1].ttype === tt.LEFTRIGHT ||
            texStack[texStack.length - 1].closeDelim === "\u27E9" || // Dirac ket
            texStack[texStack.length - 1].closeDelim === "\\right.";
        }
        if (isRightDelim) {
          // Treat as a right delimiter
          if (topDelim.delimType !== dMATRIX) {
            topDelim.close = token.input === "|" ? "|" : "‖";
            texStack[texStack.length - 1].closeDelim = topDelim.close;
          }
          popTexTokens(0, okToAppend);
          delims.pop();
          if (isCalc) {
            while (rpnStack.length > 0 && rpnStack[rpnStack.length - 1].prec > 0) {
              rpn += tokenSep + rpnStack.pop().symbol;
            }
            rpn += tokenSep + rpnStack.pop().symbol;
          }
          okToAppend = op.ttype !== tt.BINARY;
        } else if (topDelim.delimType === dPAREN && topDelim.name === "{") {
          tex += "\\mid ";
          posOfPrevRun = tex.length;
          okToAppend = true;
        } else {
          // Treat as a left delimiter
          texStack.push({
            prec: 0,
            pos: tex.length,
            ttype: tt.LEFTRIGHT,
            closeDelim: token.input === "|" ? "|" : "‖"
          });

          delims.push({
            delimType: dPAREN,
            name: token.input,
            isTall: false,
            open: token.input === "|" ? "|" : "‖",
            close: token.input === "|" ? "|" : "‖",
            numArgs: 1,
            numRows: 1,
            rpnPos: rpn.length,
            isPrecededByDiv: prevToken.ttype === tt.DIV
          });

          if (isCalc) {
            rpnStack.push({ prec: 0, symbol: token.output });
          }

          tex += token.input === "|" ? "|" : "‖";
          posOfPrevRun = tex.length;
          okToAppend = false;
        }
        break
      }

      case tt.COMMENT:
        popTexTokens(0, true);
        tex += token.output + " ";
        break

      default:
        if (isCalc) {
          rpn += tokenSep;
          popRpnTokens(rpnPrecFromType[tt.ORD]);
        }
        popTexTokens(1, okToAppend);
        texStack.push({ prec: 1, pos: tex.length, ttype: tt.ORD, closeDelim: "" });
        if (isCalc) { rpnStack.push({ prec: rpnPrecFromType[tt.ORD], symbol: token.output }); }
        tex += token.output + " ";
        posOfPrevRun = tex.length;
        okToAppend = true;
    }

    prevToken = cloneToken(token);
    isPrecededBySpace = isFollowedBySpace || token.input === "⌧";
  }

  popTexTokens(0, true); // Pop all the remaining close delimiters off the stack.

  let indexVariable = "";
  if (isCalc) {
    while (rpnStack.length > 0) {
      rpn += tokenSep + rpnStack.pop().symbol;
    }
    let sum = sumRegEx$1.exec(rpn);
    while (sum) {
      // We've matched a ∑_(i=0)^n … term. Edit the index variable and the local RPN.
      indexVariable = sum[1];
      rpn = rpn.slice(0, sum.index) + '"' + sum[1] + '"' + sum[2] + sum[3] + tokenSep
        + '"' + sum[4].replace(/\u00a0/g, "§") + '"\xa0∑' + rpn.slice(sum.index + sum[0].length);
      sum = sumRegEx$1.exec(rpn);
    }
    if (numFreeCommas > 0) {
      rpn += tokenSep + "tuple" + tokenSep + String(numFreeCommas + 1);
    }
    const varRegEx = /〖[^ ().\\,;]+/g;
    let arr;
    while ((arr = varRegEx.exec(tex)) !== null) {
      if ("¨ˆˉ˙˜".indexOf(arr[0][1]) === -1) {
        const pos = arr.index + arr[0].length;
        if (tex.length > pos && tex.charAt(pos) === "(") {
          // We found a method, not a data index. Delete the 〖
          tex = tex.slice(0, arr.index) + tex.slice(arr.index + 1);
        } else {
          tex = tex.substring(0, pos) + "〗" + tex.substring(pos);
        }
      }
    }
  }

  tex = tex.replace(/ {2,}/g, " "); // Replace multiple spaces with single space.
  tex = tex.replace(/\s+(?=[_^'!)}\]〗])/g, ""); // Delete spaces before right delims
  tex = tex.replace(/\s+$/, ""); //                 Delete trailing space
  if (indexVariable.length > 0) {
    tex = tex.replace(new RegExp(`〖${indexVariable}〗`, "g"), indexVariable);
  }

  if (mustAlign) {
    const pos = tex.indexOf("=");
    tex = "\\begin{aligned}" + tex.slice(0, pos) + "&" + tex.slice(pos) + "\\end{aligned}";
  }

  return isCalc ? [tex, rpn, dependencies] : tex
};

const CR_NEWLINE_R = /\r\n?/g;
const FORMFEED_R = /\f/g;
const CLASS_R = /(?:^| )\.([a-z-]+)(?: |&|$)/;
const tableClassRegEx = /(?:^| )\.(?:([a-z-]+)(?: |$)|"([^"]+)")/;
const floatRegEx = /float="(left|right)"/;
const WIDTH_R = /(?:^| )width="?([\d.a-z]+"?)(?: |$)/;
const ALT_R = /(?:^| )alt="([A-Za-z\d ]+)"(?: |$)/;
const COL_WIDTHS_R = /(?:^| )colWidths="([^"]*)"/;
const ID_R = /(?:^| )#([A-Za-z][A-Za-z0-9]*)(?: |$)/;
const leadingSpaceRegEx$2 = /^ +/;
const trailingSpaceRegEx$1 = / +$/;

// Turn various whitespace into easy-to-process whitespace
const preprocess = function(source) {
  return source.replace(CR_NEWLINE_R, "\n").replace(FORMFEED_R, "");
};

// Creates a match function for an inline scoped element from a regex
const inlineRegex = function(regex) {
  const match = function(source, state) {
    return state.inline ? regex.exec(source) : null
  };
  match.regex = regex;
  return match;
};

// Creates a match function for a block scoped element from a regex
const blockRegex = function(regex) {
  const match = function(source, state) {
    return state.inline ? null : regex.exec(source)
  };
  match.regex = regex;
  return match;
};

// Creates a match function from a regex, ignoring block/inline scope
const anyScopeRegex = function(regex) {
  const match = function(source, state) {
    return regex.exec(source);
  };
  match.regex = regex;
  return match;
};

const UNESCAPE_URL_R = /\\([^0-9A-Za-z\s])/g;
const unescapeUrl = function(rawUrlString) {
  return rawUrlString.replace(UNESCAPE_URL_R, "$1");
};

const isNotAnInteger = str => isNaN(str) || Number(str) % 1 !== 0;

const indentRegEx = /^ +/;
const insertNewlines = str => {
  // Lists are unlike other blocks in one respect.
  // A list might not have a preceding blank line, if the list is inside another list.
  // Since the RegEx patterns all depend on that blank line, we will scan the top-level
  // list and insert blank lines where needed.
  const lines = str.split("\n");
  let numLines = lines.length;
  let i = 0;
  let prevIndent = 0;
  let prevLineWasEmpty = true;
  while (i < numLines) {
    const line = lines[i];
    const isEmptyLine = (line === "");
    if (!isEmptyLine) {
      if (LIST_ITEM_PREFIX_R.test(line)) {
        const match = indentRegEx.exec(line);
        const indent = match ? match[0].length : 0;
        if (indent !== prevIndent && !prevLineWasEmpty) {
          // This line starts a new list and needs a preceeding blank line
          lines.splice(i, 0, "");
          i += 1;
          numLines += 1;
          prevLineWasEmpty = true;
          continue
        }
        prevIndent = indent;
      }
    }
    prevLineWasEmpty = isEmptyLine;
    i += 1;
  }
  return lines.join("\n")
};

const parseList = (str, state) => {
  if (!state.inList) {
    // This is a top-level list.
    str = str.replace(LIST_BLOCK_END_R, "\n");
    str = insertNewlines(str);
  }
  const items = str.match(LIST_ITEM_R);
  const isTight = !/\n\n/.test(str.replace(/\n*$/, ""));
  // Backup our state for restoration afterwards.
  const oldStateList = state.inList;
  state.inList = true;
  const itemContent = items.map(function(item, i) {
    // We need to see how far indented this item is:
    const prefixCapture = LIST_ITEM_PREFIX_R.exec(item);
    const space = prefixCapture ? prefixCapture[0].length : 0;
    // And then we construct a regex to "unindent" the subsequent
    // lines of the items by that amount:
    const spaceRegex = new RegExp("^ {1," + space + "}", "gm");

    // Before processing the item, we need a couple things
    const contentStr = item
      // remove indents on trailing lines:
      .replace(spaceRegex, "")
      // remove the bullet:
      .replace(LIST_ITEM_PREFIX_R, "");

    // Backup our state for restoration afterwards.
    const oldStateInline = state.inline;

    // Parse the list item
    state.inline = isTight;
    const adjustedContent = contentStr.replace(LIST_ITEM_END_R, "");
    const content = parse(adjustedContent, state);
    const result = isTight
      ? { type: "tight_list_item", content: [{ "type": "paragraph", "content": content }] }
      : { type: "list_item", content };

    // Restore our state before returning
    state.inline = oldStateInline;
    return result;
  });

  state.inList = oldStateList;
  return itemContent
};

const TABLES = (function() {
  const TABLE_ROW_SEPARATOR_TRIM = /^ *[|+] *| *[|+] *$/g;
  const TABLE_RIGHT_ALIGN = /^[-=]+:$/;
  const TABLE_CENTER_ALIGN = /^:[-=]+:$/;

  const parseTableAlign = function(source) {
    // Inspect ":" characters to set column justification.
    // Return class names that specify center or right justification on specific columns.
    source = source.replace(TABLE_ROW_SEPARATOR_TRIM, "");
    const alignArr = source.trim().split(/[|+]/);
    let alignStr = "";
    for (let i = 0; i < alignArr.length; i++) {
      alignStr += TABLE_CENTER_ALIGN.test(alignArr[i])
        ? ` c${String(i + 1)}c`
        : (TABLE_RIGHT_ALIGN.test(alignArr[i])
        ? ` c${String(i + 1)}r`
        : "");
    }
    return alignStr.trim()
  };

  const tableDirectives = (directives, align) => {
    // Get CSS class, ID, and column widths, if any.
    if (!directives && align === "") { return ["", "", null] }
    const userDefClass = tableClassRegEx.exec(directives);
    let myClass = userDefClass
      ? (userDefClass[1] ? userDefClass[1] : userDefClass[2] )
      : "";
    const isSpreadsheet = myClass && myClass.split(" ").includes("spreadsheet");
    if (align.length > 0) { myClass += (myClass.length > 0 ? " " : "") + align; }
    const userDefId = ID_R.exec(directives);
    const myID = (userDefId) ? userDefId[1] : "";
    const colWidthMatch = COL_WIDTHS_R.exec(directives);
    const colWidths = (colWidthMatch) ? colWidthMatch[1].split(" ") : null;
    return [myClass, myID, isSpreadsheet, colWidths]
  };

  const pipeRegEx = /(?<!\\)\|/;  // eslint doesn't like look behind. Disregard the warning.

  const parsePipeTableRow = function(source, parse, state, isSpreadsheet,
                                     colWidths, inHeader) {
    const cells = source.trim().split(pipeRegEx);
    cells.shift();
    cells.pop();
    const tableRow = [{ type: "tableSeparator" }];
    for (const str of cells) {
      const cell = isSpreadsheet
        ? [{ type: "spreadsheet_cell", attrs: { entry: str.trim() } }]
        : parse(str.trim(), state);
      tableRow.push(...cell);
      tableRow.push({ type: "tableSeparator" });
    }
    consolidate(tableRow);

    const row = {
      type: "table_row",
      content: []
    };
    let j = -1;
    tableRow.forEach(function(node, i) {
      if (node.type === "text") {
        if (i > 0 && tableRow[i - 1].type === "tableSeparator") {
          node.text = node.text.replace(leadingSpaceRegEx$2, "");
        }
        if (i < tableRow.length - 1) {
          node.text = node.text.replace(trailingSpaceRegEx$1, "");
        }
      }
      if (node.type === "tableSeparator") {
        if (i !== tableRow.length - 1) {  // Filter out the row's  last table separator
          // Create a new cell
          j += 1;
          row.content.push({
            "type": inHeader ? "table_header" : "table_cell",
            "attrs": {
              "colspan": 1,
              "rowspan": 1,
              "colwidth": (colWidths) ? [Number(colWidths[j])] : null,
              "background": null
            },
            content: (state.inHtml || isSpreadsheet
              ? []
              : [{ "type": "paragraph", "content": [] }]
            )
          });
        }
      } else if (state.inHtml || isSpreadsheet) {
        // For direct to HTML, write the inline contents directly into the <td> element.
        // row   cell    content      text
        row.content[j].content.push(node);
      } else {
        // Hurmet.app table cells always contain a paragraph.
        // row   cell  paragraph  content      text
        row.content[j].content[0].content.push(node);
      }
    });

    return row;
  };

  const parsePipeTable = function() {
    return function(capture, state) {
      state.inline = true;
      const align = parseTableAlign(capture[3]);
      const [myClass, myID, isSpreadsheet, colWidths] = tableDirectives(capture[5], align);
      const table = {
        type: "table",
        attrs: {},
        content: []
      };
      if (myID) { table.attrs.name = myID; }
      if (myClass) { table.attrs.class = myClass; }
      if (isSpreadsheet) { table.attrs.dtype = dt.SPREADSHEET; }
      if (colWidths && state.inHtml) {
        let sum = 0;
        colWidths.forEach(el => { sum += Number(el); } );
        table.attrs.style = `width: ${sum}px`;
        const colGroup = { type: "colGroup", content: [] };
        for (const width of colWidths) {
          colGroup.content.push({ type: "col", attrs: [{ style: `width: ${width}px` }] });
        }
        table.content.push(colGroup);
      }
      if (!/^\|+$/.test(capture[2])) {
        table.content.push(parsePipeTableRow(capture[2], parse, state, isSpreadsheet,
                                             colWidths, true));
      }
      const tableBody = capture[4].trim().split("\n");
      tableBody.forEach(row => {
        table.content.push(parsePipeTableRow(row, parse, state, isSpreadsheet,
                                             colWidths, false));
      });
      state.inline = false;
      if (capture[1]) {
        const figure = { type: "figure", attrs: { class: "" }, content: [
          { type: "figcaption", content: parseInline(capture[1], state) },
          table
        ] };
        if (capture[5]) {
          const match = floatRegEx.exec(capture[5]);
          if (match) { figure.attrs.class = match[1]; }
        }
        return figure
      } else {
        return table
      }
    };
  };

  const headerRegEx = /^\+:?=/;
  const gridSplit = / *\n/g;
  const cellCornerRegEx = /^\+[-=:]+\+[+=:-]+\+$/g;

  const parseGridTable = function() {
    return function(capture, state) {
      const topBorder = capture[3];
      const lines = capture[2].slice(0, -1).split(gridSplit);

      // Does the grid table contain a line separating header from table body?
      let headerExists = false;
      let headerSepLine = lines.length + 10;
      for (let i = 0; i < lines.length; i++) {
        if (headerRegEx.test(lines[i])) {
          headerExists = true;
          headerSepLine = i;
          break
        }
      }

      // Get column justification
      const alignrow = headerExists ? lines[headerSepLine] : topBorder.slice(1);
      const align = parseTableAlign(alignrow);
      const [myClass, myID, isSpreadsheet, colWidths] = tableDirectives(capture[4], align);

      // Read the top & left borders to find a first draft of cell corner locations.
      const colSeps = [0];
      for (let j = 1; j < topBorder.length; j++) {
        if (topBorder.charAt(j) === "+") { colSeps.push(j); }
      }
      const rowSeps = [0];
      for (let i = 1; i < lines.length; i++) {
        if (lines[i].charAt(0) === "+") { rowSeps.push(i); }
      }

      // Look for the cell corner locations that don't appear on top or left border
      let rowSepIndex = 0;
      while (rowSepIndex < rowSeps.length) {
        // Find the next row separator
        let nextRow = 0;
        const isValid = new Array(colSeps.length).fill(true);
        for (let i = rowSeps[rowSepIndex] + 1; i < lines.length; i++) {
          for (let k = 0; k < colSeps.length; k++) {
            if (!isValid[k]) { continue }
            if ("+|".indexOf(lines[i][colSeps[k]]) === -1) { isValid[k] = false; continue }
            if (lines[i][colSeps[k]] === "+") {
              nextRow = i;
              break
            }
          }
          if (nextRow !== 0) { break }
        }
        if (!rowSeps.includes(nextRow)) {
          rowSeps.splice(rowSepIndex + 1, 0, nextRow);
        }

        // Check the next horizontal border for new cell corners
        rowSepIndex += 1;
        const border = lines[nextRow];
        for (let j = 0; j < colSeps.length - 1; j++) {
          let cellBorder = border.slice(colSeps[j], colSeps[j + 1] + 1);
          if (cellCornerRegEx.test(cellBorder)) {
            cellBorder = cellBorder.slice(1, -1);
            let pos = cellBorder.indexOf("+") + 1;
            let k = 1;
            while (pos > 0) {
              colSeps.splice(j + k, 0, colSeps[j] + pos);
              pos = cellBorder.indexOf("+", pos) + 1;
              k += 1;
            }
          }
        }
      }

      const numCols = colSeps.length - 1;
      const numRows = rowSeps.length - 1;
      const gridTable = [];

      // Create default rows and cells. They may be merged later.
      for (let i = 0; i < numRows; i++) {
        const row = new Array(numCols);
        for (let j = 0; j < numCols; j++) { row[j] = { rowspan: 1 }; }
        gridTable.push(row);
      }

      for (let i = 0; i < numRows; i++) {
        const row = gridTable[i];
        // Determine the actual rowspan and colspan of each cell.
        for (let j = 0; j < numCols; j++) {
          const cell = row[j];
          if (cell.rowspan === 0) { continue }
          cell.colspan = 1;
          const lastTextRow = lines[rowSeps[i + 1] - 1];
          for (let k = j + 1; k < colSeps.length; k++) {
            if (lastTextRow.charAt(colSeps[k]) === "|") { break }
            cell.colspan += 1;
            row[k].rowspan = 0;
          }
          for (let k = i + 1; k < rowSeps.length; k++) {
            const ch = lines[rowSeps[k]].charAt(colSeps[j] + 1);
            if ("-=:".indexOf(ch) > -1) { break }
            cell.rowspan += 1;
            for (let jj = 0; jj < cell.colspan; jj++) {
              gridTable[k][j + jj].rowspan = 0;
            }
          }
          // Now that we know the cell extents, get the cell contents.
          const xStart = colSeps[j] + 1;
          const xEnd = colSeps[j + cell.colspan];
          const yStart = rowSeps[i] + 1;
          const yEnd = rowSeps[i + cell.rowspan];
          let str = "";
          for (let ii = yStart; ii < yEnd; ii++) {
            str += lines[ii].slice(xStart, xEnd).replace(/ +$/, "") + "\n";
          }
          cell.blob = str.slice(0, -1).replace(/^\n+/, "");
          const leadingSpacesMatch = /^ +/.exec(cell.blob);
          if (leadingSpacesMatch) {
            const numLeadingSpaces = leadingSpacesMatch[0].length;
            const spaceRegEx = new RegExp("^" + " ".repeat(numLeadingSpaces), "gm");
            cell.blob = cell.blob.replace(spaceRegEx, "");
          }

          cell.inHeader = (headerExists && yStart < headerSepLine);

          if (colWidths) {
            // Set an attribute used by ProseMirror.
            const cellWidth = cell.colspan === 0 ? null : [];
            for (let k = 0; k < cell.colspan; k++) {
              cellWidth.push(Number(colWidths[j + k]));
            }
            cell.width = cellWidth;
          }
        }
      }

      const table = {
        type: "table",
        attrs: {},
        content: []
      };
      if (myID) { table.attrs.name = myID; }
      if (myClass) { table.attrs.class = myClass; }
      if (isSpreadsheet) { table.attrs.dtype = dt.SPREADSHEET; }
      let k = 0;
      if (colWidths && state.inHtml) {
        let sum = 0;
        colWidths.forEach(el => { sum += Number(el); } );
        table.attrs.style = `width: ${sum}px`;
        const colGroup = { type: "colGroup", attrs: null, content: [] };
        for (const width of colWidths) {
          colGroup.content.push({ type: "col", attrs: [{ style: `width: ${width}px` }] });
        }
        table.content.push(colGroup);
        k = 1;
      }
      for (let i = 0; i < numRows; i++) {
        table.content.push({ type: "table_row", content: [] } );
        for (let j = 0; j < numCols; j++) {
          if (gridTable[i][j].rowspan === 0) { continue }
          const cell = gridTable[i][j];
          state.inline = false;
          let content = isSpreadsheet
            ? [{ type: "spreadsheet_cell", attrs: { entry: cell.blob.trim() } }]
            : parse(cell.blob, state);
          if (state.inHtml && content.length === 1 && content[0].type === "paragraph") {
            content = content[0].content;
          }
          if (content.length === 1 && content[0].type === "null") {
            content = [{ type: "paragraph", content: [] }];
          }
          table.content[i + k].content.push({
            "type": cell.inHeader ? "table_header" : "table_cell",
            "attrs": {
              "colspan": cell.colspan,
              "rowspan": cell.rowspan,
              "colwidth": (colWidths) ? cell.width : null,
              "background": null
            },
            content: content
          });
        }
      }
      state.inline = false;
      if (capture[1]) {
        const figure = { type: "figure", attrs: { class: "" }, content: [
          { type: "figcaption", attrs: null, content: parseInline(capture[1], state) },
          table
        ] };
        if (capture[4]) {
          const match = floatRegEx.exec(capture[4]);
          if (match) { figure.attrs.class = match[1]; }
        }
        return figure
      } else {
        return table
      }
    };
  };

  return {
    parsePipeTable: parsePipeTable(),
    PIPE_TABLE_REGEX: /^(?:: ((?:[^\n]|\n(?!\||:|<\/dl>))*)\n)?(\|.*)\n\|([-:]+[-| :]*)\n((?:\|.*(?:\n|$))*)(?:\{([^\n}]+)\}\n)?\n*/,
    parseGridTable: parseGridTable(),
    GRID_TABLE_REGEX: /^(?:: ((?:[^\n]|\n(?!\+|:|<\/dl>))*)\n)?((\+(?:[-:=]+\+)+)\n(?:[+|][^\n]+[+|] *\n)+)(?:\{([^\n}]+)\}\n)?\n*/
  };
})();

const LINK_INSIDE = "(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*";
const LINK_HREF_AND_TITLE =
  "\\s*<?((?:\\([^)]*\\)|[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*";

const linkIndex = marks => {
  for (let i = 0; i < marks.length; i++) {
    if (marks[i].type === "link") { return i }
  }
};

// Pattern to find Hurmet calculation results.
// This will be replaced in the entry with the display selector.
const resultRegEx = /〔[^〕]*〕/;
const drawRegEx$1 = /^draw\(/;

const parseRef = function(capture, state, refNode) {
  // Handle implicit refs: [title][<ref>], ![alt or caption][<ref>]
  let ref = capture[2] ? capture[2] : capture[1];
  ref = ref.replace(/\s+/g, " ");

  // We store defs in state._defs (_ to deconflict with client-defined state).
  if (state._defs && state._defs[ref]) {
    const def = state._defs[ref];
    if (refNode.type === "figure") {
      refNode = { type: "figure", attrs: def.attrs, content: [
        { type: "figimg", attrs: def.attrs },
        { type: "figcaption", content: parseInline(refNode.attrs.alt, state) }
      ] };
      refNode.content[0].attrs.src = def.target;
      if (def.attrs.alt) { refNode.content[0].attrs.alt = def.attrs.alt; }
    } else if (refNode.type === "image") {
      if (drawRegEx$1.test(def.target)) {
        const entry = def.target.replace(/\\n/g, "\n");
        return { type: "calculation", attrs: { entry } }
      } else {
        refNode.attrs = def.attrs;
        refNode.attrs.src = def.target;
      }
    } else {
      // refNode is a link
      refNode.attrs.href = def.target;
    }
  }
  return refNode;
};

const parseTextMark = (capture, state, mark) => {
  const text = parseInline(capture, state);
  if (Array.isArray(text) && text.length === 0) { return text }
  consolidate(text);
  for (const range of text) {
    if (range.marks) {
      range.marks.push({ type: mark });
    } else {
      range.marks = [{ type: mark }];
    }
  }
  return text
};

const BLOCK_HTML = /^ *(?:<(head|h[1-6]|p|pre|label|script|style|table)[\s>][\s\S]*?(?:<\/\1>[^\n]*\n)|<(?:\/?(?:!DOCTYPE html|body|li|br|hr|(?:div|article|details|input|ul|ol|dl|main|nav)(?: (?:class|id|name|style|type)=(["'])[A-Za-z0-9_.:;\- ]+\2){0,2})|\/?html(?: lang=(["'])[a-z]+\3)?)>[^\n]*?(?:\n|$))/;

// Rules must be applied in a specific order, so use a Map instead of an object.
const rules = new Map();
rules.set("html", {
  isLeaf: true,
  match: blockRegex(BLOCK_HTML),
  parse: function(capture, state) {
    if (!state.inHtml) { return null }
    return { type: "html", text: capture[0] }
  }
});
rules.set("htmlComment", {
  isLeaf: true,
  match: blockRegex(/^ *<!--[^>]+-->[^\n]*\n/),
  parse: function(capture, state) {
    return { type: "null" }
  }
}),
rules.set("lheading", {
  isLeaf: false,
  match: blockRegex(/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/),
  parse: function(capture, state) {
    return {
      type: "heading",
      attrs: { level: capture[2] === '=' ? 1 : 2 },
      content: parseInline(capture[1].trim(), state)
    };
  }
});
rules.set("heading", {
  isLeaf: false,
  match: blockRegex(/^ *(#{1,6})([^\n]+?)#*\n*\n/),
  parse: function(capture, state) {
    return {
      attrs: { level: capture[1].length },
      content: parseInline(capture[2].trim(), state)
    };
  }
});
rules.set("dt", {  // description term
  isLeaf: false,
  match: blockRegex(/^(([^\n]*)\n)(?=<dd>|\n: [^\n]+\n[^|+])/),
  parse: function(capture, state) {
    return { content: parseInline(capture[2].trim(), state) }
  }
});
rules.set("horizontal_rule", {
  isLeaf: true,
  match: blockRegex(/^( *[-*_]){3,} *(?:\n *)+\n/),
  parse: function(capture, parse, state) {
    return { type: "horizontal_rule" };
  }
});
rules.set("codeBlock", {
  isLeaf: true,
  match: blockRegex(/^(?:(?:\t| {4})[^\n]+\n*)+(?:\n *)+\n/),
  parse: function(capture, state) {
    const content = capture[0].replace(/^(\t| {4})/gm, '').replace(/\n+$/, '');
    return {
      type: "code_block",
      content: [{ type: "text", text: content }]
    };
  }
});
rules.set("fence", {
  isLeaf: true,
  match: blockRegex(/^(```|~~~) *(?:(\S+) *)?\n([\s\S]+?)\n?\1 *(?:\n *)+\n/),
  parse: function(capture, state) {
    return {
      type: "code_block",
//      lang: capture[2] || undefined,
      content: [{ type: "text", text: capture[3] }]
    };
  }
});
rules.set("alert", {
  isLeaf: false,
  match: blockRegex(/^(?: *> \[!(NOTE|TIP|IMPORTANT|WARNING|EPIGRAPH)\])((?:\n *>(?! *\[!)[^\n]*)+)(?:\n *)+\n/),
  // Alert for note |tip | important | warning |epigraph
  parse: function(capture, state) {
    const cap = capture[2].replace(/\n *> ?/gm, "\n").replace(/^\n/, "");
    const content = parse(cap, state);
    return { type: capture[1].toLowerCase(), content }
  }
});
rules.set("blockquote", {
  isLeaf: false,
  match: blockRegex(/^>([^\n]*(?:\n *>[^\n]*)*)(?:\n *)+\n/),
  parse: function(capture, state) {
    const content = capture[1].replace(/\n *> ?/gm, "\n");
    return { content: parse(content, state) };
  }
});
rules.set("ordered_list", {
  isLeaf: false,
  match: blockRegex(/^( {0,3})(?:(?:(\d{1,9})|([A-Z])|([a-z]))[.)]) [\s\S]+?(?:\n{2,}(?! )(?!\1(?:\d{1,9}\.) )\n*|\s*$)/),
  parse: function(capture, state) {
    const start = capture[2]
      ? Number(capture[2])
      : capture[3]
      ? capture[3].codePointAt(0) - 64
      : capture[4].codePointAt(0) - 96;
    const className = capture[2] ? "decimal" : capture[3] ? "upper-alpha" : "lower-alpha";
    return {
      attrs: { class: className, order: start },
      content: parseList(capture[0], state)
    }
  }
});
rules.set("bullet_list", {
  isLeaf: false,
  match: blockRegex(/^( {0,3})([*+-]) [\s\S]+?(?:\n{2,}(?! )(?!\1(?:[*+-]) )\n*|\s*$)/),
  parse: function(capture, state) {
    return { content: parseList(capture[0], state) }
  }
});
rules.set("special_div", {
  isLeaf: false,
  match: blockRegex(/^(:{3,}) ?(indented|comment|centered|right_justified|boxed|header|hidden) *\n([\s\S]+?)\n+\1 *(?:\n{2,}|\s*$)/),
  // indented or centered or right-justified or boxed or comment div, or <header>
  parse: function(capture, state) {
    const content = parse(capture[3], state);
    return { type: capture[2], content };
  }
});
rules.set("figure", {
  isLeaf: true,
  match: blockRegex(/^!!\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\] *(?:\n *)+\n/),
  parse: function(capture, state) {
    if (isNotAnInteger(capture[1])) {
      return parseRef(capture, state, { type: "figure", attrs: { alt: capture[1] } });
    } else {
      return parseRef(capture, state, { type: "figure" });
    }
  }
});
rules.set("def", {
  isLeaf: true,
  match: blockRegex(/^\[([^\]\n]+)\]: *(?:¢(`+)([\s\S]*?[^`])\2(?!`)|<?([^\n>]*)>? *(?:\n\{([^\n}]*)\})?)/),
  // Link reference definitions were handled in md2ast().
  parse: function(capture, state) { return { type: "null" } }
});
rules.set("toc", {
  isLeaf: true,
  match: blockRegex(/^{\.toc start=(\d) end=(\d)}\n/),
  parse: function(capture, state) {
    return { attrs: { start: Number(capture[1]), end: Number(capture[2]), body: [] } }
  }
});
rules.set("pipeTable", {
  isLeaf: false,
  match: blockRegex(TABLES.PIPE_TABLE_REGEX),
  parse: TABLES.parsePipeTable
});
rules.set("gridTable", {
  isLeaf: false,
  match: blockRegex(TABLES.GRID_TABLE_REGEX),
  parse: TABLES.parseGridTable
});
rules.set("dd", {  // description details
  isLeaf: false,
  match: blockRegex(/^:( +)[\s\S]+?(?:\n{2,}(?! |:)(?!\1)\n*|\s*$)/),
  parse: function(capture, state) {
    let div = " " + capture[0].slice(1);
    const indent = 1 + capture[1].length;
    const spaceRegex = new RegExp("^ {" + indent + "," + indent + "}", "gm");
    div = div.replace(spaceRegex, ""); // remove indents on trailing lines:
    return { content: parse(div, state) };
  }
});
rules.set("displayTeX", {
  isLeaf: true,
  match: blockRegex(/^ *(?:\$\$\n? *((?:\\[\s\S]|[^\\])+?)\n?\$\$|\\\[\n? *((?:\\[\s\S]|[^\\])+?)\n?\\\]) *(?:\n|$)/),
  parse: function(capture, state) {
    const tex = (capture[1] ? capture[1] : capture[2]).trim();
    return { type: "tex", attrs: { tex, displayMode: true } }
  }
});
rules.set("newline", {
  isLeaf: true,
  match: blockRegex(/^(?:\n *)*\n/),
  parse: function() { return { type: "null" } }
});
rules.set("emptyParagraph", {
  isLeaf: true,
  match: blockRegex(/^¶(?:\n *)+\n/),
  parse: function(capture, state) {
    return { type: "paragraph", content: [] }
  }
});
rules.set("paragraph", {
  isLeaf: false,
  match: blockRegex(/^((?:[^\n]|\n(?!(?: *\n|(?=[*+-] )|(?=(?:\d{1,9}|[A-Za-z])[.)] ))))+)\n(?:(?: *\n)+|(?=[*+-] )|(?=(?:\d{1,9}|[A-Za-z])[.)] ))/),
  parse: function(capture, state) {
    return { type: "paragraph", content: parseInline(capture[1], state) }
  }
});
// Position tex ahead of escape in order to capture \[...\] math.
rules.set("tex", {
  isLeaf: true,
  match: inlineRegex(/^(?:\\\[((?:\\[\s\S]|[^\\])+?)\\\]|\$\$((?:\\[\s\S]|[^\\])+?)\$\$|\\\(((?:\\[\s\S]|[^\\])+?)\\\)|\$(`+)((?:(?:\\[\s\S]|[^\\])+?)?)\4\$(?![0-9$])|\$(?!\s|\$)((?:(?:\\[\s\S]|[^\\])+?)?)(?<=[^\s\\$])\$(?![0-9$]))/),
  parse: function(capture, state) {
    if (capture[1]) {
      const tex = (capture[1]).trim();
      return { type: "tex", attrs: { tex, displayMode: true } }
    } else {
      const tex = (capture[2]
        ? capture[2]
        : capture[3]
        ? capture[3]
        : capture[5]
        ? capture[5]
        : capture[6]).trim();
      return { type: "tex", attrs: { tex, displayMode: false } }
    }
  }
});
rules.set("escape", {
  // We don't allow escaping numbers, letters, or spaces here so that
  // backslashes used in plain text still get rendered. But allowing
  // escaping anything else provides a very flexible escape mechanism,
  // regardless of how this grammar is extended.
  isLeaf: true,
  match: inlineRegex(/^\\([^0-9A-Za-z()\s])/),
  parse: function(capture, state) {
    return {
      type: "text",
      text: capture[1]
    };
  }
});
rules.set("tableSeparator", {
  isLeaf: true,
  match: function(source, state) {
    if (!state.inTable) { return null }
    return /^ *\| */.exec(source);
  },
  parse: function() {
    return { type: "tableSeparator" };
  }
});
rules.set("link", {
  isLeaf: true,
  match: inlineRegex(
    new RegExp("^\\[(" + LINK_INSIDE + ")\\]\\(" + LINK_HREF_AND_TITLE + "\\)")
  ),
  parse: function(capture, state) {
    const textNode = parseTextMark(capture[1], state, "link" )[0];
    const i = linkIndex(textNode.marks);
    textNode.marks[i].attrs = { href: unescapeUrl(capture[2]) };
    return textNode
  }
});
rules.set("image", {
  isLeaf: true,
  match: inlineRegex(
    new RegExp("^!\\[(" + LINK_INSIDE + ")\\]\\(" + LINK_HREF_AND_TITLE + "\\)")
  ),
  parse: function(capture, state) {
    if (isNotAnInteger(capture[1])) {
      return { attrs: { alt: capture[1], src: unescapeUrl(capture[2]) } }
    } else {
      return { attrs: { src: unescapeUrl(capture[2]) } }
    }
  }
});
rules.set("reflink", {
  isLeaf: true,
  match: inlineRegex(/^\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\]/),
  parse: function(capture, state) {
    const defIndex = capture[2] ? capture[2] : capture[1];
    const textNode = parseTextMark(capture[1], state, "link" )[0];
    const i = linkIndex(textNode.marks);
    textNode.marks[i].attrs = { href: state._defs[defIndex].target };
    return textNode
  }
});
rules.set("footnote", {
  isLeaf: true,
  match: inlineRegex(/^\[\^(\d+)\]/),
  parse: function(capture, state) {
    const index = Number(capture[1]) - 1;
    return { type: "footnote", content: parseInline(state.footnotes[index], state) }
  }
});
rules.set("refimage", {
  isLeaf: true,
  match: inlineRegex(/^!\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\]/),
  parse: function(capture, state) {
    //if (isNotAnInteger(capture[1])) {
    return parseRef(capture, state, { type: "image", attrs: { alt: capture[1] } });
    //} else {
    //  return parseRef(capture, state, { type: "image" });
   // }
  }
});
rules.set("autolink", {
  isLeaf: true,
  match: inlineRegex(/^<([^: >]+:\/[^ >]+)>/),
  parse: function(capture, state) {
    const textNode = parseTextMark(capture[1], state, "link" )[0];
    const i = linkIndex(textNode.marks);
    textNode.marks[i].attrs = { href: unescapeUrl(capture[1]) };
    return textNode
  }
});
rules.set("code", {
  isLeaf: true,
  match: inlineRegex(/^(`+)([\s\S]*?[^`])\1(?!`)/),
  parse: function(capture, state) {
    const text = capture[2].trim();
    return [{ type: "text", text, marks: [{ type: "code" }] }]
  }
});
rules.set("calculation", {
  isLeaf: true,
  match: anyScopeRegex(/^(?:¢(\?\?|\?|%%|%|@@|@)?(`+)([\s\S]*?[^`])\2(?!`)|¢¢(\?\?|\?|%%|%|@@|@)?\n?((?:\\[\s\S]|[^\\])+?)\n?¢¢)/),
  parse: function(capture, state) {
    if (capture[3]) {
      let entry = capture[3].trim();
      if (capture[1]) {
        entry = entry.replace(resultRegEx, capture[1]);
      }
      if (!/^(?:function|draw\()/.test(entry) && entry.indexOf("``") === -1) {
        entry = entry.replace(/\n/g, " ");
      }
      return { attrs: { entry } }
    } else {
      let entry = capture[5].trim();
      if (capture[4]) {
        entry = entry.replace(resultRegEx, capture[4]);
      }
      return { attrs: { entry, displayMode: true } }
    }
  }
});
rules.set("em", {
  isLeaf: true,
  match: inlineRegex(/^([_*])(?!\s|\1)((?:\\[\s\S]|[^\\])+?)\1/),
  parse: function(capture, state) {
    return parseTextMark(capture[2], state, "em" )
  }
});
rules.set("strong", {
  isLeaf: true,
  match: inlineRegex(/^(\*\*|__)(?=\S)((?:\\[\s\S]|[^\\])+?)\1/),
  parse: function(capture, state) {
    return parseTextMark(capture[2], state, "strong" )
  }
});
rules.set("del", {
  isLeaf: true,
  match: inlineRegex(/^<del>([\s\S]*?)<\/del>/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "strikethru" )
  }
});
rules.set("strikethru", {
  isLeaf: true,
  match: inlineRegex(/^~~(?=\S)((?:\\[\s\S]|~(?!~)|[^\s~\\]|\s(?!~~))+?)~~/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "strikethru" )
  }
});
rules.set("superscript", {
  isLeaf: true,
  match: inlineRegex(/^<sup>([\s\S]*?)<\/sup>/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "superscript" )
  }
});
rules.set("carat", {
  isLeaf: true,
  match: inlineRegex(/^\^((?:\\[\s\S]|[^\\])+?)\^/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "superscript" )
  }
});
rules.set("subscript", {
  isLeaf: true,
  match: inlineRegex(/^<sub>([\s\S]*?)<\/sub>/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "subscript" )
  }
});
rules.set("tilde", {
  isLeaf: true,
  match: inlineRegex(/^~((?:\\[\s\S]|[^\\])+?)~/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "subscript" )
  }
});
rules.set("underline", {
  isLeaf: true,
  match: inlineRegex(/^<u>([\s\S]*?)<\/u>/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "underline" )
  }
});
rules.set("highlight", {
  isLeaf: true,
  match: inlineRegex(/^<mark>([\s\S]*?)<\/mark>/),
  parse: function(capture, state) {
    return parseTextMark(capture[1], state, "highlight" )
  }
});
rules.set("hard_break", {
  isLeaf: true,
  match: anyScopeRegex(/^(\\| {2})\n/),
  parse: function() { return { text: "\n" } }
});
rules.set("inline_break", {
  isLeaf: true,
  match: anyScopeRegex(/^<br>/),
  parse: function() { return { type: "hard_break", text: "\n" } }
});
rules.set("span", {
  isLeaf: true,
  match: inlineRegex(/^<span [a-z =":]+>[^<]+<\/span>/),
  parse: function(capture, state) {
    return !state.inHtml ? null : { type: "html", text: capture[0] }
  }
});
rules.set("text", {
  // We break on symbol characters, double newlines, or double-space-newlines.
  isLeaf: true,
  match: anyScopeRegex(/^[\s\S]+?(?=[_*`#>|\\\-+=![({$¢¶<~^+:]|\n\n| {2,}\n|\d+[.)]|\w+:\S|$)/),
  parse: function(capture, state) {
    return {
      text: capture[0].replace(/\n/g, " ")
    };
  }
});


const parse = (source, state) => {
  if (!state.inline) { source += "\n\n"; }
  source = preprocess(source);
  const result = [];
  while (source) {
    // store the best match and its rule:
    let capture = null;
    let ruleName = null;
    let rule = null;
    for (const [currRuleName, currRule] of rules) {
      capture = currRule.match(source, state);
      if (capture) {
        rule = currRule;
        ruleName = currRuleName;
        break
      }
    }
    const parsed = rule.parse(capture, state);
    if (Array.isArray(parsed)) {
      Array.prototype.push.apply(result, parsed);
    } else {
      if (parsed.type == null) { parsed.type = ruleName; }
      result.push(parsed);
    }
    state.prevCapture = capture[0];
    source = source.substring(capture[0].length);
  }
  return result
};



/**
 * Parse some content with the parser `parse`, with state.inline
 * set to true. Useful for block elements; not generally necessary
 * to be used by inline elements (where state.inline is already true.
 */
const parseInline = function(content, state) {
  const isCurrentlyInline = state.inline || false;
  state.inline = true;
  const result = parse(content, state);
  state.inline = isCurrentlyInline;
  return result;
};


// recognize a `*` `-`, `+`, `1.`, `2.`, `A.`, `a,`... list bullet
const LIST_BULLET = "(?:[*+-]|(?:\\d+|[A-Za-z])[\\.\\)])";
// recognize the start of a list item:
// leading space plus a bullet plus a space (`   * `)
const LIST_ITEM_PREFIX = "( *)(" + LIST_BULLET + ") +";
const LIST_ITEM_PREFIX_R = new RegExp("^" + LIST_ITEM_PREFIX);
// recognize an individual list item:
//  * hi
//    this is part of the same item
//
//    as is this, which is a new paragraph in the same item
//
//  * but this is not part of the same item
const LIST_ITEM_R = new RegExp(
  LIST_ITEM_PREFIX + "[^\\n]*(?:\\n" + "(?!\\1" + LIST_BULLET + " )[^\\n]*)*(\n|$)",
  "gm"
);
const BLOCK_END_R = /\n{2,}$/;
// recognize the end of a paragraph block inside a list item:
// two or more newlines at end end of the item
const LIST_BLOCK_END_R = BLOCK_END_R;
const LIST_ITEM_END_R = / *\n+$/;

const consolidate = arr => {
  if (Array.isArray(arr) && arr.length > 0) {
    // Group any text nodes together into a single string output.
    for (let i = arr.length - 1; i > 0; i--) {
      const node = arr[i];
      const prevNode = arr[i - 1];
      if (node.type === 'text' && prevNode.type === 'text' &&
          !node.marks && !prevNode.marks) {
        prevNode.text += node.text;
        arr.splice(i, 1);
      } else if ((node.type === 'indented' && prevNode.type === 'indented') ||
                 (node.type === 'centered' && prevNode.type === 'centered')) {
        prevNode.content = prevNode.content.concat(node.content);
        arr.splice(i, 1);
      } else if (node.type === "null") {
        arr.splice(i, 1);
      } else if (!rules.has(node.type) || !rules.get(node.type).isLeaf) {
        consolidate(node.content);
      }
    }

    if (!rules.has(arr[0].type) || !rules.get(arr[0].type).isLeaf) {
      consolidate(arr[0].content);
    }
  }
};

const populateTOC = ast => {
  let tocNode;
  for (const node of ast) {
    if (node.type === "toc") { tocNode = node; break }
  }
  if (!tocNode) { return }
  const start = tocNode.attrs.start;
  const end = tocNode.attrs.end;
  for (const node of ast) {
    if (node.type === "heading") {
      const level = node.attrs.level;
      if (start <= level && level <= end) {
        const tocEntry = [];
        let str = "";
        for (const range of node.content) { str += range.text; }
        tocEntry.push(str);
        tocEntry.push(level);
        tocEntry.push(0); // page number unknown
        tocEntry.push(0); // element number unknown
        tocNode.attrs.body.push(tocEntry);
      }
    }
  }
};

const metadataRegEx = /^---+\n((?:[A-Za-z0-9][A-Za-z0-9 _-]*:[^\n]+\n(?:[ \t]+[^\n]+\n)*)+)---+\n/;
const metadataItemRegEx = /^[A-Za-z0-9][A-Za-z0-9 _-]*:[^\n]+\n(?:[ \t]+[^\n]+\n)*/;
const hurmetMetadataNames = ["decimalFormat", "dateFormat", "fontSize",
  "pageSize", "saveDate"];

const parseMetadata = str => {
  const metadata = {};
  let capture = str.match(metadataItemRegEx);
  while (capture) {
    const item = capture[0].split(":");
    const key = item[0].trim().replace(/ /g, "");
    if (hurmetMetadataNames.includes(key)) {
      const value = item[1].slice(0, -1).trim().replace(/ *\n[ \t]*/g, " ");
      metadata[key] = value;
    }
    str = str.slice(capture[0].length);
    capture = str.match(metadataItemRegEx);
  }
  return metadata
};

const dateMessageRegEx = /^date:([^\n]+)\nmessage:([^\n]+)\n/;

const inlineMd2ast = md => {
  const state = { inline: true, _defs: {}, prevCapture: "", inList: false, inHtml: false };
  const ast = parse(md, state);
  if (Array.isArray(ast) && ast.length > 0 && ast[0].type === "null") {
    ast.shift();
  }
  consolidate(ast);
  return ast
};

const md2ast = (md, inHtml = false) => {
  // First, check for a metadata preamble
  let metadata = false;
  if (metadataRegEx.test(md)) {
    const match = metadataRegEx.exec(md);
    metadata = parseMetadata(match[1]);
    md = md.slice(match[0].length);
  }

  // Second, get all the link reference definitions
  const state = {
    inline: false,
    inList: false,
    _defs: {},
    footnotes: [],
    prevCapture: "",
    inHtml
  };
  const defRegEx = /\n *\[([^\]\n]+)\]: *([^\n]*) *(?:\n\{([^\n}]*)\})?(?=\n)/gm;
  const footnoteDefRegEx = /\n *\[\^\d+\]: *([^\n]*)(?=\n)/gm;
  let capture;
  while ((capture = defRegEx.exec(md)) !== null) {
    const def = capture[1].replace(/\s+/g, " ");
    const target = capture[2].trim();
    const directives = capture[3] || "";

    const attrs = isNotAnInteger(def) ? { alt: def } : {};
    if (directives) {
      const matchClass = CLASS_R.exec(directives);
      const matchWidth = WIDTH_R.exec(directives);
      const matchAlt = ALT_R.exec(directives);
      const matchID = ID_R.exec(directives);
      if (matchClass) { attrs.class = matchClass[1]; }
      if (matchWidth) { attrs.width = matchWidth[1]; }
      if (matchAlt)   { attrs.alt = matchAlt[1]; }
      if (matchID)    { attrs.id = matchID[1]; }
    }
    state._defs[def] = { target, attrs };
  }

  // Next, get all the footnote definitions
  capture = null;
  while ((capture = footnoteDefRegEx.exec(md)) !== null) {
    state.footnotes.push(capture[1].trim());
  }

  // Find out if there are any snapshots.
  let snapshotStrings = [];
  let gotSnapshot = false;
  if (metadata) {
    snapshotStrings = md.split("<!--SNAPSHOT-->\n");
    if (snapshotStrings.length > 1) {
      gotSnapshot = true;
      md = snapshotStrings.shift();
    }
  }

  // Find out if there are any fallbacks for fetched files
  let fallbackStrings = [];
  if (metadata) {
    fallbackStrings = md.split("<!--FALLBACKS-->\n");
    if (fallbackStrings.length > 1) {
      md = fallbackStrings.shift();
    } else {
      fallbackStrings = null;
    }
  }

  // Proceed to parse the document.
  const ast = parse(md, state);
  if (Array.isArray(ast) && ast.length > 0 && ast[0].type === "null") {
    ast.shift();
  }
  consolidate(ast);
  populateTOC(ast);
  if (metadata) {
    if (fallbackStrings) {
      metadata.fallbacks = JSON.parse(fallbackStrings.pop().trim());
    }
    if (gotSnapshot) {
      const snapshots = [];
      for (const str of snapshotStrings) {
        const capture = dateMessageRegEx.exec(str);
        snapshots.push({
          date: capture[1] ? Date.parse(capture[1].trim()) : undefined,
          message: capture[2] ? capture[2].trim() : undefined,
          content: capture ? str.slice(capture[0].length) : str
        });
      }
      metadata.snapshots = snapshots;
    }
    return { type: "doc", attrs: metadata, content: ast }
  } else {
    return ast
  }
};

const sanitizeUrl = function(url) {
  if (url == null) {
    return null;
  }
  try {
    const prot = decodeURIComponent(url)
      .replace(/[^A-Za-z0-9/:]/g, "")
      .toLowerCase();
    if (
      prot.indexOf("javascript:") === 0 ||
      prot.indexOf("vbscript:") === 0 ||
      prot.indexOf("data:") === 0
    ) {
      return null;
    }
  // eslint-disable-next-line no-unused-vars
  } catch (e) {
    // decodeURIComponent sometimes throws a URIError
    // See `decodeURIComponent('a%AFc');`
    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception
    return null;
  }
  return url;
};

const SANITIZE_TEXT_R = /[<>&"']/g;
const SANITIZE_TEXT_CODES = {
  "<": "&lt;",
  ">": "&gt;",
  "&": "&amp;",
  '"': "&quot;",
  "'": "&#x27;",
  "/": "&#x2F;",
  "`": "&#96;"
};
const sanitizeText = function(text /* : Attr */) {
  return String(text).replace(SANITIZE_TEXT_R, function(chr) {
    return SANITIZE_TEXT_CODES[chr];
  });
};

const htmlTag = (tagName, content, attributes = {}, isClosed = true) => {
  let attributeString = "";
  for (const attr in attributes) {
    if (Object.prototype.hasOwnProperty.call(attributes, attr)) {
      const attribute = attributes[attr];
    // Removes falsey attributes
      if (attribute) {
        const sanitizedAttribute = attr === "src"
          ? attribute.replace(/</g, "%3C").replace(/>/g, "%3E")
          : sanitizeText(attribute);
        attributeString += " " + sanitizeText(attr) + '="' + sanitizedAttribute + '"';
      }
    }
  }

  const unclosedTag = "<" + tagName + attributeString + ">";

  if (isClosed) {
    if (content.charAt(content.length - 1) === "\n") {
      content = content.slice(0, -1);
    }
    return unclosedTag + content + "</" + tagName + ">";
  } else {
    return unclosedTag;
  }
};

const tagName = {
  em: "em",
  strong: "strong",
  code: "code",
  strikethru: "del",
  subscript: "sub",
  superscript: "sup",
  underline: "u",
  highlight: "mark"
};

const quoteRegEx = /"/g;
const dataStr = str => {
  if (str.indexOf("'") === -1) {
    return `'${str}'`
  } else if (str.indexOf('"') === -1) {
    return `"${str}"`
  } else {
    return `"${str.replace(quoteRegEx, "&quot;")}"`
  }
};

const writeSVG = dwg => {
  let svg = '<svg xmlns="http://www.w3.org/2000/svg"';
  Object.keys(dwg.attrs).forEach(key => {
    svg += ` ${key}='${dwg.attrs[key]}'`;
  });
  svg += ">\n";
  dwg.children.forEach(el => {
    svg += `<${el.tag}`;
    Object.keys(el.attrs).forEach(attr => {
      if (el.tag !== "title") {
        svg += ` ${attr}='${el.attrs[attr]}'`;
      }
    });
    svg += ">\n";
    if (el.tag === "text") {
      el.children.forEach(child => {
        svg += '<tspan';
        if (child.attrs) {
          Object.keys(child.attrs).forEach(mark => {
            svg += ` ${mark}='${child.attrs[mark]}'`;
          });
        }
        svg += `>${sanitizeText(child.text)}</tspan>`;
      });
    } else if (el.tag === "defs") {
      svg += `<style>${sanitizeText(el.style)}</style>`;
    } else if (el.tag === "title") {
      svg += sanitizeText(el.attrs.text);
    }
    svg += `</${el.tag}>\n`;
  });
  svg += "</svg>";
  return svg
};

const functionOrModuleRegEx$1 = /^ *(?:function|module) /;

const writeTOC = node => {
  let toc = "<ul class='toc'>\n";
  for (const item of node.attrs.body) {
    let li = "  <li";
    if (item[1] > 0) { li += ` style= 'margin-left: ${String(1.5 * item[1])}em'`; }
    li += `><span>${item[0]}</span><span>0</span></li>\n`;
    toc += li;
  }
  return toc + "</ul>\n"
};

const headingText = content => {
  let str = "";
  for (const node of content) {
    if (node.type && node.type === "text") {
      str += node.text;
    }
  }
  return sanitizeText(str)
};

const headings = [];

const nodes$1 = {
  html(node) { return node.text },
  heading(node) {
    const text = headingText(node.content);
    let tag = "h" + node.attrs.level;
    tag = htmlTag(tag, text);
    if (!headings.includes(text)) {
    // Add an id so others can link to it.
      tag = tag.slice(0, 3) + " id='" + text.toLowerCase().replace(/,\(\)/g, "").replace(/\s+/g, '-') + "'" + tag.slice(3);
      headings.push(text);
    }
    return tag + "\n"
  },
  paragraph(node)  { return htmlTag("p", ast2html(node.content)) + "\n" },
  blockquote(node) { return htmlTag("blockquote", ast2html(node.content)) },
  code_block(node) {
    return htmlTag("pre", htmlTag("code", sanitizeText(node.content[0].text)))
  },
  hard_break(node) { return "<br>" },
  def(node)        { return "" },
  newline(node)    { return "\n" },
  horizontal_rule(node) { return "<hr>\n" },
  ordered_list(node) {
    const attributes = { class: node.attrs.class, start: node.attrs.order };
    return htmlTag("ol", ast2html(node.content), attributes) + "\n"
  },
  bullet_list(node)  { return htmlTag("ul", ast2html(node.content)) + "\n" },
  list_item(node)    { return htmlTag("li", ast2html(node.content)) + "\n" },
  tight_list_item(node) {
    return htmlTag("li", ast2html(node.content), { class: "tight" }) + "\n"
  },
  table(node) {
    const attributes = ("dtype" in node.attrs) && node.attrs.dtype === dt.SPREADSHEET
      ? {  class: node.attrs.class, dtype: dt.SPREADSHEET }
      : {  class: node.attrs.class };
    return htmlTag("table", ast2html(node.content), attributes) + "\n"
  },
  colGroup(node)     {
    return "\n" + htmlTag("colgroup", ast2html(node.content), node.attrs) + "\n"
  },
  col(node)          { return htmlTag("col", "", node.attrs[0], false) },
  table_row(node)    { return htmlTag("tr", ast2html(node.content)) + "\n" },
  table_header(node) {
    const attributes = {};
    if (node.attrs.colspan !== 1) { attributes.colspan = node.attrs.colspan; }
    if (node.attrs.rowspan !== 1) { attributes.rowspan = node.attrs.rowspan; }
    return htmlTag("th", ast2html(node.content), attributes) + "\n"
  },
  table_cell(node) {
    const attributes = {};
    if (node.attrs.colspan !== 1) { attributes.colspan = node.attrs.colspan; }
    if (node.attrs.rowspan !== 1) { attributes.rowspan = node.attrs.rowspan; }
    return htmlTag("td", ast2html(node.content), attributes)
  },
  spreadsheet_cell(node) {
    const display = node.attrs.display ? node.attrs.display : node.attrs.entry;
    return `<div class='hurmet-cell' data-entry=${dataStr(node.attrs.entry)}>` + display
           + '</div>'
  },
  link(node) {
    const attributes = { href: sanitizeUrl(node.attrs.href), title: node.attrs.title };
    return htmlTag("a", ast2html(node.content), attributes);
  },
  image(node) {
    const attributes = { src: node.attrs.src };
    if (node.attrs.alt)   { attributes.alt = node.attrs.alt; }
    if (node.attrs.class) { attributes.class = node.attrs.class; }
    if (node.attrs.id)    { attributes.id = node.attrs.id; }
    if (node.attrs.width) { attributes.width = node.attrs.width; }
    return htmlTag("img", "", attributes, false);
  },
  figure(node)     { return htmlTag("figure", ast2html(node.content)) + "\n" },
  figcaption(node) { return htmlTag("figcaption", ast2html(node.content)) },
  figimg(node) {
    const attributes = { src: node.attrs.src, class: "figimg" };
    if (node.attrs.alt)   { attributes.alt = node.attrs.alt; }
    if (node.attrs.id)    { attributes.id = node.attrs.id; }
    if (node.attrs.width) { attributes.width = node.attrs.width; }
    return htmlTag("img", "", attributes, false) + "\n";
  },
  footnote(node)   { return htmlTag("footnote", "") },
  calculation(node) {
    if (node.attrs.dtype && node.attrs.dtype === dt.DRAWING) {
      const svg = writeSVG(node.attrs.resultdisplay);
      const style = svg.indexOf('float="right"' > -1) ? " style='float: right;'" : "";
      return `<span class='hurmet-calc' data-entry=${dataStr(node.attrs.entry)}${style}>` +
        `${svg}</span>`
    } else if (node.attrs.dtype && node.attrs.dtype === dt.MODULE &&
               functionOrModuleRegEx$1.test(node.attrs.entry)) {
      return `<span class='hurmet-calc' data-entry=${dataStr(node.attrs.entry)}>`
        + `<span class='hmt-code'>${sanitizeText(node.attrs.entry)}</span></span>`
    } else {
      const tex = node.attrs.tex ? node.attrs.tex : parse$1(node.attrs.entry);
      // eslint-disable-next-line no-undef
      const mathML = globalThis.temml.renderToString(
        tex,
        { trust: true, wrap: "=", displayMode: (node.attrs.displayMode || false) }
      );
      const tag = node.attrs.displayMode ? "p" : "span";
      return `<${tag} class='hurmet-calc' data-entry=${dataStr(node.attrs.entry)}>` +
              `${mathML}</${tag}>`
    }
  },
  tex(node) {
    // eslint-disable-next-line no-undef
    const mathML = globalThis.temml.renderToString(
      node.attrs.tex,
      { trust: true, displayMode: (node.attrs.displayMode || false) }
    );
    const tag = node.attrs.displayMode ? "p" : "span";
    return `<${tag} class='hurmet-tex' data-entry=${dataStr(node.attrs.tex)}>` +
            `${mathML}</${tag}>`
  },
  indented(node) {
    return htmlTag("div", ast2html(node.content), { class: 'indented' }) + "\n"
  },
  boxed(node) {
    return htmlTag("div", ast2html(node.content), { class: 'boxed' }) + "\n"
  },
  centered(node) {
    return htmlTag("div", ast2html(node.content), { class: 'centered' }) + "\n"
  },
  right_justified(node) {
    return htmlTag("div", ast2html(node.content), { class: 'right_justified' }) + "\n"
  },
  hidden(node) {
    return htmlTag("div", ast2html(node.content), { class: 'hidden' }) + "\n"
  },
  epigraph(node) {
    return htmlTag("blockquote", ast2html(node.content), { class: 'epigraph' }) + "\n"
  },
  note(node) {
    return htmlTag("div", ast2html(node.content), { class: 'note' }) + "\n"
  },
  tip(node) {
    return htmlTag("div", ast2html(node.content), { class: 'tip' }) + "\n"
  },
  important(node) {
    return htmlTag("div", ast2html(node.content), { class: 'important' }) + "\n"
  },
  warning(node) {
    return htmlTag("div", ast2html(node.content), { class: 'warning' }) + "\n"
  },
  header(node)   {
    return htmlTag("header", ast2html(node.content)) + "\n"
  },
  toc(node)      { return writeTOC(node) },
  comment(node)  {
    return htmlTag("aside", ast2html(node.content), { class: 'comment' }) + "\n"
  },
  dt(node)    {
    let text = ast2html(node.content);
    let tag = htmlTag("dt", text);
    // Add id so others can link to it.
    const pos = text.indexOf("(");
    if (pos > -1) { text = text.slice(0, pos).replace("_", "-"); }
    tag = tag.slice(0, 3) + " id='" + text.toLowerCase().replace(/\s+/g, '-') + "'" + tag.slice(3);
    return tag + "\n"
  },
  dd(node)    { return htmlTag("dd", ast2html(node.content)) + "\n" },
  text(node) {
    const text = sanitizeText(node.text);
    if (!node.marks) {
      return text
    } else {
      let span = text;
      for (const mark of node.marks) {
        if (mark.type === "link") {
          let tag = `<a href='${mark.attrs.href}'`;
          if (mark.attrs.title) { tag += ` title='${mark.attrs.title}''`; }
          span = tag + ">" + span + "</a>";
        } else {
          const tag = tagName[mark.type];
          span = `<${tag}>${span}</${tag}>`;
        }
      }
      return span
    }
  }
};

const getFootnotes = (ast, footnotes) => {
  if (Array.isArray(ast)) {
    for (let i = 0; i < ast.length; i++) {
      getFootnotes(ast[i], footnotes);
    }
  } else if (ast && ast.type === "footnote") {
    footnotes.push(ast.content);
  // eslint-disable-next-line no-prototype-builtins
  } else if (ast.hasOwnProperty("content")) {
    for (let j = 0; j < ast.content.length; j++) {
      getFootnotes(ast.content[j], footnotes);
    }
  }
};

const ast2html = ast => {
  // Return HTML.
  let html = "";
  if (Array.isArray(ast)) {
    for (let i = 0; i < ast.length; i++) {
      html += ast2html(ast[i]);
    }
  } else if (ast && ast.type === "doc") {
    html += ast2html(ast.content);
  } else if (ast && ast.type !== "null") {
    html += nodes$1[ast.type](ast);
  }
  return html
};

const ast2text = ast => {
  let text = "";
  if (Array.isArray(ast)) {
    for (let i = 0; i < ast.length; i++) {
      text += ast2text(ast[i]);
    }
  } else if (typeof ast === "object" && "content" in ast) {
    for (let i = 0; i < ast.content.length; i++) {
      text += ast2text(ast.content[i]);
    }
  } else if ((ast && ast.type === "text")) {
    text += ast.text;
  } else if (ast && ast.type === "hard_break") {
    text += "\n";
  } else if (ast && ast.type !== "null") {
    text += "";
  }
  return text
};

const md2text = md => {
  // Get the text content of some inlne Markdown
  const ast = md2ast(md, false);
  return ast2text(ast)
};

const md2html = (md, inHtml = false) => {
  const ast = md2ast(md, inHtml);
  let html = ast2html(ast);

  // Write the footnotes, if any.
  const footnotes = [];
  getFootnotes(ast, footnotes);
  if (footnotes.length > 0) {
    html += "\n<hr>\n<ol>\n";
    for (const footnote of footnotes) {
      html += "<li><p>" + ast2html(footnote) + "</p></li>\n";
    }
    html += "</ol>\n";
  }
  return html
};

// Items related to pagination and Table of Contents

const headsRegEx = /^H[1-6]$/;
const levelRegEx = /(\d+)(?:[^\d]+(\d+))?/;
const forToC = 0;
const forPrint = 1;

const bottomOf = element => {
  let bottom = element.getBoundingClientRect().bottom;
  const images = element.getElementsByTagName("img");
  for (let i = 0; i < images.length; i++) {
    bottom = Math.max(bottom, images[i].getBoundingClientRect().bottom);
  }
  const svgs = element.getElementsByTagName("svg");
  for (let i = 0; i < svgs.length; i++) {
    bottom = Math.max(bottom, svgs[i].getBoundingClientRect().bottom);
  }
  return bottom
};

const findTOC = doc => {
  let tocNode = undefined;
  let nodePos = 0;
  doc.nodesBetween(0, doc.content.size, function(node, pos) {
    if (node.type.name === "toc") {
      tocNode = node;
      nodePos = pos;
    }
  });
  return [tocNode, nodePos]
};

const tocLevels = (entry, attrs) => {
  // Determine the start and end heading levels
  const parts = entry.match(levelRegEx);
  attrs.tocStartLevel = Number(parts[1]);
  attrs.tocEndLevel = Number(parts[2] ? parts[2] : attrs.tocStartLevel);
};

const footnoteContents = textNodes => {
  let text = "";
  let innerHTML = "";
  for (const node of textNodes) {
    text += node.text;
    let span = sanitizeText(node.text);
    for (const mark of node.marks) {
      const tag = tagName[mark.type.name];
      span = `<${tag}>${span}</${tag}>`;
    }
    innerHTML += span;
  }
  return { text, innerHTML }
};

const renderToC = (tocArray, ul) => {
  // Called by schema.js. Renders a Table of Contents.
  ul.innerHTML = "";
  ul.className = "toc";
  for (const item of tocArray) {
    const li = document.createElement("li");
    if (item[1] > 0) { li.style.marginLeft = String(1.5 * item[1]) + "em"; }
    const title = document.createElement("span");
    title.textContent = item[0].trim();
    li.appendChild(title);
    const pageNum = document.createElement("span");
    pageNum.textContent = String(item[2]).trim();
    li.appendChild(pageNum);
    ul.appendChild(li);
  }
};

const getDraftTocArray = (doc, attrs) => {
  const tocArray = [];
  doc.nodesBetween(0, doc.content.size, function(node, pos) {
    if (node.type.name === "heading" && attrs.tocStartLevel <= node.attrs.level
                                     && node.attrs.level <= attrs.tocEndLevel) {
      tocArray.push([node.textContent, node.attrs.level, -1]);
    }
  });
  return tocArray
};

const numHeads = (fragment, attrs) => {
  if (attrs.tocEndLevel === 0) { return 0 }
  let numHeadings = 0;
  for (let i = attrs.tocStartLevel; i <= attrs.tocEndLevel; i++) {
    const headings = fragment.getElementsByTagName("H" + String(i));
    numHeadings += headings.length;
  }
  return numHeadings
};

// Check footnote height
const getElementFootnoteData = (element, attrs, ctx ) => {
  // Check for footnote(s) in the element
  attrs.ftNote.numFtNotesInElem = 0;
  attrs.ftNote.elemNotesHeight = 0;
  const footnoteNodeList = element.querySelectorAll("footnote");
  if (footnoteNodeList.length > 0) {
    if (attrs.ftNote.end === -1) {
      // The current page has no previous footnotes.
      attrs.ftNote.elemNotesHeight += attrs.ftNote.hrHeight;  // For the <hr>
      attrs.ftNote.end = attrs.ftNote.start - 1;
    }
    for (let i = attrs.ftNote.totalNum;
             i < attrs.ftNote.totalNum + footnoteNodeList.length; i++) {
      const text = attrs.footnotes[i].text;
      // A footnote has 620 px available width. We'll use 615 to allow for text styles.
      const numLines = Math.ceil(ctx.measureText(text).width / 615);
      attrs.ftNote.elemNotesHeight += (numLines * attrs.ftNote.lineBoxHeight) +
                                       attrs.ftNote.botMargin;
      attrs.ftNote.numFtNotesInElem += 1;
    }
  }
};

const isOrphan = (nextElement, attrs) => {
  // Is nextElement an orphan?
  if (!nextElement) { return false }
  const rect = nextElement.getBoundingClientRect();
  if (attrs.pageHeight - attrs.headerHeight - attrs.ftNote.pageNotesHeight -
      attrs.minElemHeight - attrs.tocAdjustment <  rect.top - attrs.pageTop) {
    return true
  }
  if (nextElement.tagName === "DIV" && nextElement.className === "tableWrapper") {
    if (attrs.pageHeight - attrs.headerHeight - attrs.ftNote.pageNotesHeight -
      attrs.tocAdjustment < rect.bottom - attrs.pageTop) {
      return true
    }
  }

  let imageBottom = rect.top;
  const images = nextElement.getElementsByTagName("img");
  if (images.length > 0) {
    imageBottom = images[0].getBoundingClientRect().bottom;
  }
  const svgs = nextElement.getElementsByTagName("svg");
  if (svgs.length > 0) {
    imageBottom = Math.max(imageBottom, svgs[0].getBoundingClientRect().bottom);
  }
  return (attrs.pageHeight - attrs.headerHeight - attrs.ftNote.pageNotesHeight -
          attrs.tocAdjustment < imageBottom - attrs.pageTop)
};

const populatePage = (startElement, endElement, header, destination, attrs) => {
  // Create a page in `print-div` and populate it with elements.
  const page = document.createDocumentFragment();
  if (header && attrs.pageNum > 0) {
    const printHeader = header.cloneNode(true);
    printHeader.style.breakBefore = "page";
    page.append(printHeader);
  }
  // Create a body div
  const printBody = document.createElement("div");
  printBody.className = "print-body";
  if (!(header && attrs.pageNum > 0)) {
    printBody.style.breakBefore = "page";
  }

  // Define the appropriate range of elements and append a copy of the range.
  const range = new Range();

  if (attrs.pageTopChild === -1 || (attrs.pageTopChild === 0 && attrs.pageTopOffset === 0)) {
    range.setStartBefore(startElement);
  } else {
    range.setStart(startElement.childNodes[attrs.pageTopChild], attrs.pageTopOffset);
  }
  if (attrs.pageBottomChild === -1) {
    range.setEndAfter(endElement);
  } else {
    range.setEnd(endElement.childNodes[attrs.pageBottomChild], attrs.pageBottomOffset);
  }

  printBody.appendChild(range.cloneContents());
  if (attrs.listIndex >= 0) {
    // The page break occurred in the middle of an ordered list. Fix the start.
    const lists = printBody.getElementsByTagName("OL");
    lists[0].setAttribute("start", String(attrs.listIndex + 2));
  }
  page.appendChild(printBody);

  // Update table of contents array
  const numHeadingsInThisPage = numHeads(printBody, attrs);
  if (numHeadingsInThisPage > 0) {
    let j = 0;
    for (let i = 0; i < attrs.tocArray.length; i++) {
      if (attrs.tocArray[i][2] === -1) { j = i; break }
    }
    for (let i = 0; i < numHeadingsInThisPage; i++) {
      attrs.tocArray[j][2] = attrs.pageNum;
      j += 1;
    }
  }

  if (attrs.ftNote.end >= 0) {
    // Write footnotes at the bottom of the page.
    const bodyHeight = endElement.getBoundingClientRect().bottom - attrs.pageTop;
    const gap = attrs.pageHeight - attrs.headerHeight - bodyHeight -
                attrs.ftNote.pageNotesHeight;
    if (gap > 0) {
      const spacer = document.createElement("div");
      spacer.style.height = (gap - 2) + "px";
      page.append(spacer);
    }
    page.append(document.createElement("hr"));
    const ol = document.createElement("ol");
    if (attrs.ftNote.start > 0) {
      ol.setAttribute("start", String(attrs.ftNote.start + 1));
    }
    for (let j = attrs.ftNote.start; j <= attrs.ftNote.end; j++) {
      const graf = document.createElement("p");
      graf.innerHTML = attrs.footnotes[j].innerHTML;
      const li = document.createElement("li");
      li.appendChild(graf);
      ol.appendChild(li);
    }
    page.append(ol);
  }
  // Append the page
  destination.append(page);

  // Check if the ending page break occcurred in the middle of an ordered list
  attrs.listIndex = (endElement.tagName === "LI" && endElement.parentElement.tagName === "OL")
    ? [...endElement.parentElement.children].indexOf(endElement)
    : -1;
  return
};

const turnThePage = (topElement, attrs, editor) => {
  // Set some values for the next page.
  attrs.headerHeight = attrs.stdHdrHeight;
  attrs.ftNote.pageNotesHeight = 0;
  attrs.ftNote.start = attrs.ftNote.totalNum;
  attrs.ftNote.end = -1;
  attrs.pageNum += 1;
  if (topElement) {
    if (attrs.pageBottomChild >= 0 && attrs.pageBottomOffset > 0) {
      const range = new Range();
      const textNode = topElement.childNodes[attrs.pageBottomChild];
      range.setStart(textNode, attrs.pageBottomOffset);
      range.setEnd(textNode, attrs.pageBottomOffset + 1);
      attrs.pageTop = range.getBoundingClientRect().top;
      attrs.topMargin = 0;
    } else {
      attrs.pageTop = topElement.getBoundingClientRect().top;
      const computedStyle = window.getComputedStyle(topElement);
      attrs.topMargin = computedStyle.marginTop;
    }
  }  else {
    attrs.pageTop = editor.getBoundingClientRect().bottom;
  }
  /*attrs.pageTop = topElement
    ? topElement.getBoundingClientRect().top
    : editor.getBoundingClientRect().bottom */
  attrs.pageTopChild = attrs.pageBottomChild;
  attrs.pageTopOffset = attrs.pageBottomOffset;
  attrs.pageBottomChild = -1;
  attrs.pageBottomOffset = 0;
  return [topElement, null]
};

function paginate(view, tocSchema, purpose, tocStartLevel, tocEndLevel) {

  // This closed function is recursive. It will work thru the entire doc.
  function processChildren(element) {
    const children = element.children;
    for (let i = 0; i < children.length; i++) {
      const child = children[i];
      const bottom = bottomOf(child);
      attrs.tocAdjustment = 0;
      if (mustAdjustToC && attrs.pageTop <= attrs.tocTop && attrs.tocTop < bottom) {
        attrs.tocAdjustment = deltaToC;
      }
      const rect = child.getBoundingClientRect();
      // Get the next element in the doc
      let el = child;
      let nextElement = el.nextElementSibling;
      while (nextElement === null && el.className !== "editor") {
        el = el.parentElement;
        nextElement = el.nextElementSibling;
      }
      // Find out if child contains any footnotes.
      getElementFootnoteData(child, attrs, ctx);

      if (child.tagName === "H1" && rect.top - attrs.pageTop > 0.75 * attrs.pageHeight) {
        // Prevent an H1 heading near the bottom of the page. Start a new page.
        populatePage(startElement, endElement, header, destination, attrs)
        ;[startElement, endElement] = turnThePage(child, attrs, editor);

      } else if (headsRegEx.test(child.tagName) && isOrphan(nextElement, attrs)) {
        // Prevent a heading directly above an orphan. Start a new page.
        populatePage(startElement, endElement, header, destination, attrs)
        ;[startElement, endElement] = turnThePage(child, attrs, editor);

      } else if ((child.tagName === "OL" || child.tagName === "UL") &&
                  rect.botton - attrs.pageTop < 32) {
        // Prevent a list orphan. Insist on more than one item on a page.
        populatePage(startElement, endElement, header, destination, attrs)
        ;[startElement, endElement] = turnThePage(child, attrs, editor);

      } else if (attrs.pageHeight - attrs.headerHeight - attrs.ftNote.pageNotesHeight -
                 attrs.ftNote.elemNotesHeight >= bottom + attrs.tocAdjustment -
                 attrs.pageTop) {
        // Add this element to the printed page.
        endElement = child;
        attrs.ftNote.pageNotesHeight += attrs.ftNote.elemNotesHeight;
        attrs.ftNote.totalNum += attrs.ftNote.numFtNotesInElem;
        attrs.ftNote.end += attrs.ftNote.numFtNotesInElem;

      } else if ((child.tagName !== "P" && child.tagName !== "PRE") &&
        !(child.tagName === "DIV" && child.className === "tableWrapper")) {
        // Examime the children of this element. Maybe some of them fit onto the page.
        processChildren(child); // A recursive call.

      } else if ((child.tagName === "P" || child.tagName === "PRE") && rect.height > 64) {
        // We may break in the middle of a long paragraph.
        const elem = child.tagName === "PRE" ? child.childNodes[0] : child;
        const yMax = attrs.pageTop + attrs.pageHeight - attrs.headerHeight -
                     attrs.ftNote.pageNotesHeight - attrs.ftNote.elemNotesHeight -
                     attrs.tocAdjustment;
        const [childIndex, offset] = findParagraphOverflowPoint(elem, yMax);
        if (childIndex === -1 || (childIndex === 0 && offset === 0)) {
          // Put the entire paragraph onto the next page
          populatePage(startElement, endElement, header, destination, attrs)
          ;[startElement, endElement] = turnThePage(child, attrs, editor);
        } else {
          // Split the paragraph
          attrs.pageBottomChild = childIndex;
          attrs.pageBottomOffset = offset;
          populatePage(startElement, child, header, destination, attrs)
          ;[startElement, endElement] = turnThePage(child, attrs, editor);
        }

      } else {
        // Wrap up the current page and start a new page.
        populatePage(startElement, endElement, header, destination, attrs)
        ;[startElement, endElement] = turnThePage(child, attrs, editor);
      }
    }
  }

  // That completes the closed function. Now proceed to paginate the document.
  const doc = view.state.doc;
  const [editor] = document.getElementsByClassName("ProseMirror-setup");
  let header = null;
  // Create an attrs object to hold several values.
  // Otherwise, the populatePage() function would have to pass ~15 parameters.
  const attrs = {
    pageNum: 0,
    pageTop: 0,
    pageHeight: 0,
    minElemHeight: 3.2 * doc.attrs.fontSize,
    stdHdrHeight: 0,
    headerHeight: 0,
    tocArray: null,
    tocStartLevel: tocStartLevel,
    tocEndLevel: tocEndLevel,
    tocAdjustment: 0,
    ftNote: { totalNum: 0, start: 0, end: -1, pageNotesHeight: 0 },
    footNotes: [],
    listIndex: -1,
    pageTopChild: -1,
    pageTopOffset: 0,
    pageBottomChild: -1,
    pageBottomOffset: 0
  };

  // Collect info about the Table of Contents, if any.
  let mustAdjustToC = false;
  let deltaToC = 0;
  const [tocNode, nodePos] = findTOC(doc);
  if (tocStartLevel || tocNode) {
    if (tocNode && !tocStartLevel) {
      attrs.tocStartLevel = tocNode.attrs.start;
      attrs.tocEndLevel = tocNode.attrs.end;
    }
    attrs.tocArray = getDraftTocArray(doc, attrs);
    if ((!tocNode) || tocNode.attrs.body.length !== attrs.tocArray.length) {
      // Get a corrected height of the Table of Contents
      mustAdjustToC = true;
      const tocElem = editor.getElementsByClassName("toc");
      if (tocElem.length > 0) { attrs.tocTop = tocElem[0].getBoundingClientRect().top; }
      // How much taller will the revised ToC be than the existing ToC?
      const deltaPerLine = doc.attrs.fontSize === 10 ? 16 : 19.195;
      if (tocNode) {
        deltaToC = (attrs.tocArray.length - tocNode.attrs.body.length) * deltaPerLine;
      } else {
        const tocMargin = doc.attrs.fontSize === 10 ? 20 : 24;
        deltaToC = attrs.tocArray.length * deltaPerLine + tocMargin;
      }
    }
  }

  // Note: 1 inch = 96 px & 16 mm margins = 121 px
  attrs.pageHeight = (doc.attrs.pageSize === "letter" ? 11 * 96 : 297 / 25.4 * 96) - 121;
  attrs.pageTop = editor.children[0].getBoundingClientRect().top;
  const destination = document.getElementById("print-div");
  destination.innerHTML = "";
  let startElement = editor.children[0];
  let endElement = null;
  attrs.pageNum = 0;

  // Get info about the print header, if any.
  if (doc.nodeAt(0).type.name === "header") {
    header = document.getElementsByTagName("header")[0].children[0].children[0].cloneNode(true);
    header.classList.add("header");
    header.innerHTML = header.innerHTML.replace(
      "$PAGE",
      '&nbsp;<span class="page-display"></span>'
    );
    const origHeader = document.getElementsByTagName("header")[0];
    const headerRect = origHeader.getBoundingClientRect();
    attrs.stdHdrHeight = headerRect.bottom - headerRect.top;
  }

  // Spin up a canvas for measurement of footnote width
  const measurementCanvas = document.createElement('canvas');
  const ctx =  measurementCanvas.getContext('2d');
  ctx.font = `${String(doc.attrs.fontSize)}pt Calibri, san-serif`;
  attrs.ftNote.hrHeight = doc.attrs.fontSize === 12 ? 33 : 29;
  attrs.ftNote.lineBoxHeight = doc.attrs.fontSize === 12 ? 19.2 : 16;
  attrs.ftNote.botMargin = doc.attrs.fontSize === 12 ? 16 : 13.333;

  // Get the content of each footnote
  doc.nodesBetween(0, doc.content.size, function(node, pos) {
    if (node.type.name === "footnote") {
      attrs.footnotes.push(footnoteContents(node.content.content));
    }
  });

  // Start the pagination with a call to a recursive function.
  processChildren(editor);

  // Create the final page.
  populatePage(startElement, editor.lastChild, header, destination, attrs);

  // Update the Table of Contents in the document.
  if (attrs.tocArray && purpose === forPrint) {
    const tocAttrs = {
      start: tocNode.attrs.start,
      end: tocNode.attrs.end,
      body: attrs.tocArray
    };
    const tr = view.state.tr;
    tr.replaceWith(nodePos, nodePos + 1, tocSchema.createAndFill(tocAttrs));
    view.dispatch(tr);
    // Copy the editor ToC to the print-div
    const editorToC = editor.getElementsByClassName("toc")[0];
    const printToC = destination.getElementsByClassName("toc")[0];
    printToC.innerHTML = editorToC.innerHTML;
  }
  return attrs.tocArray
}


const binarySearchForOverflow = (textNode, yMax) => {
  // Do a binary search to find the approximate point of overflow.
  let rngStart = 0;
  let rngEnd = textNode.length;
  let offset = Math.floor(textNode.length / 2);
  const topRange = new Range();
  topRange.setStart(textNode, 0);
  const bottomRange = new Range;
  bottomRange.setEnd(textNode, textNode.length);
  let topRect;
  let bottomRect;
  while (rngEnd - rngStart > 2) {
    topRange.setStart(textNode, rngStart);
    topRange.setEnd(textNode, rngStart + offset);
    topRect = topRange.getBoundingClientRect();
    if (topRect.bottom < yMax) {
      if (yMax - topRect.bottom < 40) {
        // We're close to the break. Shift to linear search.
        return rngStart + offset
      }
      rngStart = rngStart + offset;
      offset = Math.floor((rngEnd - rngStart) / 2);
    } else {
      bottomRange.setStart(textNode, rngStart + offset);
      bottomRange.setEnd(textNode, rngEnd);
      bottomRect = bottomRange.getBoundingClientRect();
      if (bottomRect.top > yMax) {
        rngEnd = rngStart + offset;
        offset = Math.floor((rngEnd - rngStart) / 2);
      } else {
        // The currenct index occurs in the overlap of topRect and bottomRect.
        // Subtract 280 to reliably get to a space in the previous line.
        return Math.max(rngStart + offset - 280, 0)
      }
    }
  }
  return rngStart + offset
};

// TODO: Include hyphens
const nonBreak = /^[\S\u202F\u00A0]$/;

const linearSearchForOverflow = (textNode, yMax, offset) => {
  // `offset` is near the overflow point.
  // Do a linear search to find the exact point.
  const str = textNode.wholeText;
  let char = "";
  const range = new Range();
  range.setStart(textNode, offset);
  let prevWordEnd = offset;
  let startIndex = 0;
  for (let i = offset; i < str.length; i++) {
    char = str.slice(i, i + 1);
    if (nonBreak.test(char)) {
      startIndex = i;
      prevWordEnd = i - 1;
      break
    }
  }
  for (let i = startIndex; i < str.length; i++) {
    char = str.slice(i, i + 1);
    if (!nonBreak.test(char)) {
      range.setEnd(textNode, i);
      if (range.getBoundingClientRect().bottom > yMax) {
        for (let j = prevWordEnd + 1; j < str.length; j++) {
          char = str.slice(j, j + 1);
          if (nonBreak.test(char)) {
            return j - 1
          }
        }
        return textNode.length
      }
      prevWordEnd = i - 1;
    }
  }
  return textNode.length
};

const unsplittableClasses = ["hurmet-calc", "hurmet-tex"];
const unsplittableTags = ["IMG", "FIGCAPTION", "BR", "FOOTNOTE"];

const findParagraphOverflowPoint = (paragraph, yMax) => {
  // Find the page break inside the <p> or <code>.
  const range = new Range();

  for (let i = 0; i < paragraph.childNodes.length; i++) {
    const grafChild = paragraph.childNodes[i];
    let rect;
    if (grafChild.nodeType === 3) {
      range.setStartBefore(grafChild);
      range.setEndAfter(grafChild);
      rect = range.getBoundingClientRect();
    } else {
      rect = grafChild.getBoundingClientRect();
    }

    if (rect.bottom < yMax) { continue }

    if (grafChild.nodeType === 3) {
      // The child node is a text node.
      let offset = binarySearchForOverflow(grafChild, yMax);
      offset = linearSearchForOverflow(grafChild, yMax, offset);
      return [i, offset]
    } else {
      // The child node is a tagged element. Find out if it can be split.
      if (unsplittableClasses.includes(grafChild.className) ||
          unsplittableTags.includes(grafChild.tagName)) {
        if (i === 0) {
          return [-1, 0]
        } else {
          return [i, 0]
        }
      }
      // The child node is a span. Find where to split it.
      // Note: ProseMirror does not nest spans more than one level deep.
      let offset = binarySearchForOverflow(grafChild.childNodes[0], yMax);
      offset = linearSearchForOverflow(grafChild.childNodes[0], yMax, offset);
      return [i, offset]
    }
  }
  return [-1, 0]
};

const renderSVG = dwg => {
  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  Object.keys(dwg.attrs).forEach(key => {
    if (key === "float") {
      svg.style.float = dwg.attrs.float;
    } else {
      svg.setAttribute(key, dwg.attrs[key]);
    }
  });
  dwg.children.forEach(el => {
    const node = document.createElementNS("http://www.w3.org/2000/svg", el.tag);
    Object.keys(el.attrs).forEach(attr => {
      if (el.tag === "title") {
        node.appendChild(document.createTextNode(el.attrs["text"]));
      } else {
        node.setAttribute(attr, el.attrs[attr]);
      }
    });
    if (el.tag === "text") {
      el.children.forEach(child => {
        const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        if (child.attrs) {
          Object.keys(child.attrs).forEach(mark => {
            tspan.setAttribute(mark, child.attrs[mark]);
          });
        }
        tspan.appendChild(document.createTextNode(child.text));
        node.appendChild(tspan);
      });
    } else if (el.tag === "defs") {
      const styleNode = document.createElementNS("http://www.w3.org/2000/svg", "style");
      styleNode.appendChild(document.createTextNode(el.style));
      node.appendChild(styleNode);
    }
    svg.appendChild(node);
  });
  return svg
};

function insertOneHurmetVar(hurmetVars, attrs, changedVars, decimalFormat) {
  // hurmetVars is a key:value store of variable names and attributes.
  // This function is called to insert an assignment into hurmetVars.
  const formatSpec = hurmetVars.format ? hurmetVars.format.value : "h15";

  if (!Array.isArray(attrs.name)) {
    // This is the typical case.
    hurmetVars[attrs.name] = attrs;
    if (changedVars) {
      changedVars.add(attrs.name);
    }

  } else if (attrs.value === null) {
    for (let i = 0; i < attrs.name.length; i++) {
      hurmetVars[attrs.name[i]] = { value: null };
    }

  } else if (isMatrix(attrs)) {
    // Assign to a matrix of names
    const isQuantity = Boolean(attrs.dtype & dt.QUANTITY);
    let resultDisplay = attrs.resultdisplay;
    resultDisplay = resultDisplay.replace(/\\(begin|end){[bp]matrix}/g, "").trim();
    const displays = resultDisplay.split(/&|\\\\/);
    if (attrs.dtype & dt.MATRIX) {
      // A 2 dimensional matrix.
      const dtype = attrs.dtype - dt.MATRIX;
      const numRows = isQuantity ? attrs.value.plain.length : attrs.value.length;
      const numCols = attrs.name.length / numRows;
      let iName = 0;
      for (let i = 0; i < numRows; i++) {
        for (let j = 0; j < numCols; j++) {
          const value = isQuantity
            ? { plain: attrs.value.plain[i][j], inBaseUnits: attrs.value.inBaseUnits[i][j] }
            : attrs.value[i][j];
          hurmetVars[attrs.name[i]] = {
            name: attrs.name[iName],
            value,
            resultdisplay: isQuantity
              ? parse$1(displays[iName].trim() + " '" + attrs.unit + "'")
              : displays[iName].trim(),
            expos: attrs.expos,
            unit: isQuantity ? attrs.unit : undefined,
            dtype
          };
          if (changedVars) { changedVars.add(attrs.name[i]); }
          iName += 1;
        }
      }
    } else {
      // Assign to a vector of names.
      const isColumn = Boolean(attrs.dtype & dt.COLUMNVECTOR);
      const dtype = attrs.dtype - (isColumn ? dt.COLUMNVECTOR : dt.ROWVECTOR);
      for (let i = 0; i < attrs.name.length; i++) {
        const value = isQuantity
          ? { plain: attrs.value.plain[i], inBaseUnits: attrs.value.inBaseUnits[i] }
          : attrs.value[i];
        hurmetVars[attrs.name[i]] = {
          name: attrs.name[i],
          value,
          resultdisplay: isQuantity
            ? parse$1(displays[i].trim() + " '" + attrs.unit + "'")
            : displays[i].trim(),
          expos: attrs.expos,
          unit: isQuantity ? attrs.unit : undefined,
          dtype
        };
        if (changedVars) { changedVars.add(attrs.name[i]); }
      }
    }

  // From this point forward, we're dealing with multiple assignment
  } else if (attrs.dtype & dt.MAP) {
    const unit = attrs.unit;
    const unitName = unit && unit.name ? unit.name : undefined;
    const dtype = attrs.dtype - dt.MAP;
    let i = 0;
    if (attrs.dtype & dt.QUANTITY) {
      for (const value of attrs.value.data.plain) {
        const result = {
          value: { plain: value },
          expos: attrs.expos,
          factor: attrs.factor,
          dtype
        };
        result.resultdisplay = format(value, formatSpec, decimalFormat);
        if (unitName) { result.resultdisplay += " " + unitTeXFromString(unitName); }
        hurmetVars[attrs.name[i]] = result;
        if (changedVars) { changedVars.add(attrs.name[i]); }
        i += 1;
      }
      i = 0;
      for (const value of attrs.value.data.inBaseUnits) {
        hurmetVars[attrs.name[i]].value.inBaseUnits = value;
        i += 1;
      }
    } else {
      for (const value of attrs.value.data) {
        const result = { value, expos: attrs.expos, factor: attrs.factor, dtype };
        result.resultdisplay = Rnl.isRational(value)
          ? format(value, formatSpec, decimalFormat)
          : String(value);
        if (unitName) { result.resultdisplay += " " + unitTeXFromString(unitName); }
        hurmetVars[attrs.name[i]] = result;
        if (changedVars) { changedVars.add(attrs.name[i]); }
        i += 1;
      }
    }
  } else if (attrs.dtype === dt.DATAFRAME) {
    const isSingleRow = attrs.value.data[0].length === 1;
    for (let i = 0; i < attrs.name.length; i++) {
      let dtype = attrs.value.dtype[i];
      let value = isSingleRow ? undefined : [];
      for (let j = 0; j < attrs.value.data[0].length; j++) {
        const datum = attrs.value.data[i][j];
        const val = (dtype & dt.RATIONAL) ? Rnl.fromString(datum) : datum;
        if (isSingleRow) {
          value = val;
        } else {
          value.push(val);
        }
      }
      if (!isSingleRow) { dtype += dt.COLUMNVECTOR; }
      const result = {
        value,
        unit: attrs.unit[attrs.value.units[i]],
        dtype
      };
      if ((dtype & dt.RATIONAL) && isSingleRow) {
        result.resultdisplay = parse$1(format(value));
        if (result.unit && result.unit.name) {
          result.resultdisplay += " " + parse$1(`'${result.unit.name}'`);
        }
      } else if (dtype & dt.RATIONAL) {
        result.resultdisplay = Matrix.display({ value, dtype }, formatSpec, decimalFormat)
            + parse$1(`'${attrs.value.units[i]}'`);
      } else {
        result.resultdisplay = parse$1(value);
      }
      if (attrs.value.units[i]) {
        result.value = { plain: result.value };
        const unit = attrs.unit[attrs.value.units[i]];
        result.value.inBaseUnits = isSingleRow
          ? Rnl.multiply(Rnl.add(result.value.plain, unit.gauge), unit.factor)
          : result.value.plain.map(e => Rnl.multiply(Rnl.add(e, unit.gauge), unit.factor));
        result.expos = unit.expos;
      }

      hurmetVars[attrs.name[i]] = result;
      if (changedVars) { changedVars.add(attrs.name[i]); }
    }
  } else if (attrs.dtype === dt.TUPLE) {
    let i = 0;
    for (const value of attrs.value.values()) {
      if (value.name) { value.name = attrs.name[i]; }
      hurmetVars[attrs.name[i]] = value;
      if (changedVars) { changedVars.add(attrs.name[i]); }
      i += 1;
    }
  } else if (attrs.dtype === dt.MODULE) {
    if (attrs.name.length !== attrs.value.length) {
      return errorOprnd("MULT_MIS")
    } else {
      let i = 0;
      for (const value of attrs.value.values()) {
        const result = clone(value);
        hurmetVars[attrs.name[i]] = result;
        if (changedVars) { changedVars.add(attrs.name[i]); }
        i += 1;
      }
    }
  } else ;
}

/*
 * This file deals with Hurmet maps, which are similar to hash maps.
 * In a map, every value is of the same data type and has the same unit-of-measure.
 */

const checkUnitEquality = (u1, u2) => {
  let x;
  let y;
  if (u1.expos && u2.expos) {
    x = u1.expos;
    y = u2.expos;
  } else {
    x = u1;
    y = u2;
  }
  if (Array.isArray(x)) {
    if (Array.isArray(y)) {
      if (x.length !== y.length) { return false }
      x.forEach((e, i) => { if (e !== y[i]) { return false } });
      return true
    } else {
      return false
    }
  } else {
    return x === y
  }
};

const append = (o1, o2, shape1, shape2) => {
  let map;
  let scalar;
  if (o1.dtype & dt.MAP) {
    if (shape2 !== "scalar") { return errorOprnd("BAD_APPEND", shape2) }
    map = o1;
    scalar = o2;
  } else {
    if (shape1 !== "scalar") { return errorOprnd("BAD_APPEND", shape1) }
    map = o2;
    scalar = o1;
  }
  if (!(map.dtype & scalar.dtype)) { errorOprnd("MAP_APPEND"); }
  if (!checkUnitEquality(map.unit, scalar.unit)) { errorOprnd("UNIT_APEND"); }
  map.value.set(scalar.name, scalar.value);
  return map
};

const convertFromBaseUnits = (data, gauge, factor) => {
  data = data.map(column => Rnl.isRational(column[0])
    ? column.map(e => Rnl.divide(e, factor))
    : column
  );
  if (!Rnl.isZero(gauge)) {
    data = data.map(column => Rnl.isRational(column[0])
      ? column.map(e => Rnl.subtract(e, gauge))
      : column
    );
  }
  return data
};

const convertToBaseUnits = (data, gauge, factor) => {
  if (!Rnl.isZero(gauge)) {
    data = data.map(column => Rnl.isRational(column[0])
      ? column.map(e => Rnl.add(e, gauge))
      : column
    );
  }
  data = data.map(column => Rnl.isRational(column[0])
    ? column.map(e => Rnl.multiply(e, factor))
    : column
  );
  return data
};

const range = (map, keys) => {
  let unit = clone(map.unit);
  const [rowList, columnList, iStart, iEnd] = identifyRange(map, keys);
  if (rowList.length === 0 && iStart === iEnd && columnList.length === 1) {
    // Return one value.
    const value = map.value.data[columnList[0]][iStart];
    return { value, unit, dtype: map.dtype - dt.MAP }

  } else if (columnList.length === 1) {
    // Return data from one column, in a column vector or a quantity
    const value = map.value.data[columnList[0]].slice(iStart, iEnd + 1);
    const dtype = columnList[0] === 0
      ? dt.COLUMNVECTOR + (typeof value[0] === "string" ? dt.STRING : map.dtype - dt.MAP)
      : map.dtype - dt.MAP + dt.COLUMNVECTOR;
    if (columnList[0] === -1) { unit = null; }
    return { value, unit, dtype }

  } else {
    // Return a map.
    const headings = [];
    const data = [];
    const columnMap = Object.create(null);
    const rowMap = rowList.length === 0 ? false : Object.create(null);
    for (let j = 0; j < columnList.length; j++) {
      headings.push(map.value.headings[columnList[j]]);
      columnMap[map.value.headings[j]] = j;
      if (rowList.length > 0) {
        const elements = [];
        for (let i = 0; i < rowList.length; i++) {
          const rowName = rowList[i];
          elements.push(map.value.data[columnList[j]][map.value.rowMap[rowName]]);
          rowMap[rowName] = i;
        }
        data.push(elements);
      } else {
        data.push(map.value.data[columnList[j]].slice(iStart, iEnd + 1));
      }
    }
    return {
      value: { data, headings, columnMap, rowMap },
      unit,
      dtype: map.dtype
    }
  }
};

const map = Object.freeze({
  append,
  convertFromBaseUnits,
  convertToBaseUnits,
  range
});

const endRegEx = /_end$/;
const alphaRegEx = /^[A-Z]$/;
const cellParts = /^([^\d]+)(\d+)?$/;
const intRegEx = /^\d+$/;

function propertyFromDotAccessor(parent, index, unitAware) {
  const property = Object.create(null);
  if (parent.dtype & dt.MAP) {
    return map.range(parent, [index], unitAware)

  } else if (parent.dtype & dt.DATAFRAME) {
    return DataFrame.range(parent, [index], unitAware)

  } else if (parent.dtype === dt.SPREADSHEET) {
    let key = index.value;
    if (endRegEx.test(key)) {
      // Return the cell at the bottom of a column
      key = key.slice(0, -4);
      if (!alphaRegEx.test(key)) { key = parent.columnMap[key]; }
      key = key + Object.keys(parent.rowMap).length;
      return fromAssignment(parent.value[key], unitAware)
    }
    if (key in parent.columnMap || alphaRegEx.test(key)) {
      // Return data from one column, in a column vector
      const colIndex = alphaRegEx.test(key) ? key : parent.columnMap[key];
      const v = [];
      let unit = null;
      let dtype = null;
      if (parent.value[colIndex + "1"].dtype & dt.RATIONAL) {
        for (let i = 1; i < parent.numRows; i++) {
          const cell = parent.value[colIndex + i];
          if (!(cell.dtype & dt.RATIONAL)) {
            return errorOprnd("NANEL", cell.name)
          }
          if (unitAware) {
            v.push(cell.value.inBaseUnits);
          } else {
            v.push(cell.value.plain);
          }
        }
        unit = unitAware
          ? parent.units[parent.unitMap[colIndex.codePointAt(0) - 65]]
          : allZeros;
        dtype = dt.RATIONAL + dt.COLUMNVECTOR;
      } else {
        for (let i = 1; i < parent.numRows; i++) {
          v.push(parent.value[colIndex + i].value);
        }
        dtype = parent.value[colIndex + "1"].dtype + dt.COLUMNVECTOR;
      }
      return { value: v, unit, dtype }
    } else {
      const parts = key.match(cellParts);
      const colIndex = parts[1];
      if (parts[2]) {
        return fromAssignment(parent.value[colIndex + parts[2]], unitAware)
      } else {
        return errorOprnd("BAD_SHT_KEY", key)
      }
    }

  } else if ((parent.dtype === dt.STRING || (parent.dtype & dt.ARRAY)) &&
    index.dtype === dt.RATIONAL) {
    const indexVal = Rnl.toNumber(index.value);
    property.value = parent.value.slice(indexVal - 1, indexVal);
    property.unit = parent.unit;
    property.dtype = parent.dtype;
    return property

  } else if ((parent.dtype === dt.STRING || (parent.dtype & dt.ARRAY)) &&
        index.dtype === dt.RANGE) {
    const start = index.value[0] - 1;
    const step = index.value[1];
    const end = (index.value[2] === "∞") ? parent.value.length : index.value[2];
    property.unit = parent.unit;
    property.dtype = parent.dtype;
    if (step === 1) {
      property.value = parent.value.slice(start, end);
    } else {
      property.value = [];
      for (let j = start; j < end; j += step) {
        property.value.push(parent.value[j]);
      }
    }
    return property

  } else if (parent.dtype === dt.MODULE) {
    // parent is a module and index has a value assigned to it.
    return fromAssignment(parent.value[index.value], unitAware)

  } else {
    return errorOprnd("NO_PROP", parent.name)
  }
}

const cellOprnd = (sheet, args, unitAware) => {
  if (args.length === 1) {
    let key = args[0].value;
    if (endRegEx.test(key)) {
      key = key.slice(0, 1) + Object.keys(sheet.rowMap).length;
    }
    return fromAssignment(parent.value[key], unitAware)
  }
  let cellName = "";
  const key0 = args[0].value;
  const key1 = args[1].value;
  if (sheet.columnMap[key0] || alphaRegEx.test(key0)) {
    cellName = sheet.columnMap[key0] ? sheet.columnMap[key0] : key0;
    if (sheet.rowMap[key1]) {
      cellName += sheet.rowMap[key1];
    } else if (intRegEx.test(key1)) {
      cellName += key1;
    } else ;
  } else if (sheet.columnMap[key1]  || alphaRegEx.test(key0)) {
    cellName = sheet.columnMap[key1] ? sheet.columnMap[key1] : key1;
    if (sheet.rowMap[key0]) {
      cellName += sheet.rowMap[key0];
    } else if (intRegEx.test(key0)) {
      cellName += key0;
    } else ;
  } else ;
  return fromAssignment(sheet.value[cellName], unitAware)
};

const display = (tuple, formatSpec = "h3", decimalFormat = "1,000,000.") => {
  if (tuple.size === 0) { return "" }
  let str = "\\begin{array}{c}";

  let haveUnits = false;
  for (const attrs of tuple.values()) {
    if (attrs.unit && attrs.unit.name) { haveUnits = true; break }
  }

  // Write the unit names
  if (haveUnits) {
    let rowTex = "";
    for (const attrs of tuple.values()) {
      if (attrs.unit && attrs.unit.name) {
        rowTex += unitTeXFromString(attrs.unit.name).replace("\\;\\, ", "");
      }
      rowTex += "&";
    }
    str += rowTex.slice(0, -1) + " \\\\ ";
    str += "\\hline ";
  }

  // Write the data
  let botRow = "";
  for (const attrs of tuple.values()) {
    botRow += format(attrs.value, formatSpec, decimalFormat) + " & ";
  }
  str += botRow.slice(0, -1);
  str += "\\end{array}";
  return str
};

const displayAlt = (tuple, formatSpec = "h3") => {
  if (tuple.size === 0) { return "" }
  let str = "``";

  let haveUnits = false;
  for (const attrs of tuple.values()) {
    if (attrs.unit && attrs.unit.name) { haveUnits = true; break }
  }

  // Write the unit names
  if (haveUnits) {
    let rowTex = "";
    for (const attrs of tuple.values()) {
      if (attrs.unit && attrs.unit.name) {
        rowTex += attrs.unit.name;
      }
      rowTex += "\t";
    }
    str += rowTex.slice(0, -1) + "\n";
  }

  // Write the data
  let botRow = "";
  for (const attrs of tuple.values()) {
    botRow += format(attrs.value, formatSpec, "100000.") + "\t";
  }
  str += botRow.slice(0, -1);
  return str + "``"
};

const Tuple = Object.freeze({
  display,
  displayAlt
});

// A result has been sent here from evaluate.js or updateCalculations.js.
// Format the result for display.

const numMisMatchError = _ => {
  const str = "Error. Mismatch in number of multiple assignment.";
  return [`\\textcolor{firebrick}{\\text{${str}}}`, str]
};
const testRegEx$1 = /^@{1,2}test /;
const compRegEx = /\u00a0([⩵≠><>≤≥∋∈∉∌⊂⊃⊄⊅]|==|in|!in|!=|=>|<=)$/;
const negatedComp = {
  "⩵": ["≠", "≠"],
  "==": ["≠", "≠"],
  "≠": ["==", "=="],
  ">": ["\\ngtr ", "!>"],
  "<": ["\\nless ", "!<"],
  "≤": ["\\nleq ", "!≤"],
  "≥": ["\\ngeq ", "!≥"],
  "∋": ["∌", "∌"],
  "∈": ["∉", "∉"],
  "⊂": ["⊄", "⊄"],
  "⊃": ["⊅", "⊅"],
  "∉": ["∈", "∈"],
  "∌": ["∋", "∋"],
  "⊄": ["⊂", "⊂"],
  "⊅": ["⊃", "⊃"],
  "in": ["∉", "∉"],
  "!in": ["in", "in"],
  "!=": ["==", "=="],
  "=>": ["\\ngeq ", "!≥"],
  "<=": ["\\ngeq ", "!≥"]
};

const formatResult = (stmt, result, formatSpec, formats, assert, isUnitAware) => {
  if (!result) { return stmt }
  const decimalFormat = formats.decimalFormat;

  if (result.dtype === dt.DRAWING) {
    stmt.resultdisplay = result.value;
    delete stmt.resultdisplay.temp;
    return stmt
  }

  const numNames = !stmt.name
    ? 0
    : !Array.isArray(stmt.name)
    ? 1
    : stmt.name.length;

  if (stmt.resulttemplate.indexOf("?") > -1 ||
      stmt.resulttemplate.indexOf("!") > -1 ||
      stmt.resulttemplate.indexOf("@") > -1 ||
      stmt.resulttemplate.indexOf("%") > -1) {
    stmt.value = result.value;
    let resultDisplay = "";
    let altResultDisplay = "";
    if (stmt.resulttemplate.indexOf("!") > -1) {
      // Suppress display of the result
      resultDisplay = "";
      altResultDisplay = "";
      return stmt

    } else if (result.dtype & dt.BOOLEAN && testRegEx$1.test(stmt.entry) &&
      compRegEx.test(stmt.rpn)) {
      if (testValue(result) === true) {
        resultDisplay = parse$1(stmt.entry.replace(testRegEx$1, "")) +
          ",\\text{ ok }✓";
        altResultDisplay = stmt.entry.replace(testRegEx$1, "") + ", ok ✓";
      } else {
        const op = compRegEx.exec(stmt.rpn)[0].slice(1);
        const negOp = negatedComp[op];
        if (assert) {
          const assertStr = assert.value.replace(/\.$/, "");
          const addendum = stmt.entry.replace(testRegEx$1, "").replace(op, negOp[0]);
          resultDisplay = "\\colorbox{Salmon}{" + assertStr + ", but $" +
              parse$1(addendum) + "$}";
          altResultDisplay = assertStr + ", but " +
              stmt.entry.replace(testRegEx$1, "").replace(op, negOp[1]);
        } else {
          resultDisplay = parse$1(stmt.entry.replace(testRegEx$1, "").replace(op, negOp[0])) +
              ",\\colorbox{Salmon}{ n.g.}";
          altResultDisplay = stmt.entry.replace(testRegEx$1, "").replace(op, negOp[1]) +
              ", n.g.";
        }
        // eslint-disable-next-line no-console
        console.log(altResultDisplay);
      }

    } else if (isMatrix(result)) {
      resultDisplay = Matrix.display((isUnitAware || result.value.plain)
          ? { value: result.value.plain, dtype: result.dtype }
          : result,
        formatSpec,
        decimalFormat
      );
      altResultDisplay = Matrix.displayAlt((isUnitAware || result.value.plain)
          ? { value: result.value.plain, dtype: result.dtype }
          : result,
        formatSpec,
        decimalFormat
      );

    } else if (result.dtype === dt.DATAFRAME) {
      if (numNames > 1 && numNames !== result.value.data.length) {
        [resultDisplay, altResultDisplay] = numMisMatchError();
      } else {
        const omitHeading = stmt.name && Array.isArray(stmt.name) && stmt.name.length > 1;
        resultDisplay = DataFrame.display(result.value, formatSpec,
                                          decimalFormat, omitHeading);
        altResultDisplay = DataFrame.displayAlt(result.value, formatSpec, omitHeading);
      }

    } else if (result.dtype & dt.MAP) {
      let localValue;
      if (isUnitAware || result.value.data.plain) {
        localValue = clone(result.value);
        localValue.data = result.value.data.plain;
      } else {
        localValue = result.value;
      }
      const omitHeading = stmt.name && Array.isArray(stmt.name) && stmt.name.length > 1;
      resultDisplay = DataFrame.display(localValue, formatSpec, decimalFormat, omitHeading);
      altResultDisplay = DataFrame.displayAlt(localValue, formatSpec,
                                              decimalFormat, omitHeading);

    } else if (result.dtype === dt.TUPLE) {
      if (numNames > 1 && numNames !== result.value.size) {
        [resultDisplay, altResultDisplay] = numMisMatchError();
      } else {
        resultDisplay = Tuple.display(result.value, formatSpec, decimalFormat);
        altResultDisplay = Tuple.displayAlt(result.value, formatSpec);
      }

    } else if (result.dtype & dt.STRING) {
      resultDisplay = "\\text{" + addTextEscapes(result.value) + "}";
      if (result.unit) {
        // This is a hack to return a color
        resultDisplay = `\\textcolor{${result.unit}}{${resultDisplay}}`;
      }
      altResultDisplay = result.value;

    } else if (result.dtype & dt.RICHTEXT) {
      resultDisplay = parse$1(result.value, formats, false);
      altResultDisplay = result.value;

    } else if (result.dtype & dt.BOOLEAN) {
      resultDisplay = "\\text{" + result.value + "}";
      altResultDisplay = String(result.value);

    } else if (result.dtype === dt.COMPLEX) {
      const z = result.value;
      [resultDisplay, altResultDisplay] = Cpx.display(z, formatSpec, decimalFormat);

    } else if (result.dtype === dt.DATE) {
      resultDisplay = formatDate(result.value, formats.dateFormat);
      if (resultDisplay.dtype && resultDisplay.dtype === dt.ERROR) {
        resultDisplay = "\textcolor{firebrick}{\\text{" + resultDisplay.value + "}}";
        altResultDisplay = resultDisplay.value;
      } else {
        altResultDisplay = resultDisplay.slice(26, -2);
      }

    } else if (result.value.plain) {
      resultDisplay = format(result.value.plain, formatSpec, decimalFormat);
      if (resultDisplay.dtype && resultDisplay.dtype === dt.ERROR) {
        resultDisplay = "\textcolor{firebrick}{\\text{" + resultDisplay.value + "}}";
        altResultDisplay = resultDisplay.value;
      } else {
        altResultDisplay = resultDisplay.replace(/{,}/g, ",").replace("\\", "");
      }

    } else if (Rnl.isRational(result.value)) {
      resultDisplay = format(result.value, formatSpec, decimalFormat);
      if (resultDisplay.dtype && resultDisplay.dtype === dt.ERROR) {
        resultDisplay = "\\textcolor{firebrick}{\\text{" + resultDisplay.value + "}}";
        altResultDisplay = resultDisplay.value;
      } else {
        altResultDisplay = resultDisplay.replace(/{,}/g, ",").replace("\\", "");
      }

    } else if (result.dtype === dt.IMAGE) {
      return stmt

    } else {
      resultDisplay = result.value;
      altResultDisplay = resultDisplay;

    }

    // Write the string to be plugged into echos of dependent nodes
    const resultCapture = /(\? *\??|@ *@?|%%?)/.exec(stmt.resulttemplate);
    stmt.resultdisplay = stmt.resulttemplate.slice(0, resultCapture.index) + resultDisplay +
      stmt.resulttemplate.slice(resultCapture.index + resultCapture[0].length);

    // Write the TeX for this node
    if (stmt.resulttemplate.indexOf("@") > -1) {
      stmt.tex = stmt.resultdisplay;
      stmt.displaySelector = stmt.altresulttemplate.indexOf("@@") > -1 ? "@@" : "@";
      if (!testRegEx$1.test(stmt.entry)) {
        const pos = stmt.entry.lastIndexOf(stmt.displaySelector);
        stmt.md = stmt.entry.slice(0, pos) + `〔${altResultDisplay}〕`
            + stmt.entry.slice(pos + stmt.displaySelector.length);
      }
      stmt.alt = stmt.altresulttemplate.replace(/@@?/, altResultDisplay);
    } else if (stmt.resulttemplate.indexOf("?") > -1) {
      let pos = stmt.tex.lastIndexOf("?");
      stmt.tex = stmt.tex.slice(0, pos).replace(/\? *$/, "") + resultDisplay + stmt.tex.slice(pos + 1);
      stmt.displaySelector = stmt.altresulttemplate.indexOf("??") > -1 ? "??" : "?";
      pos = stmt.alt.lastIndexOf(stmt.displaySelector);
      stmt.md = stmt.alt.slice(0, pos) + `〔${altResultDisplay}〕`
          + stmt.alt.slice(pos + stmt.displaySelector.length);
      stmt.alt = stmt.alt.slice(0, pos) + altResultDisplay
          + stmt.alt.slice(pos + stmt.displaySelector.length);
    } else if (stmt.resulttemplate.indexOf("%") > -1) {
      let pos = stmt.tex.lastIndexOf("%");
      stmt.tex = stmt.tex.slice(0, pos).replace(/% *$/, "") + resultDisplay + stmt.tex.slice(pos + 1);
      stmt.displaySelector = stmt.altresulttemplate.indexOf("%%") > -1 ? "%%" : "%";
      pos = stmt.alt.lastIndexOf(stmt.displaySelector);
      stmt.md = stmt.alt.slice(0, pos) + `〔${altResultDisplay}〕`
          + stmt.alt.slice(pos + stmt.displaySelector.length);
      stmt.alt = stmt.alt.slice(0, pos) + altResultDisplay
          + stmt.alt.slice(pos + stmt.displaySelector.length);
    }
  }
  return stmt
};

const testValue = oprnd => {
  if (isVector(oprnd)) {
    for (let i = 0; i < oprnd.value.length; i++) {
      if (!oprnd.value[i]) { return false }
    }
  } else if (isMatrix(oprnd)) {
    for (let i = 0; i < oprnd.value.length; i++) {
      for (let j = 0; j < oprnd.value[0].length; j++) {
        if (!oprnd.value[i][j]) { return false }
      }
    }
  } else if (oprnd.dtype & dt.MAP) {
    for (let j = 0; j < oprnd.value.data.length; j++) {
      for (let i = 0; i < oprnd.value.data[0].length; i++) {
        if (!oprnd.value.data[j][i]) { return false }
      }
    }
  } else {
    return oprnd.value
  }
  return true
};

/*
 *  This module receives a TeX template string and a object containing Hurmet variables.
 *  At each location where the template contains a variable, this module plugs in a TeX string
 *  of the variable's value, for display in the Hurmet blue echo..
 */

const varRegEx = /〖[^〗]*〗/;
const openParenRegEx$1 = /(?:[([{|‖]|[^\\][,;:](?:\\:)?)$/;

const plugValsIntoEcho = (str, vars, unitAware, formatSpec, formats) => {
  // For each variable name in the echo string, substitute a value.
  // The parser surrounded those names with 〖〗 delimiters.
  let match;
  while ((match = varRegEx.exec(str)) !== null) {
    const varName = match[0].replace(/[〖〗()]/g, "").trim().replace(/'/g, "′");
    const matchLength = match[0].length;
    const pos = match.index;
    let hvar;
    let display = "";

    if (varName.indexOf(".") > -1) {
      // Object with a dot accessor.
      const names = varName.split(".");
      const parentName = names[0];
      if (!vars[parentName]) { return errorOprnd("V_NAME", parentName) }
      hvar = vars[parentName];
      if (hvar.dtype === dt.DATAFRAME && names.length === 2) {
        // This is a dataframe.dict. I don't want to write an entire dictionary into
        // a blue echo, so display just the names.
        display = "\\mathrm{" + vars[names[0]].name + "{.}\\mathrm{" + names[1] + "}";
        return str.substring(0, pos) + display + str.substring(pos + matchLength)
      } else {
        // we want to display the property value.
        for (let i = 1; i < names.length; i++) {
          const propName = names[i].replace("}", "").replace("\\mathrm{", "").trim();
          const indexOprnd = { value: propName, unit: null, dtype: dt.STRING };
          hvar = propertyFromDotAccessor(hvar, indexOprnd, vars);
          if (!hvar) { return errorOprnd("V_NAME", propName) }
          const stmt = { resulttemplate: "@", altresulttemplate: "@" };
          hvar.resultdisplay = formatResult(stmt, hvar, formatSpec, null,
                formats).resultdisplay;
        }
      }
    } else if (!vars[varName] && varName === "T") {
      // Transposed matrix
      hvar = { dtype: dt.RATIONAL, resultdisplay: "\\text{T}" };
    } else if (varName === "e" && /^\^/.test(str.slice(pos + 3).trim())) {
      // e^x
      str = str.substring(0, pos) + "e" + str.substring(pos + matchLength);
      continue
    } else if (varName === "j") {
      // √(-1)
      str = str.substring(0, pos) + "j" + str.substring(pos + matchLength);
      continue
    } else if (!vars[varName]) {
      return errorOprnd("V_NAME", varName)
    } else {
      // Get a clone in order to avoid mutating the inner properties of vars.
      hvar = {
        dtype: vars[varName].dtype,
        resultdisplay: vars[varName].resultdisplay
      };
    }

    if (!hvar || !hvar.resultdisplay) {
      const insert = (varName) ? varName : "?";
      return errorOprnd("NULL", insert)
    } else if (hvar.error) {
      return errorOprnd("NULL", varName)
    }

    let needsParens = true; // default
    if (isMatrix(hvar) || (hvar.dtype & dt.DATAFRAME)) { needsParens = false; }
    if (unitAware && (hvar.dtype & dt.QUANTITY)) { needsParens = true; }

    let isParened = false; // Is the match already nested inside parens?
    if (pos > 0) {
      const pStr = str.slice(0, pos).trim();
      if (openParenRegEx$1.test(pStr)) {
        const fStr = str.slice(pos + varName.length + 2).trim();
        isParened = fStr.length > 0 && /^([)|‖\]},;:]|\\right)/.test(fStr);
      } else if (/^\\begin{[bp]matrix}/.test(hvar.resultdisplay)) {
        isParened = /\\end{[bp]matrix}$/.test(hvar.resultdisplay);
      }
    }
    needsParens = needsParens && !isParened;

    if (hvar.dtype === dt.DATAFRAME || (hvar.dtype & dt.MAP)
        || hvar.resultdisplay.slice(0, 1) === "!") {
      display = "\\mathrm{" + parse$1(vars[varName].name) + "}";
    } else {
      display = hvar.resultdisplay;
      if (!unitAware) {
        const posUnit = display.lastIndexOf("{\\text{");
        if (posUnit > -1) {
          display = display.slice(0, posUnit).trim()
                            .replace(/\\; *$/, "").trim();
        }
      }
      if (needsParens) {
        display = hvar.dtype > 256 ? "\\left(" + display + "\\right)" : "(" + display + ")";
      }
    }
    str = str.substring(0, pos) + display + str.substring(pos + matchLength);
  }
  return str
};

const negativeOne = Object.freeze(Rnl.negate(Rnl.one));
const oneHalf = [BigInt(1), BigInt(2)];
const thirty = [BigInt(30), BigInt(1)];
const fortyFive = [BigInt(45), BigInt(1)];
const sixty = [BigInt(60), BigInt(1)];
const ninety = [BigInt(90), BigInt(1)];
const halfPi = Object.freeze(Rnl.divide(Rnl.pi, Rnl.two));

const functionExpos = (functionName, args) => {
  const numArgs = args.length;

  const expos = numArgs === 1 ? args[0].unit.expos : null;

  switch (functionName) {
    case "abs":
    case "round":
    case "roundn":
    case "sign":
    case "trace":
    case "fetch":
      return expos

    case "cos":
    case "sin":
    case "tan":
    case "sec":
    case "csc":
    case "cot":
    case "acos":
    case "arccos":
    case "asin":
    case "arcsin":
    case "atan":
    case "arctan":
    case "asec":
    case "arcsec":
    case "acsc":
    case "arccsc":
    case "acot":
    case "arccot":
    case "cosd":
    case "sind":
    case "tand":
    case "secd":
    case "cscd":
    case "cotd":
    case "acosd":
    case "asind":
    case "atand":
    case "asecd":
    case "acscd":
    case "acotd":
    case "gud":
      if (!unitsAreCompatible(expos, allZeros)) {
        return errorOprnd("UNIT_IN", functionName)
      }
      return allZeros

    case "exp":
    case "log":
    case "ln":
    case "log10":
    case "log2":
    case "logn":
    case "cosh":
    case "sinh":
    case "tanh":
    case "sech":
    case "csch":
    case "coth":
    case "acosh":
    case "asinh":
    case "atanh":
    case "asech":
    case "acsch":
    case "acoth":
    case "binomial":
    case "gamma":
    case "Γ":
    case "lgamma":
    case "lfact":
    case "factorial":
      if (!unitsAreCompatible(expos, allZeros)) {
        return errorOprnd("UNIT_IN", functionName)
      }
      return allZeros

    case "sqrt":
      return expos.map(e => e / 2)

    case "gcd":
    case "mht":
      if (!unitsAreCompatible(expos, allZeros)) {
        return errorOprnd("UNIT_IN", functionName)
      }
      return functionName === "hmt" ? [1, 0, 0, 0, 0, 0, 0, 0] : allZeros

    case "atan2":
    case "hypot":
    case "rms":
    case "ceil":
    case "floor":
    case "sum":
    case "mean":
    case "median":
    case "min":
    case "max":
    case "range":
    case "stddev":
    case "variance": {
      const x = args[0].unit.expos;
      for (let i = 1; i < args.length; i++) {
        const y = args[i].unit.expos;
        if (x.length !== y.length) { return errorOprnd("UNIT_ARG", functionName) }
        for (let j = 0; j < x.length; j++) {
          if (x[j] !== y[j]) { return errorOprnd("UNIT_ARG", functionName) }
        }
      }
      return functionName === "atan2" ? allZeros : x
    }

    case "real":
    case "imag":
    case "angle":
    case "conj":
      return allZeros

    case "product": {
      const expos = clone(args[0].unit.expos);
      for (let i = 1; i < args.length; i++) {
        const p = args[i].unit.expos;
        expos.map((e, j) => e + p[j]);
      }
      return expos
    }

    default:
      return errorOprnd("F_NAME", functionName)
  }
};

const gamma = x => {
  if (Rnl.isZero(x)) {
    return errorOprnd("Γ0")
  } else if (Rnl.isPositive(x) && Rnl.isInteger(x) && Rnl.lessThan(x, Rnl.fromNumber(101))) {
    return Rnl.factorial(Rnl.subtract(x, Rnl.one))
  } else if (Rnl.isNegative(x) && Rnl.isInteger(x)) {
    return errorOprnd("ΓPOLE")
  } else if (Rnl.lessThan(x, oneHalf)) {
    // reflection formula
    return Rnl.fromNumber(Math.PI / (Math.sin(Math.PI * Rnl.toNumber(x)))
      * Rnl.toNumber(gamma(Rnl.subtract(Rnl.one, x))))
  } else {
    return Rnl.lanczos(x)
  }
};

const lgamma = r => {
  // Returns natural logarithm of the Gamma function.
  // Ref: https://www.johndcook.com/blog/2010/08/16/how-to-compute-log-factorial/
  if (Rnl.isZero(r)) { return errorOprnd("Γ0") }
  if (Rnl.isNegative(r)) { return errorOprnd("LOGΓ") }
  if (Rnl.areEqual(r, Rnl.one) || Rnl.areEqual(r, Rnl.two)) { return Rnl.zero }
  if (Rnl.lessThanOrEqualTo(r, Rnl.fromNumber(14))) {
    return Rnl.fromNumber(Math.log(Rnl.toNumber(gamma(r))))
  } else {
    const x = Rnl.toNumber(r);
    // eslint-disable-next-line max-len
    const y = (x - 0.5) * Math.log(x) - x + 0.5 * Math.log(2 * Math.PI) + 1 / (12 * x) - 1 / (360 * x ** 3) + 1 / (1260 * x ** 5) - 1 / (1680 * x ** 7) + 5 / (540 * x ** 9);
    //  Error bounded by: -691/(360360 * x^11), 16 significant digits
    return Rnl.fromNumber(y)
  }
};

const binomial = (n, k) => {
  // (n \atop k) = n! / (k! (n - k)!)
  //             = exp(log!(n) - [log!(k) + log!(n - k)])
  if (Rnl.areEqual(n, k)) { return Rnl.one }
  if (Rnl.isZero(n)) { return Rnl.zero }
  if (Rnl.isNegative(k)) { return Rnl.zero }
  if (Rnl.lessThan(n, k)) { return Rnl.zero }

  if (Rnl.isInteger(n) && Rnl.isInteger(k) && Rnl.isPositive(n) && Rnl.isPositive(k)) {
    // positive integers
//    if (Rnl.lessThan(n, twenty)) {
    return Rnl.divide(Rnl.factorial(n),
      Rnl.multiply(Rnl.factorial(k), Rnl.factorial(Rnl.subtract(n, k))))
//    } else {
//      return Rnl.fromNumber(Math.round(Math.exp(Rnl.toNumber(
//        Rnl.subtract(lfact(n),
//          Rnl.add(lfact(k), lfact(Rnl.subtract(n, k))))))))
//    }

  } else if (Rnl.isInteger(n) && Rnl.isInteger(k) && Rnl.isPositive(k)) {
    // negative integer n
    // (-n \atop k) = (-1)^k * multiset(n, k)
    return Rnl.multiply(Rnl.power(negativeOne, k), multiset(Rnl.negate(n), k))

  } else {
    // generalized for real or complex arguments
    // (x \atop y) = Γ(x+1) / ( Γ(y+1) Γ(x-y+1) )
    return Rnl.divide(
      gamma(Rnl.increment(n)),
      Rnl.multiply(gamma(Rnl.increment(k)), gamma(Rnl.increment(Rnl.subtract(n, k))))
    )

  }
};

const multiset = (n, k) => {
  // ((n \atop k)) = ((n+k-1) \atop k)
  // multiset(n, k) = binomial(n+k-1, k)
  return binomial(Rnl.add(n, Rnl.decrement(k)), k)
};

const piOver180 = Rnl.divide(Rnl.pi, [BigInt(180), BigInt(1)]);

const unary$1 = {
  scalar: {
    // Functions that take one real argument.
    abs(x)  { return Rnl.abs(x) },
    angle(x) { return errorOprnd("NA_REAL", "angle") },
    real(x)   { return errorOprnd("NA_REAL", "real") },
    imag(x)   { return errorOprnd("NA_REAL", "imag") },
    conj(x)   { return errorOprnd("NA_REAL", "conj") },
    cos(x)  { return Rnl.cos(x) },
    sin(x)  { return Rnl.sin(x) },
    tan(x)  { return Rnl.tan(x) },
    cosh(x) { return Rnl.cosh(x) },
    sinh(x) { return Rnl.sinh(x) },
    tanh(x) { return Rnl.tanh(x) },
    acos(x) {
      if (Rnl.greaterThan(Rnl.abs(x), Rnl.one)) { return errorOprnd("ATRIG", "acos") }
      return Rnl.fromNumber(Math.acos(Rnl.toNumber(x)))
    },
    asin(x) {
      if (Rnl.greaterThan(Rnl.abs(x), Rnl.one)) { return errorOprnd("ATRIG", "asin") }
      return Rnl.fromNumber(Math.asin(Rnl.toNumber(x)))
    },
    atan(x) {
      return Rnl.fromNumber(Math.atan(Rnl.toNumber(x)))
    },
    sec(x) {
      return Rnl.fromNumber(1 / Math.cos(Rnl.toNumber(x)))
    },
    csc(x) {
      return Rnl.fromNumber(1 / Math.sin(Rnl.toNumber(x)))
    },
    cot(x) {
      if (Rnl.isZero(x)) { return errorOprnd("COT", "cotangent") }
      return  Rnl.fromNumber(1 / Math.tan(Rnl.toNumber(x)))
    },
    asec(x) {
      if (Rnl.greaterThanOrEqualTo(Rnl.abs(x), Rnl.one)) {
        return errorOprnd("ASEC", "arcecant")
      }
      const temp = Math.atn(Math.sqrt(Rnl.toNumber(Rnl.decrement(Rnl.multiply(x, x)))));
      return  (Rnl.isPositive(x))
        ? Rnl.fromNumber(temp)
        : Rnl.fromNumber(temp - Math.PI)
    },
    acot(x) {
      if (Rnl.greaterThanOrEqualTo(Rnl.abs(x), Rnl.one)) {
        return errorOprnd("ASEC", "acot")
      }
      const temp = Math.atn(1 / (Math.sqrt(Rnl.toNumber(Rnl.decrement(Rnl.multiply(x, x))))));
      return (Rnl.isPositive(x))
        ? Rnl.fromNumber(temp)
        : Rnl.fromNumber(temp - Math.PI)
    },
    acsc(x) {
      return Rnl.fromNumber(Math.atn(-Rnl.toNumber(x)) + Math.PI)
    },
    exp(x) {
      return Rnl.exp(x)
    },
    log(x) {
      return Rnl.isZero(x) ? errorOprnd("LOG_ZERO") : Rnl.fromNumber(Math.log(Rnl.toNumber(x)))
    },
    ln(x) {
      return Rnl.isZero(x) ? errorOprnd("LOG_ZERO") : Rnl.fromNumber(Math.log(Rnl.toNumber(x)))
    },
    log10(x) {
      return Rnl.isZero(x)
        ? errorOprnd("LOG_ZERO")
        : Rnl.fromNumber(Math.log10(Rnl.toNumber(x)))
    },
    log2(x) {
      return Rnl.isZero(x)
        ? errorOprnd("LOG_ZERO")
        : Rnl.fromNumber(Math.log2(Rnl.toNumber(x)))
    },
    sech(x) {
      // sech(n) = 2 / (eⁿ + e⁻ⁿ)
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(2 / (Math.exp(num) + Math.exp(-num)))
    },
    csch(x) {
      // csch(n) = 2 / (eⁿ - e⁻ⁿ)
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(2 / (Math.exp(num) - Math.exp(-num)))
    },
    coth(x) {
      // coth(n) = (eⁿ + e⁻ⁿ) / (eⁿ - e⁻ⁿ)
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(
        (Math.exp(num) + Math.exp(-num)) / (Math.exp(num) - Math.exp(-num))
      )
    },
    acosh(x) {
      // acosh(x) = log( x + sqrt(x - 1) × sqrt(x + 1) )
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(Math.log( num + Math.sqrt(num - 1) * Math.sqrt(num + 1) ))
    },
    asinh(x) {
      // asinh(x) = log(x + sqrt(x² + 1))
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(Math.log(num + Math.sqrt(Math.pow(num, 2) + 1)))
    },
    atanh(x) {
      // atanh(x) = [ log(1+x) - log(1-x) ] / 2
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber((Math.log(1 + num) - Math.log(1 - num) ) / 2)
    },
    asech(x) {
      // asech(x) = log( [sqrt(-x * x + 1) + 1] / x )
      if (Rnl.isZero(x)) { return errorOprnd("DIV") }
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(Math.log((Math.sqrt(-num * num + 1) + 1) / num))
    },
    ascsh(x) {
      // acsch(x) = log( sqrt(1 + 1/x²) + 1/x )
      if (Rnl.isZero(x)) { return errorOprnd("DIV") }
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber(Math.log(Math.sqrt(1 + 1 / Math.pow(num, 2)) + 1 / num))
    },
    acoth(x) {
      // acoth(x) = [ log(1 + 1/x) - log(1 - 1/x) ] / 2
      if (Rnl.isZero(x)) { return errorOprnd("DIV") }
      const num = Rnl.toNumber(x);
      return Rnl.fromNumber((Math.log(1 + 1 / num) - Math.log(1 - 1 / num)) / 2)
    },
    ceil(x) {
      return Rnl.ceil(x)
    },
    floor(x) {
      return Rnl.floor(x)
    },
    gamma(x) {
      return gamma(x)
    },
    Γ(x) {
      return gamma(x)
    },
    lgamma(x) {
      if (Rnl.isNegative(x) || Rnl.isZero(x)) { return errorOprnd("LOGΓ") }
      return lgamma(x)
    },
    lfact(x) {
      if (Rnl.isNegative(x) || !Rnl.isInteger(x)) { return errorOprnd("FACT") }
      return lgamma(Rnl.add(x, Rnl.one))
    },
    factorial(x) {
      return Rnl.factorial(x)
    },
    sign(x) {
      return Rnl.isPositive(x) ? Rnl.one : Rnl.isZero(x) ? Rnl.zero : negativeOne
    },
    cosd(x) {
      if (Rnl.areEqual(x, ninety)) { return Rnl.zero }
      if (Rnl.areEqual(x, sixty)) { return oneHalf }
      return this.cos(Rnl.multiply(x, piOver180))
    },
    sind(x) {
      if (Rnl.areEqual(x, thirty)) { return oneHalf }
      return this.sin(Rnl.multiply(x, piOver180))
    },
    tand(x) {
      if (Rnl.areEqual(x, fortyFive)) { return Rnl.one }
      if (Rnl.areEqual(x, ninety)) { return errorOprnd("TAN90", "90°") }
      return this.tan(Rnl.multiply(x, piOver180))
    },
    cotd(x) {
      return this.cot(Rnl.multiply(x, piOver180))
    },
    cscd(x) {
      return this.csc(Rnl.multiply(x, piOver180))
    },
    secd(x) {
      return this.sec(Rnl.multiply(x, piOver180))
    },
    acosd(x) {
      const y = this.acos(x);
      return y.dtype ? y : Rnl.divide(y, piOver180)
    },
    asind(x) {
      const y = this.asin(x);
      return y.dtype ? y : Rnl.divide(y, piOver180)
    },
    atand(x) {
      return Rnl.divide(this.atan(x), piOver180)
    },
    acotd(x) {
      const y = this.acot(x);
      return y.dtype ? y : Rnl.divide(y, piOver180)
    },
    acscd(x) {
      const y = this.acsc(x);
      return y.dtype ? y : Rnl.divide(y, piOver180)
    },
    asecd(x) {
      const y = this.asec(x);
      return y.dtype ? y : Rnl.divide(y, piOver180)
    },
    Char(x) {
      return String.fromCodePoint(Rnl.toNumber(x))
    },
    sqrt(x) {
      const y = [BigInt(1), BigInt(2)];
      return Cpx.isComplex(x) || (Rnl.isNegative(x))
          ? Cpx.power([x, Rnl.zero], y)
          : Rnl.power(x, y)
    },
    round(x) {
      return Rnl.fromString(Rnl.toString(x, 0))
    }
  },
  complex: {
    // Functions that take one complex argument.
    abs(z)   { return Cpx.abs(z) },
    angle(z) { return Cpx.angle(z) },
    real(z)  { return z[0] },
    imag(z)  { return z[1] },
    conj(z)  { return Cpx.conjugate(z) },
    cos(z)   { return Cpx.cos(z) },
    sin(z)   { return Cpx.sin(z) },
    asin(z)  { return Cpx.asin(z) },
    atan(z)  { return Cpx.atan(z) },
    acos(z)  { return Cpx.subtract([halfPi, Rnl.zero], Cpx.asin(z))}, // π/2 - arcsin(z)
    tan(z)   { return Cpx.divide(Cpx.sin(z), Cpx.cos(z)) },
    cot(z)   { return Cpx.divide(Cpx.cos(z), Cpx.sin(z)) },
    sec(z) {
      const c = Cpx.cos(z);
      return c.dtype ? c : Cpx.inverse(c)
    },
    csc(z) {
      const s = Cpx.sin(z);
      return s.dtype ? s : Cpx.inverse(s)
    },
    asec(z) {
      // acos(inverse(z))
      const inv = Cpx.inverse(z);
      return Cpx.subtract([halfPi, Rnl.zero], Cpx.asin(inv))
    },
    acot(z) { return Cpx.atan(Cpx.inverse(z)) },
    acsc(z) {
      return Cpx.asin(Cpx.inverse(z))
    },
    exp(z) {
      return Cpx.exp(z)
    },
    log(z) {
      return Cpx.log(z)
    },
    ln(z) {
      return Cpx.log(z)
    },
    log10(z) {
      return Rnl.fromNumber(Math.log10(Rnl.toNumber(z)))
    },
    log2(z) {
      return Rnl.fromNumber(Math.log2(Rnl.toNumber(z)))
    },
    cosh(z) {
      // cosh(z) = (eᶻ + e⁻ᶻ) / 2
      return Cpx.divide(Cpx.add(Cpx.exp(z), Cpx.exp(Cpx.negate(z))), [Rnl.two, Rnl.zero])
    },
    sinh(z) {
      // sinh(z) = (eᶻ - e⁻ᶻ) / 2
      return Cpx.divide(Cpx.subtract(Cpx.exp(z), Cpx.exp(Cpx.negate(z))), [Rnl.two, Rnl.zero])
    },
    tanh(z) {
      // tanh(z) = (eᶻ - e⁻ᶻ) / (eᶻ + e⁻ᶻ)
      const ez = Cpx.exp(z);
      const eMinuxZ = Cpx.exp(Cpx.negate(z));
      return Cpx.divide(Cpx.subtract(ez, eMinuxZ), Cpx.add(ez, eMinuxZ))
    },
    sech(z) {
      // sech(z) = 2 / (eᶻ + e⁻ᶻ)
      return Cpx.divide([Rnl.two, Rnl.zero], Cpx.add(Cpx.exp(z), Cpx.exp(Cpx.negate(z))))
    },
    csch(z) {
      // csch(z) = 2 / (eᶻ - e⁻ᶻ)
      return Cpx.divide([Rnl.two, Rnl.zero], Cpx.subtract(Cpx.exp(z), Cpx.exp(Cpx.negate(z))))
    },
    coth(z) {
      // coth(z) = (eᶻ + e⁻ᶻ) / (eᶻ - e⁻ᶻ)
      const ez = Cpx.exp(z);
      const eMinuxZ = Cpx.exp(Cpx.negate(z));
      return Cpx.divide(Cpx.add(ez, eMinuxZ), Cpx.subtract(ez, eMinuxZ))
    },
    acosh(z) {
      return Cpx.acosh(z)
    },
    asinh(z) {
      return Cpx.asinh(z)
    },
    atanh(z) {
      return Cpx.atanh(z)
    },
    asech(z) {
      return Cpx.acosh(Cpx.inverse(z))
    },
    acsch(z) {
      return Cpx.asinh(Cpx.inverse(z))
    },
    acoth(z) {
      return Cpx.atanh(Cpx.inverse(z))
    },
    ceil(z) {
      return errorOprnd("NA_COMPL_OP", "ceil")
    },
    floor(z) {
      return errorOprnd("NA_COMPL_OP", "ceil")
    },
    gamma(z) {
      return Cpx.gamma(z)
    },
    Γ(z) {
      return Cpx.gamma(z)
    },
    lgamma(z) {
      // TODO: complex log of gamma()
      return errorOprnd("NA_COMPL_OP", "lgamma")
    },
    factorial(z) {
      return errorOprnd("NA_COMPL_OP", "factorial")
    },
    sign(z) {
      if (Rnl.isZero(z[1]) && Rnl.isPositive(z[0])) {
        return Rnl.one
      } else if (Rnl.isZero(z[1]) && Rnl.isNegative(z[0])) {
        return Rnl.negate(Rnl.one)
      } else {
        return Cpx.divide(z, [Cpx.abs(z), Rnl.zero])
      }
    },
    round(z) {
      // TODO: complex round function
      return errorOprnd("NA_COMPL_OP", "round")
    }
  }
};

const binary$1 = {
  logn([n, x]) {
    return Rnl.fromNumber(Math.log(Rnl.toNumber(x)) / Math.log(Rnl.toNumber(n)))
  },
  roundFixed([x, n]) {
    return Rnl.fromString(Rnl.toString(x, n))
  },
  roundSignificant([x, n]) {
    return Rnl.fromString(Rnl.toStringSignificant(x, n))
  },
  stringFixed([x, n]) {
    return Rnl.toString(x, n)
  },
  stringSignificant([x, n]) {
    return Rnl.toStringSignificant(x, n)
  },
  atan2([x, y]) {
    return Rnl.fromNumber(Math.atan2(Rnl.toNumber(y), Rnl.toNumber(x)))
  },
  hypot([x, y]) {
    // sqrt(x^2 + y^2)
    // https://www.johndcook.com/blog/2010/06/02/whats-so-hard-about-finding-a-hypotenuse/
    const max = Rnl.max(x, y);
    const r = Rnl.divide(Rnl.min(x, y), max);
    return Rnl.multiply(max, Rnl.sqrt(Rnl.increment(Rnl.multiply(r, r))))
  },
  gcd([m, n]) {
    return Rnl.gcd(m, n)
  },
  rms([x, y]) {
    return this.hypot(x, y)
  },
  binomial([x, y]) {
    return binomial(x, y)
  },
  ones([m, n]) {
    return Matrix.ones(Rnl.toNumber(m), Rnl.toNumber(n))
  },
  zeros([m, n]) {
    return Matrix.zeros(Rnl.toNumber(m), Rnl.toNumber(n))
  },
  mod([x, y]) {
    return Rnl.mod(x, y)
  },
  rem([x, y]) {
    return Rnl.rem(x, y)
  }
};

const reduce = {
  max(list) {
    return list.reduce((max, e) => Rnl.max(max, e))
  },
  min(list) {
    return list.reduce((min, e) => Rnl.min(min, e))
  },
  sum(list) {
    return list.reduce((sum, e) => Rnl.add(sum, e))
  },
  product(list) {
    return list.reduce((sum, e) => Rnl.multiply(sum, e))
  },
  mean(list) {
    const sum = this.sum(list);
    return Rnl.divide(sum, Rnl.fromNumber(list.length))
  },
  median(list) {
    const max = this.max(list);
    const min = this.min(list);
    return Rnl.divide(Rnl.add(max, min), Rnl.two)
  },
  range(list) {
    return Rnl.subtract(this.max(list), this.min(list))
  },
  variance(list) {
    const sum = this.sum(list);
    const mean = Rnl.divide(sum, Rnl.fromNumber(list.length));
    const num = list.reduce((num, e) => Rnl.add(num, Rnl.pow(Rnl.subtract(e, mean), Rnl.two)));
    return Rnl.divide(num, Rnl.subtract(Rnl.fromNumber(list.length), Rnl.one))
  },
  stddev(list) {
    const variance = this.variance(list);
    return Rnl.power(variance, oneHalf)
  },
  accumulate(list) {
    const v = new Array(list.length).fill(0);
    v[0] = list[0];
    for (let i = 1; i < list.length; i++) {
      v[i] = Rnl.add(v[i - 1], list[i]);
    }
    return v
  }
};

const lerp = (args, unitAware) => {
  // linear interpolation
  for (let i = 0; i < 3; i++) {
    if (!(args[i].dtype & dt.RATIONAL)) { return errorOprnd("") }
  }
  let expos = allZeros;
  if (unitAware) {
    if (args[0].expos !== args[1].expos) { return errorOprnd("") }
    if (args[1].expos !== args[2].expos) { return errorOprnd("") }
    expos = args[0].expos;
  }
  const output = Object.create(null);
  output.unit = Object.create(null);
  output.unit.expos = expos;
  output.dtype = dt.RATIONAL;

  const v0 = args[0].value;  // a vector
  const v1 = args[1].value;  // another vector
  const x = args[2].value;   // the input value
  // TODO: Use binary search
  for (let i = 0; i < v0.length - 1; i++) {
    if (Rnl.lessThanOrEqualTo(v0[i], x) & Rnl.lessThanOrEqualTo(x, v0[i + 1])) {
      const slope = Rnl.divide((Rnl.subtract(v1[i + 1], v1[i])),
        (Rnl.subtract(v0[i + 1], v0[i])));
      output.value = Rnl.add(v1[i], Rnl.multiply(slope, (Rnl.subtract(x, v0[i]))));
      return Object.freeze(output)
    }
  }
};

const Functions = Object.freeze({
  functionExpos,
  unary: unary$1,
  binary: binary$1,
  reduce,
  lerp
});

const multivarFunction = (arity, functionName, args) => {
  // Deal with a function that may have multiple arguments.

  if (args.length === 1) {
    const list = isVector(args[0])
      ? args[0].value
      : (args.dtype & dt.MATRIX)
      // TODO: fix the next line.
      ? args[0].value.flat()
      : args[0].value;

    const value = Functions[arity][functionName](list);

    let dtype = args[0].dtype;
    if (arity === "reduce" && functionName !== "accumulate") {
      // Mask off any matrix or vector indicator from the dtype
      if (dtype & dt.MATRIX) { dtype -= dt.MATRIX; }
      if (dtype & dt.ROWVECTOR) { dtype -= dt.ROWVECTOR; }
      if (dtype & dt.COLUMNVECTOR) { dtype -= dt.COLUMNVECTOR; }
    }

    return [value, dtype]

  } else if (functionName === "sum" && args.length === 2 && isMatrix(args[0])
    && args[1].dtype === dt.RATIONAL) {
    if (Rnl.areEqual(args[1].value, Rnl.two)) {
      const dtype = dt.COLUMNVECTOR + dt.RATIONAL;
      const result = args[0].value.map(row => row.reduce((sum, e) => Rnl.add(sum, e)));
      return [ result, dtype ]
    } else if (Rnl.areEqual(args[1].value, Rnl.one)) {
      const dtype = dt.ROWVECTOR + dt.RATIONAL;
      const result = Matrix.transpose(args[0]).value.map(
        row => row.reduce((sum, e) => Rnl.add(sum, e))
      );
      return [ result, dtype ]
    } else {
      return [errorOprnd("BAD_SUM"), dt.ERROR]
    }
  } else {
    // We have multiple arguments.
    // Is one of them a vector or a matrix?
    let iArg = 0;
    let gotVector = false;
    let gotMatrix = false;
    let dtype = args[0].dtype;

    for (iArg = 0; iArg < args.length; iArg++) {
      if (isVector(args[iArg])) {
        gotVector = true;
        dtype = args[iArg].dtype;
        break
      } else if (isMatrix(args[iArg])) {
        gotMatrix = true;
        dtype = args[iArg].dtype;
        break
      }
    }
    const list = args.map(e => e.value);
    if (!(gotVector || gotMatrix)) {
      const result = Functions[arity][functionName](list);
      return functionName === "zeros" || functionName === "ones"
        ? [result.value, result.dtype]
        : [result, args[0].dtype]

    } else {
      const result = [];
      if (gotVector) {
        const listClone = clone(list);
        for (let i = 0; i < list[iArg].length; i++) {
          listClone[iArg] = list[iArg][i];
          result.push(Functions[arity][functionName](listClone));
        }
      } else {
        const listClone = clone(list);
        for (let i = 0; i < list[iArg].length; i++) {
          result.push([]);
          for (let j = 0; j < list[iArg][0].length; j++) {
            listClone[iArg] = list[iArg][i][j];
            result[i].push(Functions[arity][functionName](listClone));
          }
        }
      }
      return [ result, dtype ]
    }
  }
};

// compare.js

const equals = (x, y) => {
  if (Rnl.isRational(x) && Rnl.isRational(y)) {
    return Rnl.areEqual(x, y)
  } else {
    return x === y
  }
};

const compare = (op, x, y, yPrev) => {
  // If yPrev is defined, then this is part of a chained comparison, e.g.: a < b < c
  if (x === false && yPrev) { return false }  // The chain is false if any part is false.
  if (x === true && yPrev) { x = yPrev; }  // Compare this link in the chain.

  switch (op) {
    case "=":
      return errorOprnd("BAD_EQ")

    case "==":
    case "⩵":
      return equals(x, y)

    case "≠":
    case "!=":
    case "/=":
      if (Rnl.isRational(x) && Rnl.isRational(y)) {
        return !Rnl.areEqual(x, y)
      } else {
        return x !== y
      }

    case ">":
      if (Rnl.isRational(x) && Rnl.isRational(y)) {
        return Rnl.greaterThan(x, y)
      } else {
        return x > y
      }

    case "<":
      if (Rnl.isRational(x) && Rnl.isRational(y)) {
        return Rnl.lessThan(x, y)
      } else {
        return x < y
      }

    case "≥":
    case ">=":
      if (Rnl.isRational(x) && Rnl.isRational(y)) {
        return Rnl.greaterThanOrEqualTo(x, y)
      } else {
        return x >= y
      }

    case "≤":
    case "<=":
      if (Rnl.isRational(x) && Rnl.isRational(y)) {
        return Rnl.lessThanOrEqualTo(x, y)
      } else {
        return x <= y
      }

    case "∈":
    case "in":
      if (typeof x === "string" && typeof y === "string") {
        if (Array.from(x).length > 1) { return false }
        return y.indexOf(x) > -1
      } else if (Array.isArray(y) && Rnl.isRational(y[0]) && Rnl.isRational(x)) {
        for (let i = 0; i < y.length; i++) {
          if (Rnl.areEqual(x, y[i])) { return true }
        }
        return false
      } else if (Array.isArray(y) && !Array.isArray(x)) {
        for (let i = 0; i < y.length; i++) {
          if (equals(x, y[i])) { return true }
        }
        return false
      } else if (y instanceof Map) {
        return y.has(x)
      } else if (typeof x === "string" && typeof y === "object" &&
                 Object.hasOwnProperty.call(y, "headings")) {
        // Is x a property of dataframe y?
        return Boolean(y.headings.includes(x) ||
                      (y.rowMap && Object.hasOwnProperty.call(y.rowMap, x)))
      } else {
        return errorOprnd("NOT_ARRAY")
      }

    case "∋":
      if (typeof x === "string" && typeof y === "string") {
        if (Array.from(x).length > 1) { return false }
        return y.indexOf(x) > -1
      } else if (x instanceof Map) {
        return x.has(y)
      } else if (typeof x === "object" && typeof y === "string" &&
                  Object.hasOwnProperty.call(x, "headings")) {
        // Is y a property of dataframe x?
        return Boolean(x.headings.includes(y) ||
                      (x.rowMap && Object.hasOwnProperty.call(x.rowMap, y)))
      } else {
        return errorOprnd("NO_PROP", x.name)
      }

    case "⊃":
      if (typeof x === "string" && typeof y === "string") {
        return x.indexOf(y) > -1
      } else if (Array.isArray(x) && Array.isArray(y)) {
        for (let i = 0; i < x.length; i++) {
          // We test for a contiguous subset
          if (equals(y[0], x[i])) {
            if (i + y.length > x.length) { return false }
            for (let j = 1; j < y.length; j++) {
              if (!equals(y[j], x[i + j])) { return false }
            }
            return true
          }
        }
        return false
      } else {
        return errorOprnd("NOT_ARRAY")
      }

    case "∉":
    case "!in":
      if (typeof x === "string" && typeof y === "string") {
        if (Array.from(x).length === 1) { return false }
        return y.indexOf(x) === -1
      } else if (Array.isArray(y) && Rnl.isRational(y[0]) && Rnl.isRational(x)) {
        for (let i = 0; i < y.length; i++) {
          if (Rnl.areEqual(x, y[i])) { return false }
        }
        return true
      } else if (Array.isArray(y)) {
        for (let i = 0; i < y.length; i++) {
          if (x === y[i]) { return false }
        }
        return true
      } else if (y instanceof Map) {
        return !y.has(x)
      } else if (typeof x === "string" && typeof y === "object" &&
                 Object.hasOwnProperty.call(y, "headings")) {
        // Is x a property of dataframe x?
        return !(y.headings.includes(x) ||
                (y.rowMap && Object.hasOwnProperty.call(y.rowMap, x)))
      } else {
        return errorOprnd("NOT_ARRAY")
      }

    case "∌":
      if (typeof x === "string" && typeof y === "string") {
        if (Array.from(y).length === 1) { return false }
        return x.indexOf(y) === -1
      } else if (x instanceof Map) {
        return !x.has(y)
      } else if (typeof x === "object" && typeof y === "string" &&
                  Object.hasOwnProperty.call(x, "headings")) {
        // Is y a property of dataframe x?
        return !(x.headings.includes(y) ||
                (x.rowMap && Object.hasOwnProperty.call(x.rowMap, y)))
      } else {
        return errorOprnd("NO_PROP", x.name)
      }

    case "⊄":
      if (typeof x === "string" && typeof y === "string") {
        return y.indexOf(x) === -1
      } else if (Array.isArray(x) && Array.isArray(y)) {
        // We test for a contiguous subset
        for (let i = 0; i < y.length; i++) {
          if (equals(x[0], y[i])) {
            if (i + x.length > y.length) { continue }
            let provisional = true;
            for (let j = 1; j < x.length; j++) {
              if (!equals(x[j], y[i + j])) {
                provisional = false;
                continue
              }
            }
            if (!provisional) { continue }
            return true
          }
        }
        return false
      } else {
        return errorOprnd("NOT_ARRAY")
      }

    case "⊅":
      if (typeof x === "string" && typeof y === "string") {
        return x.indexOf(y) === -1
      } else if (Array.isArray(x) && Array.isArray(y)) {
        // We test for a contiguous subset
        for (let i = 0; i < x.length; i++) {
          if (equals(y[0], x[i])) {
            if (i + y.length > x.length) { continue }
            let provisional = true;
            for (let j = 1; j < y.length; j++) {
              if (!equals(y[j], x[i + j])) {
                provisional = false;
                continue
              }
            }
            if (!provisional) { continue }
            return true
          }
        }
        return false
      } else {
        return errorOprnd("NOT_ARRAY")
      }
  }
};

// Hurmet math operators are overloaded to handle operands of various shapes.
// Those shapes being scalars, vectors, matrices, and maps.
// This file implements the overloading.

// Some helper functions
const dotProduct$1 = (a, b) => {
  return a.map((e, j) => Rnl.multiply(e, b[j])).reduce((m, n) => Rnl.add(m, n))
};
const sumOfSquares = vector => {
  return vector.map((e) => Rnl.multiply(e, e)).reduce((m, n) => Rnl.add(m, n))
};
const oneTenth = [BigInt(1), BigInt(100)];

// From the object below, calculations.js will call operators using statements
// that look like this:
// resultValue = Operations.unary[shape][operator](inputValue)

const unary = {
  scalar: {
    abs(x)       { return Rnl.abs(x) },
    norm(x)      { return Rnl.abs(x) },
    negate(x)    { return Rnl.negate(x) },
    exp(x)       { return Rnl.exp(x) },
    floor(x)     { return Rnl.floor(x) },
    ceil(x)      { return Rnl.ceil(x) },
    percent(x)   { return Rnl.multiply(oneTenth, x) },
    factorial(x) { return Rnl.factorial(x) },
    doubleFactorial(x) { return Rnl.doubleFactorial(x) },
    not(x)       { return !x }
  },

  complex: {
    abs(z)       { return Cpx.abs(z) },
    norm(z)      { return Cpx.abs(z) },
    conjugate(z) { return Cpx.conjugate(z) },
    negate(z)    { return Cpx.negate(z) },
    exp(z)       { return Cpx.exp(z) },
    floor(z)     { return errorOprnd("NA_COMPL_OP", "floor") },
    ceil(z)      { return errorOprnd("NA_COMPL_OP", "ceil") },
    percent(z)   { return errorOprnd("NA_COMPL_OP", "percent") },
    factorial(z) { return errorOprnd("NA_COMPL_OP", "factorial") },
    doubleFactorial(z) { return errorOprnd("NA_COMPL_OP", "factorial") },
    not(z)       { return errorOprnd("NA_COMPL_OP", "not") }
  },

  vector: {
    abs(v)       { return Rnl.sqrt(sumOfSquares(v)) },   // magnitude of a vector
    norm(v)      { return Rnl.sqrt(sumOfSquares(v)) },   // ditto
    negate(v)    { return v.map(e => Rnl.negate(e)) },
    exp(v)       { return v.map(e => Rnl.exp(e)) },
    floor(v)     { return v.map(e => Rnl.floor(e)) },
    ceil(v)      { return v.map(e => Rnl.ceil(e)) },
    percent(v)   { return v.map(e => Rnl.multiply(oneTenth, e)) },
    factorial(v) { return v.map(e => Rnl.factorial(e)) },
    doubleFactorial(v) { return v.map(e => Rnl.doubleFactorial(e)) },
    not(v)       { return v.map(e => !e) }
  },

  matrix: {
    abs(m) { return Matrix.invert(m, true) },
    norm(m) {
      if (m.length === m[0].length) {
        let sum = Rnl.zero;
        for (let i = 0; i < m.length; i++) {
          sum = Rnl.add(sum, sumOfSquares(m[i]));
        }
        return Rnl.sqrt(sum)
      }
    },
    negate(m)    { return m.map(row => row.map(e => Rnl.negate(e))) },
    exp(m)       { return m.map(row => row.map(e => Rnl.exp(e))) },
    floor(m)     { return m.map(row => row.map(e => Rnl.floor(e))) },
    ceil(m)      { return m.map(row => row.map(e => Rnl.ceil(e))) },
    percent(m)   { return m.map(row => row.map(e => Rnl.multiply(oneTenth, e))) },
    factorial(m) { return m.map(row => row.map(e => Rnl.factorial(e))) },
    doubleFactorial(m) { return m.map(row => row.map(e => Rnl.doubleFactorial(e))) },
    not(m)       { return m.map(row => row.map(e => !e)) }
  },

  map: {
    abs(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
      ? column.map(e => Rnl.abs(e))
      : column
    );
      return map
    },
    negate(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
      ? column.map(e => Rnl.negate(e))
      : column
    );
      return map
    },
    exp(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.exp(e))
        : column
      );
      return map
    },
    floor(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.floor(e))
        : column
      );
      return map
    },
    ceil(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.ceil(e))
        : column);
      return map
    },
    percent(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.multiply(oneTenth, e))
        : column
      );
      return map
    },
    factorial(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.factorial(e))
        : column
      );
      return map
    },
    doubleFactorial(map) {
      map.data = map.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.doubleFactorial(e))
        : column
      );
      return map
    },
    not(map) {
      map.data = map.data.map(column => typeof column[0] === "boolean"
       ? column.map(e => !e)
       : column
      );
      return map
    }
  }
};

const condition = {
  // Deal with booleans. Return a single value, true or false.
  // If a vector or matrix is received, all elements must be
  // true in order to return a true. Otherwise return a false.
  scalar(x) { return x },
  vector(v) { return v.reduce((prev, curr) => prev && curr, true) },
  matrix(m) {
    const row = new Array(m.length);
    for (let i = 0; i < m.length; i++) {
      row[i] = m[i].reduce((prev, curr) => prev && curr, true);
    }
    return row.reduce((prev, curr) => prev && curr, true)
  }
};

const dtype = {
  // Given the shapes which are operands to a binary operator,
  // return the resulting data type.
  scalar: {
    scalar(t0, t1, tkn)     {
      if (t0 === dt.DATE || t1 === dt.DATE) {
        return t0 === t1 ? dt.RATIONAL : dt.DATE
      }
      return (tkn === "&" || tkn === "hcat" || tkn === "vcat")
        ? t0 + ((tkn === "&" || tkn === "hcat") ? dt.ROWVECTOR : dt.COLUMNVECTOR )
        : t0
    },
    complex(t0, t1, tkn)    { return t1 },
    vector(t0, t1, tkn)     { return t1 },
    matrix(t0, t1, tkn)     { return t1 },
    dataFrame(t0, t1, tkn)  { return t1 },
    map(t0, t1, tkn)        { return t1 }
  },
  complex: {
    scalar(t0, t1, tkn)  { return t0 },
    complex(t0, t1, tkn) { return t0 }
  },
  vector: {
    scalar(t0, t1, tkn) { return t0 },
    map(t0, t1, tkn)    { return t1 + (t0 & dt.ROWVECTOR) + (t0 & dt.COLUMNVECTOR) }
  },
  rowVector: {
    rowVector(t0, t1, tkn) { return tkn === "vcat" ? t0 - dt.ROWVECTOR + dt.MATRIX : t0 },
    columnVector(t0, t1, tkn) { return t0 },
    matrix(t0, t1, tkn) { return tkn === "multiply" ? t0 : t1 }
  },
  columnVector: {
    rowVector(t0, t1, op) {
      return op === "dot"
      ? dt.RATIONAL
      : op === "cross"
      ? t0
      : t0 - dt.COLUMNVECTOR + dt.MATRIX
    },
    columnVector(t0, t1, tkn) {
      return tkn === "&" || tkn === "hcat"
        ? t0 - dt.COLUMNVECTOR + dt.MATRIX
        : t0
    },
    matrix(t0, t1, tkn) { return t1 }
  },
  matrix: {
    scalar(t0, t1, tkn) { return t0 },
    rowVector(t0, t1, tkn) { return t0 },
    columnVector(t0, t1, tkn) { return tkn === "*" || tkn === "⌧" ? t1 : t0 },
    matrix(t0, t1, tkn) { return t0 },
    map(t0, t1, tkn)    { return 0 }
  },
  dataFrame: {
    scalar(t0, t1, tkn) { return t0 }
  },
  map: {
    scalar(t0, t1, tkn) { return t0 },
    vector(t0, t1, tkn) { return t0 },
    matrix(t0, t1, tkn) { return 0 },
    map(t0, t1, tkn)    { return t0 }
  }
};


// The binary operators below are called like this:
// resultValue = Operations.binary[shape_0][shape_1][operator](input_0, input_1)

const binary = {
  scalar: {
    scalar: {
      // Binary operations on two scalars
      add(x, y)      { return Rnl.add(x, y) },
      subtract(x, y) { return Rnl.subtract(x, y) },
      multiply(x, y) { return Rnl.multiply(x, y) },
      divide(x, y)   { return Rnl.divide(x, y) },
      power(x, y)    {
        // eslint-disable-next-line max-len
        return Cpx.isComplex(x) || (Rnl.isNegative(x) && Rnl.isPositive(y) && Rnl.lessThan(y, Rnl.one))
          ? Cpx.power([x, Rnl.zero], y)
          : Rnl.power(x, y)
      },
      modulo(x, y)   { return Rnl.mod(x, y) },
      hypot(x, y)    { return Rnl.hypot(x, y) },
      rem(x, y)      { return Rnl.rem(x, y) },
      and(x, y)      { return x && y },
      or(x, y)       { return x || y },
      xor(x, y)      { return x !== y },
      concat(x, y)   { return [x, y] },
      unshift(x, y)  { return [x, y] }
    },
    complex: {
      add(x, z)      { return [Rnl.add(x, z[0]), z[1]] },
      subtract(x, z) { return [Rnl.subtract(x, z[0]), Rnl.negate(z[1])] },
      multiply(x, z) { return [Rnl.multiply(x, z[0]), Rnl.multiply(x, z[1])] },
      divide(x, z)   { return Cpx.divide([x, Rnl.zero], z) },
      power(x, z)    { return Cpx.power([x, Rnl.zero], z) },
      rem(x, z)      { return errorOprnd("NA_COMPL_OP", "rem") },
      and(x, z)      { return errorOprnd("NA_COMPL_OP", "and") },
      or(x, z)       { return errorOprnd("NA_COMPL_OP", "or") },
      xor(x, z)      { return errorOprnd("NA_COMPL_OP", "xor") }
    },
    vector: {
      // Binary operations with a scalar and a vector.
      // Perform element-wise operations.
      add(x, v)      { return v.map(e => Rnl.add(x, e)) },
      subtract(x, v) { return v.map(e => Rnl.subtract(x, e)) },
      multiply(x, v) { return v.map(e => Rnl.multiply(x, e)) },
      divide(x, v)   { return v.map(e => Rnl.divide(x, e)) },
      power(x, v)    { return v.map(e => Rnl.power(x, e)) },
      modulo(x, v)   { return v.map(e => Rnl.mod(x, e)) },
      rem(x, v)      { return v.map(e => Rnl.rem(x, e)) },
      and(x, v)      { return v.map(e => x && e) },
      or(x, v)       { return v.map(e => x || e) },
      xor(x, v)      { return v.map(e => x !== e) },
      concat(x, v)   { return [x, ...v] }
    },
    matrix: {
      // Binary operations with a scalar and a matrix.
      // Perform element-wise operations.
      add(x, m)      { return m.map(row => row.map(e => Rnl.add(x, e))) },
      subtract(x, m) { return m.map(row => row.map(e => Rnl.subtract(x, e))) },
      multiply(x, m) { return m.map(row => row.map(e => Rnl.multiply(x, e))) },
      divide(x, m)   { return m.map(row => row.map(e => Rnl.divide(x, e))) },
      power(x, m)    { return m.map(row => row.map(e => Rnl.power(x, e))) },
      modulo(x, m)   { return m.map(row => row.map(e => Rnl.mod(x, e))) },
      rem(x, m)      { return m.map(row => row.map(e => Rnl.rem(x, e))) },
      and(x, m)      { return m.map(row => row.map(e => x && e)) },
      or(x, m)       { return m.map(row => row.map(e => x || e)) },
      xor(x, m)      { return m.map(row => row.map(e => x !== e)) },
      concat(x, m)   { return errorOprnd("BAD_CONCAT") }
    },
    dataFrame: {
      multiply(x, df) {
        df.data = df.data.map(col => isNaN(col[0]) ? col : col.map(e => {
          let L = e.length;
          if (e.indexOf(".")) { L -= 1; }
          return Rnl.toStringSignificant(Rnl.multiply(x, Rnl.fromString(e)), L)
        }));
        return df
      },
      divide(x, df) {
        df.data = df.data.map(col => isNaN(col[0]) ? col : col.map(e => {
          let L = e.length;
          if (e.indexOf(".")) { L -= 1; }
          return Rnl.toStringSignificant(Rnl.divide(x, Rnl.fromString(e)), L)
        }));
        return df
      }
    },
    map: {
      // Binary operations with a scalar and a map.
      // Perform element-wise operations.
      add(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.add(scalar, e))
          : col
        );
        return map
      },
      subtract(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.subtract(scalar, e))
          : col
        );
        return map
      },
      multiply(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.multiply(scalar, e))
          : col
        );
        return map
      },
      divide(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.divide(scalar, e))
          : col
        );
        return map
      },
      power(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.power(scalar, e))
          : col
        );
        return map
      },
      modulo(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.mod(scalar, e))
          : col
        );
        return map
      },
      rem(scalar, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.rem(scalar, e))
          : col
        );
        return map
      },
      and(scalar, map) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map(e => scalar && e)
          : col
        );
        return map
      },
      or(scalar, map) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map(e => scalar || e)
          : col
        );
        return map
      },
      xor(scalar, map) {
        map.data =  map.data.map(col =>  typeof col[0] === "boolean"
          ? col.map(e => scalar !== e)
          : col
        );
        return map
      }
    }
  },

  complex: {
    scalar: {
      add(z, y)      { return [Rnl.add(z[0], y), z[1]] },
      subtract(z, y) { return [Rnl.subtract(z[0], y), z[1]] },
      multiply(z, y) { return [Rnl.multiply(z[0], y), Rnl.multiply(z[1], y) ] },
      divide(z, y)   { return Cpx.divide(z, [y, Rnl.zero]) },
      power(z, y)    { return Cpx.power(z, [y, Rnl.zero]) },
      rem(z, y)      { return errorOprnd("NA_COMPL_OP", "rem") },
      and(z, y)      { return errorOprnd("NA_COMPL_OP", "and") },
      or(z, y)       { return errorOprnd("NA_COMPL_OP", "or") },
      xor(z, y)      { return errorOprnd("NA_COMPL_OP", "xor") }
    },
    complex: {
      add(x, y)      { return [Rnl.add(x[0], y[0]), Rnl.add(x[1], y[1])] },
      subtract(x, y) { return [Rnl.subtract(x[0], y[0]), Rnl.subtract(x[1], y[1])] },
      multiply(x, y) { return Cpx.multiply(x, y) },
      divide(x, y)   { return Cpx.divide(x, y) },
      power(x, y)    { return Cpx.power(x, y) },
      rem(x, y)      { return errorOprnd("NA_COMPL_OP", "rem") },
      and(x, y)      { return errorOprnd("NA_COMPL_OP", "and") },
      or(x, y)       { return errorOprnd("NA_COMPL_OP", "or") },
      xor(x, y)      { return errorOprnd("NA_COMPL_OP", "xor") }

    }
  },

  vector: {
    scalar: {
      // Binary operations with a vector and a scalar.
      // Perform element-wise operations.
      add(v, x)      { return v.map(e => Rnl.add(e, x)) },
      subtract(v, x) { return v.map(e => Rnl.subtract(e, x)) },
      multiply(v, x) { return v.map(e => Rnl.multiply(e, x)) },
      divide(v, x)   { return v.map(e => Rnl.divide(e, x)) },
      power(v, x)    { return v.map(e => Rnl.power(e, x)) },
      modulo(v, x)   { return v.map(e => Rnl.mod(e, x)) },
      rem(v, x)      { return v.map(e => Rnl.rem(e, x)) },
      and(v, x)      { return v.map(e => e && x) },
      or(v, x)       { return v.map(e => e || x) },
      xor(v, x)      { return v.map(e => e !== x) },
      concat(v, x)   { return [...v, x]}
    }
  },

  rowVector: {
    rowVector: {
      // Binary operations on two row vectors.
      add(x, y) {
        // element-wise addition
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.add(e, y[i]))
      },
      subtract(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.subtract(e, y[i]))
      },
      divide(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.divide(e, y[i]))
      },
      dot(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return dotProduct$1(x, y)
      },
      cross(x, y) {
        if (x.length !== 3 || y.length !== 3) { return errorOprnd("CROSS") }
        const v = [Rnl.zero, Rnl.zero, Rnl.zero];
        v[0] = Rnl.subtract(Rnl.multiply(x[1], y[2]), Rnl.multiply(x[2], y[1]));
        v[1] = Rnl.subtract(Rnl.multiply(x[2], y[0]), Rnl.multiply(x[0], y[2]));
        v[2] = Rnl.subtract(Rnl.multiply(x[0], y[1]), Rnl.multiply(x[1], y[0]));
        return v
      },
      multiply(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.multiply(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      circ(x, y) {
        // Element-wise multiplication
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.multiply(e, y[i]))
      },
      power(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.power(e, y[i]))
      },
      modulo(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.mod(e, y[i]))
      },
      and(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => e && y[i])
      },
      or(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => e || y[i])
      },
      xor(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => e !== y[i])
      },
      concat(x, y) { return x.concat(y) },
      unshift(x, y) { return [x, y] }
    },
    columnVector: {
      // Binary operations on a row vector and a column vector.
      // Except for multiplication, these work only if both vectors have only one element.
      add(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.add(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      subtract(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.subtract(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      dot(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return dotProduct$1(x, y)
      },
      cross(x, y) {
        if (x.length !== 3 || y.length !== 3) { return errorOprnd("CROSS") }
        const v = [Rnl.zero, Rnl.zero, Rnl.zero];
        v[0] = Rnl.subtract(Rnl.multiply(x[1], y[2]), Rnl.multiply(x[2], y[1]));
        v[1] = Rnl.subtract(Rnl.multiply(x[2], y[0]), Rnl.multiply(x[0], y[2]));
        v[2] = Rnl.subtract(Rnl.multiply(x[0], y[1]), Rnl.multiply(x[1], y[0]));
        return v
      },
      multiply(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return dotProduct$1(x, y)
      },
      circ(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.multiply(e, y[i]))
      },
      power(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.power(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      modulo(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.mod(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      and(x, y) {
        if (x.length === 1 && y.length === 1) { return [x[0] && y[0]] }
        return errorOprnd("MIS_ELNUM")
      },
      or(x, y) {
        if (x.length === 1 && y.length === 1) { return [x[0] || y[0]] }
        return errorOprnd("MIS_ELNUM")
      },
      xor(x, y) {
        if (x.length === 1 && y.length === 1) { return [x[0] !== y[0]] }
        return errorOprnd("MIS_ELNUM")
      },
      concat(x, y)  { return "BAD_CONCAT" },
      unshift(x, y) { return "BAD_CONCAT" }
    },
    matrix: {
      // Binary operations on a row vector and a 2-D matrix.
      add(v, m) {
        // Add the row vector to each row in the matrix
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => row.map((e, i) => Rnl.add(v[i], e)))
      },
      subtract(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => row.map((e, i) => Rnl.subtract(v[i], e)))
      },
      multiply(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        m = m[0].map((x, i) => m.map(y => y[i])); // Transpose m
        return m.map(row => dotProduct$1(v, row))
      },
      circ(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => row.map((e, i) => Rnl.multiply(v[i], e)))
      },
      divide(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => row.map((e, i) => Rnl.divide(v[i], e)))
      },
      power(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => row.map((e, i) => Rnl.power(v[i], e)))
      },
      modulo(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => row.map((e, i) => Rnl.mod(v[i], e)))
      },
      concat(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("BAD_CONCAT") }
        return m.map((row, i) => [v[i], ...row])
      },
      unshift(v, m) {
        if (v.length !== m[0].length) { return errorOprnd("BAD_CONCAT") }
        return [v, ...m]
      }
    }
  },

  columnVector: {
    rowVector: {
      // Binary operations on a column vector and a row vector.
      // Except for multiplication, these work only if both vectors have only one element.
      add(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.add(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      subtract(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.subtract(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      dot(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return dotProduct$1(x, y)
      },
      cross(x, y) {
        if (x.length !== 3 || y.length !== 3) { return errorOprnd("CROSS") }
        const v = [Rnl.zero, Rnl.zero, Rnl.zero];
        v[0] = Rnl.subtract(Rnl.multiply(x[1], y[2]), Rnl.multiply(x[2], y[1]));
        v[1] = Rnl.subtract(Rnl.multiply(x[2], y[0]), Rnl.multiply(x[0], y[2]));
        v[2] = Rnl.subtract(Rnl.multiply(x[0], y[1]), Rnl.multiply(x[1], y[0]));
        return v
      },
      multiply(x, y) {
        if (x[0].length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map(row => y.map(e => Rnl.multiply(row, e)))
      },
      divide(x, y) {
        return x.map(m => y.map(e => Rnl.divide(m, e)))
      },
      circ(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.multiply(e, y[i]))
      },
      power(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.power(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      modulo(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.mod(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      and(x, y) {
        if (x.length === 1 && y.length === 1) { return [x[0] && y[0]] }
        return errorOprnd("MIS_ELNUM")
      },
      or(x, y) {
        if (x.length === 1 && y.length === 1) { return [x[0] || y[0]] }
        return errorOprnd("MIS_ELNUM")
      },
      xor(x, y) {
        if (x.length === 1 && y.length === 1) { return [x[0] !== y[0]] }
        return errorOprnd("MIS_ELNUM")
      },
      concat(x, y)  { return "BAD_CONCAT" },
      unshift(x, y) { return "BAD_CONCAT" }
    },
    columnVector: {
      // Binary operations on two column vectors.
      add(x, y) {
        // element-wise addition
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.add(e, y[i]))
      },
      subtract(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.subtract(e, y[i]))
      },
      divide(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.divide(e, y[i]))
      },
      dot(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return dotProduct$1(x, y)
      },
      cross(x, y) {
        if (x.length !== 3 || y.length !== 3) { return errorOprnd("CROSS") }
        const v = [Rnl.zero, Rnl.zero, Rnl.zero];
        v[0] = Rnl.subtract(Rnl.multiply(x[1], y[2]), Rnl.multiply(x[2], y[1]));
        v[1] = Rnl.subtract(Rnl.multiply(x[2], y[0]), Rnl.multiply(x[0], y[2]));
        v[2] = Rnl.subtract(Rnl.multiply(x[0], y[1]), Rnl.multiply(x[1], y[0]));
        return v
      },
      multiply(x, y) {
        if (x.length === 1 && y.length === 1) { return [Rnl.multiply(x[0], y[0])] }
        return errorOprnd("MIS_ELNUM")
      },
      circ(x, y) {
        // Element-wise multiplication
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.multiply(e, y[i]))
      },
      power(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.power(e, y[i]))
      },
      modulo(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.mod(e, y[i]))
      },
      rem(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => Rnl.rem(e, y[i]))
      },
      and(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => e && y[i])
      },
      or(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => e || y[i])
      },
      xor(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => e !== y[i])
      },
      concat(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((e, i) => [e, y[i]])
      },
      unshift(x, y) { return x.concat(y) }
    },
    matrix: {
      // Binary operations on a column vector and a 2-D matrix.
      add(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.add(v[i], e)))
      },
      subtract(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.subtract(v[i], e)))
      },
      multiply(v, m) {
        if (m.length !== 1) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.multiply(v[i], e)))
      },
      circ(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.multiply(v[i], e)))
      },
      divide(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.divide(v[i], e)))
      },
      power(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.power(v[i], e)))
      },
      mod(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => row.map(e => Rnl.mod(v[i], e)))
      },
      concat(v, m) {
        if (v.length !== m.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => [v[i], ...row])
      },
      unshift(x, y) { return "BAD_CONCAT" }
    },
    map: {
      // Binary operations between a column vector and a map
      add(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.add(vector[i], e))
          : col
        );
        return map
      },
      subtract(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.subtract(vector[i], e))
          : col
        );
        return map
      },
      multiply(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.multiply(vector[i], e))
          : col
        );
        return map
      },
      divide(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.divide(vector[i], e))
          : col
        );
        return map
      },
      power(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.power(vector[i], e))
          : col
        );
        return map
      },
      modulo(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.mod(vector[i], e))
          : col
        );
        return map
      },
      rem(vector, map) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.rem(vector[i], e))
          : col
        );
        return map
      },
      and(vector, map) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map((e, i) => vector[i] && e)
          : col
        );
        return map
      },
      or(vector, map) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map((e, i) => vector[i] || e)
          : col
        );
        return map
      },
      xor(vector, map) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map((e, i) => vector[i] !== e)
          : col
        );
        return map
      }
    }
  },

  matrix: {
    scalar: {
      // Binary operations with a matrix and a scalar.
      // Perform element-wise operations.
      add(m, x)      { return m.map(row => row.map(e => Rnl.add(e, x))) },
      subtract(m, x) { return m.map(row => row.map(e => Rnl.subtract(e, x))) },
      multiply(m, x) { return m.map(row => row.map(e => Rnl.multiply(e, x))) },
      divide(m, x)   { return m.map(row => row.map(e => Rnl.divide(e, x))) },
      power(m, x)    {
        if (m.length === m[0].length && Rnl.areEqual(x, [BigInt(-1), BigInt(1)])) {
          return Matrix.invert(m)
        }
        return m.map(row => row.map(e => Rnl.power(e, x)))
      },
      modulo(m, x) { return m.map(row => row.map(e => Rnl.mod(e, x))) },
      rem(m, x)    { return m.map(row => row.map(e => Rnl.rem(e, x))) }
    },
    rowVector: {
      add(m, v)      { return m.map(row => row.map((e, i) => Rnl.add(e, v[i]) )) },
      subtract(m, v) { return m.map(row => row.map((e, i) => Rnl.subtract(e, v[i]) )) },
      multiply(m, v) { return m.map(row => row.map((e, i) => Rnl.multiply(e, v[i]) )) },
      circ(m, v) { return m.map(row => row.map((e, i) => Rnl.multiply(e, v[i]) )) },
      divide(m, v)   { return m.map(row => row.map((e, i) => Rnl.divide(e, v[i]) )) },
      power(m, v)    { return m.map(row => row.map((e, i) => Rnl.power(e, v[i]) )) },
      modulo(m, v)   { return m.map(row => row.map((e, i) => Rnl.mod(e, v[i]) )) },
      rem(m, v)      { return m.map(row => row.map((e, i) => Rnl.rem(e, v[i]) )) },
      unshift(m, v) {
        if (m[0].length !== v.length) { return errorOprnd("MIS_ELNUM") }
        return [...m, v]
      }
    },
    columnVector: {
      add(m, v)      { return m.map((row, i) => row.map(e => Rnl.add(e, v[i]) )) },
      subtract(m, v) { return m.map((row, i) => row.map(e => Rnl.subtract(e, v[i]) )) },
      multiply(m, v) {
        // Multiply a matrix times a column vector
        if (m[0].length !== v.length) { return errorOprnd("MIS_ELNUM") }
        return m.map(row => dotProduct$1(row, v))
      },
      circ(m, v) { return m.map((row, i) => row.map(e => Rnl.multiply(e, v[i]) )) },
      divide(m, v)   { return m.map((row, i) => row.map(e => Rnl.divide(e, v[i]) )) },
      power(m, v)    { return m.map((row, i) => row.map(e => Rnl.power(e, v[i]) )) },
      modulo(m, v)   { return m.map((row, i) => row.map(e => Rnl.mod(e, v[i]) )) },
      rem(m, v)      { return m.map((row, i) => row.map(e => Rnl.rem(e, v[i]) )) },
      concat(m, v) {
        if (m.length !== v.length) { return errorOprnd("MIS_ELNUM") }
        return m.map((row, i) => [...row, v[i]])
      }
    },
    matrix: {
      // Binary operations on two 2-D matrices.
      add(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.add(n, y[i][j])))
      },
      subtract(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.subtract(n, y[i][j])))
      },
      dot(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((row, i) => dotProduct$1(row, y[i])).reduce((m, n) => Rnl.add(m, n))
      },
      cross(x, y) {
        return errorOprnd("CROSS")
      },
      multiply(x, y) {

      },
      circ(x, y) {
        // Element-wise multiplication
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.multiply(n, y[i][j])))
      },
      divide(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.divide(n, y[i][j])))
      },
      power(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.power(n, y[i][j])))
      },
      modulo(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.mod(n, y[i][j])))
      },
      rem(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => Rnl.rem(n, y[i][j])))
      },
      and(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => n && y[i][j]))
      },
      or(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => n || y[i][j]))
      },
      xor(x, y) {
        if (x.length !== y.length)       { return errorOprnd("MIS_ELNUM") }
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.map((m, i) => m.map((n, j) => n !== y[i][j]))
      },
      concat(x, y) {
        if (x.length !== y.length) { return errorOprnd("MIS_ELNUM") }
        return x.map((row, i) => row.concat(y[i]))
      },
      unshift(x, y) {
        if (x[0].length !== y[0].length) { return errorOprnd("MIS_ELNUM") }
        return x.concat(y)
      }
    },
    map: {

    }
  },

  dataFrame: {
    multiply(df, scalar) {
      df.data = df.data.map(col => isNaN(col[0]) ? col : col.map(e => {
        let L = e.length;
        if (e.indexOf(".")) { L -= 1; }
        return Rnl.toStringSignificant(Rnl.multiply(scalar, Rnl.fromString(e)), L)
      }));
      return df
    },
    divide(df, scalar) {
      df.data = df.data.map(col => isNaN(col[0]) ? col : col.map(e => {
        let L = e.length;
        if (e.indexOf(".")) { L -= 1; }
        return Rnl.toStringSignificant(Rnl.divide(scalar, Rnl.fromString(e)), L)
      }));
      return df
    }
  },

  map: {
    scalar: {
      // Binary opertions on a map and a scalar
      add(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.add(e, scalar))
          : col
        );
        return map
      },
      subtract(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.subtract(e, scalar))
          : col
        );
        return map
      },
      multiply(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.multiply(e, scalar))
          : col
        );
        return map
      },
      divide(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.divide(e, scalar))
          : col
        );
        return map
      },
      power(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.power(e, scalar))
          : col
        );
        return map
      },
      modulo(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.mod(e, scalar))
          : col
        );
        return map
      },
      rem(map, scalar) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map(e => Rnl.rem(e, scalar))
          : col
        );
        return map
      },
      and(map, scalar) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map(e => e && scalar)
          : col
        );
        return map
      },
      or(map, scalar) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map(e => e || scalar)
          : col
        );
        return map
      },
      xor(map, scalar) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map(e => e !== scalar)
          : col
        );
        return map
      }
    },
    columnVector: {
      add(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.add(e, vector[i]))
          : col
        );
        return map
      },
      subtract(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.subtract(e, vector[i]))
          : col
        );
        return map
      },
      multiply(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.multiply(e, vector[i]))
          : col
        );
        return map
      },
      divide(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.divide(e, vector[i]))
          : col
        );
        return map
      },
      power(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.power(e, vector[i]))
          : col
        );
        return map
      },
      modulo(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.mod(e, vector[i]))
          : col
        );
        return map
      },
      rem(map, vector) {
        map.data =  map.data.map(col => Rnl.isRational(col[0])
          ? col.map((e, i) => Rnl.rem(e, vector[i]))
          : col
        );
        return map
      },
      and(map, vector) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map((e, i) => e && vector[i])
          : col
        );
        return map
      },
      or(map, vector) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map((e, i) => e || vector[i])
          : col
        );
        return map
      },
      xor(map, vector) {
        map.data =  map.data.map(col => typeof col[0] === "boolean"
          ? col.map((e, i) => e !== vector[i])
          : col
        );
        return map
      }
    },
    matrix: {

    },
    map: {

    }
  }
};

// Binary relations get their own object, separate from other binary operations.
// That's because Hurmet allows chained comparisons, as in  a < b < c.
// So we have to pass yPrev as well as the two current operands.

const strOps = ["∈", "in", "∋", "⊇", "∉", "!in", "∌", "⊈", "⊉"];

const relations = {
  scalar: {
    scalar: {
      relate(op, x, y, yPrev) { return compare(op, x, y, yPrev) }
    },
    vector: {
      relate(op, x, v, yPrev) {
        if (yPrev === undefined) {
          return v.map(e => compare(op, x, e, undefined))
        } else if (typeof yPrev !== "object") {
          return v.map(e => compare(op, x, e, yPrev))
        } else if (Array.isArray(yPrev)) {
          return v.map((e, i) => compare(op, x, e, yPrev[i]))
        } else ;
      }
    },
    matrix: {
      relate(op, x, m, yPrev) {
        if (yPrev === undefined) {
          return m.map(row => row.map(e => compare(op, x, e, undefined)))
        } else if (typeof yPrev !== "object") {
          return m.map(row => row.map(e => compare(op, x, e, yPrev)))
        } else if (Array.isArray(yPrev)) {
          return m.map((row, i) => row.map((e, j) => compare(op, x, e, yPrev[i][j])))
        } else ;
      }
    },
    map: {
      relate(op, x, map, yPrev) {
        if (yPrev === undefined) {
          map.data =  map.data.map((column, j) =>
            j > 0 || typeof column[0] !== "string" || strOps.includes(op)
            ? column.map(e => compare(op, x, e, undefined))
            : column
          );
          return map
        }
      }
    }
  },
  vector: {
    scalar: {
      relate(op, v, y, yPrev) {
        if (yPrev === undefined) {
          return v.map(e => compare(op, e, y, undefined))
        } else if (typeof yPrev !== "object") {
          return v.map(e => compare(op, e, y, yPrev))
        } else if (Array.isArray(yPrev)) {
          return v.map((e, i) => compare(op, e, y, yPrev[i]))
        } else ;
      }
    }
  },
  rowVector: {
    rowVector: {
      relate(op, x, y, yPrev) {
        if (yPrev === undefined) {
          return x.map((e, i) => compare(op, e, y[i], undefined))
        }
      }
    },
    matrix: {
      relate(op, v, m, yPrev) {
        if (yPrev === undefined) {
          if (v.length !== m[0].length) { return errorOprnd("MIS_ELNUM") }
          return m.map(row => row.map((e, i) => compare(op, v[i], e, undefined)))
        }
      }
    }
  },
  columnVector: {
    columnVector: {
      relate(op, x, y, yPrev) {
        if (yPrev === undefined) {
          return x.map((e, i) => compare(op, e, y[i], undefined))
        }
      }
    },
    map: {
      relate(op, v, map, yPrev) {
        if (yPrev === undefined) {
          map.data =  map.data.map((column, j) =>
            j > 0 || typeof column[0] !== "string" || strOps.includes(op)
            ? column.map((e, i) => compare(op, v[i], e, undefined))
            : column
          );
          return map
        }
      }
    }
  },
  matrix: {
    scalar: {
      relate(op, m, y, yPrev) {
        if (yPrev === undefined) {
          return m.map(row => row.map(e => compare(op, e, y, undefined)))
        } else if (typeof yPrev !== "object") {
          return m.map(row => row.map(e => compare(op, e, y, yPrev)))
        } else if (Array.isArray(yPrev)) {
          return m.map((row, i) => row.map((e, j) => compare(op, e, y, yPrev[i][j])))
        } else ;
      }
    },
    matrix: {
      relate(op, m1, m2, yPrev) {
        if (yPrev === undefined) {
          return m1.map((e, i) => compare(op, e, m2[i], undefined))
        }
      }
    }
  }
};

const isDivByZero = (quotient, shape) => {
  switch (shape) {
    case "scalar":
      return quotient[1] === BigInt(0)
    case "vector":
      for (let i = 0; i < quotient.length; i++) {
        if (quotient[i][1] === BigInt(0)) { return true }
      }
      return false
    case "matrix":
      for (let i = 0; i < quotient.length; i++) {
        for (let j = 0; j < quotient[0].length; j++) {
          if (quotient[i][j][1] === BigInt(0)) { return true }
        }
      }
      return false
    case "map":
      for (let j = 0; j < quotient.data[0].length; j++) {
        if (Rnl.isRational(quotient.data[j][0])) {
          for (let i = 0; i < quotient.data.length; i++) {
            if (quotient.data[i][j][1] === BigInt(0)) { return true }
          }
        }
      }
      return false
    default:
      return false
  }
};

const Operators = Object.freeze({
  unary,
  binary,
  relations,
  condition,
  dtype
});

const wideCharRegEx = /[\uD800-\uDBFF][\uDC00-\uDFFF][\uFE00\uFE01]?/g;

const findfirst = (searchString, str) => {
  const index = str.value.indexOf(searchString.value);
  const wideCharMatches = arrayOfRegExMatches(wideCharRegEx, str.value.slice(0, index));
  return Rnl.fromNumber(index + wideCharMatches.length + 1)
};

const textRange = (str, index) => {
  // Find a range of the string str
  if (index.dtype !== dt.RATIONAL && index.dtype !== dt.RANGE) {
    return errorOprnd("STR_INDEX")
  }

  const strArray = Array.from(str);
  let value = "";
  if (index.dtype === dt.RATIONAL) {
    const pos = Rnl.toNumber(index.value) - 1;
    value = strArray.at(pos);
  } else if (index.dtype === dt.RANGE) {
    const start = Rnl.toNumber(index.value[0]);
    const step = Rnl.toNumber(index.value[1]);
    const end = index.value[2] === "∞"
      ? str.length
      : Rnl.toNumber(index.value[2]);
    if (step === 1) {
      value = strArray.slice(start - 1, end).join("");
    } else {
      for (let i = start - 1; i < end; i += step) {
        value += strArray.at(i);
      }

    }
  }

  return { value, unit: null, dtype: dt.STRING }
};

const startSvg = _ => {
  return {
    tag: 'svg',
    children: [],
    attrs: {
      xmlns: "http://www.w3.org/2000/svg",
      width: 250,
      height: 250,
      style: "display: inline;"
    },
    temp: {
      width: 250,
      height: 250,
      xmin: 0,
      xmax: 5,
      ymin: 0,
      ymax: 5,
      xunitlength: 20,  // px
      yunitlength: 20,  // px
      origin: [0, 0],   // in px (default is bottom left corner)
      stroke: "black",
      strokewidth: 1,
      strokedasharray: null,
      fill: "none",
      fontstyle: "normal",
      fontfamily: "sans-serif",
      fontsize: 13.33, // px, ~10 pt
      fontweight: "normal",
      markerstrokewidth: 1,
      markerstroke: "black",
      markerfill: "yellow",
      markersize: 4,
      marker: "none",
      dotradius: 4,
      axesstroke: "black",
      gridstroke: "grey",
      isDim: false
    }
  }
};

// Helpers
const setStrokeAndFill = (node, attrs) => {
  node.attrs["stroke-width"] = attrs.strokewidth;
  node.attrs.stroke = attrs.stroke;
  node.attrs.fill = attrs.fill;
  if (attrs.strokedasharray != null && attrs.strokedasharray !== "none") {
    node.attrs["stroke-dasharray"] = attrs.strokedasharray;
  }
};

const pointZeroRegEx = /\.0+$/;
const chopZ = str => {
  const k = str.indexOf(".");
  if (k === -1) { return str }
  if (pointZeroRegEx.test(str)) { return str.replace(pointZeroRegEx, "") }
  let i;
  for (i = str.length - 1; i > k && str.charAt(i) === "0"; i--) {
    if (i === k) { i--; }
  }
  return str.slice(0, i + 1)
};

const markerDot = (center, attrs, s, f) => { // coordinates in units, radius in pixel
  if (s == null) { s = attrs.stroke; }
  if (f == null) { f = attrs.fill; }
  const node = { tag: "circle", attrs: {} };
  node.attrs.cx = center[0] * attrs.xunitlength + attrs.origin[0];
  node.attrs.cy = attrs.height - center[1] * attrs.yunitlength - attrs.origin[1];
  node.attrs.r = attrs.markersize;
  node.attrs["stroke-width"] = attrs.strokewidth;
  node.attrs.stroke = s;
  node.attrs.fill = f;
  return node
};

const rationals2numbers = array => {
  const newArray = [];
  for (let i = 0; i < array.length; i++) {
    const element = array[i];
    if (element.dtype) {
      newArray[i] = rationals2numbers(element.value);
    } else if (Rnl.isRational(element)) {
      newArray[i] = Rnl.toNumber(element);
    } else {
      newArray[i] = rationals2numbers(element);
    }
  }
  return newArray
};

const arrowhead = (svg, p, q) => { // draw arrowhead at q (in units)
  const attrs = svg.temp;
  const v = [p[0] * attrs.xunitlength + attrs.origin[0], attrs.height -
             p[1] * attrs.yunitlength - attrs.origin[1]];
  const w = [q[0] * attrs.xunitlength + attrs.origin[0], attrs.height -
             q[1] * attrs.yunitlength - attrs.origin[1]];
  let u = [w[0] - v[0], w[1] - v[1]];
  const d = Math.sqrt(u[0] * u[0] + u[1] * u[1]);
  if (d > 0.00000001) {
    u = [u[0] / d, u[1] / d];
    const z = attrs.marker === "markerdot" ? 3 : attrs.isDim ? 0 : 1;
    const up = [-u[1], u[0]];
    const L = d > 12 ? 12.5 : 7.8125;
    const S = d > 12 ? 3 : 1.875;
    const node = { tag: "path", attrs: {} };
    node.attrs.d = "M " + (w[0] - L * u[0] - S * up[0]) + "," +
      (w[1] - L * u[1] - S * up[1]) + " L " + (w[0] - z * u[0]) + "," + (w[1] - z * u[1]) +
      " L " + (w[0] - L * u[0] + S * up[0]) + "," + (w[1] - L * u[1] + S * up[1]) + " z";
    if (attrs.isDim) {
      node.attrs.stroke = "none";
    } else {
      node.attrs["stroke-width"] = attrs.markerstrokewidth;
      node.attrs.stroke = attrs.stroke;
    }
    node.attrs.fill = attrs.stroke;
    svg.children.push(node);
  }
};

const markAttribute = {
  em:         ["font-style", "italic"],
  strong:     ["font-weight", "bold"],
  code:       ["font-family", "monospace"],
  strikethru: ["text-decoration", "line-through"],
  subscript:  ["font-size", "0.8em"]
};

const textLocal = (svg, p, str, pos) => {
  const attrs = svg.temp;
  let textanchor = "middle";
  let dx = 0;
  let dy = attrs.fontsize / 3;
  if (pos != null) {
    if (pos.slice(0, 5) === "above") { dy = -attrs.fontsize / 2; }
    if (pos.slice(0, 5) === "below") { dy = 1.25 * attrs.fontsize; }
    if (pos.slice(0, 5) === "right" || pos.slice(5, 10) === "right") {
      textanchor = "start";
      dx = attrs.fontsize / 2;
    }
    if (pos.slice(0, 4) === "left" || pos.slice(5, 9) === "left") {
      textanchor = "end";
      dx = -attrs.fontsize / 2;
    }
  }
  const textNode = { tag: "text", children: [], attrs: {} };
  textNode.attrs["text"] = str;
  textNode.attrs.x = p[0] * attrs.xunitlength + attrs.origin[0] + dx;
  textNode.attrs.y = attrs.height - p[1] * attrs.yunitlength - attrs.origin[1] + dy;
  textNode.attrs["font-family"] = attrs.fontfamily;
  textNode.attrs["font-size"] = attrs.fontsize;
  textNode.attrs["text-anchor"] = textanchor;
  // Load Markdown into an AST
  const ast = inlineMd2ast(str);
  // Load content of AST into <tspan> nodes.
  if (Array.isArray(ast)) {
    let prevNodeContainedSubscript = false;
    for (const markNode of ast) {
      const tspan = { tag: "tspan", text: markNode.text };
      let currentNodeContainsSubscript = false;
      if (markNode.marks) {
        tspan.attrs = {};
        for (const mark of markNode.marks) {
          const markAttr = markAttribute[mark.type];
          tspan.attrs[markAttr[0]] = markAttr[1];
          if (mark.type === "subscript") { currentNodeContainsSubscript = true; }
        }
      }
      if (currentNodeContainsSubscript) {
        if (!prevNodeContainedSubscript) { tspan.attrs.dy  = "2"; }
      } else if (prevNodeContainedSubscript) {
        if (!markNode.marks) { tspan.attrs = {}; }
        tspan.attrs.dy  = "-2";
      }
      prevNodeContainedSubscript = currentNodeContainsSubscript;
      textNode.children.push(tspan);
    }
  }
  svg.children.push(textNode);
  return svg
};

const pointText = (point, attrs) => {
  return (point[0] * attrs.xunitlength + attrs.origin[0]).toFixed(4) + ","
    + (attrs.height - point[1] * attrs.yunitlength - attrs.origin[1]).toFixed(4)
};

const functions$1 = {
  // Set attributes
  stroke(svgOprnd, color) {
    svgOprnd.value.temp.stroke = color.value;
    return svgOprnd
  },

  strokewidth(svgOprnd, num) {
    svgOprnd.value.temp.strokewidth = Rnl.toNumber(num.value);
    return svgOprnd
  },

  strokedasharray(svgOprnd, str) {
    svgOprnd.value.temp.strokedasharray = str.value;
    return svgOprnd
  },

  fill(svgOprnd, color) {
    svgOprnd.value.temp.fill = color.value;
    return svgOprnd
  },

  fontsize(svgOprnd, size) {
    svgOprnd.value.temp.fontsize = Rnl.toNumber(size.value);
    return svgOprnd
  },

  fontfamily(svgOprnd, str) {
    svgOprnd.value.temp.fontfamily = str.value; // "sansserif"|"serif"|"fixed"|"monotype"
    return svgOprnd
  },

  marker(svgOprnd, str) {
    svgOprnd.value.temp.marker = str.value; // "none" | "dot" | "arrow" | "arrowdot"
    return svgOprnd
  },

  // Initialize the svg.

  title(svgOprnd, strOprnd) {
    svgOprnd.value.children.push( { tag: "title", attrs: { text: strOprnd.value } });
    return svgOprnd
  },

  frame(svgOprnd, width = 250, height = 250, position = "inline") {
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    attrs.width = typeof width === "number" ? width : Rnl.toNumber(width.value);
    svg.attrs.width = attrs.width;
    attrs.height = typeof height === "number" ? height : Rnl.toNumber(height.value);
    svg.attrs.height = attrs.height;
    if (typeof position !== "string") { position = position.value; }
    if (position !== "inline") { svg.attrs.float = position; }
    attrs.xunitlength = attrs.width / (attrs.xmax - attrs.xmin);
    attrs.yunitlength = attrs.height / (attrs.ymax - attrs.ymin);
    attrs.origin = [-attrs.xmin * attrs.xunitlength, -attrs.ymin * attrs.yunitlength];
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  view(svgOprnd, xmin = 0, xmax = 5, ymin, ymax) {
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    attrs.xmin = typeof xmin === "number" ? xmin : Rnl.toNumber(xmin.value);
    attrs.xmax = typeof xmax === "number" ? xmax : Rnl.toNumber(xmax.value);
    attrs.xunitlength = attrs.width / (attrs.xmax - attrs.xmin);
    attrs.yunitlength = attrs.xunitlength; // This may change below.
    if (ymin == null) {
      attrs.origin = [-attrs.xmin * attrs.xunitlength, attrs.height / 2];
      attrs.ymin = -attrs.height / (2 * attrs.yunitlength);
      attrs.ymax = -attrs.ymin;
    } else {
      attrs.ymin = Rnl.toNumber(ymin.value);
      if (ymax != null) {
        attrs.ymax = Rnl.toNumber(ymax.value);
        attrs.yunitlength = attrs.height / (attrs.ymax - attrs.ymin);
      } else {
        attrs.ymax = attrs.height / attrs.yunitlength + attrs.ymin;
      }
      attrs.origin = [-attrs.xmin * attrs.xunitlength, -attrs.ymin * attrs.yunitlength];
    }
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  // Draw things

  grid(svgOprnd, gdx, gdy, isLocal) {
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    gdx = gdx == null ? attrs.xunitlength : Rnl.toNumber(gdx.value) * attrs.xunitlength;
    gdy = gdy == null ? gdx : Rnl.toNumber(gdy.value) * attrs.yunitlength;
    const pnode = { tag: "path", attrs: {} };
    let str = "";
    for (let x = attrs.origin[0]; x < attrs.width; x += gdx) {
      str += " M" + x + ",0 " + x + "," + attrs.height;
    }
    for (let x = attrs.origin[0] - gdx; x > 0; x -= gdx) {
      str += " M" + x + ",0 " + x + "," + attrs.height;
    }
    for (let y = attrs.height - attrs.origin[1]; y < attrs.height; y += gdy) {
      str += " M0," + y + " " + attrs.width + "," + y;
    }
    for (let y = attrs.height - attrs.origin[1] - gdy; y > 0; y -= gdy) {
      str += " M0," + y + " " + attrs.width + "," + y;
    }
    pnode.attrs.d = str;
    pnode.attrs["stroke-width"] = 0.5;
    pnode.attrs.stroke = attrs.gridstroke;
    pnode.attrs.fill = attrs.fill;
    svg.children.push(pnode);
    if (!isLocal) {
      return { value: svg, unit: null, dtype: dt.DRAWING }
    }
  },

  axes(svgOprnd, dx, dy, labels, gdx, gdy) {
    let svg = svgOprnd.value;
    const attrs = svg.temp;
    dx = (dx == null ? attrs.xunitlength : Rnl.toNumber(dx.value) * attrs.xunitlength);
    dy = (dy == null ? dx : Rnl.toNumber(dy.value) * attrs.yunitlength);
    const parentFontsize = attrs.fontsize;
    attrs.fontsize = Math.min(dx / 2, dy / 2, 10);
    const ticklength = attrs.fontsize / 4;
    if (gdx != null) {
      this.grid(svgOprnd, gdx, gdy, true);
    }
    const pnode = { tag: "path", attrs: {} };
    let str = "M0," + (attrs.height - attrs.origin[1]) + " " + attrs.width + "," +
      (attrs.height - attrs.origin[1]) + " M" + attrs.origin[0] + ",0 " +
      attrs.origin[0] + "," + attrs.height;
    for (let x = attrs.origin[0] + dx; x < attrs.width; x += dx) {
      str += " M" + x + " " + (attrs.height - attrs.origin[1] + ticklength) + " " + x
            + "," + (attrs.height - attrs.origin[1] - ticklength);
    }
    for (let x = attrs.origin[0] - dx; x > 0; x -= dx) {
      str += " M" + x + "," + (attrs.height - attrs.origin[1] + ticklength) + " " + x
            + "," + (attrs.height - attrs.origin[1] - ticklength);
    }
    for (let y = attrs.height - attrs.origin[1] + dy; y < attrs.height; y += dy) {
      str += " M" + (attrs.origin[0] + ticklength) + "," + y + " " +
                   (attrs.origin[0] - ticklength) + "," + y;
    }
    for (let y = attrs.height - attrs.origin[1] - dy; y > 0; y -= dy) {
      str += " M" + (attrs.origin[0] + ticklength) + "," + y + " " +
                   (attrs.origin[0] - ticklength) + "," + y;
    }
    if (labels != null) {
      const ldx = dx / attrs.xunitlength;
      const ldy = dy / attrs.yunitlength;
      const lx = (attrs.xmin > 0 || attrs.xmax < 0 ? attrs.xmin : 0);
      const ly = (attrs.ymin > 0 || attrs.ymax < 0 ? attrs.ymin : 0);
      const lxp = (ly === 0 ? "below" : "above");
      const lyp = (lx === 0 ? "left" : "right");
      const ddx = Math.floor(1.1 - Math.log(ldx) / Math.log(10)) + 1;
      const ddy = Math.floor(1.1 - Math.log(ldy) / Math.log(10)) + 1;
      for (let x = ldx; x <= attrs.xmax; x += ldx) {
        svg = textLocal(svg, [x, ly], chopZ(x.toFixed(ddx)), lxp);
      }
      for (let x = -ldx; attrs.xmin <= x; x -= ldx) {
        svg = textLocal(svg, [x, ly], chopZ(x.toFixed(ddx)), lxp);
      }
      for (let y = ldy; y <= attrs.ymax; y += ldy) {
        svg = textLocal(svg, [lx, y], chopZ(y.toFixed(ddy)), lyp);
      }
      for (let y = -ldy; attrs.ymin <= y; y -= ldy) {
        svg = textLocal(svg, [lx, y], chopZ(y.toFixed(ddy)), lyp);
      }
    }
    pnode.attrs.d = str;
    pnode.attrs["stroke-width"] = 0.5;
    pnode.attrs.stroke = attrs.axesstroke;
    pnode.attrs.fill = attrs.fill;
    svg.temp.fontsize = parentFontsize;
    svg.children.push(pnode);
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  line(svgOprnd, m) { // segment connecting points p,q (coordinates in units)
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    const node = { tag: "path", attrs: {} };
    const p = [Rnl.toNumber(m.value[0][0]), Rnl.toNumber(m.value[0][1])];
    const q = [Rnl.toNumber(m.value[1][0]), Rnl.toNumber(m.value[1][1])];
    node.attrs.d = "M" + (p[0] * attrs.xunitlength + attrs.origin[0]) + "," +
      (attrs.height - p[1] * attrs.yunitlength - attrs.origin[1]) + " " +
      (q[0] * attrs.xunitlength + attrs.origin[0]) + "," + (attrs.height -
       q[1] * attrs.yunitlength - attrs.origin[1]);
    setStrokeAndFill(node, attrs);
    svg.children.push(node);
    if (attrs.marker === "dot" || attrs.marker === "arrowdot") {
      svg.children.push(markerDot(p, attrs, attrs.markerstroke, attrs.markerfill));
      if (attrs.marker === "arrowdot") { arrowhead(svg, p, q); }
      svg.children.push(markerDot(q, attrs, attrs.markerstroke, attrs.markerfill));
    } else if (attrs.marker === "arrow") {
      arrowhead(svg, p, q);
    }
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  path(svgOprnd, args) {
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    const node = { tag: "path", attrs: {} };
    // Get the "d" attribute of a path
    let str = "";
    if (args[0].dtype && args[0].dtype === dt.STRING) {
      str = args[0].value;
    } else {
      const segs = rationals2numbers(args[0].value);
      if (segs[0].length === 2) {
        // A path made up of line segments
        str = "M" + pointText(segs[0], attrs) + " L";
        for (let i = 1; i < segs.length; i++) {
          str += " " + pointText(segs[i], attrs);
        }
      } else if (segs[0].length === 3) {
        // Some segments are circular arcs.
        str = "M" + pointText(segs[0], attrs);
        for (let i = 1; i < segs.length; i++) {
          if (segs[i][2] === 0) {
            str += " L" + pointText(segs[i], attrs);
          } else {
            const r = String(Math.abs(segs[i][2]) * attrs.xunitlength);
            const sweep = Math.sign(segs[i][2]) > 0 ? 0 : 1;
            str += ` A${r},${r} 0 0 ${sweep} ${pointText(segs[i], attrs)}`;
          }
        }
      }
    }
    node.attrs.d = str;
    node.attrs["stroke-width"] = attrs.strokewidth;
    if (attrs.strokedasharray != null) {
      node.attrs["stroke-dasharray"] = attrs.strokedasharray;
    }
    node.attrs.stroke = attrs.stroke;
    node.attrs.fill = attrs.fill;
    if (attrs.marker === "dot") {
      for (let i = 0; i < args.length; i++) {
        const el = args[i];
        if (typeof el[0] === "number") {
          svg.children.push(markerDot(el, attrs, attrs.markerstroke, attrs.markerfill));
        } else {
          for (const row of el) {
            svg.children.push(markerDot(row, attrs, attrs.markerstroke, attrs.markerfill));
          }
        }
      }
    } else if (attrs.marker === "arrow" || attrs.marker === "arrowdot") {
      const segs = rationals2numbers(args[0].value);
      if (typeof segs[0] !== "number") {
        const end = segs[segs.length - 1];
        arrowhead(svg, segs[segs.length - 2], end);
        if (attrs.marker === "arrowdot") {
          svg.children.push(markerDot(end, attrs, attrs.markerstroke, attrs.markerfill));
        }
      } else if (typeof segs[0] === "number") {
        const prevEl = args[args.length - 2];
        const end = segs;
        let start;
        if (typeof prevEl[0] === "number") {
          start = prevEl;
        } else {
          start = prevEl[prevEl.length - 1];
        }
        arrowhead(svg, start, end);
        if (attrs.marker === "arrowdot") {
          svg.children.push(markerDot(end, attrs, attrs.markerstroke, attrs.markerfill));
        }
      }
    }
    svg.children.push(node);
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  rect(svgOprnd, m, r) { // opposite corners in units, rounded by radius
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    const node = { tag: "rect", attrs: {} };
    const p = [Rnl.toNumber(m.value[0][0]), Rnl.toNumber(m.value[0][1])];
    const q = [Rnl.toNumber(m.value[1][0]), Rnl.toNumber(m.value[1][1])];
    node.attrs.x = Math.min(p[0], q[0]) * attrs.xunitlength + attrs.origin[0];
    node.attrs.y = attrs.height - Math.max(p[1], q[1]) * attrs.yunitlength - attrs.origin[1];
    node.attrs.width = Math.abs((q[0] - p[0]) * attrs.xunitlength);
    node.attrs.height = Math.abs((q[1] - p[1]) * attrs.yunitlength);
    if (r != null) {
      const rNum = Rnl.toNumber(r.value) * attrs.xunitlength;
      node.attrs.rx = rNum;
      node.attrs.ry = rNum;
    }
    setStrokeAndFill(node, attrs);
    svg.children.push(node);
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  circle(svgOprnd, center, radius) { // coordinates in units
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    const node = { tag: "circle", attrs: {} };
    node.attrs.cx = Rnl.toNumber(center.value[0]) * attrs.xunitlength + attrs.origin[0];
    node.attrs.cy = attrs.height - Rnl.toNumber(center.value[1]) * attrs.yunitlength
                  - attrs.origin[1];
    node.attrs.r = Rnl.toNumber(radius.value) * attrs.xunitlength;
    setStrokeAndFill(node, attrs);
    svg.children.push(node);
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  ellipse(svgOprnd, center, rx, ry) { // coordinates in units
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    const node = { tag: "ellipse", attrs: {} };
    node.attrs.cx = Rnl.toNumber(center.value[0]) * attrs.xunitlength + attrs.origin[0];
    node.attrs.cy = attrs.height - Rnl.toNumber(center.value[1]) * attrs.yunitlength
                    - attrs.origin[1];
    node.attrs.rx = Rnl.toNumber(rx.value) * attrs.xunitlength;
    node.attrs.ry = Rnl.toNumber(ry.value) * attrs.yunitlength;
    setStrokeAndFill(node, attrs);
    svg.children.push(node);
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  arc(svgOprnd, m, radius) { // coordinates in units
    const svg = svgOprnd.value;
    const attrs = svg.temp;
    const node = { tag: "path", attrs: {} };
    const start = [Rnl.toNumber(m.value[0][0]), Rnl.toNumber(m.value[0][1])];
    const end = [Rnl.toNumber(m.value[1][0]), Rnl.toNumber(m.value[1][1])];
    if (radius == null) {
      const v = [end[0] - start[0], end[1] - start[1]];
      radius = (Math.sqrt(v[0] * v[0] + v[1] * v[1])) * attrs.yunitlength;
    } else if (isVector(radius)) {
      radius = radius.value.map(e => Rnl.toNumber(e) * attrs.yunitlength);
    } else {
      radius = Rnl.toNumber(radius.value) * attrs.yunitlength;
    }
    let str = "M" + (start[0] * attrs.xunitlength + attrs.origin[0]) + "," +
      (attrs.height - start[1] * attrs.yunitlength - attrs.origin[1]) + " A";
    str += Array.isArray(radius) ? radius[0] + "," + radius[1] : radius + "," + radius;
    str += " 0 0,0 " + (end[0] * attrs.xunitlength + attrs.origin[0]) + "," +
      (attrs.height - end[1] * attrs.yunitlength - attrs.origin[1]);
    node.attrs.d = str;
    setStrokeAndFill(node, attrs);
    let v = 0;
    if (attrs.marker === "arrow" || attrs.marker === "arrowdot") {
      const u = [(end[1] - start[1]) / 4, (start[0] - end[0]) / 4];
      v = [(end[0] - start[0]) / 2, (end[1] - start[1]) / 2];
      v = [start[0] + v[0] + u[0], start[1] + v[1] + u[1]];
    } else {
      v = [start[0], start[1]];
    }
    if (attrs.marker === "dot" || attrs.marker === "arrowdot") {
      svg.children.push(markerDot(start, attrs, attrs.markerstroke, attrs.markerfill));
      if (attrs.marker === "arrowdot") { arrowhead(svg,  v, end); }
      svg.children.push(markerDot(end, attrs, attrs.markerstroke, attrs.markerfill));
    } else if (attrs.marker === "arrow") {
      arrowhead(svg, v, end);
    }
    svg.children.push(node);
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  text(svgOprnd, p, str, pos) {
    const svg = textLocal(
      svgOprnd.value,
      [Rnl.toNumber(p.value[0]), Rnl.toNumber(p.value[1])],
      str.value,
      pos == null ? null : pos.value
      );
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  dot(svgOprnd, center, typ, label, pos) {
    let svg = svgOprnd.value;
    const attrs = svg.temp;
    let node;
    const cx = Rnl.toNumber(center.value[0]) * attrs.xunitlength + attrs.origin[0];
    const cy = attrs.height - Rnl.toNumber(center.value[1]) * attrs.yunitlength
             - attrs.origin[1];
    if (typ.value === "+" || typ.value === "-" || typ.value === "|") {
      node = { tag: "path", attrs: {} };
      if (typ.value === "+") {
        node.attrs.d = " M " + (cx - attrs.ticklength) + "," + cy
                    + " L " + ( cx + attrs.ticklength) + "," + cy
                    + " M " + cx + "," + (cy - attrs.ticklength) + " L " + cx
                    + "," + (cy + attrs.ticklength);
        node.attrs["stroke-width"] = 0.5;
        node.attrs.stroke = attrs.axesstroke;
      } else {
        if (typ.value === "-") {
          node.attrs.d = " M " + (cx - attrs.ticklength) + "," + cy
                       + " L " + (cx + attrs.ticklength) + "," + cy;
        } else {
          node.attrs.d = " M " + cx + "," + (cy - attrs.ticklength)
                       + " L " + cx + "," + (cy + attrs.ticklength);
        }
        node.attrs["stroke-width"] = attrs.strokewidth;
        node.attrs["stroke"] = attrs.stroke;
      }
    } else {
      node = { tag: "circle", attrs: {} };
      node.attrs.cx = cx;
      node.attrs.cy = cy;
      node.attrs.r = attrs.dotradius;
      node.attrs["stroke-width"] = attrs.strokewidth;
      node.attrs.stroke = attrs.stroke;
      node.attrs.fill =  (typ.value === "open" ? "white" : attrs.stroke);
    }
    svg.children.push(node);
    if (label != null) {
      svg = textLocal(
        svg,
        [Rnl.toNumber(center.value[0]), Rnl.toNumber(center.value[1])],
        label.value,
        (pos == null ? "below" : pos.value)
        );
    }
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  leader(svgOprnd, plistOprnd, label) {
    const marker = svgOprnd.value.temp.marker;
    svgOprnd.value.temp.marker = "arrow";
    svgOprnd.value.temp.isDim = true;
    const plistCopy = clone(plistOprnd); // Copy to an un-frozen object.
    plistCopy.value.reverse();
    svgOprnd = this.path(plistCopy);
    const p = rationals2numbers(plistCopy.value[0]);
    const q = rationals2numbers(plistCopy.value[plistCopy.value.length - 1]);
    let pos = "right";
    if (Math.abs(p[0] - q[0]) >= Math.abs(p[1] - q[1])) {
      pos = p[0] >= q[0] ? "right" : "left";
    } else {
      pos = p[1] < q[1] ? "below" : "above";
    }
    const svg = textLocal(svgOprnd.value, p, label.value, pos);
    svg.temp.marker = marker;
    svg.temp.isDim = false;
    return { value: svg, unit: null, dtype: dt.DRAWING }
  },

  dimension(svgOprnd, plistOprnd, label) {
    const p = clone(plistOprnd.value);
    const q = p.pop();
    const origstrokewidth = svgOprnd.value.temp.strokewidth;
    svgOprnd.value.temp.strokewidth = 0.5;
    svgOprnd.value.temp.isDim = true; // set small arrowhead
    let six = Rnl.fromNumber(6 / svgOprnd.value.temp.xunitlength);
    const pEnd = p[p.length - 1];
    let svg;
    // Is the label y-coord between the y-coords of the end points?
    if ((Rnl.lessThan(p[0][1], q[1]) && Rnl.lessThan(q[1], pEnd[1])) ||
        (Rnl.lessThan(pEnd[1], q[1]) && Rnl.lessThan(q[1], p[0][1]))) {
      if (!Rnl.lessThan(pEnd[0], q[0])) { six = Rnl.negate(six); }
      p.forEach(e => {
        svgOprnd = this.line(svgOprnd, { value: [
          [Rnl.add(e[0], six), e[1]],
          [Rnl.add(q[0], six), e[1]]
        ] });
      });
      svgOprnd.value.temp.marker = "arrow";
      const pos = Rnl.lessThanOrEqualTo(pEnd[0], q[0]) ? "right" : "left";
      for (let i = 0; i < p.length - 1; i++) {
        svgOprnd = this.line(svgOprnd, { value : [[q[0], p[i][1]], [q[0], p[i + 1][1]]],
          unit: null, dtype: dt.MATRIX });
        svgOprnd = this.line(svgOprnd, { value : [[q[0], p[i + 1][1]], [q[0], p[i][1]]],
          unit: null, dtype: dt.MATRIX });
        const p3 = [
          Rnl.toNumber(q[0]),
          (Rnl.toNumber(p[i][1]) + Rnl.toNumber(p[i + 1][1])) / 2
        ];
        const str = p.length === 2 ? label.value : label.value[i];
        svg = textLocal(svgOprnd.value, p3, str, pos);
      }
    } else {
      if (!Rnl.lessThan(pEnd[1], q[1])) { six = Rnl.negate(six); }
      p.forEach(e => {
        svgOprnd = this.line(svgOprnd, { value: [
          [e[0], Rnl.add(e[1], six)],
          [e[0], Rnl.add(q[1], six)]
        ] });
      });
      svgOprnd.value.temp.marker = "arrow";
      const pos = Rnl.lessThanOrEqualTo(pEnd[1], q[1]) ? "above" : "below";
      for (let i = 0; i < p.length - 1; i++) {
        svgOprnd = this.line(svgOprnd, { value: [ [p[i][0], q[1]], [ p[i + 1][0], q[1]] ],
          unit: null, dtype: dt.MATRIX });
        svgOprnd = this.line(svgOprnd, { value: [ [ p[i + 1][0], q[1]], [p[i][0], q[1]] ],
          unit: null, dtype: dt.MATRIX });
        const p3 = [
          (Rnl.toNumber(p[i][0]) + Rnl.toNumber(p[i + 1][0])) / 2,
          Rnl.toNumber(q[1])
        ];
        const str = p.length === 2 ? label.value : label.value[i];
        svg = textLocal(svgOprnd.value, p3, str, pos);
      }
    }
    svg.temp.strokewidth = origstrokewidth;
    svg.temp.marker = "none";
    svg.temp.isDim = false;
    return { value: svg, unit: null, dtype: dt.DRAWING }
  }

};

const draw = Object.freeze({
  startSvg,
  functions: functions$1
});

// Some helper functions and objects.

// Lengths and x-coordinates are written as rational numbers, not floating point.
// That way, we can make a lessThanOrEqualTo comparison w/o floating point errors.

const ord = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth"];

const loadTypesFromInput = factorInput => {
  let doLiveLoadPatterns = false;
  const headings = factorInput.headings || null;
  const loadTypeMap = Object.create(null);
  const getsPattern = new Array(9).fill(false);
  if (factorInput === "service" || !factorInput) {
    return [null, getsPattern, 1, doLiveLoadPatterns]
  }
  for (let i = 0; i < headings.length; i++) {
    const loadName = headings[i].replace("*", "");
    loadTypeMap[loadName] = i + 1;
    if (headings[i].indexOf("*") > -1) {
      doLiveLoadPatterns = true;
      getsPattern[i + 1] = true;
    }
  }
  return [loadTypeMap, getsPattern, headings.length, doLiveLoadPatterns]
};

const combinationsFromInput = (factorInput, loadTypeMap) => {
  const data = factorInput.data;
  const headings = factorInput.headings;
  const combinations = [];
  for (let i = 0; i < data[0].length; i++) {
    const factors = new Array(10).fill(0);
    for (let j = 0; j < headings.length; j++) {
      const type = loadTypeMap[headings[j].replace("*", "")];
      factors[type] = Rnl.toNumber(data[j][i]);
    }
    combinations.push(factors);
  }
  return combinations
};

const newNode = (fixity, k, xCoordinate) => {
  return {
    fixity,
    k: (fixity === "spring" ? k : 0),
    x: xCoordinate,
    P: [0, 0, 0, 0, 0, 0, 0, 0, 0],
    M: [0, 0, 0, 0, 0, 0, 0, 0, 0],
    Pr: [0, 0, 0, 0, 0, 0, 0, 0, 0], // "r" stands for reaction
    PrMin: [0, 0, 0, 0, 0, 0, 0, 0, 0],
    Mr: [0, 0, 0, 0, 0, 0, 0, 0, 0],
    MrMin: [0, 0, 0, 0, 0, 0, 0, 0, 0]
  }
};

const incrementDegreesOfFreedom = fixity => {
  switch (fixity) {
    case "pinned":
      return 1
    case "fixed":
      return 0
    case "hinge":
      return 3
    default:
      return 2
  }
};

const newSegment = (length, xOfLeftEnd) => {
  // A "segment" is a beam section between points of load discontinuity.
  return {
    length,
    xOfLeftEnd,
    // Point load applied at left end of segments.
    // Array dim'ed to 9 for different load types, e.g., dead, live, wind, etc.
    P: [0, 0, 0, 0, 0, 0, 0, 0, 0],
    M: [0, 0, 0, 0, 0, 0, 0, 0, 0],  // point moment
    Pf: 0, // factored point load at left end
    Mf: 0,
    w1: [0, 0, 0, 0, 0, 0, 0, 0, 0], // distributed load at left end of segments.
    w2: [0, 0, 0, 0, 0, 0, 0, 0, 0], // at right end.
    Vmax: {
      left: { value: 0, case: 0 },
      mid: { value: 0, case: 0, x: 0 },
      right: { value: 0, case: 0 }
    },
    Vmin: {
      left: { value: 0, case: 0 },
      mid: { value: 0, case: 0, x: 0 },
      right: { value: 0, case: 0 }
    },
    Mmax: {
      left: { value: 0, case: 0 },
      mid: { value: 0, case: 0, x: 0 },
      right: { value: 0, case: 0 }
    },
    Mmin: {
      left: { value: 0, case: 0 },
      mid: { value: 0, case: 0, x: 0 },
      right: { value: 0, case: 0 }
    }
  }
};

const identifySegment = (xGlobal, span) => {
  // Which segment contains xGlobal?
  for (let i = 0; i < span.segments.length; i++) {
    const xSegEnd = Rnl.add(span.segments[i].xOfLeftEnd, span.segments[i].length);
    if (Rnl.lessThanOrEqualTo(xGlobal, xSegEnd)) { return i }
  }
  return -1
};

const splitSegment = (segments, iSeg, xGlobal) => {
  // segments` is an array.
  // We need to split the element at segments[iSeg] into two elements.
  const length = Rnl.subtract(xGlobal, segments[iSeg].xOfLeftEnd);
  if (iSeg === 0) {
    segments.unshift(newSegment(length, segments[0].xOfLeftEnd));
  } else {
    const s1 = segments.slice(0, iSeg);
    s1.push(newSegment(length, segments[iSeg].xOfLeftEnd));
    segments =  s1.concat(segments.slice(iSeg));
  }
  const seg = segments[iSeg + 1];
  const newSeg = segments[iSeg];
  for (let i = 0; i < 9; i++) {
    const slope = (seg.w2[i] - seg.w1[i]) / Rnl.toNumber(seg.length);
    newSeg.w1[i] = seg.w1[i];
    newSeg.w2[i] = seg.w1[i];
    seg.w1[i] = seg.w1[i] + slope * Rnl.toNumber(length);
    newSeg.P[i] = seg.P[i];
    seg.P[i] = 0;
    newSeg.M[i] = seg.M[i];
    seg.M[i] = 0;
  }
  seg.xOfLeftEnd = xGlobal;
  seg.length = Rnl.subtract(seg.length, newSeg.length);
  return segments
};

// Here's the main function of this module.
// Take the raw input strings, validate them, and load them
// into data structures for use by the analyze function.
function populateData(input, factorInput) {
  const errorMsg = "";
  const beam = {
    E: 0, // modulus of elasticity
    I: 0, // moment of inertia
    k: 0, // spring constant
    convention: input.convention
      ? input.convention
      : 1, // Plot + moment on comp or tension side.
    SI: input.SI || false, // boolean. Are we using SI units?
    doLiveLoadPatterns: input.patterns,
    gotType: [false, false, false, false, false, false, false, false, false],
    wMax: 0, // default line load maximum
    x: 180, // x coordinate of the beam's left end inside the SVG, in px
    allLoadsAreUniform: true // subject to change below
  };

  if (input.E === 1 || input.E === 0) {
    // We don't know E or I, so we won't do a deflection diagram.
    // But we will still do the shear and moment diagrams.
    beam.E = 1;
    beam.I = 1;
    beam.k = 0;
  } else {
    beam.E = input.E;  // Modulus of elasticity
    beam.I = input.I;  // Moment of inertia, I
    beam.k = input.k;  // Spring constant
  }
  if (beam.E === 1 && beam.I === 1 && input.k !== 0) {
    return ["E and I are necessary for an analysis with spring supports."]
  }
  beam.EI = beam.E * beam.I;

  // Load in node data and span data.
  // Definitions
  // (1) A "span" is a section of beam between two user-defined nodes.
  // (2) A "segment" is a section of beam between nodes or points of load discontinuity.
  // Each span thus consists of one or more segments.
  let i = 0;
  let cummulativeLength = Rnl.zero;
  const nodes = [];
  const spans = [];
  beam.numDegreesOfFreedom = 0;
  // eslint-disable-next-line max-len
  const [loadTypeMap, getsPattern, numLoadTypes, doLiveLoadPatterns] = loadTypesFromInput(factorInput);
  beam.numLoadTypes = numLoadTypes;
  beam.getsPattern = getsPattern;
  beam.doLiveLoadPatterns = doLiveLoadPatterns;

  for (i = 0; i < input.nodes.length; i++) {
    // Process node input.
    const fixity = input.nodes[i];
    if (!fixity) { return [`The ${ord[i]} node designation is invalid.`] }
    if (fixity === "spring" && input.k === 0) {
      return ["Error. A model with a spring needs a spring constant, k."]
    }
    nodes.push(newNode(fixity, beam.k, cummulativeLength));
    beam.numDegreesOfFreedom += incrementDegreesOfFreedom(fixity);
    if (i < input.spanLength.length) {
      // Process span input.
      const length = input.spanLength[i];
      spans.push({
        length,
        segments: Array(1).fill(newSegment(length, cummulativeLength))
      });
      cummulativeLength = Rnl.add(cummulativeLength, length);
    }
  }
  if (spans.length === 0) { return [`No span lengths.`] }
  const numSpans =  spans.length;
  beam.numSegments = numSpans;
  beam.length = nodes[nodes.length - 1].x;

  // Point Loads
  for (i = 0; i < input.loads.length; i++) {
    const load = input.loads[i];
    if (load.shape === "w") {
      // Skip the distributed loads for now. We'll pick them up later.
      continue
    }
    if (load.from === 0) { continue }
    let type = load.type === "none"
      ? 0
      : loadTypeMap
      ? loadTypeMap[load.type]
      : 1;
    if (type === 0) {
      if (beam.comboName !== "service") {
        return [`The ${ord[i]} load must have a load type defined.`]
      } else {
        type = 1; // In a service load analysis, treat unlabled loads as Dead loads.
      }
    }

    const P = input.loads[i].P;
    const M = input.loads[i].M;
    const x = input.loads[i].from;

    let foundAHome = false;
    for (let j = 0; j < nodes.length; j++) {
      if (Rnl.areEqual(x, nodes[j].x)) {
        nodes[j].P[0] += P;
        nodes[j].M[0] += M;
        if (type !== 0) { nodes[j].P[type] += P; }
        foundAHome = true;
        break
      }
    }
    if (foundAHome) { continue }

    for (let j = 0; j < spans.length; j++) {
      if (Rnl.greaterThan(x, nodes[j].x) && Rnl.lessThan(x, nodes[j + 1].x)) {
        const span = spans[j];
        const iSeg = identifySegment(x, span);
        if (Rnl.greaterThan(x, span.segments[iSeg].xOfLeftEnd)) {
          span.segments = splitSegment(span.segments, iSeg, x);
          beam.numSegments += 1;
        }
        beam.gotType[0] = true;
        span.segments[iSeg + 1].P[0] += P;      // add to sum of service loads
        span.segments[iSeg + 1].M[0] += M;
        if (type !== 0) {
          beam.gotType[type] = true;
          span.segments[iSeg + 1].P[type] += P;
          span.segments[iSeg + 1].M[type] += M;
        }
      }
    }
  }

  // Distributed loads
  beam.allLoadsAreUniform = true;  // initialize the variable
  for (i = 0; i < input.loads.length; i++) {
    const load = input.loads[i];
    if (load.shape !== "w") { continue }
    let type = load.type === "none" ? 0 : loadTypeMap ? loadTypeMap[load.type] : 1;
    if (type === 0) {
      if (beam.comboName !== "service") {
        return [`The ${ord[i]} load must have a load type defined.`]
      } else {
        type = 1; // In a service load analysis, treat unlabled loads as Dead loads.
      }
    }

    const wStart = load.wStart;
    const wEnd = load.wEnd;

    if (Math.abs(wStart) > beam.wMax) { beam.wMax = Math.abs(wStart); }
    if (Math.abs(wEnd) > beam.wMax) { beam.wMax = Math.abs(wEnd); }

    const xStart = load.from;
    const xEnd = Rnl.isZero(load.to)
      ? cummulativeLength
      : load.to;

    const slope = (wEnd - wStart) / Rnl.toNumber(Rnl.subtract(xEnd, xStart));
    if (slope !== 0) {beam.allLoadsAreUniform = false;}

    let iStartSpan = 0;
    let iEndSpan = 0;
    let iStartSeg = 0;
    let iEndSeg = 0;

    // If necessary, split segments at points of load discontinuity.
    for (let j = 0; j < spans.length; j++) {
      if (Rnl.areEqual(xStart, nodes[j].x)) {
        iStartSpan = j;
        iStartSeg = 0;
        break
      }
      if (Rnl.greaterThan(xStart, nodes[j].x) && Rnl.lessThan(xStart, nodes[j + 1].x)) {
        for (let k = 0; k < spans[j].segments.length; k++) {
          const seg = spans[j].segments[k];
          if (Rnl.areEqual(xStart, seg.xOfLeftEnd)) {
            iStartSpan = j;
            iStartSeg = k;
            break
          }
          const segEnd = k < spans[j].segments.length - 1
            ? spans[j].segments[k + 1].xOfLeftEnd
            : nodes[j + 1].x;
          if (Rnl.greaterThan(xStart, seg.xOfLeftEnd) && Rnl.lessThan(xStart, segEnd)) {
            spans[j].segments = splitSegment(spans[j].segments, k, xStart);
            beam.numSegments += 1;
            iStartSpan = j;
            iStartSeg = k + 1;
            break
          }
        }
      }
    }

    for (let j = 0; j < spans.length; j++) {
      if (Rnl.areEqual(xEnd, nodes[j + 1].x)) {
        iEndSpan = j;
        iEndSeg = spans[j].segments.length - 1;
        break
      }
      if (Rnl.greaterThan(xEnd, nodes[j].x) && Rnl.lessThan(xEnd, nodes[j + 1].x)) {
        for (let k = 0; k < spans[j].segments.length; k++) {
          const seg = spans[j].segments[k];
          const segEnd = k < spans[j].segments.length - 1
            ? spans[j].segments[k + 1].xOfLeftEnd
            : nodes[j + 1].x;
          if (Rnl.areEqual(xEnd, segEnd)) {
            iEndSpan = j;
            iEndSeg = k;
            break
          }
          if (Rnl.greaterThan(xEnd, seg.xOfLeftEnd) && Rnl.lessThan(xEnd, segEnd)) {
            spans[j].segments = splitSegment(spans[j].segments, k, xEnd);
            beam.numSegments += 1;
            iEndSpan = j;
            iEndSeg = k;
            break
          }
        }
      }
    }

    // Now apply distributed loads
    for (let iSpan = iStartSpan; iSpan <= iEndSpan; iSpan++) {
      const span = spans[iSpan];
      const startSeg = (iSpan  === iStartSpan ? iStartSeg : 0);
      const endSeg = (iSpan  === iEndSpan ? iEndSeg : spans[iSpan].segments.length - 1);
      for (let iSeg = startSeg; iSeg <= endSeg; iSeg++) {
        const xLeft = span.segments[iSeg].xOfLeftEnd;
        const w1 = wStart + slope * Rnl.toNumber(Rnl.subtract(xLeft, xStart));
        const xRight = Rnl.add(span.segments[iSeg].xOfLeftEnd, span.segments[iSeg].length);
        const w2 = wStart + slope * Rnl.toNumber(Rnl.subtract(xRight, xStart));
        // add to sum of service loads
        span.segments[iSeg].w1[0] += w1;
        span.segments[iSeg].w2[0] += w2;
        // add to specific load type, e.g., dead, live, etc.
        span.segments[iSeg].w1[type] += w1;
        span.segments[iSeg].w2[type] += w2;
      }
    }

    beam.gotType[0] = true;
    if (type !== 0) {
      beam.gotType[type] = true;
    }
  }

  // Henceforward there are no <= comparisons.
  // Change lengths into floating point numbers.
  for (let i = 0; i < nodes.length; i++) {
    nodes[i].x = Rnl.toNumber(nodes[i].x);
  }
  for (let i = 0; i < spans.length; i++) {
    spans[i].length = Rnl.toNumber(spans[i].length);
    for (let j = 0; j < spans[i].segments.length; j++) {
      spans[i].segments[j].length = Rnl.toNumber(spans[i].segments[j].length);
      spans[i].segments[j].xOfLeftEnd = Rnl.toNumber(spans[i].segments[j].xOfLeftEnd);
    }
  }
  beam.length = Rnl.toNumber(beam.length);

  const combinations = typeof factorInput === "string"
    ? "service"
    : combinationsFromInput(factorInput, loadTypeMap);

  return [errorMsg, beam, nodes, spans, combinations]

}

// Each of the methods in this module draws some item.

const circle = (x, y, radius) => {
  return { tag: "circle", attrs: { cx: x, cy: y, r: radius } }
};

const restraint = (node, beam) => {
  const value = [];
  const x = beam.xDiagram + beam.xScale * node.x;
  if (node.fixity === "hinge" || node.fixity === "proppedHinge") {
    value.push(circle(beam.xDiagram + beam.xScale * node.x, beam.yLoad, 4));
  }
  const path = { tag: "path", attrs: { d: "" } };
  if (node.fixity === "pinned" || node.fixity === "proppedHinge") {
    // draw a triangle
    const y = node.fixity === "pinned" ? beam.yLoad + 0.75 : beam.yLoad + 4;
    path.attrs.d = `M${x} ${y} l5 10 h-10 z`;
    path.attrs.style = "fill:#fff; stroke:#000";
  } else if (node.fixity === "fixed") {
    const xd = (node.x === 0 ? -1 : 1) * 7;
    // eslint-disable-next-line max-len
    path.attrs.d = `M${x} ${beam.yLoad - 7} v14 m0 -14 l${xd} 7 M${x} ${beam.yLoad} l${xd} 7 M${x} ${beam.yLoad + 7} l${xd} 7`;
  } else if (node.fixity === "spring") {
    const y = beam.yLoad + .75;
    path.attrs.d = `M${x} ${y} v3 l6 1.5 -12 3 12 3 -12 3 6 1.5 v3 m-6 0 h12`;
  }
  value.push(path);
  return value
};

const pointForce = (x, y, load, fixity, isReaction = false) => {
  const sgn = (load < 0 ? -1 : 1); // -1 is down
  const lengthAdjustment = fixity === "fixed"
    ? 7
    : fixity === "pinned" && isReaction
    ? 10
    : fixity === "proppedHinge" && isReaction
    ? 18
    : fixity === "hinge"
    ? 4
    : fixity === "spring" && isReaction
    ? 18
    : 0;
  const length = 40 - lengthAdjustment;
  // Reactions are drawn below the beam line. Imposed loads are drawn above the beam line.
  const yText = y + (isReaction ? 55 : -45);
  // Set x and y at the tip of the arrowhead
  if (isReaction) { y += lengthAdjustment + 0.75; } else { y -= 0.75; }
  if (sgn === -1 && isReaction) { y += length; }
  if (sgn === 1 && !isReaction) { y -= length; }
  const arrow = {
    tag: "path",
    attrs: {
      style: "fill: #000; fill-opacity:1.0",
      // eslint-disable-next-line max-len
      d: `M${x} ${y} l${sgn * 4} ${sgn * 8} h${-sgn * 3.5} v${sgn * (length - 8)} h${-sgn * 1} v${-sgn * (length - 8)} h${-sgn * 3}z`
    }
  };
  const text = textNode(String(Math.abs(load)), x, yText, "middle");
  return [arrow, text]
};

const pointMoment = (x, y, load, isReaction = false) => {
  let isCounterClockwise = load >= 0; // = (load < 0 ? -1 : 1) // 1 is counter-clockwise
  load = Math.abs(load);
  let arrow;
  let text;
  if (!isReaction) {
    arrow = momentArrow(x, y, (isCounterClockwise ? 165 : 15), 150, isCounterClockwise);
    text = textNode(String(load), x, y - 25, "middle");
  } else {
    // The moment is a reaction
    isCounterClockwise = !isCounterClockwise;
    if (x < 100) {  // left end
      arrow = momentArrow(x, y, (isCounterClockwise ? 260 : 100), 140, isCounterClockwise);
      text = textNode(String(load), x - 15, y - 15, "end");
    } else {
      arrow = momentArrow(x, y, (isCounterClockwise ? 80 : 280), 140, isCounterClockwise);
      text = textNode(String(load), x + 16, y - 15);
    }
  }
  return [...arrow, text]
};

const momentArrow = (xCtr, yCtr, thetaAtArrowPoint, subtendedAngle, isCounterClockwise) => {
  // Draw a circular arc with an arrowhead.
  // Find startAngle and endAngle: the begining and ending of the arc
  // theta = 0 at 3 o'clock.  theta is + for counterclockwise
  const startAngle = thetaAtArrowPoint * (Math.PI / 180);
  const sgn = isCounterClockwise ? 1 : -1;
  const endAngle = startAngle - sgn * subtendedAngle * (Math.PI / 180);
  // sgn = 1 for counterclockwise, -1 for clockwise
  const diameter = 35;
  const r = diameter / 2; // radius
  const arrowHeadLength = 8;
  const startAnglePrime = startAngle - sgn * (2 * 0.9 * arrowHeadLength / diameter);
  const largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";

  let xStart = 0;
  let yStart = 0;
  let xEnd = 0;
  let yEnd = 0;
  if (sgn > 0) {
    xEnd = (xCtr + r * Math.cos(startAnglePrime)).toFixed(2);   // arrow end
    yEnd = (yCtr - r * Math.sin(startAnglePrime)).toFixed(2);
    xStart = (xCtr + r * Math.cos(endAngle)).toFixed(2);
    yStart = (yCtr - r * Math.sin(endAngle)).toFixed(2);
  } else {
    xStart = (xCtr + r * Math.cos(startAnglePrime)).toFixed(2);
    yStart = (yCtr - r * Math.sin(startAnglePrime)).toFixed(2);
    xEnd = (xCtr + r * Math.cos(endAngle)).toFixed(2);
    yEnd = (yCtr - r * Math.sin(endAngle)).toFixed(2);
  }

  const path = {
    tag: "path",
    attrs: { d: `M${xStart} ${yStart}A${r} ${r} 0 ${largeArcFlag} 0 ${xEnd} ${yEnd}` }
  };

  // Draw the arrow head
  const xTip = xCtr + r * Math.cos(startAngle);
  const yTip = yCtr - r * Math.sin(startAngle);
  const alpha = startAngle - sgn * 100 / 180 * Math.PI; // rotate by 100°
  const beta = 22.5 * Math.PI / 180;    // angle subtended by half-arrowhead
  const x = Array(3).fill("");
  const y = Array(3).fill("");
  x[0] = xTip.toFixed(2);
  y[0] = yTip.toFixed(2);
  x[1] = (xTip + arrowHeadLength * Math.cos(alpha - beta)).toFixed(2);
  y[1] = (yTip - arrowHeadLength * Math.sin(alpha - beta)).toFixed(2);
  x[2] = (xTip + arrowHeadLength * Math.cos(alpha + beta)).toFixed(2);
  y[2] = (yTip - arrowHeadLength * Math.sin(alpha + beta)).toFixed(2);

  let points = "";
  for (let i = 0; i < x.length; i++) {
    points += `${x[i]} ${y[i]} `;
  }
  const polygon = { tag: "polygon", attrs: { points } };
  return [path, polygon]
};

const polyline = (x, y) => {
  let d = `M${x[0]} ${y[0]}`;
  for (let i = 1; i < x.length; i++) {
    d += ` L${x[i]} ${y[i]}`;
  }
  return { tag: "path", attrs: { d, stroke: "black", "fill-opacity": "0.0" } }
};

const textNode = (str, x, y, horizAlign) => {
  const node = { tag: "text", attrs: { x: String(x), y: String(y) } };
  if (horizAlign === "middle" || horizAlign === "end") {
    node.attrs["text-anchor"] = horizAlign;
  }
  node.children = [{ tag: "tspan", text: str }];
  return node
};

const Draw = Object.freeze({
  pointForce,
  pointMoment,
  polyline,
  restraint,
  textNode
});

const round$1 = (num, prec) => {
  // Round a number to prec significant digits.
  // Return a string. This is used for display of numbers on the diagram.
  const str = num.toPrecision(prec);
  if (str.indexOf("e") === -1) { return str }
  const pos = str.indexOf("e");
  const significand = Number.parseFloat(str.slice(0, pos));
  const exponent = Number.parseFloat(str.slice(pos + 1));
  return (significand * 10 ** exponent).toString()
};

function createLoadDiagram(beam, nodes, spans) {
  beam.xDiagram = 90;  // x coordinate at left end of diagram line, px
  beam.yLoad = 80;     // y coordiate of load diagram
  beam.xScale = 300 / nodes[nodes.length - 1].x;
  const lengthFactor = beam.SI ? 1 : 0.3048;
  const forceFactor = beam.SI ? 1000 : 4448.2216152605;
  const momentFactor = beam.SI ? 1000 : 4448.2216152605 * 0.3048;
  const lineLoadFactor = beam.SI ? 1000 : 4448.2216152605 / 0.3048;

  // Begin the diagram.
  let diagram = [];
  diagram.push({ tag: "title", attrs: { text: "Beam Diagram" } });
  diagram.push({
    tag: "defs",
    attrs: {},
    style: `svg { background-color: #fff; }
text, tspan { font: 12px Arial; }`
  });
  diagram.push(Draw.textNode("loads", 20, beam.yLoad + 2));
  diagram.push(Draw.textNode(`(${beam.SI ? 'kN, m' : 'kips, ft'})`, 20, beam.yLoad + 16));
  diagram.push({
    tag: "path",
    attrs: { stroke: "black", "stroke-width": "1.5px",
      d: `M${beam.xDiagram} ${beam.yLoad} h300` }
  });

  // Draw restraints
  for (let i = 0; i < nodes.length; i++) {
    if (nodes[i].fixity !== "continuous") {
      diagram = diagram.concat(Draw.restraint(nodes[i], beam));
    }
  }

  // Write the span length below each span, but only if there are no loads in the way.
  for (let i = 0; i < spans.length; i++) {
    let okay = true; // initialize
    if (spans[i].length * beam.xScale < 30) { continue }
    if (okay) {
      for (let j = 1; j < spans[i].segments.length; j++) {
        if (spans[i].segments[j].P[0] > 0) { okay = false; break }
      }
    }
    if (okay) {
      const x = beam.xDiagram + beam.xScale * (nodes[i].x + spans[i].length / 2);
      const unit = beam.SI ? "" : "′";
      const sText = round$1(spans[i].length / lengthFactor, 3);
      diagram.push(Draw.textNode(`${sText}${unit}`, x, beam.yLoad + 15));
    }
  }

  // Draw nodal loads
  for (let i = 0; i < nodes.length; i++) {
    const x = beam.xDiagram + beam.xScale * nodes[i].x;
    if (Math.abs(nodes[i].P[0]) > 0) {
      const sText = round$1(nodes[i].P[0] / forceFactor, 3);
      diagram = diagram.concat(Draw.pointForce(x, beam.yLoad, sText, nodes[i].fixity));
    }
    if (Math.abs(nodes[i].M[0]) > 0) {
      const sText = round$1(nodes[i].M[0] / momentFactor, 3);
      diagram = diagram.concat(Draw.pointMoment(x, beam.yLoad, sText));
    }
  }

  // Draw span loads
  const wScale = 20 / beam.wMax;
  let wPrev = 0;
  let d = `M${beam.xDiagram} ${beam.yLoad}`;
  for (let i = 0; i < spans.length; i++) {
    for (let j = 0; j < spans[i].segments.length; j++) {
      const seg = spans[i].segments[j];
      const x = beam.xDiagram + beam.xScale * seg.xOfLeftEnd;
      if (Math.abs(seg.P[0]) > 0) {
        const sText = round$1(seg.P[0] / forceFactor, 3);
        diagram = diagram.concat(Draw.pointForce(x, beam.yLoad, sText, "continuous"));
      }
      if (Math.abs(seg.M[0]) > 0) {
        const sText = round$1(seg.M[0] / momentFactor, 3);
        diagram = diagram.concat(Draw.pointMoment(x, beam.yLoad, sText));
      }
      // Draw a line segment for the service load.
      const xEnd = x + beam.xScale * seg.length;
      if (seg.w1[0] !== wPrev) {
        d += `V${beam.yLoad + seg.w1[0] * wScale}`; // vertical load discontinuiy.
      }
      const yEnd = beam.yLoad + seg.w2[0] * wScale;
      d += `L${xEnd} ${yEnd}`;
      wPrev =  seg.w2[0];
    }
  }
  if (wPrev !== 0) { d += `V${beam.yLoad}`; }
  diagram.push({ tag: "path", attrs: { d, stroke: "black", "fill-opacity": "0.0" } });

  // Write in the line load values
  let lastSegUniform = false;
  let firstSegment;
  let xFirstSegment = 0;
  const segments = [];
  for (let i = 0; i < spans.length; i++) {
    for (let j = 0; j < spans[i].segments.length; j++) {
      segments.push(spans[i].segments[j]);
    }
  }
  const numSegments = segments.length;
  for (let i = 0; i < segments.length; i++) {
    const seg = segments[i];
    if (seg.w1[0] === seg.w2[0] && Math.abs(seg.w1[0]) > 0) {
      lastSegUniform = true;
      if (i === 0 || seg.w1[0] !== segments[i - 1].w1[0] || lastSegUniform === false) {
        firstSegment = i;
        xFirstSegment = beam.xScale * seg.xOfLeftEnd;
      }
      if (i === numSegments - 1 || segments[i + 1].w1[0] !== segments[i + 1].w2[0]
        || seg.w1[0] !== segments[i + 1].w1[0]) {
        // This segment is the end of a uniform load.
        // Find a place to write the load value
        const lenSegLoad = i < numSegments - 1
          ? segments[i + 1].xOfLeftEnd - segments[firstSegment].xOfLeftEnd
          : beam.length - segments[firstSegment].xOfLeftEnd;
        if (lenSegLoad * beam.xScale > 30) {
          let noBust = true; // initialize the value
          const fudge = seg.w1[0] > 0 ? 10 : -4;
          const yy = beam.yLoad + wScale * seg.w1[0] + fudge;
          const str = round$1(Math.abs(seg.w1[0] / lineLoadFactor), 3);
          // try the middle of the uniform load.  See if there is a point load there
          for (let j = firstSegment + 1; j <= i; j++) {
            if (beam.xScale * (Math.abs(segments[j].xOfLeftEnd
              - (segments[firstSegment].xOfLeftEnd + lenSegLoad / 2))) < 35) {
              if (segments[j].M[0] || segments[j].P[0] !== 0) {
                noBust = false;
                break
              }
            }
          }
          if (noBust) {
            const x = beam.xDiagram + xFirstSegment + beam.xScale * lenSegLoad / 2;
            diagram.push(Draw.textNode(str, x, yy));
          } else {
            // try the 1/3 point
            noBust = true;
            for (let j = firstSegment + 1; j <= i; j++) {
              if (beam.xScale * (Math.abs(segments[j].xOfLeftEnd
                - (segments[firstSegment].xOfLeftEnd + lenSegLoad / 3))) < 35) {
                if (segments[j].M[0] || segments[j].P[0] !== 0) {
                  noBust = false;
                  break
                }
              }
            }
            if (noBust) {
              const x = beam.xDiagram + xFirstSegment + beam.xScale * lenSegLoad / 3 - 17;
              diagram.push(Draw.textNode(str, x, yy));
            } else {
              // try the 2/3 point
              noBust = true;
              for (let j = firstSegment + 1; j <= i; j++) {
                if (beam.xScale * (Math.abs(segments[j].xOfLeftEnd
                  - (segments[firstSegment].xOfLeftEnd + 2 * lenSegLoad / 3))) < 5) {
                  if (segments[j].M[0] || segments[j].P[0] !== 0) {
                    noBust = false;
                    break
                  }
                }
              }
              if (noBust) {
                const x = beam.xDiagram + xFirstSegment + beam.xScale * 2 * lenSegLoad / 3;
                diagram.push(Draw.textNode(str, x, yy));
              } else {
                if (i === 0) {
                  diagram.push(Draw.textNode(str, beam.xDiagram  - 35, yy));
                }
              }
            }
          }
        }
      }
    } else {
      // We've got a distributed sloping load
      lastSegUniform = false;
      const s = i === 0
        ? 0
        : (segments[i - 1].w2[0] - segments[i - 1].w1[0]) / segments[i - 1].length;
      const s2 = (seg.w2[0] - seg.w1[0]) / seg.length;
      const s3 = i === numSegments - 1
        ? 0
        : (segments[i + 1].w2[0] - segments[i + 1].w1[0]) / segments[i + 1].length;
      if (Math.abs(s2 - s) > 0.05 || i === 0) {
        if (Math.abs(seg.w1[0]) > 0.05) {
          if (seg.length * beam.xScale > 20) {
            const str = round$1(Math.abs(seg.w1[0] / lineLoadFactor), 3);
            const x = beam.xDiagram + beam.xScale * seg.xOfLeftEnd;
            const fudge = seg.w1[0] > 0 ? 10 : -5;
            const yy = beam.yLoad + wScale * seg.w1[0] + fudge;
            diagram.push(Draw.textNode(str, x, yy));
          }
        }
      }
      if (Math.abs(s2 - s3) > 0.05  || i === numSegments - 1
        || Math.abs(seg.w2[0] - segments[i + 1].w1[0]) > 0) {
        if (Math.abs(seg.w2[0]) > 0.05) {
          if (seg.length * beam.xScale > 20) {
            const str = round$1(Math.abs(seg.w2[0] / lineLoadFactor), 3);
            const x = beam.xDiagram + beam.xScale * (seg.xOfLeftEnd + seg.length) - 30;
            const fudge = seg.w2[0] > 0 ? 10 : -5;
            const yy = beam.yLoad + wScale * seg.w2[0] + fudge;
            diagram.push(Draw.textNode(str, x, yy));
          }
        }
      }
    }
  }

  return diagram
}

const ftRegEx = /′/g;
const numberRegEx$3 = new RegExp(Rnl.numberPattern);
const lengths = ["ft", "m", "cm", "mm"];
const metricLengths = ["m", "cm", "mm"];

const readNumber = str => {
  const matches = numberRegEx$3.exec(str);
  if (matches) {
    const numStr = matches[0];
    return [Rnl.fromString(numStr), numStr.length];
  } else {
    return ["Error", null]
  }
};

const convertToBaseUnit = (num, unitName) => {
  const unit = unitFromUnitName(unitName);
  return Rnl.multiply(Rnl.add(num, unit.gauge), unit.factor)
};

const readInputData = data => {
  const input = Object.create(null);
  // Set some defaults
  input.nodes = [];
  input.spanLength = [];
  input.loads = [];
  input.E = 1;
  input.I = 1;
  input.k = 0;
  input.SI = false;
  input.convention = 1;
  // Read the input and overwrite the defaults.

  // Read the top line of data.
  // It contains the geometry, connectivity, and node fixity.
  const layout = data[1][0].trim();
  if (numberRegEx$3.test(layout)) { input.nodes.push("continuous"); }
  const elements = layout.split(/ +/g);
  for (let k = 0; k < elements.length; k++) {
    switch (elements[k]) {
      case "p":
      case "△":
        input.nodes.push("pinned");
        break
      case "f":
      case "⫢":
        input.nodes.push("fixed");
        break
      case "h":
      case "∘":
        input.nodes.push("hinged");
        break
      case "ph":
      case "⫯":
      case "⧊":
        input.nodes.push("proppedHinge");
        break
      case "s":
      case "⌇":
        input.nodes.push("spring");
        break
      case "-":
        input.nodes.push("continuous");
        break
      default: {
        const element = elements[k].replace(ftRegEx, "ft");
        const [L, pos] = readNumber(element);
        if (typeof L === "string") { return "Error. Non-numeric length." }
        let unitName = element.slice(pos).trim();
        if (unitName === "") {
          if (lengths.includes(elements[k + 1])) {
            unitName = elements[k + 1];
            k += 1;
          } else {
            unitName = "mm";
          }
        }
        if (metricLengths.includes(unitName)) { input.SI = true; }
        input.spanLength.push(convertToBaseUnit(L, unitName));
        break
      }
    }
  }
  if (numberRegEx$3.test(elements[elements.length - 1])) { input.nodes.push("continuous"); }

  // Read the rest of the data.
  for (let i = 1; i < data[0].length; i++) {
    const item = data[0][i].trim();
    let datum = data[1][i].trim();
    switch (item) {
      case "E": {
        const [E, pos] = readNumber(datum);
        if (typeof E === "string") { return "Error. Non-numeric E." }
        const unitName = datum.slice(pos).trim();
        input.E = Rnl.toNumber(convertToBaseUnit(E, unitName));
        break
      }

      case "I": {
        const [I, pos] = readNumber(datum);
        if (typeof I === "string") { return "Error. Non-numeric I." }
        const unitName = datum.slice(pos).trim();
        input.I = Rnl.toNumber(convertToBaseUnit(I, unitName));
        break
      }

      case "k": {
        const [k, pos] = readNumber(datum);
        if (typeof k === "string") { return "Error. Non-numeric k." }
        const unitName = datum.slice(pos).trim();
        input.k = Rnl.toNumber(convertToBaseUnit(k, unitName));
        break
      }

      case "+M": {
        input.convention = datum.charAt(0).toLowerCase() === "←→" ? 1 : -1;
        break
      }

      default: {
        // Treat as a load
        const load = Object.create(null);
        datum = datum.replace(ftRegEx, "ft");
        const elements = datum.split(",");
        let str = elements[0];
        load.type = item;
        load.from = Rnl.zero;
        load.to = Rnl.zero;
        load.P = 0;
        load.M = 0;
        load.wStart = 0;
        load.wEnd = 0;
        let [num1, pos] = readNumber(str);  // eslint-disable-line prefer-const
        if (typeof num1 === "string") { return "Error. Non-numeric load." }
        let num2 = num1;
        str = str.slice(pos).trim();
        if (str.slice(0, 1) === ":") {
          str = str.slice(1).trim();
          [num2, pos] = readNumber(str);
          str = str.slice(pos).trim();
        }
        const unitName = str.trim();
        const unit = unitFromUnitName(unitName);
        // Read the load from & to points, if any
        let L1 = 0;
        let L2 = 0;
        let lengthUnitName = "";
        if (elements.length > 1) {
          str = elements[1].trim();
          [L1, pos] = readNumber(str);
          str = str.slice(pos).trim();
          if (str.slice(0, 1) === ":") {
            str = str.slice(1).trim();
            [L2, pos] = readNumber(str);
            str = str.slice(pos).trim();
          } else {
            L2 = L1;
          }
          lengthUnitName = str.trim();
          if (lengthUnitName === "") { lengthUnitName = "mm"; }
        }
        const expos = unit.expos.join("");
        if (expos === "01-200000") {
          load.shape = "w";
          load.wStart = Rnl.toNumber(convertToBaseUnit(num1, unitName));
          load.wEnd = Rnl.toNumber(convertToBaseUnit(num2, unitName));
        } else if (expos === "11-200000") {
          load.shape = "P";
          load.P = Rnl.toNumber(convertToBaseUnit(num1, unitName));
        } else if (expos === "21-200000") {
          load.shape = "M";
          load.M = Rnl.toNumber(convertToBaseUnit(num1, unitName));
        } else {
          return `Error. ${unitName} is not a force, line load, or moment.`
        }
        if (L1 !== 0) { load.from = convertToBaseUnit(L1, lengthUnitName); }
        if (L2 !== 0) { load.to = convertToBaseUnit(L2, lengthUnitName); }
        input.loads.push(load);
      }
    }
  }
  return input
};

const dotProduct = (a, b) => a.map((e, i) => (e * b[i])).reduce((m, n) => m + n);
const isLiveish = (loadType, beam) => beam.getsPattern[loadType];


function doAnalysis(beam, nodes, spans) {
  const numNodes = nodes.length;
  const numSpans = spans.length;
  const gotType = beam.gotType;
  const numDegreesOfFreedom = beam.numDegreesOfFreedom;
  const numEndActions = 4 * numSpans + numNodes; // include the node spring actions.
  beam.numEndActions = numEndActions;
  const EI = beam.EI;

  // The Direct Stiffness Method employs matrix methods to solve indeterminate structures.
  // Textbooks describe the Direct Stiffness Method with one-based matrices.
  // To avoid confusion, the code below employs arrays as if they were one-based.
  // Since JavaScript arrays are actually zero-based, we will dimension each array with one
  // element more than it needs. Then we'll leave array[0] unused. All our loops will be
  // written as if we had one-based arrays.

  // Prepend elements to arrays `nodes` & `spans` so that they act like 1-based arrays.
  nodes.unshift(0);
  spans.unshift(0);

  // Find the Span Stiffness Matrix, SSM
  // Imagine that a fixed-end span undergoes a displacement, Δ, down at its right end.
  // (Notice that rotation, θ, is zero at both ends)
  // ▄                                                         █
  // █                                                         █
  // █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,█──────┬──
  // █             ▀▀▀▀▀▀▀▄▄▄▄                                 █      │
  // █                         ▀▀▀▄▄▄▄▄                        █      │ Δ
  // █                                 ▀▀▀▀▄▄▄▄▄▄              █      │
  //                                             ▀▀▀▀▀▀▀▀▀▀▀▀▀▀█──────┴──
  //                                                           █
  // If we draw the free-body diagram of the span, we would see these forces:
  // V_left = 6EIΔ/L², upward
  // M_left = 12EIΔ/L³, clockwise
  // V_right = 6EIΔ/L², downward
  // M_right = 12EIΔ/L³, clockwise
  // The Span Stiffness Matrix is populated, for each span, with just those stiffnesses.

  const ssm = []; // Span Stiffnes Matrix, not yet the Stiffness Matrix.
  ssm.push([0, 0, 0, 0, 0]);
  for (let i = 1; i <= numSpans; i++) {
    const subMatrix = [
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0]
    ];
    subMatrix[1][1] = EI * 12 / spans[i].length ** 3;
    subMatrix[1][2] = EI * 6 / spans[i].length ** 2;
    subMatrix[1][3] = -EI * 12 / spans[i].length ** 3;
    subMatrix[1][4] = EI * 6 / spans[i].length ** 2;
    subMatrix[2][1] = EI * 6 / spans[i].length ** 2;
    subMatrix[2][2] = EI * 4 / spans[i].length;
    subMatrix[2][3] = -EI * 6 / spans[i].length ** 2;
    subMatrix[2][4] = EI * 2 / spans[i].length;
    subMatrix[3][1] = -EI * 12 / spans[i].length ** 3;
    subMatrix[3][2] = -EI * 6 / spans[i].length ** 2;
    subMatrix[3][3] = EI * 12 / spans[i].length ** 3;
    subMatrix[3][4] = -EI * 6 / spans[i].length ** 2;
    subMatrix[4][1] = EI * 6 / spans[i].length ** 2;
    subMatrix[4][2] = EI * 2 / spans[i].length;
    subMatrix[4][3] = -EI * 6 / spans[i].length ** 2;
    subMatrix[4][4] = EI * 4 / spans[i].length;
    ssm.push(subMatrix);
  }

  //Find dtm, the Displacement Transformation Matrix
  const dtm = new Array(numEndActions + 1).fill(0).map(e => {
    return new Array(numDegreesOfFreedom + 1).fill(0)
  });
  let j = 0;
  for (let i = 1; i <= numNodes; i++) {
    if (i === 1) {
      if (nodes[i].fixity === "continuous" || nodes[i].fixity === "spring") {
        dtm[1][1] = 1;
        dtm[2][1] = 1;
        dtm[3][2] = 1;
        j = 2;
      } else if (nodes[i].fixity === "fixed") ; else if (nodes[i].fixity === "pinned") {
        dtm[3][1] = 1;
        j = 1;
      }
    } else if (i === numNodes) {
      if (nodes[i].fixity === "continuous" || nodes[i].fixity === "spring") {
        j = j + 1;
        dtm[5 * numSpans - 1][j] = 1;
        j = j + 1;
        dtm[5 * numSpans][j] = 1;
        dtm[5 * numSpans + 1][j - 1] = 1;
      } else if (nodes[i].fixity === "fixed") ; else if (nodes[i].fixity === "pinned") {
        j = j + 1;
        dtm[5 * numSpans][j] = 1;
      }
    } else {
      if (nodes[i].fixity === "continuous" || nodes[i].fixity === "spring") {
        j = j + 1;
        dtm[5 * (i - 1) - 1][j] = 1;
        dtm[5 * (i - 1) + 1][j] = 1;
        dtm[5 * (i - 1) + 2][j] = 1;
        j = j + 1;
        dtm[5 * (i - 1)][j] = 1;
        dtm[5 * (i - 1) + 3][j] = 1;
      } else if (nodes[i].fixity === "hinge") {
        j = j + 1;
        dtm[5 * (i - 1) - 1][j] = 1;
        dtm[5 * (i - 1) + 1][j] = 1;
        dtm[5 * (i - 1) + 2][j] = 1;
        j = j + 1;
        dtm[5 * (i - 1)][j] = 1;
        j = j + 1;
        dtm[5 * (i - 1) + 3][j] = 1;
      } else if (nodes[i].fixity === "proppedHinge") {
        j = j + 1;
        dtm[5 * (i - 1)][j] = 1;
        j = j + 1;
        dtm[5 * (i - 1) + 3][j] = 1;
      } else if (nodes[i].fixity === "fixed") ; else if (nodes[i].fixity === "pinned") {
        j = j + 1;
        dtm[5 * (i - 1)][j] = 1;
        dtm[5 * (i - 1) + 3][j] = 1;
      }
    }
  }

  //Now do the first  matrix operations
  const lsmDtm = createLsmDtm(ssm, dtm, nodes, numEndActions, numDegreesOfFreedom);
  // Create the Stiffness Matrix.
  const [sm, bandWidth] = createSM(dtm, lsmDtm, numDegreesOfFreedom);

  let diag = [];
  let ltm = [];
  if (numDegreesOfFreedom > 1) {
    [diag, ltm] = luDecomposition(sm, bandWidth);
  }

  //Find the number of load patterns
  beam.containsLive = false;
  for (let i = 1; i <= beam.numLoadTypes; i++) {
    if (beam.getsPattern[i]) { beam.containsLive = true; break }
  }
  const numPatterns = !beam.containsLive
    ? 1
    : !beam.doLiveLoadPatterns
    ? 1
    : numSpans > 7
    ? beam.patterns
    : 2;

  // Initialize some variables
  const feam = new Array(numEndActions + 1).fill(0);       // Fixed End Action Matrix
  const nfm = new Array(numDegreesOfFreedom + 1).fill(0);  // Nodal Force Matrix
  let mam;  // Member Action Matrix
  let dm;   // Displacement Matrix
  const actions = new Array(beam.numLoadTypes);
  const deflections = new Array(beam.numLoadTypes);
  for (let i = 0; i <= beam.numLoadTypes; i++) {
    if (beam.getsPattern[i]) {
      actions[i] = new Array(numEndActions + 1).fill(0);
      for (let j = 0; j < actions[i].length; j++) {
        actions[i][j] = new Array(numDegreesOfFreedom).fill(0);
      }
      deflections[i] = new Array(numDegreesOfFreedom + 1).fill(0);
      for (let j = 0; j < deflections[i].length; j++) {
        deflections[i][j] = Array(numSpans + 1).fill(0);
      }
    } else {
      actions[i] = new Array(numEndActions).fill(0);
      deflections[i] = new Array(numDegreesOfFreedom).fill(0);
    }
  }

  //Find a Member end Action Matrix, mam for each type of load, Service, D, L, S, W, E, etc
  //For the live loads, find a different mam due to loads on each individual span.
  for (let loadType = 0; loadType <= 9; loadType++) {
    if (loadType === 0 || gotType[loadType]) {
      let lastK = 0;
      let doPatterns = false; // patterned live loads
      if (loadType === 0) {
        doPatterns = false;
        lastK = 1;
      } else if (isLiveish(loadType, beam) && numPatterns > 1) {
        doPatterns = true;
        // To do load patterns, we have to get a Member Action Matrix, mam, for each span.
        lastK = numSpans;
      } else {
        doPatterns = false;
        lastK = 1;
      }

      for (let k = 1; k <= lastK; k++) {
        for (let i = 1;  i <= numSpans; i++) {
          const L = spans[i].length;
          const iSpring = 5 * i - 4;
          const i1 = 5 * i - 3;
          const i2 = 5 * i - 2;
          const i3 = 5 * i - 1;
          const i4 = 5 * i;

          // Find the fixed end actions
          feam[iSpring] = 0;
          feam[i1] = 0; //The left end reaction if this segment were a fixed/fixed beam.
          feam[i2] = 0; //The left fixed end moment
          feam[i3] = 0; //The right end reaction
          feam[i4] = 0; //The right fixed end moment
          let applyLoadsFromThisSpan = false;
          if (!doPatterns) {
            // We are not doing live load patterns.
            // So make one pass thru the beam and get a MAM that is the result of all loads.
            applyLoadsFromThisSpan = true;
          } else {
            // We are doing live load patterns.
            // k = number of spans.
            // Make k passes thru the beam.
            // In the kth pass, we calclate a MAM for the entire beam that results from
            // live loads on just the kth span.
            // The other spans have FEAM = [0, 0, etc] as their contribution to this MAM.
            // Having k MAMs will enable us later to superimpose forces for each pattern.
            applyLoadsFromThisSpan = i === k;
          }

          if (applyLoadsFromThisSpan) {
            for (let iSeg = 0; iSeg < spans[i].segments.length; iSeg++) {
              const seg = spans[i].segments[iSeg];
              // In the next few lines,
              // a is the distance from the beginning of the span to the load point.
              // b is the length of the load.
              // c is the distance from the end of the load to the right edge of the span.
              // e is the distance from the left edge of the load to the right end of the span.
              // d is the distance from the right edge of the load to the left edge of the span
              let w = 0;
              let s = 0;
              const a = seg.xOfLeftEnd - nodes[i].x;
              let b = seg.length;
              let c = L - a - b;
              let d = a + b;
              const e = b + c;
              let gotOppSigns = false;
              let a2 = 0;
              let b2 = 0;
              let c2 = 0;
              let d2 = 0;
              let e2 = 0;

              if (Math.abs(seg.w1[loadType]) < 0.000000001) { seg.w1[loadType] = 0; }
              if (Math.abs(seg.w2[loadType]) < 0.000000001) { seg.w2[loadType] = 0; }

              if (seg.w1[loadType] !== 0 && seg.w2[loadType] !== 0 &&
                      Math.sign(seg.w1[loadType]) !== Math.sign(seg.w2[loadType])) {
                gotOppSigns = true;
                w = 0;
                s = (seg.w2[loadType] - seg.w1[loadType]) / b;   //slope of line load
                a2 = a - seg.w1[loadType] / s;
                b2 = d - a2;
                c2 = c;
                d2 = d;
                e2 = d2 - b2;
                b = a2 - a;
                d = a + b;
                c = L - d;

              } else {
                gotOppSigns = false;
                w = Math.abs(seg.w1[loadType]) < Math.abs(seg.w2[loadType])
                  ? seg.w1[loadType]
                  : seg.w2[loadType];
              }

              if (a === 0) {
                feam[iSpring] = seg.P[loadType];
              } else {
                //FEA for point loads
                feam[i2] = feam[i2] + seg.P[loadType] * a * e ** 2 / L ** 2;
                feam[i4] = feam[i4] - seg.P[loadType] * a ** 2 * e / L ** 2;
                feam[i2] = feam[i2] - seg.M[loadType] * (-1 + 4 * a / L - 3 * a ** 2 / L ** 2);
                feam[i4] = feam[i4] - seg.M[loadType] * a / L * (2 - 3 * a / L);
                feam[i1] = feam[i1] + seg.P[loadType] * e ** 2 / L ** 3 * (3 * a + e);
                feam[i3] = feam[i3] + seg.P[loadType] * a ** 2 / L ** 3 * (a + 3 * e);
                feam[i1] = feam[i1] - 6 * seg.M[loadType] * a / L ** 2 * (1 - a / L);
                feam[i3] = feam[i3] + 6 * seg.M[loadType] * a / L ** 2 * (1 - a / L);
              }

              //FEA for uniform loads
              if (w !== 0) {
                const mA = (w * b / (12 * L ** 2 * b)) * (e ** 3 * (4 * L - 3 * e)
                    - c ** 3 * (4 * L - 3 * c));
                feam[i2] = feam[i2] + mA;
                const mB = (w * b / (12 * L ** 2 * b)) * (d ** 3 * (4 * L - 3 * d)
                    - a ** 3 * (4 * L - 3 * a));
                feam[i4] = feam[i4] - mB;
                feam[i1] = feam[i1] + (w * b / (2 * L)) * (2 * c + b) + (mA - mB) / L;
                feam[i3] = feam[i3] + (w * b / (2 * L)) * (2 * a + b) + (mB - mA) / L;
              }

              //FEA for triangular loads
              if (Math.abs(seg.w1[loadType]) > Math.abs(seg.w2[loadType]) || gotOppSigns) {
                const wL = seg.w1[loadType] - w;
                // const wR = 0
                const wT = wL;
                const centerOfTriangle = a + b / 3;
                const wF = wT * d / b;
                const mA = (wF * L ** 2 / 60) * (d / L) ** 2 * (10 - 10 * d / L
                    + 3 * d ** 2 / L ** 2)
                    - ((wF - wT) * L ** 2 / 60) * (a / L) ** 2
                      * (10 - 10 * a / L + 3 * a ** 2 / L ** 2)
                    - (wT * L ** 2 / 12) * (a / L) ** 2 * (6 - 8 * a / L + 3 * a ** 2 / L ** 2);
                feam[i2] = feam[i2] + mA;
                const mB = (wF * L ** 2 / 60) * (d / L) ** 3 * (5 - 3 * d / L)
                    - ((wF - wT) * L ** 2 / 60) * (a / L) ** 3 * (5 - 3 * a / L)
                    - (wT * L ** 2 / 12) * (a / L) ** 3 * (4 - 3 * a / L);
                feam[i4] = feam[i4] - mB;
                feam[i1] = feam[i1]
                          + 0.5 * (wT * b) * (L - centerOfTriangle) / L + (mA - mB) / L;
                feam[i3] = feam[i3] + 0.5 * (wT * b) * centerOfTriangle / L + (mB - mA) / L;

              } else if (Math.abs(seg.w2[loadType]) > Math.abs(seg.w1[loadType])) {
                // const wL = 0
                const wR = seg.w2[loadType] - w;
                const wT = wR;
                const centerOfTriangle = a + 2 * b / 3;
                const wF = wT * e / b;
                const mA = (wF * L ** 2 / 60) * (e / L) ** 3 * (5 - 3 * e / L)
                    - ((wF - wT) * L ** 2 / 60) * (c / L) ** 3 * (5 - 3 * c / L)
                    - (wT * L ** 2 / 12) * (c / L) ** 3 * (4 - 3 * c / L);
                feam[i2] = feam[i2] + mA;
                const mB = (wF * L ** 2 / 60) * (e / L) ** 2
                      * (10 - 10 * e / L + 3 * e ** 2 / L ** 2)
                    - ((wF - wT) * L ** 2 / 60) * (c / L) ** 2
                      * (10 - 10 * c / L + 3 * c ** 2 / L ** 2)
                    - (wT * L ** 2 / 12) * (c / L) ** 2 * (6 - 8 * c / L + 3 * c ** 2 / L ** 2);
                feam[i4] = feam[i4] - mB;
                feam[i1] = feam[i1]
                           + 0.5 * (wT * b) * (L - centerOfTriangle) / L + (mA - mB) / L;
                feam[i3] = feam[i3] + 0.5 * (wT * b) * centerOfTriangle / L + (mB - mA) / L;
              }
              if (gotOppSigns) {
                //Do the right-hand triangle load
                // const wL = 0
                // const wR = seg.w2[loadType]
                const wT = seg.w2[loadType];
                const centerOfTriangle = a2 + 2 * b2 / 3;
                const wF = wT * e2 / b2;
                const mA = (wF * L ** 2 / 60) * (e2 / L) ** 3 * (5 - 3 * e2 / L)
                    - ((wF - wT) * L ** 2 / 60) * (c2 / L) ** 3 * (5 - 3 * c2 / L)
                    - (wT * L ** 2 / 12) * (c2 / L) ** 3 * (4 - 3 * c2 / L);
                feam[i2] = feam[i2] + mA;
                const mB = (wF * L ** 2 / 60) * (e2 / L) ** 2
                    * (10 - 10 * e2 / L + 3 * e2 ** 2 / L ** 2)
                    - ((wF - wT) * L ** 2 / 60) * (c2 / L) ** 2
                    * (10 - 10 * c2 / L + 3 * c2 ** 2 / L ** 2)
                    // eslint-disable-next-line max-len
                    - (wT * L ** 2 / 12) * (c2 / L) ** 2 * (6 - 8 * c2 / L + 3 * c2 ** 2 / L ** 2);
                feam[i4] = feam[i4] - mB;
                feam[i1] = feam[i1]
                          + 0.5 * (wT * b2) * (L - centerOfTriangle) / L + (mA - mB) / L;
                feam[i3] = feam[i3] + 0.5 * (wT * b2) * centerOfTriangle / L + (mB - mA) / L;
              }
            }
          }
        }

        //Find the Nodal Force Matrix, NFM
        let j = 0;
        for (let i = 1; i <= numNodes; i++) {
          if (i === 1) {
            if (nodes[i].fixity === "continuous" || nodes[i].fixity === "spring") {
              nfm[1] = -feam[1] - feam[2];
              nfm[2] = -feam[3];
              if (isLiveish(loadType, beam) && numPatterns > 1) {
                if (k === 0) {
                  nfm[1] = nfm[1] - nodes[1].P[loadType];
                  nfm[2] = nfm[2] - nodes[1].M[loadType];
                }
              } else {
                nfm[1] = nfm[1] - nodes[1].P[loadType];
                nfm[2] = nfm[2] - nodes[1].M[loadType];
              }

              j = 2;
            } else if (nodes[i].fixity === "fixed") ; else if (nodes[i].fixity === "pinned") {
              j += 1;
              nfm[1] = -feam[3];
              if (isLiveish(loadType, beam) && numPatterns > 1) {
                if (k === 1) {
                  nfm[j] = nfm[j] - nodes[1].M[loadType];
                }
              } else {
                nfm[j] = nfm[j] - nodes[1].M[loadType];
              }
            }
          } else if (i === numNodes) {
            if (nodes[i].fixity === "continuous" || nodes[i].fixity === "spring") {
              j += 1;
              nfm[j] = -feam[5 * numSpans - 1] - feam[5 * numSpans + 1];
              j += 1;
              nfm[j] = -feam[5 * numSpans];
              if (isLiveish(loadType, beam) && numPatterns > 1) {
                if (k === numSpans) {
                  nfm[j - 1] = nfm[j - 1] - nodes[numNodes].P[loadType];
                  nfm[j] = nfm[j] - nodes[numNodes].M[loadType];
                }
              } else {
                nfm[j - 1] = nfm[j - 1] - nodes[numNodes].P[loadType];
                nfm[j] = nfm[j] - nodes[numNodes].M[loadType];
              }
            } else if (nodes[i].fixity === "fixed") ; else if (nodes[i].fixity === "pinned") {
              j += 1;
              nfm[j] = -feam[5 * numSpans];
              if (isLiveish(loadType, beam) && numPatterns > 1) {
                if (k === numSpans) {
                  nfm[j] = nfm[j] - nodes[numNodes].M[loadType];
                }
              } else {
                nfm[j] = nfm[j] - nodes[numNodes].M[loadType];
              }
            }
          } else {
            if (nodes[i].fixity === "continuous" || nodes[i].fixity === "spring") {
              j += 1;
              nfm[j] = -feam[5 * (i - 1) - 1] - feam[5 * (i - 1) + 1] - feam[5 * (i - 1) + 2];
              j += 1;
              nfm[j] = -feam[5 * (i - 1)] - feam[5 * (i - 1) + 3];
              if ((loadType === 3 || loadType === 5 || loadType === 6) && numPatterns > 1) {
                if (k === i) {
                  nfm[j - 1] = nfm[j - 1] - nodes[i].P[loadType];
                  nfm[j] = nfm[j] - nodes[i].M[loadType];
                }
              } else {
                nfm[j - 1] = nfm[j - 1] - nodes[i].P[loadType];
                nfm[j] = nfm[j] - nodes[i].M[loadType];
              }
            } else if (nodes[i].fixity === "hinge") {
              j += 1;
              nfm[j] = -feam[5 * (i - 1) - 1] - feam[5 * (i - 1) + 1] - feam[5 * (i - 1) + 2];
              j += 1;
              nfm[j] = -feam[5 * (i - 1)];
              if ((loadType === 3 || loadType === 5 || loadType === 6) && numPatterns > 1) {
                if (k === i) {
                  nfm[j - 1] = nfm[j - 1] - nodes[i].P[loadType];
                  nfm[j] = nfm[j] - nodes[i].M[loadType];
                }
              } else {
                nfm[j - 1] = nfm[j - 1] - nodes[i].P[loadType];
                nfm[j] = nfm[j] - nodes[i].M[loadType];
              }

              j += 1;
              nfm[j] = -feam[5 * (i - 1) + 3];
            } else if (nodes[i].fixity === "proppedHinge") {
              j += 1;
              nfm[j] = -feam[5 * (i - 1)];
              j += 1;
              nfm[j] = -feam[5 * (i - 1) + 3];
            } else if (nodes[i].fixity === "fixed") ; else if (nodes[i].fixity === "pinned") {
              j += 1;
              nfm[j] = -feam[5 * (i - 1)] - feam[5 * (i - 1) + 3];
              if ((loadType === 3 || loadType === 5 || loadType === 6) && numPatterns > 1) {
                if (k === i) {
                  nfm[j] = nfm[j] - nodes[i].M[loadType];
                }
              } else {
                nfm[j] = nfm[j] - nodes[i].M[loadType];
              }
            }
          }
        }

        //Now do the rest of the matrix operations for the current load type
        if (numDegreesOfFreedom === 0) {
          dm = [0];
        } else if (numDegreesOfFreedom === 1) {
          dm = [0, nfm[1] / sm[1][1]];
        } else {
          dm = solveViaLDLt(diag, ltm, nfm, bandWidth);
        }

        // Get the Member Action Matrix, MAM.
        // Multiply lsmDtm times dm, then add the resulting column vector to the FEAM
        mam = lsmDtm.map(row => dotProduct(row, dm)).map((e, i) => e + feam[i]);

        //Set elements of mam = 0 where fixity so dictates
        for (let i = 1; i <= numEndActions; i++) {
          if (Math.abs(mam[i]) < 0.00000000000001) { mam[i] = 0; }
        }

        if ((!beam.getsPattern[loadType]) || typeof actions[loadType][0] === "number") {
          actions[loadType] = clone(mam);
          if (EI !== 1) { deflections[loadType] = clone(dm); }
        } else {
          for (let j = 1; j < 5 * numSpans + 1; j++) {
            actions[loadType][j][k - 1] = mam[j]; //mam for live loads on span k
          }
          if (EI !== 1) {
            for (let j = 1; j <= numDegreesOfFreedom; j++) {
              deflections[loadType][j][k] = dm[j];
            }
          }
        }

        // Find the reactions
        if (numPatterns === 1 || !(beam.containsLive && isLiveish(loadType, beam))) {
          if (nodes[1].fixity === "fixed") {
            nodes[1].Mr[loadType] = mam[3] + nodes[1].M[loadType];
          }
          if (nodes[1].fixity === "spring") {
            nodes[1].Pr[loadType] = mam[1];
          } else if (nodes[1].fixity !== "continuous") {
            nodes[1].Pr[loadType] = -mam[2] - nodes[1].P[loadType];
          }

          for (let j = 2; j <= numSpans; j++) {
            if (nodes[j].fixity === "fixed") {
              nodes[j].Mr[loadType] = mam[5 * (j - 1)]
                                       + mam[5 * (j - 1) + 3] + nodes[j].M[loadType];
            }
            if (nodes[j].fixity === "spring") {
              nodes[j].Pr[loadType] = mam[5 * (j - 1) + 1];
            } else if (nodes[j].fixity !== "continuous") {
              nodes[j].Pr[loadType] = -mam[5 * (j - 1) - 1] - mam[5 * (j - 1) + 2]
                  - nodes[j].P[loadType];
            }
          }

          if (nodes[numNodes].fixity === "fixed") {
            nodes[numNodes].Mr[loadType] = mam[5 * numSpans] + nodes[numNodes].M[loadType];
          }
          if (nodes[numNodes].fixity === "spring") {
            nodes[numNodes].Pr[loadType] = mam[5 * numSpans + 1];
          } else if (nodes[numNodes].fixity !== "continuous") {
            nodes[numNodes].Pr[loadType] = -mam[5 * numSpans - 1] - nodes[numNodes].P[loadType];
          }
        } else {
          let mTest = 0;
          if (nodes[1].fixity === "fixed") {
            mTest = mam[3] + nodes[1].M[loadType];
            if (mTest > 0) { nodes[1].Mr[loadType] = nodes[1].Mr[loadType] + mTest; }
            if (mTest < 0) { nodes[1].MrMin[loadType] = nodes[1].MrMin[loadType] + mTest; }
          }
          let pTest = 0;
          if (nodes[1].fixity === "spring") {
            pTest = mam[1];
          } else if (nodes[1].fixity !== "continuous") {
            pTest = -mam[2] - nodes[1].P[loadType];
          }
          if (pTest > 0) { nodes[1].Pr[loadType] = nodes[1].Pr[loadType] + pTest; }
          if (pTest < 0) { nodes[1].PrMin[loadType] = nodes[1].PrMin[loadType] + pTest; }

          for (let j = 1; j < numSpans; j++) {
            if (nodes[j].fixity === "fixed") {
              mTest = mam[5 * (j - 1)] + mam[5 * (j - 1) + 3] + nodes[j].M[loadType];
              if (mTest > 0) { nodes[j].Mr[loadType] = nodes[j].Mr[loadType] + mTest; }
              if (mTest < 0) { nodes[j].MrMin[loadType] = nodes[j].MrMin[loadType] + mTest; }
            }
            pTest = 0;
            if (nodes[j].fixity === "spring") {
              nodes[j].Pr[loadType] = nodes[j].Pr[loadType] + mam[5 * (j - 1) + 1];
            } else if (nodes[j].fixity !== "continuous") {
              pTest = -mam[5 * (j - 1) - 1] - mam[5 * (j - 1) + 2] - nodes[j].P[loadType];
            }
            if (pTest > 0) { nodes[j].Pr[loadType] = nodes[j].Pr[loadType] + pTest; }
            if (pTest < 0) { nodes[j].PrMin[loadType] = nodes[j].PrMin[loadType] + pTest; }
          }

          if (nodes[numNodes].fixity === "fixed") {
            mTest = mam[5 * numSpans] + nodes[numSpans].M[loadType];
            if (mTest > 0) {
              nodes[numNodes].Mr[loadType] = nodes[numNodes].Mr[loadType] + mTest;
            }
            if (mTest < 0) {
              nodes[numNodes].MrMin[loadType] = nodes[numNodes].MrMin[loadType] + mTest;
            }
          }

          pTest = 0;
          if (nodes[numNodes].fixity === "spring") {
            nodes[numNodes].Pr[loadType] = nodes[numNodes].Pr[loadType] + mam[5 * numSpans + 1];
          } else if (nodes[numNodes].fixity !== "continuous") {
            pTest = -mam[5 * numSpans - 1] - nodes[j].P[loadType];
          }
          if (pTest > 0) {
            nodes[numNodes].Pr[loadType] = nodes[numNodes].Pr[loadType] + pTest;
          }
          if (pTest < 0) {
            nodes[numNodes].PrMin[loadType] = nodes[numNodes].PrMin[loadType] + pTest;
          }
        } //finished finding the reactions

      }
    }
  }
  return [actions, deflections]
}

const createLsmDtm = (ssm, dtm, nodes, numEndActions, numDegreesOfFreedom) => {
// Create LSM × DTM

  let lsmDtm = new Array(numEndActions + 1).fill(0);
  lsmDtm = lsmDtm.map(e => new Array(numDegreesOfFreedom + 1).fill(0));

  for (let i = 1; i <= numEndActions; i++) {
    const iSpan = Math.trunc((i - 1) / 5) + 1;
    const g = i - 1 - 5 * (iSpan - 1);

    for (let j = 1; j <= numDegreesOfFreedom; j++) {
      if (g === 0) {
        lsmDtm[i][j] = nodes[iSpan].k * dtm[i][j];
      } else {
        const kStart = 5 * iSpan - 3;
        const kEnd = 5 * iSpan;
        let h = 0;
        for (let k = kStart; k <= kEnd; k++) {
          h += 1;
          lsmDtm[i][j] = lsmDtm[i][j] + ssm[iSpan][g][h] * dtm[k][j];
        }
      }
    }
  }
  return lsmDtm
};

const createSM = (dtm, lsmDtm, numDegreesOfFreedom) => {
  // Create the Stiffness Matrix, SM.
  // SM = DTM**T × LsmDtm
  let sm = Array(numDegreesOfFreedom + 1).fill(0);
  sm = sm.map(e => Array(numDegreesOfFreedom + 1).fill(0));
  const h = lsmDtm.length - 1;
  let bandWidth = 1;
  for (let i = 1; i < dtm[0].length; i++) {
    for (let j = 1; j <= i; j++) {                       // Only the lower half of SM.
      for (let k = 1; k <= h; k++) {
        sm[i][j] = sm[i][j] + dtm[k][i] * lsmDtm[k][j];   // DTM**T, not DTM.
      }
      if (sm[i][j] !== 0 && i - j > bandWidth) { bandWidth = i - j;}  // lower band width
    }
  }
  return [sm, bandWidth]
};

const luDecomposition = (sm, bandWidth) => {
  // Perform the LU Decomposition of the stiffness matrix, SM.
  // This is in preparation for the LDL**T matrix solution to come later.

  const diag = new Array(sm.length).fill(0);
  // Lower Triangular matrix, ltm
  let ltm = new Array(sm.length).fill(0);
  ltm = ltm.map(e => new Array(sm.length - 1).fill(0));

  const n = sm.length - 1;    // number of equations

  for (let j = 1; j <= n; j++) {
    let kStar = Math.max(j - bandWidth, 1);
    diag[j] = sm[j][j];
    for (let k = kStar; k <= j - 1; k++) {
      diag[j] = diag[j] - diag[k] * ltm[j][k] * ltm[j][k];
    }

    const iMax = Math.min(j + bandWidth, n);
    for (let i = j + 1; i <= iMax; i++) {
      kStar =  Math.max(i - bandWidth, 1);
      let sum = 0;
      for (let k = kStar; k <= j - 1; k++) {
        sum = sum + diag[k] * ltm[j][k] * ltm[i][k];
      }
      ltm[i][j] = (sm[i][j] - sum) / diag[j];
    }
  }
  return [diag, ltm]
};

const solveViaLDLt = (diag, ltm, b, bandWidth) => {
  // Solve for dm() in a system of equations expressed by matrices: SM() × dm() = NFM()

  // This sub// s method is a banded version of the LDL**T solver.
  // LDL**T takes advantage of the fact that SM is a symmetric, positive-definite matrix.
  // The algorithm will overwrite b(), which starts out as NFM and ends as dm.
  // We already have the diag & ltm matrices, so we can go directly to the LU solution.

  const n = b.length - 1;       // number of equations

  // Forward substitution
  for (let i = 2; i <= n; i++) {
    const kStar = i - bandWidth < 1 ? 1 : i - bandWidth;
    for (let k = kStar; k <= i - 1; k++) {
      b[i] = b[i] - ltm[i][k] * b[k];
    }
  }

  // Diagonal scaling and backward substitution
  b[n] = b[n] / diag[n];
  for (let i = n - 1; i >= 1; i--) {
    b[i] = b[i] / diag[i];
    const kStar = Math.min(n, i + bandWidth);
    for (let k = i + 1; k <= kStar; k++) {
      b[i] = b[i] - ltm[k][i] * b[k];
    }
  }

  return b
};

function getLoadPatterns(beam, numSpans) {
  if (!beam.containsLive || !beam.doLiveLoadPatterns) {
    // Just one pattern. It includes each span.
    const pattern = [1];
    for (let i = 2; i <= numSpans; i++) {
      pattern.push(i);
    }
    return [pattern]
  } else if (beam.numPatterns === 2 || numSpans > 7) {
    // Do 2 patterns.  One with all live load on, and one with all live load off.
    const pattern = [1];
    for (let i = 2; i <= numSpans; i++) {
      pattern.push(i);
    }
    return [pattern, []]
  } else {
    switch (numSpans) {
      case 1:
        return [[1], []]
      case 2:
        return [[1, 2], [], [1], [2]]
      case 3:
        return [[1, 2, 3], [], [1], [2], [3], [1, 2], [1, 3], [2, 3]]
      case 4:
        // eslint-disable-next-line max-len
        return [[1, 2, 3, 4], [], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]
      case 5:
        // eslint-disable-next-line max-len
        return [[1, 2, 3, 4, 5], [], [1], [2], [3], [4], [5], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]
      case 6:
        // eslint-disable-next-line max-len
        return [[1, 2, 3, 4, 5, 6], [], [1], [2], [3], [4], [5], [6], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6], [4, 5], [4, 6], [5, 6], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [1, 5, 6], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 5, 6], [3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 4, 5, 6], [1, 3, 4, 5, 6], [2, 3, 4, 5, 6]]
      case 7:
        // eslint-disable-next-line max-len
        return [[1, 2, 3, 4, 5, 6, 7], [], [1], [2], [3], [4], [5], [6], [7], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 4], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 6], [5, 7], [6, 7], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 5, 6], [1, 5, 7], [1, 6, 7], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], [2, 6, 7], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 5, 6], [3, 5, 7], [3, 6, 7], [4, 5, 6], [4, 5, 7], [4, 6, 7], [5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 6, 7], [1, 2, 4, 5, 6], [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], [1, 2, 5, 6, 7], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 3, 4, 6, 7], [1, 3, 5, 6, 7], [1, 4, 5, 6, 7], [2, 3, 4, 5, 6], [2, 3, 4, 5, 7], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [2, 4, 5, 6, 7], [3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 6, 7], [1, 2, 3, 5, 6, 7], [1, 2, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7]]
        // We cannot get here.
    }
  }
}

function populateMAM(loadFactors, combern, loadPattern, beam, nodes, spans, actions) {
  let mam = new Array(beam.numEndActions).fill(0); // Member end Action Matrix
  const numSpans = spans.length - 1;
  const numNodes = nodes.length - 1;
  const numPatterns = beam.numPatterns;
  const didNode = new Array(numNodes);

  // Fill mam with dead load
  const deadLoadFactor = loadFactors[1];
  mam = mam.map((e, i) => deadLoadFactor * actions[1][i]);
  for (let i = 1; i <= numSpans; i++) {
    nodes[i].Pf = deadLoadFactor * nodes[i].P[1];
    nodes[i].Mf = deadLoadFactor * nodes[i].M[1];
    for (let j = 0; j < spans[i].segments.length; j++) {
      const seg = spans[i].segments[j];
      seg.w1f[combern] = deadLoadFactor * seg.w1[1];
      seg.w2f = deadLoadFactor * seg.w2[1];
      seg.Pf = deadLoadFactor * seg.P[1];
      seg.Mf = deadLoadFactor * seg.M[1];
    }
  }

  // Superimpose the other load types onto mam.
  for (let iLoadType = 2; iLoadType <= 9; iLoadType++) {
    const loadFactor = loadFactors[iLoadType];
    if (loadFactor > 0 && beam.gotType[iLoadType]) {
      if (!beam.getsPattern[iLoadType] || numPatterns === 1) {
        mam = mam.map((e, i) => e + loadFactor * actions[iLoadType][i]);
        for (let i = 1; i <= numSpans; i++) {
          nodes[i].Pf = nodes[i].Pf + loadFactor * nodes[i].P[iLoadType];
          nodes[i].Mf = nodes[i].Mf + loadFactor * nodes[i].M[iLoadType];
          for (let j = 0; j < spans[i].segments.length; j++) {
            const seg = spans[i].segments[j];
            seg.w1f[combern] = seg.w1f[combern] + loadFactor * seg.w1[iLoadType];
            seg.w2f = seg.w2f + loadFactor * seg.w2[iLoadType];
            seg.Pf = seg.Pf + loadFactor * seg.P[iLoadType];
            seg.Mf = seg.Mf + loadFactor * seg.M[iLoadType];
          }
        }
      } else {
        // load case includes live load patterns
        for (let k = 1; k <= numSpans; k++) {
          if (loadPattern.includes(k)) {
            let ii = 0;
            for (let j = 1; j <= numSpans; j++) {
              ii = 5 * j - 4;
              mam[ii] = mam[ii] + loadFactor * actions[iLoadType][ii][k - 1];
              mam[ii + 1] = mam[ii + 1] + loadFactor * actions[iLoadType][ii + 1][k - 1];
              mam[ii + 2] = mam[ii + 2] + loadFactor * actions[iLoadType][ii + 2][k - 1];
              mam[ii + 3] = mam[ii + 3] + loadFactor * actions[iLoadType][ii + 3][k - 1];
              mam[ii + 4] = mam[ii + 4] + loadFactor * actions[iLoadType][ii + 4][k - 1];
            }
            mam[ii + 5] = mam[ii + 5] + loadFactor * actions[iLoadType][ii + 5][k - 1];
          }
        }

        // Do node loads.
        // Include a node load if the span on either side is in the load pattern.
        didNode.fill(false);
        for (let i = 1; i <= numSpans; i++) {
          if (loadPattern.includes(i)) {
            if (!didNode[i]) {
              nodes[i].Pf = nodes[i].Pf + loadFactor * nodes[i].P[iLoadType];
              nodes[i].Mf = nodes[i].Mf + loadFactor * nodes[i].M[iLoadType];
              didNode[i] = true;
            }
            if (!didNode[i + 1]) {
              nodes[i + 1].Pf = nodes[i + 1].Pf + loadFactor * nodes[i + 1].P[iLoadType];
              nodes[i + 1].Mf = nodes[i + 1].Mf + loadFactor * nodes[i + 1].M[iLoadType];
              didNode[i + 1] = true;
            }
          }
          for (let j = 0; j < spans[i].segments.length; j++) {
            const seg = spans[i].segments[j];
            if (loadPattern.includes(i)) {
              seg.w1f[combern] = seg.w1f[combern] + loadFactor * seg.w1[iLoadType];
              seg.w2f = seg.w2f + loadFactor * seg.w2[iLoadType];
              seg.Pf = seg.Pf + loadFactor * seg.P[iLoadType];
              seg.Mf = seg.Mf + loadFactor * seg.M[iLoadType];
            }
          }
        }
      }
    }
  }

  for (let i = 1; i <= numSpans; i++) {
    for (let j = 0; j < spans[i].segments.length; j++) {
      const seg = spans[i].segments[j];
      if (seg.length !== 0) {
        seg.slope[combern] = (seg.w2f - seg.w1f[combern]) / seg.length;
      }
    }
  }
  return mam
}

function combine(beam, nodes, spans, actions, deflections, comboSet) {
  // We already have member end actions for each load type on each span.
  // In this function, we superimpose the load combinations and live load patterns and
  // find the maximum and minimum shears and moments.
  const numSpans = spans.length - 1;
  const isService = comboSet === "service";
  if (isService) { comboSet = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1]]; }
  const liveLoadPatterns = getLoadPatterns(beam, numSpans);
  const numPatterns = liveLoadPatterns.length;

  let vMin = 0;
  let vMax = 0;
  let mMin = 0;
  let mMax = 0;
  let deflectionMax = 0;
  let deflMaxCase = 0;
  let deflectionMin = 0;
  let deflMinCase = 0;

  // Get ready to do lots of different load combinations.
  // Definition: "combern" is a conflation of the words "combination" and "pattern".
  const numComberns = getNumComberns(comboSet, isService, beam, numPatterns);

  for (let i = 1; i <= numSpans; i++) {
    for (let j = 0; j < spans[i].segments.length; j++) {
      const seg = spans[i].segments[j];
      seg.w1f = new Array(numComberns).fill(0);
      seg.w2f = 0;
      seg.slope = new Array(numComberns).fill(0);
      seg.V1 = new Array(numComberns).fill(0);
      seg.M1 = new Array(numComberns).fill(0);
      if (beam.EI !== 1) {
        seg.theta1 = new Array(numPatterns).fill(0);
        seg.delta1 = new Array(numPatterns).fill(0);
      }
    }
  }

  // The number of interations through this next loop will be a function of
  // both the number of load combinations and the number of load patterns.
  // I define "combern" as a conflation of the words "combination" & "pattern"
  // "combern" will be the loop index as we look at unique combinations of both
  // load combinations and live load patterns.
  // Each time through the loop, we;ll get the factored loads and the factored MAM
  // To do this, we'll make much use of a subroutine called "PopulateMAM"
  // It's called as:  PopulateMAM  loadFactors, combern, iPattern
  // The load factors are factors from the ASCE or NBCC load combinations

  // As you can see below, we'll find a unique MAM for each iCombo and live load pattern.
  // Then, we'll use the MAM to find the segment shears, moments, etc.

  let combern = 0;

  // iCombo 0 is for deflections only. We'll go thru each load pattern.
  // iCombo 1 thru comboSet.length is for finding shear and moment extremes. As code
  // requires, this often means testing many load combinations.

  for (let iCombo = 0; iCombo <= comboSet.length; iCombo++) {
    const  isReqd = iCombo === 0 && beam.EI !== 0
      ? true  // Go thru each load pattern and find deflection extremes.
      : isService
      ? true
      : isReqdCombo(comboSet[iCombo - 1], beam.gotType);

    if (isReqd) {
      const loadFactors = iCombo === 0 && beam.EI !== 0
        ? [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        : comboSet[iCombo - 1];

      for (let iPattern = 0; iPattern < numPatterns; iPattern++) {
        const loadPattern = liveLoadPatterns[iPattern];

        // Get the Member Action Matrix, MAM, for this combern.
        // A MAM contains the end shears and end moments for each span.
        const mam = populateMAM(loadFactors, combern, loadPattern, beam, nodes, spans, actions);

        let dm;
        if (iCombo === 0 && beam.EI !== 1) {
          // Create a Displacement Matrix, DM, for this load combination and load pattern.
          dm = new Array(beam.numDegreesOfFreedom + 1).fill(0);
          for (let iLoadType = 1; iLoadType < 10; iLoadType++) {
            if (beam.gotType[iLoadType]) {
              if (beam.getsPattern[iLoadType]) {
                dm = getLiveDM(dm, deflections[iLoadType], loadPattern, numSpans);
              } else {
                dm = dm.map((e, i) => e + deflections[iLoadType][i]);
              }
            }
          }
        }

        let iDM = 0;
        for (let iSpan = 1; iSpan <= numSpans; iSpan++) {
          let vMid = 0;
          let vEnd = 0;
          let mMid = 0;
          let mEnd = 0;
          let slopeEnd = 0;
          let deflectionEnd = 0;
          let deflectionMid = 0;
          for (let k = 0; k < spans[iSpan].segments.length; k++) {
            const seg = spans[iSpan].segments[k];

            if (k === 0) {
              // The first segment in this span.
              seg.V1[combern] = -mam[5 * iSpan - 3];
              seg.M1[combern] = mam[5 * iSpan - 2];
              if (iCombo === 0 && beam.EI !== 1) {
                iDM = getThetaAndDelta(nodes[iSpan].fixity, dm, seg, combern, iDM);
              }
            } else {
              // Subsequent segments.
              seg.V1[combern] = vEnd + seg.Pf;
              seg.M1[combern] = mEnd - seg.Mf;
              if (iCombo === 0 && beam.EI !== 1) {
                seg.theta1[combern] = slopeEnd;
                seg.delta1[combern] = deflectionEnd;
              }
            }

            vEnd = seg.V1[combern] + seg.w1f[combern] * seg.length
                 + 0.5 * seg.slope[combern] * seg.length ** 2;
            if (Math.abs(vEnd) < 0.00000000000001) { vEnd = 0; }

            mEnd = seg.M1[combern] + seg.V1[combern] * seg.length
                 + 0.5 * seg.w1f[combern] * seg.length ** 2
                 + seg.slope[combern] * seg.length ** 3 / 6;
            if (Math.abs(mEnd) < 0.00000000000001) { mEnd = 0; }

            if (iCombo === 0) {
              // Check if this load pattern contains a deflection extreme.
              if (beam.EI !== 1) {
                slopeEnd = seg.theta1[combern] + (seg.M1[combern] * seg.length
                  + 0.5 * seg.V1[combern] * seg.length ** 2
                  + seg.w1f[combern] * seg.length ** 3 / 6
                  + seg.slope[combern] * seg.length ** 4 / 24) / beam.EI;
                deflectionMid = seg.delta1[combern] + seg.theta1[combern] * 0.5 * seg.length
                    + (0.5 * seg.M1[combern] * (0.5 * seg.length) ** 2
                    + seg.V1[combern] * (0.5 * seg.length) ** 3 / 6
                    + seg.w1f[combern] * (0.5 * seg.length) ** 4 / 24
                    + seg.slope[combern] * (0.5 * seg.length) ** 5 / 120) / beam.EI;
                deflectionEnd = seg.delta1[combern] + seg.theta1[combern] * seg.length
                    + (0.5 * seg.M1[combern] * seg.length ** 2
                        + seg.V1[combern] * seg.length ** 3 / 6
                    + seg.w1f[combern] * seg.length ** 4 / 24
                    + seg.slope[combern] * seg.length ** 5 / 120) / beam.EI;
                if (seg.delta1[combern] > deflectionMax) {
                  deflectionMax = seg.delta1[combern];
                  deflMaxCase = combern;
                }
                if (seg.delta1[combern] < deflectionMin) {
                  deflectionMin = seg.delta1[combern];
                  deflMaxCase = combern;
                }
                if (deflectionEnd > deflectionMax) {
                  deflectionMax = deflectionEnd;
                  deflMaxCase = combern;
                }
                if (deflectionEnd < deflectionMin) {
                  deflectionMin = deflectionEnd;
                  deflMinCase = combern;
                }
                if (deflectionMid > deflectionMax) {
                  deflectionMax = deflectionMid;
                  deflMaxCase = combern;
                }
                if (deflectionMid < deflectionMin) {
                  deflectionMin = deflectionMid;
                  deflMinCase = combern;
                }
              }
            } else {
              // Determine if this combern contains a shear or moment extreme.
              // Start by finding the shear value in the middle of the segment
              let xCross = 0; // initialze the variable
              if (seg.slope[combern] !== 0) {
                xCross = -1 * seg.w1f[combern] / seg.slope[combern];
                if (xCross > 0 && xCross < seg.length) {
                  vMid = seg.V1[combern] + seg.w1f[combern] * xCross
                        + 0.5 * seg.slope[combern] * xCross ** 2;
                } else {
                  vMid = seg.V1[combern] + seg.w1f[combern] * (seg.length / 2)
                        + 0.5 * seg.slope[combern] * (seg.length / 2) ** 2;
                }
              } else {
                vMid = seg.V1[combern] + seg.w1f[combern] * (seg.length / 2)
                      + 0.5 * seg.slope[combern] * (seg.length / 2) ** 2;
              }

              // Find the moment in the middle of the segment
              xCross = 0; // initialze the variable
              if (seg.slope[combern] === 0) {
                if (seg.w1f[combern] !== 0) {
                  xCross = -seg.V1[combern] / seg.w1f[combern];
                }
              } else {
                if ((seg.w1f[combern] ** 2 - 2 * seg.slope[combern] * seg.V1[combern]) > 0) {
                  xCross = -(seg.w1f[combern] + Math.sqrt(seg.w1f[combern] ** 2
                          - 2 * seg.slope[combern] * seg.V1[combern])) / seg.slope[combern];
                }
              }
              if (xCross > 0 && xCross < seg.length) {
                mMid = seg.M1[combern] + seg.V1[combern] * xCross
                      + 0.5 * seg.w1f[combern] * xCross ** 2
                      + seg.slope[combern] * xCross ** 3 / 6;
              } else {
                mMid = seg.M1[combern] + seg.V1[combern] * (seg.length / 2)
                    + 0.5 * seg.w1f[combern] * (seg.length / 2) ** 2
                    + seg.slope[combern] * (seg.length / 2) ** 3 / 6;
              }

              // Check for local maximums and minimums
              if (seg.V1[combern] > seg.Vmax.left.value && seg.V1[combern] > 0.01) {
                seg.Vmax.left.value = seg.V1[combern];
                seg.Vmax.left.case = combern;   // This is a case that we// ll want to plot
                if (seg.V1[combern] > vMax) { vMax = seg.V1[combern]; }
              }

              if (vMid > seg.Vmax.mid.value && vMid > 0.01) {
                seg.Vmax.mid.value = vMid;
                seg.Vmax.mid.case = combern;
                if (vMid > vMax) { vMax = vMid; }
              }

              if (vEnd > seg.Vmax.right.value && vEnd > 0.01) {
                seg.Vmax.right.value = vEnd;
                seg.Vmax.right.case = combern;
                if (vEnd > vMax) { vMax = vEnd; }
              }

              if (seg.V1[combern] < seg.Vmin.left.value && seg.V1[combern] < -0.01) {
                seg.Vmin.left.value = seg.V1[combern];
                seg.Vmin.left.case = combern;
                if (seg.V1[combern] < vMin) { vMin = seg.V1[combern]; }
              }

              if (vMid < seg.Vmin.mid.value && vMid < -0.01) {
                seg.Vmin.mid.value = vMid;
                seg.Vmin.mid.case = combern;
                if (vMid < vMin) { vMin = vMid; }
              }

              if (vEnd < seg.Vmin.right.value && vEnd < -0.01) {
                seg.Vmin.right.value = vEnd;
                seg.Vmin.right.case = combern;
                if (vEnd < vMin) { vMin = vEnd; }
              }

              if (seg.M1[combern] > seg.Mmax.left.value && seg.M1[combern] > 0.01) {
                seg.Mmax.left.value = seg.M1[combern];
                seg.Mmax.left.case = combern;
                if (seg.M1[combern] > mMax) { mMax = seg.M1[combern]; }
              }

              if (mMid > seg.Mmax.mid.value && mMid > 0.01) {
                seg.Mmax.mid.value = mMid;
                seg.Mmax.mid.case = combern;
                seg.Mmax.mid.x = seg.xOfLeftEnd + xCross;
                if (mMid > mMax) { mMax = mMid; }
              }

              if (mEnd > seg.Mmax.right.value && mEnd > 0.01) {
                seg.Mmax.right.value = mEnd;
                seg.Mmax.right.case = combern;
                if (mEnd > mMax) { mMax = mEnd; }
              }

              if (seg.M1[combern] < seg.Mmin.left.value && seg.M1[combern] < -0.01) {
                seg.Mmin.left.value = seg.M1[combern];
                seg.Mmin.left.case = combern;
                if (seg.M1[combern] < mMin) { mMin = seg.M1[combern]; }
              }

              if (mMid < seg.Mmin.mid.value && mMid < -0.01) {
                seg.Mmin.mid.value = mMid;
                seg.Mmin.mid.case = combern;
                seg.Mmin.mid.x = seg.xOfLeftEnd + xCross;
                if (mMid < mMin) { mMin = mMid; }
              }

              if (mEnd < seg.Mmin.right.value && mEnd < -0.01) {
                seg.Mmin.right.value = mEnd;
                seg.Mmin.right.case = combern;
                if (mEnd < mMin) { mMin = mEnd; }
              }
            }

          }
        }
        combern += 1;
      }
    }
  }
  return [vMax, vMin, mMax, mMin, deflectionMax, deflectionMin,
    deflMaxCase, deflMinCase, numComberns]
}

const isReqdCombo = (combo, gotType) => {
  let isDeadLoadOnly = true;
  for (let j = 2; j < combo.length; j++) {
    if (combo[j] > 0) {
      isDeadLoadOnly = false;
      if (gotType[j]) { return true }
    }
  }
  return isDeadLoadOnly
};

/*const comboContainsLive = (combo, beam) => {
  for (let i = 1; i <= beam.numLoadTypes; i++) {
    if (beam.getsPattern[i] && combo[i] !== 0) { return true }
  }
  return false
}*/

const getNumComberns = (comboSet, isService, beam, numPatterns) => {
  // We'll do a superposition of forces for each load combination and each live load pattern.
  // How many is that?
  // First, count the number of comberns needed to do the deflection superpositions.
  let numComberns = beam.EI === 1 ? 1 : numPatterns;
  // Then add a combern for each superposition done to get shears and moments.
  for (let i = 0; i < comboSet.length; i++) {
    if (isService || isReqdCombo(comboSet[i], beam.gotType)) {
      numComberns += numPatterns;
    }
  }
  return numComberns
};

const getLiveDM = (a, b, loadPattern, numSpans) => {
  if (Array.isArray(b[1])) {
    for (let k = 1; k <= numSpans; k++) {
      if (loadPattern.includes(k)) {
        a = a.map((e, i) => e + b[i][k]);
      }
    }
  } else {
    a = a.map((e, i) => e  + b[i]);
  }
  return a
};

const getThetaAndDelta = (fixity, dm, seg, i, iDM) => {
  if (fixity === "fixed") {
    seg.delta1[i] = 0;
    seg.theta1[i] = 0;
  } else if (fixity === "pinned") {
    seg.delta1[i] = 0;
    iDM = iDM + 1;
    seg.theta1[i] = -dm[iDM];
  } else if (fixity === "continuous") {
    iDM = iDM + 1;
    seg.delta1[i] = -dm[iDM];
    iDM = iDM + 1;
    seg.theta1[i] = -dm[iDM];
  } else if (fixity === "spring") {
    iDM = iDM + 1;
    seg.delta1[i] = -dm[iDM];
    iDM = iDM + 1;
    seg.theta1[i] = -dm[iDM];
  } else if (fixity === "proppedHinge") {
    iDM = iDM + 1;
    seg.delta1[i] = 0;
    iDM = iDM + 1;
    seg.theta1[i] = -dm[iDM];
  } else if (fixity === "hinge") {
    iDM = iDM + 1;
    seg.delta1[i] = -dm[iDM];
    iDM = iDM + 1;
    iDM = iDM + 1;
    seg.theta1[i] = -dm[iDM];
  }
  return iDM
};

// Review the segments. Find out which comberns should be displayed
function selectCases(spans) {
  const shearCases = [];
  const bendingCases = [];
  for (let i = 1; i < spans.length; i++) {
    for (let j = 0; j < spans[i].segments.length; j++) {
      const seg = spans[i].segments[j];
      if (seg.Vmax.left.value > 0) {
        if (!shearCases.includes(seg.Vmax.left.case)) {
          shearCases.push(seg.Vmax.left.case);
        }
      }
      if (seg.Vmin.left.value < 0) {
        if (!shearCases.includes(seg.Vmin.left.case)) {
          shearCases.push(seg.Vmin.left.case);
        }
      }
      if (seg.Mmax.left.value > 0) {
        if (!bendingCases.includes(seg.Mmax.left.case)) {
          bendingCases.push(seg.Mmax.left.case);
        }
      }
      if (seg.Mmin.left.value < 0) {
        if (!bendingCases.includes(seg.Mmin.left.case)) {
          bendingCases.push(seg.Mmin.left.case);
        }
      }
      if (seg.Vmax.mid.value > 0) {
        if (!shearCases.includes(seg.Vmax.mid.case)) {
          shearCases.push(seg.Vmax.mid.case);
        }
      }
      if (seg.Vmin.mid.value < 0) {
        if (!shearCases.includes(seg.Vmin.mid.case)) {
          shearCases.push(seg.Vmin.mid.case);
        }
      }
      if (seg.Mmax.mid.value > 0) {
        if (!bendingCases.includes(seg.Mmax.mid.case)) {
          bendingCases.push(seg.Mmax.mid.case);
        }
      }
      if (seg.Mmin.mid.value < 0) {
        if (!bendingCases.includes(seg.Mmin.mid.case)) {
          bendingCases.push(seg.Mmin.mid.case);
        }
      }
      if (seg.Vmax.right.value > 0) {
        if (!shearCases.includes(seg.Vmax.right.case)) {
          shearCases.push(seg.Vmax.right.case);
        }
      }
      if (seg.Vmin.right.value < 0) {
        if (!shearCases.includes(seg.Vmin.right.case)) {
          shearCases.push(seg.Vmin.right.case);
        }
      }
      if (seg.Mmax.right.value > 0) {
        if (!bendingCases.includes(seg.Mmax.right.case)) {
          bendingCases.push(seg.Mmax.right.case);
        }
      }
      if (seg.Mmin.right.value < 0) {
        if (!bendingCases.includes(seg.Mmin.right.case)) {
          bendingCases.push(seg.Mmin.right.case);
        }
      }
    }
  }
  return [shearCases, bendingCases]
}

function locateDiagrams(beam, extremes) {
  // Find the y-coordinates for the shear, moment, and deflection diagrams.

  // First, find out how many reaction vectors will be written onto the load diagram.
  const [vMax, vMin, mMax, mMin, deflectionMax, deflectionMin, , , ] = extremes;

  const vScale = vMax - vMin > 0 ? 60 / (vMax - vMin) : 0;
  const mScale = mMax - mMin > 0 ? 60 / (mMax - mMin) : 0;
  const reactionTextHeight = 16;

  let yV = vMax > 0.0005
    ? beam.yLoad + 12 + reactionTextHeight + vMax * vScale + 70
    : beam.yLoad + 12 + reactionTextHeight;
  yV = Math.round(yV);
  const botOfV = vMin < -0.0005
    ? yV + vMin * vScale + 50
    : yV + 70;
  const momentMax = beam.convention === 1 ? mMax : Math.abs(mMin);
  const momentMin = beam.convention === 1 ? Math.abs(mMin) : mMax;
  let yM = momentMax > 0.0005
    ? botOfV + 12 + momentMax * mScale + 40
    : botOfV + 12 + 40;
  yM = Math.round(yM);
  let yMax = yM;

  // Get yText for moment
  let yText = yM - mScale * mMin;
  if (yText > yMax) { yMax = yText; }

  let yDeflection = 0;
  let deflectionScale = 0;
  if (beam.EI !== 1) {
    // eslint-disable-next-line max-len
    if (deflectionMax > deflectionMin) { deflectionScale = 30 / (deflectionMax - deflectionMin); }
    const botOfM = momentMin > (0.05 * momentMax)
      ? yM + momentMin * mScale + 14
      : yM + 14;
    yDeflection = botOfM + 40 + deflectionMax * deflectionScale;
    yDeflection = Math.round(yDeflection);
    yMax = yDeflection;
    if (Math.abs(deflectionMin) > 0.2 * (deflectionMax - deflectionMin)) {
      yText = yDeflection - deflectionScale * deflectionMin;
      if (yText > yMax) { yMax = yText; }
    }
  }
  yMax += 20;

  return [yV, yM, yDeflection, vScale, mScale, deflectionScale, yMax]

}

function drawDiagrams(beam, nodes, spans, cases, yCoords, extremes, combinations) {
  let diagram = [];
  // Now go thru the comberns again.  Draw the line work this time.
  const numSpans = spans.length - 1;
  const [vMax, vMin, mMax, mMin, , , deflMaxCase, deflMinCase, numComberns] = extremes;
  const [shearCases, bendingCases] = cases;
  const [yV, yM, yDeflection, vScale, mScale, deflectionScale] = yCoords;
  const vSmall = 0.01 * (vMax - vMin);
  const mSmall = 0.05 * (mMax - mMin);
  let deflectionMax = 0;
  let deflectionMin = 0;
  let xDeflectionMax = 0;
  let xDeflectionMin = 0;
  const xIncrement = beam.length / 50;
  const wV = [];
  const wVx = [];
  const wM = [];
  const wMx = [];
  const horizAlign = "middle";

  // Draw the horizontal lines for the shear and moment diagrams
  diagram.push(Draw.textNode("shear", 20, yV + 2));
  diagram.push(Draw.textNode(`(${beam.SI ? "kN" : "kips"})`, 20, yV + 16));
  diagram.push({
    tag: "path",
    attrs: { d: `M${beam.xDiagram} ${yV} h300`, stroke: "black", "stroke-width": '1.5px' }
  });
  diagram.push(Draw.textNode("bending", 20, yM + 2));
  diagram.push(Draw.textNode(`(${beam.SI ? "kN-m" : "kip-ft"})`, 20, yM + 16));
  diagram.push({
    tag: "path",
    attrs: { d: `M${beam.xDiagram} ${yM} h300`, stroke: "black", "stroke-width": '1.5px' }
  });

  if (combinations !== "service") {
    diagram.push(Draw.textNode("factored", 20, yV - 12));
    diagram.push(Draw.textNode("factored", 20, yM - 12));
  }

  // Draw the reactions.
  let f = 0;
  for (let i = 1; i < nodes.length; i++) {
    const x = beam.xDiagram + beam.xScale * nodes[i].x;
    if (Math.abs(nodes[i].Pr[0]) > 0) {
      f = 1 / (beam.SI ? 1000 : 4448.2216152605);
      const sText = round$1(nodes[i].Pr[0] * f, 3);
      diagram = diagram.concat(Draw.pointForce(x, beam.yLoad, sText, nodes[i].fixity, true));
    }
    if (Math.abs(nodes[i].Mr[0]) > 0) {
      f = 1 / (beam.SI ? 1000 : 4448.2216152605 * 0.3048);
      const sText = round$1(nodes[i].Mr[0] * f, 3);
      diagram = diagram.concat(Draw.pointMoment(x, beam.yLoad, sText, true));
    }
  }

  for (let combern = 0; combern <= numComberns; combern++) {
    // Are we in a deflection combern?
    const inaDeflCase = (deflMinCase === combern || deflMaxCase === combern) && beam.EI !== 1;
    // Should we plot this combern?
    if (!(shearCases.includes(combern) || bendingCases.includes(combern) || inaDeflCase)) {
      continue // Skip this combern.
    }
    // This is a combern for which we should plot the line work
    // Find detailed shear and moments for the diagrams.  And we check local maximums to see
    // if we should write their values onto the diagram.
    let lastVend = 0;
    let lastW2f = 0;
    const x = inaDeflCase ? [] : [0];
    const deflection = [];
    const v = [];
    const m = [];
    if (!inaDeflCase) {
      v.push(0);
      m.push(0);
    }
    let k = 0;
    for (let i = 1; i <= numSpans; i++) {
      for (let j = 0; j < spans[i].segments.length; j++) {
        const seg = spans[i].segments[j];
        const vEnd = seg.V1[combern] + seg.w1f[combern] * seg.length
            + 0.5 * seg.slope[combern] * seg.length ** 2;
        const mEnd = seg.M1[combern] + seg.V1[combern] * seg.length
          + 0.5 * seg.w1f[combern] * seg.length ** 2 + seg.slope[combern] * seg.length ** 3 / 6;
        const w2f = seg.w1f[combern] + seg.slope[combern] * seg.length;
        let deflectionEnd = 0;
        if (inaDeflCase) {
          deflectionEnd = seg.delta1[combern] + seg.theta1[combern] * seg.length
            + (0.5 * seg.M1[combern] * seg.length ** 2 + seg.V1[combern] * seg.length ** 3 / 6
            + seg.w1f[combern] * seg.length ** 4 / 24
            + seg.slope[combern] * seg.length ** 5 / 120) / beam.EI;
        }
        // Details for line work
        let xLocal = 0;
        k += 1;
        x.push(seg.xOfLeftEnd);
        if (inaDeflCase) {
          deflection.push(seg.delta1[combern]);
          if (seg.delta1[combern] > deflectionMax) {
            deflectionMax = seg.delta1[combern];
            xDeflectionMax = seg.xOfLeftEnd;
          }
          if (seg.delta1[combern] < deflectionMin) {
            deflectionMin = seg.delta1[combern];
            xDeflectionMin = seg.xOfLeftEnd;
          }
          if (deflectionEnd > deflectionMax) {
            deflectionMax = deflectionEnd;
            xDeflectionMax = seg.xOfLeftEnd + seg.length;
          }
          if (deflectionEnd < deflectionMin) {
            deflectionMin = deflectionEnd;
            xDeflectionMin = seg.xOfLeftEnd + seg.length;
          }
        } else {
          v.push(seg.V1[combern]);
          m.push(seg.M1[combern]);
        }

        for (let ii = 1; ii <= Math.trunc(seg.length / xIncrement); ii++) {
          k = k + 1;
          x.push(x[x.length - 1] + xIncrement);
          xLocal += xIncrement;
          if (inaDeflCase) {
            deflection.push(seg.delta1[combern] + seg.theta1[combern] * xLocal
                + (0.5 * seg.M1[combern] * xLocal ** 2
                + seg.V1[combern] * xLocal ** 3 / 6 + seg.w1f[combern] * xLocal ** 4 / 24
                + seg.slope[combern] * xLocal ** 5 / 120) / beam.EI);
            if (deflection[deflection.length - 1] > deflectionMax) {
              deflectionMax = deflection[deflection.length - 1];
              xDeflectionMax = seg.xOfLeftEnd + xLocal;
            }
            if (deflection[deflection.length - 1] < deflectionMin) {
              deflectionMin = deflection[deflection.length - 1];
              xDeflectionMin = seg.xOfLeftEnd + xLocal;
            }
          } else {
            v.push(seg.V1[combern] + seg.w1f[combern] * xLocal
              + 0.5 * seg.slope[combern] * xLocal ** 2);
            m.push(seg.M1[combern] + seg.V1[combern] * xLocal
              + 0.5 * seg.w1f[combern] * xLocal ** 2 + seg.slope[combern] * xLocal ** 3 / 6);
          }
        }

        k += 1;
        x.push(seg.xOfLeftEnd + seg.length);
        if (inaDeflCase) {
          deflection.push(deflectionEnd);
        } else {
          v.push(vEnd);
          m.push(mEnd);
        }

        // Check for local maximums and minimums
        if (seg.Vmax.left.case === combern || seg.Vmin.left.case === combern) {
          // Do we also want to write this value onto the shear diagram?
          if (i === 1 && j === 0) {
            if (Math.abs(seg.V1[combern]) > vSmall) {
              checkVs(seg.V1[combern], 0, wV, wVx, spans, beam.length);
            }
          } else if (!(lastW2f === seg.w1f[combern] &&
              Math.abs(seg.V1[combern] - lastVend) < vSmall)) {
            checkVs(seg.V1[combern], seg.xOfLeftEnd, wV, wVx, spans, beam.length);
          }
        }

        if (seg.Vmax.mid.case === combern || seg.Vmin.mid.case === combern) {
          let xCross = 0;
          if (seg.slope[combern] !== 0) {
            xCross = -1 * seg.w1f[combern] / seg.slope[combern];
            if (xCross > 0 && xCross < seg.length) {
              const vMid = seg.V1[combern] + seg.w1f[combern] * xCross
                  + 0.5 * seg.slope[combern] * xCross ** 2;
              checkVs(vMid, seg.xOfLeftEnd + xCross, wV, wVx, spans, beam.length);
            }
          }
        }

        if (seg.Vmax.right.case === combern || seg.Vmin.right.case === combern) {
          if (Math.abs(vEnd) > vSmall) {
            checkVs(vEnd, seg.xOfLeftEnd + seg.length, wV, wVx, spans, beam.length);
          }
        }

        if (seg.Mmax.left.case === combern || seg.Mmin.left.case === combern) {
          if (i === 1 && j === 0) {
            if (Math.abs(seg.M1[combern]) > mSmall) {
              checkMs(seg.M1[combern], 0, wM, wMx, spans, beam.length, mSmall);
            }
          } else {
            checkMs(seg.M1[combern], seg.xOfLeftEnd, wM,
              wMx, spans, beam.length, mSmall);
          }
        }

        if (seg.Mmax.mid.case === combern || seg.Mmin.mid.case === combern) {
          let xCross = 0; // initialze the variable
          let mMid = 0;
          if (seg.slope[combern] === 0) {
            if (seg.w1f[combern] !== 0) {
              xCross = -seg.V1[combern] / seg.w1f[combern];
              if (xCross > 0 && xCross < seg.length) {
                mMid = seg.M1[combern] + seg.V1[combern] * xCross
                  + 0.5 * seg.w1f[combern] * xCross ** 2 + seg.slope[combern] * xCross ** 3 / 6;
                checkMs(mMid, seg.xOfLeftEnd + xCross, wM, wMx, spans, beam.length, mSmall);
              }
            }
          } else {
            let mMid1 = 0;
            let mMid2 = 0;
            let xCross1 = 0;
            let xCross2 = 0;
            if ((seg.w1f[combern] ** 2 - 2 * seg.slope[combern] * seg.V1[combern]) > 0) {
              const determinant = Math.sqrt(seg.w1f[combern] ** 2
                    - 2 * seg.slope[combern] * seg.V1[combern]);
              xCross1 = -(seg.w1f[combern] - determinant) / seg.slope[combern];
              xCross2 = -(seg.w1f[combern] + determinant) / seg.slope[combern];
              if (xCross1 > 0 && xCross1 < seg.length) {
                xCross = xCross1;
                mMid1 = seg.M1[combern] + seg.V1[combern] * xCross
                  + 0.5 * seg.w1f[combern] * xCross ** 2 + seg.slope[combern] * xCross ** 3 / 6;
              }
              if (xCross2 > 0 && xCross2 < seg.length) {
                xCross = xCross2;
                mMid2 = seg.M1[combern] + seg.V1[combern] * xCross
                  + 0.5 * seg.w1f[combern] * xCross ** 2 + seg.slope[combern] * xCross ** 3 / 6;
              }
            }
            if (mMid1 > 0 || mMid2 > 0) {
              if (mMid1 > mMid2) {
                mMid = mMid1;
                xCross = xCross1;
              } else {
                mMid = mMid2;
                xCross = xCross2;
              }
            }
            if (xCross > 0 && xCross < seg.length) {
              mMid = seg.M1[combern] + seg.V1[combern] * xCross
                  + 0.5 * seg.w1f[combern] * xCross ** 2 + seg.slope[combern] * xCross ** 3 / 6;
              checkMs(mMid, seg.xOfLeftEnd + xCross, wM, wMx, spans, beam.length, mSmall);
            }
          }
        }

        if (seg.Mmax.right.case === combern || seg.Mmin.right.case === combern) {
          checkMs(mEnd, seg.xOfLeftEnd + seg.length, wM, wMx, spans, beam.length, mSmall);
        }

        lastW2f = w2f;
        lastVend = vEnd;
      }
    }

    // Plot diagrams
    const numDataPoints = k;

    // Draw the shear diagrams
    if (shearCases.includes(combern)) {
      let xPoly;
      let yPoly;

      if (beam.allLoadsAreUniform) {
        // Make the shear diagram out of straight lines.
        let linearV = new Array(2 * beam.numSegments + 3).fill(0);
        linearV = linearV.map(e => [0, 0]);
        k = 1;
        linearV[k][0] = beam.xDiagram;
        linearV[k][1] = yV;
        for (let i = 1; i <= numSpans; i++) {
          for (let j = 0; j < spans[i].segments.length; j++) {
            const seg = spans[i].segments[j];
            k = k + 1;
            linearV[k][0] = beam.xDiagram + beam.xScale * seg.xOfLeftEnd;
            linearV[k][1] = yV - vScale * seg.V1[combern];
            k = k + 1;
            linearV[k][0] = beam.xDiagram + beam.xScale * (seg.xOfLeftEnd + seg.length);
            const vEnd = seg.V1[combern] + seg.w1f[combern] * seg.length
                + 0.5 * seg.slope[combern] * seg.length ** 2;
            linearV[k][1] = yV - vScale * vEnd;
          }
        }
        k = k + 1;
        linearV[k][0] = beam.xDiagram + beam.xScale * beam.length;
        linearV[k][1] = yV;
        const numOfShearDataPoints = k;

        xPoly = new Array(numOfShearDataPoints - 1);
        yPoly = new Array(numOfShearDataPoints - 1);
        for (let ii = 1; ii <= numOfShearDataPoints; ii++) {
          xPoly[ii - 1] = linearV[ii][0].toFixed(2);
          yPoly[ii - 1] = linearV[ii][1].toFixed(2);
        }

      } else {
        xPoly = new Array(numDataPoints + 1).fill(0);
        yPoly = new Array(numDataPoints + 1).fill(0);
        for (let ii = 0; ii < numDataPoints; ii++) {
          xPoly[ii] = (beam.xDiagram + beam.xScale * x[ii]).toFixed(2); // x(ii)
          yPoly[ii] = (yV - vScale * v.shift()).toFixed(2);
        }
        xPoly[numDataPoints] = beam.xDiagram + 300;
        yPoly[numDataPoints] = yV;
      }
      diagram.push(Draw.polyline(xPoly, yPoly));
    }

    // Draw the moment diagram
    if (bendingCases.includes(combern)) {
      const xPoly = new Array(numDataPoints + 1).fill(0);
      const yPoly = new Array(numDataPoints + 1).fill(0);
      for (let ii = 0; ii <= numDataPoints; ii++) {
        xPoly[ii] = (beam.xDiagram + beam.xScale * x[ii]).toFixed(2); // x(ii)
        yPoly[ii] = (yM - beam.convention * mScale * m.shift()).toFixed(2); // M(ii)
      }
      xPoly[numDataPoints + 1] = beam.xDiagram + 300;
      yPoly[numDataPoints + 1] = yM;
      diagram.push(Draw.polyline(xPoly, yPoly));
    }

    if (inaDeflCase) {
      // Draw the deflection diagram
      diagram.push(Draw.textNode("deflection", 20, yDeflection + 2));
      diagram.push({
        tag: "path",
        attrs: { d: `M${beam.xDiagram} ${yDeflection} h300`,
          stroke: "black", "stroke-width": '1.5px' }
      });
      const xPoly = new Array(numDataPoints - 1).fill(0);
      const yPoly = new Array(numDataPoints - 1).fill(0);
      xPoly[0] = beam.xDiagram.toFixed(2);
      yPoly[0] = yDeflection.toFixed(2);
      for (let ii = 1; ii <= numDataPoints - 1; ii++) {
        xPoly[ii] = (beam.xDiagram + beam.xScale * x[ii]).toFixed(2); // x(ii)
        yPoly[ii] = (yDeflection - deflectionScale * deflection[ii]).toFixed(2);
      }
      diagram.push(Draw.polyline(xPoly, yPoly));
    }
  }

  // Write the values of the local shear maximums onto the diagrams.
  f = 1 / (beam.SI ? 1000 : 4448.2216152605); // conversion factor for N to kips or MN
  while (wV.length > 0) {
    const xText = (beam.xDiagram + beam.xScale * wVx.shift()).toFixed(2);
    const fudge = wV[0] > 0 ? -2 : 13;
    const yText = (yV - vScale * wV[0] + fudge).toFixed(2);
    // horizAlign is middle
    diagram.push(Draw.textNode(round$1(wV.shift() * f, 3), xText, yText, horizAlign));
  }

  // Write the values of the local bending maximums onto the diagrams.
  f = beam.convention / (beam.SI ? 1000 : 4448.2216152605 * 0.3048);
  while (wM.length > 0) {
    const xText = (beam.xDiagram + beam.xScale * wMx.shift()).toFixed(2);
    const fudge = beam.convention * wM[0] > 0 ? -2 : 13;
    const yText = (yM - beam.convention * mScale * wM[0] + fudge).toFixed(2);
    const sText = round$1(wM.shift() * f, 3);
    diagram.push(Draw.textNode(sText, xText, yText, horizAlign));
  }

  if (beam.EI !== 1) {
    // Insert the max and min deflection values
    beam.deflectionMax = Math.max(Math.abs(deflectionMax), Math.abs(deflectionMin));
    f = beam.SI ? 1000 : (12 / 0.3048);
    let sText = "";
    let xText = 0;
    let yText = 0;
    if (deflectionMax > 0.2 * (deflectionMax - deflectionMin)) {
      xText = beam.xDiagram + beam.xScale * xDeflectionMax;
      yText = yDeflection - deflectionScale * deflectionMax - 2;
      if (beam.SI) {
        sText = (deflectionMax * f).toFixed(0) + " mm";
      } else {
        sText = round$1(deflectionMax * f, 2) + '″';
      }
      diagram.push(Draw.textNode(sText, xText, yText, horizAlign));
    }
    if (Math.abs(deflectionMin) > 0.2 * (deflectionMax - deflectionMin)) {
      xText = beam.xDiagram + beam.xScale * xDeflectionMin;
      yText = yDeflection - deflectionScale * deflectionMin + 13;
      if (beam.SI) {
        sText = (f * deflectionMin).toFixed(0) + " mm";
      } else {
        sText = round$1(f * deflectionMin, 2) + '″';
      }
      diagram.push(Draw.textNode(sText, xText, yText, horizAlign));
    }
  }

  return diagram
}

const checkVs = (v, x, wV, wVx, spans, beamLength) => {
  // Check if we should write this value onto the shear diagram
  let gottaWrite = true; // initialize the variable
  const shortDistance = 0.15 * beamLength;

  for (let i = 1; i < spans.length; i++) {
    for (let k = 0; k < spans[i].segments.length; k++) {
      const seg = spans[i].segments[k];
      const xOfRightEnd = seg.xOfLeftEnd + seg.length;
      if (xOfRightEnd < x -  shortDistance) { continue }
      if (seg.xOfLeftEnd > x + shortDistance) { continue }

      if (Math.abs(seg.xOfLeftEnd - x) < shortDistance) {
        if (v > 0) {
          if (seg.Vmax.left.value > v) {
            gottaWrite = false;
            break
          }
        } else if (seg.Vmin.left.value < v) {
          gottaWrite = false;
          break
        }
      }

      const xRightEnd = seg.xOfLeftEnd + seg.length;
      if (Math.abs(x - xRightEnd < shortDistance)) {
        if (v > 0) {
          if (seg.Vmax.right.value > v) {
            gottaWrite = false;
            break
          }
        } else if (seg.Vmin.right.value < v) {
          gottaWrite = false;
          break
        }
      }
    }
  }

  if (gottaWrite) {
    wV.push(v);
    wVx.push(x);
  }
};

const checkMs = (m, x, wM, wMx, spans, beamLength, mSmall) => {
  // Check if we should write this value onto the moment diagram
  if (Math.abs(m) < mSmall) { return false }
  let gottaWrite = true; // initialize the variable
  const shortDistance = 0.15 * beamLength;

  for (let i = 1; i < spans.length; i++) {
    for (let k = 0; k < spans[i].segments.length; k++) {
      const seg = spans[i].segments[k];
      const xOfRightEnd = seg.xOfLeftEnd + seg.length;
      if (xOfRightEnd < x -  shortDistance) { continue }
      if (seg.xOfLeftEnd > x + shortDistance) { continue }

      if (Math.abs(seg.xOfLeftEnd - x) < shortDistance) {
        if (m > 0) {
          if (seg.Mmax.left.value > m) {
            gottaWrite = false;
            break
          }
        } else if (seg.Mmin.left.value < m) {
          gottaWrite = false;
          break
        }
      }

      if (m > 0 && Math.abs(seg.Mmax.mid.x - x) < shortDistance) {
        if (seg.Mmax.mid.value > m) {
          gottaWrite = false;
          break
        }
      }
      if (m < 0 && Math.abs(seg.Mmin.mid.x - x) < shortDistance) {
        if (seg.Mmin.mid.value < m) {
          gottaWrite = false;
          break
        }
      }

      const xRightEnd = seg.xOfLeftEnd + seg.length;
      if (Math.abs(x - xRightEnd < shortDistance)) {
        if (m > 0) {
          if (seg.Mmax.right.value > m) {
            gottaWrite = false;
            break
          }
        } else if (seg.Mmin.right.value < m) {
          gottaWrite = false;
          break
        }
      }
    }
  }

  if (gottaWrite) {
    wM.push(m);
    wMx.push(x);
  }
};

function error(msg) {
  if (msg === "") { return { value: "Error", unit: null, dtype: dt.ERROR } }
  return { value: msg, unit: null, dtype: dt.ERROR }
}

const beamDiagram = (beamInputData, loadFactorInput) => {
  // This is the main analysis function.

  // Get raw data from the input dataframe.
  const beamInput = readInputData(beamInputData);
  if (typeof beamInput === "string") { return error(beamInput) }

  // Validate input and populate data structures.
  const [errorMsg, beam, nodes, spans, combinations] = populateData(beamInput, loadFactorInput);
  if (errorMsg) { return error(errorMsg) }

  // Start the SVG
  const svg = { tag: 'svg', children: [], attrs: { float: "right" } };

  // Create the first diagram. Show fixities, lengths, and loads.
  const loadDiagram = createLoadDiagram(beam, nodes, spans);
  svg.children = svg.children.concat(loadDiagram);

  // Do the linear algebra. For each load type, get member end actions and node displacements.
  const [actions, deflections] = doAnalysis(beam, nodes, spans);

  // Determine shear, moment, and deflection maximums and minimums by superimposing
  // the relevent load combinations and live load patterns.
  const extremes = combine(beam, nodes, spans, actions, deflections, combinations);

  // Decide which combinations get plotted.
  const cases = selectCases(spans);

  // Find the y coordinates for the shear, moment, and deflection diagrams.
  const yCoords = locateDiagrams(beam, extremes);
  const yMax = yCoords[6]; // Diagram overall height in local coords.

  const diagrams = drawDiagrams(beam, nodes, spans, cases, yCoords, extremes, combinations);
  svg.children = svg.children.concat(diagrams);

  // Set the outer dimensions of the diagram.
  svg.attrs.width = "375"; // px
  svg.attrs.height = (375 / 450 * yMax).toFixed(0);
  svg.attrs.viewBox = `0 0 450 ${yMax.toFixed(0)}`;

  return svg

};

// evaluate.js

/*
 *  This module receives an RPN string and a object containing Hurmet variables.
 *  It does the calculation, doing unit-compatibility checks along the way.
 *  It returns a result in two formats: (1) a TeX string that can be displayed and
 *  (2) numeric and unit data that can used for calculations by other cells.
 *
 *  Hurmet does automatic unit conversions and checks for unit compatibility.
 *  Compatibility checks are done by keeping track of the unit exponents.
 *  So for instance if we divide an area by a length, the unit exponent calculation runs as:
 *     LENGTH^2 / LENGTH^1 = LENGTH^(2-1) = LENGTH^1
 *  We keep track of unit exponents for each of 9 base dimensions. That's why
 *  you see an array of 9 integers occuring in the code below.
 *
 *  Inside evalRpn(), Hurmet operands are each an object with three fields:
 *     value: the value of the operand
 *     unit:  holds unit info, either unit name, an array of exponents, or a unitMap
 *     dtype: an integer indicating data type.
 *
 *     Note that an operand can be two data types at once, such as RATIONAL and MATRIX.
 *     In such cases, dtype is the sum of the two underlying integers.
 *     So, in constants.js, we have enumerated the data types in powers of two.
 *     That way, we can use a bit-wise "&" operator to test for an individual type.
 *
 *     Numeric matrices and numeric maps can have math operations done to them.
 *     We distinguish numeric matrices from other matrices by the fact that
 *     (oprnd.dtype & dt.RATIONAL) returns a true if the matrix is numeric.
 *
 *     File operands.js contains further explanation of Hurmet operands.
 */

// Some helper functions

const setComparisons = ["in", "!in", "∈", "∉", "∋", "∌", "⊂", "⊄", "⊃", "⊅"];

const shapeOf = oprnd => {
  return oprnd.dtype === dt.COMPLEX
    ? "complex"
    : oprnd.dtype < 128
    ? "scalar"
    : isVector(oprnd)
    ? "vector"
    : (oprnd.dtype & dt.MATRIX)
    ? "matrix"
    : oprnd.dtype === dt.DATAFRAME
    ? "dataFrame"
    : (oprnd.dtype & dt.MAP)
    ? "map"
    : "other"
};

const binaryShapesOf = (o1, o2) => {
  let shape1 = shapeOf(o1);
  let shape2 = shapeOf(o2);
  let needsMultBreakdown = false;
  if ((isMatrix(o1) || (o1.dtyp & dt.MAP)) && (isMatrix(o2) || (o2.dtype & dt.MAP))) {
    // If both operands are matrices, we need to return more information.
    // That enables the various ways to multiply two matrices.
    needsMultBreakdown = true;
    if (shape1 === "vector") {
      shape1 = (o1.dtype & dt.ROWVECTOR) ? "rowVector" : "columnVector";
    }
    if (shape2 === "vector") {
      shape2 = (o2.dtype & dt.ROWVECTOR) ? "rowVector" : "columnVector";
    }
  }
  return [shape1, shape2, needsMultBreakdown]
};

const matrixMults = { "×": "cross", "·": "dot", "∘": "circ", ".*": "circ",
  "*": "multiply", "∗": "multiply", "⌧": "multiply", "modulo": "modulo" };

const nextToken = (tokens, i) => {
  if (tokens.length < i + 2) { return undefined }
  return tokens[i + 1]
};

// array of function names that return a real number from a complex argument.
const arfn = ["abs", "angle", "imag", "real", "Γ", "gamma"];

const stringFromOperand = (oprnd, formats) => {
  return oprnd.dtype === dt.STRING
    ? oprnd.value
    : oprnd.dtype === dt.RATIONAL
    ? format(oprnd.value, "h15", formats.decimalFormat)
    : isMatrix(oprnd.dtype)
    ? Matrix.displayAlt(oprnd, "h15", formats)
    : (oprnd.dtype & dt.MAP)
    ? DataFrame.displayAlt(oprnd.value, "h15", formats)
    : oprnd.value
};

const evalRpn = (rpn, vars, formats, unitAware, lib) => {
  // This is the function that does calculations with the rpn string.
  const tokens = rpn.split("\u00A0");
  const stack = [];
  let oPrev;
  for (let i = 0; i < tokens.length; i++) {
    const tkn = tokens[i];
    const ch = tkn.charAt(0);

    if (ch === "®") {
      // A rational number.⌾
      const r = new Array(2);
      const pos = tkn.indexOf("/");
      r[0] = BigInt(tkn.slice(1, pos));   // numerator
      r[1] = BigInt(tkn.slice(pos + 1));  // denominator
      const num = Object.create(null);
      num.value = r;
      num.unit = Object.create(null);
      num.unit.expos = allZeros;
      num.dtype = dt.RATIONAL;
      stack.push(Object.freeze(num));

    } else if (ch === "⌾") {
      const date = Object.create(null);
      date.value = [BigInt(tkn.slice(1)), BigInt(1)];
      date.unit = Object.create(null);
      date.unit.expos = [0, 0, 1, 0, 0, 0, 0, 0],
      date.dtype = dt.DATE;
      stack.push(Object.freeze(date));

    } else if (ch === "©") {
      // A complex number.
      const ints = tkn.slice(1).split(",");
      const z = new Array(2);
      z[0] = [BigInt(ints[0]), BigInt(ints[1])];  // real part
      z[1] = [BigInt(ints[2]), BigInt(ints[3])];  // imaginary part
      const num = Object.create(null);
      num.value = z;
      num.unit = Object.create(null);
      num.unit.expos = allZeros;
      num.dtype = dt.COMPLEX;
      stack.push(Object.freeze(num));

    } else if (ch === "¿") {
      // A variable. Get the value from vars
      const varName = tkn.substring(1);
      let oprnd = Object.create(null);
      if (varName === "undefined") {
        oprnd.value = undefined;
        oprnd.unit = null;
        oprnd.dtype = 0;
      } else if (varName === "T" && nextToken(tokens, i) === "^" &&
            stack.length > 0 && isMatrix(stack[stack.length - 1])) {
        i += 1;
        oprnd = Matrix.transpose(stack.pop());
      } else if (varName === "j" && !vars.j) {
        oprnd.value = [Rnl.zero, Rnl.one];
        oprnd.unit = Object.create(null);
        oprnd.unit.expos = allZeros;
        oprnd.dtype = dt.COMPLEX;
      } else {
        const cellAttrs = vars[varName];
        if (!cellAttrs) { return errorOprnd("V_NAME", varName) }
        oprnd = fromAssignment(cellAttrs, unitAware);
        if (oprnd.dtype === dt.ERROR) { return oprnd }
      }
      stack.push(Object.freeze(oprnd));

    } else if (ch === '"') {
      // A string literal.
      const chEnd = tkn.charAt(tkn.length - 1);
      const str = ch === '"' && chEnd === '"' ? tkn.slice(1, -1) : tkn;
      stack.push(Object.freeze({ value: str, unit: null, dtype: dt.STRING }));

    } else if (/^``/.test(tkn)) {
      stack.push(DataFrame.dataFrameFromTSV(tablessTrim(tkn.slice(2, -2)), vars));

    } else if (ch === '`') {
      // A rich text literal
      const chEnd = tkn.charAt(tkn.length - 1);
      const str = ch === '`' && chEnd === '`' ? tkn.slice(1, -1).trim() : tkn.trim();
      stack.push(Object.freeze({ value: str, unit: null, dtype: dt.RICHTEXT }));

    } else {
      switch (tkn) {
        case "true":
        case "false": {
          const bool = Object.create(null);
          bool.value = tkn === "true";
          bool.unit = null;
          bool.dtype = dt.BOOLEAN;
          stack.push(Object.freeze(bool));
          break
        }

        case "pi":
        case "π": {
          const pi = Object.create(null);
          pi.value = Rnl.pi;
          pi.dtype = dt.RATIONAL;
          pi.unit = Object.create(null);
          pi.unit.expos = allZeros;
          stack.push(Object.freeze(pi));
          break
        }

        case "e": {
          const e = Object.create(null);
          e.value = "e";
          e.dtype = dt.RATIONAL;
          e.unit = Object.create(null);
          e.unit.expos = allZeros;
          stack.push(Object.freeze(e));
          break
        }

        case "ℏ": {
          // Reduced Plank constant
          const hbar = Object.create(null);
          hbar.value = Rnl.hbar;
          hbar.dtype = dt.RATIONAL;
          hbar.unit = Object.create(null);
          hbar.unit.expos = Object.freeze(unitAware ? [2, 1, -1, 0, 0, 0, 0, 0] : allZeros);
          stack.push(Object.freeze(hbar));
          break
        }

        case "∠": {
          // Complex number in polar notation.
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (o1.dtype !== dt.RATIONAL || o2.dtype !== dt.RATIONAL) {
            return errorOprnd("NAN_OP")
          }
          const theta = Rnl.toNumber(o2.value);
          const z = Object.create(null);
          z.value = [
            Rnl.multiply(o1.value, Rnl.fromNumber(Math.cos(theta))), // real part
            Rnl.multiply(o1.value, Rnl.fromNumber(Math.sin(theta)))  // imaginary part
          ];
          z.unit = Object.create(null);
          z.unit.expos = allZeros;
          z.dtype = dt.COMPLEX;
          stack.push(Object.freeze(z));
          break
        }

        case "+":
        case ".+":
        case "-":
        case ".-": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          const op = tkn === "+" || tkn === ".+" ? "add" : "subtract";
          if (!(((o1.dtype & dt.RATIONAL) || (o1.dtype & dt.DATE) || (o1.dtype & dt.COMPLEX))
           && ((o2.dtype & dt.RATIONAL) || (o2.dtype & dt.DATE) || (o2.dtype & dt.COMPLEX)))) {
            return errorOprnd("NAN_OP")
          }
          if (unitAware) {
            if (!unitsAreCompatible(o1.unit.expos, o2.unit.expos)) {
              return errorOprnd("UNIT_ADD")
            }
          }
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);
          const sum = Object.create(null);
          // See file operations.js for an explanation of what goes on in the next line.
          sum.value = Operators.binary[shape1][shape2][op](o1.value, o2.value);
          if (sum.value.dtype && sum.value.dtype === dt.ERROR) { return sum.value }
          sum.unit = o1.unit;
          sum.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, tkn);
          stack.push(Object.freeze(sum));
          break
        }

        case "~": {
          // Unary minus
          const o1 = stack.pop();
          if (!((o1.dtype & dt.RATIONAL) || o1.dtype === dt.COMPLEX)) {
            return errorOprnd("NAN_OP")
          }
          const neg = Object.create(null);
          neg.value = Operators.unary[shapeOf(o1)]["negate"](o1.value);
          if (neg.value.dtype && neg.value.dtype === dt.ERROR) { return neg.value }
          neg.unit = o1.unit;
          neg.dtype = o1.dtype;
          stack.push(Object.freeze(neg));
          break
        }

        case "×":
        case "·":
        case "*":
        case "∗":
        case "∘":
        case "⌧": {
          const oprnd2 = stack.pop();
          const o2 = oprnd2.dtype === dt.DATAFRAME ? clone(oprnd2) : oprnd2;
          const o1 = stack.pop();
          if ((tkn === "*" || tkn === "∗")
               && o1.dtype === dt.STRING && o1.dtype === dt.STRING) {
            // Julia's string concatenation operator
            const str1 = stringFromOperand(o1, formats);
            const str2 = stringFromOperand(o2, formats);
            return { value: str1 + str2, unit: null, dtype: dt.STRING }
          }
          if (!(((o1.dtype & dt.RATIONAL) || (o1.dtype & dt.COMPLEX)) &&
            ((o2.dtype & dt.RATIONAL) || (o2.dtype & dt.COMPLEX) ||
            o2.dtype === dt.DATAFRAME))) {
            return errorOprnd("NAN_OP")
          }
          const product = Object.create(null);
          let unit = Object.create(null);
          if (unitAware) {
            if ((o1.dtype === dt.DATAFRAME && o2.dtype === dt.RATIONAL) ||
                (o1.dtype === dt.RATIONAL && o2.dtype === dt.DATAFRAME)) {
              unit = o1.dtype === dt.DATAFRAME ? o1.unit : o2.unit;
            } else {
              unit.expos = o1.unit.expos.map((e, j) => e + o2.unit.expos[j]);
            }
          } else {
            unit.expos = allZeros;
          }
          product.unit = o2.dtype === dt.DATAFRAME ? clone(o2.unit) : Object.freeze(unit);

          const [shape1, shape2, needsMultBreakdown] = binaryShapesOf(o1, o2);
          const op = needsMultBreakdown ? matrixMults[tkn] : "multiply";

          product.dtype = (tkn === "∘" || shape1 === "scalar" || shape1 === "map" ||
            shape1 === "complex" || shape2 === "scalar" ||
            shape2 === "map" || shape2 === "complex")
              ? Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, op)
              : tkn === "·"
              ? dt.RATIONAL
              : tkn === "×"
              ? dt.COLUMNVECTOR
              : Matrix.multResultType(o1, o2);

          product.value = Operators.binary[shape1][shape2][op](o1.value, o2.value);
          if (product.value.dtype && product.value.dtype === dt.ERROR) {
            return product.value
          }

          stack.push(Object.freeze(product));
          break
        }

        case "/":
        case "./":
        case "//":
        case "///":
        case "\u2215": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (!(((o1.dtype & dt.RATIONAL) || o1.dtype === dt.COMPLEX) &&
                ((o2.dtype & dt.RATIONAL) || o2.dtype === dt.COMPLEX))) {
            return errorOprnd("NAN_OP")
          }
          const quotient = Object.create(null);
          const unit = Object.create(null);
          unit.expos = unitAware
            ? o1.unit.expos.map((e, j) => e - o2.unit.expos[j])
            : allZeros;
          quotient.unit = Object.freeze(unit);
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);
          quotient.value = Operators.binary[shape1][shape2]["divide"](o1.value, o2.value);
          if (quotient.value.dtype && quotient.value.dtype === dt.ERROR) {
            return quotient.value
          }
          quotient.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, "divide");
          if (isDivByZero(quotient.value, shapeOf(quotient))) { return errorOprnd("DIV") }
          stack.push(Object.freeze(quotient));
          break
        }

        case "^":
        case ".^": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (!(((o1.dtype & dt.RATIONAL) || o1.dtype === dt.COMPLEX) &&
                ((o2.dtype & dt.RATIONAL) || o2.dtype === dt.COMPLEX) ||
                (isMatrix(o1) && o2.value === "T"))) {
            return errorOprnd("NAN_OP")
          }
          const power = Object.create(null);
          const unit = Object.create(null);
          unit.expos = allZeros;
          if (unitAware) {
            // TODO: lots to do here
            const d = typeof o2.unit === "number" ? o2.unit : Rnl.toNumber(o2.value);
            unit.expos = o1.unit.expos.map(e => e * d);
          }
          power.unit = Object.freeze(unit);
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);
          power.value = Operators.binary[shape1][shape2]["power"](o1.value, o2.value);
          if (power.value.dtype) { return power.value } // Error
          power.dtype = Cpx.isComplex(power.value)
            ? dt.COMPLEX
            : Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, tkn);
          stack.push(Object.freeze(power));
          break
        }

        case "modulo": {
          if (unitAware) { return errorOprnd( "UNIT_UN", "modulo" ) }
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (!(o1.dtype & dt.RATIONAL) || !(o2.dtype & dt.RATIONAL)) {
            return errorOprnd("NAN_OP")
          }
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);
          const result = Object.create(null);
          result.unit = allZeros;
          result.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, "modulo");
          result.value = Operators.binary[shape1][shape2]["modulo"](o1.value, o2.value);
          stack.push(Object.freeze(result));
          break
        }

        case "&":
        case "hcat":
        case "vcat": {
          // Concatenation
          const o2 = stack.pop();
          const o1 = stack.pop();
          const opName = tkn === "vcat" ? "unshift" : "concat";
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);
          let o3 = Object.create(null);
          if (o1.dtype === dt.STRING && o1.dtype === dt.STRING) {
            const str1 = stringFromOperand(o1, formats);
            const str2 = stringFromOperand(o2, formats);
            o3.value = str1 + str2;
            o3.unit = null;
            o3.dtype = dt.STRING;
          } else if ((o1.dtype & dt.DATAFRAME) && isVector(o2) && tkn !== "vcat") {
            o3 = DataFrame.append(o1, o2, vars.format.value, unitAware);
            if (o3.dtype === dt.ERROR) { return o3 }
          } else if (isVector(o1) && (o2.dtype & dt.DATAFRAME) && tkn !== "vcat") {
            o3 = DataFrame.append(o1, o2, vars.format.value, unitAware);
            if (o3.dtype === dt.ERROR) { return o3 }
          } else if (((o1.dtype & dt.DATAFRAME) && shape2 === "scalar") ||
                     (shape1 === "scalar" && (o2.dtype & dt.DATAFRAME))) {
            o3 = DataFrame.append(o1, o2, vars.format.value, unitAware);
            if (o3.dtype === dt.ERROR) { return o3 }
          } else if ((o1.dtype & dt.MAP) || (o2.dtype & dt.MAP)) {
            o3 = map.append(o1, o2, shape1, shape2);
            if (o3.dtype === dt.ERROR) { return o3 }
          } else {
            if (unitAware) {
              if (!unitsAreCompatible(o1.unit.expos, o2.unit.expos)) {
                return errorOprnd("UNIT_ADD")
              }
            }
            o3.value = Operators.binary[shape1][shape2][opName](o1.value, o2.value);
            if (o3.value.dtype) { return o3.value } // Error
            o3.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, tkn);
            if (o1.dtype === dt.COLUMNVECTOR && shape2 === "scalar") {
              // Appending an element to an empty column vector
              o3.dtype = o1.dtype + o2.dtype;
            }
            o3.unit = o1.unit;
          }
          stack.push(Object.freeze(o3));
          break
        }

        case "√":
        case "∛":
        case "∜": {
          const index = tkn.charCodeAt(0) - 8728;
          const pow = [BigInt(1), BigInt(index)];
          const o1 = stack.pop();
          if (!((o1.dtype & dt.RATIONAL) || (o1.dtype & dt.COMPLEX))) {
            return errorOprnd("NAN_OP")
          }
          const root = Object.create(null);
          const unit = Object.create(null);
          unit.expos = allZeros;
          if (unitAware) { unit.expos = o1.unit.expos.map(e => e / index); }
          root.unit = Object.freeze(unit);

          const shape1 = shapeOf(o1);
          root.value = Operators.binary[shape1]["scalar"]["power"](o1.value, pow);
          if (root.value.dtype && root.value.dtype === dt.ERROR) { return root.value }

          root.dtype = Cpx.isComplex(root.value)
            ? dt.COMPLEX
            : Operators.dtype[shape1]["scalar"](o1.dtype, dt.RATIONAL, tkn);

          stack.push(Object.freeze(root));
          break
        }

        case "root": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (!((o1.dtype & dt.RATIONAL) & (o2.dtype & dt.RATIONAL))) {
            return errorOprnd("NAN_OP")
          }
          const root = Object.create(null);
          const unit = Object.create(null);
          unit.expos = allZeros;
          if (unitAware) { unit.expos = o2.unit.expos.map(e => e / Number(o1.value[0])); }
          root.unit = Object.freeze(unit);

          const pow = Rnl.reciprocal(o1.value);
          const shape1 = shapeOf(o1);
          root.value = Operators.binary[shape1]["scalar"]["power"](o2.value, pow);
          if (root.value.dtype && root.value.dtype === dt.ERROR) { return root.value }

          root.dtype = Operators.dtype[shape1]["scalar"](o1.dtype, dt.RATIONAL, tkn);
          stack.push(Object.freeze(root));
          break
        }

        case ".": {
          // Accessor of a object's property in dot notation
          const o2 = stack.pop();
          const o1 = stack.pop();
          let property;
          if ((o1.dtype === dt.DATAFRAME || o1.dtype === dt.SPREADSHEET)
                && tokens.length - i > 2 && tokens[i + 2] === ".") {
            // Skip creation of a vector and go straight to a call to a single cell
            const o3 = { value: tokens[i + 1].replace(/"/g, ""), unit: null, dtype: dt.STRING };
            const args = o1.dtype === dt.SPREADSHEET
              ? [o2, o3]
              : (o2.value in o1.value.columnMap)
              ? [o3, o2]
              : [o2, o3];
            property = o1.dtype === dt.DATAFRAME
              ? DataFrame.range(o1, args, unitAware)
              : cellOprnd(o1, args, unitAware);
            i += 2;
          } else if ((o1.dtype === dt.DATAFRAME || o1.dtype === dt.SPREADSHEET)
                && tokens.length - i > 3
                && tokens[i + 2] === "[]" && tokens[i + 3] === "1"
                && tokens[i + 1].slice(0, 1) === '"') {
            // Skip creation of a vector and go straight to a call to a single cell
            const o3 = { value: tokens[i + 1].replace(/"/g, ""), unit: null, dtype: dt.STRING };
            const args =  (o2.value in o1.value.columnMap) ? [o3, o2] : [o2, o3];
            property = o1.dtype === dt.DATAFRAME
              ? DataFrame.range(o1, args, unitAware)
              : cellOprnd(o1, args, unitAware);
            i += 3;
          } else {
            property = propertyFromDotAccessor(o1, o2, unitAware);
          }
          if (property.dtype === dt.ERROR) { return property }
          stack.push(Object.freeze(property));
          break
        }

        case "[]": {
          // Bracket accessor to a data frame, matrix, string, map, or module.
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          const args = [];
          for (let j = 0; j < numArgs; j++) { args.unshift(stack.pop()); }
          const o1 = stack.pop();
          let property;
          if (o1.dtype & dt.DATAFRAME) {
            if (args.length === 1 && args[0].dtype === dt.STRING && tokens.length - i > 2
                  && tokens[i + 2] === ".") {
              // Skip creation of a vector and go straight to a call to a single cell
              const o2 = args[0];
              const o3 = { value: tokens[i + 1].replace(/"/g, ""), unit: null, dtype: dt.STRING };
              const newArgs =  (o2.value in o1.value.columnMap) ? [o3, o2] : [o2, o3];
              property = DataFrame.range(o1, newArgs, unitAware);
              i += 2;
            } else if (args.length === 1 && args[0].dtype === dt.STRING
                && tokens.length - i > 3 && tokens[i + 2] === "[]" && tokens[i + 3] === "1"
                && tokens[i + 1].slice(0, 1) === '"') {
              // Skip creation of a vector and go straight to a call to a single cell
              const o2 = args[0];
              const o3 = { value: tokens[i + 1].replace(/"/g, ""), unit: null, dtype: dt.STRING };
              const newArgs =  (o2.value in o1.value.columnMap) ? [o3, o2] : [o2, o3];
              property = DataFrame.range(o1, newArgs, unitAware);
              i += 3;
            } else {
              property = DataFrame.range(o1, args, unitAware);
            }

          } else if (o1.dtype & dt.MAP) {
            property = map.range(o1, args, unitAware);

          } else if (o1.dtype === dt.STRING) {
            property = textRange(o1.value, args[0]);

          } else if (o1.dtype === dt.MODULE) {
            if (numArgs === 1) {
              property = fromAssignment(o1.value[args[0].value], unitAware);
            } else {
              // Multiple assignment.
              property = { value: new Map(), unit: null, dtype: dt.TUPLE };
              for (let j = 0; j < args.length; j++) {
                const name = args[j].value;
                property.value.set(name, fromAssignment(o1.value[name], unitAware));
              }
            }

          } else {
            // o1 is a matrix or a data frame
            const rowIndex = args[0];
            const colIndex = (numArgs === 2)
              ? args[1]
              : isVector(o1)
              ? null
              : { value: Rnl.zero, unit: allZeros, dtype: dt.RATIONAL };
            property = (o1.dtype & dt.DATAFRAME)
              ? DataFrame.range(o1, rowIndex, colIndex, unitAware)
              : Matrix.submatrix(o1, rowIndex, colIndex);
          }
          if (property.dtype === dt.ERROR) { return property }
          stack.push(Object.freeze(property));
          break
        }

        case ":": {
          // range separator.
          const end = stack.pop();
          const o1 = stack.pop();
          if (!(o1.dtype === dt.RATIONAL || o1.dtype === dt.RANGE)) {
            return errorOprnd("NAN_OP")
          }
          const range = Object.create(null);
          range.unit = null;
          range.dtype = dt.RANGE;
          const step = o1.dtype !== dt.RATIONAL
            ? o1.value[2]
            : end.value === "∞" || Rnl.lessThanOrEqualTo(o1.value, end.value)
            ? Rnl.one
            : Rnl.negate(Rnl.one);
          range.value = o1.dtype === dt.RATIONAL
            ? [o1.value, step, end.value]
            : [o1.value[0], o1.value[2], end.value];
          stack.push((Object.freeze(range)));
          break
        }

        case "normal":
        case "uniform":
        case "lognormal": {
          // eslint-disable-next-line no-unused-vars
          stack.pop();
          // eslint-disable-next-line no-unused-vars
          stack.pop();
          // low and high define a probablility distribution. They are the ends of a
          // uniform distribution or they mark the 90% confidence interval of (log)normal.
          // TODO: Implement probability distributions as a data type.
          break
        }

        case "!":
        case "‼":
        case "!!": {
          // TODO: "!!" and "¡"
          const o1 = stack.pop();
          if (!(o1.dtype & dt.RATIONAL)) { return errorOprnd("NAN_OP") }
          if (unitAware) {
            if (!unitsAreCompatible(o1.unit.expos, allZeros)) { return errorOprnd("FACT") }
          }
          const x = o1.value;
          if (!Rnl.isInteger(x) || Rnl.isNegative(x)) { return errorOprnd("FACT") }
          const factorial = Object.create(null);
          factorial.unit = allZeros;
          factorial.dtype = dt.RATIONAL;
          factorial.value = tkn === "!"
            ? Operators.unary[shapeOf(o1)]["factorial"](x)
            : Operators.unary[shapeOf(o1)]["doubleFactorial"](x);
          if (factorial.value.dtype) { return factorial.value } // Error
          stack.push(Object.freeze(factorial));
          break
        }

        case "%": {
          // TODO: per thousand, ‰
          const o1 = stack.pop();
          if (!(o1.dtype & dt.RATIONAL)) { return errorOprnd("NAN_OP") }
          const percentage = Object.create(null);
          percentage.unit = o1.unit;
          percentage.dtype = o1.dtype;
          percentage.value = Operators.unary[shapeOf(o1)]["percent"](o1.value);
          if (percentage.value) { return percentage.value } // Error
          stack.push(Object.freeze(percentage));
          break
        }

        case "|":
        case "‖": {
            // Find |x| or ‖x‖
          const o1 = stack.pop();
          if (!((o1.dtype & dt.RATIONAL) || o1.dtype === dt.COMPLEX)) {
            return errorOprnd("NAN_OP")
          }
          const op = tkn === "|" ? "abs" : "norm";
          const abs = Object.create(null);
          abs.unit = o1.unit;
          abs.dtype = dt.RATIONAL;
          abs.value = Operators.unary[shapeOf(o1)][op](o1.value);
          if (abs.value.dtype && abs.value.dtype === dt.ERROR) { return abs.value }
          stack.push(Object.freeze(abs));
          break
        }

        case "matrix": {
          // matrix
          const numRows = Number(tokens[i + 1]);
          const numCols = Number(tokens[i + 2]);
          i += 2;

          const result = (stack.length > 0 && stack[stack.length - 1].dtype === dt.RANGE)
            ? Matrix.operandFromRange(stack.pop().value) // Input was [start:step:end...]
            : Matrix.operandFromTokenStack(stack, numRows, numCols);
          if (result.dtype === dt.ERROR) { return result }
          stack.push(result);
          break
        }

        case "tuple": {
          const numItems = Number(tokens[i + 1]);
          i += 1;
          const oprnd = { value: [], unit: null, dtype: dt.TUPLE };
          for (let j = 0; j < numItems; j++) {
            oprnd.value.unshift(stack.pop());
          }
          stack.push(oprnd);
          break
        }

        case "startSvg":
          stack.push({ value: draw.startSvg(), unit: null, dtype: dt.DRAWING });
          break

        case "beamDiagram": {
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          let combinations = "service";
          if (numArgs === 2)  { combinations = stack.pop().value; }
          const beam = stack.pop();
          if (!(beam.dtype & dt.MAP)) { return errorOprnd("BAD_TYPE", "beamDiagram") }
          const diagram = beamDiagram(beam.value.data, combinations);
          if (diagram.dtype && diagram.dtype === dt.ERROR) { return diagram }
          stack.push({ value: diagram, resultdisplay: diagram, unit: null, dtype: dt.DRAWING });
          break
        }

        case "abs":
        case "cos":
        case "sin":
        case "tan":
        case "acos":
        case "asin":
        case "atan":
        case "sec":
        case "csc":
        case "cot":
        case "asec":
        case "acsc":
        case "acot":
        case "exp":
        case "log":
        case "ln":
        case "log10":
        case "log2":
        case "cosh":
        case "sinh":
        case "tanh":
        case "sech":
        case "csch":
        case "coth":
        case "acosh":
        case "asinh":
        case "atanh":
        case "asech":
        case "acsch":
        case "acoth":
        case "gamma":
        case "Γ":
        case "lgamma":
        case "lfact":
        case "factorial":
        case "cosd":
        case "sind":
        case "tand":
        case "acosd":
        case "asind":
        case "atand":
        case "secd":
        case "cscd":
        case "cotd":
        case "asecd":
        case "acscd":
        case "acotd":
        case "real":
        case "imag":
        case "angle":
        case "conj":
        case "ceil":
        case "floor":
        case "Char":
        case "round":
        case "sqrt":
        case "sign": {
          // Functions with one real or complex argument.
          const arg = stack.pop();
          if (!((arg.dtype & dt.RATIONAL) || (arg.dtype & dt.COMPLEX))) {
            return errorOprnd("UNREAL", tkn)
          }

          const output = Object.create(null);
          const unit = Object.create(null);
          unit.expos = unitAware ? Functions.functionExpos(tkn, [arg]) : allZeros;
          if (unit.expos.dtype && unit.expos.dtype === dt.ERROR) { return unit.expos }
          output.unit = tkn === "Char" ? null : Object.freeze(unit);

          const shape = (arg.dtype & dt.RATIONAL) ? "scalar" : "complex";
          let value;
          if (arg.dtype & dt.MAP) {
            value = arg.value;
            value.data = value.data.map(col => Rnl.isRational(col[0])
              ? col.map(e => Functions.unary[shape][tkn](e))
              : col
            );
          } else {
            value = isVector(arg)
              ? arg.value.map(e => Functions.unary[shape][tkn](e))
              : isMatrix(arg)
              ? arg.value.map(row => row.map(e => Functions.unary[shape][tkn](e)))
              : Functions.unary[shape][tkn](arg.value);
          }
          if (value.dtype && value.dtype === dt.ERROR) { return value }
          output.value = Object.freeze(value);

          output.dtype = tkn === "Char"
            ? arg.dtype - dt.RATIONAL + dt.STRING
            : (arg.dtype & dt.COMPLEX) && arfn.includes(tkn)
            ? arg.dtype - dt.COMPLEX + dt.RATIONAL
            : arg.dtype;

          stack.push(Object.freeze(output));
          break
        }

        case "logn":
        case "atan2":
        case "gcd":
        case "rms":
        case "binomial":
        case "ones":
        case "zeros":
        case "mod":
        case "rem": {
          // Functions with two real arguments.
          const args = [];
          args.push(stack.pop());
          args.unshift(stack.pop());
          if (!(args[0].dtype & dt.RATIONAL)) { return errorOprnd("") }

          const output = Object.create(null);
          const unit = Object.create(null);
          unit.expos = unitAware ? Functions.functionExpos(tkn, args) : allZeros;
          if (unit.dtype && unit.dtype === dt.ERROR) { return unit }
          output.unit = Object.freeze(unit);

          const [value, dtype] = multivarFunction("binary", tkn, args);
          if (dtype === dt.ERROR) { return value }
          output.value = Object.freeze(value);
          output.dtype = dtype;
          stack.push(Object.freeze(output));
          break
        }

        case "hypot": {
          const numArgs = Number(tokens[i + 1]);
          i += 1;

          const args = [];
          args.push(stack.pop());
          if (!(args[0].dtype & dt.RATIONAL)) { return errorOprnd("") }
          let expos = null;
          let dtype = 0;
          for (let j = 0; j < numArgs - 1; j++) {
            args.push(stack.pop());
            if (!(args[1].dtype & dt.RATIONAL)) { return errorOprnd("") }
            expos = unitAware ? Functions.functionExpos("hypot", args) : allZeros;
            const [value, localDtype] = multivarFunction("binary", "hypot", args);
            if (localDtype === dt.ERROR) { return value }
            dtype = localDtype;
            args.pop();
            args.pop();
            args.push({ value, unit: { expos }, dtype });
          }
          const output = Object.freeze(args[0]);
          stack.push(output);
          break

        }

        case "today":
        case "savedate" : {
          if (tkn === "savedate" && !vars["@savedate"]) {
            return errorOprnd("UNSAVED")
          }
          const oprnd = { unit: { expos: [0, 0, 1, 0, 0, 0, 0, 0] }, dtype: dt.DATE };
          const numSeconds = tkn === "today"
            ? dateInSecondsFromToday()
            : dateInSecondsFromIsoString("'" + vars["@savedate"] + "'");
          oprnd.value = Rnl.fromNumber(numSeconds);
          stack.push(oprnd);
          break
        }

        case "Int": {
          const arg = stack.pop();
          const output = Object.create(null);
          output.unit = { expos: allZeros };
          if (!(arg.dtype & dt.BOOLEAN)) { return errorOprnd("LOGIC", "Int") }
          output.value = isVector(arg)
            ? arg.value.map(e => Rnl.fromNumber(Number(e)))
            : isMatrix(arg)
            ? arg.value.map(row => row.map(e => Rnl.fromNumber(Number(e))))
            : Rnl.fromNumber(Number(arg.value));
          output.dtype = arg.dtype - dt.BOOLEAN + dt.RATIONAL;
          stack.push(Object.freeze(output));
          break
        }

        case "number": {
          const arg = stack.pop();
          const output = Object.create(null);
          output.unit = { expos: allZeros };
          if (!(arg.dtype & dt.STRING)) { return errorOprnd("STRING") }
          output.value = isVector(arg)
            ? arg.value.map(e => Rnl.fromString(e))
            : isMatrix(arg)
            ? arg.value.map(row => row.map(e => Rnl.fromString(e)))
            : Rnl.fromString(arg.value);
          output.dtype = arg.dtype - dt.STRING + dt.RATIONAL;
          stack.push(Object.freeze(output));
          break
        }

        case "findmax": {
          const arg = stack.pop();
          let max = arg.value[0];
          let index = 1;
          if (!(isVector(arg) && (arg.dtype & dt.RATIONAL))) {
            return errorOprnd("NOT_VECTOR", "findmax")
          }
          for (let i = 1; i < arg.value.length; i++) {
            if (Rnl.greaterThan(arg.value[i], max)) {
              max = arg.value[i];
              index = Rnl.fromNumber(i + 1);
            }
          }
          const tuple = { value: new Map(), unit: null, dtype: dt.TUPLE };
          tuple.value.set("max", { value: max, unit: allZeros, dtype: dt.RATIONAL });
          tuple.value.set("index", { value: index, unit: allZeros, dtype: dt.RATIONAL });
          stack.push(tuple);
          break
        }

        case "findfirst": {
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          const args = [];
          args.push(stack.pop());
          if (numArgs === 2) {args.unshift(stack.pop()); }
          const isString = numArgs === 2 && (args[1].dtype & dt.STRING);
          const output = Object.create(null);
          output.unit = { expos: allZeros };
          output.value = isString && isVector(args[1])
            ? args[1].value.map(e => findfirst(args[0], e))
            : isString && isMatrix(args[1])
            ? args[1].value.map(row => row.map(e => findfirst(args[0], e)))
            : isString
            ? findfirst(args[0], args[1])
            : numArgs === 1
            ? Matrix.findfirst(true, args[0])
            : isVector(args[1])
            ? Matrix.findfirst(args[0].value, args[1])
            : errorOprnd("ERR_FUNC", "Error. Did not understand arguments");
          if (isString) {
            output.dtype = args[1].dtype - dt.STRING + dt.RATIONAL;
          } else {
            output.dtype = dt.RATIONAL;
          }
          stack.push(Object.freeze(output));
          break
        }

        case "roundn":
        case "string": {
          // Round a numeric value.
          const spec = stack.pop();
          const num = stack.pop();
          if (!(num.dtype & dt.RATIONAL)) { return errorOprnd("") }
          if (!(spec.dtype & dt.STRING)) { return errorOprnd("") }
          if (!/(?:[fr])\d+/.test(spec.value)) { return errorOprnd("") }
          let funcName = "";
          const output = Object.create(null);
          if (tkn === "string") {
            funcName = spec.value.charAt() === "f" ? "stringFixed" : "stringSignificant";
            output.unit = null;
            output.dtype = num.dtype - dt.RATIONAL + dt.STRING;
          } else {
            funcName = spec.value.charAt() === "f" ? "roundFixed" : "roundSignificant";
            output.unit = num.unit;
            output.dtype = num.dtype;
          }
          const n = Number(spec.value.slice(1));
          let value;
          if (num.dtype & dt.MAP) {
            value = num.value;
            value.data = value.data.map(
              col => Rnl.isRational(col[0])
                ? col.map(e => Functions.binary[funcName][tkn]([e, n]))
                : col
              );
          } else {
            value = isVector(num)
              ? num.value.map(e => Functions.binary[funcName]([e, n]))
              : isMatrix(num)
              ? num.value.map(row => row.map(e => Functions.binary[funcName]([e, n])))
              : Functions.binary[funcName]([num.value, n]);
          }
          if (value.dtype && value.dtype === dt.ERROR) { return value }
          output.value = Object.freeze(value);
          if (num.name) { output.name = num.name; }
          stack.push(Object.freeze(output));
          break
        }

        case "dataframe":
        case "max":
        case "min":
        case "sum":
        case "product":
        case "range":
        case "mean":
        case "median":
        case "variance":
        case "stddev":
        case "accumulate": {
          // Functions that reduce multiple arguments to one result.
          // TODO: unit-aware reducing functions.
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          const args = [];
          for (let j = 0; j < numArgs; j++) {
            const datum = stack.pop();
            if (tkn !== "dataframe" && !(datum.dtype & dt.RATIONAL)) {
              return errorOprnd("NANARG", tkn)
            }
            args.unshift(datum);
          }

          if (tkn === "dataframe") {
            const df = DataFrame.dataFrameFromVectors(args, vars.format.value);
            if (df.dtype && df.dtype === dt.ERROR) { return df }
            stack.push(df);
            break
          }

          const output = Object.create(null);
          const unit = Object.create(null);
          unit.expos = unitAware ? Functions.functionExpos(tkn, args) : allZeros;
          if (unit.dtype && unit.dtype === dt.ERROR) { return errorOprnd("") }
          output.unit = Object.freeze(unit);

          const [value, dtype] = multivarFunction("reduce", tkn, args);
          if (dtype === dt.ERROR) { return value }
          output.value = Object.freeze(value);
          output.dtype = dtype;
          stack.push(Object.freeze(output));
          break
        }

        case "spreadsheetSum": {
          const arg = stack.pop();
          const spreadsheet = stack.pop();
          stack.push(spreadsheetSum(spreadsheet, arg.value, unitAware));
          break
        }

        case "rand": {
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          if (numArgs === 0) {
            const value = Rnl.fromNumber(Math.random());
            stack.push({ value, unit: allZeros, dtype: dt.RATIONAL });
          } else if (numArgs === 1) {
            const n = Rnl.toNumber(stack.pop().value);
            if (!Number.isInteger(n)) { return errorOprnd("INT_ARG", "rand") }
            const value = new Array(n).fill(0)
              .map(e => Rnl.fromNumber(Math.random()));
            stack.push({ value, unit: allZeros, dtype: dt.RATIONAL + dt.COLUMNVECTOR });
          } else if (numArgs === 2) {
            const n = Rnl.toNumber(stack.pop().value);
            if (!Number.isInteger(n)) { return errorOprnd("INT_ARG", "rand") }
            const m = Rnl.toNumber(stack.pop().value);
            if (!Number.isInteger(m)) { return errorOprnd("INT_ARG", "rand") }
            let value = new Array(m).fill(new Array(n).fill(0));
            value = value.map(row => row.map(e => Rnl.fromNumber(Math.random())));
            stack.push({ value, unit: allZeros, dtype: dt.RATIONAL + dt.MATRIX });
          } else {
            return errorOprnd("BAD_ARGS", "rand")
          }
          break
        }

        case "isnan": {
          const oprnd = stack.pop();
          const output = Object.create(null);
          output.value = !(oprnd.dtype & dt.RATIONAL);
          output.unit = null;
          output.dtype = dt.BOOLEAN;
          stack.push(Object.freeze(output));
          break
        }

        case "length": {
          const arg = stack.pop();
          const value = arg.value;
          const length = isVector(arg)
            ? value.length
            : (arg.dtype & dt.MATRIX)
            ? value.length * value[0].length
            : (arg.dtype === dt.STRING)
            ? Array.from(value).length
            : (arg.dtype & dt.MAP)
            ? arg.keys().value.length
            : 0;
          const output = Object.create(null);
          output.value = Object.freeze(Rnl.fromNumber(length));
          output.unit = Object.create(null);
          output.unit.expos = allZeros;
          output.dtype = dt.RATIONAL;
          stack.push(Object.freeze(output));
          break
        }

        case "count": {
          const pattern = stack.pop();
          const str = stack.pop();
          if (pattern.dtype !== dt.STRING || str.dtype !== dt.STRING) {
            return errorOprnd("COUNT")
          }
          const output = Object.create(null);
          output.value = Object.freeze(
            Rnl.fromNumber(str.value.split(pattern.value).length - 1)
          );
          output.unit = Object.create(null);
          output.unit.expos = allZeros;
          output.dtype = dt.RATIONAL;
          stack.push(Object.freeze(output));
          break
        }

        case "lerp": {
          // linear interpolation function
          const args = new Array(3);
          args[2] = stack.pop();
          args[1] = stack.pop();
          args[0] = stack.pop();
          const result = Functions.lerp(args, unitAware);
          if (result.dtype === dt.ERROR) { return result }
          stack.push(result);
          break
        }

        case "matrix2table": {
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          const rowNames = numArgs === 3 ? stack.pop().value : [];
          const colNames = stack.pop().value;
          const matrix = stack.pop();
          const result = DataFrame.matrix2table(matrix, colNames, rowNames);
          if (result.dtype === dt.ERROR) { return result }
          stack.push(result);
          break
        }

        case "transpose":
          stack.push(Matrix.transpose(stack.pop()));
          break

        case "trace":
          stack.push(Matrix.trace(stack.pop()));
          break

        case "fetch":
          // fetch() is handled in updateCalculations.js.
          // It's easier from there to coordinate an async function with ProseMirror.
          // So if control flow get here, we have an error.
          return errorOprnd("FETCH")

        case "function": {
          // User defined function.
          const functionName = tokens[i + 1];
          const numArgs = Number(tokens[i + 2]);
          i += 2;
          const args = new Array(numArgs);
          for (let j = numArgs - 1; j >= 0; j--) {
            args[j] = stack.pop();
          }
          let oprnd;
          if (vars.svg && (functionName === "plot" || (draw.functions[functionName]))) {
            if (functionName === "plot") {
              args.splice(1, 0, formats.decimalFormat);
              oprnd = plot(...args);
            } else if (functionName === "path") {
              oprnd = draw.functions[functionName](args[0], args.slice(1));
            } else {
              oprnd = draw.functions[functionName](...args);
            }
          } else if (nextToken(tokens, i) === ".") {
            // Function from a module
            let lib = stack.pop().value;         // remote module
            if (lib.value) { lib = lib.value; }  // local module
            const udf = lib[functionName];
            if (udf === undefined) { return errorOprnd("F_NAME", functionName) }
            if (udf.dtype === dt.ERROR) { return udf }
            oprnd = evalCustomFunction(udf, args, formats, unitAware, lib);
            i += 1;
          } else if (lib && lib[functionName]) {
            // A module, "lib", was passed to this instance of evalRpn().
            const udf = lib[functionName];
            oprnd = evalCustomFunction(udf, args, formats, unitAware, lib);
          } else if (vars[functionName] && vars[functionName].dtype === dt.MODULE) {
            // User-defined function from a calculation node.
            const udf = vars[functionName]["value"];
            oprnd = evalCustomFunction(udf, args, formats, unitAware);
          } else {
            return errorOprnd("BAD_FUN_NM", functionName)
          }
          if (oprnd.dtype === dt.ERROR) { return oprnd }
          stack.push(oprnd);
          break
        }

        case "=":
        case "==":
        case "⩵":
        case "<":
        case ">":
        case "<=":
        case "≤":
        case ">=":
        case "≥":
        case "≠":
        case "!=":
        case "∈":
        case "in":
        case "∉":
        case "!in":
        case "∋":
        case "∌":
        case "⊂":
        case "⊄":
        case "⊃":
        case "⊅": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (unitAware &&
            !((o1.dtype & dt.STRING) || (o2.dtype & dt.STRING) ||
               o1.dtype === dt.NULL || o2.dtype === dt.NULL)) {
            if (!unitsAreCompatible(o1.unit.expos, o2.unit.expos)) {
              return errorOprnd("UNIT_COMP")
            }
          }
          const bool = Object.create(null);
          bool.unit = null;
          const prevValue = (o1.dtype === dt.BOOLEANFROMCOMPARISON) ? oPrev.value : undefined;

          if (setComparisons.includes(tkn)) {
            bool.value = compare(tkn, o1.value, o2.value, prevValue);
            bool.dtype = o1.dtype + dt.BOOLEANFROMCOMPARISON;
          } else {
            const [shape1, shape2, _] = binaryShapesOf(o1, o2);
            bool.value = Operators.relations[shape1][shape2].relate(tkn, o1.value,
              o2.value, prevValue);
            bool.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, tkn)
                         + dt.BOOLEANFROMCOMPARISON;
          }
          if (bool.value.dtype && bool.value.dtype === dt.ERROR) { return bool.value }
          if (bool.dtype & dt.RATIONAL) { bool.dtype -= dt.RATIONAL; }
          if (bool.dtype & dt.COMPLEX) { bool.dtype -= dt.COMPLEX; }
          if (bool.dtype & dt.STRING) { bool.dtype -= dt.STRING; }
          oPrev = o2;
          stack.push(Object.freeze(bool));
          break
        }

        case "and":
        case "&&":
        case "or":
        case "||":
        case "∧":
        case "∨":
        case "⊻": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (!(o1.dtype & dt.BOOLEAN) || !(o2.dtype & dt.BOOLEAN)) {
            return errorOprnd("LOGIC", tokens[i])
          }
          const op = { "and": "and", "&&": "and", "or": "or", "∧": "and",
            "||": "or", "∨": "or", "⊻": "xor" }[tkn];
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);

          const bool = Object.create(null);
          bool.unit = null;
          bool.value = Operators.binary[shape1][shape2][op](o1.value, o2.value);
          if (bool.value.dtype && bool.value.dtype === dt.ERROR) { return bool.value }

          bool.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, tkn);
          stack.push(Object.freeze(bool));
          break
        }

        case "not":
        case "¬": {
          const o1 = stack.pop();
          if (!(o1.dtype & dt.BOOLEAN)) { return errorOprnd("LOGIC", tkn) }
          const bool = Object.create(null);
          bool.unit = null;
          bool.value = Operators.unary[shapeOf(o1)]["not"](o1.value);
          if (bool.value.dtype && bool.value.dtype === dt.ERROR) { return bool.value }
          bool.dtype = dt.BOOLEAN;
          stack.push(Object.freeze(bool));
          break
        }

        case "cases": {
          // A multi-line cases expression. Hurmet's ternary expression.
          const numArgs = Number(tokens[i + 1]);
          i += 1;
          // We evaluate cases expressions lazily. Pop the conditions into an array.
          const conditions = new Array(numArgs);
          for (let j = numArgs - 1; j >= 0; j--) {
            conditions[j] = stack.pop();
          }
          // Check each condition.
          // When we reach the first true condition, evaluate the corresponding expression.
          for (let j = 0; j < numArgs; j++) {
            if ((conditions[j].dtype & dt.BOOLEAN) === 0) {
              return errorOprnd("LOGIC", "if")
            }
            const val = Operators.condition[shapeOf(conditions[j])](conditions[j].value);
            if (val) {
              const rpnLocal = tokens[i + j + 1].replace(/§/g, "\u00A0");
              const oprnd = evalRpn(rpnLocal, vars, formats, unitAware, lib);
              if (oprnd.dtype === dt.ERROR) { return oprnd }
              stack.push(oprnd);
              break
            }
          }
          i += numArgs;  // Discard the unused expressions
          break
        }

        case "applyUnit": {
          // Pop a magnitude off the stack and apply a unit.
          // This happens where a user writes a QUANTITY literal.
          if (!unitAware) { return errorOprnd("UNIT_AWARE", tokens[i + 1]) }
          const o1 = stack.pop();
          if (!(o1.dtype & dt.RATIONAL)) { return errorOprnd("QUANT_NUM") }
          const unitName = tokens[i + 1];
          i += 1;
          const output = Object.create(null);
          output.unit = Object.create(null);
          output.dtype = o1.dtype;
          if (!unitAware) {
            output.value = o1.value;
            if (o1.dtype & dt.MAP) {
              output.unit = unitFromUnitName(unitName);
            } else {
              output.unit.name = unitName;
            }
          } else {
            // Convert the magnitude to base units.
            const unit = unitFromUnitName(unitName);
            if (unit.dtype && unit.dtype === dt.ERROR) { return unit }
            if (isMatrix(o1)) {
              output.unit.expos = o1.unit.expos.map((e, j) => e + unit.expos[j]);
              output.value = Matrix.convertToBaseUnits(o1, unit.gauge, unit.factor);
            } else if (o1.dtype & dt.MAP) {
              output.unit = unit;
              output.value = o1.value;
              output.value.data = map.convertToBaseUnits(
                o1.value.data,
                unit.gauge,
                unit.factor
              );
            } else {
              output.unit.expos = o1.unit.expos.map((e, j) => e + unit.expos[j]);
              output.value = Rnl.multiply(Rnl.add(o1.value, unit.gauge), unit.factor);
            }
          }
          stack.push(Object.freeze(output));
          break
        }

        case "rem%": {
          const o2 = stack.pop();
          const o1 = stack.pop();
          if (!((o1.dtype & dt.RATIONAL) & (o2.dtype & dt.RATIONAL))) {
            return errorOprnd("NAN_OP")
          }
          const [shape1, shape2, _] = binaryShapesOf(o1, o2);
          const mod = Object.create(null);
          mod.unit = Object.create(null);
          mod.unit.expos = allZeros;
          mod.value = Operators.binary[shape1][shape2]["rem"](o1.value, o2.value);
          if (mod.value.dtype && mod.value.dtype === dt.ERROR) { return mod.value }
          mod.dtype = Operators.dtype[shape1][shape2](o1.dtype, o2.dtype, tkn);
          stack.push(Object.freeze(mod));
          break
        }

        case "⎾⏋":
        case "⎿⏌": {
          // ceiling or floor
          const o1 = stack.pop();
          if (!(o1.dtype & dt.RATIONAL)) { return errorOprnd("NAN_OP") }
          if (unitAware) {
            if (!unitsAreCompatible(o1.unit.expos, allZeros)) {
              // TODO: Write an error message.
              { return errorOprnd("") }
            }
          }
          const op = tkn === "⎾⏋" ? "ceil" : "floor";
          const output = Object.create(null);
          output.value = Operators.unary[shapeOf(o1)][op](o1.value);
          if (output.value.dtype && output.value.dtype === dt.ERROR) { return output.value }
          output.unit = o1.unit;
          output.dtype = o1.dtype;
          stack.push(Object.freeze(output));
          break
        }

        case "()": {
          // binomial
          const args = [];
          args.unshift(stack.pop());
          args.unshift(stack.pop());
          if (unitAware) {
            if (!unitsAreCompatible(args[0].unit.expos, allZeros) ||
              !unitsAreCompatible(args[1].unit.expos, allZeros)) {
              return errorOprnd("BINOM")
            }
          }
          const binom = Object.create(null);
          binom.unit = Object.create(null);
          binom.unit.expos = allZeros;
          const [value, dtype] = multivarFunction("binary", "binomial", args);
          binom.value = value;
          binom.dtype = dtype;
          stack.push(Object.freeze(binom));
          break
        }

        case "→": {
          // Anonymous function, e.g., x → cos x
          const rpnLocal = stack.pop().value.replace(/§/g, "\xa0");
          const parameter = stack.pop().value;
          stack.push({
            dtype: dt.MODULE,
            unit: null,
            value: {
              parameters: [ { name: parameter }],
              statements: [{ rpn: rpnLocal, stype: "return" }]
            } });
          break
        }

        case "∑": {
          const rpnLocal = stack.pop().value.replace(/§/g, "\xa0");
          const endOfRange = stack.pop().value;
          let index = stack.pop().value;
          const parameter = stack.pop().value;
          let sum = Rnl.zero;
          while (Rnl.lessThanOrEqualTo(index, endOfRange)) {
            vars[parameter] = { value: index, unit: allZeros, dtype: dt.RATIONAL };
            const localResult = evalRpn(rpnLocal, vars, formats, false);
            sum = Rnl.add(sum, localResult.value);
            index = Rnl.add(index, Rnl.one);
          }
          delete vars[parameter];
          stack.push({ value: sum, unit: allZeros, dtype: dt.RATIONAL });
          break
        }

        case "throw":
          return { value: stack.pop().value, unit: null, dtype: dt.ERROR }

        case "\\blue":
        case "\\gray":
        case "\\green":
        case "\\orange":
        case "\\pink":
        case "\\purple":
        case "\\red": {
          const color = clone(stack.pop());
          if (color.dtype === dt.STRING) { color.unit = tkn.slice(1); }
          stack.push(color);
          break
        }
          // TODO: Write an error message
      }
    }
  } // next i

  const oprnd = stack.pop();
  if (stack.length > 0) {
    return errorOprnd("ERROR")
  }

  return oprnd
};

const plot = (svg, formats, fun, numPoints, xMin, xMax) => {
  // Plot a function.
  // To avoid a circular reference, this function has to be here instead of in draw.js.
  const attrs = svg.value.temp;
  numPoints = (numPoints == null) ? Rnl.fromNumber(250) : numPoints.value;
  const min = (xMin == null) ? Rnl.fromNumber(attrs.xmin) : xMin.value;
  const max = (xMax == null) ? Rnl.fromNumber(attrs.xmax) : xMax.value;
  // Vectorize the evaluation. Start by finding a vector of the input.
  const step = Rnl.divide(Rnl.subtract(max, min), numPoints);
  const vector = Matrix.operandFromRange([min, step, max]);
  // Transpose the row vector into a column vector.
  const arg = { value: vector.value, unit: null, dtype: dt.COLUMNVECTOR + dt.RATIONAL };
  // Run the function on the vector.
  let funResult;
  let pathValue;
  if (fun.value.dtype && fun.value.dtype === dt.MODULE) {
    funResult = evalCustomFunction(fun.value, [arg], formats, false);
    pathValue = arg.value.map((e, i) => [e, funResult.value[i]]);
  } else if (fun.dtype === dt.STRING) {
    if (/§matrix§1§2$/.test(fun.value)) {
      arg.name = "t";
      pathValue = evalRpn(fun.value.replace(/§/g, "\xa0"), { t: arg }, formats, false).value;
    } else {
      arg.name = "x";
      funResult = evalRpn(fun.value.replace(/§/g, "\xa0"), { x: arg }, formats, false);
      pathValue = arg.value.map((e, i) => [e, funResult.value[i]]);
    }
  } else ;
  const path = { value: pathValue, unit: null, dtype: dt.MATRIX + dt.RATIONAL };
  return draw.functions.path(svg, [path])
};

const elementFromIterable = (iterable, index, step) => {
  // A helper function. This is called by `for` loops in evalCustomFunction()
  let value;
  let nextIndex = Rnl.increment(index);
  const i = Rnl.toNumber(index);
  let dtype = 0;
  if (iterable.dtype === dt.RANGE) {
    value = index;
    nextIndex = Rnl.add(index, step);
    dtype = dt.RATIONAL;
  } else if (iterable.dtype === dt.STRING) {
    if (iterable.value.slice(i - 1, i) === "\uD835") {
      value = "\uD835" + iterable.value.slice(i + 1, i + 2);
      nextIndex = Rnl.add(index, 1);
    } else {
      value = iterable.value.slice(i, i + 1);
    }
    dtype = dt.STRING;
  } else {
    value = iterable.value[i];
    dtype = (iterable.dtype & dt.STRING)
      ? dt.STRING
      : (iterable.dtype & dt.ROWVECTOR)
      ? iterable.dtype - dt.ROWVECTOR
      : (iterable.dtype & dt.COLUMNVECTOR)
      ? iterable.dtype - dt.COLUMNVECTOR
      : iterable.dtype - dt.MATRIX;
  }
  const oprnd = { value: value, unit: iterable.unit, dtype: dtype };
  return [oprnd, nextIndex]
};

const loopTypes = ["while", "for"];

const evalCustomFunction = (udf, args, formats, isUnitAware, lib) => {
  // UDF stands for "user-defined function"
  // lib is short for library. If not omitted, it contains a module with more functions.

  if (udf.dtype === dt.ERROR) {
    return udf
  }

  // Populate the function parameters.
  if (args.length > udf.parameters.length) { return errorOprnd("NUMARGS", udf.name) }
  const vars = Object.create(null);
  for (let i = 0; i < args.length; i++) {
    vars[udf.parameters[i].name] = args[i];
  }
  if (udf.parameters.length > args.length) {
    for (let i = args.length; i < udf.parameters.length; i++) {
      vars[udf.parameters[i].name] = udf.parameters[i].default;
    }
  }
  if (udf.dtype === dt.DRAWING) {
    vars["svg"] = { value: draw.startSvg(), unit: null, dtype: dt.DRAWING };
  }

  // Execute the function statements.
  // There will be nested flow of control, of course. So we'll create a
  // "control" stack. The topmost element contains info about the control
  // that applies to the current nesting level.
  const control = [{ type: "if", condition: true, endOfBlock: udf.statements.length - 1 }];
  for (let i = 0; i < udf.statements.length; i++) {
    const statement = udf.statements[i];
    const stype = statement.stype;
    const level = control.length - 1;
    switch (stype) {
      case "statement": {
        if (control[level].condition) {
          const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
          if (result.dtype === dt.ERROR) {
            // eslint-disable-next-line no-console
            console.log(statement.rpn);
            return result
          }
          if (statement.name) {
            statement.resultdisplay = isUnitAware ? "!!" : "!";
            const [stmt, _] = conditionResult(statement, result, isUnitAware);
            insertOneHurmetVar(vars, stmt, null, formats);
          }
        }
        break
      }

      case "if": {
        if (control[level].condition) {
          const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
          if (result.dtype === dt.ERROR) { return result }
          const val = Operators.condition[shapeOf(result)](result.value);
          control.push({
            type: "if",
            condition: val,
            endOfBlock: statement.endOfBlock
          });
        } else {
          // Skip this block
          i = statement.endOfBlock;
        }
        break
      }

      case "elseif": {
        if (control[level].type === "if" && control[level].condition) {
          i = control[level].endOfBlock;
          control.pop();
        } else {
          const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
          if (result.dtype === dt.ERROR) { return result }
          const val = Operators.condition[shapeOf(result)](result.value);
          control[control.length - 1].condition = val;
        }
        break
      }

      case "else":
        if (control[level].type === "if" && control[level].condition) {
          i = control[level].endOfBlock;
          control.pop();
        } else {
          control[level].condition = true;
        }
        break

      case "while": {
        if (control[level].condition) {
          const cntrl = {
            type: "while",
            startStatement: i,
            rpn: statement.rpn,
            endOfBlock: statement.endOfBlock
          };
          const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
          if (result.dtype === dt.ERROR) { return result }
          const val = Operators.condition[shapeOf(result)](result.value);
          cntrl.condition = val;
          if (cntrl.condition === true) {
            control.push(cntrl);
          } else {
            i = statement.endOfBlock;
          }
        } else {
          i = statement.endOfBlock;
        }
        break
      }

      case "for": {
        if (control[level].condition) {
          const ctrl = {
            type: "for",
            condition: true,
            startStatement: i,
            endOfBlock: statement.endOfBlock
          };
          const tokens = statement.rpn.split("\u00A0");
          ctrl.dummyVariable = tokens.shift().slice(1);
          const iterable = evalRpn(tokens.join("\u00A0"), vars,
                                   formats, isUnitAware, lib);
          ctrl.index = (iterable.dtype & dt.RANGE) ? iterable.value[0] : Rnl.fromNumber(0);
          ctrl.step = (iterable.dtype & dt.RANGE) ? iterable.value[1] : Rnl.fromNumber(1);
          ctrl.endIndex = (iterable.dtype & dt.RANGE)
            ? iterable.value[2]
            : Rnl.fromNumber(iterable.value.length - 1);
          const [oprnd, nextIndex] = elementFromIterable(iterable, ctrl.index, ctrl.step);
          ctrl.nextIndex = nextIndex;
          ctrl.iterable = iterable;
          control.push(ctrl);
          vars[ctrl.dummyVariable] = oprnd;
        } else {
          i = statement.endOfBlock;
        }
        break
      }

      case "break": {
        if (control[level].condition) {
          // Find the enclosing loop and pop out of it.
          for (let j = control.length - 1; j > 0; j--) {
            if (loopTypes.includes(control[j].type) || j === 0) {
              i = control[j].endOfBlock;
              control.pop();
              break
            } else {
              control.pop();
            }
          }
        }
        break
      }

      case "end": {
        // end of code block
        if (control[level].type === "if" && i >= control[level].endOfBlock) {
          control.pop();
        } else if (control[level].type === "if" && control[level].condition) {
          // Jump ahead to end of if block
          if (i < control[level].endOfBlock) { i = control[level].endOfBlock; }
          control.pop();
        } else if (control[level].type === "while") {
          const result = evalRpn(control[level].rpn, vars, formats, isUnitAware, lib);
          if (result.dtype === dt.ERROR) { return result }
          control[level].condition = result.value;
          if (control[level].condition) {
            i = control[level].startStatement;
          } else {
            control.pop();
          }
        } else if (control[level].type === "for") {
          control[level].index = control[level].nextIndex;
          const proceed = Rnl.isRational(control[level].index)
            && Rnl.isPositive(control[level].step)
            ? Rnl.lessThanOrEqualTo(control[level].index, control[level].endIndex)
            : Rnl.isRational(control[level].index)
            ? Rnl.greaterThanOrEqualTo(control[level].index, control[level].endIndex)
            : control[level].index <= control[level].endIndex;
          if (proceed) {
            const [oprnd, nextIndex] = elementFromIterable(
              control[level].iterable,
              control[level].index, control[level].step
            );
            vars[control[level].dummyVariable] = oprnd;
            control[level].nextIndex = nextIndex;
            i = control[level].startStatement;
          } else {
            control.pop();
          }
        }
        break
      }

      case "return":
        if (control[level].condition) {
          if (statement.rpn) {
            const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
            return result
          } else {
            return { value: Rnl.zero, unit: allZeros, dtype: dt.RATIONAL }
          }
        }
        break

      case "print":
        if (control[level].condition) {
          if (statement.rpn) {
            const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
            if (result.dtype === dt.ERROR) { return result }
            const msg = result.dtype === dt.RATIONAL
              ? Rnl.toNumber(result.value)
              : result.dtype === dt.STRING || result.dtype === dt.BOOLEAN
              ? result.value
              : isVector(result) && (result.dtype & dt.RATIONAL)
              ? result.value.map(e => Rnl.toNumber(e))
              : result.dtype === dt.MATRIX + dt.RATIONAL
              ? result.value.map(row => row.map(e => Rnl.toNumber(e)))
              : result.value;
            // eslint-disable-next-line no-console
            console.log(msg);
          }
        }
        break

      case "throw":
        if (control[level].condition) {
          if (statement.rpn) {
            const result = evalRpn(statement.rpn, vars, formats, isUnitAware, lib);
            return { value: result.value, unit: null, dtype: dt.ERROR }
          } else {
            return { value: statement.rpn, unit: null, dtype: dt.ERROR }
          }
        }
        break
        // TODO: Error message.
    }
  }
};

const errorResult = (stmt, result) => {
  stmt.value = null;
  // Wrap the message in a \mathord so that browsers will put
  // operator spacing on the previous = sign.
  stmt.resultDisplay = "\\textcolor{firebrick}{\\text{" +
                        result.value.replace(/%/g, "\\%") + "}}";
  stmt.altResultDisplay = result.value;
  stmt.error = true;
  stmt.dtype = dt.ERROR;
  if (stmt.resulttemplate.indexOf("!") > -1) {
    stmt.tex += "= " + stmt.resultDisplay;
    stmt.alt += result.value;
  } else if (stmt.resulttemplate.indexOf("@") > -1) {
    stmt.tex = stmt.resulttemplate.replace(/@@?/, stmt.resultDisplay);
    stmt.alt = stmt.altresulttemplate.replace(/@@?/, stmt.altResultDisplay);
  } else {
    stmt.tex = stmt.tex.replace(/[?%] *[?%]|[?%]/, stmt.resultDisplay);
    stmt.alt = stmt.alt.replace(/[?%] *[?%]|[?%]/, stmt.altResultDisplay);
  }
  return [stmt, result]
};

const spreadsheetSum = (sheet, index, unitAware) => {
  let sum = Rnl.zero;
  if (/^[A-Z]$/.test(index)) {
    // Sum a column
    const L = sheet.numRows - 1; // Do not include the top row.
    for (let i = 1; i <= L - 1; i++) {
      const cellOprnd = fromAssignment(sheet.value[index + String(i)], unitAware);
      if (cellOprnd.dtype === dt.ERROR) { return cellOprnd }
      sum = Rnl.add(sum, cellOprnd.value);
    }
  } else if (isNaN(index)) {
    return errorOprnd("SHEET_INDEX")
  } else {
    // Sum a row
    const L = Object.keys(sheet.columnMap).length;
    for (let j = 1; j <= L - 1; j++) {
      const cellName = String.fromCodePoint(65 + j) + index;
      const cellOprnd = fromAssignment(sheet.value[cellName], unitAware);
      if (cellOprnd.dtype === dt.ERROR) { return cellOprnd }
      sum = Rnl.add(sum, cellOprnd.value);
    }
  }
  return { value: sum, unit: allZeros, dtype: dt.RATIONAL }
};

const conditionResult = (stmt, oprnd, unitAware) => {
  let result = Object.create(null);
  result.value = oprnd.dtype === dt.DATAFRAME
    ? oprnd.value
    : clone(oprnd.value);
  result.unit = clone(oprnd.unit);
  result.dtype = oprnd.dtype;

  if (result.dtype === dt.COMPLEX && Rnl.isZero(Cpx.imag(result.value))) {
    result.value = Cpx.real(result.value);
    result.dtype = 1;
  }

  // Check unit compatibility.
  if (result.dtype !== dt.ERROR && unitAware && stmt.resultdisplay.indexOf("!") === -1 &&
    (stmt.unit && stmt.unit.expos ||
      (result.unit && result.unit.expos && Array.isArray(result.unit.expos)))) {
    const expos = result.dtype === dt.DATE && stmt.unit === undefined
      ? [0, 0, 1, 0, 0, 0, 0, 0]
      : stmt.unit && stmt.unit.expos
      ? stmt.unit.expos
      : allZeros;
    if (!unitsAreCompatible(result.unit.expos, expos)) {
      const message = stmt.unit && stmt.unit.expos ? "UNIT_RES" : "UNIT_MISS";
      result = errorOprnd(message);
    }
  }
  if (result.dtype === dt.ERROR) { return errorResult(stmt, result) }

  // Check for a valid display indicator.
  if (stmt.resulttemplate && stmt.resulttemplate.indexOf("!") > -1 &&
    !(result.dtype === dt.DATAFRAME || (result.dtype & dt.MAP) || isMatrix(result)
    || (result.dtype & dt.TUPLE))) {
    return errorResult(stmt, errorOprnd("BAD_DISPLAY"))
  }

  if (result.dtype & dt.RATIONAL) {
    if (result.dtype & dt.MAP) {
      result.value.data = result.value.data.map(column => Rnl.isRational(column[0])
        ? column.map(e => Rnl.normalize(e))
        : column);
    } else {
      result.value = isVector(result)
        ? result.value.map(e => Rnl.normalize(e))
        : isMatrix(result)
        ? result.value.map(row => row.map(e => Rnl.normalize(e)))
        : result.dtype === dt.RATIONAL
        ? Rnl.normalize(result.value)
        : result.value;
    }
  } else if (result.dtype === dt.COMPLEX) {
    result.value = [Rnl.normalize(result.value[0]), Rnl.normalize(result.value[1])];
  }
  stmt.dtype = result.dtype;

  // If unit-aware, convert result to desired result units.
  const unitInResultSpec = (stmt.unit && stmt.unit.factor &&
      (!Rnl.areEqual(stmt.unit.factor, Rnl.one) || stmt.unit.gauge));
  if ((result.dtype & dt.DATAFRAME) ||
      (typeof stmt.resultdisplay === "string" && stmt.resultdisplay.indexOf("!") > -1)) {
    stmt.unit = result.unit;
  } else if (unitAware && (result.dtype & dt.RATIONAL)) {
    if (!unitInResultSpec & unitsAreCompatible(result.unit.expos, allZeros)) {
      stmt.unit = { factor: Rnl.one, gauge: Rnl.zero, expos: allZeros };
    }
    if (result.dtype & dt.MAP) {
      result.value.data = {
        plain: map.convertFromBaseUnits(result.value.data, stmt.unit.gauge, stmt.unit.factor),
        inBaseUnits: result.value.data
      };
    } else {
      result.value = {
        plain: (isMatrix(result))
          ? Matrix.convertFromBaseUnits(
            { value: result.value, dtype: result.dtype },
            stmt.unit.gauge,
            stmt.unit.factor
            )
          : Rnl.subtract(Rnl.divide(result.value, stmt.unit.factor), stmt.unit.gauge),
        inBaseUnits: result.value
      };
    }
    stmt.dtype += dt.QUANTITY;
    stmt.expos = result.unit.expos;
  } else if (unitInResultSpec) {
    // A non-unit aware calculation, but with a unit attached to the result.
    if (result.dtype & dt.MAP) {
      const data = {
        plain: result.value.data,
        inBaseUnits: map.convertToBaseUnits(result.value.data,
                                            stmt.unit.gauge, stmt.unit.factor)
      };
      result.value.data = data;
    } else {
      result.value = {
        plain: result.value,
        inBaseUnits: (isMatrix(result))
          ? Matrix.convertToBaseUnits(
            { value: result.value, dtype: result.dtype },
            stmt.unit.gauge,
            stmt.unit.factor
            )
          : Rnl.multiply(Rnl.add(result.value, stmt.unit.gauge), stmt.unit.factor)
      };
    }
    stmt.dtype += dt.QUANTITY;

  } else if ((result.dtype & dt.RATIONAL) || (result.dtype & dt.COMPLEX) ) {
    // A numeric result with no unit specified.
    stmt.unit = { expos: allZeros };
  }
  if (Object.prototype.hasOwnProperty.call(result, "value")) {
    stmt.value = result.value;
  }
  return [stmt, result]
};

const evaluateDrawing = (
  stmt,
  vars,
  formats = { decimalFormat: "1,000,000.", dateFormat: "yyyy-mm-dd" }
) => {
  const udf = stmt.value;
  const args = [];
  for (let i = 0; i < udf.parameters.length; i++) {
    const argName = udf.parameters[i].name;
    args.push(evalRpn("¿" + argName, vars, formats, false, {}));
  }
  const funcResult = evalCustomFunction(udf, args, formats, false, {});
  if (funcResult.dtype === dt.ERROR) {
    stmt.error = true;
    stmt.tex = "\\textcolor{firebrick}{\\text{" + funcResult.value + "}}";
    stmt.value = null;
    stmt.dtype = dt.ERROR;
  } else {
    stmt.resultdisplay = funcResult.value;
    delete stmt.resultdisplay.temp;
  }
  return stmt
};

const evaluate = (
  stmt,
  vars,
  formats = { decimalFormat: "1,000,000.", dateFormat: "yyyy-mm-dd" }
) => {
  stmt.tex = stmt.template ? stmt.template : "";
  stmt.alt = stmt.altTemplate ? stmt.altTemplate : "";
  const isUnitAware = /\?\?|!!|%%|@@|¡¡/.test(stmt.resulttemplate);

  const formatSpec = vars.format ? vars.format.value : "h15";

  if (stmt.tex.indexOf("〖") > -1) {
    const eqnWithVals = plugValsIntoEcho(stmt.tex, vars, isUnitAware, formatSpec, formats);
    if (eqnWithVals.dtype && eqnWithVals.dtype === dt.ERROR) {
      const [newStmt, _] = errorResult(stmt, eqnWithVals);
      return newStmt
    } else {
      stmt.tex = eqnWithVals;
    }
  }

  if (stmt.rpn) {
    let oprnd = evalRpn(stmt.rpn, vars, formats, isUnitAware);
    if (oprnd.dtype === dt.ERROR) { [stmt, oprnd] = errorResult(stmt, oprnd); return stmt}
    let result
    ;[stmt, result] = conditionResult(stmt, oprnd, isUnitAware);
    if (stmt.error) { return stmt }
    const assert = vars.assert ? vars.assert : null;
    stmt = formatResult(stmt, result, formatSpec, formats, assert, isUnitAware);
  }
  return stmt
};

const numberRegEx$2 = new RegExp(Rnl.numberPattern);
const matrixRegEx = /^[([] *(?:(?:-?[0-9.]+|"[^"]+"|true|false) *[,;\t]? *)+[)\]]/;
/* eslint-disable max-len */

const numStr = "(-?(?:0x[0-9A-Fa-f]+|[0-9]+(?: [0-9]+\\/[0-9]+|(?:\\.[0-9]+)?(?:e[+-]?[0-9]+|%)?)))";
const nonNegNumStr = "(0x[0-9A-Fa-f]+|[0-9]+(?: [0-9]+\\/[0-9]+|(?:\\.[0-9]+)?(?:e[+-]?[0-9]+|%)?))";
const complexRegEx = new RegExp("^" + numStr + "(?: *([+-]) *(?: j *" + nonNegNumStr + "|" + nonNegNumStr + " *∠" + numStr + "(°)?))");
// const complexRegEx = /^(number)(?: *([+-]) *(non-negative number) *j(number)(°)?)/
/* eslint-enable max-len */
// Capturing groups:
//    [1] First number, either a in a ± b im, or r in r∠θ
//    [2] + or -. Gives the sign of the imaginary part in an a ± b im.
//    [3] b, the imaginary part in an a ± b im expression
//    [4] theta, the argument (phase angle ) of an r∠θ expression
//    [5] °, optional trailing degree sign in an r∠θ expression

const unitFromString = str => {
  if (str.length === 0) { return ["", ""] }
  const unitName = str.replace(/'/g, "").trim();
  const unit = unitFromUnitName(unitName);
  const unitDisplay = (unit.dtype && unit.dtype === dt.ERROR)
    ? ""
    : unitTeXFromString(unitName);
  return [unit, unitDisplay]
};

const literalWithUnit = (oprnd, tex, unitStr) => {
  let unit = (oprnd.dtype & dt.RATIONAL) ? { expos: allZeros } : null;
  let unitDisplay = "";
  let value = oprnd.value;
  if (unitStr.length > 0) {
    [unit, unitDisplay] = unitFromString(unitStr);
    if (unit.dtype && unit.dtype === dt.ERROR) {
      return [0, null, dt.ERROR, ""]
    }
    value = oprnd.dtype === dt.RATIONAL
      ? {
        plain: oprnd.value,
        inBaseUnits: Rnl.multiply(Rnl.add(oprnd.value, unit.gauge), unit.factor)
      }
      : {
        plain: oprnd.value,
        inBaseUnits: Matrix.convertToBaseUnits(oprnd, unit.gauge, unit.factor)
      };
  }
  let dtype = oprnd.dtype;
  if (unitDisplay.length > 0) {
    dtype += dt.QUANTITY;
    return [value, unit, dtype, tex + "\\," + unitDisplay]
  } else {
    return [value, unit, dtype, tex]
  }
};

const valueFromLiteral = (str, name, formats) => {
  // Read a literal string and return a value
  // The return should take the form: [value, unit, dtype, resultDisplay]

  if (/^[({[].* to /.test(str)) {
    // str defines a quantity distribution, (a to b). That is handled by calculation.js.
    // This is not a valid literal.
    return [0, null, dt.ERROR, ""]

  } else if (str === "true" || str === "false") {
    return [Boolean(str), null, dt.BOOLEAN, `\\mathord{\\text{${str}}}`]

  } else if (str.length > 3 && str.slice(0, 3) === '"""') {
    // str contains a macro
    return [str.slice(3, -3), undefined, dt.MACRO, ""]

  } else if (/^\x22.+\x22/.test(str)) {
    // str contains text between quotation marks
    if (name === "format") {
      return validateFormatSpec(str.slice(1, -1).trim())
    } else {
      const tex = parse$1(str, formats);
      return [str.slice(1, -1), undefined, dt.STRING, tex]
    }

  } else if (matrixRegEx.test(str)) {
    // We're processing a matrix
    const matrixStr = matrixRegEx.exec(str)[0];
    const [tex, rpn, _] = parse$1(matrixStr, formats, true);
    const oprnd = evalRpn(rpn, {}, formats, false, {});
    const unitStr = str.slice(matrixStr.length).trim();
    return literalWithUnit(oprnd, tex, unitStr)

  } else if (/^``/.test(str)) {
    // A TSV between double back ticks.
    // Read the TSV into a data frame.
    const pos = str.indexOf("``", 2);
    const tsv = tablessTrim(str.slice(2, pos));
    const oprnd = DataFrame.dataFrameFromTSV(tsv);
    if (oprnd.dtype === dt.DATAFRAME) {
      return [oprnd.value, oprnd.unit, dt.DATAFRAME,
        DataFrame.display(oprnd.value, "h3", formats.decimalFormat)]
    } else {
      // It's a Hurmet Map
      const unitStr = str.slice(pos + 2).trim();
      let unit;
      let unitDisplay = "";
      if (unitStr.length > 0) {
        [unit, unitDisplay] = unitFromString(unitStr);
        if (unit.dtype && unit.dtype === dt.ERROR) { return [0, null, dt.ERROR, ""] }
        oprnd.unit = unit;
        oprnd.dtype = dt.MAP + dt.RATIONAL + dt.QUANTITY;
        oprnd.value.data = {
          plain: oprnd.value.data,
          inBaseUnits: map.convertToBaseUnits(oprnd.value.data, unit.gauge, unit.factor)
        };
      }
      return [oprnd.value, unit, oprnd.dtype,
        DataFrame.display(oprnd.value, "h3", formats.decimalFormat) + "\\;" + unitDisplay]
    }

  } else if (complexRegEx.test(str)) {
    // str is a complex number.
    const resultDisplay = parse$1(str, formats);
    const parts = str.match(complexRegEx);
    let realPart;
    let imPart;
    if (parts[3]) {
      // a + b im expression
      realPart = Rnl.fromString(parts[1]);
      imPart = Rnl.fromString(parts[3]);
      if (parts[2] === "-") { imPart = Rnl.negate(imPart); }
    } else {
      // r∠θ expression
      const r = Rnl.fromString(parts[1]);
      let theta = Rnl.fromString(parts[4]);
      if (parts[5]) { theta = Rnl.divide(Rnl.multiply(theta, Rnl.pi), Rnl.fromNumber(180)); }
      realPart = Rnl.multiply(r, Rnl.fromNumber(Math.cos(Rnl.toNumber(theta))));
      imPart = Rnl.multiply(r, Rnl.fromNumber(Math.sin(Rnl.toNumber(theta))));
    }
    return [[realPart, imPart], allZeros, dt.COMPLEX, resultDisplay]

  } else if (dateRegEx$1.test(str)) {
    const rnlDate = [BigInt(dateInSecondsFromIsoString(str)), BigInt(1)];
    const dateTex = formatDate(rnlDate, formats.dateFormat);
    return [rnlDate, { expos: [0, 0, 1, 0, 0, 0, 0, 0] }, dt.DATE, dateTex]

  } else {
    const match = numberRegEx$2.exec(str);
    if (match) {
      // str begins with a number.
      const numStr = match[0];
      const unitStr = str.slice(numStr.length).trim();
      const [tex, rpn, _] = parse$1(numStr, formats, true);
      const oprnd = evalRpn(rpn, {}, formats, false, {});
      return literalWithUnit(oprnd, tex, unitStr)

    } else {
      // TODO: Preceding currency symbol, e.g., $25.20
      return [0, null, dt.ERROR, ""]
    }
  }
};

const isValidIdentifier = /^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;
const keywordRegEx = /^(if|elseif|else|return|throw|while|for|break|print|end)(\u2002|\b)/;
const drawCommandRegEx = /^(title|frame|view|axes|grid|stroke|strokewidth|strokedasharray|fill|fontsize|fontweight|fontstyle|fontfamily|marker|line|path|plot|curve|rect|circle|ellipse|arc|text|dot|leader|dimension)\b/;
const leadingSpaceRegEx$1 = /^[\t ]+/;
const oneLinerRegEx = /^( *)if ([^\n`]+) +(return|throw|print|break)\b([^\n]+)?(?: end)? *\n/gm;

// If you change functionRegEx, then also change it in mathprompt.js.
// It isn't called from there in order to avoid duplicating Hurmet code inside ProseMirror.js.
const functionRegEx$1 = /^function (?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*\(/;
const moduleRegEx = /^module ([A-Za-z][A-Za-z0-9]*)/;
const drawRegEx = /^draw\(/;
const startSvgRegEx = /^startSvg\(\)/;
const lexRegEx = /"[^"]*"|``.*|`[^`]*`|'[^']*'|#|[^"`'#]+/g;

const testForStatement = str => {
  const pos = str.indexOf("=");
  if (pos === -1) { return false }
  const leadStr = str.slice(0, pos).replace(leadingSpaceRegEx$1, "").trim();
  if (isValidIdentifier.test(leadStr)) { return true }
  if (leadStr.indexOf(",") === -1) { return false }
  let result = true;
  const arry = leadStr.split(",");
  arry.forEach(e => {
    if (!isValidIdentifier.test(e.trim())) { result = false; }
  });
  return result
};

const stripComment = str => {
  // Strip the comment, if any, from the end of a code line.
  const matches = arrayOfRegExMatches(lexRegEx, str);
  for (let i = 0; i < matches.length; i++) {
    if (matches[i].value === "#") {
      str = str.slice(0, matches[i].index);
      break
    }
  }
  return str.trim()
};

const scanModule = (str, formats) => {
  // Scan the code and break it down into individual lines of code.
  // Assemble the lines into functions and assign each function to parent.
  const parent = Object.create(null);

  // Expand one-liners into if ... end blocks.
  str = str.replace(oneLinerRegEx, "$1if\u2002$2\n$1    $3\u2002$4\n$1end\n");

  // Statements end at a newline.
  const lines = str.split(/\r?\n/g);

  for (let i = 0; i < lines.length; i++) {
    // Get a single line of code and strip off any comments.
    const line = stripComment(lines[i]);
    if (line.length === 0) { continue }

    if (functionRegEx$1.test(line) || drawRegEx.test(line)) {
      // This line starts a new function.
      const [funcObj, endLineNum] = scanFunction(lines, formats, i);
      if (funcObj.dtype && funcObj.dtype === dt.ERROR) { return funcObj }
      parent[funcObj.name] = funcObj;
      i = endLineNum;
    } else if (testForStatement(line)) {
      // This line starts a Hurmet assignment.
      const [stmt, endLineNum] = scanAssignment(lines, formats, i);
      parent[stmt.name] = stmt;
      i = endLineNum;
    }
  }
  return { value: parent, unit: null, dtype: dt.MODULE }

};

const handleTSV = (expression, lines, startLineNum) => {
  for (let i = startLineNum + 1; i < lines.length; i++) {
    const line = tablessTrim(lines[i]);
    if (line.length === 0) { continue }
    expression += "\n" + line;
    if (line.slice(-2) === "``") { return [expression, i] }
  }
};

const scanFunction = (lines, formats, startLineNum) => {
  const line1 = stripComment(lines[startLineNum]);
  let isDraw = line1.charAt(0) === "d";
  const posParen = line1.indexOf("(");
  let functionName = "";
  if (isDraw) {
    functionName = "draw";
  } else {
    const posFn = line1.indexOf("function");
    functionName = line1.slice(posFn + 8, posParen).trim();
  }

  const parameterString =  line1.slice(posParen + 1, -1).trim();
  const parameterSplit = parameterString.length === 0 ? [] : parameterString.split(/ *[,;] */g);
  const parameters = [];
  for (const param of parameterSplit) {
    const parts = param.split(/ *= */);
    const name = parts[0];
    let defaultVal = { name, value: null, dtype: null };
    if (parts[1]) {
      const [value, unit, dtype, resultDisplay] = valueFromLiteral(parts[1], "", formats);
      defaultVal = { name, value, unit, dtype, resultDisplay };
    }
    parameters.push({ name, default: defaultVal });
  }

  const funcObj = {
    name: functionName,
    dtype: isDraw ? dt.DRAWING : dt.MODULE,
    parameters,
    statements: []
  };

  const stackOfCtrls = [];
  let expression = "";
  let prevLineEndedInContinuation = false;
  let prevLine = "";
  let name = "";
  let isStatement = false;

  let j = startLineNum;
  for (let i = startLineNum + 1; i < lines.length; i++) {
    j += 1;
    let line = stripComment(lines[i]);
    if (line.length === 0) { continue }

    if (prevLineEndedInContinuation) {
      // Check if the previous character is a semi-colon just before a matrix literal closes.
      const lastChar = prevLine.slice(-1);
      line = lastChar === ";" && "})]".indexOf(line.charAt(0)) > -1
        ? prevLine.slice(0, -1).trim() + line
        : lastChar === ";" || lastChar === ","
        ? prevLine + " " + line
        : prevLine + line;
    }

    // Line continuation characters are: { ( [ , ; + -
    if (/[{([,;]$/.test(line)) {
      prevLineEndedInContinuation = true;
      prevLine = line;
      continue
    } else if (lines.length > i + 1 && /^\s*[+\-)\]}]/.test(lines[i + 1])) {
      prevLineEndedInContinuation = true;
      prevLine = line;
      continue
    }

    let isFromOneLiner = false;
    const keyword = keywordRegEx.exec(line);
    if (keyword) {
      name = keyword[1];
      if (keyword[2]) { isFromOneLiner = true; }
      expression = line.slice(name.length).trim();
      if (expression.length > 0 && /^``/.test(expression)) {
        [expression, i] = handleTSV(expression, lines, i);
      }
    } else if (isDraw && drawCommandRegEx.test(line)) {
      name = "svg";
      expression = line.indexOf(" ") === -1
        ? line + "(svg)"
        : line.replace(" ", "(svg, ") + ")";
      isStatement = true;
    } else {
      if (testForStatement(line)) {
        // We have an "=" assignment operator.
        const posEq = line.indexOf("=");
        name = line.slice(0, posEq - 1).trim();
        expression = line.slice(posEq + 1).trim();
        if (/^``/.test(expression)) { [expression, i] = handleTSV(expression, lines, i); }
        if (startSvgRegEx.test(expression)) { isDraw = true; }
        isStatement = true;
      } else {
        // TODO: We shouldn't get here. Write an error.
        return [errorOprnd("FUNC_LINE", functionName + ", line " + (j + 1) + "\n" + line), i]
      }
    }
    if (isFromOneLiner) { j -= 1; }
    let rpn = "";
    let _;
    if (expression) {
      [, rpn, _] = parse$1(expression, formats, true);
      if (name === "for") {
        rpn = rpn.replace(/\u00a0in\u00a0/, "\u00a0").replace(/\u00a0in$/, "");
      }
    }
    const stype = isStatement ? "statement" : name;
    if (isStatement && /[,;]/.test(name)) {
      name = name.split(/[,;]/).map(e => e.trim());
    }
    funcObj.statements.push({ name, rpn, stype });
    if (stype === "if" || stype === "while" || stype === "for") {
      stackOfCtrls.push({ type: stype, statementNum: funcObj.statements.length - 1 });
    } else if (stype === "end") {
      if (stackOfCtrls.length === 0) {
        // Finished the current function.
        if (isDraw) {
          funcObj.statements.splice(-1, 0, { name: "return", rpn: "¿svg", stype: "return" });
        }
        return [funcObj, i]
      }
      const ctrl = stackOfCtrls[stackOfCtrls.length - 1];
      funcObj.statements[ctrl.statementNum].endOfBlock = funcObj.statements.length - 1;
      stackOfCtrls.pop();
    }

    // Reset for next statement
    isStatement = false;
    prevLineEndedInContinuation = false;
    prevLine = "";
    name = "";
    expression = "";
  }
  return [errorOprnd("END_MISS", functionName), 0]
};

const scanAssignment = (lines, formats, iStart) => {
  let prevLineEndedInContinuation = false;
  let str = "";
  let iEnd = iStart;
  for (let i = iStart; i < lines.length; i++) {
    const line = stripComment(lines[i]);
    if (line.length === 0) { continue }

    if (prevLineEndedInContinuation) {
      // Check if the previous character is a semi-colon just before a matrix literal closes.
      str = str.slice(-1) === ";" && "})]".indexOf(line.charAt(0)) > -1
        ? str.slice(0, -1).trim() + line
        : str + line;
    } else {
      str = line;
    }

    // Line continuation characters are: { ( [ , ; + -
    if (/[{([,;]$/.test(str)) {
      prevLineEndedInContinuation = true;
    } else if (lines.length > i + 1 && /^\s*[+\-)\]}]/.test(lines[i + 1])) {
      prevLineEndedInContinuation = true;
    } else {
      iEnd = i;
      break
    }
  }

  const posEquals = str.indexOf("=");
  let name = str.slice(0, posEquals).trim();
  if (/[,;]/.test(name)) {
    name = name.split(/[,;]/).map(e => e.trim());
  }
  let trailStr = str.slice(posEquals + 1).trim();
  if (trailStr.length > 3 && trailStr.slice(0, 3) === '"""') {
    // We're at a macro, which extends beyond normal line endings.
    let j = iEnd;
    let pos = trailStr.indexOf('"""', 3);
    while (pos < 0 && j < lines.length - 1) {
      j += 1;
      trailStr += "\n" + lines[j];
      pos = trailStr.indexOf('"""', 3);
    }
    iEnd = j;
  }
  const [value, unit, dtype, resultDisplay] = valueFromLiteral(trailStr, name, formats);
  const stmt = { name, value, unit, dtype, resultDisplay };
  return [stmt, iEnd]
};

/*  compile.js
 *
 *  This module is called when: (1) an author submits a Hurmet calculation dialog box, or
 *  (2) when a new document is opened, or (3) when recalculate-all is called.
 *  Here we do some preparation in a calculation cell prior to calculation.
 *
 *  This module does NOT calculate the result of an expression. It stops just short of that.
 *  How do we choose where to draw the line between tasks done here and tasks done later?
 *  We do as much here as we can without knowing the values that other cells have assigned
 *  to variables. The goal is to minimize the amount of work done by each dependent cell
 *  when an author changes an assigned value.  Later, calculation updates will not have to
 *  repeat the work done in this module, so updates will be faster.
 *
 *  Variable inputStr contains the string that an author wrote into mathPrompt().
 *
 *  From that entry this module will:
 *    1. Determine the name of the cell, as in "x" from "x = 12"
 *    2. Parse the entry string into TeX, to be passed later to Temml for rendering.
 *    3. If the input asks for a calculation:
 *       a. Parse the expression into an echo string (in TeX) with placeholders that will be
 *          filled in later with values when the calculation is done.
 *       b. Compile the expression into RPN (postfix) to be passed later to evaluateRPN().
 *       c. Process the unit of measure, if any, of the result. Save it for later calculation.
 *    4. If an assigned value is static, not dynamically calculated, find its value.
 *    5. Append all the display strings together.
 *    6. Return the result. Hurmet will attach it to ProseMirror "attrs" of that node.
 */

const containsOperator = /[+\-×·*∘⌧/^%‰&√!¡|‖&=<>≟≠≤≥∈∉⋐∧∨⊻¬]|\xa0(function|mod|\\atop|root|sum|abs|cos|sin|tan|acos|asin|atan|sec|csc|cot|asec|acsc|acot|exp|log|ln|log10|log2|cosh|sinh|tanh|sech|csch|coth|acosh|asinh|atanh|asech|acsch|acoth|gamma|Γ|lgamma|logΓ|lfact|cosd|sind|tand|acosd|asind|atand|secd|cscd|cotd|asecd|acscd|acotd|real|imag|angle|Char|round|sqrt|sign|\?{}|%|⎾⏋|⎿⏌|\[\]|\(\))\xa0/;
const mustDoCalculation = /^(``.+``|[$$£¥\u20A0-\u20CF]?(\?{1,2}|@{1,2}|%{1,2}|!{1,2})[^=!(?@%!{})]*)$/;
const assignDataFrameRegEx = /^[^=]+=\s*``[\s\S]+``\s*$/;
const currencyRegEx = /^[$£¥\u20A0-\u20CF]/;
const matrixOfNames = /^[([](?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*[,;].+[)\]]$/;
const isKeyWord = /^(π|true|false|root|if|else|elseif|and|or|otherwise|mod|for|while|break|return|throw)$/;
const testRegEx = /^(@{1,2})test /;

const shortcut = (str, formats) => {
  // No calculation in str. Parse it just for presentation.
  const tex = parse$1(str, formats);
  return { entry: str, tex, alt: str }
};

const compile = (
  inputStr,
  formats = { decimalFormat: "1,000,000.", dateFormat: "yyyy-mm-dd" }
) => {
  let leadStr = "";
  let mainStr = "";
  let trailStr = "";
  let isCalc = false;
  let suppressResultDisplay = false;
  let displayResultOnly = false;
  let omitEcho = false;
  let mustAlign = false;
  let posOfFirstEquals = 0;
  let expression = "";
  let echo = "";
  let rpn = "";
  let dependencies = [];
  let resultDisplay = "";
  let name = "";
  let leadsWithCurrency = false;
  let value;
  let unit;
  let dtype;
  let str = "";

  const isModule = moduleRegEx.test(inputStr);
  const isDraw = drawRegEx.test(inputStr);
  if (functionRegEx$1.test(inputStr) || isDraw || isModule) {
    // This cell contains a custom function.
    let name = "";
    if (isDraw) {
      name = "draw";
    } else if (isModule) {
      name = moduleRegEx.exec(inputStr)[1].trim();
    } else if (!isModule) {
      const posFn = inputStr.indexOf("function");
      const posParen = inputStr.indexOf("(");
      name = inputStr.slice(posFn + 8, posParen).trim();
    }
    const module = scanModule(inputStr, formats);
    const isError = module.dtype && module.dtype === dt.ERROR;
    if (isError) {
      // eslint-disable-next-line no-alert
      window.alert(module.value);
    }
    const attrs = {
      entry: inputStr,
      name,
      value: (isError || isModule) ? module.value : module.value[name],
      // TODO: what to do with comma decimals?
      resultdisplay: "\\text{" + name + "}",
      dtype: isError ? dt.ERROR : name === "draw" ? dt.DRAWING : dt.MODULE,
      error: isError
    };
    return attrs
  }

  str = inputStr;

  if (testRegEx.test(inputStr)) {
    str = str.replace(testRegEx, "").trim();
    const [_, rpn, dependencies] = parse$1(str, formats, true);
    const resulttemplate = testRegEx.exec(inputStr)[1];
    return { entry: inputStr, template: "", rpn, dependencies, resulttemplate,
      altresulttemplate: resulttemplate, resultdisplay: "" }
  }

  const isDataFrameAssigment = assignDataFrameRegEx.test(str);
  const posOfLastEquals = isDataFrameAssigment
    ? str.indexOf("=") + 1
    : str.lastIndexOf("=") + 1;

  if (posOfLastEquals > 1) {
    // input has form:  mainStr = trailStr
    mainStr = str.substring(0, posOfLastEquals - 1).replace(/ +$/, "");
    if (mainStr.length > 0 && /;\s*$/.test(mainStr)) {
      mustAlign = true;
      mainStr = mainStr.replace(/;\s*$/, "");
    }
    mainStr = mainStr.trim();
    trailStr = str.substring(posOfLastEquals).trim();

    if (mustDoCalculation.test(trailStr)) {
      // trailStr contains a ? or a @ or a % or a !. In other words,
      // input has form:  mainStr = something [?@%!] something
      // The [?@%!] signals that the author wants a calculation done.
      isCalc = true;

      // A ! tells us to calculate and save the result, but to NOT display the result.
      suppressResultDisplay = trailStr.indexOf("!") > -1;

      // A @ tells us to display only the result.
      displayResultOnly = trailStr.indexOf("@") > -1;

      omitEcho = trailStr.indexOf("%") > -1;

      posOfFirstEquals = mainStr.indexOf("=") + 1;
      if (posOfFirstEquals) {
        // input has form:  leadStr = something = trailStr
        leadStr = mainStr.slice(0, posOfFirstEquals - 1).trim();

        // Input has form:  name = expression = trailStr, or
        //                  name1, name2, = expression = trailStr
        expression = mainStr.substring(posOfFirstEquals).trim();
        if (matrixOfNames.test(leadStr)) { leadStr = leadStr.slice(1, -1).trim(); }
        if (/[,;]/.test(leadStr)) {
          const potentialIdentifiers = leadStr.split(/[,;]/);
          for (let i = 0; i < potentialIdentifiers.length; i++) {
            const candidate = potentialIdentifiers[i].trim();
            if (isKeyWord.test(candidate) || !isValidIdentifier$1.test(candidate)) {
              // leadStr is not a list of valid identifiers.
              // So this isn't a valid calculation statement. Let's finish early.
              return shortcut(str, formats)
            }
          }
          // multiple assignment.
          name = potentialIdentifiers.map(e => e.trim());

        } else {
          if (isValidIdentifier$1.test(leadStr) && !isKeyWord.test(leadStr)) {
            name = leadStr;
          } else {
            // The "=" sign is inside an expression. There is no lead identifier.
            // This statement does not assign a value to a variable. But it may do a calc.
            // input has form:  expression = trailStr
            expression = mainStr;
          }
        }
      } else {
        // This calculation string contains only one "=" character.
        // input has form:  expression = trailStr
        expression = mainStr;
      }
    } else if (isDataFrameAssigment) {
      name = mainStr;
      expression = trailStr;
    } else  if (isValidIdentifier$1.test(mainStr) && !isKeyWord.test(mainStr)) {
      // No calculation display selector is present,
      // but there is one "=" and a valid idendtifier.
      // It may be an assignment statement.
      // input has form:  name = trailStr
      name = mainStr;
      if (trailStr === "") {
        const tex = parse$1(str, formats);
        return { entry: str, tex, alt: str }
      }
    } else {
      // input has form:  mainStr = trailStr.
      // It almost works as an assignment statment, but mainStr is not a valid identifier.
      // So we'll finish early.
      return shortcut(str, formats)
    }
  } else {
    // str contains no "=" character. Let's fnish early.
    return shortcut(str, formats)
  }

  if (expression.length > 0) {
    // The author may want a calculation done on the expression.
    if (/^\s*fetch\(/.test(expression)) {
      // fetch() functions are handled in updateCalculations.js, not here.
      // It's easier from there to send a fetch() callback to a ProseMirror transaction.
      echo = "";

    } else {
      // Parse the expression. Stop short of doing the calculation.
      [echo, rpn, dependencies] = parse$1(expression, formats, true);

      // Shoulld we display an echo of the expression, with values shown for each variable?
      if (suppressResultDisplay || displayResultOnly || echo.indexOf("〖") === -1
          || /\u00a0for\u00a0/.test(rpn)) {
        // No.
        echo = "";
      } else if (omitEcho) {
        echo = "";
      } else {
        // The expression calls a variable.
        // If it also contains an operator or a function, then we need to show the echo.
        if (containsOperator.test("\xa0" + rpn + "\xa0")) {
          echo = "\\textcolor{#0000ff}{" + echo + "}";
        } else {
          echo = "";
        }
      }
    }
  }

  // Now let's turn our attention from the expression to the trailStr.
  if (currencyRegEx.test(trailStr)) {
    leadsWithCurrency = true;
    unit = trailStr.charAt(0);
  }

  if (isCalc) {
    // trailStr contains a display selector.
    value = null;

    if (!leadsWithCurrency) {
      // Check for a unit, even if it isn't a unit-aware calculation
      unit = trailStr.replace(/[?@%!']/g, "").trim();
    }

    if (suppressResultDisplay) {
      resultDisplay = trailStr;
    } else {
      if (unit) {
        resultDisplay = trailStr.trim().replace(/([^ ?!@%]+)$/, "'" + "$1" + "'");
        resultDisplay = parse$1(resultDisplay, formats).replace(/\\%/g, "%").replace("@ @", "@@");
      } else {
        resultDisplay = parse$1(trailStr, formats).replace(/\\%/g, "%").replace("@ @", "@@");
      }
      resultDisplay = resultDisplay.replace(/\\text\{(\?\??|%%?)\}/, "$1");
      resultDisplay = resultDisplay.replace(/([?%]) ([?%])/, "$1" + "$2");
    }

  } else {
    // trailStr may be a static value in an assignment statement.
    // Check if trailStr is a valid literal.
    [value, unit, dtype, resultDisplay] = valueFromLiteral(trailStr, name, formats);

    if (dtype === dt.ERROR) { return shortcut(str, formats) }
    rpn = "";
  }

  // Assemble the equation to display
  let eqn = "";
  let altEqn = "";
  if (!displayResultOnly) {
    eqn = parse$1(mainStr, formats);
    if (mustAlign) {
      eqn = "\\begin{aligned}" + eqn;
      const pos = eqn.indexOf("=");
      if (pos !== -1) {
        eqn = eqn.slice(0, pos) + "&" + eqn.slice(pos);
      }
    }
    const alignChar = mustAlign ? "\\\\ &" : "";
    altEqn = mainStr;
    if (echo.length > 0 && !omitEcho) {
      eqn += ` ${alignChar}= ` + echo;
    }
    if (!suppressResultDisplay) {
      eqn += " " + (mustAlign ? "\\\\&" : "") + "= " + resultDisplay;
      altEqn += " = " + trailStr;
    }
    if (mustAlign) { eqn += "\\end{aligned}"; }
  }

  // Populate the object to be returned.
  // It will eventually be attached to ProseMirror schema attrs, so call it "attrs".
  const attrs = {
    entry: str,
    template: eqn,
    altTemplate: altEqn,
    resultdisplay: resultDisplay,
    dtype: dtype,
    error: false
  };

  if (name) { attrs.name = name; }
  if (isCalc) {
    attrs.resulttemplate = resultDisplay;
    attrs.altresulttemplate = trailStr;
  } else {
    attrs.tex = eqn;
    attrs.alt = altEqn;
  }
  if (rpn) { attrs.rpn = rpn; }
  if (dependencies.length > 0) { attrs.dependencies = dependencies; }
  if (value) { attrs.value = value; }
  if (unit) {
    if (rpn && !attrs.value) {
      attrs.unit = typeof unit === "string"
        ? unitFromUnitName(unit)
        : { factor: 1, gauge: 0, expos: allZeros };
    } else {
      attrs.unit = Array.isArray(unit) ? { expos:  unit } : unit;
    }
  }

  return attrs
};

// This function is not used by the hurmet.org page.
// It is provided for use by unit tests and by the demo box in the manual page.
// If you are looking for the app's main calculation module, try evaluate.js.
const calculate = (
  entry,
  vars = {},
  inDraftMode = false,
  formats = { decimalFormat: "1,000,000.", dateFormat: "yyyy-mm-dd" }
) => {
  let attrs = compile(entry, formats);
  if (attrs.rpn) {
    attrs = evaluate(clone(attrs), vars, formats);
  } else if (attrs.dtype && attrs.dtype === dt.DRAWING) {
    attrs = evaluateDrawing(attrs, vars, formats);
  }
  if (attrs.name) {
    insertOneHurmetVar(vars, attrs);
  }
  return attrs.dtype && attrs.dtype === dt.DRAWING
   ? attrs
   : inDraftMode
   ? attrs.alt
   : attrs.tex
};

/* eslint-disable */
// ::- A specification for serializing a ProseMirror document as
// Markdown/CommonMark text.
class MarkdownSerializer {
  // :: (Object<(state: MarkdownSerializerState, node: Node, parent: Node, index: number)>, Object)
  // Construct a serializer with the given configuration. The `nodes`
  // object should map node names in a given schema to function that
  // take a serializer state and such a node, and serialize the node.
  //
  // The `marks` object should hold objects with `open` and `close`
  // properties, which hold the strings that should appear before and
  // after a piece of text marked that way, either directly or as a
  // function that takes a serializer state and a mark, and returns a
  // string. `open` and `close` can also be functions, which will be
  // called as
  //
  //     (state: MarkdownSerializerState, mark: Mark,
  //      parent: Fragment, index: number) → string
  //
  // Where `parent` and `index` allow you to inspect the mark's
  // context to see which nodes it applies to.
  //
  // Mark information objects can also have a `mixable` property
  // which, when `true`, indicates that the order in which the mark's
  // opening and closing syntax appears relative to other mixable
  // marks can be varied. (For example, you can say `**a *b***` and
  // `*a **b***`, but not `` `a *b*` ``.)
  //
  // To disable character escaping in a mark, you can give it an
  // `escape` property of `false`. Such a mark has to have the highest
  // precedence (must always be the innermost mark).
  //
  // The `expelEnclosingWhitespace` mark property causes the
  // serializer to move enclosing whitespace from inside the marks to
  // outside the marks. This is necessary for emphasis marks as
  // CommonMark does not permit enclosing whitespace inside emphasis
  // marks, see: http://spec.commonmark.org/0.26/#example-330
  constructor(nodes, marks) {
    // :: Object<(MarkdownSerializerState, Node)> The node serializer
    // functions for this serializer.
    this.nodes = nodes;
    // :: Object The mark serializer info.
    this.marks = marks;
  }

  // :: (Node, ?Object) → string
  // Serialize the content of the given node to
  // [CommonMark](http://commonmark.org/).
  serialize(content, paths, footnotes, isGFM = false, forSnapshot = false, withResults = false) {
    let state = new MarkdownSerializerState(this.nodes, this.marks, paths, footnotes, isGFM, withResults);
    state.renderContent(content);

    // Write the footnotes
    for (let i = 0; i < state.footnotes.length; i++) {
      state.write("\n[^" + String(i + 1) + "]: ");
      state.renderInline(state.footnotes[i]);
      state.write("\n");
    }
  // Write the link and image paths, unless this is done for a snapshot.
    if (!forSnapshot) {
      for (const [key, value] of state.paths.entries()) {
        state.write("\n[" + key + "]: " + value + "\n");
      }
    }
    return state.out
  }
}

const ampRegEx = /=[^=]*@[^=]*$/;

const hurmetNodes =  {
  blockquote(state, node) {
    state.wrapBlock("> ", null, node, () => state.renderContent(node));
  },
  comment(state, node) {
    if (state.isGFM) {
      state.renderContent(node);
    } else {
      state.wrapBlock("", null, node, () => state.renderContent(node), "comment");
    }
  },
  indented(state, node) {
    if (state.isGFM) {
      state.renderContent(node);
    } else {
      state.wrapBlock("", null, node, () => state.renderContent(node), "indented");
    }
  },
  centered(state, node) {
    if (state.isGFM) {
      state.renderContent(node);
    } else {
       state.wrapBlock("", null, node, () => state.renderContent(node), "centered");
    }
  },
  right_justified(state, node) {
    if (state.isGFM) {
      state.renderContent(node);
    } else {
       state.wrapBlock("", null, node, () => state.renderContent(node), "right_justified");
    }
  },
  boxed(state, node) {
    if (state.isGFM) {
      state.renderContent(node);
    } else {
      state.wrapBlock("", null, node, () => state.renderContent(node), "boxed");
    }
  },
  epigraph(state, node) {
    if (state.isGFM) {
      state.wrapBlock("> ", null, node, () => state.renderContent(node));
    } else {
      state.wrapBlock("> ", null, node, () => state.renderContent(node), "epigraph");
    }
  },
  note(state, node) {
    state.wrapBlock("> ", null, node, () => state.renderContent(node), "note");
  },
  tip(state, node) {
    state.wrapBlock("> ", null, node, () => state.renderContent(node), (state.isGFM ? "note" : "tip"));
  },
  important(state, node) {
    state.wrapBlock("> ", null, node, () => state.renderContent(node), "important");
  },
  warning(state, node) {
    state.wrapBlock("> ", null, node, () => state.renderContent(node), "warning");
  },
  header(state, node) {
    if (state.isGFM) {
      state.renderContent(node);
    } else {
       state.wrapBlock("", "", node, () => state.renderContent(node), "header");
    }
  },
  code_block(state, node) {
    state.write("```" + (node.attrs.params || "") + "\n");
    state.text(node.textContent, false);
    state.ensureNewLine();
    state.write("```");
    state.closeBlock(node);
  },
  heading(state, node) {
    state.write(state.repeat("#", node.attrs.level) + " ");
    state.renderInline(node);
    state.closeBlock(node);
  },
  toc(state, node) {
    state.write(`{.toc start=${node.attrs.start} end=${node.attrs.end}}\n\n`);
  },
  horizontal_rule(state, node) {
    state.write(node.attrs.markup || "--------------------");
    state.closeBlock(node);
  },
  bullet_list(state, node) {
    state.renderList(node, "    ", () => (node.attrs.bullet || "*") + "   ");
  },
  ordered_list(state, node) {
    const start = node.attrs.order || 1;
    const className = state.isGFM ? "decimal" : node.attrs.class;
    let maxW = String(start + node.childCount - 1).length;
    let space = state.repeat(" ", maxW + 2);
    state.renderList(node, space, i => {
      let nStr = className === "decimal"
        ? String(start + i)
        : className === "upper-alpha"
        ? String.fromCodePoint(start + i + 64)  // A-Z
        : String.fromCodePoint(start + i + 96);  // a-z
      return state.repeat(" ", maxW - nStr.length) + nStr + ".  "
    });
    // Write a 2nd blank line after an <ol>, to prevent an adjacent <ol> from
    // continuing the same numbering.
    if (state.delim === "")  { state.write("\n"); }
  },
  list_item(state, node) {
    state.renderContent(node);
  },
  tight_list_item(state, node) {
    state.renderInline(node);
  },
  paragraph(state, node) {
    const prevLength = state.out.length;
    if (node.content.content.length > 0) {
      state.renderInline(node);
    } else {
      state.write("¶");
    }
    if (!state.isGFM) {
      state.out = limitLineLength(state.out, prevLength, state.delim, state.lineLimit);
    }
    state.closeBlock(node);
  },
  table(state, node) {
    state.renderTable(node, state.delim, null, state.isGFM);
    state.closeBlock(node);
  },
  footnote(state, node) {
    const note = node.content;
    state.footnotes.push(note);
    state.write(`[^${state.footnotes.length}]`);
  },
  figure(state, node) {
    let caption;
    if (node.content.content[1].type.name === "table") {
      const figureCaption = node.content.content[0];
      state.write(": ");
      state.renderInline(figureCaption);
      state.closeBlock(figureCaption);
      const L = state.out.length;
      const table = node.content.content[1];
      const float = node.attrs.class ? node.attrs.class.trim() : "auto";
      state.renderTable(table, state.delim, float, state.isGFM);
      state.closeBlock(table);
      // Get rid of the newline between the caption and the table.
      state.out = state.out.slice(0, L) + state.out.slice(L + 1);
    } else {
      if (!state.isGFM) {
        const figureCaption = node.content.content[1];
        const figureState = new MarkdownSerializerState(hurmetNodes, hurmetMarks, this.paths, this.footnotes, false, false);
        figureState.renderInline(figureCaption);
        caption = figureState.out;
      } else {
        caption = node.attrs.alt;
      }
      const ref = getRef(node, state);
      const attrs = node.content.content[0].attrs; // image attributes
      if (node.attrs.class) { attrs.class = node.attrs.class; }
      let path = attrs.src;
      if (!state.isGFM && (attrs.class || attrs.width || attrs.alt)) {
        path += "\n{";
        if (attrs.class) { path += "." + state.esc(attrs.class); }
        if (attrs.width && !isNaN(attrs.width)) { path += " width=" + attrs.width; }
        if (attrs.alt) { path += ' alt="' + state.esc(attrs.alt) + '"'; }
        path += "}";
      }
      // We use reference links and defer the image paths to the end of the document.
      state.paths.set(ref, path);
      if (ref === caption) {
        state.write(`!![${caption}][]\n\n`);
      } else {
        state.write(`!![${caption}][${ref}]\n\n`);
      }
    }
    
  },
  image(state, node) {
    let path = state.esc(node.attrs.src);
    if (!state.isGFM && (node.attrs.class || node.attrs.width || node.attrs.alt)) {
      path += "\n{";
      if (node.attrs.class) { path += "." + state.esc(node.attrs.class); }
      if (node.attrs.width && !isNaN(node.attrs.width)) { path += " width=" + node.attrs.width; }
      if (node.attrs.alt) { path += ' alt="' + state.esc(node.attrs.alt) + '"'; }
      path += "}";
    }
    // We use reference links and defer the image paths to the end of the document.
    const ref = getRef(node, state);
    state.paths.set(ref, path);
    if (node.attrs.alt && ref !== node.attrs.alt) {
      state.write(`![${node.attrs.alt}][${ref}]`);
    } else {
      state.write(`![${ref}][]`);
    }

  },
  hard_break(state, node, parent, index) {
    for (let i = index + 1; i < parent.childCount; i++)
      if (parent.child(i).type != node.type) {
        state.write("\\\n");
        return
      }
  },
  text(state, node) {
    state.text(node.text);
  },
  tex(state, node) {
    const tex = node.attrs.tex.trim();
    writeTex(state, node.attrs.displayMode, !state.close, tex);
  },
  calculation(state, node) {
    let entry = node.attrs.entry.trim().replace(/\n(?: *\n)+/g, "\n").replace(/\n/gm, "\n" + state.delim);
    if (state.isGFM) {
      if (node.attrs.alt && node.attrs.value) {
        if (ampRegEx.test(entry)) {
          // A calculation cell that displays only the result.
          state.write(node.attrs.alt);
        } else {
          writeTex(state, node.attrs.displayMode, !state.close, node.attrs.tex);
        }
      } else {
        // Convert calculation field to TeX
        const tex = parse$1(entry);
        writeTex(state, node.attrs.displayMode, !state.close, tex);
      }
    } else {
      if (node.attrs.entry.slice(0, 5) === "draw(") {
        const ref = getRef(node, state);
        state.paths.set(ref,entry.replace(/\n/g, "\\n"));
        state.write(`![${ref}][]`);
      } else if (state.withResults) {
        const displaySelector = node.attrs.md ? node.attrs.displaySelector : "";
        let md = node.attrs.md ? node.attrs.md : entry;
        if (node.attrs.displayMode) {
          state.write("¢¢" + displaySelector + " " + md + " ¢¢");
        } else {
          const ticks = backticksFor({ text: entry, isText: true }, -1).trim();
          md = "¢" + displaySelector + ticks + " " + md + " " + ticks;
          state.write(md);
        }
      } else if (node.attrs.displayMode) {
        if (!state.close) {
          // We're inside a paragraph.
          state.write("\n" + state.delim + "¢¢" + " " + entry + " ¢¢" + "\n" + state.delim);
        } else {
          state.write("¢¢ " + entry + " ¢¢");
        }
      } else {
        const ticks = backticksFor({ text: entry, isText: true }, -1).trim();
        state.write("¢" + ticks + " " + entry + " " + ticks);
      }
    }
  }
};

const hurmetMarks = {
  em: {open: "_", close: "_", mixable: true, expelEnclosingWhitespace: true},
  strong: {open: "**", close: "**", mixable: true, expelEnclosingWhitespace: true},
  link: {
    open(_state, mark, parent, index) {
      return isPlainURL(mark, parent, index, 1) ? "<" : "["
    },
    close(state, mark, parent, index) {
      if (isPlainURL(mark, parent, index, -1)) {
        return ">"
      } else {
        // We use reference links and defer the image paths to the end of the document.
        const ref = getRef(mark, state);
        state.paths.set(ref, state.esc(mark.attrs.href));
        let display = parent.child(index - 1).text;
        return "][" + (display === ref ? "" : ref) + "]"
      }
    }
  },
  code: {open(_state, _mark, parent, index) { return backticksFor(parent.child(index), -1) },
         close(_state, _mark, parent, index) { return backticksFor(parent.child(index - 1), 1) },
         escape: false},
  superscript: {
    open(state)  { return state.isGFM ? "<sup>" : "^" },
    close(state) { return state.isGFM ? "</sup>" : "^" },
    expelEnclosingWhitespace: true
  },
  subscript: {
    open(state)  { return state.isGFM ? "<sub>" : "~" },
    close(state) { return state.isGFM ? "</sub>" : "~" },
    expelEnclosingWhitespace: true
  },
  strikethru: {open: "~~", close: "~~", mixable: true, expelEnclosingWhitespace: true},
  underline: {open: "<u>", close: "</u>", expelEnclosingWhitespace: true},
  highlight: {open: "<mark>", close: "</mark>", expelEnclosingWhitespace: true}
};

// :: MarkdownSerializer
// A serializer for the schema.
const hurmetMarkdownSerializer = new MarkdownSerializer(hurmetNodes, hurmetMarks, new Map());

function backticksFor(node, side) {
  let ticks = /`+/g, m, len = 0;
  if (node.isText) while (m = ticks.exec(node.text)) len = Math.max(len, m[0].length);
  let result = len > 0 && side > 0 ? " `" : "`";
  for (let i = 0; i < len; i++) result += "`";
  if (len > 0 && side < 0) result += " ";
  return result
}

function isPlainURL(link, parent, index, side) {
  if (!/^\w+:/.test(link.attrs.href)) return false
  let content = parent.child(index + (side < 0 ? -1 : 0));
  if (!content.isText || content.text != link.attrs.href || content.marks[content.marks.length - 1] != link) return false
  if (index == (side < 0 ? 1 : parent.childCount - 1)) return true
  let next = parent.child(index + (side < 0 ? -2 : 1));
  return !link.isInSet(next.marks)
}

const titleRegEx = /\n *title +"([^\n]+)" *\n/;

const getRef = (node, state) => {
  // We use reference links and defer the image paths to the end of the document.
  let ref = node.type.name === "image"
    ? node.attrs.alt
    : node.type.name === "figimg"
    ? node.content.content[0].attrs.alt
    : null;
  if (node.attrs.entry && titleRegEx.test(node.attrs.entry)) {
    // node is a draw environment in a calculation node. Get the title.
    ref = titleRegEx.exec(node.attrs.entry)[1].trim();
  }
  if ((!isNaN(ref)) && Number(ref) % 1 === 0) {
    // ref is an integer. We cannot use it because it might duplicate one of the
    // sequential integers we use for items without a defined ref.
    ref = null;
  }

  // Get the index number of this path
  const num = isNaN(state.paths.size) ? "1" : String(state.paths.size + 1);
  // Now set the final ref
  if (ref) {
    // Determine if ref has already been used
    for (const key of state.paths.keys()) {
      if (key === ref) { return num }
    }
    return ref
  } else {
    return num
  }
};

// Do not line-break on any space that would indicate a heading, list item, etc.
const blockRegEx = /^(?:[>*+-] |#+ |\d+[.)] |[A-B]\. |\-\-\-|```|[iCFHhITWADE]> )/;

function limitLineLength(str, prevLength, delim, limit) {
  let graf = str.slice(prevLength);
  if (graf.length <= limit) { return str }
  if (/``|¢` *(?:function|draw\()/.test(graf)) { return str }

  const leading = "\n" + delim;
  let result = "";
  let i = 0;
  while (graf.length > limit) {
    const posNewLine = graf.indexOf("\n");
    const localLimit = limit - (i > 0 ? leading.length : 0);
    if (posNewLine > -1) {
      let chunk = graf.slice(0, posNewLine + 1);
      while (chunk.length > localLimit && chunk.lastIndexOf(" ", localLimit) > -1) {
        const pos = chunk.lastIndexOf(" ", localLimit);
        result += chunk.slice(0, pos) + "\n";
        chunk = chunk.slice(pos + 1);
      } 
      result += chunk;
      graf = graf.slice(posNewLine + 1);
    } else {
      let pos = graf.lastIndexOf(" ", localLimit);
      if (pos === -1) { break }
      while (blockRegEx.test(graf.slice(pos + 1))) {
        pos = graf.lastIndexOf(" ", pos - 1);
        if (pos === -1) { break }
      }
      if (pos === -1 || (graf.length - pos < 7 && limit === 80)) { break }
      result += (i > 0 ? leading : "") + graf.slice(0, pos);
      graf = graf.slice(pos + 1);
      i += 1;
    }
  }
  result += (i > 0 ?  leading : "") + graf;

  return str.slice(0, prevLength) + result
}

const newlineRegEx = /\n/gm;
const writeTex = (state, displayMode, inParagraph, tex) => {
  tex = tex.replace(newlineRegEx, "\n" + state.delim);
  if (displayMode) {
    if (inParagraph) {
      state.write("\n" + state.delim + "$$ " + tex + " $$" + "\n" + state.delim);
    } else {
      state.write("$$ " + tex + " $$");
    }
  } else {
    if (tex.indexOf("$") > -1) {
      const ticks = backticksFor({ text: tex, isText: true }, -1).trim();
      state.write("$" + ticks + tex + ticks + "$");
    } else {
      state.write("$" + tex + "$");
    }
  }
};

const justifyRegEx = /c(\d)([cr])/g;
const trailNewlineRegEx = /\n+$/;

const colWidthPicker = [0, 80, 50, 35];

// ::- This is an object used to track state and expose
// methods related to markdown serialization. Instances are passed to
// node and mark serialization methods (see `toMarkdown`).
class MarkdownSerializerState {
  constructor(nodes, marks, paths, footnotes, isGFM, withResults) {
    this.nodes = nodes;
    this.marks = marks;
    this.paths = paths;
    this.footnotes = footnotes;
    this.isGFM = isGFM;
    this.withResults = withResults;
    this.delim = this.out = "";
    this.divFence = "";
    this.closed = false;
    this.lineLimit = 80;
  }

  flushClose(size) {
    if (this.closed) {
      if (!this.atBlank()) this.out += "\n";
      if (size == null) size = 2;
      if (size > 1) {
        let delimMin = this.delim;
        let trim = /\s+$/.exec(delimMin);
        if (trim) delimMin = delimMin.slice(0, delimMin.length - trim[0].length);
        for (let i = 1; i < size; i++)
          this.out += delimMin + "\n";
      }
      this.closed = false;
    }
  }

  // :: (string, ?string, Node, ())
  // Render a block, prefixing each line with `delim`, and the first
  // line in `firstDelim`. `node` should be the node that is closed at
  // the end of the block, and `f` is a function that renders the
  // content of the block.
  wrapBlock(delim, firstDelim, node, f, nodeType) {
    let old = this.delim;
    if (nodeType) {
      if (delim.length > 0) {
        if (nodeType) { this.write(`> [!${nodeType.toUpperCase()}]\n`); }
      } else {
        this.divFence += ":::";
        this.write(`${this.divFence} ${nodeType}\n`);
      }
    }
    this.write(firstDelim || delim);
    this.delim += delim;
    f();
    this.delim = old;
    if (nodeType && delim.length === 0) {
      this.out = this.out.replace(trailNewlineRegEx, "") + (`\n${this.delim}${this.divFence}\n`);
      this.divFence = this.divFence.slice(0, -3);
    }
    this.closeBlock(node);
  }

  atBlank() {
    return /(^|\n)$/.test(this.out)
  }

  // :: ()
  // Ensure the current content ends with a newline.
  ensureNewLine() {
    if (!this.atBlank()) this.out += "\n";
  }

  // :: (?string)
  // Prepare the state for writing output (closing closed paragraphs,
  // adding delimiters, and so on), and then optionally add content
  // (unescaped) to the output.
  write(content) {
    this.flushClose();
    if (this.delim && this.atBlank())
      this.out += this.delim;
    if (content) this.out += content;
  }

  // :: (Node)
  // Close the block for the given node.
  closeBlock(node) {
    this.closed = node;
  }

  // :: (string, ?bool)
  // Add the given text to the document. When escape is not `false`,
  // it will be escaped.
  text(text, escape) {
    let lines = text.split("\n");
    for (let i = 0; i < lines.length; i++) {
      var startOfLine = this.atBlank() || this.closed;
      this.write();
      this.out += escape !== false ? this.esc(lines[i], startOfLine) : lines[i];
      if (i != lines.length - 1) this.out += "\n";
    }
  }

  // :: (Node)
  // Render the given node as a block.
  render(node, parent, index) {
    if (typeof parent == "number") throw new Error("!")
    this.nodes[node.type.name](this, node, parent, index);
  }

  // :: (Node)
  // Render the contents of `parent` as block nodes.
  renderContent(parent) {
    parent.forEach((node, _, i) => this.render(node, parent, i));
  }

  // :: (Node)
  // Render the contents of `parent` as inline content.
  renderInline(parent) {
    let active = [], trailing = "";
    let progress = (node, _, index) => {
      let marks = node ? node.marks : [];

      // Remove marks from `hard_break` that are the last node inside
      // that mark to prevent parser edge cases with new lines just
      // before closing marks.
      // (FIXME it'd be nice if we had a schema-agnostic way to
      // identify nodes that serialize as hard breaks)
      if (node && node.type.name === "hard_break")
        marks = marks.filter(m => {
          if (index + 1 == parent.childCount) return false
          let next = parent.child(index + 1);
          return m.isInSet(next.marks) && (!next.isText || /\S/.test(next.text))
        });

      let leading = trailing;
      trailing = "";
      // If whitespace has to be expelled from the node, adjust
      // leading and trailing accordingly.
      if (node && node.isText && marks.some(mark => {
        let info = this.marks[mark.type.name];
        return info && info.expelEnclosingWhitespace
      })) {
        let [_, lead, inner, trail] = /^(\s*)(.*?)(\s*)$/m.exec(node.text);
        leading += lead;
        trailing = trail;
        if (lead || trail) {
          node = inner ? node.withText(inner) : null;
          if (!node) marks = active;
        }
      }

      let inner = marks.length && marks[marks.length - 1], noEsc = inner && this.marks[inner.type.name].escape === false;
      let len = marks.length - (noEsc ? 1 : 0);

      // Try to reorder 'mixable' marks, such as em and strong, which
      // in Markdown may be opened and closed in different order, so
      // that order of the marks for the token matches the order in
      // active.
      outer: for (let i = 0; i < len; i++) {
        let mark = marks[i];
        if (!this.marks[mark.type.name].mixable) break
        for (let j = 0; j < active.length; j++) {
          let other = active[j];
          if (!this.marks[other.type.name].mixable) break
          if (mark.eq(other)) {
            if (i > j)
              marks = marks.slice(0, j).concat(mark).concat(marks.slice(j, i)).concat(marks.slice(i + 1, len));
            else if (j > i)
              marks = marks.slice(0, i).concat(marks.slice(i + 1, j)).concat(mark).concat(marks.slice(j, len));
            continue outer
          }
        }
      }

      // Find the prefix of the mark set that didn't change
      let keep = 0;
      while (keep < Math.min(active.length, len) && marks[keep].eq(active[keep])) ++keep;

      // Close the marks that need to be closed
      while (keep < active.length)
        this.text(this.markString(active.pop(), false, parent, index), false);

      // Output any previously expelled trailing whitespace outside the marks
      if (leading) this.text(leading);

      // Open the marks that need to be opened
      if (node) {
        while (active.length < len) {
          let add = marks[active.length];
          active.push(add);
          this.text(this.markString(add, true, parent, index), false);
        }

        // Render the node. Special case code marks, since their content
        // may not be escaped.
        if (noEsc && node.isText)
          this.text(this.markString(inner, true, parent, index) + node.text +
                    this.markString(inner, false, parent, index + 1), false);
        else
          this.render(node, parent, index);
      }
    };
    parent.forEach(progress);
    progress(null, null, parent.childCount);
  }

  // :: (Node, string, (number) → string)
  // Render a node's content as a list. `delim` should be the extra
  // indentation added to all lines except the first in an item,
  // `firstDelim` is a function going from an item index to a
  // delimiter for the first line of the item.
  renderList(node, delim, firstDelim) {
    this.flushClose();
    node.forEach((child, _, i) => {
      if (child.type.name === "tight_list_item") { this.flushClose(1); }
      this.wrapBlock(delim, firstDelim(i), node, () => this.render(child, node, i));
    });
  }

  paddedCell(str, justify, colWidth) {
    const pad = " ".repeat(colWidth - str.length);
    return justify === "r" ? (pad + str) : (str + pad)
  }

  renderTable(node, delim, float, isGFM) {
    const isSpreadsheet = "dtype" in node.attrs ? node.attrs.dtype === dt.SPREADSHEET : false;
    const rows = node.content.content;
    let numCols = rows[0].content.content.length;
    for (let i = 1; i < rows.length; i++) {
      numCols = Math.max(numCols, rows[i].content.content.length);
    }
    let numRowsInHeading = 0;
    for (let i = 0; i < rows.length; i++) {
      if (rows[i].content.content[0].type.name === "table_header") {
        numRowsInHeading += 1;
      } else {
        break
      }
    }
    const tblClasses = node.attrs.class;
    const justify = new Array(numCols).fill("L"); // default. Will change later.
    let regExResults;
    while ((regExResults = justifyRegEx.exec(tblClasses)) !== null) {
      justify[Number(regExResults[1]) - 1] = regExResults[2];
    }

    // We're going to make three passes thru the table.
    // The first pass will get the content of each cell and load it into an array.
    // To do that, we'll create a temporary MarkdownSerializerState just for the table.
    const table = new Array(rows.length);
    const rowSpan = new Array(rows.length);
    const colSpan = new Array(rows.length);
    for (let i = 0; i < rows.length; i++) {
      table[i] = new Array(numCols).fill("");
      rowSpan[i] = new Array(numCols).fill(1);
      colSpan[i] = new Array(numCols).fill(1);
    }
    const colWidth = new Array(numCols).fill(0);
    const mergedCells = [];
    // Do we need a reStructuredText grid table? Or is a GFM pipe table enough?
    let isRst = !isGFM && numRowsInHeading > 1;
    let tableState = new MarkdownSerializerState(hurmetNodes, hurmetMarks, this.paths,
                                                this.footnotes, this.isGFM, this.withResults);
    tableState.lineLimit = numCols > 3 ? 25 : colWidthPicker[numCols];
    let i = 0;
    let j = 0;
    let jPM = 0;
    while (i < rows.length) {
      while (j < numCols) {
        if (rowSpan[i][j] === 0 || colSpan[i][j] === 0) { j += 1; continue }
        const cell = rows[i].content.content[jPM];
        if (!cell) { colSpan[i][j] = 0; j += 1; continue }
        if (cell.attrs.rowspan > 1) {
          rowSpan[i][j] = cell.attrs.rowspan;
          for (let ii = i + 1; ii < i + cell.attrs.rowspan; ii++) {
            rowSpan[ii][j] = 0;
            colSpan[ii][j] = 0;
          }
        }
        if (cell.attrs.colspan > 1) {
          colSpan[i][j] = cell.attrs.colspan;
          for (let jj = j + 1; jj < j + cell.attrs.colspan; jj++) {
            colSpan[i][jj] = 0;
          }
        }

        if (cell.content.content.length > 0) {
          if (cell.attrs.colspan > 1) {
            mergedCells.push([i, j, jPM]);
          } else {
            const L = tableState.out.length;
            if (isSpreadsheet) {
              tableState.write(cell.content.content[0].attrs.entry);
            } else {
              tableState.renderContent(cell);
            }
            // Each table cell contains an array of strings.
            const cellContent = tableState.out.slice(L).replace(/^\n+/, "").replace(/\n+$/, "").split("\n");
            table[i][j] = cellContent;
            if (cellContent.length > 1 && !isGFM) { isRst = true; }
            // Get width of cell.
            if (colSpan[i][j] === 1) {
              for (let line of table[i][j]) {
                if (line.length > colWidth[j]) {
                  colWidth[j] = line.length;
                }
              }
            }
          }
        }
        j += cell.attrs.colspan;
        jPM += 1;
      }
      i += 1;
      j = 0;
      jPM = 0;
    }

    // Now we know the column widths, so get the horizontally merged cells.
    for (const c of mergedCells) {
      const i = c[0];
      const j = c[1];
      const jPM = c[2];
      const cell = rows[i].content.content[jPM];
      let width = colWidth[j];
      for (let m = 1; m < colSpan[i][j]; m++) { width += colWidth[j + m] + 3; }
      tableState.lineLimit = width;
      const L = tableState.out.length;
      if (isSpreadsheet) {
        tableState.write(cell.content.content[0].attrs.entry);
      } else {
        tableState.renderContent(cell);
      }
      table[i][j] = tableState.out.slice(L).replace(/^\n+/, "").split("\n");
    }

    // The second pass. Pad each cell w/spaces.
    for (let i = 0; i < table.length; i++) {
      for (let j = 0; j < numCols; j++) {
        if (rowSpan[i][j] > 0 && colSpan[i][j] > 0) {
          let width = colWidth[j];
          for (let m = 1; m < colSpan[i][j]; m++) { width += colWidth[j + m] + 3; }
          for (let k = 0; k < table[i][j].length; k++) {
            if (table[i][j][k].indexOf("|") > -1 && !isGFM) { isRst = true; }
            // Pad the line with spaces
            table[i][j][k] += " ".repeat(width - table[i][j][k].length);
          }
        }
      }
    }

    if (mergedCells.length > 0 || tableState.out.indexOf("|") > -1) { isRst = true; }

    // Now the third pass, in which we write output.
    this.write(isRst
      ? gridTable(table, numCols, numRowsInHeading, rowSpan, colSpan, colWidth, justify, delim)
      : pipeTable(table, numCols, colWidth, justify, delim, numRowsInHeading)
    );
    // Write the table's class name and column widths.
    let colWidths = "";
    for (let i = 0; i < rows.length; i++) {
      if (rows[i].content.content.length === numCols) {
        for (const col of rows[i].content.content) {
          const w = col.attrs.colwidth ? col.attrs.colwidth[0] : null;
          colWidths += " " + String(w);
        }
        break
      }
    }
    let className = node.attrs.class.replace(/ c\d+[cr]/g, "").trim();
    if (className.indexOf(" ") > -1) { className = `"${className}"`; }
    const tableName = "name" in node.attrs ? node.attrs.name : "";
    let directive = `\n${delim}{`;
    if (tableName) { directive += `#${tableName} `; } 
    directive += `.${className}`;
    if (float && float === "left" || float === "right") { directive += ` float="${float}"`; }
    directive += ` colWidths="${colWidths.trim()}"}\n`;
    if (!isGFM) { this.write(directive); }
  }

  // :: (string, ?bool) → string
  // Escape the given string so that it can safely appear in Markdown
  // content. If `startOfLine` is true, also escape characters that
  // has special meaning only at the start of the line.
  esc(str, startOfLine) {
    str = str.replace(/([`*\\¢\$<\[_~^])/g, "\\$1");
    if (startOfLine) {
      str = str.replace(/^(\#|:|\-|\*|\+|>)/, "\\$1").replace(/^(\d+|[A-Za-z])\.(?= )/, "$1\\.");
    }
    return str
  }

  quote(str) {
    var wrap = str.indexOf('"') == -1 ? '""' : str.indexOf("'") == -1 ? "''" : "()";
    return wrap[0] + str + wrap[1]
  }

  // :: (string, number) → string
  // Repeat the given string `n` times.
  repeat(str, n) {
    let out = "";
    for (let i = 0; i < n; i++) out += str;
    return out
  }

  // : (Mark, bool, string?) → string
  // Get the markdown string for a given opening or closing mark.
  markString(mark, open, parent, index) {
    let info = this.marks[mark.type.name];
    let value = open ? info.open : info.close;
    return typeof value == "string" ? value : value(this, mark, parent, index)
  }

  // :: (string) → { leading: ?string, trailing: ?string }
  // Get leading and trailing whitespace from a string. Values of
  // leading or trailing property of the return object will be undefined
  // if there is no match.
  getEnclosingWhitespace(text) {
    return {
      leading: (text.match(/^(\s+)/) || [])[0],
      trailing: (text.match(/(\s+)$/) || [])[0]
    }
  }
}

const pipeTable = (table, numCols, colWidth, justify, delim, numRowsInHeading) => {
  // Write a GFM pipe table
  let str = "";
  // Write heading
  if (numRowsInHeading === 0) {
    str += "|".repeat(numCols + 1);
  } else {
    str += "|";
    for (let j = 0; j < numCols; j++) {
      let cell = table[0][j][0];
      if (cell.trim() === "¶") { cell = cell.replace("¶", " "); }
      str += " " + cell + " |";
    }
  }
  // Write border
  str += "\n|";
  for (let j = 0; j < numCols; j++) {
    let border = justify[j] === "c" ? ":" : "-";
    border += "-".repeat(colWidth[j]);
    border += ("cr".indexOf(justify[j]) > -1 ? ":" : "-") + "|";
    str += border;
  }
  // Write body
  const startRow = numRowsInHeading === 0 ? 0 : 1;
  for (let i = startRow; i < table.length; i++) {
    str += "\n" + (i === 0 ? "" : delim) + "|";
    for (let j = 0; j < numCols; j++) {
      let cell = table[i][j][0];
      if (cell.trim() === "¶") { cell = cell.replace("¶", " "); }
      str += " " + cell + " |";
    }
  }
  return str
};

const gridTable = (table, numCols, numRowsInHeading, rowSpan, colSpan, colWidth, justify, delim) => {
  // Write a reStrucuredText grid table.

  const cellBorder = (ch, isColonRow, i, j) => {
    let borderStr = "";
    for (let k = 0; k < colSpan[(i === -1 ? 0 : i)][j]; k++) {
      borderStr += (isColonRow && justify[j] === "c") ? ":" : ch;
      borderStr += ch.repeat(colWidth[j + k]);
      borderStr += (isColonRow && "cr".indexOf(justify[j]) > -1) ? ":" : ch;
      if (i < colSpan.length - 1 && j + k < colSpan[0].length - 1) {
        borderStr += colSpan[i + 1][j + k + 1] > 0 ? "+" : ch;
      } else {
        borderStr += "+";
      }
    }
    return borderStr
  };

  // Start by writing the top border.
  let topBorder = "+";
  let ch = numRowsInHeading === 0 ? "=" : "-";
  let isColonRow = ch === "=" || numRowsInHeading === 0;
  for (let j = 0; j < numCols; j++) {
    if (rowSpan[0][j] === 0) { continue }
    topBorder += cellBorder(ch, isColonRow, -1, j);
  }

  // Set pointers frome the the grid table current location to the array of table content.
  const current = [];
  for (let j = 0; j < numCols; j++) {
    current.push({ row: 0, line: 0 }); // One reference for each column.
  }

  const rowIsEmptied = new Array(table.length).fill(false); // Have we written all the row's contents?
  let highestUnemptiedRow = 0;
  const rowIsReadyForBorder = new Array(table.length).fill(false);
  const lines = [topBorder];

  while (current[0].row < table.length) {
    // Each pass in this loop writes one line of the grid table output.
    rowIsEmptied[highestUnemptiedRow] = true; // Provisional value. Likely to change.
    let str = delim + "|";
    for (let j = 0; j < numCols; j++) {
      if (rowSpan[current[j].row][j] === 0) { continue }
      if (colSpan[current[j].row][j] === 0) { continue }
      const endRow = current[j].row + rowSpan[current[j].row][j] - 1;
      if (table[current[j].row][j].length > current[j].line) {
        // Write one line from one cell.
        let cellStr = table[current[j].row][j][current[j].line];
        if (cellStr === "¶") { cellStr = " "; }
        str += " " + cellStr + " |";
        current[j].line += 1;
        if (current[j].line < table[current[j].row][j].length) {
          rowIsEmptied[endRow] = false;
        } else if (colSpan[current[j].row][j] > 1) {
          // We're in a wide cell.
          // Check for a collision between a text "|" and a cell border.
          let posBorder = 0;
          for (let k = 0; k < j + colSpan[current[j].row][j] - 1; k++) {
            posBorder += colWidth[k] + 3;
            if (k >= j && str.charAt(posBorder) === "|") {
              rowIsEmptied[endRow] = false;
              break
            }
          }
        }
      } else if (rowIsReadyForBorder[endRow]) {
        // Write a border under one cell.
        if (j === 0) { str = delim + "+"; }
        ch = numRowsInHeading === endRow + 1 ? "=" : "-";
        isColonRow = ch === "=";
        const border = "+" + cellBorder(ch, isColonRow, current[j].row, j);
        str = str.slice(0, -1) + border.slice(0, -1) + "+";
      } else {
        // Other columns are still writing content from this table row.
        // We can't write a bottom border yet, so write a blank line into one cell.
        for (let k = 0; k < colSpan[current[j].row][j]; k++) {
          const corner = k === colSpan[current[j].row][j] - 1 ? "|" : " ";
          str += " ".repeat(colWidth[j + k] + 2) + corner;
        }
      }
    }
    if (rowIsReadyForBorder[highestUnemptiedRow]){
      // We just wrote a bottom border. Change the references to the next table row.
      for (let j = 0; j < numCols; j++) {
        if (current[j].row + rowSpan[current[j].row][j] - 1 === highestUnemptiedRow) {
          current[j].line = 0;
          current[j].row += rowSpan[current[j].row][j];
        }
      }
      highestUnemptiedRow += 1;
    } else if (rowIsEmptied[highestUnemptiedRow]) {
      // The next pass will write a bottom border.
      rowIsReadyForBorder[highestUnemptiedRow] = true;
    }
    lines.push(str);
  }
  return lines.join("\n")
};

/* eslint-disable no-alert */

// TODO: Edit the sheetName regex to ensure that the sheetName is a valid identifier
const sheetNameRegEx = /^[\w]+\b/;

const sheetLimits = (doc, inputPos) => {
  // Find the extent of the table
  let tableStart = 0;
  let tableEnd = 0;
  let parent;
  for (let d = inputPos.depth; d > 0; d--) {
    const node = inputPos.node(d);
    if (node.type.spec.tableRole === 'table') {
      tableStart = inputPos.before(d);
      tableEnd =  inputPos.after(d);
      parent = inputPos.node(d - 1);
      break
    }
  }
  return [tableStart, tableEnd, parent]
};

const numberRegEx$1 = new RegExp(Rnl.numberPattern);
const cellRefRegEx = /"[A-Z][1-9]+"/g;
const innerRefRegEx = /^(?:[A-Z](?:\d+|_end)|up|left)$/;
const sumRegEx = /¿(up|left)([\xa0§])sum[\xa0§]1(?=[\xa0§]|$)/g;
const spreadsheetRegEx = / spreadsheet\b/;
const grafRegEx = /\n\n/;

// Compile a spreadsheet cell.

const compileCell = (attrs, sheetAttrs, unit, previousAttrs,
                            formats = "1,000,000.") => {
  const newAttrs = { entry: attrs.entry, name: attrs.name };
  const entry = attrs.entry;
  if (entry.length === 0) {
    newAttrs.value = null;
    newAttrs.dtype = dt.NULL;
  } else if (entry.slice(0, 1) === "=") {
    // Get the RPN of an expression
    const expression = entry.replace(/^==?/, "").trim();
    // TODO: Revise the parser to handle spreadsheet cell names & sheetname
    // eslint-disable-next-line prefer-const
    let [_, rpn, dependencies] = parse$1(expression, formats, true, false, sheetAttrs.name);
    const outerDependencies = new Set();
    for (const dependency of dependencies) {
      if (!innerRefRegEx.test(dependency)) {
        outerDependencies.add(dependency);
      }
    }

    // Implement sum(up) and sum(left)
    // Orig RPN:    ¿up sum 1
    // Desired RPN: ¿sheetName "D" spreadsheetSum   or   ¿sheetName "3" spreadsheetSum
    let sumMatch;
    while ((sumMatch = sumRegEx.exec(rpn)) !== null) {
      const str = sumMatch[1] === "up" ? attrs.name.slice(0, 1) : attrs.name.slice(1, 2);
      rpn = rpn.slice(0, sumMatch.index) + `¿${sheetAttrs.name}` + sumMatch[2]
            + `"${str}"` + sumMatch[2] + "spreadsheetSum"
            + rpn.slice(sumMatch.index + sumMatch[0].length);
    }

    newAttrs.rpn = rpn;
    newAttrs.dependencies = outerDependencies.size > 0
      ? [...(outerDependencies.values())]
      : [];
    newAttrs.resulttemplate = (entry.length > 1 &&  entry.slice(1, 2) === "=")
      ? "@@"
      : "@";
    newAttrs.altresulttemplate = newAttrs.resulttemplate;
    newAttrs.resultdisplay = newAttrs.resulttemplate;
    newAttrs.unit = unit ? unit : { factor: Rnl.one, gauge: Rnl.zero, expos: allZeros };
  } else if (entry === '"' || entry === '“') {
    // The ditto of the previous cell
    if (previousAttrs.rpn) {
      let rpn = previousAttrs.rpn;
      const matches = arrayOfRegExMatches(cellRefRegEx, rpn);
      for (let i = matches.length - 1; i >= 0; i--) {
        const match = matches[i];
        const rowNum = Math.min(sheetAttrs.numRows - 1, Number(match.value.slice(2, -1)) + 1);
        rpn = rpn.slice(0, match.index + 2) + String(rowNum)
            + rpn.slice(match.index + match.length - String(rowNum).length);
      }
      newAttrs.rpn = rpn;
      newAttrs.resulttemplate = previousAttrs.resulttemplate;
      newAttrs.altresulttemplate = newAttrs.resulttemplate;
      newAttrs.resultdisplay = newAttrs.resulttemplate;
      newAttrs.unit = previousAttrs.unit;
    } else {
      newAttrs.value = previousAttrs.value;
      newAttrs.dtype = previousAttrs.dtype;
      newAttrs.display = previousAttrs.display ? previousAttrs.display : previousAttrs.entry;
    }
    // TODO: unitAware, dependencies
  } else {
    // A literal value
    const numCandidate = entry.replace(/,/g, "");
    if (numberRegEx$1.test(numCandidate)) {
      let value = Rnl.fromString(numCandidate);
      let dtype = dt.RATIONAL;
      if (unit) {
        value = {
          plain: value,
          inBaseUnits: Rnl.multiply(Rnl.add(value, unit.gauge), unit.factor)
        };
        dtype += dt.QUANTITY;
      }
      newAttrs.value = value;
      newAttrs.dtype = dtype;
    } else if (entry === "true" || entry === "false") {
      newAttrs.value = Boolean(entry);
      newAttrs.dtype = dt.BOOLEAN;
    } else if (complexRegEx.test(entry)) {
      // eslint-disable-next-line no-unused-vars
      const [value, unit, dtype, _] = valueFromLiteral(entry, attrs.name, formats);
      newAttrs.value = value;
      newAttrs.dtype = dtype;
    } else {
      newAttrs.value = entry;
      newAttrs.dtype = dt.STRING;
    }
  }
  return newAttrs
};

// Compile a spreadsheet

const compileSheet = (table, formats) => {
  // The cell entries and the sheet name are already known.
  // Proceed to compile the rest of the table and cell attributes.
  // Stop short of calculations.
  table.attrs.numRows = table.content.length;
  table.attrs.columnMap = {};
  table.attrs.rowMap = {};
  table.attrs.unitMap = [];
  table.attrs.units = {};
  table.attrs.dependencies = [];
  table.attrs.dtype = dt.SPREADSHEET;
  if (table.content[0].type === "colGroup") { table.content.shift(); }

  const numRows = table.content.length;
  table.attrs.numRows = numRows;
  const numCols = table.content[0].content.length;
  // Proceed column-wise thru the table.
  for (let j = 0; j < numCols; j++) {
    let previousAttrs = {};
    for (let i = 0; i < numRows; i++) {
      const cell = table.content[i].content[j].content[0];
      const cellName = String.fromCodePoint(65 + j) + String(i);
      const entry = cell.attrs.entry;
      if (i === 0) {
        const str = md2text(entry);
        let heading = "";
        let unitName = "";
        const posNewline = str.indexOf("\n");
        if (posNewline === -1) {
          heading = str.trim();
        } else {
          unitName = str.slice(posNewline + 1).trim();
          heading = str.slice(0, posNewline).trim();
        }
        table.attrs.columnMap[heading] = cellName.slice(0, 1);
        if (unitName.length > 0) {
          const unit = unitFromUnitName(unitName);
          if (unit.dtype && unit.dtype === dt.ERROR) {
            unitName = "";
          } else {
            table.attrs.units[unitName] = unit;
          }
        }
        table.attrs.unitMap.push(unitName);
      } else {
        // A data cell, not a top row heading
        if (j === 0) { table.attrs.rowMap[entry] = i; }
      }
      const newCell = { type: "spreadsheet_cell", attrs: { entry } };
      if (i === 0) {
        newCell.attrs.display = md2html(entry);
      } else {
        newCell.attrs.name = cellName;
        const unit = (table.attrs.unitMap[j].length > 0)
          ? table.attrs.units[table.attrs.unitMap[j]]
          : null;
        newCell.attrs = compileCell(newCell.attrs, table.attrs, unit, previousAttrs,
                                    formats);
        previousAttrs = newCell.attrs;
        previousAttrs.unit = unit;
        if (newCell.attrs.dependencies) {
          for (const d of newCell.attrs.dependencies) {
            if (!table.attrs.dependencies.includes(d)) {
              table.attrs.dependencies.push(d);
            }
          }
        }
      }
      table.content[i].content[j].content = [newCell];
    }
  }
  return table
};

const tableToSheet = (state, tableNode) => {
  // Get the extent of the table.
  const [tableStart, tableEnd, parent] = sheetLimits(state.doc, state.selection.$from);

  // Get the spreadsheet's name
  if (parent.content.content === 1 ||
      parent.content.content[0].type.name !== "figcaption") {
    alert("Table must have a caption that begins with the spreadsheet’s name.");
  }
  const caption = parent.content.content[0];
  const str = caption.textContent;
  if (str.length === 0) {
    alert("Table caption must contain a string that begins with the spreadsheet’s name.");
    return
  }
  const match = sheetNameRegEx.exec(str);
  if (!match) {
    alert("Table caption must begin with a valid identifier for the spreadsheet’s name.");
    return
  }
  const sheetName = match[0];

  // Copy tableNode to an object w/o all the ProseMirror methods.
  let table = tableNode.toJSON();
  table.attrs.name = sheetName;

  // Get the cell entries.
  const numRows = table.content.length;
  const numCols = table.content[0].content.length;
  // Proceed column-wise thru the table.
  for (let j = 0; j < numCols; j++) {
    for (let i = 0; i < numRows; i++) {
      const cell = tableNode.content.content[i].content.content[j];
      let entry = (i === 0)
        ? hurmetMarkdownSerializer.serialize(cell, new Map(), [])
        : cell.textContent;
      if (i === 0) { entry = entry.replace(grafRegEx, "\\\n"); }
      const newCell = { type: "spreadsheet_cell", attrs: { entry } };
      if (i === 0) { newCell.attrs.display = md2html(entry); }
      table.content[i].content[j].content = [newCell];
    }
  }
  const formats = {
    decimalFormat: state.doc.attrs.decimalFormat,
    dateFormat: state.doc.attrs.dateFormat
  };
  table = compileSheet(table, formats);
  table.attrs.class += " spreadsheet";
  table.attrs.dtype = dt.SPREADSHEET;
  return [table, tableStart, tableEnd]
};

const sheetToTable = (state, tableNode) => {
  const table = tableNode.toJSON();
  const classes = table.attrs.class.replace(spreadsheetRegEx, "");
  table.attrs = { class: classes, dtype: dt.NULL };
  // Un-freeze the data cells. Display the entries.
  const rows = table.content;
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i].content;
    for (let j = 0; j < row.length; j++) {
      if (i === 0) {
        row[j].content = md2ast(row[j].content[0].attrs.entry);
      } else {
        const text = row[j].content[0].attrs.entry;
        if (text.length > 0) {
          row[j].content = [{ type: "paragraph", content: [{ type: "text", text }] }];
        } else {
          row[j].content = [{ type: "paragraph", content: [] }];
        }
      }
    }
  }
  const [tableStart, tableEnd, _] = sheetLimits(state.doc, state.selection.$from);
  return [table, tableStart, tableEnd]
};

/*
 *  This module organizes one or two passes through the data structure of a Hurmet
 *  document, calling for a calculation to be done on each Hurmet calculation cell.
 *  If you are looking for the calculation itself, look at evaluate.js.
 *
 *  To be more precise, this module is called:
 *    1. When an author submits one calculation cell, or
 *    2. When a new Hurmet.org instance has opened (from index.js), or
 *    3. When a user has opened a new file         (from openFile.js), or
 *    4. When a recalculate-all has been called, possibly after a paste. (from menu.js)
 *
 *  Case 1 calculates the submitted cell and all dependent calculation cells.
 *  Cases 2 thru 4 re-calculate the entire document. I.e., isCalcAll is set to true.
 *  After calculation is complete, we send the results to ProseMirror to be
 *  rendered in the document.
 *
 *   This module's main exported function is updateCalculations(…)
 */

/*
* Note 1: state.selection shenanigans
*
* Before creating a ProseMirror (PM) transaction, this module first changes `state.selection`.
* That is to say, I change the PM state without running that change thru a PM transaction.
* PM docs advise against that, so I want to explain why I do so.
*
* For Undo purposes, a calculation should be atomic.
* An Undo of a calculation should return the doc to the condition before the
* calculation cell was edited. That will feel natural to people accustomed to Excel.
* When a calculation is submitted, Hurmet creates a single PM transaction and into it,
* Hurmet collects all the changes that the calculation makes to the original cell and
* also all the changes to dependent cells.
* When a user submits a calculation, the cell is open, so a PM Undo would ordinarily return
* the state to a condition that once again has the cell open.
*
* But now consider a user who wants to Undo twice. The first Undo retreats to a condition in
* which a cell is open. The user thinks a second Undo will change the PM document. But no!
* Because the cell is open, the codejar plain text editor is active and the Undo is captured
* by codejar. An Undo affects codejar but not the outer document. It's very confusing!
* So the Undo should return to a condition in which the cell is closed. That's why I change
* the PM state.selection object _before_ I create the PM transaction. I don't want an Undo to
* open that cell and so I don't want the Undo to finish with the selection point inside the
* cell. Before creating the transaction, I move the selection point to just after the cell.
*/

const fetchRegEx = /^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′* *= *(?:fetch|import)\(/;
const importRegEx = /^[^=]+= *import/;
const fileErrorRegEx = /^Error while reading file. Status Code: \d*$/;
const textRegEx$1 = /\\text{[^}]+}/;

const urlFromEntry = entry => {
  // Get the URL from the entry input string.
  const str = entry.replace(/^[^()]+\("?/, "");
  return str.replace(/"?\).*$/, "").trim()
};

// Helper function.
const processFetchedString = (entry, text, hurmetVars, formats) => {
  const attrs = Object.create(null);
  attrs.entry = entry;
  attrs.name = entry.replace(/=.+$/, "").trim();
  let str = parse$1(entry.replace(/\s*=\s*[$$£¥\u20A0-\u20CF]?(?:!{1,2}).*$/, ""), formats);
  const url = urlFromEntry(entry);
  if (/\.(?:tsv|txt)$/.test(url)) {
    // Shorten the URL.
    const fileName = url.replace(/.+\//, "");
    const match = textRegEx$1.exec(str);
    str = str.slice(0, match.index) + "\\text{" + addTextEscapes(fileName) + "})";
  }
  attrs.tex = str;
  attrs.alt = entry;
  if (text === "File not found." || fileErrorRegEx.test(text)) {
    attrs.dtype = dt.ERROR;
    attrs.tex += ` = \\red{\\text{${text}}}`;
    attrs.alt = " = " + text;
    attrs.value = null;
    return attrs
  }
  const data = importRegEx.test(entry)
    ? scanModule(text, formats)     // import code
    : DataFrame.dataFrameFromTSV(text);    // fetch data

  // Append the data to attrs
  attrs.value = data.value;
  attrs.dtype = data.dtype;
  attrs.unit = data.unit;
  attrs.isFetch = true;
  attrs.fallback = data.dtype === dt.MODULE ? text : "";
  if (data.dtype === dt.MODULE && /^importedParameters *=/.test(entry)) {
    // Assign to multiple variables, not one namespace.
    let nameTex = "\\begin{matrix}";
    let i = 0;
    Object.entries(data.value).forEach(([key, value]) => {
      hurmetVars[key] =  value;
      nameTex += parse$1(value.name) + " & ";
      i += 1;
      if (i === 5) {
        nameTex = nameTex.slice(0, -1) + "\\\\ ";
        i = 0;
      }
    });
    nameTex = nameTex.slice(0, (i === 0 ? -2 : -1)) + "\\end{matrix}";
    attrs.tex = attrs.tex.replace("\\mathrm{importedParameters}", nameTex);
  }
  return attrs
};

const mustCalc = (attrs, hurmetVars, changedVars, isCalcAll, isFormat) => {
  if (isCalcAll || isFormat) { return true }
  if (attrs.rpn && !(attrs.name && hurmetVars[attrs.name] && hurmetVars[attrs.name].isFetch)) {
    for (const varName of attrs.dependencies) {
      if (changedVars.has(varName)) { return true }
    }
  }
  if (attrs.dtype && attrs.dtype === dt.DRAWING && attrs.value.parameters &&
      attrs.value.parameters.length > 0) {
    for (const parameter of attrs.value.parameters) {
      if (changedVars.has(parameter)) { return true }
    }
  }
  return false
};

const workWithFetchedTexts = (
  view,
  doc,
  inDraftMode,
  formats,
  isCalcAll,
  nodeAttrs,
  curPos,
  hurmetVars,
  fetchPositions,
  texts
) => {
  // At this point, we have the text of each Hurmet fetch and import.
  // Create a ProseMirror transaction.
  // Each node update below will be one step in the transaction.
  const state = view.state;
  if (state.selection.to === curPos + 1) {
    // See Note 1 above for an explanation of the state.selection shenanigans.
    state.selection = state.selection.constructor.near(state.doc.resolve(curPos + 1));
  }
  const tr = state.tr;

  // Load in the data from the fetch statements
  for (let i = 0; i < texts.length; i++) {
    const pos = fetchPositions[i];
    const entry = isCalcAll
      ? doc.nodeAt(pos).attrs.entry
      : nodeAttrs.entry;
    const attrs = processFetchedString(entry, texts[i], hurmetVars, formats);
    attrs.inDraftMode = inDraftMode;
    tr.replaceWith(pos, pos + 1, state.schema.nodes.calculation.createAndFill(attrs));
    if (attrs.name) {
      insertOneHurmetVar(hurmetVars, attrs, null, formats.decimalFormat);
    }
  }
  // There. Fetches are done and are loaded into the document.
  // Now proceed to the rest of the work.
  proceedAfterFetch(view, isCalcAll, nodeAttrs, curPos, hurmetVars, tr);

};

const workAsync = (
  view,
  isCalcAll,
  nodeAttrs,
  curPos,
  hurmetVars,
  urls,
  fetchPositions
) => {

  // Here we fetch the remote data.
  const doc = view.state.doc;
  const inDraftMode = doc.attrs.inDraftMode;
  const formats = {
    decimalFormat: doc.attrs.decimalFormat,
    dateFormat: doc.attrs.dateFormat
  };

  if (!navigator.onLine) {
    const texts = [];
    for (const url of urls) {
      Object.keys(doc.attrs.fallbacks).forEach(function(key) {
        if (doc.attrs.fallbacks[key].url === url) {
          texts.push(doc.attrs.fallbacks[key].text);
        }
      });
    }
    workWithFetchedTexts(view, doc, inDraftMode, formats, isCalcAll,
      nodeAttrs, curPos, hurmetVars, fetchPositions, texts);
  } else {
    Promise.all(
      urls.map(url => fetch(url, {
        method: "GET",
        headers: { "Content-Type": "text/plain;charset=UTF-8" },
        mode: "cors"
      }))
    ).then(fetchResponses => {
      // The fetch promises have resolved. Now we extract their text.
      return Promise.all(fetchResponses.map(r => {
        if (r.status !== 200 && r.status !== 0) {
          // The fetch failed. Try for a fallback.
          Object.keys(doc.attrs.fallbacks).forEach(function(key) {
            if (doc.attrs.fallbacks[key].url === r.url) {
              return doc.attrs.fallbacks[key].text
            }
          });
          return r.status === 404
            ? 'File not found.'
            : 'Error while reading file. Status Code: ' + r.status
        }
        return r.text()
      }))
    }).then((texts) => {
      workWithFetchedTexts(view, doc, inDraftMode, formats, isCalcAll,
        nodeAttrs, curPos, hurmetVars, fetchPositions, texts);
    });
  }
};

const proceedAfterFetch = (
  view,
  isCalcAll,
  nodeAttrs,
  curPos,
  hurmetVars,
  tr
) => {
  // This function happens either
  //   1. After remote, fetched data has been processed, or
  //   2. After we know that no fetch statements need be processed.
  const doc = view.state.doc;
  const formats = {
    decimalFormat: doc.attrs.decimalFormat,
    dateFormat: doc.attrs.dateFormat
  };
  const calcSchema = view.state.schema.nodes.calculation;
  // Create a set to track which variable have a changed value.
  const changedVars = isCalcAll ? null : new Set();

  if (!isCalcAll && (nodeAttrs.name || nodeAttrs.rpn ||
    (nodeAttrs.dtype && nodeAttrs.dtype === dt.DRAWING))) {
    // Load hurmetVars with values from earlier in the document.
    doc.nodesBetween(0, curPos, function(node, pos) {
      if (node.type.name === "calculation") {
        const attrs = node.attrs;
        if (attrs.name) {
          if (attrs.name === "importedParameters") {
            Object.entries(attrs.value).forEach(([key, value]) => {
              hurmetVars[key] =  value;
            });
          } else {
            insertOneHurmetVar(hurmetVars, attrs, null, formats.decimalFormat);
          }
        }
      } else if (("dtype" in node.attrs) && node.attrs.dtype === dt.SPREADSHEET) {
        const sheetName = node.attrs.name;
        const sheetAttrs = clone(node.attrs);
        sheetAttrs.value = {};
        hurmetVars[sheetName] = sheetAttrs;
        const numRows = node.content.content.length;
        const numCols = node.content.content[0].content.content.length;
        // Proceed column-wise thru the table.
        for (let j = 0; j < numCols; j++) {
          for (let i = 1; i < numRows; i++) {
            const cell = node.content.content[i].content.content[j].content.content[0];
            hurmetVars[sheetName].value[cell.attrs.name] = clone(cell.attrs);
          }
        }
      }
    });

    // Hoist any user-defined functions located below the selection.
    doc.nodesBetween(curPos + 1, doc.content.size, function(node, pos) {
      if (node.type.name === "calculation" && node.attrs.dtype === dt.MODULE) {
        insertOneHurmetVar(hurmetVars, node.attrs, null, formats.decimalFormat);
      }
    });

    // Calculate the current node.
    if (!fetchRegEx.test(nodeAttrs.entry)) {
      // This is the typical calculation statement. We'll evalutate it.
      if (!(("dtype" in nodeAttrs) && nodeAttrs.dtype === dt.SPREADSHEET)) {
        let attrs = clone(nodeAttrs); // compile was already run in mathprompt.js.
        try {
          // Do the calculation of the cell.
          if (attrs.rpn || (nodeAttrs.dtype && nodeAttrs.dtype === dt.DRAWING)) {
            attrs = attrs.dtype && attrs.dtype === dt.DRAWING
              ? evaluateDrawing(attrs, hurmetVars, formats)
              : evaluate(attrs, hurmetVars, formats);
          }
          if (attrs.name) {
            insertOneHurmetVar(hurmetVars, attrs, changedVars, formats.decimalFormat);
          }
        } catch (err) {
          attrs.tex = "\\text{" + attrs.entry + " = " + err + "}";
        }
        tr.replaceWith(curPos, curPos + 1, calcSchema.createAndFill(attrs));
      } else {
        // Calculate all the cells in a spreadsheet
        const tableNode = doc.nodeAt(curPos);
        const table = tableNode.toJSON();
        const sheetName = table.attrs.name;
        const sheet = clone(table.attrs);
        delete sheet["value"];
        sheet.value = {};
        hurmetVars[sheetName] = sheet;
        const numRows = table.content.length;
        const numCols = table.content[0].content.length;
        table.attrs.rowMap = {};
        // Proceed column-wise thru the table.
        for (let j = 0; j < numCols; j++) {
          for (let i = 1; i < numRows; i++) {
            const cell = table.content[i].content[j].content[0];
            if (cell.attrs.rpn) {
              cell.attrs = evaluate(cell.attrs, hurmetVars, formats);
              cell.attrs.display = cell.attrs.alt;
              if (j === 0) { table.attrs.rowMap[cell.attrs.alt] = i; }
            } else if (j === 0 && typeof cell.attrs.value === "string") {
              table.attrs.rowMap[cell.attrs.value] = i;
            }
            hurmetVars[sheetName].value[cell.attrs.name] = cell.attrs;
          }
        }
        changedVars.add(sheetName);
        tr.replaceWith(curPos, curPos + tableNode.nodeSize,
                       view.state.schema.nodeFromJSON(table));
      }
    }
  }

  // Finally, update calculations after startPos.
  const startPos = isCalcAll ? 0 : (curPos + 1);
  const isFormat = (nodeAttrs && nodeAttrs.name && nodeAttrs.name === "format");
  doc.nodesBetween(startPos, doc.content.size, function(node, pos) {
    if (node.type.name === "calculation") {
      const notFetched = isCalcAll ? !fetchRegEx.test(node.attrs.entry) : !node.attrs.isFetch;
      if (notFetched) {
        const entry = node.attrs.entry;
        let attrs = isCalcAll
          ? compile(entry, formats)
          : clone(node.attrs);
        attrs.displayMode = node.attrs.displayMode;
        const mustRedraw = attrs.dtype && attrs.dtype === dt.DRAWING &&
          (attrs.rpn || (attrs.value.parameters.length > 0 || isCalcAll));
        if (mustCalc(attrs, hurmetVars, changedVars, isCalcAll, isFormat)) {
          try {
            if (attrs.rpn || mustRedraw) {
              attrs.error = false;
              attrs = attrs.rpn // attrs.dtype && attrs.dtype === dt.DRAWING
                ? evaluate(attrs, hurmetVars, formats)
                : evaluateDrawing(attrs, hurmetVars, formats);
            }
            if (attrs.name) {
              insertOneHurmetVar(hurmetVars, attrs, changedVars, formats.decimalFormat);
            }
          } catch (err) {
            attrs.tex = "\\text{" + attrs.entry + " = " + err + "}";
          }
          if (isCalcAll || attrs.rpn || mustRedraw) {
            tr.replaceWith(pos, pos + 1, calcSchema.createAndFill(attrs));
          }
        } else if (attrs.name && attrs.value) {
          insertOneHurmetVar(hurmetVars, attrs, null, formats.decimalFormat);
        }
      } else if (node.attrs.name && !(isCalcAll && node.attrs.isFetch)) {
        if (node.attrs.name) {
          if (node.attrs.name === "importedParameters") {
            Object.entries(node.attrs.value).forEach(([key, value]) => {
              hurmetVars[key] =  value;
            });
          } else {
            insertOneHurmetVar(hurmetVars, node.attrs, null, formats.decimalFormat);
          }
        }
      }
    } else if (("dtype" in node.attrs) && node.attrs.dtype === dt.SPREADSHEET
                && pos !== curPos) {
      // Calculate all the cells in a spreadsheet
      let table = clone(node.toJSON());
      let mustCalc = false;
      if (isCalcAll) {
        table = compileSheet(table, formats);
        mustCalc = true;
      } else {
        for (const varName of table.attrs.dependencies) {
          if (changedVars.has(varName)) { mustCalc = true; break }
        }
      }
      if (mustCalc) {
        const sheetName = table.attrs.name;
        hurmetVars[sheetName] = table.attrs;
        hurmetVars[sheetName].value = {};
        const numRows = table.content.length;
        const numCols = table.content[0].content.length;
        table.attrs.rowMap = {};
        // Proceed column-wise thru the table.
        for (let j = 0; j < numCols; j++) {
          for (let i = 1; i < numRows; i++) {
            const cell = table.content[i].content[j].content[0];
            if (cell.attrs.rpn) {
              cell.attrs = evaluate(cell.attrs, hurmetVars, formats);
              cell.attrs.display = cell.attrs.alt;
              if (j === 0) { table.attrs.rowMap[cell.attrs.alt] = i; }
            } else if (j === 0 && typeof cell.attrs.value === "string") {
              table.attrs.rowMap[cell.attrs.value] = i;
            }
            hurmetVars[sheetName].value[cell.attrs.name] = cell.attrs;
          }
        }
        if (!isCalcAll) { changedVars.add(sheetName); }
        tr.replaceWith(pos, pos + node.nodeSize, view.state.schema.nodeFromJSON(table));
      }
    }
  });

  // All the steps are now loaded into the transaction.
  // Dispatch the transaction to ProseMirror, which will re-render the document.
  if (!isCalcAll) {
    tr.setSelection(view.state.selection.constructor.near(tr.doc.resolve(curPos + 1)));
  }
  view.dispatch(tr);
  view.focus();
};

function updateCalculations(
  view,
  isCalcAll = false,
  nodeAttrs,
  curPos
) {
  const doc = view.state.doc;
  const calcSchema = view.state.schema.nodes.calculation;

  if (!(isCalcAll || nodeAttrs.name || nodeAttrs.rpn ||
      (nodeAttrs.dtype && nodeAttrs.dtype === dt.DRAWING))) {
    // No calculation is required. Just render the node and get out.
    const state = view.state;
    if (state.selection.to === curPos + 1) {
      // See Note 1 above for an explanation of the state.selection shenanigans.
      state.selection = state.selection.constructor.near(state.doc.resolve(curPos + 1));
    }
    const tr = state.tr;
    try {
      tr.replaceWith(curPos, curPos + 1, calcSchema.createAndFill(nodeAttrs));
    // eslint-disable-next-line no-unused-vars
    } catch (err) {
      // nada
    } finally {
      view.dispatch(tr);
      view.focus();
    }
    return
  }

  // Create an object in which we'll hold variable values.
  const hurmetVars = Object.create(null);
  hurmetVars.format = { value: "h15" }; // default rounding format
  hurmetVars["@savedate"] = doc.attrs.saveDate;
  const formats = {
    decimalFormat: doc.attrs.decimalFormat,
    dateFormat: doc.attrs.dateFormat
  };

  // Get an array of all the URLs called by fetch statements.
  const urls = [];
  const fetchPositions = [];
  if (!isCalcAll) {
    // The author has submitted a single calculation cell.
    const entry = nodeAttrs.entry;
    if (fetchRegEx.test(entry)) {
      urls.push(urlFromEntry(entry));
      fetchPositions.push(curPos);
    }
  } else {
    // We're updating the entire document.
    doc.nodesBetween(0, doc.content.size, function(node, pos) {
      if (node.type.name === "calculation" && !node.attrs.value) {
        const entry = node.attrs.entry;
        if (fetchRegEx.test(entry)) {
          urls.push(urlFromEntry(entry));
          fetchPositions.push(pos);
        } else if (/^function /.test(entry)) {
          node.attrs = compile(entry, formats);
          insertOneHurmetVar(hurmetVars, node.attrs, null, formats.decimalFormat);
        }
      } else if (node.attrs.isFetch || (node.attrs.dtype && node.attrs.dtype === dt.MODULE)) {
        insertOneHurmetVar(hurmetVars, node.attrs, null, formats.decimalFormat);
      }
    });
  }

  if (urls.length > 0) {
    // We have to fetch some remote data. Asynchronous work ahead.
    workAsync(view, isCalcAll, nodeAttrs, curPos,
              hurmetVars, urls, fetchPositions);
  } else {
    // Skip the fetches and go directly to work that we can do synchronously.
    const state = view.state;
    if (state.selection.to === curPos + 1) {
      // See Note 1 above for an explanation of the state.selection shenanigans.
      state.selection = state.selection.constructor.near(state.doc.resolve(curPos + 1));
    }
    const tr = state.tr;
    proceedAfterFetch(view, isCalcAll, nodeAttrs, curPos, hurmetVars, tr);
  }
}

const helpers = Object.freeze({
  fetchRegEx,
  textRegEx: textRegEx$1,
  urlFromEntry,
  processFetchedString
});

async function fetchTexts(urls) {
  // Here we fetch remote data.
  return Promise.all(
    urls.map(url => fetch(url, {
      method: "GET",
      headers: { "Content-Type": "text/plain;charset=UTF-8" },
      mode: "cors"
    }))
  ).then(fetchResponses => {
    // The fetch promises have resolved. Now we extract their text.
    return Promise.all(fetchResponses.map(r => {
      if (r.status !== 200 && r.status !== 0) {
        return r.status === 404
          ? 'File not found.'
          : 'Error while reading file. Status Code: ' + r.status
      }
      return r.text()
    }))
  }).then((texts) => {
    // At this point, we have the text of each Hurmet fetch and import.
    return texts
  })
}

async function getRemoteTexts(urls) {
  // This is necessary to return text, not just a promise of text.
  return await fetchTexts(urls)
}

const getCalcNodes = (ast, calcNodes) => {
  // Create an array of calculation nodes.
  if (Array.isArray(ast)) {
    for (let i = 0; i < ast.length; i++) {
      getCalcNodes(ast[i], calcNodes);
    }
  } else if (ast && ast.type === "calculation") {
    calcNodes.push(ast);
  } else if (ast && ast.type === "table" && "name" in ast.attrs) {
    calcNodes.push(ast);
  } else if ("content" in ast) {
    for (let j = 0; j < ast.content.length; j++) {
      getCalcNodes(ast.content[j], calcNodes);
    }
  }
};

async function updateCalcs(doc) {
  // This function is a lot like what updateCalculations.js does for the Hurmet web site.

  // Create an object in which we'll hold variable values.
  const hurmetVars = Object.create(null);
  hurmetVars.format = { value: "h15" }; // default rounding format
  hurmetVars["@savedate"] = doc.attrs.saveDate;
  const formats = {
    decimalFormat: doc.attrs.decimalFormat,
    dateFormat: doc.attrs.dateFormat
  };

  // Create an array of all the calculation nodes in the document
  const calcNodes = [];
  getCalcNodes(Array.isArray(doc) ? doc : doc.content, calcNodes);
  if (calcNodes.length === 0) { return doc }

  // Get an array of all the URLs called by fetch statements.
  const urls = [];
  const callers = [];
  for (const node of calcNodes) {
    const entry = node.attrs.entry;
    if (helpers.fetchRegEx.test(entry)) {
      urls.push(helpers.urlFromEntry(entry));
      callers.push(node);
    } else if (/^function /.test(entry)) {
      node.attrs = compile(entry, formats);
      insertOneHurmetVar(hurmetVars, node.attrs, null, formats.decimalFormat);
    }
  }

  if (urls.length > 0) {
    // We have to fetch some remote data.
    const texts = await getRemoteTexts(urls);
    // Fetches are now complete. Load in the data.
    for (let i = 0; i < texts.length; i++) {
      const node = callers[i];
      const entry = node.attrs.entry;
      // When we modify a node, we are also mutating the container doc.
      node.attrs = helpers.processFetchedString(entry, texts[i], hurmetVars, formats);
      if (node.attrs.name) {
        if (node.attrs.name === "importedParameters") {
          Object.entries(node.attrs.value).forEach(([key, value]) => {
            hurmetVars[key] =  value;
          });
        } else {
          insertOneHurmetVar(hurmetVars, node.attrs, null, formats.decimalFormat);
        }
      }
    }
  }

  // Fetches, if any, are now complete and loaded into hurmetVars.
  // Make a pass through the calculation nodes and calculate each result.
  try {
    for (const node of calcNodes) {
      if (node.type === "calculation") {
        if (!helpers.fetchRegEx.test(node.attrs.entry)) {
          const entry = node.attrs.entry;
          let attrs = compile(entry, formats);
          attrs.displayMode = node.attrs.displayMode;
          const mustDraw = attrs.dtype && attrs.dtype === dt.DRAWING;
          if (attrs.rpn || mustDraw) {
            attrs = attrs.rpn
              ? evaluate(attrs, hurmetVars, formats)
              : evaluateDrawing(attrs, hurmetVars, formats);
          }
          if (attrs.name) {
            insertOneHurmetVar(hurmetVars, attrs, null, formats.decimalFormat);
          }
          // When we modify a node, we are also mutating the container doc.
          node.attrs = attrs;
        }
      } else if ("dtype" in node.attrs && node.attrs.dtype === dt.SPREADSHEET) {
        // node is a spreadsheet
        const sheet = compileSheet(node, formats);
        const sheetName = sheet.attrs.name;
        hurmetVars[sheetName] = sheet.attrs;
        hurmetVars[sheetName].value = {};
        const numRows = sheet.content.length;
        const numCols = sheet.content[0].content.length;
        sheet.attrs.rowMap = {};
        // Proceed column-wise thru the sheet.
        for (let j = 0; j < numCols; j++) {
          for (let i = 1; i < numRows; i++) {
            const cell = sheet.content[i].content[j].content[0];
            if (cell.attrs.rpn) {
              cell.attrs.altresulttemplate = cell.attrs.resulttemplate;
              cell.attrs = evaluate(cell.attrs, hurmetVars, formats);
              cell.attrs.display = cell.attrs.alt;
              if (j === 0) { sheet.attrs.rowMap[cell.attrs.alt] = i; }
            } else if (j === 0 && typeof cell.attrs.value === "string") {
              sheet.attrs.rowMap[cell.attrs.value] = i;
            }
            hurmetVars[sheetName].value[cell.attrs.name] = cell.attrs;
          }
        }
        node.attrs = sheet.attrs;
        node.content = sheet.content;
      }
    }
    return doc
  } catch (err) {
    console.log(err); // eslint-disable-line no-console
  }
}

const getTOCitems = (ast, tocArray, start, end, node) => {
  if (Array.isArray(ast)) {
    for (let i = 0; i < ast.length; i++) {
      getTOCitems(ast[i], tocArray, start, end, node);
    }
  } else if (ast && ast.type === "heading") {
    const level = ast.attrs.level;
    if (start <= level && level <= end) {
      tocArray.push([headingText(ast.content), level - start]);
    }
  } else if (ast.type === "toc") {
    node.push(ast);
  // eslint-disable-next-line no-prototype-builtins
  } else if (ast.hasOwnProperty("content")) {
    for (let j = 0; j < ast.content.length; j++) {
      getTOCitems(ast.content[j], tocArray, start, end, node);
    }
  }
};

const wrapWithHead = (html, title, attrs) => {
  title = title ? title : "Hurmet doc";
  const fontClass = attrs && attrs.fontSize
    ? { "10": "long-primer", "12": "pica", "18": "great-primer" }[attrs.fontSize]
    : "long-primer";
  const head = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>${title}</title>
  <link rel="stylesheet" href="./styles.css">
</head>
<body>
<article class="ProseMirror ${fontClass}">
<div class="ProseMirror-setup">
`;
  return head + html + "\n</div></article>\n</body>\n</html>"
};

async function hurmet2html(md, title = "", inHtml = false) {
  // Convert a Hurmet document to HTML.

  // A Hurmet document is written in Markdown.
  //     To extent possible, it matches GitHub Flavored Markdown (GFM)
  //     For extensions beyond GFM, it matches, to the extent possible, Pandoc
  //     For calculations, Hurmet has its own format.

  // Start by converting the Markdown to an AST that matches
  // the Hurmet internal data structure.
  let ast = md2ast(md, inHtml);

  // Populate a Hurmet Table of Contents, if any exists.
  const tocCapture = /\n *\n{\.toc start=(\d) end=(\d)}\n/.exec(md);
  if (tocCapture) {
    const start = Number(tocCapture[1]);
    const end = Number(tocCapture[2]);
    const tocArray = [];
    const node = [];
    getTOCitems(ast, tocArray, start, end, node);
    node[0].attrs.body = tocArray;
  }

  // Perform Hurmet calculations
  // This is asynchronous because a caclulation may need to fetch some remote data.
  ast = await updateCalcs(ast);

  // Write the HTML
  let html = ast2html(ast);

  if (title.length > 0) {
    html = wrapWithHead(html, title, ast.attrs);
  }

  return html
}

/*
 * teXtoCalc.js
 * This file takes a text string and converts from TeX to Hurmet calculation format.
*/

// Delimiter types
const PAREN = 1; // default
const FRAC = 2;
const TFRAC = 3;
const BINARY = 4;
const ENV = 5;  // environment
const CASES = 6; // cases environment

const  charAccents = {
  "\\bar": "\u0304",
  "\\grave": "\u0300",
  "\\acute": "\u0301",
  "\\hat": "\u0302",
  "\\tilde": "\u0303",
  "\\dot": "\u0307",
  "\\ddot": "\u0308",
  "\\mathring": "\u030A",
  "\\check": "\u030C",
  "\\underline": "\u0332",
  "\\overleftharpoon": "\u20d0",
  "\\overrightharpoon": "\u20d1",
  "\\overleftarrow": "\u20d6",
  "\\vec": "\u20d7",
  "\\overleftrightarrow": "\u20e1"
};
const openParenRegEx = /^ *(?:\\(?:left|big|Big|bigg|Bigg))? *\(/;
const leadingSpaceRegEx = /^\s+/;
const trailingSpaceRegEx = / +$/;
const inlineFracRegEx = /^\/(?!\/)/;
const ignoreRegEx = /^\\(left(?!\.)|right(?!\.)|middle|big|Big|bigg|Bigg)/;
const textSubRegEx = /^(?:(?:\\text|\\mathrm)?{([A-Za-z\u0391-\u03c9][A-Za-z0-9\u0391-\u03c9]*)}|{(?:\\text|\\mathrm)\{([A-Za-z\u0391-\u03c9][A-Za-z0-9\u0391-\u03c9]*)}})/;
const enviroRegEx = /^(?:\\begin\{(?:(align(?:ed)?|align(?:ed)?at|d?array|d?cases|d?rcases|subarray|equation|split|gather(?:ed)?|CD|multline|smallmatrix)|(|p|b|B|v|V)matrix)\}|(\\bordermatrix)\b)/;
const endEnviroRegEx = /^\\end\{(?:(align(?:ed)?|align(?:ed)?at|d?array|d?cases|d?rcases|subarray|equation|split|gather(?:ed)?|CD|multline|smallmatrix)|(|p|b|B|v|V)matrix)\}/;
const ifRegEx = /^(?:\\(?:mathrm|text|mathrel{\\mathrm){)?(if|otherwise)\b/;
// eslint-disable-next-line max-len
const greekAlternatives = "Alpha|Beta|Gamma|Delta|Epsilon|Zeta|Eta|Theta|Iota|Kappa|Lambda|Mu|Nu|Xi|Omicron|Pi|Rho|Sigma|Tau|Upsilon|Phi|Chi|Psi|Omega|alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|varphi";
const greekRegEx = RegExp("^\\\\(" + greekAlternatives + ")\\b");
const mathOperatorRegEx = /^\\(arcsin|arccos|arctan|arctg|arcctg|arg|ch|cos|cosec|cosh|cot|cotg|coth|csc|ctg|cth|deg|dim|exp|hom|ker|lg|ln|log|sec|sin|sinh|sh|sgn|tan|tanh|tg|th|max|min|gcd)\b/;
// eslint-disable-next-line max-len
const bracedCharRegEx = RegExp("^\\{([A-Za-z0-9\u0391-\u03c9]|\\\\(" + greekAlternatives + "))\\}");
const distanceRegEx = /^[-+]?[0-9.]+(?:em|ex|mu|pt|mm|cm|in|bp|pc|dd|cc|nd|nc|sp)/;
const greekLetters = {
  Alpha: "Α",
  Beta: "Β",
  Gamma: "Γ",
  Delta: "Δ",
  Epsilon: "Ε",
  Zeta: "Ζ",
  Eta: "Η",
  Theta: "Θ",
  Iota: "Ι",
  Kappa: "Κ",
  Lambda: "Λ",
  Mu: "Μ",
  Nu: "Ν",
  Xi: "Ξ",
  Omicron: "Ο",
  Pi: "Π",
  Rho: "Ρ",
  Sigma: "Σ",
  Tau: "Τ",
  Upsilon: "Υ",
  Phi: "Φ",
  Chi: "Χ",
  Psi: "Ψ",
  Omega: "Ω",
  alpha: "α",
  beta: "β",
  gamma: "γ",
  delta: "δ",
  epsilon: "ε",
  zeta: "ζ",
  eta: "η",
  theta: "θ",
  iota: "ι",
  kappa: "κ",
  lambda: "λ",
  mu: "μ",
  nu: "ν",
  xi: "ξ",
  omicron: "ο",
  pi: "π",
  rho: "ρ",
  sigma: "σ",
  tau: "τ",
  upsilon: "υ",
  phi: "ϕ",
  chi: "χ",
  psi: "ψ",
  omega: "ω",
  varphi: "φ"
};
const boldRegEx = /^\\mathbf{([A-Za-z])}/;

const matrices = {
  m: ["{:", ":}"],
  p: ["(", ")"],
  b: ["[", "]"],
  B: ["{", "}"],
  v: ["|", "|"],
  V: ["‖", "‖"]
};

const kerns = ["\\kern", "\\mkern", "\\mskip", "\\hskip"];

const donotConvert = ["\\begin{CD}"];

const eatOpenBrace = str => {
  if (str.length === 0) { return ["", true] }
  let didNotFindBrace = false;
  if (str[0] === "{") {
    str = str.slice(1);
  } else {
    didNotFindBrace = true;
  }
  str = str.replace(leadingSpaceRegEx, "");
  return [str, didNotFindBrace]
};

const eatMatch = (str, match) => {
  str = str.slice(match[0].length);
  str = str.replace(leadingSpaceRegEx, "");
  return str
};

const unbracedDistance = str => {
  const match = distanceRegEx.exec(str);
  if (!match) { return "" }
  return match[0]
};

const tex2Calc = (str, displayMode = false) => {
  let calc = "";
  let token = {};
  let prevToken = { input: "", output: "", ttype: 50 };
  const delims = [{ ch: "", pos: -1, type: 0 }] ; // delimiter stack
  let splitLongVars = true;
  let waitingForUnbracedArg = false;
  let justGotUnbracedArg = false;

  // Trim the input string
  str = str.replace(leadingSpaceRegEx, ""); //  trim leading white space
  str = str.replace(/\s+$/, ""); //             trim trailing white space

  // Execute the main parse loop.
  while (str.length > 0 || justGotUnbracedArg) {
    // Get the next token.

    while (str.length > 0 && str.charAt(0) === "\n") {
      calc += "\n";
      str = str.replace(leadingSpaceRegEx, "");
    }

    if (justGotUnbracedArg) {
      token = { input: "", output: "", ttype: tt.RIGHTBRACKET, closeDelim: "" };
      justGotUnbracedArg = false;

    } else if (str.length > 0 && str.charAt(0) === "'") {
      // The Hurmet lexer will not handle an apostrophe properly. Lex it locally.
      token = { input: "'", output: "′", ttype: tt.PRIME, closeDelim: "" };
      str = str.slice(1);
      str = str.replace(leadingSpaceRegEx, "");

    } else if (inlineFracRegEx.test(str)) {
      token = { input: "/", output: "\u2215", ttype: tt.MULT, closeDelim: "" };
      str = str.slice(1);
      str = str.replace(leadingSpaceRegEx, "");

    } else if (mathOperatorRegEx.test(str)) {
      const match = mathOperatorRegEx.exec(str);
      token = { input: match[0], output: match[1], ttype: tt.FUNCTION, closeDelim: "" };
      str = eatMatch(str, match);

    } else if (greekRegEx.test(str)) {
      const match = greekRegEx.exec(str);
      token = {
        input: match[0],
        output: greekLetters[match[0].slice(1)],
        ttype: tt.VAR,
        closeDelim: ""
      };
      str = eatMatch(str, match);

    } else if (delims[delims.length - 1].type === CASES && ifRegEx.test(str)) {
      const match = ifRegEx.exec(str);
      const lastChar = calc.trim().slice(-1);
      if (lastChar === "&" || lastChar === ",") {
        calc = calc.trim().slice(0, -1);
      }
      token = { input: match[0], output: match[1], ttype: tt.LOGIC, closeDelim: "" };
      str = eatMatch(str, match);
      if (match[0].indexOf("{") > -1) {
        str = str.slice(1).trim();
        const pos = match[0].lastIndexOf("{");
        if (pos > -1 && pos !== match[0].indexOf("{")) {
          str = str.slice(1).trim();
        }
      }

    } else if (boldRegEx.test(str)) {
      const match = boldRegEx.exec(str);
      const codePoint = match[1].codePointAt(0);
      const offset = codePoint < 91 ? 0x1D3BF : 0x1D3B9;
      const ch = String.fromCodePoint(codePoint + offset);
      token = { input: match[0], output: ch, ttype: tt.VAR, closeDelim: "" };
      str = eatMatch(str, match);

    } else if (enviroRegEx.test(str)) {
      const match = enviroRegEx.exec(str);
      if (match[1]) {
        if (donotConvert.includes(match[0])) { return `"Unable to convert ${match[1]}"` }
        const posAmp = str.indexOf("&");
        if (match[1] === "cases" && ifRegEx.test(str.slice(posAmp + 1).trim())) {
          // Change a TeX cases environment to a Hurmet { if } statement
          token = { input: match[0], output: "{", ttype: tt.ENVIRONMENT, closeDelim: "}" };
        } else {
          token = { input: match[0], output:`\\${match[1]}`,
            ttype: tt.ENVIRONMENT, closeDelim: ")" };
        }
      } else if (match[2]) {
        const matrixType = match[2] || "m";
        token = { input: match[0], output: matrices[matrixType][0],
          ttype: tt.ENVIRONMENT, closeDelim: matrices[matrixType][1] };
      } else {
        // \bordermatrix
        token = { input: match[0], output: match[3], ttype: tt.ENVIRONMENT, closeDelim: ")" };
      }
      str = eatMatch(str, match);

    } else if (endEnviroRegEx.test(str)) {
      const match = endEnviroRegEx.exec(str);
      token = { input: match[0], output: match[1], ttype: tt.RIGHTBRACKET, closeDelim: "" };
      str = eatMatch(str, match);

    } else if (ignoreRegEx.test(str)) {
      const match = ignoreRegEx.exec(str);
      str = eatMatch(str, match);

    } else {
      // Many, many symbols are the same in TeX and in Hurmet calcs.
      // So we can use the Hurmet lexer to identify them.
      const tkn = lex(str, { decimalFormat: "10000000.", dateFormat: "yyyy-mm-dd" }, prevToken);
      if (donotConvert.includes(tkn[0])) { return `'"Unable to convert ${tkn[1]}"` }
      if (waitingForUnbracedArg && (tkn[3] === tt.LONGVAR || tkn[3] === tt.NUM)) {
        token = { input: tkn[0][0], output: tkn[2][0], ttype: tkn[3], closeDelim: "" };
        str = str.slice(1);
      } else {
        token = { input: tkn[0], output: tkn[2], ttype: tkn[3], closeDelim: tkn[4] };
        str = str.slice(token.input.length);
      }
      str = str.replace(leadingSpaceRegEx, "");
    }

    switch (token.ttype) {
      case tt.SPACE: //  spaces and newlines
        calc += token.output;
        break

      case tt.MULT: //         inline mult/divide operators, × * · /// ÷
      case tt.REL: //          relational operators, e.g  < > == →
      case tt.BIN: //          infix math operators that render but don't calc, e.g. \bowtie
      case tt.BIG_OPERATOR: // integral, sum, etc
      case tt.LOGIC: //        if, and, or, ∀, ∃, ∧, ∨, etc
        calc += token.output + " ";
        break

      case tt.SUPCHAR:
        calc = calc.replace(trailingSpaceRegEx, "");
        calc += token.output;
        break

      case tt.SUB:
      case tt.SUP: {
        calc = calc.replace(trailingSpaceRegEx, "");
        calc += token.output;
        if (token.ttype === tt.SUB && textSubRegEx.test(str)) {
          const match = textSubRegEx.exec(str);
          const subscript = match[1] ? match[1] : match[2];
          calc += subscript + " ";
          str = str.slice(match[0].length);
        } else if (str.length > 0 && str.charAt(0) === "{") {
          [str, waitingForUnbracedArg] = eatOpenBrace(str);
          delims.push({ ch: ")", pos: calc.length, type: PAREN });
          calc += "(";
        }
        break
      }

      case tt.ADD: { //        infix add/subtract operators, + -
        const dType = delims[delims.length - 1].type;
        if (token.input === "&" && (dType === ENV || dType === CASES)) {
          calc += ", ";   // Write a comma separator for environments
        } else {
          calc += token.output + " ";
        }
        break
      }

      case tt.NUM:
      case tt.ORD:
      case tt.VAR: {
        calc += token.output + " ";
        if (waitingForUnbracedArg) {
          justGotUnbracedArg = true;
          waitingForUnbracedArg = false;
        }
        break
      }

      case tt.LONGVAR:
        calc += splitLongVars ? token.output.split("").join(" ") + " " : token.output;
        break

      case tt.FACTORIAL:
      case tt.PRIME:
        calc = calc.trim() + token.output + " ";
        break

      case tt.ACCENT: {
        if (charAccents[token.input] && bracedCharRegEx.test(str)) {
          delims.push({ ch: charAccents[token.input], pos: calc.length, type: PAREN });
          [str, waitingForUnbracedArg] = eatOpenBrace(str);
        } else {
          calc += token.output;
          if (str.length > 0 && str.charAt(0) === "{") {
            calc += "(";
            delims.push( { ch: ")", pos: calc.length, type: PAREN });
            [str, waitingForUnbracedArg] = eatOpenBrace(str);
          }
        }
        break
      }

      case tt.UNARY: {
        if (verbatims.has(token.input)) {
          let arg = "";
          if (kerns.includes(token.input) && str[0] !== "{") {
            arg = unbracedDistance(str);
            str = str.slice(arg.length);
          } else {
            arg = verbatimArg(str);
            str = str.slice(arg.length + 2);
          }
          calc += token.input === "\\text"
            ? '"' + arg + '"'
            : token.input === "\\mathrm" && arg.length > 1 && arg.indexOf(" ") === -1
            ? arg
            : token.input + "(" + arg + ")";
          if (token.input === "\\mathrm" && waitingForUnbracedArg) {
            justGotUnbracedArg = true;
            waitingForUnbracedArg = false;
          }
          str = str.replace(leadingSpaceRegEx, "");
        } else if (token.input === "\\sqrt") {
          if (str.slice(0, 1) === "[") {
            const root = verbatimArg(str);
            str = str.slice(root.length + 2);
            str = str.replace(leadingSpaceRegEx, "");
            calc += (root === "3") ? "∛(" : (root === "4") ? "∜(" : `root(${root})(`;
          } else {
            calc += "√(";
          }
          delims.push({ ch: ")", pos: calc.length, type: PAREN });
          [str, waitingForUnbracedArg] = eatOpenBrace(str);
        } else {
          calc += token.output + "(";
          if (str.length > 0 && str.charAt(0) === "{") {
            delims.push({
              ch: ")",
              pos: calc.length,
              type: PAREN
            });
          }
          [str, waitingForUnbracedArg] = eatOpenBrace(str);
        }
        break
      }

      case tt.BINARY: {
        const pos = calc.length;
        if (token.input === "\\dfrac" || (token.input === "\\frac" && displayMode)) {
          calc += "(";
          delims.push({ ch: ")/(", pos, type: FRAC });
        } else if (token.input === "\\tfrac" || (token.input === "\\frac" && !displayMode)) {
          calc += "(";
          delims.push({ ch: ")//(", pos, type: TFRAC });
        } else if (verbatims.has(token.input)) {
          const arg = verbatimArg(str);
          calc += token.input + "(" + arg + ")(";
          str = str.slice(arg.length + 2);
          str = str.replace(leadingSpaceRegEx, "");
          delims.push({ ch: ")", pos, type: PAREN });
        } else {
          calc += token.input + "(";
          delims.push({ ch: ")(", pos, type: BINARY });
        }
        [str, waitingForUnbracedArg] = eatOpenBrace(str);
        break
      }

      case tt.DIV: {   // \over, \atop
        const pos = delims[delims.length - 1].pos;
        calc = calc.slice(0, pos) + "(" + calc.slice(pos + 1);
        delims.pop();
        calc += token.input === "\\over" ? ")/(" : ")" + token.output + "(";
        delims.push({ ch: ")", pos: calc.length - 1, type: PAREN });
        break
      }

      case tt.FUNCTION: {
        calc += token.output;
        const pos = calc.length;
        const match = openParenRegEx.exec(str);
        if (match) {
          calc += "(";
          delims.push({ ch: ")", pos, type: PAREN });
          str = eatMatch(str, match);
        } else {
          calc += " ";
        }
        break
      }

      case tt.LEFTBRACKET:
      case tt.ENVIRONMENT: {
        delims.push({
          ch: token.closeDelim,
          pos: calc.length,
          type: token.input === "\\bordermatrix"
            ? ENV
            : token.ttype === tt.ENVIRONMENT && token.closeDelim === "}"
            ? CASES
            : token.ttype === tt.ENVIRONMENT
            ? ENV
            : PAREN
        });
        calc += token.output;
        if (verbatims.has(token.output) ||
          (token.output === "\\bordermatrix" && str.slice(0, 1) === "[")) {
          const arg = verbatimArg(str);
          calc += token.output === "\\bordermatrix" ? "[" + arg + "]" : "(" + arg + ")";
          str = str.slice(arg.length + 2);
          str = str.replace(leadingSpaceRegEx, "");
        }
        if (token.output === "\\bordermatrix") {
          str = str.slice(1);
          str = str.replace(leadingSpaceRegEx, "");
        }
        if (token.output.slice(0, 1) === "\\") { calc += "("; }
        break
      }

      case tt.SEP: {
        const inEnvironment = (delims[delims.length - 1].type === ENV);
        if ((token.input === "\\\\" || token.input === "\\cr") && inEnvironment) {
          calc += "; ";
        } else {
          calc += (token.input === "&" && inEnvironment) ?  ", " : token.output + " ";
        }
        break
      }

      case tt.RIGHTBRACKET: {
        const delim = delims.pop();
        calc = calc.replace(trailingSpaceRegEx, "");

        if (delim.type === FRAC || delim.type === TFRAC) {
          calc += delim.type === FRAC ? ") / (" : ")//(";
          delims.push({ ch: ")", pos: calc.length - 1, type: PAREN });
          [str, waitingForUnbracedArg] = eatOpenBrace(str);

        } else if (delim.type === BINARY) {
          calc += ")(";
          delims.push({ ch: ")", pos: calc.length - 1, type: PAREN });
          [str, waitingForUnbracedArg] = eatOpenBrace(str);

        } else {
          calc += delim.ch + " ";
        }
        if (delim.ch === '"' || delim.ch === "") { splitLongVars = true; }
        break
      }

      default:
        calc += token.output;
    }

    prevToken = cloneToken(token);
  }

  calc = calc.replace(/ {2,}/g, " "); // Replace multiple spaces with single space.
  calc = calc.replace(/\s+(?=[_^'′!,;)}\]〗])/g, ""); // Delete spaces before right delims
  calc = calc.replace(/\s+$/, ""); //                 Delete trailing space

  return calc
};

/**
 * This is the ParseError class, which is the main error thrown by Temml
 * functions when something has gone wrong. This is used to distinguish internal
 * errors from errors in the expression that the user provided.
 *
 * If possible, a caller should provide a Token or ParseNode with information
 * about where in the source string the problem occurred.
 */
class ParseError {
  constructor(
    message, // The error message
    token // An object providing position information
  ) {
    let error = " " + message;
    let start;

    const loc = token && token.loc;
    if (loc && loc.start <= loc.end) {
      // If we have the input and a position, make the error a bit fancier

      // Get the input
      const input = loc.lexer.input;

      // Prepend some information
      start = loc.start;
      const end = loc.end;
      if (start === input.length) {
        error += " at end of input: ";
      } else {
        error += " at position " + (start + 1) + ": \n";
      }

      // Underline token in question using combining underscores
      const underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332");

      // Extract some context from the input and add it to the error
      let left;
      if (start > 15) {
        left = "…" + input.slice(start - 15, start);
      } else {
        left = input.slice(0, start);
      }
      let right;
      if (end + 15 < input.length) {
        right = input.slice(end, end + 15) + "…";
      } else {
        right = input.slice(end);
      }
      error += left + underlined + right;
    }

    // Some hackery to make ParseError a prototype of Error
    // See http://stackoverflow.com/a/8460753
    const self = new Error(error);
    self.name = "ParseError";
    self.__proto__ = ParseError.prototype;
    self.position = start;
    return self;
  }
}

ParseError.prototype.__proto__ = Error.prototype;

//
/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * Provide a default value if a setting is undefined
 */
const deflt = function(setting, defaultIfUndefined) {
  return setting === undefined ? defaultIfUndefined : setting;
};

// hyphenate and escape adapted from Facebook's React under Apache 2 license

const uppercase = /([A-Z])/g;
const hyphenate = function(str) {
  return str.replace(uppercase, "-$1").toLowerCase();
};

const ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  '"': "&quot;",
  "'": "&#x27;"
};

const ESCAPE_REGEX = /[&><"']/g;

/**
 * Escapes text to prevent scripting attacks.
 */
function escape(text) {
  return String(text).replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
}

/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */
const getBaseElem = function(group) {
  if (group.type === "ordgroup") {
    if (group.body.length === 1) {
      return getBaseElem(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "color") {
    if (group.body.length === 1) {
      return getBaseElem(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "font") {
    return getBaseElem(group.body);
  } else {
    return group;
  }
};

/**
 * TeXbook algorithms often reference "character boxes", which are simply groups
 * with a single character in them. To decide if something is a character box,
 * we find its innermost group, and see if it is a single character.
 */
const isCharacterBox = function(group) {
  const baseElem = getBaseElem(group);

  // These are all the types of groups which hold single characters
  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom"
};

const assert = function(value) {
  if (!value) {
    throw new Error("Expected non-null, but got " + String(value));
  }
  return value;
};

/**
 * Return the protocol of a URL, or "_relative" if the URL does not specify a
 * protocol (and thus is relative), or `null` if URL has invalid protocol
 * (so should be outright rejected).
 */
const protocolFromUrl = function(url) {
  // Check for possible leading protocol.
  // https://url.spec.whatwg.org/#url-parsing strips leading whitespace
  // (\x00) or C0 control (\x00-\x1F) characters.
  // eslint-disable-next-line no-control-regex
  const protocol = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(url);
  if (!protocol) {
    return "_relative";
  }
  // Reject weird colons
  if (protocol[2] !== ":") {
    return null;
  }
  // Reject invalid characters in scheme according to
  // https://datatracker.ietf.org/doc/html/rfc3986#section-3.1
  if (!/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(protocol[1])) {
    return null;
  }
  // Lowercase the protocol
  return protocol[1].toLowerCase();
};

/**
 * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. The TeXbook
 * gives an acceptable rounding error of 100sp (which would be the nearest
 * 1/6551.6em with our ptPerEm = 10):
 * http://www.ctex.org/documents/shredder/src/texbook.pdf#page=69
 */
const round = function(n) {
  return +n.toFixed(4);
};

var utils = {
  deflt,
  escape,
  hyphenate,
  getBaseElem,
  isCharacterBox,
  protocolFromUrl,
  round
};

/**
 * This is a module for storing settings passed into Temml. It correctly handles
 * default settings.
 */


/**
 * The main Settings object
 */
class Settings {
  constructor(options) {
    // allow null options
    options = options || {};
    this.displayMode = utils.deflt(options.displayMode, false);    // boolean
    this.annotate = utils.deflt(options.annotate, false);           // boolean
    this.leqno = utils.deflt(options.leqno, false);                // boolean
    this.throwOnError = utils.deflt(options.throwOnError, false);  // boolean
    this.errorColor = utils.deflt(options.errorColor, "#b22222");  // string
    this.macros = options.macros || {};
    this.wrap = utils.deflt(options.wrap, "tex");                    // "tex" | "="
    this.xml = utils.deflt(options.xml, false);                     // boolean
    this.colorIsTextColor = utils.deflt(options.colorIsTextColor, false);  // booelean
    this.strict = utils.deflt(options.strict, false);    // boolean
    this.trust = utils.deflt(options.trust, false);  // trust context. See html.js.
    this.maxSize = (options.maxSize === undefined
      ? [Infinity, Infinity]
      : Array.isArray(options.maxSize)
      ? options.maxSize
      : [Infinity, Infinity]
    );
    this.maxExpand = Math.max(0, utils.deflt(options.maxExpand, 1000)); // number
  }

  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  isTrusted(context) {
    if (context.url && !context.protocol) {
      const protocol = utils.protocolFromUrl(context.url);
      if (protocol == null) {
        return false
      }
      context.protocol = protocol;
    }
    const trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
    return Boolean(trust);
  }
}

/**
 * All registered functions.
 * `functions.js` just exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary.
 */
const _functions = {};

/**
 * All MathML builders. Should be only used in the `define*` and the `build*ML`
 * functions.
 */
const _mathmlGroupBuilders = {};

function defineFunction({
  type,
  names,
  props,
  handler,
  mathmlBuilder
}) {
  // Set default values of functions
  const data = {
    type,
    numArgs: props.numArgs,
    argTypes: props.argTypes,
    allowedInArgument: !!props.allowedInArgument,
    allowedInText: !!props.allowedInText,
    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
    numOptionalArgs: props.numOptionalArgs || 0,
    infix: !!props.infix,
    primitive: !!props.primitive,
    handler: handler
  };
  for (let i = 0; i < names.length; ++i) {
    _functions[names[i]] = data;
  }
  if (type) {
    if (mathmlBuilder) {
      _mathmlGroupBuilders[type] = mathmlBuilder;
    }
  }
}

/**
 * Use this to register only the MathML builder for a function(e.g.
 * if the function's ParseNode is generated in Parser.js rather than via a
 * stand-alone handler provided to `defineFunction`).
 */
function defineFunctionBuilders({ type, mathmlBuilder }) {
  defineFunction({
    type,
    names: [],
    props: { numArgs: 0 },
    handler() {
      throw new Error("Should never be called.")
    },
    mathmlBuilder
  });
}

const normalizeArgument = function(arg) {
  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg
};

// Since the corresponding buildMathML function expects a
// list of elements, we normalize for different kinds of arguments
const ordargument = function(arg) {
  return arg.type === "ordgroup" ? arg.body : [arg]
};

/**
 * This node represents a document fragment, which contains elements, but when
 * placed into the DOM doesn't have any representation itself. It only contains
 * children and doesn't have any DOM node properties.
 */
class DocumentFragment {
  constructor(children) {
    this.children = children;
    this.classes = [];
    this.style = {};
  }

  hasClass(className) {
    return this.classes.includes(className);
  }

  /** Convert the fragment into a node. */
  toNode() {
    const frag = document.createDocumentFragment();

    for (let i = 0; i < this.children.length; i++) {
      frag.appendChild(this.children[i].toNode());
    }

    return frag;
  }

  /** Convert the fragment into HTML markup. */
  toMarkup() {
    let markup = "";

    // Simply concatenate the markup for the children together.
    for (let i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    return markup;
  }

  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  toText() {
    // To avoid this, we would subclass documentFragment separately for
    // MathML, but polyfills for subclassing is expensive per PR 1469.
    const toText = (child) => child.toText();
    return this.children.map(toText).join("");
  }
}

/**
 * These objects store the data about the DOM nodes we create, as well as some
 * extra data. They can then be transformed into real DOM nodes with the
 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
 * storing extra properties on the nodes, as well as providing a way to easily
 * work with the DOM.
 *
 * Similar functions for working with MathML nodes exist in mathMLTree.js.
 *
 */

/**
 * Create an HTML className based on a list of classes. In addition to joining
 * with spaces, we also remove empty classes.
 */
const createClass = function(classes) {
  return classes.filter((cls) => cls).join(" ");
};

const initNode = function(classes, style) {
  this.classes = classes || [];
  this.attributes = {};
  this.style = style || {};
};

/**
 * Convert into an HTML node
 */
const toNode = function(tagName) {
  const node = document.createElement(tagName);

  // Apply the class
  node.className = createClass(this.classes);

  // Apply inline styles
  for (const style in this.style) {
    if (Object.prototype.hasOwnProperty.call(this.style, style )) {
      node.style[style] = this.style[style];
    }
  }

  // Apply attributes
  for (const attr in this.attributes) {
    if (Object.prototype.hasOwnProperty.call(this.attributes, attr )) {
      node.setAttribute(attr, this.attributes[attr]);
    }
  }

  // Append the children, also as HTML nodes
  for (let i = 0; i < this.children.length; i++) {
    node.appendChild(this.children[i].toNode());
  }

  return node;
};

/**
 * Convert into an HTML markup string
 */
const toMarkup = function(tagName) {
  let markup = `<${tagName}`;

  // Add the class
  if (this.classes.length) {
    markup += ` class="${utils.escape(createClass(this.classes))}"`;
  }

  let styles = "";

  // Add the styles, after hyphenation
  for (const style in this.style) {
    if (Object.prototype.hasOwnProperty.call(this.style, style )) {
      styles += `${utils.hyphenate(style)}:${this.style[style]};`;
    }
  }

  if (styles) {
    markup += ` style="${styles}"`;
  }

  // Add the attributes
  for (const attr in this.attributes) {
    if (Object.prototype.hasOwnProperty.call(this.attributes, attr )) {
      markup += ` ${attr}="${utils.escape(this.attributes[attr])}"`;
    }
  }

  markup += ">";

  // Add the markup of the children, also as markup
  for (let i = 0; i < this.children.length; i++) {
    markup += this.children[i].toMarkup();
  }

  markup += `</${tagName}>`;

  return markup;
};

/**
 * This node represents a span node, with a className, a list of children, and
 * an inline style.
 *
 */
class Span {
  constructor(classes, children, style) {
    initNode.call(this, classes, style);
    this.children = children || [];
  }

  setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  }

  toNode() {
    return toNode.call(this, "span");
  }

  toMarkup() {
    return toMarkup.call(this, "span");
  }
}

let TextNode$1 = class TextNode {
  constructor(text) {
    this.text = text;
  }
  toNode() {
    return document.createTextNode(this.text);
  }
  toMarkup() {
    return utils.escape(this.text);
  }
};

// Create an <a href="…"> node.
class AnchorNode {
  constructor(href, classes, children) {
    this.href = href;
    this.classes = classes;
    this.children = children || [];
  }

  toNode() {
    const node = document.createElement("a");
    node.setAttribute("href", this.href);
    if (this.classes.length > 0) {
      node.className = createClass(this.classes);
    }
    for (let i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }
    return node
  }

  toMarkup() {
    let markup = `<a href='${utils.escape(this.href)}'`;
    if (this.classes.length > 0) {
      markup += ` class="${utils.escape(createClass(this.classes))}"`;
    }
    markup += ">";
    for (let i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    markup += "</a>";
    return markup
  }
}

/*
 * This node represents an image embed (<img>) element.
 */
class Img {
  constructor(src, alt, style) {
    this.alt = alt;
    this.src = src;
    this.classes = ["mord"];
    this.style = style;
  }

  hasClass(className) {
    return this.classes.includes(className);
  }

  toNode() {
    const node = document.createElement("img");
    node.src = this.src;
    node.alt = this.alt;
    node.className = "mord";

    // Apply inline styles
    for (const style in this.style) {
      if (Object.prototype.hasOwnProperty.call(this.style, style )) {
        node.style[style] = this.style[style];
      }
    }

    return node;
  }

  toMarkup() {
    let markup = `<img src='${this.src}' alt='${this.alt}'`;

    // Add the styles, after hyphenation
    let styles = "";
    for (const style in this.style) {
      if (Object.prototype.hasOwnProperty.call(this.style, style )) {
        styles += `${utils.hyphenate(style)}:${this.style[style]};`;
      }
    }
    if (styles) {
      markup += ` style="${utils.escape(styles)}"`;
    }

    markup += ">";
    return markup;
  }
}

//
/**
 * These objects store data about MathML nodes.
 * The `toNode` and `toMarkup` functions  create namespaced DOM nodes and
 * HTML text markup respectively.
 */


function newDocumentFragment(children) {
  return new DocumentFragment(children);
}

/**
 * This node represents a general purpose MathML node of any type,
 * for example, `"mo"` or `"mspace"`, corresponding to `<mo>` and
 * `<mspace>` tags).
 */
class MathNode {
  constructor(type, children, classes, style) {
    this.type = type;
    this.attributes = {};
    this.children = children || [];
    this.classes = classes || [];
    this.style = style || {};   // Used for <mstyle> elements
    this.label = "";
  }

  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */
  setAttribute(name, value) {
    this.attributes[name] = value;
  }

  /**
   * Gets an attribute on a MathML node.
   */
  getAttribute(name) {
    return this.attributes[name];
  }

  setLabel(value) {
    this.label = value;
  }

  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    const node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

    for (const attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    if (this.classes.length > 0) {
      node.className = createClass(this.classes);
    }

    // Apply inline styles
    for (const style in this.style) {
      if (Object.prototype.hasOwnProperty.call(this.style, style )) {
        node.style[style] = this.style[style];
      }
    }

    for (let i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }

    return node;
  }

  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    let markup = "<" + this.type;

    // Add the attributes
    for (const attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="';
        markup += utils.escape(this.attributes[attr]);
        markup += '"';
      }
    }

    if (this.classes.length > 0) {
      markup += ` class="${utils.escape(createClass(this.classes))}"`;
    }

    let styles = "";

    // Add the styles, after hyphenation
    for (const style in this.style) {
      if (Object.prototype.hasOwnProperty.call(this.style, style )) {
        styles += `${utils.hyphenate(style)}:${this.style[style]};`;
      }
    }

    if (styles) {
      markup += ` style="${styles}"`;
    }

    markup += ">";

    for (let i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    markup += "</" + this.type + ">";

    return markup;
  }

  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  toText() {
    return this.children.map((child) => child.toText()).join("");
  }
}

/**
 * This node represents a piece of text.
 */
class TextNode {
  constructor(text) {
    this.text = text;
  }

  /**
   * Converts the text node into a DOM text node.
   */
  toNode() {
    return document.createTextNode(this.text);
  }

  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  toMarkup() {
    return utils.escape(this.toText());
  }

  /**
   * Converts the text node into a string
   * (representing the text itself).
   */
  toText() {
    return this.text;
  }
}

// Do not make an <mrow> the only child of a <mstyle>.
// An <mstyle> acts as its own implicit <mrow>.
const wrapWithMstyle = expression => {
  let node;
  if (expression.length === 1 && expression[0].type === "mrow") {
    node = expression.pop();
    node.type = "mstyle";
  } else {
    node = new MathNode("mstyle", expression);
  }
  return node
};

var mathMLTree = {
  MathNode,
  TextNode,
  newDocumentFragment
};

/**
 * This file provides support for building horizontal stretchy elements.
 */


// TODO: Remove when Chromium stretches \widetilde & \widehat
const estimatedWidth = node => {
  let width = 0;
  if (node.body) {
    for (const item of node.body) {
      width += estimatedWidth(item);
    }
  } else if (node.type === "supsub") {
    width += estimatedWidth(node.base);
    if (node.sub) { width += 0.7 * estimatedWidth(node.sub); }
    if (node.sup) { width += 0.7 * estimatedWidth(node.sup); }
  } else if (node.type === "mathord" || node.type === "textord") {
    for (const ch of node.text.split('')) {
      const codePoint = ch.codePointAt(0);
      if ((0x60 < codePoint && codePoint < 0x7B) || (0x03B0 < codePoint && codePoint < 0x3CA)) {
        width += 0.56; // lower case latin or greek. Use advance width of letter n
      } else if (0x2F < codePoint && codePoint < 0x3A) {
        width += 0.50; // numerals.
      } else {
        width += 0.92; // advance width of letter M
      }
    }
  } else {
    width += 1.0;
  }
  return width
};

const stretchyCodePoint = {
  widehat: "^",
  widecheck: "ˇ",
  widetilde: "~",
  wideparen: "⏜", // \u23dc
  utilde: "~",
  overleftarrow: "\u2190",
  underleftarrow: "\u2190",
  xleftarrow: "\u2190",
  overrightarrow: "\u2192",
  underrightarrow: "\u2192",
  xrightarrow: "\u2192",
  underbrace: "\u23df",
  overbrace: "\u23de",
  overgroup: "\u23e0",
  overparen: "⏜",
  undergroup: "\u23e1",
  underparen: "\u23dd",
  overleftrightarrow: "\u2194",
  underleftrightarrow: "\u2194",
  xleftrightarrow: "\u2194",
  Overrightarrow: "\u21d2",
  xRightarrow: "\u21d2",
  overleftharpoon: "\u21bc",
  xleftharpoonup: "\u21bc",
  overrightharpoon: "\u21c0",
  xrightharpoonup: "\u21c0",
  xLeftarrow: "\u21d0",
  xLeftrightarrow: "\u21d4",
  xhookleftarrow: "\u21a9",
  xhookrightarrow: "\u21aa",
  xmapsto: "\u21a6",
  xrightharpoondown: "\u21c1",
  xleftharpoondown: "\u21bd",
  xtwoheadleftarrow: "\u219e",
  xtwoheadrightarrow: "\u21a0",
  xlongequal: "=",
  xrightleftarrows: "\u21c4",
  yields: "\u2192",
  yieldsLeft: "\u2190",
  mesomerism: "\u2194",
  longrightharpoonup: "\u21c0",
  longleftharpoondown: "\u21bd",
  eqrightharpoonup: "\u21c0",
  eqleftharpoondown: "\u21bd",
  "\\cdrightarrow": "\u2192",
  "\\cdleftarrow": "\u2190",
  "\\cdlongequal": "="
};

const mathMLnode = function(label) {
  const child = new mathMLTree.TextNode(stretchyCodePoint[label.slice(1)]);
  const node = new mathMLTree.MathNode("mo", [child]);
  node.setAttribute("stretchy", "true");
  return node
};

const crookedWides = ["\\widetilde", "\\widehat", "\\widecheck", "\\utilde"];

// TODO: Remove when Chromium stretches \widetilde & \widehat
const accentNode = (group) => {
  const mo = mathMLnode(group.label);
  if (crookedWides.includes(group.label)) {
    const width = estimatedWidth(group.base);
    if (1 < width && width < 1.6) {
      mo.classes.push("tml-crooked-2");
    } else if (1.6 <= width && width < 2.5) {
      mo.classes.push("tml-crooked-3");
    } else if (2.5 <= width) {
      mo.classes.push("tml-crooked-4");
    }
  }
  return mo
};

var stretchy = {
  mathMLnode,
  accentNode
};

/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are two properties they can have:
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
 * - replace: the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */

// Some of these have a "-token" suffix since these are also used as `ParseNode`
// types for raw text tokens, and we want to avoid conflicts with higher-level
// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
// looking up the `symbols` map.
const ATOMS = {
  bin: 1,
  close: 1,
  inner: 1,
  open: 1,
  punct: 1,
  rel: 1
};
const NON_ATOMS = {
  "accent-token": 1,
  mathord: 1,
  "op-token": 1,
  spacing: 1,
  textord: 1
};

const symbols = {
  math: {},
  text: {}
};

/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */
function defineSymbol(mode, group, replace, name, acceptUnicodeChar) {
  symbols[mode][name] = { group, replace };

  if (acceptUnicodeChar && replace) {
    symbols[mode][replace] = symbols[mode][name];
  }
}

// Some abbreviations for commonly used strings.
// This helps minify the code, and also spotting typos using jshint.

// modes:
const math = "math";
const text = "text";

// groups:
const accent = "accent-token";
const bin = "bin";
const close = "close";
const inner = "inner";
const mathord = "mathord";
const op = "op-token";
const open = "open";
const punct = "punct";
const rel = "rel";
const spacing = "spacing";
const textord = "textord";

// Now comes the symbol table

// Relation Symbols
defineSymbol(math, rel, "\u2261", "\\equiv", true);
defineSymbol(math, rel, "\u227a", "\\prec", true);
defineSymbol(math, rel, "\u227b", "\\succ", true);
defineSymbol(math, rel, "\u223c", "\\sim", true);
defineSymbol(math, rel, "\u27c2", "\\perp", true);
defineSymbol(math, rel, "\u2aaf", "\\preceq", true);
defineSymbol(math, rel, "\u2ab0", "\\succeq", true);
defineSymbol(math, rel, "\u2243", "\\simeq", true);
defineSymbol(math, rel, "\u224c", "\\backcong", true);
defineSymbol(math, rel, "|", "\\mid", true);
defineSymbol(math, rel, "\u226a", "\\ll", true);
defineSymbol(math, rel, "\u226b", "\\gg", true);
defineSymbol(math, rel, "\u224d", "\\asymp", true);
defineSymbol(math, rel, "\u2225", "\\parallel");
defineSymbol(math, rel, "\u2323", "\\smile", true);
defineSymbol(math, rel, "\u2291", "\\sqsubseteq", true);
defineSymbol(math, rel, "\u2292", "\\sqsupseteq", true);
defineSymbol(math, rel, "\u2250", "\\doteq", true);
defineSymbol(math, rel, "\u2322", "\\frown", true);
defineSymbol(math, rel, "\u220b", "\\ni", true);
defineSymbol(math, rel, "\u220c", "\\notni", true);
defineSymbol(math, rel, "\u221d", "\\propto", true);
defineSymbol(math, rel, "\u22a2", "\\vdash", true);
defineSymbol(math, rel, "\u22a3", "\\dashv", true);
defineSymbol(math, rel, "\u220b", "\\owns");
defineSymbol(math, rel, "\u2258", "\\arceq", true);
defineSymbol(math, rel, "\u2259", "\\wedgeq", true);
defineSymbol(math, rel, "\u225a", "\\veeeq", true);
defineSymbol(math, rel, "\u225b", "\\stareq", true);
defineSymbol(math, rel, "\u225d", "\\eqdef", true);
defineSymbol(math, rel, "\u225e", "\\measeq", true);
defineSymbol(math, rel, "\u225f", "\\questeq", true);
defineSymbol(math, rel, "\u2260", "\\ne", true);
defineSymbol(math, rel, "\u2260", "\\neq");
// unicodemath
defineSymbol(math, rel, "\u2a75", "\\eqeq", true);
defineSymbol(math, rel, "\u2a76", "\\eqeqeq", true);
// mathtools.sty
defineSymbol(math, rel, "\u2237", "\\dblcolon", true);
defineSymbol(math, rel, "\u2254", "\\coloneqq", true);
defineSymbol(math, rel, "\u2255", "\\eqqcolon", true);
defineSymbol(math, rel, "\u2239", "\\eqcolon", true);
defineSymbol(math, rel, "\u2A74", "\\Coloneqq", true);

// Punctuation
defineSymbol(math, punct, "\u002e", "\\ldotp");
defineSymbol(math, punct, "\u00b7", "\\cdotp");

// Misc Symbols
defineSymbol(math, textord, "\u0023", "\\#");
defineSymbol(text, textord, "\u0023", "\\#");
defineSymbol(math, textord, "\u0026", "\\&");
defineSymbol(text, textord, "\u0026", "\\&");
defineSymbol(math, textord, "\u2135", "\\aleph", true);
defineSymbol(math, textord, "\u2200", "\\forall", true);
defineSymbol(math, textord, "\u210f", "\\hbar", true);
defineSymbol(math, textord, "\u2203", "\\exists", true);
// ∇ is actually a unary operator, not binary. But this works.
defineSymbol(math, bin, "\u2207", "\\nabla", true);
defineSymbol(math, textord, "\u266d", "\\flat", true);
defineSymbol(math, textord, "\u2113", "\\ell", true);
defineSymbol(math, textord, "\u266e", "\\natural", true);
defineSymbol(math, textord, "Å", "\\Angstrom", true);
defineSymbol(text, textord, "Å", "\\Angstrom", true);
defineSymbol(math, textord, "\u2663", "\\clubsuit", true);
defineSymbol(math, textord, "\u2667", "\\varclubsuit", true);
defineSymbol(math, textord, "\u2118", "\\wp", true);
defineSymbol(math, textord, "\u266f", "\\sharp", true);
defineSymbol(math, textord, "\u2662", "\\diamondsuit", true);
defineSymbol(math, textord, "\u2666", "\\vardiamondsuit", true);
defineSymbol(math, textord, "\u211c", "\\Re", true);
defineSymbol(math, textord, "\u2661", "\\heartsuit", true);
defineSymbol(math, textord, "\u2665", "\\varheartsuit", true);
defineSymbol(math, textord, "\u2111", "\\Im", true);
defineSymbol(math, textord, "\u2660", "\\spadesuit", true);
defineSymbol(math, textord, "\u2664", "\\varspadesuit", true);
defineSymbol(math, textord, "\u2640", "\\female", true);
defineSymbol(math, textord, "\u2642", "\\male", true);
defineSymbol(math, textord, "\u00a7", "\\S", true);
defineSymbol(text, textord, "\u00a7", "\\S");
defineSymbol(math, textord, "\u00b6", "\\P", true);
defineSymbol(text, textord, "\u00b6", "\\P");
defineSymbol(text, textord, "\u263a", "\\smiley", true);
defineSymbol(math, textord, "\u263a", "\\smiley", true);

// Math and Text
defineSymbol(math, textord, "\u2020", "\\dag");
defineSymbol(text, textord, "\u2020", "\\dag");
defineSymbol(text, textord, "\u2020", "\\textdagger");
defineSymbol(math, textord, "\u2021", "\\ddag");
defineSymbol(text, textord, "\u2021", "\\ddag");
defineSymbol(text, textord, "\u2021", "\\textdaggerdbl");

// Large Delimiters
defineSymbol(math, close, "\u23b1", "\\rmoustache", true);
defineSymbol(math, open, "\u23b0", "\\lmoustache", true);
defineSymbol(math, close, "\u27ef", "\\rgroup", true);
defineSymbol(math, open, "\u27ee", "\\lgroup", true);

// Binary Operators
defineSymbol(math, bin, "\u2213", "\\mp", true);
defineSymbol(math, bin, "\u2296", "\\ominus", true);
defineSymbol(math, bin, "\u228e", "\\uplus", true);
defineSymbol(math, bin, "\u2293", "\\sqcap", true);
defineSymbol(math, bin, "\u2217", "\\ast");
defineSymbol(math, bin, "\u2294", "\\sqcup", true);
defineSymbol(math, bin, "\u25ef", "\\bigcirc", true);
defineSymbol(math, bin, "\u2219", "\\bullet", true);
defineSymbol(math, bin, "\u2021", "\\ddagger");
defineSymbol(math, bin, "\u2240", "\\wr", true);
defineSymbol(math, bin, "\u2a3f", "\\amalg");
defineSymbol(math, bin, "\u0026", "\\And"); // from amsmath
defineSymbol(math, bin, "\u2AFD", "\\sslash", true); // from stmaryrd

// Arrow Symbols
defineSymbol(math, rel, "\u27f5", "\\longleftarrow", true);
defineSymbol(math, rel, "\u21d0", "\\Leftarrow", true);
defineSymbol(math, rel, "\u27f8", "\\Longleftarrow", true);
defineSymbol(math, rel, "\u27f6", "\\longrightarrow", true);
defineSymbol(math, rel, "\u21d2", "\\Rightarrow", true);
defineSymbol(math, rel, "\u27f9", "\\Longrightarrow", true);
defineSymbol(math, rel, "\u2194", "\\leftrightarrow", true);
defineSymbol(math, rel, "\u27f7", "\\longleftrightarrow", true);
defineSymbol(math, rel, "\u21d4", "\\Leftrightarrow", true);
defineSymbol(math, rel, "\u27fa", "\\Longleftrightarrow", true);
defineSymbol(math, rel, "\u21a4", "\\mapsfrom", true);
defineSymbol(math, rel, "\u21a6", "\\mapsto", true);
defineSymbol(math, rel, "\u27fc", "\\longmapsto", true);
defineSymbol(math, rel, "\u2197", "\\nearrow", true);
defineSymbol(math, rel, "\u21a9", "\\hookleftarrow", true);
defineSymbol(math, rel, "\u21aa", "\\hookrightarrow", true);
defineSymbol(math, rel, "\u2198", "\\searrow", true);
defineSymbol(math, rel, "\u21bc", "\\leftharpoonup", true);
defineSymbol(math, rel, "\u21c0", "\\rightharpoonup", true);
defineSymbol(math, rel, "\u2199", "\\swarrow", true);
defineSymbol(math, rel, "\u21bd", "\\leftharpoondown", true);
defineSymbol(math, rel, "\u21c1", "\\rightharpoondown", true);
defineSymbol(math, rel, "\u2196", "\\nwarrow", true);
defineSymbol(math, rel, "\u21cc", "\\rightleftharpoons", true);
defineSymbol(math, mathord, "\u21af", "\\lightning", true);
defineSymbol(math, mathord, "\u220E", "\\QED", true);
defineSymbol(math, mathord, "\u2030", "\\permil", true);
defineSymbol(text, textord, "\u2030", "\\permil");
defineSymbol(math, mathord, "\u2609", "\\astrosun", true);
defineSymbol(math, mathord, "\u263c", "\\sun", true);
defineSymbol(math, mathord, "\u263e", "\\leftmoon", true);
defineSymbol(math, mathord, "\u263d", "\\rightmoon", true);
defineSymbol(math, mathord, "\u2295", "\\Earth");

// AMS Negated Binary Relations
defineSymbol(math, rel, "\u226e", "\\nless", true);
// Symbol names preceeded by "@" each have a corresponding macro.
defineSymbol(math, rel, "\u2a87", "\\lneq", true);
defineSymbol(math, rel, "\u2268", "\\lneqq", true);
defineSymbol(math, rel, "\u2268\ufe00", "\\lvertneqq");
defineSymbol(math, rel, "\u22e6", "\\lnsim", true);
defineSymbol(math, rel, "\u2a89", "\\lnapprox", true);
defineSymbol(math, rel, "\u2280", "\\nprec", true);
// unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.
defineSymbol(math, rel, "\u22e0", "\\npreceq", true);
defineSymbol(math, rel, "\u22e8", "\\precnsim", true);
defineSymbol(math, rel, "\u2ab9", "\\precnapprox", true);
defineSymbol(math, rel, "\u2241", "\\nsim", true);
defineSymbol(math, rel, "\u2224", "\\nmid", true);
defineSymbol(math, rel, "\u2224", "\\nshortmid");
defineSymbol(math, rel, "\u22ac", "\\nvdash", true);
defineSymbol(math, rel, "\u22ad", "\\nvDash", true);
defineSymbol(math, rel, "\u22ea", "\\ntriangleleft");
defineSymbol(math, rel, "\u22ec", "\\ntrianglelefteq", true);
defineSymbol(math, rel, "\u2284", "\\nsubset", true);
defineSymbol(math, rel, "\u2285", "\\nsupset", true);
defineSymbol(math, rel, "\u228a", "\\subsetneq", true);
defineSymbol(math, rel, "\u228a\ufe00", "\\varsubsetneq");
defineSymbol(math, rel, "\u2acb", "\\subsetneqq", true);
defineSymbol(math, rel, "\u2acb\ufe00", "\\varsubsetneqq");
defineSymbol(math, rel, "\u226f", "\\ngtr", true);
defineSymbol(math, rel, "\u2a88", "\\gneq", true);
defineSymbol(math, rel, "\u2269", "\\gneqq", true);
defineSymbol(math, rel, "\u2269\ufe00", "\\gvertneqq");
defineSymbol(math, rel, "\u22e7", "\\gnsim", true);
defineSymbol(math, rel, "\u2a8a", "\\gnapprox", true);
defineSymbol(math, rel, "\u2281", "\\nsucc", true);
// unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.
defineSymbol(math, rel, "\u22e1", "\\nsucceq", true);
defineSymbol(math, rel, "\u22e9", "\\succnsim", true);
defineSymbol(math, rel, "\u2aba", "\\succnapprox", true);
// unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.
defineSymbol(math, rel, "\u2246", "\\ncong", true);
defineSymbol(math, rel, "\u2226", "\\nparallel", true);
defineSymbol(math, rel, "\u2226", "\\nshortparallel");
defineSymbol(math, rel, "\u22af", "\\nVDash", true);
defineSymbol(math, rel, "\u22eb", "\\ntriangleright");
defineSymbol(math, rel, "\u22ed", "\\ntrianglerighteq", true);
defineSymbol(math, rel, "\u228b", "\\supsetneq", true);
defineSymbol(math, rel, "\u228b", "\\varsupsetneq");
defineSymbol(math, rel, "\u2acc", "\\supsetneqq", true);
defineSymbol(math, rel, "\u2acc\ufe00", "\\varsupsetneqq");
defineSymbol(math, rel, "\u22ae", "\\nVdash", true);
defineSymbol(math, rel, "\u2ab5", "\\precneqq", true);
defineSymbol(math, rel, "\u2ab6", "\\succneqq", true);
defineSymbol(math, bin, "\u22b4", "\\unlhd");
defineSymbol(math, bin, "\u22b5", "\\unrhd");

// AMS Negated Arrows
defineSymbol(math, rel, "\u219a", "\\nleftarrow", true);
defineSymbol(math, rel, "\u219b", "\\nrightarrow", true);
defineSymbol(math, rel, "\u21cd", "\\nLeftarrow", true);
defineSymbol(math, rel, "\u21cf", "\\nRightarrow", true);
defineSymbol(math, rel, "\u21ae", "\\nleftrightarrow", true);
defineSymbol(math, rel, "\u21ce", "\\nLeftrightarrow", true);

// AMS Misc
defineSymbol(math, rel, "\u25b3", "\\vartriangle");
defineSymbol(math, textord, "\u210f", "\\hslash");
defineSymbol(math, textord, "\u25bd", "\\triangledown");
defineSymbol(math, textord, "\u25ca", "\\lozenge");
defineSymbol(math, textord, "\u24c8", "\\circledS");
defineSymbol(math, textord, "\u00ae", "\\circledR", true);
defineSymbol(text, textord, "\u00ae", "\\circledR");
defineSymbol(text, textord, "\u00ae", "\\textregistered");
defineSymbol(math, textord, "\u2221", "\\measuredangle", true);
defineSymbol(math, textord, "\u2204", "\\nexists");
defineSymbol(math, textord, "\u2127", "\\mho");
defineSymbol(math, textord, "\u2132", "\\Finv", true);
defineSymbol(math, textord, "\u2141", "\\Game", true);
defineSymbol(math, textord, "\u2035", "\\backprime");
defineSymbol(math, textord, "\u2036", "\\backdprime");
defineSymbol(math, textord, "\u2037", "\\backtrprime");
defineSymbol(math, textord, "\u25b2", "\\blacktriangle");
defineSymbol(math, textord, "\u25bc", "\\blacktriangledown");
defineSymbol(math, textord, "\u25a0", "\\blacksquare");
defineSymbol(math, textord, "\u29eb", "\\blacklozenge");
defineSymbol(math, textord, "\u2605", "\\bigstar");
defineSymbol(math, textord, "\u2222", "\\sphericalangle", true);
defineSymbol(math, textord, "\u2201", "\\complement", true);
defineSymbol(math, textord, "\u2571", "\\diagup");
defineSymbol(math, textord, "\u2572", "\\diagdown");
defineSymbol(math, textord, "\u25a1", "\\square");
defineSymbol(math, textord, "\u25a1", "\\Box");
defineSymbol(math, textord, "\u25ca", "\\Diamond");
// unicode-math maps U+A5 to \mathyen. We map to AMS function \yen
defineSymbol(math, textord, "\u00a5", "\\yen", true);
defineSymbol(text, textord, "\u00a5", "\\yen", true);
defineSymbol(math, textord, "\u2713", "\\checkmark", true);
defineSymbol(text, textord, "\u2713", "\\checkmark");
defineSymbol(math, textord, "\u2717", "\\ballotx", true);
defineSymbol(text, textord, "\u2717", "\\ballotx");
defineSymbol(text, textord, "\u2022", "\\textbullet");

// AMS Hebrew
defineSymbol(math, textord, "\u2136", "\\beth", true);
defineSymbol(math, textord, "\u2138", "\\daleth", true);
defineSymbol(math, textord, "\u2137", "\\gimel", true);

// AMS Greek
defineSymbol(math, textord, "\u03dd", "\\digamma", true);
defineSymbol(math, textord, "\u03f0", "\\varkappa");

// AMS Delimiters
defineSymbol(math, open, "\u231C", "\\ulcorner", true);
defineSymbol(math, close, "\u231D", "\\urcorner", true);
defineSymbol(math, open, "\u231E", "\\llcorner", true);
defineSymbol(math, close, "\u231F", "\\lrcorner", true);

// AMS Binary Relations
defineSymbol(math, rel, "\u2266", "\\leqq", true);
defineSymbol(math, rel, "\u2a7d", "\\leqslant", true);
defineSymbol(math, rel, "\u2a95", "\\eqslantless", true);
defineSymbol(math, rel, "\u2272", "\\lesssim", true);
defineSymbol(math, rel, "\u2a85", "\\lessapprox", true);
defineSymbol(math, rel, "\u224a", "\\approxeq", true);
defineSymbol(math, bin, "\u22d6", "\\lessdot");
defineSymbol(math, rel, "\u22d8", "\\lll", true);
defineSymbol(math, rel, "\u2276", "\\lessgtr", true);
defineSymbol(math, rel, "\u22da", "\\lesseqgtr", true);
defineSymbol(math, rel, "\u2a8b", "\\lesseqqgtr", true);
defineSymbol(math, rel, "\u2251", "\\doteqdot");
defineSymbol(math, rel, "\u2253", "\\risingdotseq", true);
defineSymbol(math, rel, "\u2252", "\\fallingdotseq", true);
defineSymbol(math, rel, "\u223d", "\\backsim", true);
defineSymbol(math, rel, "\u22cd", "\\backsimeq", true);
defineSymbol(math, rel, "\u2ac5", "\\subseteqq", true);
defineSymbol(math, rel, "\u22d0", "\\Subset", true);
defineSymbol(math, rel, "\u228f", "\\sqsubset", true);
defineSymbol(math, rel, "\u227c", "\\preccurlyeq", true);
defineSymbol(math, rel, "\u22de", "\\curlyeqprec", true);
defineSymbol(math, rel, "\u227e", "\\precsim", true);
defineSymbol(math, rel, "\u2ab7", "\\precapprox", true);
defineSymbol(math, rel, "\u22b2", "\\vartriangleleft");
defineSymbol(math, rel, "\u22b4", "\\trianglelefteq");
defineSymbol(math, rel, "\u22a8", "\\vDash", true);
defineSymbol(math, rel, "\u22ab", "\\VDash", true);
defineSymbol(math, rel, "\u22aa", "\\Vvdash", true);
defineSymbol(math, rel, "\u2323", "\\smallsmile");
defineSymbol(math, rel, "\u2322", "\\smallfrown");
defineSymbol(math, rel, "\u224f", "\\bumpeq", true);
defineSymbol(math, rel, "\u224e", "\\Bumpeq", true);
defineSymbol(math, rel, "\u2267", "\\geqq", true);
defineSymbol(math, rel, "\u2a7e", "\\geqslant", true);
defineSymbol(math, rel, "\u2a96", "\\eqslantgtr", true);
defineSymbol(math, rel, "\u2273", "\\gtrsim", true);
defineSymbol(math, rel, "\u2a86", "\\gtrapprox", true);
defineSymbol(math, bin, "\u22d7", "\\gtrdot");
defineSymbol(math, rel, "\u22d9", "\\ggg", true);
defineSymbol(math, rel, "\u2277", "\\gtrless", true);
defineSymbol(math, rel, "\u22db", "\\gtreqless", true);
defineSymbol(math, rel, "\u2a8c", "\\gtreqqless", true);
defineSymbol(math, rel, "\u2256", "\\eqcirc", true);
defineSymbol(math, rel, "\u2257", "\\circeq", true);
defineSymbol(math, rel, "\u225c", "\\triangleq", true);
defineSymbol(math, rel, "\u223c", "\\thicksim");
defineSymbol(math, rel, "\u2248", "\\thickapprox");
defineSymbol(math, rel, "\u2ac6", "\\supseteqq", true);
defineSymbol(math, rel, "\u22d1", "\\Supset", true);
defineSymbol(math, rel, "\u2290", "\\sqsupset", true);
defineSymbol(math, rel, "\u227d", "\\succcurlyeq", true);
defineSymbol(math, rel, "\u22df", "\\curlyeqsucc", true);
defineSymbol(math, rel, "\u227f", "\\succsim", true);
defineSymbol(math, rel, "\u2ab8", "\\succapprox", true);
defineSymbol(math, rel, "\u22b3", "\\vartriangleright");
defineSymbol(math, rel, "\u22b5", "\\trianglerighteq");
defineSymbol(math, rel, "\u22a9", "\\Vdash", true);
defineSymbol(math, rel, "\u2223", "\\shortmid");
defineSymbol(math, rel, "\u2225", "\\shortparallel");
defineSymbol(math, rel, "\u226c", "\\between", true);
defineSymbol(math, rel, "\u22d4", "\\pitchfork", true);
defineSymbol(math, rel, "\u221d", "\\varpropto");
defineSymbol(math, rel, "\u25c0", "\\blacktriangleleft");
// unicode-math says that \therefore is a mathord atom.
// We kept the amssymb atom type, which is rel.
defineSymbol(math, rel, "\u2234", "\\therefore", true);
defineSymbol(math, rel, "\u220d", "\\backepsilon");
defineSymbol(math, rel, "\u25b6", "\\blacktriangleright");
// unicode-math says that \because is a mathord atom.
// We kept the amssymb atom type, which is rel.
defineSymbol(math, rel, "\u2235", "\\because", true);
defineSymbol(math, rel, "\u22d8", "\\llless");
defineSymbol(math, rel, "\u22d9", "\\gggtr");
defineSymbol(math, bin, "\u22b2", "\\lhd");
defineSymbol(math, bin, "\u22b3", "\\rhd");
defineSymbol(math, rel, "\u2242", "\\eqsim", true);
defineSymbol(math, rel, "\u2251", "\\Doteq", true);
defineSymbol(math, rel, "\u297d", "\\strictif", true);
defineSymbol(math, rel, "\u297c", "\\strictfi", true);

// AMS Binary Operators
defineSymbol(math, bin, "\u2214", "\\dotplus", true);
defineSymbol(math, bin, "\u2216", "\\smallsetminus");
defineSymbol(math, bin, "\u22d2", "\\Cap", true);
defineSymbol(math, bin, "\u22d3", "\\Cup", true);
defineSymbol(math, bin, "\u2a5e", "\\doublebarwedge", true);
defineSymbol(math, bin, "\u229f", "\\boxminus", true);
defineSymbol(math, bin, "\u229e", "\\boxplus", true);
defineSymbol(math, bin, "\u29C4", "\\boxslash", true);
defineSymbol(math, bin, "\u22c7", "\\divideontimes", true);
defineSymbol(math, bin, "\u22c9", "\\ltimes", true);
defineSymbol(math, bin, "\u22ca", "\\rtimes", true);
defineSymbol(math, bin, "\u22cb", "\\leftthreetimes", true);
defineSymbol(math, bin, "\u22cc", "\\rightthreetimes", true);
defineSymbol(math, bin, "\u22cf", "\\curlywedge", true);
defineSymbol(math, bin, "\u22ce", "\\curlyvee", true);
defineSymbol(math, bin, "\u229d", "\\circleddash", true);
defineSymbol(math, bin, "\u229b", "\\circledast", true);
defineSymbol(math, bin, "\u22ba", "\\intercal", true);
defineSymbol(math, bin, "\u22d2", "\\doublecap");
defineSymbol(math, bin, "\u22d3", "\\doublecup");
defineSymbol(math, bin, "\u22a0", "\\boxtimes", true);
defineSymbol(math, bin, "\u22c8", "\\bowtie", true);
defineSymbol(math, bin, "\u22c8", "\\Join");
defineSymbol(math, bin, "\u27d5", "\\leftouterjoin", true);
defineSymbol(math, bin, "\u27d6", "\\rightouterjoin", true);
defineSymbol(math, bin, "\u27d7", "\\fullouterjoin", true);

// stix Binary Operators
defineSymbol(math, bin, "\u2238", "\\dotminus", true);
defineSymbol(math, bin, "\u27D1", "\\wedgedot", true);
defineSymbol(math, bin, "\u27C7", "\\veedot", true);
defineSymbol(math, bin, "\u2A62", "\\doublebarvee", true);
defineSymbol(math, bin, "\u2A63", "\\veedoublebar", true);
defineSymbol(math, bin, "\u2A5F", "\\wedgebar", true);
defineSymbol(math, bin, "\u2A60", "\\wedgedoublebar", true);
defineSymbol(math, bin, "\u2A54", "\\Vee", true);
defineSymbol(math, bin, "\u2A53", "\\Wedge", true);
defineSymbol(math, bin, "\u2A43", "\\barcap", true);
defineSymbol(math, bin, "\u2A42", "\\barcup", true);
defineSymbol(math, bin, "\u2A48", "\\capbarcup", true);
defineSymbol(math, bin, "\u2A40", "\\capdot", true);
defineSymbol(math, bin, "\u2A47", "\\capovercup", true);
defineSymbol(math, bin, "\u2A46", "\\cupovercap", true);
defineSymbol(math, bin, "\u2A4D", "\\closedvarcap", true);
defineSymbol(math, bin, "\u2A4C", "\\closedvarcup", true);
defineSymbol(math, bin, "\u2A2A", "\\minusdot", true);
defineSymbol(math, bin, "\u2A2B", "\\minusfdots", true);
defineSymbol(math, bin, "\u2A2C", "\\minusrdots", true);
defineSymbol(math, bin, "\u22BB", "\\Xor", true);
defineSymbol(math, bin, "\u22BC", "\\Nand", true);
defineSymbol(math, bin, "\u22BD", "\\Nor", true);
defineSymbol(math, bin, "\u22BD", "\\barvee");
defineSymbol(math, bin, "\u2AF4", "\\interleave", true);
defineSymbol(math, bin, "\u29E2", "\\shuffle", true);
defineSymbol(math, bin, "\u2AF6", "\\threedotcolon", true);
defineSymbol(math, bin, "\u2982", "\\typecolon", true);
defineSymbol(math, bin, "\u223E", "\\invlazys", true);
defineSymbol(math, bin, "\u2A4B", "\\twocaps", true);
defineSymbol(math, bin, "\u2A4A", "\\twocups", true);
defineSymbol(math, bin, "\u2A4E", "\\Sqcap", true);
defineSymbol(math, bin, "\u2A4F", "\\Sqcup", true);
defineSymbol(math, bin, "\u2A56", "\\veeonvee", true);
defineSymbol(math, bin, "\u2A55", "\\wedgeonwedge", true);
defineSymbol(math, bin, "\u29D7", "\\blackhourglass", true);
defineSymbol(math, bin, "\u29C6", "\\boxast", true);
defineSymbol(math, bin, "\u29C8", "\\boxbox", true);
defineSymbol(math, bin, "\u29C7", "\\boxcircle", true);
defineSymbol(math, bin, "\u229C", "\\circledequal", true);
defineSymbol(math, bin, "\u29B7", "\\circledparallel", true);
defineSymbol(math, bin, "\u29B6", "\\circledvert", true);
defineSymbol(math, bin, "\u29B5", "\\circlehbar", true);
defineSymbol(math, bin, "\u27E1", "\\concavediamond", true);
defineSymbol(math, bin, "\u27E2", "\\concavediamondtickleft", true);
defineSymbol(math, bin, "\u27E3", "\\concavediamondtickright", true);
defineSymbol(math, bin, "\u22C4", "\\diamond", true);
defineSymbol(math, bin, "\u29D6", "\\hourglass", true);
defineSymbol(math, bin, "\u27E0", "\\lozengeminus", true);
defineSymbol(math, bin, "\u233D", "\\obar", true);
defineSymbol(math, bin, "\u29B8", "\\obslash", true);
defineSymbol(math, bin, "\u2A38", "\\odiv", true);
defineSymbol(math, bin, "\u29C1", "\\ogreaterthan", true);
defineSymbol(math, bin, "\u29C0", "\\olessthan", true);
defineSymbol(math, bin, "\u29B9", "\\operp", true);
defineSymbol(math, bin, "\u2A37", "\\Otimes", true);
defineSymbol(math, bin, "\u2A36", "\\otimeshat", true);
defineSymbol(math, bin, "\u22C6", "\\star", true);
defineSymbol(math, bin, "\u25B3", "\\triangle", true);
defineSymbol(math, bin, "\u2A3A", "\\triangleminus", true);
defineSymbol(math, bin, "\u2A39", "\\triangleplus", true);
defineSymbol(math, bin, "\u2A3B", "\\triangletimes", true);
defineSymbol(math, bin, "\u27E4", "\\whitesquaretickleft", true);
defineSymbol(math, bin, "\u27E5", "\\whitesquaretickright", true);
defineSymbol(math, bin, "\u2A33", "\\smashtimes", true);

// AMS Arrows
// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
// We'll map it to AMS function \dashrightarrow. It produces the same atom.
defineSymbol(math, rel, "\u21e2", "\\dashrightarrow", true);
// unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.
defineSymbol(math, rel, "\u21e0", "\\dashleftarrow", true);
defineSymbol(math, rel, "\u21c7", "\\leftleftarrows", true);
defineSymbol(math, rel, "\u21c6", "\\leftrightarrows", true);
defineSymbol(math, rel, "\u21da", "\\Lleftarrow", true);
defineSymbol(math, rel, "\u219e", "\\twoheadleftarrow", true);
defineSymbol(math, rel, "\u21a2", "\\leftarrowtail", true);
defineSymbol(math, rel, "\u21ab", "\\looparrowleft", true);
defineSymbol(math, rel, "\u21cb", "\\leftrightharpoons", true);
defineSymbol(math, rel, "\u21b6", "\\curvearrowleft", true);
// unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.
defineSymbol(math, rel, "\u21ba", "\\circlearrowleft", true);
defineSymbol(math, rel, "\u21b0", "\\Lsh", true);
defineSymbol(math, rel, "\u21c8", "\\upuparrows", true);
defineSymbol(math, rel, "\u21bf", "\\upharpoonleft", true);
defineSymbol(math, rel, "\u21c3", "\\downharpoonleft", true);
defineSymbol(math, rel, "\u22b6", "\\origof", true);
defineSymbol(math, rel, "\u22b7", "\\imageof", true);
defineSymbol(math, rel, "\u22b8", "\\multimap", true);
defineSymbol(math, rel, "\u21ad", "\\leftrightsquigarrow", true);
defineSymbol(math, rel, "\u21c9", "\\rightrightarrows", true);
defineSymbol(math, rel, "\u21c4", "\\rightleftarrows", true);
defineSymbol(math, rel, "\u21a0", "\\twoheadrightarrow", true);
defineSymbol(math, rel, "\u21a3", "\\rightarrowtail", true);
defineSymbol(math, rel, "\u21ac", "\\looparrowright", true);
defineSymbol(math, rel, "\u21b7", "\\curvearrowright", true);
// unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.
defineSymbol(math, rel, "\u21bb", "\\circlearrowright", true);
defineSymbol(math, rel, "\u21b1", "\\Rsh", true);
defineSymbol(math, rel, "\u21ca", "\\downdownarrows", true);
defineSymbol(math, rel, "\u21be", "\\upharpoonright", true);
defineSymbol(math, rel, "\u21c2", "\\downharpoonright", true);
defineSymbol(math, rel, "\u21dd", "\\rightsquigarrow", true);
defineSymbol(math, rel, "\u21dd", "\\leadsto");
defineSymbol(math, rel, "\u21db", "\\Rrightarrow", true);
defineSymbol(math, rel, "\u21be", "\\restriction");

defineSymbol(math, textord, "\u2018", "`");
defineSymbol(math, textord, "$", "\\$");
defineSymbol(text, textord, "$", "\\$");
defineSymbol(text, textord, "$", "\\textdollar");
defineSymbol(math, textord, "¢", "\\cent");
defineSymbol(text, textord, "¢", "\\cent");
defineSymbol(math, textord, "%", "\\%");
defineSymbol(text, textord, "%", "\\%");
defineSymbol(math, textord, "_", "\\_");
defineSymbol(text, textord, "_", "\\_");
defineSymbol(text, textord, "_", "\\textunderscore");
defineSymbol(text, textord, "\u2423", "\\textvisiblespace", true);
defineSymbol(math, textord, "\u2220", "\\angle", true);
defineSymbol(math, textord, "\u221e", "\\infty", true);
defineSymbol(math, textord, "\u2032", "\\prime");
defineSymbol(math, textord, "\u2033", "\\dprime");
defineSymbol(math, textord, "\u2034", "\\trprime");
defineSymbol(math, textord, "\u2057", "\\qprime");
defineSymbol(math, textord, "\u25b3", "\\triangle");
defineSymbol(text, textord, "\u0391", "\\Alpha", true);
defineSymbol(text, textord, "\u0392", "\\Beta", true);
defineSymbol(text, textord, "\u0393", "\\Gamma", true);
defineSymbol(text, textord, "\u0394", "\\Delta", true);
defineSymbol(text, textord, "\u0395", "\\Epsilon", true);
defineSymbol(text, textord, "\u0396", "\\Zeta", true);
defineSymbol(text, textord, "\u0397", "\\Eta", true);
defineSymbol(text, textord, "\u0398", "\\Theta", true);
defineSymbol(text, textord, "\u0399", "\\Iota", true);
defineSymbol(text, textord, "\u039a", "\\Kappa", true);
defineSymbol(text, textord, "\u039b", "\\Lambda", true);
defineSymbol(text, textord, "\u039c", "\\Mu", true);
defineSymbol(text, textord, "\u039d", "\\Nu", true);
defineSymbol(text, textord, "\u039e", "\\Xi", true);
defineSymbol(text, textord, "\u039f", "\\Omicron", true);
defineSymbol(text, textord, "\u03a0", "\\Pi", true);
defineSymbol(text, textord, "\u03a1", "\\Rho", true);
defineSymbol(text, textord, "\u03a3", "\\Sigma", true);
defineSymbol(text, textord, "\u03a4", "\\Tau", true);
defineSymbol(text, textord, "\u03a5", "\\Upsilon", true);
defineSymbol(text, textord, "\u03a6", "\\Phi", true);
defineSymbol(text, textord, "\u03a7", "\\Chi", true);
defineSymbol(text, textord, "\u03a8", "\\Psi", true);
defineSymbol(text, textord, "\u03a9", "\\Omega", true);
defineSymbol(math, mathord, "\u0391", "\\Alpha", true);
defineSymbol(math, mathord, "\u0392", "\\Beta", true);
defineSymbol(math, mathord, "\u0393", "\\Gamma", true);
defineSymbol(math, mathord, "\u0394", "\\Delta", true);
defineSymbol(math, mathord, "\u0395", "\\Epsilon", true);
defineSymbol(math, mathord, "\u0396", "\\Zeta", true);
defineSymbol(math, mathord, "\u0397", "\\Eta", true);
defineSymbol(math, mathord, "\u0398", "\\Theta", true);
defineSymbol(math, mathord, "\u0399", "\\Iota", true);
defineSymbol(math, mathord, "\u039a", "\\Kappa", true);
defineSymbol(math, mathord, "\u039b", "\\Lambda", true);
defineSymbol(math, mathord, "\u039c", "\\Mu", true);
defineSymbol(math, mathord, "\u039d", "\\Nu", true);
defineSymbol(math, mathord, "\u039e", "\\Xi", true);
defineSymbol(math, mathord, "\u039f", "\\Omicron", true);
defineSymbol(math, mathord, "\u03a0", "\\Pi", true);
defineSymbol(math, mathord, "\u03a1", "\\Rho", true);
defineSymbol(math, mathord, "\u03a3", "\\Sigma", true);
defineSymbol(math, mathord, "\u03a4", "\\Tau", true);
defineSymbol(math, mathord, "\u03a5", "\\Upsilon", true);
defineSymbol(math, mathord, "\u03a6", "\\Phi", true);
defineSymbol(math, mathord, "\u03a7", "\\Chi", true);
defineSymbol(math, mathord, "\u03a8", "\\Psi", true);
defineSymbol(math, mathord, "\u03a9", "\\Omega", true);
defineSymbol(math, open, "\u00ac", "\\neg", true);
defineSymbol(math, open, "\u00ac", "\\lnot");
defineSymbol(math, textord, "\u22a4", "\\top");
defineSymbol(math, textord, "\u22a5", "\\bot");
defineSymbol(math, textord, "\u2205", "\\emptyset");
defineSymbol(math, textord, "\u2300", "\\varnothing");
defineSymbol(math, mathord, "\u03b1", "\\alpha", true);
defineSymbol(math, mathord, "\u03b2", "\\beta", true);
defineSymbol(math, mathord, "\u03b3", "\\gamma", true);
defineSymbol(math, mathord, "\u03b4", "\\delta", true);
defineSymbol(math, mathord, "\u03f5", "\\epsilon", true);
defineSymbol(math, mathord, "\u03b6", "\\zeta", true);
defineSymbol(math, mathord, "\u03b7", "\\eta", true);
defineSymbol(math, mathord, "\u03b8", "\\theta", true);
defineSymbol(math, mathord, "\u03b9", "\\iota", true);
defineSymbol(math, mathord, "\u03ba", "\\kappa", true);
defineSymbol(math, mathord, "\u03bb", "\\lambda", true);
defineSymbol(math, mathord, "\u03bc", "\\mu", true);
defineSymbol(math, mathord, "\u03bd", "\\nu", true);
defineSymbol(math, mathord, "\u03be", "\\xi", true);
defineSymbol(math, mathord, "\u03bf", "\\omicron", true);
defineSymbol(math, mathord, "\u03c0", "\\pi", true);
defineSymbol(math, mathord, "\u03c1", "\\rho", true);
defineSymbol(math, mathord, "\u03c3", "\\sigma", true);
defineSymbol(math, mathord, "\u03c4", "\\tau", true);
defineSymbol(math, mathord, "\u03c5", "\\upsilon", true);
defineSymbol(math, mathord, "\u03d5", "\\phi", true);
defineSymbol(math, mathord, "\u03c7", "\\chi", true);
defineSymbol(math, mathord, "\u03c8", "\\psi", true);
defineSymbol(math, mathord, "\u03c9", "\\omega", true);
defineSymbol(math, mathord, "\u03b5", "\\varepsilon", true);
defineSymbol(math, mathord, "\u03d1", "\\vartheta", true);
defineSymbol(math, mathord, "\u03d6", "\\varpi", true);
defineSymbol(math, mathord, "\u03f1", "\\varrho", true);
defineSymbol(math, mathord, "\u03c2", "\\varsigma", true);
defineSymbol(math, mathord, "\u03c6", "\\varphi", true);
defineSymbol(math, mathord, "\u03d8", "\\Coppa", true);
defineSymbol(math, mathord, "\u03d9", "\\coppa", true);
defineSymbol(math, mathord, "\u03d9", "\\varcoppa", true);
defineSymbol(math, mathord, "\u03de", "\\Koppa", true);
defineSymbol(math, mathord, "\u03df", "\\koppa", true);
defineSymbol(math, mathord, "\u03e0", "\\Sampi", true);
defineSymbol(math, mathord, "\u03e1", "\\sampi", true);
defineSymbol(math, mathord, "\u03da", "\\Stigma", true);
defineSymbol(math, mathord, "\u03db", "\\stigma", true);
defineSymbol(math, mathord, "\u2aeb", "\\Bot");

// unicode-math maps U+F0 to \matheth. We map to AMS function \eth
defineSymbol(math, textord, "\u00f0", "\\eth", true); // ð
defineSymbol(text, textord, "\u00f0", "\u00f0");
// Extended ASCII and non-ASCII Letters
defineSymbol(math, textord, "\u00C5", "\\AA"); // Å
defineSymbol(text, textord, "\u00C5", "\\AA", true);
defineSymbol(math, textord, "\u00C6", "\\AE", true); // Æ
defineSymbol(text, textord, "\u00C6", "\\AE", true);
defineSymbol(math, textord, "\u00D0", "\\DH", true); // Ð
defineSymbol(text, textord, "\u00D0", "\\DH", true);
defineSymbol(math, textord, "\u00DE", "\\TH", true); // Þ
defineSymbol(text, textord, "\u00DE", "\\TH", true);
defineSymbol(math, textord, "\u00DF", "\\ss", true); // ß
defineSymbol(text, textord, "\u00DF", "\\ss", true);
defineSymbol(math, textord, "\u00E5", "\\aa"); // å
defineSymbol(text, textord, "\u00E5", "\\aa", true);
defineSymbol(math, textord, "\u00E6", "\\ae", true); // æ
defineSymbol(text, textord, "\u00E6", "\\ae", true);
defineSymbol(math, textord, "\u00F0", "\\dh"); // ð
defineSymbol(text, textord, "\u00F0", "\\dh", true);
defineSymbol(math, textord, "\u00FE", "\\th", true); // þ
defineSymbol(text, textord, "\u00FE", "\\th", true);
defineSymbol(math, textord, "\u0110", "\\DJ", true); // Đ
defineSymbol(text, textord, "\u0110", "\\DJ", true);
defineSymbol(math, textord, "\u0111", "\\dj", true); // đ
defineSymbol(text, textord, "\u0111", "\\dj", true);
defineSymbol(math, textord, "\u0141", "\\L", true); // Ł
defineSymbol(text, textord, "\u0141", "\\L", true);
defineSymbol(math, textord, "\u0141", "\\l", true); // ł
defineSymbol(text, textord, "\u0141", "\\l", true);
defineSymbol(math, textord, "\u014A", "\\NG", true); // Ŋ
defineSymbol(text, textord, "\u014A", "\\NG", true);
defineSymbol(math, textord, "\u014B", "\\ng", true); // ŋ
defineSymbol(text, textord, "\u014B", "\\ng", true);
defineSymbol(math, textord, "\u0152", "\\OE", true); // Œ
defineSymbol(text, textord, "\u0152", "\\OE", true);
defineSymbol(math, textord, "\u0153", "\\oe", true); // œ
defineSymbol(text, textord, "\u0153", "\\oe", true);

defineSymbol(math, bin, "\u2217", "\u2217", true);
defineSymbol(math, bin, "+", "+");
defineSymbol(math, bin, "\u2217", "*");
defineSymbol(math, bin, "\u2044", "/", true);
defineSymbol(math, bin, "\u2044", "\u2044");
defineSymbol(math, bin, "\u2212", "-", true);
defineSymbol(math, bin, "\u22c5", "\\cdot", true);
defineSymbol(math, bin, "\u2218", "\\circ", true);
defineSymbol(math, bin, "\u00f7", "\\div", true);
defineSymbol(math, bin, "\u00b1", "\\pm", true);
defineSymbol(math, bin, "\u00d7", "\\times", true);
defineSymbol(math, bin, "\u2229", "\\cap", true);
defineSymbol(math, bin, "\u222a", "\\cup", true);
defineSymbol(math, bin, "\u2216", "\\setminus", true);
defineSymbol(math, bin, "\u2227", "\\land");
defineSymbol(math, bin, "\u2228", "\\lor");
defineSymbol(math, bin, "\u2227", "\\wedge", true);
defineSymbol(math, bin, "\u2228", "\\vee", true);
defineSymbol(math, open, "\u27e6", "\\llbracket", true); // stmaryrd/semantic packages
defineSymbol(math, close, "\u27e7", "\\rrbracket", true);
defineSymbol(math, open, "\u27e8", "\\langle", true);
defineSymbol(math, open, "\u27ea", "\\lAngle", true);
defineSymbol(math, open, "\u2989", "\\llangle", true);
defineSymbol(math, open, "|", "\\lvert");
defineSymbol(math, open, "\u2016", "\\lVert", true);
defineSymbol(math, textord, "!", "\\oc"); // cmll package
defineSymbol(math, textord, "?", "\\wn");
defineSymbol(math, textord, "\u2193", "\\shpos");
defineSymbol(math, textord, "\u2195", "\\shift");
defineSymbol(math, textord, "\u2191", "\\shneg");
defineSymbol(math, close, "?", "?");
defineSymbol(math, close, "!", "!");
defineSymbol(math, close, "‼", "‼");
defineSymbol(math, close, "\u27e9", "\\rangle", true);
defineSymbol(math, close, "\u27eb", "\\rAngle", true);
defineSymbol(math, close, "\u298a", "\\rrangle", true);
defineSymbol(math, close, "|", "\\rvert");
defineSymbol(math, close, "\u2016", "\\rVert");
defineSymbol(math, open, "\u2983", "\\lBrace", true); // stmaryrd/semantic packages
defineSymbol(math, close, "\u2984", "\\rBrace", true);
defineSymbol(math, rel, "=", "\\equal", true);
defineSymbol(math, rel, ":", ":");
defineSymbol(math, rel, "\u2248", "\\approx", true);
defineSymbol(math, rel, "\u2245", "\\cong", true);
defineSymbol(math, rel, "\u2265", "\\ge");
defineSymbol(math, rel, "\u2265", "\\geq", true);
defineSymbol(math, rel, "\u2190", "\\gets");
defineSymbol(math, rel, ">", "\\gt", true);
defineSymbol(math, rel, "\u2208", "\\in", true);
defineSymbol(math, rel, "\u2209", "\\notin", true);
defineSymbol(math, rel, "\ue020", "\\@not");
defineSymbol(math, rel, "\u2282", "\\subset", true);
defineSymbol(math, rel, "\u2283", "\\supset", true);
defineSymbol(math, rel, "\u2286", "\\subseteq", true);
defineSymbol(math, rel, "\u2287", "\\supseteq", true);
defineSymbol(math, rel, "\u2288", "\\nsubseteq", true);
defineSymbol(math, rel, "\u2288", "\\nsubseteqq");
defineSymbol(math, rel, "\u2289", "\\nsupseteq", true);
defineSymbol(math, rel, "\u2289", "\\nsupseteqq");
defineSymbol(math, rel, "\u22a8", "\\models");
defineSymbol(math, rel, "\u2190", "\\leftarrow", true);
defineSymbol(math, rel, "\u2264", "\\le");
defineSymbol(math, rel, "\u2264", "\\leq", true);
defineSymbol(math, rel, "<", "\\lt", true);
defineSymbol(math, rel, "\u2192", "\\rightarrow", true);
defineSymbol(math, rel, "\u2192", "\\to");
defineSymbol(math, rel, "\u2271", "\\ngeq", true);
defineSymbol(math, rel, "\u2271", "\\ngeqq");
defineSymbol(math, rel, "\u2271", "\\ngeqslant");
defineSymbol(math, rel, "\u2270", "\\nleq", true);
defineSymbol(math, rel, "\u2270", "\\nleqq");
defineSymbol(math, rel, "\u2270", "\\nleqslant");
defineSymbol(math, rel, "\u2aeb", "\\Perp", true); //cmll package
defineSymbol(math, spacing, "\u00a0", "\\ ");
defineSymbol(math, spacing, "\u00a0", "\\space");
// Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%
defineSymbol(math, spacing, "\u00a0", "\\nobreakspace");
defineSymbol(text, spacing, "\u00a0", "\\ ");
defineSymbol(text, spacing, "\u00a0", " ");
defineSymbol(text, spacing, "\u00a0", "\\space");
defineSymbol(text, spacing, "\u00a0", "\\nobreakspace");
defineSymbol(math, spacing, null, "\\nobreak");
defineSymbol(math, spacing, null, "\\allowbreak");
defineSymbol(math, punct, ",", ",");
defineSymbol(text, punct, ":", ":");
defineSymbol(math, punct, ";", ";");
defineSymbol(math, bin, "\u22bc", "\\barwedge");
defineSymbol(math, bin, "\u22bb", "\\veebar");
defineSymbol(math, bin, "\u2299", "\\odot", true);
// Firefox turns ⊕ into an emoji. So append \uFE0E. Define Unicode character in macros, not here.
defineSymbol(math, bin, "\u2295\uFE0E", "\\oplus");
defineSymbol(math, bin, "\u2297", "\\otimes", true);
defineSymbol(math, textord, "\u2202", "\\partial", true);
defineSymbol(math, bin, "\u2298", "\\oslash", true);
defineSymbol(math, bin, "\u229a", "\\circledcirc", true);
defineSymbol(math, bin, "\u22a1", "\\boxdot", true);
defineSymbol(math, bin, "\u25b3", "\\bigtriangleup");
defineSymbol(math, bin, "\u25bd", "\\bigtriangledown");
defineSymbol(math, bin, "\u2020", "\\dagger");
defineSymbol(math, bin, "\u22c4", "\\diamond");
defineSymbol(math, bin, "\u25c3", "\\triangleleft");
defineSymbol(math, bin, "\u25b9", "\\triangleright");
defineSymbol(math, open, "{", "\\{");
defineSymbol(text, textord, "{", "\\{");
defineSymbol(text, textord, "{", "\\textbraceleft");
defineSymbol(math, close, "}", "\\}");
defineSymbol(text, textord, "}", "\\}");
defineSymbol(text, textord, "}", "\\textbraceright");
defineSymbol(math, open, "{", "\\lbrace");
defineSymbol(math, close, "}", "\\rbrace");
defineSymbol(math, open, "[", "\\lbrack", true);
defineSymbol(text, textord, "[", "\\lbrack", true);
defineSymbol(math, close, "]", "\\rbrack", true);
defineSymbol(text, textord, "]", "\\rbrack", true);
defineSymbol(math, open, "(", "\\lparen", true);
defineSymbol(math, close, ")", "\\rparen", true);
defineSymbol(math, open, "⦇", "\\llparenthesis", true);
defineSymbol(math, close, "⦈", "\\rrparenthesis", true);
defineSymbol(text, textord, "<", "\\textless", true); // in T1 fontenc
defineSymbol(text, textord, ">", "\\textgreater", true); // in T1 fontenc
defineSymbol(math, open, "\u230a", "\\lfloor", true);
defineSymbol(math, close, "\u230b", "\\rfloor", true);
defineSymbol(math, open, "\u2308", "\\lceil", true);
defineSymbol(math, close, "\u2309", "\\rceil", true);
defineSymbol(math, textord, "\\", "\\backslash");
defineSymbol(math, textord, "|", "|");
defineSymbol(math, textord, "|", "\\vert");
defineSymbol(text, textord, "|", "\\textbar", true); // in T1 fontenc
defineSymbol(math, textord, "\u2016", "\\|");
defineSymbol(math, textord, "\u2016", "\\Vert");
defineSymbol(text, textord, "\u2016", "\\textbardbl");
defineSymbol(text, textord, "~", "\\textasciitilde");
defineSymbol(text, textord, "\\", "\\textbackslash");
defineSymbol(text, textord, "^", "\\textasciicircum");
defineSymbol(math, rel, "\u2191", "\\uparrow", true);
defineSymbol(math, rel, "\u21d1", "\\Uparrow", true);
defineSymbol(math, rel, "\u2193", "\\downarrow", true);
defineSymbol(math, rel, "\u21d3", "\\Downarrow", true);
defineSymbol(math, rel, "\u2195", "\\updownarrow", true);
defineSymbol(math, rel, "\u21d5", "\\Updownarrow", true);
defineSymbol(math, op, "\u2210", "\\coprod");
defineSymbol(math, op, "\u22c1", "\\bigvee");
defineSymbol(math, op, "\u22c0", "\\bigwedge");
defineSymbol(math, op, "\u2a04", "\\biguplus");
defineSymbol(math, op, "\u2a04", "\\bigcupplus");
defineSymbol(math, op, "\u2a03", "\\bigcupdot");
defineSymbol(math, op, "\u2a07", "\\bigdoublevee");
defineSymbol(math, op, "\u2a08", "\\bigdoublewedge");
defineSymbol(math, op, "\u22c2", "\\bigcap");
defineSymbol(math, op, "\u22c3", "\\bigcup");
defineSymbol(math, op, "\u222b", "\\int");
defineSymbol(math, op, "\u222b", "\\intop");
defineSymbol(math, op, "\u222c", "\\iint");
defineSymbol(math, op, "\u222d", "\\iiint");
defineSymbol(math, op, "\u220f", "\\prod");
defineSymbol(math, op, "\u2211", "\\sum");
defineSymbol(math, op, "\u2a02", "\\bigotimes");
defineSymbol(math, op, "\u2a01", "\\bigoplus");
defineSymbol(math, op, "\u2a00", "\\bigodot");
defineSymbol(math, op, "\u2a09", "\\bigtimes");
defineSymbol(math, op, "\u222e", "\\oint");
defineSymbol(math, op, "\u222f", "\\oiint");
defineSymbol(math, op, "\u2230", "\\oiiint");
defineSymbol(math, op, "\u2231", "\\intclockwise");
defineSymbol(math, op, "\u2232", "\\varointclockwise");
defineSymbol(math, op, "\u2a0c", "\\iiiint");
defineSymbol(math, op, "\u2a0d", "\\intbar");
defineSymbol(math, op, "\u2a0e", "\\intBar");
defineSymbol(math, op, "\u2a0f", "\\fint");
defineSymbol(math, op, "\u2a12", "\\rppolint");
defineSymbol(math, op, "\u2a13", "\\scpolint");
defineSymbol(math, op, "\u2a15", "\\pointint");
defineSymbol(math, op, "\u2a16", "\\sqint");
defineSymbol(math, op, "\u2a17", "\\intlarhk");
defineSymbol(math, op, "\u2a18", "\\intx");
defineSymbol(math, op, "\u2a19", "\\intcap");
defineSymbol(math, op, "\u2a1a", "\\intcup");
defineSymbol(math, op, "\u2a05", "\\bigsqcap");
defineSymbol(math, op, "\u2a06", "\\bigsqcup");
defineSymbol(math, op, "\u222b", "\\smallint");
defineSymbol(text, inner, "\u2026", "\\textellipsis");
defineSymbol(math, inner, "\u2026", "\\mathellipsis");
defineSymbol(text, inner, "\u2026", "\\ldots", true);
defineSymbol(math, inner, "\u2026", "\\ldots", true);
defineSymbol(math, inner, "\u22f0", "\\iddots", true);
defineSymbol(math, inner, "\u22ef", "\\@cdots", true);
defineSymbol(math, inner, "\u22f1", "\\ddots", true);
defineSymbol(math, textord, "\u22ee", "\\varvdots"); // \vdots is a macro
defineSymbol(text, textord, "\u22ee", "\\varvdots");
defineSymbol(math, accent, "\u02ca", "\\acute");
defineSymbol(math, accent, "\u0060", "\\grave");
defineSymbol(math, accent, "\u00a8", "\\ddot");
defineSymbol(math, accent, "\u2026", "\\dddot");
defineSymbol(math, accent, "\u2026\u002e", "\\ddddot");
defineSymbol(math, accent, "\u007e", "\\tilde");
defineSymbol(math, accent, "\u203e", "\\bar");
defineSymbol(math, accent, "\u02d8", "\\breve");
defineSymbol(math, accent, "\u02c7", "\\check");
defineSymbol(math, accent, "\u005e", "\\hat");
defineSymbol(math, accent, "\u2192", "\\vec");
defineSymbol(math, accent, "\u02d9", "\\dot");
defineSymbol(math, accent, "\u02da", "\\mathring");
defineSymbol(math, mathord, "\u0131", "\\imath", true);
defineSymbol(math, mathord, "\u0237", "\\jmath", true);
defineSymbol(math, textord, "\u0131", "\u0131");
defineSymbol(math, textord, "\u0237", "\u0237");
defineSymbol(text, textord, "\u0131", "\\i", true);
defineSymbol(text, textord, "\u0237", "\\j", true);
defineSymbol(text, textord, "\u00f8", "\\o", true);
defineSymbol(math, mathord, "\u00f8", "\\o", true);
defineSymbol(text, textord, "\u00d8", "\\O", true);
defineSymbol(math, mathord, "\u00d8", "\\O", true);
defineSymbol(text, accent, "\u02ca", "\\'"); // acute
defineSymbol(text, accent, "\u02cb", "\\`"); // grave
defineSymbol(text, accent, "\u02c6", "\\^"); // circumflex
defineSymbol(text, accent, "\u02dc", "\\~"); // tilde
defineSymbol(text, accent, "\u02c9", "\\="); // macron
defineSymbol(text, accent, "\u02d8", "\\u"); // breve
defineSymbol(text, accent, "\u02d9", "\\."); // dot above
defineSymbol(text, accent, "\u00b8", "\\c"); // cedilla
defineSymbol(text, accent, "\u02da", "\\r"); // ring above
defineSymbol(text, accent, "\u02c7", "\\v"); // caron
defineSymbol(text, accent, "\u00a8", '\\"'); // diaeresis
defineSymbol(text, accent, "\u02dd", "\\H"); // double acute
defineSymbol(math, accent, "\u02ca", "\\'"); // acute
defineSymbol(math, accent, "\u02cb", "\\`"); // grave
defineSymbol(math, accent, "\u02c6", "\\^"); // circumflex
defineSymbol(math, accent, "\u02dc", "\\~"); // tilde
defineSymbol(math, accent, "\u02c9", "\\="); // macron
defineSymbol(math, accent, "\u02d8", "\\u"); // breve
defineSymbol(math, accent, "\u02d9", "\\."); // dot above
defineSymbol(math, accent, "\u00b8", "\\c"); // cedilla
defineSymbol(math, accent, "\u02da", "\\r"); // ring above
defineSymbol(math, accent, "\u02c7", "\\v"); // caron
defineSymbol(math, accent, "\u00a8", '\\"'); // diaeresis
defineSymbol(math, accent, "\u02dd", "\\H"); // double acute

// These ligatures are detected and created in Parser.js's `formLigatures`.
const ligatures = {
  "--": true,
  "---": true,
  "``": true,
  "''": true
};

defineSymbol(text, textord, "\u2013", "--", true);
defineSymbol(text, textord, "\u2013", "\\textendash");
defineSymbol(text, textord, "\u2014", "---", true);
defineSymbol(text, textord, "\u2014", "\\textemdash");
defineSymbol(text, textord, "\u2018", "`", true);
defineSymbol(text, textord, "\u2018", "\\textquoteleft");
defineSymbol(text, textord, "\u2019", "'", true);
defineSymbol(text, textord, "\u2019", "\\textquoteright");
defineSymbol(text, textord, "\u201c", "``", true);
defineSymbol(text, textord, "\u201c", "\\textquotedblleft");
defineSymbol(text, textord, "\u201d", "''", true);
defineSymbol(text, textord, "\u201d", "\\textquotedblright");
//  \degree from gensymb package
defineSymbol(math, textord, "\u00b0", "\\degree", true);
defineSymbol(text, textord, "\u00b0", "\\degree");
// \textdegree from inputenc package
defineSymbol(text, textord, "\u00b0", "\\textdegree", true);
// TODO: In LaTeX, \pounds can generate a different character in text and math
// mode, but among our fonts, only Main-Regular defines this character "163".
defineSymbol(math, textord, "\u00a3", "\\pounds");
defineSymbol(math, textord, "\u00a3", "\\mathsterling", true);
defineSymbol(text, textord, "\u00a3", "\\pounds");
defineSymbol(text, textord, "\u00a3", "\\textsterling", true);
defineSymbol(math, textord, "\u2720", "\\maltese");
defineSymbol(text, textord, "\u2720", "\\maltese");
defineSymbol(math, textord, "\u20ac", "\\euro", true);
defineSymbol(text, textord, "\u20ac", "\\euro", true);
defineSymbol(text, textord, "\u20ac", "\\texteuro");
defineSymbol(math, textord, "\u00a9", "\\copyright", true);
defineSymbol(text, textord, "\u00a9", "\\textcopyright");
defineSymbol(math, textord, "\u2300", "\\diameter", true);
defineSymbol(text, textord, "\u2300", "\\diameter");

// Italic Greek
defineSymbol(math, textord, "𝛤", "\\varGamma");
defineSymbol(math, textord, "𝛥", "\\varDelta");
defineSymbol(math, textord, "𝛩", "\\varTheta");
defineSymbol(math, textord, "𝛬", "\\varLambda");
defineSymbol(math, textord, "𝛯", "\\varXi");
defineSymbol(math, textord, "𝛱", "\\varPi");
defineSymbol(math, textord, "𝛴", "\\varSigma");
defineSymbol(math, textord, "𝛶", "\\varUpsilon");
defineSymbol(math, textord, "𝛷", "\\varPhi");
defineSymbol(math, textord, "𝛹", "\\varPsi");
defineSymbol(math, textord, "𝛺", "\\varOmega");
defineSymbol(text, textord, "𝛤", "\\varGamma");
defineSymbol(text, textord, "𝛥", "\\varDelta");
defineSymbol(text, textord, "𝛩", "\\varTheta");
defineSymbol(text, textord, "𝛬", "\\varLambda");
defineSymbol(text, textord, "𝛯", "\\varXi");
defineSymbol(text, textord, "𝛱", "\\varPi");
defineSymbol(text, textord, "𝛴", "\\varSigma");
defineSymbol(text, textord, "𝛶", "\\varUpsilon");
defineSymbol(text, textord, "𝛷", "\\varPhi");
defineSymbol(text, textord, "𝛹", "\\varPsi");
defineSymbol(text, textord, "𝛺", "\\varOmega");


// There are lots of symbols which are the same, so we add them in afterwards.
// All of these are textords in math mode
const mathTextSymbols = '0123456789/@."';
for (let i = 0; i < mathTextSymbols.length; i++) {
  const ch = mathTextSymbols.charAt(i);
  defineSymbol(math, textord, ch, ch);
}

// All of these are textords in text mode
const textSymbols = '0123456789!@*()-=+";:?/.,';
for (let i = 0; i < textSymbols.length; i++) {
  const ch = textSymbols.charAt(i);
  defineSymbol(text, textord, ch, ch);
}

// All of these are textords in text mode, and mathords in math mode
const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
for (let i = 0; i < letters.length; i++) {
  const ch = letters.charAt(i);
  defineSymbol(math, mathord, ch, ch);
  defineSymbol(text, textord, ch, ch);
}

// Some more letters in Unicode Basic Multilingual Plane.
const narrow = "ÇÐÞçþℂℍℕℙℚℝℤℎℏℊℋℌℐℑℒℓ℘ℛℜℬℰℱℳℭℨ";
for (let i = 0; i < narrow.length; i++) {
  const ch = narrow.charAt(i);
  defineSymbol(math, mathord, ch, ch);
  defineSymbol(text, textord, ch, ch);
}

// The next loop loads wide (surrogate pair) characters.
// We support some letters in the Unicode range U+1D400 to U+1D7FF,
// Mathematical Alphanumeric Symbols.
let wideChar = "";
for (let i = 0; i < letters.length; i++) {
  // The hex numbers in the next line are a surrogate pair.
  // 0xD835 is the high surrogate for all letters in the range we support.
  // 0xDC00 is the low surrogate for bold A.
  wideChar = String.fromCharCode(0xd835, 0xdc00 + i); // A-Z a-z bold
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdc34 + i); // A-Z a-z italic
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdc68 + i); // A-Z a-z bold italic
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdd04 + i); // A-Z a-z Fractur
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdda0 + i); // A-Z a-z sans-serif
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xddd4 + i); // A-Z a-z sans bold
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xde08 + i); // A-Z a-z sans italic
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xde70 + i); // A-Z a-z monospace
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdd38 + i); // A-Z a-z double struck
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  const ch = letters.charAt(i);
  wideChar = String.fromCharCode(0xd835, 0xdc9c + i); // A-Z a-z calligraphic
  defineSymbol(math, mathord, ch, wideChar);
  defineSymbol(text, textord, ch, wideChar);
}

// Next, some wide character numerals
for (let i = 0; i < 10; i++) {
  wideChar = String.fromCharCode(0xd835, 0xdfce + i); // 0-9 bold
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdfe2 + i); // 0-9 sans serif
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdfec + i); // 0-9 bold sans
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);

  wideChar = String.fromCharCode(0xd835, 0xdff6 + i); // 0-9 monospace
  defineSymbol(math, mathord, wideChar, wideChar);
  defineSymbol(text, textord, wideChar, wideChar);
}

/*
 * Neither Firefox nor Chrome support hard line breaks or soft line breaks.
 * (Despite https://www.w3.org/Math/draft-spec/mathml.html#chapter3_presm.lbattrs)
 * So Temml has work-arounds for both hard and soft breaks.
 * The work-arounds sadly do not work simultaneously. Any top-level hard
 * break makes soft line breaks impossible.
 *
 * Hard breaks are simulated by creating a <mtable> and putting each line in its own <mtr>.
 *
 * To create soft line breaks, Temml avoids using the <semantics> and <annotation> tags.
 * Then the top level of a <math> element can be occupied by <mrow> elements, and the browser
 * will break after a <mrow> if the expression extends beyond the container limit.
 *
 * The default is for soft line breaks after each top-level binary or
 * relational operator, per TeXbook p. 173. So we gather the expression into <mrow>s so that
 * each <mrow> ends in a binary or relational operator.
 *
 * An option is for soft line breaks before an "=" sign. That changes the <mrow>s.
 *
 * Soft line breaks will not work in Chromium and Safari, only Firefox.
 *
 * Hopefully browsers will someday do their own linebreaking and we will be able to delete
 * much of this module.
 */

const openDelims = "([{⌊⌈⟨⟮⎰⟦⦃";
const closeDelims = ")]}⌋⌉⟩⟯⎱⟦⦄";

function setLineBreaks(expression, wrapMode, isDisplayMode) {
  const mtrs = [];
  let mrows = [];
  let block = [];
  let numTopLevelEquals = 0;
  let i = 0;
  let level = 0;
  while (i < expression.length) {
    while (expression[i] instanceof DocumentFragment) {
      expression.splice(i, 1, ...expression[i].children); // Expand the fragment.
    }
    const node = expression[i];
    if (node.attributes && node.attributes.linebreak &&
      node.attributes.linebreak === "newline") {
      // A hard line break. Create a <mtr> for the current block.
      if (block.length > 0) {
        mrows.push(new mathMLTree.MathNode("mrow", block));
      }
      mrows.push(node);
      block = [];
      const mtd = new mathMLTree.MathNode("mtd", mrows);
      mtd.style.textAlign = "left";
      mtrs.push(new mathMLTree.MathNode("mtr", [mtd]));
      mrows = [];
      i += 1;
      continue
    }
    block.push(node);
    if (node.type && node.type === "mo" && node.children.length === 1 &&
        !Object.prototype.hasOwnProperty.call(node.attributes, "movablelimits")) {
      const ch = node.children[0].text;
      if (openDelims.indexOf(ch) > -1) {
        level += 1;
      } else if (closeDelims.indexOf(ch) > -1) {
        level -= 1;
      } else if (level === 0 && wrapMode === "=" && ch === "=") {
        numTopLevelEquals += 1;
        if (numTopLevelEquals > 1) {
          block.pop();
          // Start a new block. (Insert a soft linebreak.)
          const element = new mathMLTree.MathNode("mrow", block);
          mrows.push(element);
          block = [node];
        }
      } else if (level === 0 && wrapMode === "tex" && ch !== "∇") {
        // Check if the following node is a \nobreak text node, e.g. "~""
        const next = i < expression.length - 1 ? expression[i + 1] : null;
        let glueIsFreeOfNobreak = true;
        if (
          !(
            next &&
            next.type === "mtext" &&
            next.attributes.linebreak &&
            next.attributes.linebreak === "nobreak"
          )
        ) {
          // We may need to start a new block.
          // First, put any post-operator glue on same line as operator.
          for (let j = i + 1; j < expression.length; j++) {
            const nd = expression[j];
            if (
              nd.type &&
              nd.type === "mspace" &&
              !(nd.attributes.linebreak && nd.attributes.linebreak === "newline")
            ) {
              block.push(nd);
              i += 1;
              if (
                nd.attributes &&
                nd.attributes.linebreak &&
                nd.attributes.linebreak === "nobreak"
              ) {
                glueIsFreeOfNobreak = false;
              }
            } else {
              break;
            }
          }
        }
        if (glueIsFreeOfNobreak) {
          // Start a new block. (Insert a soft linebreak.)
          const element = new mathMLTree.MathNode("mrow", block);
          mrows.push(element);
          block = [];
        }
      }
    }
    i += 1;
  }
  if (block.length > 0) {
    const element = new mathMLTree.MathNode("mrow", block);
    mrows.push(element);
  }
  if (mtrs.length > 0) {
    const mtd = new mathMLTree.MathNode("mtd", mrows);
    mtd.style.textAlign = "left";
    const mtr = new mathMLTree.MathNode("mtr", [mtd]);
    mtrs.push(mtr);
    const mtable = new mathMLTree.MathNode("mtable", mtrs);
    if (!isDisplayMode) {
      mtable.setAttribute("columnalign", "left");
      mtable.setAttribute("rowspacing", "0em");
    }
    return mtable
  }
  return mathMLTree.newDocumentFragment(mrows);
}

/**
 * This file converts a parse tree into a corresponding MathML tree. The main
 * entry point is the `buildMathML` function, which takes a parse tree from the
 * parser.
 */


/**
 * Takes a symbol and converts it into a MathML text node after performing
 * optional replacement from symbols.js.
 */
const makeText = function(text, mode, style) {
  if (
    symbols[mode][text] &&
    symbols[mode][text].replace &&
    text.charCodeAt(0) !== 0xd835 &&
    !(
      Object.prototype.hasOwnProperty.call(ligatures, text) &&
      style &&
      ((style.fontFamily && style.fontFamily.slice(4, 6) === "tt") ||
        (style.font && style.font.slice(4, 6) === "tt"))
    )
  ) {
    text = symbols[mode][text].replace;
  }

  return new mathMLTree.TextNode(text);
};

const copyChar = (newRow, child) => {
  if (newRow.children.length === 0 ||
      newRow.children[newRow.children.length - 1].type !== "mtext") {
    const mtext = new mathMLTree.MathNode(
      "mtext",
      [new mathMLTree.TextNode(child.children[0].text)]
    );
    newRow.children.push(mtext);
  } else {
    newRow.children[newRow.children.length - 1].children[0].text += child.children[0].text;
  }
};

const consolidateText = mrow => {
  // If possible, consolidate adjacent <mtext> elements into a single element.
  if (mrow.type !== "mrow" && mrow.type !== "mstyle") { return mrow }
  if (mrow.children.length === 0) { return mrow } // empty group, e.g., \text{}
  const newRow = new mathMLTree.MathNode("mrow");
  for (let i = 0; i < mrow.children.length; i++) {
    const child = mrow.children[i];
    if (child.type === "mtext" && Object.keys(child.attributes).length === 0) {
      copyChar(newRow, child);
    } else if (child.type === "mrow") {
      // We'll also check the children of an mrow. One level only. No recursion.
      let canConsolidate = true;
      for (let j = 0; j < child.children.length; j++) {
        const grandChild = child.children[j];
        if (grandChild.type !== "mtext" || Object.keys(child.attributes).length !== 0) {
          canConsolidate = false;
          break
        }
      }
      if (canConsolidate) {
        for (let j = 0; j < child.children.length; j++) {
          const grandChild = child.children[j];
          copyChar(newRow, grandChild);
        }
      } else {
        newRow.children.push(child);
      }
    } else {
      newRow.children.push(child);
    }
  }
  for (let i = 0; i < newRow.children.length; i++) {
    if (newRow.children[i].type === "mtext") {
      const mtext = newRow.children[i];
      // Firefox does not render a space at either end of an <mtext> string.
      // To get proper rendering, we replace leading or trailing spaces with no-break spaces.
      if (mtext.children[0].text.charAt(0) === " ") {
        mtext.children[0].text = "\u00a0" + mtext.children[0].text.slice(1);
      }
      const L = mtext.children[0].text.length;
      if (L > 0 && mtext.children[0].text.charAt(L - 1) === " ") {
        mtext.children[0].text = mtext.children[0].text.slice(0, -1) + "\u00a0";
      }
      for (const [key, value] of Object.entries(mrow.attributes)) {
        mtext.attributes[key] = value;
      }
    }
  }
  if (newRow.children.length === 1 && newRow.children[0].type === "mtext") {
    return newRow.children[0]; // A consolidated <mtext>
  } else {
    return newRow
  }
};

/**
 * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
 * unless the array has length 1.  Always returns a single node.
 */
const makeRow = function(body, semisimple = false) {
  if (body.length === 1 && !(body[0] instanceof DocumentFragment)) {
    return body[0];
  } else if (!semisimple) {
    // Suppress spacing on <mo> nodes at both ends of the row.
    if (body[0] instanceof MathNode && body[0].type === "mo" && !body[0].attributes.fence) {
      body[0].attributes.lspace = "0em";
      body[0].attributes.rspace = "0em";
    }
    const end = body.length - 1;
    if (body[end] instanceof MathNode && body[end].type === "mo" && !body[end].attributes.fence) {
      body[end].attributes.lspace = "0em";
      body[end].attributes.rspace = "0em";
    }
  }
  return new mathMLTree.MathNode("mrow", body);
};

/**
 * Check for <mi>.</mi> which is how a dot renders in MathML,
 * or <mo separator="true" lspace="0em" rspace="0em">,</mo>
 * which is how a braced comma {,} renders in MathML
 */
function isNumberPunctuation(group) {
  if (!group) {
    return false
  }
  if (group.type === 'mi' && group.children.length === 1) {
    const child = group.children[0];
    return child instanceof TextNode && child.text === '.'
  } else if (group.type === "mtext" && group.children.length === 1) {
    const child = group.children[0];
    return child instanceof TextNode && child.text === '\u2008' // punctuation space
  } else if (group.type === 'mo' && group.children.length === 1 &&
    group.getAttribute('separator') === 'true' &&
    group.getAttribute('lspace') === '0em' &&
    group.getAttribute('rspace') === '0em') {
    const child = group.children[0];
    return child instanceof TextNode && child.text === ','
  } else {
    return false
  }
}
const isComma = (expression, i) => {
  const node = expression[i];
  const followingNode = expression[i + 1];
  return (node.type === "atom" && node.text === ",") &&
    // Don't consolidate if there is a space after the comma.
    node.loc && followingNode.loc && node.loc.end === followingNode.loc.start
};

const isRel = item => {
  return (item.type === "atom" && item.family === "rel") ||
      (item.type === "mclass" && item.mclass === "mrel")
};

/**
 * Takes a list of nodes, builds them, and returns a list of the generated
 * MathML nodes.  Also do a couple chores along the way:
 * (1) Suppress spacing when an author wraps an operator w/braces, as in {=}.
 * (2) Suppress spacing between two adjacent relations.
 */
const buildExpression = function(expression, style, semisimple = false) {
  if (!semisimple && expression.length === 1) {
    const group = buildGroup$1(expression[0], style);
    if (group instanceof MathNode && group.type === "mo") {
      // When TeX writers want to suppress spacing on an operator,
      // they often put the operator by itself inside braces.
      group.setAttribute("lspace", "0em");
      group.setAttribute("rspace", "0em");
    }
    return [group];
  }

  const groups = [];
  const groupArray = [];
  let lastGroup;
  for (let i = 0; i < expression.length; i++) {
    groupArray.push(buildGroup$1(expression[i], style));
  }

  for (let i = 0; i < groupArray.length; i++) {
    const group = groupArray[i];

    // Suppress spacing between adjacent relations
    if (i < expression.length - 1 && isRel(expression[i]) && isRel(expression[i + 1])) {
      group.setAttribute("rspace", "0em");
    }
    if (i > 0 && isRel(expression[i]) && isRel(expression[i - 1])) {
      group.setAttribute("lspace", "0em");
    }

    // Concatenate numbers
    if (group.type === 'mn' && lastGroup && lastGroup.type === 'mn') {
      // Concatenate <mn>...</mn> followed by <mi>.</mi>
      lastGroup.children.push(...group.children);
      continue
    } else if (isNumberPunctuation(group) && lastGroup && lastGroup.type === 'mn') {
      // Concatenate <mn>...</mn> followed by <mi>.</mi>
      lastGroup.children.push(...group.children);
      continue
    } else if (lastGroup && lastGroup.type === "mn" && i < groupArray.length - 1 &&
      groupArray[i + 1].type === "mn" && isComma(expression, i)) {
      lastGroup.children.push(...group.children);
      continue
    } else if (group.type === 'mn' && isNumberPunctuation(lastGroup)) {
      // Concatenate <mi>.</mi> followed by <mn>...</mn>
      group.children = [...lastGroup.children, ...group.children];
      groups.pop();
    } else if ((group.type === 'msup' || group.type === 'msub') &&
        group.children.length >= 1 && lastGroup &&
        (lastGroup.type === 'mn' || isNumberPunctuation(lastGroup))) {
      // Put preceding <mn>...</mn> or <mi>.</mi> inside base of
      // <msup><mn>...base...</mn>...exponent...</msup> (or <msub>)
      const base = group.children[0];
      if (base instanceof MathNode && base.type === 'mn' && lastGroup) {
        base.children = [...lastGroup.children, ...base.children];
        groups.pop();
      }
    }
    groups.push(group);
    lastGroup = group;
  }
  return groups
};

/**
 * Equivalent to buildExpression, but wraps the elements in an <mrow>
 * if there's more than one.  Returns a single node instead of an array.
 */
const buildExpressionRow = function(expression, style, semisimple = false) {
  return makeRow(buildExpression(expression, style, semisimple), semisimple);
};

/**
 * Takes a group from the parser and calls the appropriate groupBuilders function
 * on it to produce a MathML node.
 */
const buildGroup$1 = function(group, style) {
  if (!group) {
    return new mathMLTree.MathNode("mrow");
  }

  if (_mathmlGroupBuilders[group.type]) {
    // Call the groupBuilders function
    const result = _mathmlGroupBuilders[group.type](group, style);
    return result;
  } else {
    throw new ParseError("Got group of unknown type: '" + group.type + "'");
  }
};

const glue$1 = _ => {
  return new mathMLTree.MathNode("mtd", [], [], { padding: "0", width: "50%" })
};

const labelContainers = ["mrow", "mtd", "mtable", "mtr"];
const getLabel = parent => {
  for (const node of parent.children) {
    if (node.type && labelContainers.includes(node.type)) {
      if (node.classes && node.classes[0] === "tml-label") {
        const label = node.label;
        return label
      } else {
        const label = getLabel(node);
        if (label) { return label }
      }
    } else if (!node.type) {
      const label = getLabel(node);
      if (label) { return label }
    }
  }
};

const taggedExpression = (expression, tag, style, leqno) => {
  tag = buildExpressionRow(tag[0].body, style);
  tag = consolidateText(tag);
  tag.classes.push("tml-tag");

  const label = getLabel(expression); // from a \label{} function.
  expression = new mathMLTree.MathNode("mtd", [expression]);
  const rowArray = [glue$1(), expression, glue$1()];
  rowArray[leqno ? 0 : 2].classes.push(leqno ? "tml-left" : "tml-right");
  rowArray[leqno ? 0 : 2].children.push(tag);
  const mtr = new mathMLTree.MathNode("mtr", rowArray, ["tml-tageqn"]);
  if (label) { mtr.setAttribute("id", label); }
  const table = new mathMLTree.MathNode("mtable", [mtr]);
  table.style.width = "100%";
  table.setAttribute("displaystyle", "true");
  return table
};

/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it.
 */
function buildMathML(tree, texExpression, style, settings) {
  // Strip off outer tag wrapper for processing below.
  let tag = null;
  if (tree.length === 1 && tree[0].type === "tag") {
    tag = tree[0].tag;
    tree = tree[0].body;
  }

  const expression = buildExpression(tree, style);

  if (expression.length === 1 && expression[0] instanceof AnchorNode) {
    return expression[0]
  }

  const wrap = (settings.displayMode || settings.annotate) ? "none" : settings.wrap;

  const n1 = expression.length === 0 ? null : expression[0];
  let wrapper = expression.length === 1 && tag === null && (n1 instanceof MathNode)
      ? expression[0]
      : setLineBreaks(expression, wrap, settings.displayMode);

  if (tag) {
    wrapper = taggedExpression(wrapper, tag, style, settings.leqno);
  }

  if (settings.annotate) {
    // Build a TeX annotation of the source
    const annotation = new mathMLTree.MathNode(
      "annotation", [new mathMLTree.TextNode(texExpression)]);
    annotation.setAttribute("encoding", "application/x-tex");
    wrapper = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
  }

  const math = new mathMLTree.MathNode("math", [wrapper]);

  if (settings.xml) {
    math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");
  }
  if (wrapper.style.width) {
    math.style.width = "100%";
  }
  if (settings.displayMode) {
    math.setAttribute("display", "block");
    math.style.display = "block math"; // necessary in Chromium.
    // Firefox and Safari do not recognize display: "block math".
    // Set a class so that the CSS file can set display: block.
    math.classes = ["tml-display"];
  }
  return math;
}

const smalls = "acegıȷmnopqrsuvwxyzαγεηικμνοπρςστυχωϕ𝐚𝐜𝐞𝐠𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐮𝐯𝐰𝐱𝐲𝐳";
const talls = "ABCDEFGHIJKLMNOPQRSTUVWXYZbdfhkltΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩβδλζφθψ"
             + "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙𝐛𝐝𝐟𝐡𝐤𝐥𝐭";
const longSmalls = new Set(["\\alpha", "\\gamma", "\\delta", "\\epsilon", "\\eta", "\\iota",
  "\\kappa", "\\mu", "\\nu", "\\pi", "\\rho", "\\sigma", "\\tau", "\\upsilon", "\\chi", "\\psi",
  "\\omega", "\\imath", "\\jmath"]);
const longTalls = new Set(["\\Gamma", "\\Delta", "\\Sigma", "\\Omega", "\\beta", "\\delta",
  "\\lambda", "\\theta", "\\psi"]);

const mathmlBuilder$a = (group, style) => {
  const accentNode = group.isStretchy
    ? stretchy.accentNode(group)
    : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);

  if (group.label === "\\vec") {
    accentNode.style.transform = "scale(0.75) translate(10%, 30%)";
  } else {
    accentNode.style.mathStyle = "normal";
    accentNode.style.mathDepth = "0";
    if (needWebkitShift.has(group.label) &&  utils.isCharacterBox(group.base)) {
      let shift = "";
      const ch = group.base.text;
      if (smalls.indexOf(ch) > -1 || longSmalls.has(ch)) { shift = "tml-xshift"; }
      if (talls.indexOf(ch) > -1  || longTalls.has(ch))  { shift = "tml-capshift"; }
      if (shift) { accentNode.classes.push(shift); }
    }
  }
  if (!group.isStretchy) {
    accentNode.setAttribute("stretchy", "false");
  }

  const node = new mathMLTree.MathNode((group.label === "\\c" ? "munder" : "mover"),
    [buildGroup$1(group.base, style), accentNode]
  );

  return node;
};

const nonStretchyAccents = new Set([
  "\\acute",
  "\\grave",
  "\\ddot",
  "\\dddot",
  "\\ddddot",
  "\\tilde",
  "\\bar",
  "\\breve",
  "\\check",
  "\\hat",
  "\\vec",
  "\\dot",
  "\\mathring"
]);

const needWebkitShift = new Set([
  "\\acute",
  "\\bar",
  "\\breve",
  "\\check",
  "\\dot",
  "\\ddot",
  "\\grave",
  "\\hat",
  "\\mathring",
  "\\'", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v"
]);

const combiningChar = {
  "\\`": "\u0300",
  "\\'": "\u0301",
  "\\^": "\u0302",
  "\\~": "\u0303",
  "\\=": "\u0304",
  "\\u": "\u0306",
  "\\.": "\u0307",
  '\\"': "\u0308",
  "\\r": "\u030A",
  "\\H": "\u030B",
  "\\v": "\u030C"
};

// Accents
defineFunction({
  type: "accent",
  names: [
    "\\acute",
    "\\grave",
    "\\ddot",
    "\\dddot",
    "\\ddddot",
    "\\tilde",
    "\\bar",
    "\\breve",
    "\\check",
    "\\hat",
    "\\vec",
    "\\dot",
    "\\mathring",
    "\\overparen",
    "\\widecheck",
    "\\widehat",
    "\\wideparen",
    "\\widetilde",
    "\\overrightarrow",
    "\\overleftarrow",
    "\\Overrightarrow",
    "\\overleftrightarrow",
    "\\overgroup",
    "\\overleftharpoon",
    "\\overrightharpoon"
  ],
  props: {
    numArgs: 1
  },
  handler: (context, args) => {
    const base = normalizeArgument(args[0]);

    const isStretchy = !nonStretchyAccents.has(context.funcName);

    return {
      type: "accent",
      mode: context.parser.mode,
      label: context.funcName,
      isStretchy: isStretchy,
      base: base
    };
  },
  mathmlBuilder: mathmlBuilder$a
});

// Text-mode accents
defineFunction({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\c", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v"],
  props: {
    numArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    const base = normalizeArgument(args[0]);
    const mode = context.parser.mode;

    if (mode === "math" && context.parser.settings.strict) {
      // LaTeX only writes a warning. It doesn't stop. We'll issue the same warning.
      // eslint-disable-next-line no-console
      console.log(`Temml parse error: Command ${context.funcName} is invalid in math mode.`);
    }

    if (mode === "text" && base.text && base.text.length === 1
        && context.funcName in combiningChar  && smalls.indexOf(base.text) > -1) {
      // Return a combining accent character
      return {
        type: "textord",
        mode: "text",
        text: base.text + combiningChar[context.funcName]
      }
    } else {
      // Build up the accent
      return {
        type: "accent",
        mode: mode,
        label: context.funcName,
        isStretchy: false,
        base: base
      }
    }
  },
  mathmlBuilder: mathmlBuilder$a
});

defineFunction({
  type: "accentUnder",
  names: [
    "\\underleftarrow",
    "\\underrightarrow",
    "\\underleftrightarrow",
    "\\undergroup",
    "\\underparen",
    "\\utilde"
  ],
  props: {
    numArgs: 1
  },
  handler: ({ parser, funcName }, args) => {
    const base = args[0];
    return {
      type: "accentUnder",
      mode: parser.mode,
      label: funcName,
      base: base
    };
  },
  mathmlBuilder: (group, style) => {
    const accentNode = stretchy.accentNode(group);
    accentNode.style["math-depth"] = 0;
    const node = new mathMLTree.MathNode("munder", [
      buildGroup$1(group.base, style),
      accentNode
    ]);
    return node;
  }
});

/**
 * This file does conversion between units.  In particular, it provides
 * calculateSize to convert other units into CSS units.
 */


const ptPerUnit = {
  // Convert to CSS (Postscipt) points, not TeX points
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  pt: 800 / 803, // convert TeX point to CSS (Postscript) point
  pc: (12 * 800) / 803, // pica
  dd: ((1238 / 1157) * 800) / 803, // didot
  cc: ((14856 / 1157) * 800) / 803, // cicero (12 didot)
  nd: ((685 / 642) * 800) / 803, // new didot
  nc: ((1370 / 107) * 800) / 803, // new cicero (12 new didot)
  sp: ((1 / 65536) * 800) / 803, // scaled point (TeX's internal smallest unit)
  mm: (25.4 / 72),
  cm: (2.54 / 72),
  in: (1 / 72),
  px: (96 / 72)
};

/**
 * Determine whether the specified unit (either a string defining the unit
 * or a "size" parse node containing a unit field) is valid.
 */
const validUnits = [
  "em",
  "ex",
  "mu",
  "pt",
  "mm",
  "cm",
  "in",
  "px",
  "bp",
  "pc",
  "dd",
  "cc",
  "nd",
  "nc",
  "sp"
];

const validUnit = function(unit) {
  if (typeof unit !== "string") {
    unit = unit.unit;
  }
  return validUnits.indexOf(unit) > -1
};

const emScale = styleLevel => {
  const scriptLevel = Math.max(styleLevel - 1, 0);
  return [1, 0.7, 0.5][scriptLevel]
};

/*
 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
 * as parsed by functions.js argType "size") into a CSS value.
 */
const calculateSize = function(sizeValue, style) {
  let number = sizeValue.number;
  if (style.maxSize[0] < 0 && number > 0) {
    return { number: 0, unit: "em" }
  }
  const unit = sizeValue.unit;
  switch (unit) {
    case "mm":
    case "cm":
    case "in":
    case "px": {
      const numInCssPts = number * ptPerUnit[unit];
      if (numInCssPts > style.maxSize[1]) {
        return { number: style.maxSize[1], unit: "pt" }
      }
      return { number, unit }; // absolute CSS units.
    }
    case "em":
    case "ex": {
      // In TeX, em and ex do not change size in \scriptstyle.
      if (unit === "ex") { number *= 0.431; }
      number = Math.min(number / emScale(style.level), style.maxSize[0]);
      return { number: utils.round(number), unit: "em" };
    }
    case "bp": {
      if (number > style.maxSize[1]) { number = style.maxSize[1]; }
      return { number, unit: "pt" }; // TeX bp is a CSS pt. (1/72 inch).
    }
    case "pt":
    case "pc":
    case "dd":
    case "cc":
    case "nd":
    case "nc":
    case "sp": {
      number = Math.min(number * ptPerUnit[unit], style.maxSize[1]);
      return { number: utils.round(number), unit: "pt" }
    }
    case "mu": {
      number = Math.min(number / 18, style.maxSize[0]);
      return { number: utils.round(number), unit: "em" }
    }
    default:
      throw new ParseError("Invalid unit: '" + unit + "'")
  }
};

// Helper functions

const padding$1 = width => {
  const node = new mathMLTree.MathNode("mspace");
  node.setAttribute("width", width + "em");
  return node
};

const paddedNode = (group, lspace = 0.3, rspace = 0, mustSmash = false) => {
  if (group == null && rspace === 0) { return padding$1(lspace) }
  const row = group ? [group] : [];
  if (lspace !== 0)   { row.unshift(padding$1(lspace)); }
  if (rspace > 0) { row.push(padding$1(rspace)); }
  if (mustSmash) {
    // Used for the bottom arrow in a {CD} environment
    const mpadded = new mathMLTree.MathNode("mpadded", row);
    mpadded.setAttribute("height", "0");
    return mpadded
  } else {
    return new mathMLTree.MathNode("mrow", row)
  }
};

const labelSize = (size, scriptLevel) =>  Number(size) / emScale(scriptLevel);

const munderoverNode = (fName, body, below, style) => {
  const arrowNode = stretchy.mathMLnode(fName);
  // Is this the short part of a mhchem equilibrium arrow?
  const isEq = fName.slice(1, 3) === "eq";
  const minWidth = fName.charAt(1) === "x"
    ? "1.75"  // mathtools extensible arrows are ≥ 1.75em long
    : fName.slice(2, 4) === "cd"
    ? "3.0"  // cd package arrows
    : isEq
    ? "1.0"  // The shorter harpoon of a mhchem equilibrium arrow
    : "2.0"; // other mhchem arrows
  // TODO: When Firefox supports minsize, use the next line.
  //arrowNode.setAttribute("minsize", String(minWidth) + "em")
  arrowNode.setAttribute("lspace", "0");
  arrowNode.setAttribute("rspace", (isEq ? "0.5em" : "0"));

  // <munderover> upper and lower labels are set to scriptlevel by MathML
  // So we have to adjust our label dimensions accordingly.
  const labelStyle = style.withLevel(style.level < 2 ? 2 : 3);
  const minArrowWidth = labelSize(minWidth, labelStyle.level);
  // The dummyNode will be inside a <mover> inside a <mover>
  // So it will be at scriptlevel 3
  const dummyWidth = labelSize(minWidth, 3);
  const emptyLabel = paddedNode(null, minArrowWidth.toFixed(4), 0);
  const dummyNode = paddedNode(null, dummyWidth.toFixed(4), 0);
  // The arrow is a little longer than the label. Set a spacer length.
  const space = labelSize((isEq ? 0 : 0.3), labelStyle.level).toFixed(4);
  let upperNode;
  let lowerNode;

  const gotUpper = (body && body.body &&
    // \hphantom        visible content
    (body.body.body || body.body.length > 0));
  if (gotUpper) {
    let label =  buildGroup$1(body, labelStyle);
    const mustSmash = (fName === "\\\\cdrightarrow" || fName === "\\\\cdleftarrow");
    label = paddedNode(label, space, space, mustSmash);
    // Since Firefox does not support minsize, stack a invisible node
    // on top of the label. Its width will serve as a min-width.
    // TODO: Refactor this after Firefox supports minsize.
    upperNode = new mathMLTree.MathNode("mover", [label, dummyNode]);
  }
  const gotLower = (below && below.body &&
    (below.body.body || below.body.length > 0));
  if (gotLower) {
    let label =  buildGroup$1(below, labelStyle);
    label = paddedNode(label, space, space);
    lowerNode = new mathMLTree.MathNode("munder", [label, dummyNode]);
  }

  let node;
  if (!gotUpper && !gotLower) {
    node = new mathMLTree.MathNode("mover", [arrowNode, emptyLabel]);
  } else if (gotUpper && gotLower) {
    node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
  } else if (gotUpper) {
    node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
  } else {
    node = new mathMLTree.MathNode("munder", [arrowNode, lowerNode]);
  }
  if (minWidth === "3.0") { node.style.height = "1em"; } // CD environment
  node.setAttribute("accent", "false"); // Necessary for MS Word
  return node
};

// Stretchy arrows with an optional argument
defineFunction({
  type: "xArrow",
  names: [
    "\\xleftarrow",
    "\\xrightarrow",
    "\\xLeftarrow",
    "\\xRightarrow",
    "\\xleftrightarrow",
    "\\xLeftrightarrow",
    "\\xhookleftarrow",
    "\\xhookrightarrow",
    "\\xmapsto",
    "\\xrightharpoondown",
    "\\xrightharpoonup",
    "\\xleftharpoondown",
    "\\xleftharpoonup",
    "\\xlongequal",
    "\\xtwoheadrightarrow",
    "\\xtwoheadleftarrow",
    // The next 5 functions are here only to support mhchem
    "\\yields",
    "\\yieldsLeft",
    "\\mesomerism",
    "\\longrightharpoonup",
    "\\longleftharpoondown",
    // The next 3 functions are here only to support the {CD} environment.
    "\\\\cdrightarrow",
    "\\\\cdleftarrow",
    "\\\\cdlongequal"
  ],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler({ parser, funcName }, args, optArgs) {
    return {
      type: "xArrow",
      mode: parser.mode,
      name: funcName,
      body: args[0],
      below: optArgs[0]
    };
  },
  mathmlBuilder(group, style) {
    // Build the arrow and its labels.
    const node = munderoverNode(group.name, group.body, group.below, style);
    // Create operator spacing for a relation.
    const row = [node];
    row.unshift(padding$1(0.2778));
    row.push(padding$1(0.2778));
    return new mathMLTree.MathNode("mrow", row)
  }
});

const arrowComponent = {
  "\\xtofrom": ["\\xrightarrow", "\\xleftarrow"],
  "\\xleftrightharpoons": ["\\xleftharpoonup", "\\xrightharpoondown"],
  "\\xrightleftharpoons": ["\\xrightharpoonup", "\\xleftharpoondown"],
  "\\yieldsLeftRight": ["\\yields", "\\yieldsLeft"],
  // The next three all get the same harpoon glyphs. Only the lengths and paddings differ.
  "\\equilibrium": ["\\longrightharpoonup", "\\longleftharpoondown"],
  "\\equilibriumRight": ["\\longrightharpoonup", "\\eqleftharpoondown"],
  "\\equilibriumLeft": ["\\eqrightharpoonup", "\\longleftharpoondown"]
};

// Browsers are not good at stretching a glyph that contains a pair of stacked arrows such as ⇄.
// So we stack a pair of single arrows.
defineFunction({
  type: "stackedArrow",
  names: [
    "\\xtofrom",              // expfeil
    "\\xleftrightharpoons",   // mathtools
    "\\xrightleftharpoons",   // mathtools
    "\\yieldsLeftRight",      // mhchem
    "\\equilibrium",          // mhchem
    "\\equilibriumRight",
    "\\equilibriumLeft"
  ],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler({ parser, funcName }, args, optArgs) {
    const lowerArrowBody = args[0]
      ? {
        type: "hphantom",
        mode: parser.mode,
        body: args[0]
      }
      : null;
    const upperArrowBelow = optArgs[0]
      ? {
        type: "hphantom",
        mode: parser.mode,
        body: optArgs[0]
      }
      : null;
    return {
      type: "stackedArrow",
      mode: parser.mode,
      name: funcName,
      body: args[0],
      upperArrowBelow,
      lowerArrowBody,
      below: optArgs[0]
    };
  },
  mathmlBuilder(group, style) {
    const topLabel = arrowComponent[group.name][0];
    const botLabel = arrowComponent[group.name][1];
    const topArrow = munderoverNode(topLabel, group.body, group.upperArrowBelow, style);
    const botArrow = munderoverNode(botLabel, group.lowerArrowBody, group.below, style);
    let wrapper;

    const raiseNode = new mathMLTree.MathNode("mpadded", [topArrow]);
    raiseNode.setAttribute("voffset", "0.3em");
    raiseNode.setAttribute("height", "+0.3em");
    raiseNode.setAttribute("depth", "-0.3em");
    // One of the arrows is given ~zero width. so the other has the same horzontal alignment.
    if (group.name === "\\equilibriumLeft") {
      const botNode =  new mathMLTree.MathNode("mpadded", [botArrow]);
      botNode.setAttribute("width", "0.5em");
      wrapper = new mathMLTree.MathNode(
        "mpadded",
        [padding$1(0.2778), botNode, raiseNode, padding$1(0.2778)]
      );
    } else {
      raiseNode.setAttribute("width", (group.name === "\\equilibriumRight" ? "0.5em" : "0"));
      wrapper = new mathMLTree.MathNode(
        "mpadded",
        [padding$1(0.2778), raiseNode, botArrow, padding$1(0.2778)]
      );
    }

    wrapper.setAttribute("voffset", "-0.18em");
    wrapper.setAttribute("height", "-0.18em");
    wrapper.setAttribute("depth", "+0.18em");
    return wrapper
  }
});

/**
 * All registered environments.
 * `environments.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `environments.js`.
 */
const _environments = {};

function defineEnvironment({ type, names, props, handler, mathmlBuilder }) {
  // Set default values of environments.
  const data = {
    type,
    numArgs: props.numArgs || 0,
    allowedInText: false,
    numOptionalArgs: 0,
    handler
  };
  for (let i = 0; i < names.length; ++i) {
    _environments[names[i]] = data;
  }
  if (mathmlBuilder) {
    _mathmlGroupBuilders[type] = mathmlBuilder;
  }
}

/**
 * Asserts that the node is of the given type and returns it with stricter
 * typing. Throws if the node's type does not match.
 */
function assertNodeType(node, type) {
  if (!node || node.type !== type) {
    throw new Error(
      `Expected node of type ${type}, but got ` +
        (node ? `node of type ${node.type}` : String(node))
    );
  }
  return node;
}

/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */
function assertSymbolNodeType(node) {
  const typedNode = checkSymbolNodeType(node);
  if (!typedNode) {
    throw new Error(
      `Expected node of symbol group type, but got ` +
        (node ? `node of type ${node.type}` : String(node))
    );
  }
  return typedNode;
}

/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */
function checkSymbolNodeType(node) {
  if (node && (node.type === "atom" ||
      Object.prototype.hasOwnProperty.call(NON_ATOMS, node.type))) {
    return node;
  }
  return null;
}

const cdArrowFunctionName = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  A: "\\uparrow",
  V: "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
};

const newCell = () => {
  // Create an empty cell, to be filled below with parse nodes.
  return { type: "styling", body: [], mode: "math", scriptLevel: "display" };
};

const isStartOfArrow = (node) => {
  return node.type === "textord" && node.text === "@";
};

const isLabelEnd = (node, endChar) => {
  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
};

function cdArrow(arrowChar, labels, parser) {
  // Return a parse tree of an arrow and its labels.
  // This acts in a way similar to a macro expansion.
  const funcName = cdArrowFunctionName[arrowChar];
  switch (funcName) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return parser.callFunction(funcName, [labels[0]], [labels[1]]);
    case "\\uparrow":
    case "\\downarrow": {
      const leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
      const bareArrow = {
        type: "atom",
        text: funcName,
        mode: "math",
        family: "rel"
      };
      const sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
      const rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
      const arrowGroup = {
        type: "ordgroup",
        mode: "math",
        body: [leftLabel, sizedArrow, rightLabel],
        semisimple: true
      };
      return parser.callFunction("\\\\cdparent", [arrowGroup], []);
    }
    case "\\\\cdlongequal":
      return parser.callFunction("\\\\cdlongequal", [], []);
    case "\\Vert": {
      const arrow = { type: "textord", text: "\\Vert", mode: "math" };
      return parser.callFunction("\\Big", [arrow], []);
    }
    default:
      return { type: "textord", text: " ", mode: "math" };
  }
}

function parseCD(parser) {
  // Get the array's parse nodes with \\ temporarily mapped to \cr.
  const parsedRows = [];
  parser.gullet.beginGroup();
  parser.gullet.macros.set("\\cr", "\\\\\\relax");
  parser.gullet.beginGroup();
  while (true) {
    // Get the parse nodes for the next row.
    parsedRows.push(parser.parseExpression(false, "\\\\"));
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    const next = parser.fetch().text;
    if (next === "&" || next === "\\\\") {
      parser.consume();
    } else if (next === "\\end") {
      if (parsedRows[parsedRows.length - 1].length === 0) {
        parsedRows.pop(); // final row ended in \\
      }
      break;
    } else {
      throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
    }
  }

  let row = [];
  const body = [row];

  // Loop thru the parse nodes. Collect them into cells and arrows.
  for (let i = 0; i < parsedRows.length; i++) {
    // Start a new row.
    const rowNodes = parsedRows[i];
    // Create the first cell.
    let cell = newCell();

    for (let j = 0; j < rowNodes.length; j++) {
      if (!isStartOfArrow(rowNodes[j])) {
        // If a parseNode is not an arrow, it goes into a cell.
        cell.body.push(rowNodes[j]);
      } else {
        // Parse node j is an "@", the start of an arrow.
        // Before starting on the arrow, push the cell into `row`.
        row.push(cell);

        // Now collect parseNodes into an arrow.
        // The character after "@" defines the arrow type.
        j += 1;
        const arrowChar = assertSymbolNodeType(rowNodes[j]).text;

        // Create two empty label nodes. We may or may not use them.
        const labels = new Array(2);
        labels[0] = { type: "ordgroup", mode: "math", body: [] };
        labels[1] = { type: "ordgroup", mode: "math", body: [] };

        // Process the arrow.
        if ("=|.".indexOf(arrowChar) > -1) ; else if ("<>AV".indexOf(arrowChar) > -1) {
          // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
          // two optional labels. E.g. the right-point arrow syntax is
          // really:  @>{optional label}>{optional label}>
          // Collect parseNodes into labels.
          for (let labelNum = 0; labelNum < 2; labelNum++) {
            let inLabel = true;
            for (let k = j + 1; k < rowNodes.length; k++) {
              if (isLabelEnd(rowNodes[k], arrowChar)) {
                inLabel = false;
                j = k;
                break;
              }
              if (isStartOfArrow(rowNodes[k])) {
                throw new ParseError(
                  "Missing a " + arrowChar + " character to complete a CD arrow.",
                  rowNodes[k]
                );
              }

              labels[labelNum].body.push(rowNodes[k]);
            }
            if (inLabel) {
              // isLabelEnd never returned a true.
              throw new ParseError(
                "Missing a " + arrowChar + " character to complete a CD arrow.",
                rowNodes[j]
              );
            }
          }
        } else {
          throw new ParseError(`Expected one of "<>AV=|." after @.`);
        }

        // Now join the arrow to its labels.
        const arrow = cdArrow(arrowChar, labels, parser);

        // Wrap the arrow in a styling node
        row.push(arrow);
        // In CD's syntax, cells are implicit. That is, everything that
        // is not an arrow gets collected into a cell. So create an empty
        // cell now. It will collect upcoming parseNodes.
        cell = newCell();
      }
    }
    if (i % 2 === 0) {
      // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
      // The last cell is not yet pushed into `row`, so:
      row.push(cell);
    } else {
      // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
      // Remove the empty cell that was placed at the beginning of `row`.
      row.shift();
    }
    row = [];
    body.push(row);
  }
  body.pop();

  // End row group
  parser.gullet.endGroup();
  // End array group defining \\
  parser.gullet.endGroup();

  return {
    type: "array",
    mode: "math",
    body,
    tags: null,
    labels: new Array(body.length + 1).fill(""),
    envClasses: ["jot", "cd"],
    cols: [],
    hLinesBeforeRow: new Array(body.length + 1).fill([])
  };
}

// The functions below are not available for general use.
// They are here only for internal use by the {CD} environment in placing labels
// next to vertical arrows.

// We don't need any such functions for horizontal arrows because we can reuse
// the functionality that already exists for extensible arrows.

defineFunction({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler({ parser, funcName }, args) {
    return {
      type: "cdlabel",
      mode: parser.mode,
      side: funcName.slice(4),
      label: args[0]
    };
  },
  mathmlBuilder(group, style) {
    if (group.label.body.length === 0) {
      return new mathMLTree.MathNode("mrow", style)  // empty label
    }
    // Abuse an <mtable> to create vertically centered content.
    const mtd = new mathMLTree.MathNode("mtd", [buildGroup$1(group.label, style)]);
    mtd.style.padding = "0";
    const mtr = new mathMLTree.MathNode("mtr", [mtd]);
    const mtable = new mathMLTree.MathNode("mtable", [mtr]);
    const label = new mathMLTree.MathNode("mpadded", [mtable]);
    // Set the label width to zero so that the arrow will be centered under the corner cell.
    label.setAttribute("width", "0");
    label.setAttribute("displaystyle", "false");
    label.setAttribute("scriptlevel", "1");
    if (group.side === "left") {
      label.style.display = "flex";
      label.style.justifyContent = "flex-end";
    }
    return label;
  }
});

defineFunction({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler({ parser }, args) {
    return {
      type: "cdlabelparent",
      mode: parser.mode,
      fragment: args[0]
    };
  },
  mathmlBuilder(group, style) {
    return new mathMLTree.MathNode("mrow", [buildGroup$1(group.fragment, style)]);
  }
});

const ordGroup = (body) => {
  return {
    "type": "ordgroup",
    "mode": "math",
    "body": body,
    "semisimple": true
  }
};

const phantom = (body, type) => {
  return {
    "type": type,
    "mode": "math",
    "body": ordGroup(body)
  }
};

/*
 * A helper for \bordermatrix.
 * parseArray() has parsed the tokens as if the environment
 * was \begin{matrix}. That parse tree is this function’s input.
 * Here, we rearrange the parse tree to get one that will
 * result in TeX \bordermatrix.
 * The final result includes a {pmatrix}, which is the bottom
 * half of a <mover> element. The top of the <mover> contains
 * the \bordermatrix headings. The top section also contains the
 * contents of the bottom {pmatrix}. Those elements are hidden via
 * \hphantom, but they ensure that column widths are the same top and
 * bottom.
 *
 * We also create a left {matrix} with a single column that contains
 * elements shifted out of the matrix. The left {matrix} also
 * contains \vphantom copies of the other {pmatrix} elements.
 * As before, this ensures consistent row heights of left and main.
 */

const bordermatrixParseTree = (matrix, delimiters) => {
  const body = matrix.body;
  body[0].shift(); // dispose of top left cell

  // Create an array for the left column
  const leftColumnBody = new Array(body.length - 1).fill().map(() => []);
  for (let i = 1; i < body.length; i++) {
    // The visible part of the cell
    leftColumnBody[i - 1].push(body[i].shift());
    // A vphantom with contents from the pmatrix, to set minimum cell height
    const phantomBody = [];
    for (let j = 0; j < body[i].length; j++) {
      phantomBody.push(body[i][j]);
    }
    leftColumnBody[i - 1].push(phantom(phantomBody, "vphantom"));
  }

  // Create an array for the top row
  const topRowBody = new Array(body.length).fill().map(() => []);
  for (let j = 0; j < body[0].length; j++) {
    topRowBody[0].push(body[0][j]);
  }
  // Copy the rest of the pmatrix, but squashed via \hphantom
  for (let i = 1; i < body.length; i++) {
    for (let j = 0; j < body[0].length; j++) {
      topRowBody[i].push(phantom(body[i][j].body, "hphantom"));
    }
  }

  // Squash the top row of the main {pmatrix}
  for (let j = 0; j < body[0].length; j++) {
    body[0][j] = phantom(body[0][j].body, "hphantom");
  }

  // Now wrap the arrays in the proper parse nodes.

  const leftColumn = {
    type: "array",
    mode: "math",
    body: leftColumnBody,
    cols: [{ type: "align", align: "c" }],
    rowGaps: new Array(leftColumnBody.length - 1).fill(null),
    hLinesBeforeRow: new Array(leftColumnBody.length + 1).fill().map(() => []),
    envClasses: [],
    scriptLevel: "text",
    arraystretch: 1,
    labels: new Array(leftColumnBody.length).fill(""),
    arraycolsep: { "number": 0.04, unit: "em" }
  };

  const topRow = {
    type: "array",
    mode: "math",
    body: topRowBody,
    cols: new Array(topRowBody.length).fill({ type: "align", align: "c" }),
    rowGaps: new Array(topRowBody.length - 1).fill(null),
    hLinesBeforeRow: new Array(topRowBody.length + 1).fill().map(() => []),
    envClasses: [],
    scriptLevel: "text",
    arraystretch: 1,
    labels: new Array(topRowBody.length).fill(""),
    arraycolsep: null
  };

  const topWrapper = {
    type: "styling",
    mode: "math",
    scriptLevel: "text", // Must set this explicitly.
    body: [topRow]       // Default level is "script".
  };

  const container = {
    type: "leftright",
    mode: "math",
    body: [matrix],
    left: delimiters ? delimiters[0] : "(",
    right: delimiters ? delimiters[1] : ")",
    rightColor: undefined
  };

  const base = {
    type: "op",   // The base of a TeX \overset
    mode: "math",
    limits: true,
    alwaysHandleSupSub: true,
    parentIsSupSub: true,
    symbol: false,
    stack: true,
    suppressBaseShift: true,
    body: [container]
  };

  const mover = {
    type: "supsub",  // We're using the MathML equivalent
    mode: "math",    // of TeX \overset.
    base: base,      // That keeps the {pmatrix} aligned with
    sup: topWrapper, // the math centerline.
    sub: null
  };

  return ordGroup([leftColumn, mover])
};

/**
 * Lexing or parsing positional information for error reporting.
 * This object is immutable.
 */
class SourceLocation {
  constructor(lexer, start, end) {
    this.lexer = lexer; // Lexer holding the input string.
    this.start = start; // Start offset, zero-based inclusive.
    this.end = end;     // End offset, zero-based exclusive.
  }

  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */
  static range(first, second) {
    if (!second) {
      return first && first.loc;
    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
      return null;
    } else {
      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
    }
  }
}

/**
 * Interface required to break circular dependency between Token, Lexer, and
 * ParseError.
 */

/**
 * The resulting token returned from `lex`.
 *
 * It consists of the token text plus some position information.
 * The position information is essentially a range in an input string,
 * but instead of referencing the bare input string, we refer to the lexer.
 * That way it is possible to attach extra metadata to the input string,
 * like for example a file name or similar.
 *
 * The position information is optional, so it is OK to construct synthetic
 * tokens if appropriate. Not providing available position information may
 * lead to degraded error reporting, though.
 */
class Token {
  constructor(
    text, // the text of this token
    loc
  ) {
    this.text = text;
    this.loc = loc;
  }

  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */
  range(
    endToken, // last token of the range, inclusive
    text // the text of the newly constructed token
  ) {
    return new Token(text, SourceLocation.range(this, endToken));
  }
}

// In TeX, there are actually three sets of dimensions, one for each of
// textstyle, scriptstyle, and scriptscriptstyle.  These are
// provided in the the arrays below, in that order.
//

// Math style is not quite the same thing as script level.
const StyleLevel = {
  DISPLAY: 0,
  TEXT: 1,
  SCRIPT: 2,
  SCRIPTSCRIPT: 3
};

/**
 * All registered global/built-in macros.
 * `macros.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `macros.js`.
 */
const _macros = {};

// This function might one day accept an additional argument and do more things.
function defineMacro(name, body) {
  _macros[name] = body;
}

/**
 * Predefined macros for Temml.
 * This can be used to define some commands in terms of others.
 */

const macros = _macros;

//////////////////////////////////////////////////////////////////////
// macro tools

defineMacro("\\noexpand", function(context) {
  // The expansion is the token itself; but that token is interpreted
  // as if its meaning were ‘\relax’ if it is a control sequence that
  // would ordinarily be expanded by TeX’s expansion rules.
  const t = context.popToken();
  if (context.isExpandable(t.text)) {
    t.noexpand = true;
    t.treatAsRelax = true;
  }
  return { tokens: [t], numArgs: 0 };
});

defineMacro("\\expandafter", function(context) {
  // TeX first reads the token that comes immediately after \expandafter,
  // without expanding it; let’s call this token t. Then TeX reads the
  // token that comes after t (and possibly more tokens, if that token
  // has an argument), replacing it by its expansion. Finally TeX puts
  // t back in front of that expansion.
  const t = context.popToken();
  context.expandOnce(true); // expand only an expandable token
  return { tokens: [t], numArgs: 0 };
});

// LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
// TeX source: \long\def\@firstoftwo#1#2{#1}
defineMacro("\\@firstoftwo", function(context) {
  const args = context.consumeArgs(2);
  return { tokens: args[0], numArgs: 0 };
});

// LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
// TeX source: \long\def\@secondoftwo#1#2{#2}
defineMacro("\\@secondoftwo", function(context) {
  const args = context.consumeArgs(2);
  return { tokens: args[1], numArgs: 0 };
});

// LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
// symbol that isn't a space, consuming any spaces but not consuming the
// first nonspace character.  If that nonspace character matches #1, then
// the macro expands to #2; otherwise, it expands to #3.
defineMacro("\\@ifnextchar", function(context) {
  const args = context.consumeArgs(3); // symbol, if, else
  context.consumeSpaces();
  const nextToken = context.future();
  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
    return { tokens: args[1], numArgs: 0 };
  } else {
    return { tokens: args[2], numArgs: 0 };
  }
});

// LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
// If it is `*`, then it consumes the symbol, and the macro expands to #1;
// otherwise, the macro expands to #2 (without consuming the symbol).
// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}
defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");

// LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode
defineMacro("\\TextOrMath", function(context) {
  const args = context.consumeArgs(2);
  if (context.mode === "text") {
    return { tokens: args[0], numArgs: 0 };
  } else {
    return { tokens: args[1], numArgs: 0 };
  }
});

const stringFromArg = arg => {
  // Reverse the order of the arg and return a string.
  let str = "";
  for (let i = arg.length - 1; i > -1; i--) {
    str += arg[i].text;
  }
  return str
};

// Lookup table for parsing numbers in base 8 through 16
const digitToNumber = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  a: 10,
  A: 10,
  b: 11,
  B: 11,
  c: 12,
  C: 12,
  d: 13,
  D: 13,
  e: 14,
  E: 14,
  f: 15,
  F: 15
};

const nextCharNumber = context => {
  const numStr = context.future().text;
  if (numStr === "EOF") { return [null, ""] }
  return [digitToNumber[numStr.charAt(0)], numStr]
};

const appendCharNumbers = (number, numStr, base) => {
  for (let i = 1; i < numStr.length; i++) {
    const digit = digitToNumber[numStr.charAt(i)];
    number *= base;
    number += digit;
  }
  return number
};

// TeX \char makes a literal character (catcode 12) using the following forms:
// (see The TeXBook, p. 43)
//   \char123  -- decimal
//   \char'123 -- octal
//   \char"123 -- hex
//   \char`x   -- character that can be written (i.e. isn't active)
//   \char`\x  -- character that cannot be written (e.g. %)
// These all refer to characters from the font, so we turn them into special
// calls to a function \@char dealt with in the Parser.
defineMacro("\\char", function(context) {
  let token = context.popToken();
  let base;
  let number = "";
  if (token.text === "'") {
    base = 8;
    token = context.popToken();
  } else if (token.text === '"') {
    base = 16;
    token = context.popToken();
  } else if (token.text === "`") {
    token = context.popToken();
    if (token.text[0] === "\\") {
      number = token.text.charCodeAt(1);
    } else if (token.text === "EOF") {
      throw new ParseError("\\char` missing argument");
    } else {
      number = token.text.charCodeAt(0);
    }
  } else {
    base = 10;
  }
  if (base) {
    // Parse a number in the given base, starting with first `token`.
    let numStr = token.text;
    number = digitToNumber[numStr.charAt(0)];
    if (number == null || number >= base) {
      throw new ParseError(`Invalid base-${base} digit ${token.text}`);
    }
    number = appendCharNumbers(number, numStr, base);
    let digit;
    [digit, numStr] = nextCharNumber(context);
    while (digit != null && digit < base) {
      number *= base;
      number += digit;
      number = appendCharNumbers(number, numStr, base);
      context.popToken();
      [digit, numStr] = nextCharNumber(context);
    }
  }
  return `\\@char{${number}}`;
});

function recreateArgStr(context) {
  // Recreate the macro's original argument string from the array of parse tokens.
  const tokens = context.consumeArgs(1)[0];
  let str = "";
  let expectedLoc = tokens[tokens.length - 1].loc.start;
  for (let i = tokens.length - 1; i >= 0; i--) {
    const actualLoc = tokens[i].loc.start;
    if (actualLoc > expectedLoc) {
      // context.consumeArgs has eaten a space.
      str += " ";
      expectedLoc = actualLoc;
    }
    str += tokens[i].text;
    expectedLoc += tokens[i].text.length;
  }
  return str
}

// The Latin Modern font renders <mi>√</mi> at the wrong vertical alignment.
// This macro provides a better rendering.
defineMacro("\\surd", '\\sqrt{\\vphantom{|}}');

// See comment for \oplus in symbols.js.
defineMacro("\u2295", "\\oplus");

// Since Temml has no \par, ignore \long.
defineMacro("\\long", "");

//////////////////////////////////////////////////////////////////////
// Grouping
// \let\bgroup={ \let\egroup=}
defineMacro("\\bgroup", "{");
defineMacro("\\egroup", "}");

// Symbols from latex.ltx:
// \def~{\nobreakspace{}}
// \def\lq{`}
// \def\rq{'}
// \def \aa {\r a}
defineMacro("~", "\\nobreakspace");
defineMacro("\\lq", "`");
defineMacro("\\rq", "'");
defineMacro("\\aa", "\\r a");

defineMacro("\\Bbbk", "\\Bbb{k}");

// \mathstrut from the TeXbook, p 360
defineMacro("\\mathstrut", "\\vphantom{(}");

// \underbar from TeXbook p 353
defineMacro("\\underbar", "\\underline{\\text{#1}}");

//////////////////////////////////////////////////////////////////////
// LaTeX_2ε

// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
// We'll call \varvdots, which gets a glyph from symbols.js.
// The zero-width rule gets us an equivalent to the vertical 6pt kern.
defineMacro("\\vdots", "{\\varvdots\\rule{0pt}{15pt}}");
defineMacro("\u22ee", "\\vdots");

// {array} environment gaps
defineMacro("\\arraystretch", "1");     // line spacing factor times 12pt
defineMacro("\\arraycolsep", "6pt");    // half the width separating columns

//////////////////////////////////////////////////////////////////////
// amsmath.sty
// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf

//\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}
defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");

// \def\iff{\DOTSB\;\Longleftrightarrow\;}
// \def\implies{\DOTSB\;\Longrightarrow\;}
// \def\impliedby{\DOTSB\;\Longleftarrow\;}
defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");

// AMSMath's automatic \dots, based on \mdots@@ macro.
const dotsByToken = {
  ",": "\\dotsc",
  "\\not": "\\dotsb",
  // \keybin@ checks for the following:
  "+": "\\dotsb",
  "=": "\\dotsb",
  "<": "\\dotsb",
  ">": "\\dotsb",
  "-": "\\dotsb",
  "*": "\\dotsb",
  ":": "\\dotsb",
  // Symbols whose definition starts with \DOTSB:
  "\\DOTSB": "\\dotsb",
  "\\coprod": "\\dotsb",
  "\\bigvee": "\\dotsb",
  "\\bigwedge": "\\dotsb",
  "\\biguplus": "\\dotsb",
  "\\bigcap": "\\dotsb",
  "\\bigcup": "\\dotsb",
  "\\prod": "\\dotsb",
  "\\sum": "\\dotsb",
  "\\bigotimes": "\\dotsb",
  "\\bigoplus": "\\dotsb",
  "\\bigodot": "\\dotsb",
  "\\bigsqcap": "\\dotsb",
  "\\bigsqcup": "\\dotsb",
  "\\bigtimes": "\\dotsb",
  "\\And": "\\dotsb",
  "\\longrightarrow": "\\dotsb",
  "\\Longrightarrow": "\\dotsb",
  "\\longleftarrow": "\\dotsb",
  "\\Longleftarrow": "\\dotsb",
  "\\longleftrightarrow": "\\dotsb",
  "\\Longleftrightarrow": "\\dotsb",
  "\\mapsto": "\\dotsb",
  "\\longmapsto": "\\dotsb",
  "\\hookrightarrow": "\\dotsb",
  "\\doteq": "\\dotsb",
  // Symbols whose definition starts with \mathbin:
  "\\mathbin": "\\dotsb",
  // Symbols whose definition starts with \mathrel:
  "\\mathrel": "\\dotsb",
  "\\relbar": "\\dotsb",
  "\\Relbar": "\\dotsb",
  "\\xrightarrow": "\\dotsb",
  "\\xleftarrow": "\\dotsb",
  // Symbols whose definition starts with \DOTSI:
  "\\DOTSI": "\\dotsi",
  "\\int": "\\dotsi",
  "\\oint": "\\dotsi",
  "\\iint": "\\dotsi",
  "\\iiint": "\\dotsi",
  "\\iiiint": "\\dotsi",
  "\\idotsint": "\\dotsi",
  // Symbols whose definition starts with \DOTSX:
  "\\DOTSX": "\\dotsx"
};

defineMacro("\\dots", function(context) {
  // TODO: If used in text mode, should expand to \textellipsis.
  // However, in Temml, \textellipsis and \ldots behave the same
  // (in text mode), and it's unlikely we'd see any of the math commands
  // that affect the behavior of \dots when in text mode.  So fine for now
  // (until we support \ifmmode ... \else ... \fi).
  let thedots = "\\dotso";
  const next = context.expandAfterFuture().text;
  if (next in dotsByToken) {
    thedots = dotsByToken[next];
  } else if (next.slice(0, 4) === "\\not") {
    thedots = "\\dotsb";
  } else if (next in symbols.math) {
    if (["bin", "rel"].includes(symbols.math[next].group)) {
      thedots = "\\dotsb";
    }
  }
  return thedots;
});

const spaceAfterDots = {
  // \rightdelim@ checks for the following:
  ")": true,
  "]": true,
  "\\rbrack": true,
  "\\}": true,
  "\\rbrace": true,
  "\\rangle": true,
  "\\rceil": true,
  "\\rfloor": true,
  "\\rgroup": true,
  "\\rmoustache": true,
  "\\right": true,
  "\\bigr": true,
  "\\biggr": true,
  "\\Bigr": true,
  "\\Biggr": true,
  // \extra@ also tests for the following:
  $: true,
  // \extrap@ checks for the following:
  ";": true,
  ".": true,
  ",": true
};

defineMacro("\\dotso", function(context) {
  const next = context.future().text;
  if (next in spaceAfterDots) {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});

defineMacro("\\dotsc", function(context) {
  const next = context.future().text;
  // \dotsc uses \extra@ but not \extrap@, instead specially checking for
  // ';' and '.', but doesn't check for ','.
  if (next in spaceAfterDots && next !== ",") {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});

defineMacro("\\cdots", function(context) {
  const next = context.future().text;
  if (next in spaceAfterDots) {
    return "\\@cdots\\,";
  } else {
    return "\\@cdots";
  }
});

defineMacro("\\dotsb", "\\cdots");
defineMacro("\\dotsm", "\\cdots");
defineMacro("\\dotsi", "\\!\\cdots");
defineMacro("\\idotsint", "\\dotsi");
// amsmath doesn't actually define \dotsx, but \dots followed by a macro
// starting with \DOTSX implies \dotso, and then \extra@ detects this case
// and forces the added `\,`.
defineMacro("\\dotsx", "\\ldots\\,");

// \let\DOTSI\relax
// \let\DOTSB\relax
// \let\DOTSX\relax
defineMacro("\\DOTSI", "\\relax");
defineMacro("\\DOTSB", "\\relax");
defineMacro("\\DOTSX", "\\relax");

// Spacing, based on amsmath.sty's override of LaTeX defaults
// \DeclareRobustCommand{\tmspace}[3]{%
//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}
defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
// \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
// TODO: math mode should use \thinmuskip
defineMacro("\\,", "{\\tmspace+{3mu}{.1667em}}");
// \let\thinspace\,
defineMacro("\\thinspace", "\\,");
// \def\>{\mskip\medmuskip}
// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu
defineMacro("\\>", "\\mskip{4mu}");
defineMacro("\\:", "{\\tmspace+{4mu}{.2222em}}");
// \let\medspace\:
defineMacro("\\medspace", "\\:");
// \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
// TODO: math mode should use \thickmuskip = 5mu plus 5mu
defineMacro("\\;", "{\\tmspace+{5mu}{.2777em}}");
// \let\thickspace\;
defineMacro("\\thickspace", "\\;");
// \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
// TODO: math mode should use \thinmuskip
defineMacro("\\!", "{\\tmspace-{3mu}{.1667em}}");
// \let\negthinspace\!
defineMacro("\\negthinspace", "\\!");
// \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
// TODO: math mode should use \medmuskip
defineMacro("\\negmedspace", "{\\tmspace-{4mu}{.2222em}}");
// \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
// TODO: math mode should use \thickmuskip
defineMacro("\\negthickspace", "{\\tmspace-{5mu}{.277em}}");
// \def\enspace{\kern.5em }
defineMacro("\\enspace", "\\kern.5em ");
// \def\enskip{\hskip.5em\relax}
defineMacro("\\enskip", "\\hskip.5em\\relax");
// \def\quad{\hskip1em\relax}
defineMacro("\\quad", "\\hskip1em\\relax");
// \def\qquad{\hskip2em\relax}
defineMacro("\\qquad", "\\hskip2em\\relax");

defineMacro("\\AA", "\\TextOrMath{\\Angstrom}{\\mathring{A}}\\relax");

// \tag@in@display form of \tag
defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
defineMacro("\\tag@literal", (context) => {
  if (context.macros.get("\\df@tag")) {
    throw new ParseError("Multiple \\tag");
  }
  return "\\gdef\\df@tag{\\text{#1}}";
});
defineMacro("\\notag", "\\nonumber");
defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");

// \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
//   {\operator@font mod}\penalty900
//   \mkern5mu\nonscript\mskip-\medmuskip}
// \newcommand{\pod}[1]{\allowbreak
//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu
defineMacro("\\bmod", "\\mathbin{\\text{mod}}");
defineMacro(
  "\\pod",
  "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)"
);
defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
defineMacro(
  "\\mod",
  "\\allowbreak" +
    "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" +
    "{\\rm mod}\\,\\,#1"
);

//////////////////////////////////////////////////////////////////////
// LaTeX source2e

// \expandafter\let\expandafter\@normalcr
//     \csname\expandafter\@gobble\string\\ \endcsname
// \DeclareRobustCommand\newline{\@normalcr\relax}
defineMacro("\\newline", "\\\\\\relax");

// \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
// TODO: Doesn't normally work in math mode because \@ fails.
defineMacro("\\TeX", "\\textrm{T}\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125em\\textrm{X}");

defineMacro(
  "\\LaTeX",
    "\\textrm{L}\\kern-.35em\\raisebox{0.2em}{\\scriptstyle A}\\kern-.15em\\TeX"
);

defineMacro(
  "\\Temml",
  // eslint-disable-next-line max-len
  "\\textrm{T}\\kern-0.2em\\lower{0.2em}{\\textrm{E}}\\kern-0.08em{\\textrm{M}\\kern-0.08em\\raise{0.2em}\\textrm{M}\\kern-0.08em\\textrm{L}}"
);

// \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
// \def\@hspace#1{\hskip  #1\relax}
// \def\@hspacer#1{\vrule \@width\z@\nobreak
//                 \hskip #1\hskip \z@skip}
defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
defineMacro("\\@hspace", "\\hskip #1\\relax");
defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");

defineMacro("\\colon", `\\mathpunct{\\char"3a}`);

//////////////////////////////////////////////////////////////////////
// mathtools.sty

defineMacro("\\prescript", "\\pres@cript{_{#1}^{#2}}{}{#3}");

//\providecommand\ordinarycolon{:}
defineMacro("\\ordinarycolon", `\\char"3a`);
// Raise to center on the math axis, as closely as possible.
defineMacro("\\vcentcolon", "\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}}");
// \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
defineMacro("\\coloneq", '\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"2212}');
// \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
defineMacro("\\Coloneq", '\\mathrel{\\char"2237\\char"2212}');
// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}
defineMacro("\\Eqqcolon", '\\mathrel{\\char"3d\\char"2237}');
// \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}
defineMacro("\\Eqcolon", '\\mathrel{\\char"2212\\char"2237}');
// \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}
defineMacro("\\colonapprox", '\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"2248}');
// \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}
defineMacro("\\Colonapprox", '\\mathrel{\\char"2237\\char"2248}');
// \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}
defineMacro("\\colonsim", '\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"223c}');
// \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}
defineMacro("\\Colonsim", '\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"223c}');

//////////////////////////////////////////////////////////////////////
// colonequals.sty

// Alternate names for mathtools's macros:
defineMacro("\\ratio", "\\vcentcolon");
defineMacro("\\coloncolon", "\\dblcolon");
defineMacro("\\colonequals", "\\coloneqq");
defineMacro("\\coloncolonequals", "\\Coloneqq");
defineMacro("\\equalscolon", "\\eqqcolon");
defineMacro("\\equalscoloncolon", "\\Eqqcolon");
defineMacro("\\colonminus", "\\coloneq");
defineMacro("\\coloncolonminus", "\\Coloneq");
defineMacro("\\minuscolon", "\\eqcolon");
defineMacro("\\minuscoloncolon", "\\Eqcolon");
// \colonapprox name is same in mathtools and colonequals.
defineMacro("\\coloncolonapprox", "\\Colonapprox");
// \colonsim name is same in mathtools and colonequals.
defineMacro("\\coloncolonsim", "\\Colonsim");

// Present in newtxmath, pxfonts and txfonts
defineMacro("\\notni", "\\mathrel{\\char`\u220C}");
defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");

//////////////////////////////////////////////////////////////////////
// From amsopn.sty
defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{\\text{lim}}}");
defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{\\text{lim}}}");
defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{\\text{lim}}}");
defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{\\text{lim}}}");

defineMacro("\\centerdot", "{\\medspace\\rule{0.167em}{0.189em}\\medspace}");

//////////////////////////////////////////////////////////////////////
// statmath.sty
// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
defineMacro("\\plim", "\\DOTSB\\operatorname*{plim}");

//////////////////////////////////////////////////////////////////////
// MnSymbol.sty

defineMacro("\\leftmodels", "\\mathop{\\reflectbox{$\\models$}}");

//////////////////////////////////////////////////////////////////////
// braket.sty
// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
defineMacro("\\Bra", "\\left\\langle#1\\right|");
defineMacro("\\Ket", "\\left|#1\\right\\rangle");
// A helper for \Braket and \Set
const replaceVert = (argStr, match) => {
  const ch = match[0] === "|" ? "\\vert" : "\\Vert";
  const replaceStr = `}\\,\\middle${ch}\\,{`;
  return argStr.slice(0, match.index) + replaceStr + argStr.slice(match.index + match[0].length)
};
defineMacro("\\Braket",  function(context) {
  let argStr = recreateArgStr(context);
  const regEx = /\|\||\||\\\|/g;
  let match;
  while ((match = regEx.exec(argStr)) !== null) {
    argStr = replaceVert(argStr, match);
  }
  return "\\left\\langle{" + argStr + "}\\right\\rangle"
});
defineMacro("\\Set",  function(context) {
  let argStr = recreateArgStr(context);
  const match = /\|\||\||\\\|/.exec(argStr);
  if (match) {
    argStr = replaceVert(argStr, match);
  }
  return "\\left\\{\\:{" + argStr + "}\\:\\right\\}"
});
defineMacro("\\set",  function(context) {
  const argStr = recreateArgStr(context);
  return "\\{{" + argStr.replace(/\|/, "}\\mid{") + "}\\}"
});

//////////////////////////////////////////////////////////////////////
// actuarialangle.dtx
defineMacro("\\angln", "{\\angl n}");

//////////////////////////////////////////////////////////////////////
// derivative.sty
defineMacro("\\odv", "\\@ifstar\\odv@next\\odv@numerator");
defineMacro("\\odv@numerator", "\\frac{\\mathrm{d}#1}{\\mathrm{d}#2}");
defineMacro("\\odv@next", "\\frac{\\mathrm{d}}{\\mathrm{d}#2}#1");
defineMacro("\\pdv", "\\@ifstar\\pdv@next\\pdv@numerator");

const pdvHelper = args => {
  const numerator = args[0][0].text;
  const denoms = stringFromArg(args[1]).split(",");
  const power = String(denoms.length);
  const numOp = power === "1" ? "\\partial" : `\\partial^${power}`;
  let denominator = "";
  denoms.map(e => { denominator += "\\partial " + e.trim() +  "\\,";});
  return [numerator, numOp,  denominator.replace(/\\,$/, "")]
};
defineMacro("\\pdv@numerator", function(context) {
  const [numerator, numOp, denominator] = pdvHelper(context.consumeArgs(2));
  return `\\frac{${numOp} ${numerator}}{${denominator}}`
});
defineMacro("\\pdv@next", function(context) {
  const [numerator, numOp, denominator] = pdvHelper(context.consumeArgs(2));
  return `\\frac{${numOp}}{${denominator}} ${numerator}`
});

//////////////////////////////////////////////////////////////////////
// upgreek.dtx
defineMacro("\\upalpha", "\\up@greek{\\alpha}");
defineMacro("\\upbeta", "\\up@greek{\\beta}");
defineMacro("\\upgamma", "\\up@greek{\\gamma}");
defineMacro("\\updelta", "\\up@greek{\\delta}");
defineMacro("\\upepsilon", "\\up@greek{\\epsilon}");
defineMacro("\\upzeta", "\\up@greek{\\zeta}");
defineMacro("\\upeta", "\\up@greek{\\eta}");
defineMacro("\\uptheta", "\\up@greek{\\theta}");
defineMacro("\\upiota", "\\up@greek{\\iota}");
defineMacro("\\upkappa", "\\up@greek{\\kappa}");
defineMacro("\\uplambda", "\\up@greek{\\lambda}");
defineMacro("\\upmu", "\\up@greek{\\mu}");
defineMacro("\\upnu", "\\up@greek{\\nu}");
defineMacro("\\upxi", "\\up@greek{\\xi}");
defineMacro("\\upomicron", "\\up@greek{\\omicron}");
defineMacro("\\uppi", "\\up@greek{\\pi}");
defineMacro("\\upalpha", "\\up@greek{\\alpha}");
defineMacro("\\uprho", "\\up@greek{\\rho}");
defineMacro("\\upsigma", "\\up@greek{\\sigma}");
defineMacro("\\uptau", "\\up@greek{\\tau}");
defineMacro("\\upupsilon", "\\up@greek{\\upsilon}");
defineMacro("\\upphi", "\\up@greek{\\phi}");
defineMacro("\\upchi", "\\up@greek{\\chi}");
defineMacro("\\uppsi", "\\up@greek{\\psi}");
defineMacro("\\upomega", "\\up@greek{\\omega}");

//////////////////////////////////////////////////////////////////////
// cmll package
defineMacro("\\invamp", '\\mathbin{\\char"214b}');
defineMacro("\\parr", '\\mathbin{\\char"214b}');
defineMacro("\\with", '\\mathbin{\\char"26}');
defineMacro("\\multimapinv", '\\mathrel{\\char"27dc}');
defineMacro("\\multimapboth", '\\mathrel{\\char"29df}');
defineMacro("\\scoh", '{\\mkern5mu\\char"2322\\mkern5mu}');
defineMacro("\\sincoh", '{\\mkern5mu\\char"2323\\mkern5mu}');
defineMacro("\\coh", `{\\mkern5mu\\rule{}{0.7em}\\mathrlap{\\smash{\\raise2mu{\\char"2322}}}
{\\smash{\\lower4mu{\\char"2323}}}\\mkern5mu}`);
defineMacro("\\incoh", `{\\mkern5mu\\rule{}{0.7em}\\mathrlap{\\smash{\\raise2mu{\\char"2323}}}
{\\smash{\\lower4mu{\\char"2322}}}\\mkern5mu}`);


//////////////////////////////////////////////////////////////////////
// chemstyle package
defineMacro("\\standardstate", "\\text{\\tiny\\char`⦵}");

﻿/* eslint-disable */
/* -*- Mode: JavaScript; indent-tabs-mode:nil; js-indent-level: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */

/*************************************************************
 *
 *  Temml mhchem.js
 *
 *  This file implements a Temml version of mhchem version 3.3.0.
 *  It is adapted from MathJax/extensions/TeX/mhchem.js
 *  It differs from the MathJax version as follows:
 *    1. The interface is changed so that it can be called from Temml, not MathJax.
 *    2. \rlap and \llap are replaced with \mathrlap and \mathllap.
 *    3. The reaction arrow code is simplified. All reaction arrows are rendered
 *       using Temml extensible arrows instead of building non-extensible arrows.
 *    4. The ~bond forms are composed entirely of \rule elements.
 *    5. Two dashes in _getBond are wrapped in braces to suppress spacing. i.e., {-}
 *    6. The electron dot uses \textbullet instead of \bullet.
 *    7. \smash[T] has been removed. (WebKit hides anything inside \smash{…})
 *
 *    This code, as other Temml code, is released under the MIT license.
 * 
 * /*************************************************************
 *
 *  MathJax/extensions/TeX/mhchem.js
 *
 *  Implements the \ce command for handling chemical formulas
 *  from the mhchem LaTeX package.
 *
 *  ---------------------------------------------------------------------
 *
 *  Copyright (c) 2011-2015 The MathJax Consortium
 *  Copyright (c) 2015-2018 Martin Hensel
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

//
// Coding Style
//   - use '' for identifiers that can by minified/uglified
//   - use "" for strings that need to stay untouched

// version: "3.3.0" for MathJax and Temml


// Add \ce, \pu, and \tripleDash to the Temml macros.

defineMacro("\\ce", function(context) {
  return chemParse(context.consumeArgs(1)[0], "ce")
});

defineMacro("\\pu", function(context) {
  return chemParse(context.consumeArgs(1)[0], "pu");
});

// Math fonts do not include glyphs for the ~ form of bonds. So we'll send path geometry
// So we'll compose characters built from \rule elements.
defineMacro("\\uniDash", `{\\rule{0.672em}{0.06em}}`);
defineMacro("\\triDash", `{\\rule{0.15em}{0.06em}\\kern2mu\\rule{0.15em}{0.06em}\\kern2mu\\rule{0.15em}{0.06em}}`);
defineMacro("\\tripleDash", `\\kern0.075em\\raise0.25em{\\triDash}\\kern0.075em`);
defineMacro("\\tripleDashOverLine", `\\kern0.075em\\mathrlap{\\raise0.125em{\\uniDash}}\\raise0.34em{\\triDash}\\kern0.075em`);
defineMacro("\\tripleDashOverDoubleLine", `\\kern0.075em\\mathrlap{\\mathrlap{\\raise0.48em{\\triDash}}\\raise0.27em{\\uniDash}}{\\raise0.05em{\\uniDash}}\\kern0.075em`);
defineMacro("\\tripleDashBetweenDoubleLine", `\\kern0.075em\\mathrlap{\\mathrlap{\\raise0.48em{\\uniDash}}\\raise0.27em{\\triDash}}{\\raise0.05em{\\uniDash}}\\kern0.075em`);

  //
  //  This is the main function for handing the \ce and \pu commands.
  //  It takes the argument to \ce or \pu and returns the corresponding TeX string.
  //

  var chemParse = function (tokens, stateMachine) {
    // Recreate the argument string from Temml's array of tokens.
    var str = "";
    var expectedLoc = tokens.length && tokens[tokens.length - 1].loc.start;
    for (var i = tokens.length - 1; i >= 0; i--) {
      if(tokens[i].loc.start > expectedLoc) {
        // context.consumeArgs has eaten a space.
        str += " ";
        expectedLoc = tokens[i].loc.start;
      }
      str += tokens[i].text;
      expectedLoc += tokens[i].text.length;
    }
    // Call the mhchem core parser.
    var tex = texify.go(mhchemParser.go(str, stateMachine));
    return tex;
  };

  //
  // Core parser for mhchem syntax  (recursive)
  //
  /** @type {MhchemParser} */
  var mhchemParser = {
    //
    // Parses mchem \ce syntax
    //
    // Call like
    //   go("H2O");
    //
    go: function (input, stateMachine) {
      if (!input) { return []; }
      if (stateMachine === undefined) { stateMachine = 'ce'; }
      var state = '0';

      //
      // String buffers for parsing:
      //
      // buffer.a == amount
      // buffer.o == element
      // buffer.b == left-side superscript
      // buffer.p == left-side subscript
      // buffer.q == right-side subscript
      // buffer.d == right-side superscript
      //
      // buffer.r == arrow
      // buffer.rdt == arrow, script above, type
      // buffer.rd == arrow, script above, content
      // buffer.rqt == arrow, script below, type
      // buffer.rq == arrow, script below, content
      //
      // buffer.text_
      // buffer.rm
      // etc.
      //
      // buffer.parenthesisLevel == int, starting at 0
      // buffer.sb == bool, space before
      // buffer.beginsWithBond == bool
      //
      // These letters are also used as state names.
      //
      // Other states:
      // 0 == begin of main part (arrow/operator unlikely)
      // 1 == next entity
      // 2 == next entity (arrow/operator unlikely)
      // 3 == next atom
      // c == macro
      //
      /** @type {Buffer} */
      var buffer = {};
      buffer['parenthesisLevel'] = 0;

      input = input.replace(/\n/g, " ");
      input = input.replace(/[\u2212\u2013\u2014\u2010]/g, "-");
      input = input.replace(/[\u2026]/g, "...");

      //
      // Looks through mhchemParser.transitions, to execute a matching action
      // (recursive)
      //
      var lastInput;
      var watchdog = 10;
      /** @type {ParserOutput[]} */
      var output = [];
      while (true) {
        if (lastInput !== input) {
          watchdog = 10;
          lastInput = input;
        } else {
          watchdog--;
        }
        //
        // Find actions in transition table
        //
        var machine = mhchemParser.stateMachines[stateMachine];
        var t = machine.transitions[state] || machine.transitions['*'];
        iterateTransitions:
        for (var i=0; i<t.length; i++) {
          var matches = mhchemParser.patterns.match_(t[i].pattern, input);
          if (matches) {
            //
            // Execute actions
            //
            var task = t[i].task;
            for (var iA=0; iA<task.action_.length; iA++) {
              var o;
              //
              // Find and execute action
              //
              if (machine.actions[task.action_[iA].type_]) {
                o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);
              } else if (mhchemParser.actions[task.action_[iA].type_]) {
                o = mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);
              } else {
                throw ["MhchemBugA", "mhchem bug A. Please report. (" + task.action_[iA].type_ + ")"];  // Trying to use non-existing action
              }
              //
              // Add output
              //
              mhchemParser.concatArray(output, o);
            }
            //
            // Set next state,
            // Shorten input,
            // Continue with next character
            //   (= apply only one transition per position)
            //
            state = task.nextState || state;
            if (input.length > 0) {
              if (!task.revisit) {
                input = matches.remainder;
              }
              if (!task.toContinue) {
                break iterateTransitions;
              }
            } else {
              return output;
            }
          }
        }
        //
        // Prevent infinite loop
        //
        if (watchdog <= 0) {
          throw ["MhchemBugU", "mhchem bug U. Please report."];  // Unexpected character
        }
      }
    },
    concatArray: function (a, b) {
      if (b) {
        if (Array.isArray(b)) {
          for (var iB=0; iB<b.length; iB++) {
            a.push(b[iB]);
          }
        } else {
          a.push(b);
        }
      }
    },

    patterns: {
      //
      // Matching patterns
      // either regexps or function that return null or {match_:"a", remainder:"bc"}
      //
      patterns: {
        // property names must not look like integers ("2") for correct property traversal order, later on
        'empty': /^$/,
        'else': /^./,
        'else2': /^./,
        'space': /^\s/,
        'space A': /^\s(?=[A-Z\\$])/,
        'space$': /^\s$/,
        'a-z': /^[a-z]/,
        'x': /^x/,
        'x$': /^x$/,
        'i$': /^i$/,
        'letters': /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
        '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
        'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
        '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
        'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
        'digits': /^[0-9]+/,
        '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
        '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
        '(-)(9.,9)(e)(99)': function (input) {
          var m = input.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
          if (m && m[0]) {
            return { match_: m.splice(1), remainder: input.substr(m[0].length) };
          }
          return null;
        },
        '(-)(9)^(-9)': function (input) {
          var m = input.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);
          if (m && m[0]) {
            return { match_: m.splice(1), remainder: input.substr(m[0].length) };
          }
          return null;
        },
        'state of aggregation $': function (input) {  // ... or crystal system
          var a = mhchemParser.patterns.findObserveGroups(input, "", /^\([a-z]{1,3}(?=[\),])/, ")", "");  // (aq), (aq,$\infty$), (aq, sat)
          if (a  &&  a.remainder.match(/^($|[\s,;\)\]\}])/)) { return a; }  //  AND end of 'phrase'
          var m = input.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);  // OR crystal system ($o$) (\ca$c$)
          if (m) {
            return { match_: m[0], remainder: input.substr(m[0].length) };
          }
          return null;
        },
        '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
        '{[(': /^(?:\\\{|\[|\()/,
        ')]}': /^(?:\)|\]|\\\})/,
        ', ': /^[,;]\s*/,
        ',': /^[,;]/,
        '.': /^[.]/,
        '. ': /^([.\u22C5\u00B7\u2022])\s*/,
        '...': /^\.\.\.(?=$|[^.])/,
        '* ': /^([*])\s*/,
        '^{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "^{", "", "", "}"); },
        '^($...$)': function (input) { return mhchemParser.patterns.findObserveGroups(input, "^", "$", "$", ""); },
        '^a': /^\^([0-9]+|[^\\_])/,
        '^\\x{}{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "^", /^\\[a-zA-Z]+\{/, "}", "", "", "{", "}", "", true); },
        '^\\x{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "^", /^\\[a-zA-Z]+\{/, "}", ""); },
        '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
        '^(-1)': /^\^(-?\d+)/,
        '\'': /^'/,
        '_{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "_{", "", "", "}"); },
        '_($...$)': function (input) { return mhchemParser.patterns.findObserveGroups(input, "_", "$", "$", ""); },
        '_9': /^_([+\-]?[0-9]+|[^\\])/,
        '_\\x{}{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "_", /^\\[a-zA-Z]+\{/, "}", "", "", "{", "}", "", true); },
        '_\\x{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "_", /^\\[a-zA-Z]+\{/, "}", ""); },
        '_\\x': /^_(\\[a-zA-Z]+)\s*/,
        '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
        '{}': /^\{\}/,
        '{...}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "", "{", "}", ""); },
        '{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "{", "", "", "}"); },
        '$...$': function (input) { return mhchemParser.patterns.findObserveGroups(input, "", "$", "$", ""); },
        '${(...)}$': function (input) { return mhchemParser.patterns.findObserveGroups(input, "${", "", "", "}$"); },
        '$(...)$': function (input) { return mhchemParser.patterns.findObserveGroups(input, "$", "", "", "$"); },
        '=<>': /^[=<>]/,
        '#': /^[#\u2261]/,
        '+': /^\+/,
        '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,  // -space -, -; -] -/ -$ -state-of-aggregation
        '-9': /^-(?=[0-9])/,
        '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
        '-': /^-/,
        'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
        'operator': /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
        'arrowUpDown': /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
        '\\bond{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\bond{", "", "", "}"); },
        '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
        'CMT': /^[CMT](?=\[)/,
        '[(...)]': function (input) { return mhchemParser.patterns.findObserveGroups(input, "[", "", "", "]"); },
        '1st-level escape': /^(&|\\\\|\\hline)\s*/,
        '\\,': /^(?:\\[,\ ;:])/,  // \\x - but output no space before
        '\\x{}{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "", /^\\[a-zA-Z]+\{/, "}", "", "", "{", "}", "", true); },
        '\\x{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "", /^\\[a-zA-Z]+\{/, "}", ""); },
        '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
        '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
        'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,  // only those with numbers in front, because the others will be formatted correctly anyway
        'others': /^[\/~|]/,
        '\\frac{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\frac{", "", "", "}", "{", "", "", "}"); },
        '\\overset{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\overset{", "", "", "}", "{", "", "", "}"); },
        '\\underset{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\underset{", "", "", "}", "{", "", "", "}"); },
        '\\underbrace{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\underbrace{", "", "", "}_", "{", "", "", "}"); },
        '\\color{(...)}0': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\color{", "", "", "}"); },
        '\\color{(...)}{(...)}1': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\color{", "", "", "}", "{", "", "", "}"); },
        '\\color(...){(...)}2': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\color", "\\", "", /^(?=\{)/, "{", "", "", "}"); },
        '\\ce{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, "\\ce{", "", "", "}"); },
        'oxidation$': /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
        'd-oxidation$': /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,  // 0 could be oxidation or charge
        'roman numeral': /^[IVX]+/,
        '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
        'amount': function (input) {
          var match;
          // e.g. 2, 0.5, 1/2, -2, n/2, +;  $a$ could be added later in parsing
          match = input.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/);
          if (match) {
            return { match_: match[0], remainder: input.substr(match[0].length) };
          }
          var a = mhchemParser.patterns.findObserveGroups(input, "", "$", "$", "");
          if (a) {  // e.g. $2n-1$, $-$
            match = a.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/);
            if (match) {
              return { match_: match[0], remainder: input.substr(match[0].length) };
            }
          }
          return null;
        },
        'amount2': function (input) { return this['amount'](input); },
        '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
        'formula$': function (input) {
          if (input.match(/^\([a-z]+\)$/)) { return null; }  // state of aggregation = no formula
          var match = input.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
          if (match) {
            return { match_: match[0], remainder: input.substr(match[0].length) };
          }
          return null;
        },
        'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
        '/': /^\s*(\/)\s*/,
        '//': /^\s*(\/\/)\s*/,
        '*': /^\s*[*.]\s*/
      },
      findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {
        /** @type {{(input: string, pattern: string | RegExp): string | string[] | null;}} */
        var _match = function (input, pattern) {
          if (typeof pattern === "string") {
            if (input.indexOf(pattern) !== 0) { return null; }
            return pattern;
          } else {
            var match = input.match(pattern);
            if (!match) { return null; }
            return match[0];
          }
        };
        /** @type {{(input: string, i: number, endChars: string | RegExp): {endMatchBegin: number, endMatchEnd: number} | null;}} */
        var _findObserveGroups = function (input, i, endChars) {
          var braces = 0;
          while (i < input.length) {
            var a = input.charAt(i);
            var match = _match(input.substr(i), endChars);
            if (match !== null  &&  braces === 0) {
              return { endMatchBegin: i, endMatchEnd: i + match.length };
            } else if (a === "{") {
              braces++;
            } else if (a === "}") {
              if (braces === 0) {
                throw ["ExtraCloseMissingOpen", "Extra close brace or missing open brace"];
              } else {
                braces--;
              }
            }
            i++;
          }
          if (braces > 0) {
            return null;
          }
          return null;
        };
        var match = _match(input, begExcl);
        if (match === null) { return null; }
        input = input.substr(match.length);
        match = _match(input, begIncl);
        if (match === null) { return null; }
        var e = _findObserveGroups(input, match.length, endIncl || endExcl);
        if (e === null) { return null; }
        var match1 = input.substring(0, (endIncl ? e.endMatchEnd : e.endMatchBegin));
        if (!(beg2Excl || beg2Incl)) {
          return {
            match_: match1,
            remainder: input.substr(e.endMatchEnd)
          };
        } else {
          var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);
          if (group2 === null) { return null; }
          /** @type {string[]} */
          var matchRet = [match1, group2.match_];
          return {
            match_: (combine ? matchRet.join("") : matchRet),
            remainder: group2.remainder
          };
        }
      },

      //
      // Matching function
      // e.g. match("a", input) will look for the regexp called "a" and see if it matches
      // returns null or {match_:"a", remainder:"bc"}
      //
      match_: function (m, input) {
        var pattern = mhchemParser.patterns.patterns[m];
        if (pattern === undefined) {
          throw ["MhchemBugP", "mhchem bug P. Please report. (" + m + ")"];  // Trying to use non-existing pattern
        } else if (typeof pattern === "function") {
          return mhchemParser.patterns.patterns[m](input);  // cannot use cached var pattern here, because some pattern functions need this===mhchemParser
        } else {  // RegExp
          var match = input.match(pattern);
          if (match) {
            var mm;
            if (match[2]) {
              mm = [ match[1], match[2] ];
            } else if (match[1]) {
              mm = match[1];
            } else {
              mm = match[0];
            }
            return { match_: mm, remainder: input.substr(match[0].length) };
          }
          return null;
        }
      }
    },

    //
    // Generic state machine actions
    //
    actions: {
      'a=': function (buffer, m) { buffer.a = (buffer.a || "") + m; },
      'b=': function (buffer, m) { buffer.b = (buffer.b || "") + m; },
      'p=': function (buffer, m) { buffer.p = (buffer.p || "") + m; },
      'o=': function (buffer, m) { buffer.o = (buffer.o || "") + m; },
      'q=': function (buffer, m) { buffer.q = (buffer.q || "") + m; },
      'd=': function (buffer, m) { buffer.d = (buffer.d || "") + m; },
      'rm=': function (buffer, m) { buffer.rm = (buffer.rm || "") + m; },
      'text=': function (buffer, m) { buffer.text_ = (buffer.text_ || "") + m; },
      'insert': function (buffer, m, a) { return { type_: a }; },
      'insert+p1': function (buffer, m, a) { return { type_: a, p1: m }; },
      'insert+p1+p2': function (buffer, m, a) { return { type_: a, p1: m[0], p2: m[1] }; },
      'copy': function (buffer, m) { return m; },
      'rm': function (buffer, m) { return { type_: 'rm', p1: m || ""}; },
      'text': function (buffer, m) { return mhchemParser.go(m, 'text'); },
      '{text}': function (buffer, m) {
        var ret = [ "{" ];
        mhchemParser.concatArray(ret, mhchemParser.go(m, 'text'));
        ret.push("}");
        return ret;
      },
      'tex-math': function (buffer, m) { return mhchemParser.go(m, 'tex-math'); },
      'tex-math tight': function (buffer, m) { return mhchemParser.go(m, 'tex-math tight'); },
      'bond': function (buffer, m, k) { return { type_: 'bond', kind_: k || m }; },
      'color0-output': function (buffer, m) { return { type_: 'color0', color: m[0] }; },
      'ce': function (buffer, m) { return mhchemParser.go(m); },
      '1/2': function (buffer, m) {
        /** @type {ParserOutput[]} */
        var ret = [];
        if (m.match(/^[+\-]/)) {
          ret.push(m.substr(0, 1));
          m = m.substr(1);
        }
        var n = m.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
        n[1] = n[1].replace(/\$/g, "");
        ret.push({ type_: 'frac', p1: n[1], p2: n[2] });
        if (n[3]) {
          n[3] = n[3].replace(/\$/g, "");
          ret.push({ type_: 'tex-math', p1: n[3] });
        }
        return ret;
      },
      '9,9': function (buffer, m) { return mhchemParser.go(m, '9,9'); }
    },
    //
    // createTransitions
    // convert  { 'letter': { 'state': { action_: 'output' } } }  to  { 'state' => [ { pattern: 'letter', task: { action_: [{type_: 'output'}] } } ] }
    // with expansion of 'a|b' to 'a' and 'b' (at 2 places)
    //
    createTransitions: function (o) {
      var pattern, state;
      /** @type {string[]} */
      var stateArray;
      var i;
      //
      // 1. Collect all states
      //
      /** @type {Transitions} */
      var transitions = {};
      for (pattern in o) {
        for (state in o[pattern]) {
          stateArray = state.split("|");
          o[pattern][state].stateArray = stateArray;
          for (i=0; i<stateArray.length; i++) {
            transitions[stateArray[i]] = [];
          }
        }
      }
      //
      // 2. Fill states
      //
      for (pattern in o) {
        for (state in o[pattern]) {
          stateArray = o[pattern][state].stateArray || [];
          for (i=0; i<stateArray.length; i++) {
            //
            // 2a. Normalize actions into array:  'text=' ==> [{type_:'text='}]
            // (Note to myself: Resolving the function here would be problematic. It would need .bind (for *this*) and currying (for *option*).)
            //
            /** @type {any} */
            var p = o[pattern][state];
            if (p.action_) {
              p.action_ = [].concat(p.action_);
              for (var k=0; k<p.action_.length; k++) {
                if (typeof p.action_[k] === "string") {
                  p.action_[k] = { type_: p.action_[k] };
                }
              }
            } else {
              p.action_ = [];
            }
            //
            // 2.b Multi-insert
            //
            var patternArray = pattern.split("|");
            for (var j=0; j<patternArray.length; j++) {
              if (stateArray[i] === '*') {  // insert into all
                for (var t in transitions) {
                  transitions[t].push({ pattern: patternArray[j], task: p });
                }
              } else {
                transitions[stateArray[i]].push({ pattern: patternArray[j], task: p });
              }
            }
          }
        }
      }
      return transitions;
    },
    stateMachines: {}
  };

  //
  // Definition of state machines
  //
  mhchemParser.stateMachines = {
    //
    // \ce state machines
    //
    //#region ce
    'ce': {  // main parser
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': { action_: 'output' } },
        'else':  {
          '0|1|2': { action_: 'beginsWithBond=false', revisit: true, toContinue: true } },
        'oxidation$': {
          '0': { action_: 'oxidation-output' } },
        'CMT': {
          'r': { action_: 'rdt=', nextState: 'rt' },
          'rd': { action_: 'rqt=', nextState: 'rdt' } },
        'arrowUpDown': {
          '0|1|2|as': { action_: [ 'sb=false', 'output', 'operator' ], nextState: '1' } },
        'uprightEntities': {
          '0|1|2': { action_: [ 'o=', 'output' ], nextState: '1' } },
        'orbital': {
          '0|1|2|3': { action_: 'o=', nextState: 'o' } },
        '->': {
          '0|1|2|3': { action_: 'r=', nextState: 'r' },
          'a|as': { action_: [ 'output', 'r=' ], nextState: 'r' },
          '*': { action_: [ 'output', 'r=' ], nextState: 'r' } },
        '+': {
          'o': { action_: 'd= kv',  nextState: 'd' },
          'd|D': { action_: 'd=', nextState: 'd' },
          'q': { action_: 'd=',  nextState: 'qd' },
          'qd|qD': { action_: 'd=', nextState: 'qd' },
          'dq': { action_: [ 'output', 'd=' ], nextState: 'd' },
          '3': { action_: [ 'sb=false', 'output', 'operator' ], nextState: '0' } },
        'amount': {
          '0|2': { action_: 'a=', nextState: 'a' } },
        'pm-operator': {
          '0|1|2|a|as': { action_: [ 'sb=false', 'output', { type_: 'operator', option: '\\pm' } ], nextState: '0' } },
        'operator': {
          '0|1|2|a|as': { action_: [ 'sb=false', 'output', 'operator' ], nextState: '0' } },
        '-$': {
          'o|q': { action_: [ 'charge or bond', 'output' ],  nextState: 'qd' },
          'd': { action_: 'd=', nextState: 'd' },
          'D': { action_: [ 'output', { type_: 'bond', option: "-" } ], nextState: '3' },
          'q': { action_: 'd=',  nextState: 'qd' },
          'qd': { action_: 'd=', nextState: 'qd' },
          'qD|dq': { action_: [ 'output', { type_: 'bond', option: "-" } ], nextState: '3' } },
        '-9': {
          '3|o': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '3' } },
        '- orbital overlap': {
          'o': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '2' },
          'd': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '2' } },
        '-': {
          '0|1|2': { action_: [ { type_: 'output', option: 1 }, 'beginsWithBond=true', { type_: 'bond', option: "-" } ], nextState: '3' },
          '3': { action_: { type_: 'bond', option: "-" } },
          'a': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '2' },
          'as': { action_: [ { type_: 'output', option: 2 }, { type_: 'bond', option: "-" } ], nextState: '3' },
          'b': { action_: 'b=' },
          'o': { action_: { type_: '- after o/d', option: false }, nextState: '2' },
          'q': { action_: { type_: '- after o/d', option: false }, nextState: '2' },
          'd|qd|dq': { action_: { type_: '- after o/d', option: true }, nextState: '2' },
          'D|qD|p': { action_: [ 'output', { type_: 'bond', option: "-" } ], nextState: '3' } },
        'amount2': {
          '1|3': { action_: 'a=', nextState: 'a' } },
        'letters': {
          '0|1|2|3|a|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },
          'q|dq': { action_: ['output', 'o='], nextState: 'o' },
          'd|D|qd|qD': { action_: 'o after d', nextState: 'o' } },
        'digits': {
          'o': { action_: 'q=', nextState: 'q' },
          'd|D': { action_: 'q=', nextState: 'dq' },
          'q': { action_: [ 'output', 'o=' ], nextState: 'o' },
          'a': { action_: 'o=', nextState: 'o' } },
        'space A': {
          'b|p|bp': {} },
        'space': {
          'a': { nextState: 'as' },
          '0': { action_: 'sb=false' },
          '1|2': { action_: 'sb=true' },
          'r|rt|rd|rdt|rdq': { action_: 'output', nextState: '0' },
          '*': { action_: [ 'output', 'sb=true' ], nextState: '1'} },
        '1st-level escape': {
          '1|2': { action_: [ 'output', { type_: 'insert+p1', option: '1st-level escape' } ] },
          '*': { action_: [ 'output', { type_: 'insert+p1', option: '1st-level escape' } ], nextState: '0' } },
        '[(...)]': {
          'r|rt': { action_: 'rd=', nextState: 'rd' },
          'rd|rdt': { action_: 'rq=', nextState: 'rdq' } },
        '...': {
          'o|d|D|dq|qd|qD': { action_: [ 'output', { type_: 'bond', option: "..." } ], nextState: '3' },
          '*': { action_: [ { type_: 'output', option: 1 }, { type_: 'insert', option: 'ellipsis' } ], nextState: '1' } },
        '. |* ': {
          '*': { action_: [ 'output', { type_: 'insert', option: 'addition compound' } ], nextState: '1' } },
        'state of aggregation $': {
          '*': { action_: [ 'output', 'state of aggregation' ], nextState: '1' } },
        '{[(': {
          'a|as|o': { action_: [ 'o=', 'output', 'parenthesisLevel++' ], nextState: '2' },
          '0|1|2|3': { action_: [ 'o=', 'output', 'parenthesisLevel++' ], nextState: '2' },
          '*': { action_: [ 'output', 'o=', 'output', 'parenthesisLevel++' ], nextState: '2' } },
        ')]}': {
          '0|1|2|3|b|p|bp|o': { action_: [ 'o=', 'parenthesisLevel--' ], nextState: 'o' },
          'a|as|d|D|q|qd|qD|dq': { action_: [ 'output', 'o=', 'parenthesisLevel--' ], nextState: 'o' } },
        ', ': {
          '*': { action_: [ 'output', 'comma' ], nextState: '0' } },
        '^_': {  // ^ and _ without a sensible argument
          '*': { } },
        '^{(...)}|^($...$)': {
          '0|1|2|as': { action_: 'b=', nextState: 'b' },
          'p': { action_: 'b=', nextState: 'bp' },
          '3|o': { action_: 'd= kv', nextState: 'D' },
          'q': { action_: 'd=', nextState: 'qD' },
          'd|D|qd|qD|dq': { action_: [ 'output', 'd=' ], nextState: 'D' } },
        '^a|^\\x{}{}|^\\x{}|^\\x|\'': {
          '0|1|2|as': { action_: 'b=', nextState: 'b' },
          'p': { action_: 'b=', nextState: 'bp' },
          '3|o': { action_: 'd= kv', nextState: 'd' },
          'q': { action_: 'd=', nextState: 'qd' },
          'd|qd|D|qD': { action_: 'd=' },
          'dq': { action_: [ 'output', 'd=' ], nextState: 'd' } },
        '_{(state of aggregation)}$': {
          'd|D|q|qd|qD|dq': { action_: [ 'output', 'q=' ], nextState: 'q' } },
        '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
          '0|1|2|as': { action_: 'p=', nextState: 'p' },
          'b': { action_: 'p=', nextState: 'bp' },
          '3|o': { action_: 'q=', nextState: 'q' },
          'd|D': { action_: 'q=', nextState: 'dq' },
          'q|qd|qD|dq': { action_: [ 'output', 'q=' ], nextState: 'q' } },
        '=<>': {
          '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': { action_: [ { type_: 'output', option: 2 }, 'bond' ], nextState: '3' } },
        '#': {
          '0|1|2|3|a|as|o': { action_: [ { type_: 'output', option: 2 }, { type_: 'bond', option: "#" } ], nextState: '3' } },
        '{}': {
          '*': { action_: { type_: 'output', option: 1 },  nextState: '1' } },
        '{...}': {
          '0|1|2|3|a|as|b|p|bp': { action_: 'o=', nextState: 'o' },
          'o|d|D|q|qd|qD|dq': { action_: [ 'output', 'o=' ], nextState: 'o' } },
        '$...$': {
          'a': { action_: 'a=' },  // 2$n$
          '0|1|2|3|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },  // not 'amount'
          'as|o': { action_: 'o=' },
          'q|d|D|qd|qD|dq': { action_: [ 'output', 'o=' ], nextState: 'o' } },
        '\\bond{(...)}': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'bond' ], nextState: "3" } },
        '\\frac{(...)}': {
          '*': { action_: [ { type_: 'output', option: 1 }, 'frac-output' ], nextState: '3' } },
        '\\overset{(...)}': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'overset-output' ], nextState: '3' } },
        '\\underset{(...)}': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'underset-output' ], nextState: '3' } },
        '\\underbrace{(...)}': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'underbrace-output' ], nextState: '3' } },
        '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'color-output' ], nextState: '3' } },
        '\\color{(...)}0': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'color0-output' ] } },
        '\\ce{(...)}': {
          '*': { action_: [ { type_: 'output', option: 2 }, 'ce' ], nextState: '3' } },
        '\\,': {
          '*': { action_: [ { type_: 'output', option: 1 }, 'copy' ], nextState: '1' } },
        '\\x{}{}|\\x{}|\\x': {
          '0|1|2|3|a|as|b|p|bp|o|c0': { action_: [ 'o=', 'output' ], nextState: '3' },
          '*': { action_: ['output', 'o=', 'output' ], nextState: '3' } },
        'others': {
          '*': { action_: [ { type_: 'output', option: 1 }, 'copy' ], nextState: '3' } },
        'else2': {
          'a': { action_: 'a to o', nextState: 'o', revisit: true },
          'as': { action_: [ 'output', 'sb=true' ], nextState: '1', revisit: true },
          'r|rt|rd|rdt|rdq': { action_: [ 'output' ], nextState: '0', revisit: true },
          '*': { action_: [ 'output', 'copy' ], nextState: '3' } }
      }),
      actions: {
        'o after d': function (buffer, m) {
          var ret;
          if ((buffer.d || "").match(/^[0-9]+$/)) {
            var tmp = buffer.d;
            buffer.d = undefined;
            ret = this['output'](buffer);
            buffer.b = tmp;
          } else {
            ret = this['output'](buffer);
          }
          mhchemParser.actions['o='](buffer, m);
          return ret;
        },
        'd= kv': function (buffer, m) {
          buffer.d = m;
          buffer.dType = 'kv';
        },
        'charge or bond': function (buffer, m) {
          if (buffer['beginsWithBond']) {
            /** @type {ParserOutput[]} */
            var ret = [];
            mhchemParser.concatArray(ret, this['output'](buffer));
            mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, "-"));
            return ret;
          } else {
            buffer.d = m;
          }
        },
        '- after o/d': function (buffer, m, isAfterD) {
          var c1 = mhchemParser.patterns.match_('orbital', buffer.o || "");
          var c2 = mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || "");
          var c3 = mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || "");
          var c4 = mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || "");
          var hyphenFollows =  m==="-" && ( c1 && c1.remainder===""  ||  c2  ||  c3  ||  c4 );
          if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {
            buffer.o = '$' + buffer.o + '$';
          }
          /** @type {ParserOutput[]} */
          var ret = [];
          if (hyphenFollows) {
            mhchemParser.concatArray(ret, this['output'](buffer));
            ret.push({ type_: 'hyphen' });
          } else {
            c1 = mhchemParser.patterns.match_('digits', buffer.d || "");
            if (isAfterD && c1 && c1.remainder==='') {
              mhchemParser.concatArray(ret, mhchemParser.actions['d='](buffer, m));
              mhchemParser.concatArray(ret, this['output'](buffer));
            } else {
              mhchemParser.concatArray(ret, this['output'](buffer));
              mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, "-"));
            }
          }
          return ret;
        },
        'a to o': function (buffer) {
          buffer.o = buffer.a;
          buffer.a = undefined;
        },
        'sb=true': function (buffer) { buffer.sb = true; },
        'sb=false': function (buffer) { buffer.sb = false; },
        'beginsWithBond=true': function (buffer) { buffer['beginsWithBond'] = true; },
        'beginsWithBond=false': function (buffer) { buffer['beginsWithBond'] = false; },
        'parenthesisLevel++': function (buffer) { buffer['parenthesisLevel']++; },
        'parenthesisLevel--': function (buffer) { buffer['parenthesisLevel']--; },
        'state of aggregation': function (buffer, m) {
          return { type_: 'state of aggregation', p1: mhchemParser.go(m, 'o') };
        },
        'comma': function (buffer, m) {
          var a = m.replace(/\s*$/, '');
          var withSpace = (a !== m);
          if (withSpace  &&  buffer['parenthesisLevel'] === 0) {
            return { type_: 'comma enumeration L', p1: a };
          } else {
            return { type_: 'comma enumeration M', p1: a };
          }
        },
        'output': function (buffer, m, entityFollows) {
          // entityFollows:
          //   undefined = if we have nothing else to output, also ignore the just read space (buffer.sb)
          //   1 = an entity follows, never omit the space if there was one just read before (can only apply to state 1)
          //   2 = 1 + the entity can have an amount, so output a\, instead of converting it to o (can only apply to states a|as)
          /** @type {ParserOutput | ParserOutput[]} */
          var ret;
          if (!buffer.r) {
            ret = [];
            if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) ; else {
              if (buffer.sb) {
                ret.push({ type_: 'entitySkip' });
              }
              if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows!==2) {
                buffer.o = buffer.a;
                buffer.a = undefined;
              } else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {
                buffer.o = buffer.a;
                buffer.d = buffer.b;
                buffer.q = buffer.p;
                buffer.a = buffer.b = buffer.p = undefined;
              } else {
                if (buffer.o && buffer.dType==='kv' && mhchemParser.patterns.match_('d-oxidation$', buffer.d || "")) {
                  buffer.dType = 'oxidation';
                } else if (buffer.o && buffer.dType==='kv' && !buffer.q) {
                  buffer.dType = undefined;
                }
              }
              ret.push({
                type_: 'chemfive',
                a: mhchemParser.go(buffer.a, 'a'),
                b: mhchemParser.go(buffer.b, 'bd'),
                p: mhchemParser.go(buffer.p, 'pq'),
                o: mhchemParser.go(buffer.o, 'o'),
                q: mhchemParser.go(buffer.q, 'pq'),
                d: mhchemParser.go(buffer.d, (buffer.dType === 'oxidation' ? 'oxidation' : 'bd')),
                dType: buffer.dType
              });
            }
          } else {  // r
            /** @type {ParserOutput[]} */
            var rd;
            if (buffer.rdt === 'M') {
              rd = mhchemParser.go(buffer.rd, 'tex-math');
            } else if (buffer.rdt === 'T') {
              rd = [ { type_: 'text', p1: buffer.rd || "" } ];
            } else {
              rd = mhchemParser.go(buffer.rd);
            }
            /** @type {ParserOutput[]} */
            var rq;
            if (buffer.rqt === 'M') {
              rq = mhchemParser.go(buffer.rq, 'tex-math');
            } else if (buffer.rqt === 'T') {
              rq = [ { type_: 'text', p1: buffer.rq || ""} ];
            } else {
              rq = mhchemParser.go(buffer.rq);
            }
            ret = {
              type_: 'arrow',
              r: buffer.r,
              rd: rd,
              rq: rq
            };
          }
          for (var p in buffer) {
            if (p !== 'parenthesisLevel'  &&  p !== 'beginsWithBond') {
              delete buffer[p];
            }
          }
          return ret;
        },
        'oxidation-output': function (buffer, m) {
          var ret = [ "{" ];
          mhchemParser.concatArray(ret, mhchemParser.go(m, 'oxidation'));
          ret.push("}");
          return ret;
        },
        'frac-output': function (buffer, m) {
          return { type_: 'frac-ce', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };
        },
        'overset-output': function (buffer, m) {
          return { type_: 'overset', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };
        },
        'underset-output': function (buffer, m) {
          return { type_: 'underset', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };
        },
        'underbrace-output': function (buffer, m) {
          return { type_: 'underbrace', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };
        },
        'color-output': function (buffer, m) {
          return { type_: 'color', color1: m[0], color2: mhchemParser.go(m[1]) };
        },
        'r=': function (buffer, m) { buffer.r = m; },
        'rdt=': function (buffer, m) { buffer.rdt = m; },
        'rd=': function (buffer, m) { buffer.rd = m; },
        'rqt=': function (buffer, m) { buffer.rqt = m; },
        'rq=': function (buffer, m) { buffer.rq = m; },
        'operator': function (buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; }
      }
    },
    'a': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': {} },
        '1/2$': {
          '0': { action_: '1/2' } },
        'else': {
          '0': { nextState: '1', revisit: true } },
        '$(...)$': {
          '*': { action_: 'tex-math tight', nextState: '1' } },
        ',': {
          '*': { action_: { type_: 'insert', option: 'commaDecimal' } } },
        'else2': {
          '*': { action_: 'copy' } }
      }),
      actions: {}
    },
    'o': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': {} },
        '1/2$': {
          '0': { action_: '1/2' } },
        'else': {
          '0': { nextState: '1', revisit: true } },
        'letters': {
          '*': { action_: 'rm' } },
        '\\ca': {
          '*': { action_: { type_: 'insert', option: 'circa' } } },
        '\\x{}{}|\\x{}|\\x': {
          '*': { action_: 'copy' } },
        '${(...)}$|$(...)$': {
          '*': { action_: 'tex-math' } },
        '{(...)}': {
          '*': { action_: '{text}' } },
        'else2': {
          '*': { action_: 'copy' } }
      }),
      actions: {}
    },
    'text': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': { action_: 'output' } },
        '{...}': {
          '*': { action_: 'text=' } },
        '${(...)}$|$(...)$': {
          '*': { action_: 'tex-math' } },
        '\\greek': {
          '*': { action_: [ 'output', 'rm' ] } },
        '\\,|\\x{}{}|\\x{}|\\x': {
          '*': { action_: [ 'output', 'copy' ] } },
        'else': {
          '*': { action_: 'text=' } }
      }),
      actions: {
        'output': function (buffer) {
          if (buffer.text_) {
            /** @type {ParserOutput} */
            var ret = { type_: 'text', p1: buffer.text_ };
            for (var p in buffer) { delete buffer[p]; }
            return ret;
          }
        }
      }
    },
    'pq': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': {} },
        'state of aggregation $': {
          '*': { action_: 'state of aggregation' } },
        'i$': {
          '0': { nextState: '!f', revisit: true } },
        '(KV letters),': {
          '0': { action_: 'rm', nextState: '0' } },
        'formula$': {
          '0': { nextState: 'f', revisit: true } },
        '1/2$': {
          '0': { action_: '1/2' } },
        'else': {
          '0': { nextState: '!f', revisit: true } },
        '${(...)}$|$(...)$': {
          '*': { action_: 'tex-math' } },
        '{(...)}': {
          '*': { action_: 'text' } },
        'a-z': {
          'f': { action_: 'tex-math' } },
        'letters': {
          '*': { action_: 'rm' } },
        '-9.,9': {
          '*': { action_: '9,9'  } },
        ',': {
          '*': { action_: { type_: 'insert+p1', option: 'comma enumeration S' } } },
        '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
          '*': { action_: 'color-output' } },
        '\\color{(...)}0': {
          '*': { action_: 'color0-output' } },
        '\\ce{(...)}': {
          '*': { action_: 'ce' } },
        '\\,|\\x{}{}|\\x{}|\\x': {
          '*': { action_: 'copy' } },
        'else2': {
          '*': { action_: 'copy' } }
      }),
      actions: {
        'state of aggregation': function (buffer, m) {
          return { type_: 'state of aggregation subscript', p1: mhchemParser.go(m, 'o') };
        },
        'color-output': function (buffer, m) {
          return { type_: 'color', color1: m[0], color2: mhchemParser.go(m[1], 'pq') };
        }
      }
    },
    'bd': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': {} },
        'x$': {
          '0': { nextState: '!f', revisit: true } },
        'formula$': {
          '0': { nextState: 'f', revisit: true } },
        'else': {
          '0': { nextState: '!f', revisit: true } },
        '-9.,9 no missing 0': {
          '*': { action_: '9,9' } },
        '.': {
          '*': { action_: { type_: 'insert', option: 'electron dot' } } },
        'a-z': {
          'f': { action_: 'tex-math' } },
        'x': {
          '*': { action_: { type_: 'insert', option: 'KV x' } } },
        'letters': {
          '*': { action_: 'rm' } },
        '\'': {
          '*': { action_: { type_: 'insert', option: 'prime' } } },
        '${(...)}$|$(...)$': {
          '*': { action_: 'tex-math' } },
        '{(...)}': {
          '*': { action_: 'text' } },
        '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
          '*': { action_: 'color-output' } },
        '\\color{(...)}0': {
          '*': { action_: 'color0-output' } },
        '\\ce{(...)}': {
          '*': { action_: 'ce' } },
        '\\,|\\x{}{}|\\x{}|\\x': {
          '*': { action_: 'copy' } },
        'else2': {
          '*': { action_: 'copy' } }
      }),
      actions: {
        'color-output': function (buffer, m) {
          return { type_: 'color', color1: m[0], color2: mhchemParser.go(m[1], 'bd') };
        }
      }
    },
    'oxidation': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': {} },
        'roman numeral': {
          '*': { action_: 'roman-numeral' } },
        '${(...)}$|$(...)$': {
          '*': { action_: 'tex-math' } },
        'else': {
          '*': { action_: 'copy' } }
      }),
      actions: {
        'roman-numeral': function (buffer, m) { return { type_: 'roman numeral', p1: m || "" }; }
      }
    },
    'tex-math': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': { action_: 'output' } },
        '\\ce{(...)}': {
          '*': { action_: [ 'output', 'ce' ] } },
        '{...}|\\,|\\x{}{}|\\x{}|\\x': {
          '*': { action_: 'o=' } },
        'else': {
          '*': { action_: 'o=' } }
      }),
      actions: {
        'output': function (buffer) {
          if (buffer.o) {
            /** @type {ParserOutput} */
            var ret = { type_: 'tex-math', p1: buffer.o };
            for (var p in buffer) { delete buffer[p]; }
            return ret;
          }
        }
      }
    },
    'tex-math tight': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': { action_: 'output' } },
        '\\ce{(...)}': {
          '*': { action_: [ 'output', 'ce' ] } },
        '{...}|\\,|\\x{}{}|\\x{}|\\x': {
          '*': { action_: 'o=' } },
        '-|+': {
          '*': { action_: 'tight operator' } },
        'else': {
          '*': { action_: 'o=' } }
      }),
      actions: {
        'tight operator': function (buffer, m) { buffer.o = (buffer.o || "") + "{"+m+"}"; },
        'output': function (buffer) {
          if (buffer.o) {
            /** @type {ParserOutput} */
            var ret = { type_: 'tex-math', p1: buffer.o };
            for (var p in buffer) { delete buffer[p]; }
            return ret;
          }
        }
      }
    },
    '9,9': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': {} },
        ',': {
          '*': { action_: 'comma' } },
        'else': {
          '*': { action_: 'copy' } }
      }),
      actions: {
        'comma': function () { return { type_: 'commaDecimal' }; }
      }
    },
    //#endregion
    //
    // \pu state machines
    //
    //#region pu
    'pu': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': { action_: 'output' } },
        'space$': {
          '*': { action_: [ 'output', 'space' ] } },
        '{[(|)]}': {
          '0|a': { action_: 'copy' } },
        '(-)(9)^(-9)': {
          '0': { action_: 'number^', nextState: 'a' } },
        '(-)(9.,9)(e)(99)': {
          '0': { action_: 'enumber', nextState: 'a' } },
        'space': {
          '0|a': {} },
        'pm-operator': {
          '0|a': { action_: { type_: 'operator', option: '\\pm' }, nextState: '0' } },
        'operator': {
          '0|a': { action_: 'copy', nextState: '0' } },
        '//': {
          'd': { action_: 'o=', nextState: '/' } },
        '/': {
          'd': { action_: 'o=', nextState: '/' } },
        '{...}|else': {
          '0|d': { action_: 'd=', nextState: 'd' },
          'a': { action_: [ 'space', 'd=' ], nextState: 'd' },
          '/|q': { action_: 'q=', nextState: 'q' } }
      }),
      actions: {
        'enumber': function (buffer, m) {
          /** @type {ParserOutput[]} */
          var ret = [];
          if (m[0] === "+-"  ||  m[0] === "+/-") {
            ret.push("\\pm ");
          } else if (m[0]) {
            ret.push(m[0]);
          }
          if (m[1]) {
            mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));
            if (m[2]) {
              if (m[2].match(/[,.]/)) {
                mhchemParser.concatArray(ret, mhchemParser.go(m[2], 'pu-9,9'));
              } else {
                ret.push(m[2]);
              }
            }
            m[3] = m[4] || m[3];
            if (m[3]) {
              m[3] = m[3].trim();
              if (m[3] === "e"  ||  m[3].substr(0, 1) === "*") {
                ret.push({ type_: 'cdot' });
              } else {
                ret.push({ type_: 'times' });
              }
            }
          }
          if (m[3]) {
            ret.push("10^{"+m[5]+"}");
          }
          return ret;
        },
        'number^': function (buffer, m) {
          /** @type {ParserOutput[]} */
          var ret = [];
          if (m[0] === "+-"  ||  m[0] === "+/-") {
            ret.push("\\pm ");
          } else if (m[0]) {
            ret.push(m[0]);
          }
          mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));
          ret.push("^{"+m[2]+"}");
          return ret;
        },
        'operator': function (buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; },
        'space': function () { return { type_: 'pu-space-1' }; },
        'output': function (buffer) {
          /** @type {ParserOutput | ParserOutput[]} */
          var ret;
          var md = mhchemParser.patterns.match_('{(...)}', buffer.d || "");
          if (md  &&  md.remainder === '') { buffer.d = md.match_; }
          var mq = mhchemParser.patterns.match_('{(...)}', buffer.q || "");
          if (mq  &&  mq.remainder === '') { buffer.q = mq.match_; }
          if (buffer.d) {
            buffer.d = buffer.d.replace(/\u00B0C|\^oC|\^{o}C/g, "{}^{\\circ}C");
            buffer.d = buffer.d.replace(/\u00B0F|\^oF|\^{o}F/g, "{}^{\\circ}F");
          }
          if (buffer.q) {  // fraction
            buffer.q = buffer.q.replace(/\u00B0C|\^oC|\^{o}C/g, "{}^{\\circ}C");
            buffer.q = buffer.q.replace(/\u00B0F|\^oF|\^{o}F/g, "{}^{\\circ}F");
            var b5 = {
              d: mhchemParser.go(buffer.d, 'pu'),
              q: mhchemParser.go(buffer.q, 'pu')
            };
            if (buffer.o === '//') {
              ret = { type_: 'pu-frac', p1: b5.d, p2: b5.q };
            } else {
              ret = b5.d;
              if (b5.d.length > 1  ||  b5.q.length > 1) {
                ret.push({ type_: ' / ' });
              } else {
                ret.push({ type_: '/' });
              }
              mhchemParser.concatArray(ret, b5.q);
            }
          } else {  // no fraction
            ret = mhchemParser.go(buffer.d, 'pu-2');
          }
          for (var p in buffer) { delete buffer[p]; }
          return ret;
        }
      }
    },
    'pu-2': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '*': { action_: 'output' } },
        '*': {
          '*': { action_: [ 'output', 'cdot' ], nextState: '0' } },
        '\\x': {
          '*': { action_: 'rm=' } },
        'space': {
          '*': { action_: [ 'output', 'space' ], nextState: '0' } },
        '^{(...)}|^(-1)': {
          '1': { action_: '^(-1)' } },
        '-9.,9': {
          '0': { action_: 'rm=', nextState: '0' },
          '1': { action_: '^(-1)', nextState: '0' } },
        '{...}|else': {
          '*': { action_: 'rm=', nextState: '1' } }
      }),
      actions: {
        'cdot': function () { return { type_: 'tight cdot' }; },
        '^(-1)': function (buffer, m) { buffer.rm += "^{"+m+"}"; },
        'space': function () { return { type_: 'pu-space-2' }; },
        'output': function (buffer) {
          /** @type {ParserOutput | ParserOutput[]} */
          var ret = [];
          if (buffer.rm) {
            var mrm = mhchemParser.patterns.match_('{(...)}', buffer.rm || "");
            if (mrm  &&  mrm.remainder === '') {
              ret = mhchemParser.go(mrm.match_, 'pu');
            } else {
              ret = { type_: 'rm', p1: buffer.rm };
            }
          }
          for (var p in buffer) { delete buffer[p]; }
          return ret;
        }
      }
    },
    'pu-9,9': {
      transitions: mhchemParser.createTransitions({
        'empty': {
          '0': { action_: 'output-0' },
          'o': { action_: 'output-o' } },
        ',': {
          '0': { action_: [ 'output-0', 'comma' ], nextState: 'o' } },
        '.': {
          '0': { action_: [ 'output-0', 'copy' ], nextState: 'o' } },
        'else': {
          '*': { action_: 'text=' } }
      }),
      actions: {
        'comma': function () { return { type_: 'commaDecimal' }; },
        'output-0': function (buffer) {
          /** @type {ParserOutput[]} */
          var ret = [];
          buffer.text_ = buffer.text_ || "";
          if (buffer.text_.length > 4) {
            var a = buffer.text_.length % 3;
            if (a === 0) { a = 3; }
            for (var i=buffer.text_.length-3; i>0; i-=3) {
              ret.push(buffer.text_.substr(i, 3));
              ret.push({ type_: '1000 separator' });
            }
            ret.push(buffer.text_.substr(0, a));
            ret.reverse();
          } else {
            ret.push(buffer.text_);
          }
          for (var p in buffer) { delete buffer[p]; }
          return ret;
        },
        'output-o': function (buffer) {
          /** @type {ParserOutput[]} */
          var ret = [];
          buffer.text_ = buffer.text_ || "";
          if (buffer.text_.length > 4) {
            var a = buffer.text_.length - 3;
            for (var i=0; i<a; i+=3) {
              ret.push(buffer.text_.substr(i, 3));
              ret.push({ type_: '1000 separator' });
            }
            ret.push(buffer.text_.substr(i));
          } else {
            ret.push(buffer.text_);
          }
          for (var p in buffer) { delete buffer[p]; }
          return ret;
        }
      }
    }
    //#endregion
  };

  //
  // texify: Take MhchemParser output and convert it to TeX
  //
  /** @type {Texify} */
  var texify = {
    go: function (input, isInner) {  // (recursive, max 4 levels)
      if (!input) { return ""; }
      var res = "";
      var cee = false;
      for (var i=0; i < input.length; i++) {
        var inputi = input[i];
        if (typeof inputi === "string") {
          res += inputi;
        } else {
          res += texify._go2(inputi);
          if (inputi.type_ === '1st-level escape') { cee = true; }
        }
      }
      if (!isInner && !cee && res) {
        res = "{" + res + "}";
      }
      return res;
    },
    _goInner: function (input) {
      if (!input) { return input; }
      return texify.go(input, true);
    },
    _go2: function (buf) {
      /** @type {undefined | string} */
      var res;
      switch (buf.type_) {
        case 'chemfive':
          res = "";
          var b5 = {
            a: texify._goInner(buf.a),
            b: texify._goInner(buf.b),
            p: texify._goInner(buf.p),
            o: texify._goInner(buf.o),
            q: texify._goInner(buf.q),
            d: texify._goInner(buf.d)
          };
          //
          // a
          //
          if (b5.a) {
            if (b5.a.match(/^[+\-]/)) { b5.a = "{"+b5.a+"}"; }
            res += b5.a + "\\,";
          }
          //
          // b and p
          //
          if (b5.b || b5.p) {
            res += "{\\vphantom{X}}";
            res += "^{\\hphantom{"+(b5.b||"")+"}}_{\\hphantom{"+(b5.p||"")+"}}";
            res += "{\\vphantom{X}}";
            // In the next two lines, I've removed \smash[t] (ron)
            // TODO: Revert \smash[t] when WebKit properly renders <mpadded> w/height="0"
            //res += "^{\\smash[t]{\\vphantom{2}}\\mathllap{"+(b5.b||"")+"}}";
            res += "^{\\vphantom{2}\\mathllap{"+(b5.b||"")+"}}";
            //res += "_{\\vphantom{2}\\mathllap{\\smash[t]{"+(b5.p||"")+"}}}";
            res += "_{\\vphantom{2}\\mathllap{"+(b5.p||"")+"}}";
          }
          //
          // o
          //
          if (b5.o) {
            if (b5.o.match(/^[+\-]/)) { b5.o = "{"+b5.o+"}"; }
            res += b5.o;
          }
          //
          // q and d
          //
          if (buf.dType === 'kv') {
            if (b5.d || b5.q) {
              res += "{\\vphantom{X}}";
            }
            if (b5.d) {
              res += "^{"+b5.d+"}";
            }
            if (b5.q) {
              // In the next line, I've removed \smash[t] (ron)
              // TODO: Revert \smash[t] when WebKit properly renders <mpadded> w/height="0"
              //res += "_{\\smash[t]{"+b5.q+"}}";
              res += "_{"+b5.q+"}";
            }
          } else if (buf.dType === 'oxidation') {
            if (b5.d) {
              res += "{\\vphantom{X}}";
              res += "^{"+b5.d+"}";
            }
            if (b5.q) {
              // A Firefox bug adds a bogus depth to <mphantom>, so we change \vphantom{X} to {}
              // TODO: Reinstate \vphantom{X} when the Firefox bug is fixed.
//              res += "{\\vphantom{X}}";
              res += "{{}}";
              // In the next line, I've removed \smash[t] (ron)
              // TODO: Revert \smash[t] when WebKit properly renders <mpadded> w/height="0"
              //res += "_{\\smash[t]{"+b5.q+"}}";
              res += "_{"+b5.q+"}";
            }
          } else {
            if (b5.q) {
              // TODO: Reinstate \vphantom{X} when the Firefox bug is fixed.
//              res += "{\\vphantom{X}}";
              res += "{{}}";
              // In the next line, I've removed \smash[t] (ron)
              // TODO: Revert \smash[t] when WebKit properly renders <mpadded> w/height="0"
              //res += "_{\\smash[t]{"+b5.q+"}}";
              res += "_{"+b5.q+"}";
            }
            if (b5.d) {
              // TODO: Reinstate \vphantom{X} when the Firefox bug is fixed.
//              res += "{\\vphantom{X}}";
              res += "{{}}";
              res += "^{"+b5.d+"}";
            }
          }
          break;
        case 'rm':
          res = "\\mathrm{"+buf.p1+"}";
          break;
        case 'text':
          if (buf.p1.match(/[\^_]/)) {
            buf.p1 = buf.p1.replace(" ", "~").replace("-", "\\text{-}");
            res = "\\mathrm{"+buf.p1+"}";
          } else {
            res = "\\text{"+buf.p1+"}";
          }
          break;
        case 'roman numeral':
          res = "\\mathrm{"+buf.p1+"}";
          break;
        case 'state of aggregation':
          res = "\\mskip2mu "+texify._goInner(buf.p1);
          break;
        case 'state of aggregation subscript':
          res = "\\mskip1mu "+texify._goInner(buf.p1);
          break;
        case 'bond':
          res = texify._getBond(buf.kind_);
          if (!res) {
            throw ["MhchemErrorBond", "mhchem Error. Unknown bond type (" + buf.kind_ + ")"];
          }
          break;
        case 'frac':
          var c = "\\frac{" + buf.p1 + "}{" + buf.p2 + "}";
          res = "\\mathchoice{\\textstyle"+c+"}{"+c+"}{"+c+"}{"+c+"}";
          break;
        case 'pu-frac':
          var d = "\\frac{" + texify._goInner(buf.p1) + "}{" + texify._goInner(buf.p2) + "}";
          res = "\\mathchoice{\\textstyle"+d+"}{"+d+"}{"+d+"}{"+d+"}";
          break;
        case 'tex-math':
          res = buf.p1 + " ";
          break;
        case 'frac-ce':
          res = "\\frac{" + texify._goInner(buf.p1) + "}{" + texify._goInner(buf.p2) + "}";
          break;
        case 'overset':
          res = "\\overset{" + texify._goInner(buf.p1) + "}{" + texify._goInner(buf.p2) + "}";
          break;
        case 'underset':
          res = "\\underset{" + texify._goInner(buf.p1) + "}{" + texify._goInner(buf.p2) + "}";
          break;
        case 'underbrace':
          res =  "\\underbrace{" + texify._goInner(buf.p1) + "}_{" + texify._goInner(buf.p2) + "}";
          break;
        case 'color':
          res = "{\\color{" + buf.color1 + "}{" + texify._goInner(buf.color2) + "}}";
          break;
        case 'color0':
          res = "\\color{" + buf.color + "}";
          break;
        case 'arrow':
          var b6 = {
            rd: texify._goInner(buf.rd),
            rq: texify._goInner(buf.rq)
          };
          var arrow = texify._getArrow(buf.r);
          if (b6.rq) { arrow += "[{\\rm " + b6.rq + "}]"; }
          if (b6.rd) {
            arrow += "{\\rm " + b6.rd + "}";
          } else {
            arrow += "{}";
          }
          res = arrow;
          break;
        case 'operator':
          res = texify._getOperator(buf.kind_);
          break;
        case '1st-level escape':
          res = buf.p1+" ";  // &, \\\\, \\hlin
          break;
        case 'space':
          res = " ";
          break;
        case 'entitySkip':
          res = "~";
          break;
        case 'pu-space-1':
          res = "~";
          break;
        case 'pu-space-2':
          res = "\\mkern3mu ";
          break;
        case '1000 separator':
          res = "\\mkern2mu ";
          break;
        case 'commaDecimal':
          res = "{,}";
          break;
          case 'comma enumeration L':
          res = "{"+buf.p1+"}\\mkern6mu ";
          break;
        case 'comma enumeration M':
          res = "{"+buf.p1+"}\\mkern3mu ";
          break;
        case 'comma enumeration S':
          res = "{"+buf.p1+"}\\mkern1mu ";
          break;
        case 'hyphen':
          res = "\\text{-}";
          break;
        case 'addition compound':
          res = "\\,{\\cdot}\\,";
          break;
        case 'electron dot':
          res = "\\mkern1mu \\text{\\textbullet}\\mkern1mu ";
          break;
        case 'KV x':
          res = "{\\times}";
          break;
        case 'prime':
          res = "\\prime ";
          break;
        case 'cdot':
          res = "\\cdot ";
          break;
        case 'tight cdot':
          res = "\\mkern1mu{\\cdot}\\mkern1mu ";
          break;
        case 'times':
          res = "\\times ";
          break;
        case 'circa':
          res = "{\\sim}";
          break;
        case '^':
          res = "uparrow";
          break;
        case 'v':
          res = "downarrow";
          break;
        case 'ellipsis':
          res = "\\ldots ";
          break;
        case '/':
          res = "/";
          break;
        case ' / ':
          res = "\\,/\\,";
          break;
        default:
          throw ["MhchemBugT", "mhchem bug T. Please report."];  // Missing texify rule or unknown MhchemParser output
      }
      return res;
    },
    _getArrow: function (a) {
      switch (a) {
        case "->": return "\\yields";
        case "\u2192": return "\\yields";
        case "\u27F6": return "\\yields";
        case "<-": return "\\yieldsLeft";
        case "<->": return "\\mesomerism";
        case "<-->": return "\\yieldsLeftRight";
        case "<=>": return "\\equilibrium";
        case "\u21CC": return "\\equilibrium";
        case "<=>>": return "\\equilibriumRight";
        case "<<=>": return "\\equilibriumLeft";
        default:
          throw ["MhchemBugT", "mhchem bug T. Please report."];
      }
    },
    _getBond: function (a) {
      switch (a) {
        case "-": return "{-}";
        case "1": return "{-}";
        case "=": return "{=}";
        case "2": return "{=}";
        case "#": return "{\\equiv}";
        case "3": return "{\\equiv}";
        case "~": return "{\\tripleDash}";
        case "~-": return "{\\tripleDashOverLine}";
        case "~=": return "{\\tripleDashOverDoubleLine}";
        case "~--": return "{\\tripleDashOverDoubleLine}";
        case "-~-": return "{\\tripleDashBetweenDoubleLine}";
        case "...": return "{{\\cdot}{\\cdot}{\\cdot}}";
        case "....": return "{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}";
        case "->": return "{\\rightarrow}";
        case "<-": return "{\\leftarrow}";
        case "<": return "{<}";
        case ">": return "{>}";
        default:
          throw ["MhchemBugT", "mhchem bug T. Please report."];
      }
    },
    _getOperator: function (a) {
      switch (a) {
        case "+": return " {}+{} ";
        case "-": return " {}-{} ";
        case "=": return " {}={} ";
        case "<": return " {}<{} ";
        case ">": return " {}>{} ";
        case "<<": return " {}\\ll{} ";
        case ">>": return " {}\\gg{} ";
        case "\\pm": return " {}\\pm{} ";
        case "\\approx": return " {}\\approx{} ";
        case "$\\approx$": return " {}\\approx{} ";
        case "v": return " \\downarrow{} ";
        case "(v)": return " \\downarrow{} ";
        case "^": return " \\uparrow{} ";
        case "(^)": return " \\uparrow{} ";
        default:
          throw ["MhchemBugT", "mhchem bug T. Please report."];
      }
    }
  };

/* eslint-disable no-undef */

//////////////////////////////////////////////////////////////////////
// texvc.sty

// The texvc package contains macros available in mediawiki pages.
// We omit the functions deprecated at
// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax

// We also omit texvc's \O, which conflicts with \text{\O}

defineMacro("\\darr", "\\downarrow");
defineMacro("\\dArr", "\\Downarrow");
defineMacro("\\Darr", "\\Downarrow");
defineMacro("\\lang", "\\langle");
defineMacro("\\rang", "\\rangle");
defineMacro("\\uarr", "\\uparrow");
defineMacro("\\uArr", "\\Uparrow");
defineMacro("\\Uarr", "\\Uparrow");
defineMacro("\\N", "\\mathbb{N}");
defineMacro("\\R", "\\mathbb{R}");
defineMacro("\\Z", "\\mathbb{Z}");
defineMacro("\\alef", "\\aleph");
defineMacro("\\alefsym", "\\aleph");
defineMacro("\\bull", "\\bullet");
defineMacro("\\clubs", "\\clubsuit");
defineMacro("\\cnums", "\\mathbb{C}");
defineMacro("\\Complex", "\\mathbb{C}");
defineMacro("\\Dagger", "\\ddagger");
defineMacro("\\diamonds", "\\diamondsuit");
defineMacro("\\empty", "\\emptyset");
defineMacro("\\exist", "\\exists");
defineMacro("\\harr", "\\leftrightarrow");
defineMacro("\\hArr", "\\Leftrightarrow");
defineMacro("\\Harr", "\\Leftrightarrow");
defineMacro("\\hearts", "\\heartsuit");
defineMacro("\\image", "\\Im");
defineMacro("\\infin", "\\infty");
defineMacro("\\isin", "\\in");
defineMacro("\\larr", "\\leftarrow");
defineMacro("\\lArr", "\\Leftarrow");
defineMacro("\\Larr", "\\Leftarrow");
defineMacro("\\lrarr", "\\leftrightarrow");
defineMacro("\\lrArr", "\\Leftrightarrow");
defineMacro("\\Lrarr", "\\Leftrightarrow");
defineMacro("\\natnums", "\\mathbb{N}");
defineMacro("\\plusmn", "\\pm");
defineMacro("\\rarr", "\\rightarrow");
defineMacro("\\rArr", "\\Rightarrow");
defineMacro("\\Rarr", "\\Rightarrow");
defineMacro("\\real", "\\Re");
defineMacro("\\reals", "\\mathbb{R}");
defineMacro("\\Reals", "\\mathbb{R}");
defineMacro("\\sdot", "\\cdot");
defineMacro("\\sect", "\\S");
defineMacro("\\spades", "\\spadesuit");
defineMacro("\\sub", "\\subset");
defineMacro("\\sube", "\\subseteq");
defineMacro("\\supe", "\\supseteq");
defineMacro("\\thetasym", "\\vartheta");
defineMacro("\\weierp", "\\wp");

/* eslint-disable no-undef */

/****************************************************
 *
 *  physics.js
 *
 *  Implements the Physics Package for LaTeX input.
 *
 *  ---------------------------------------------------------------------
 *
 *  The original version of this file is licensed as follows:
 *  Copyright (c) 2015-2016 Kolen Cheung <https://github.com/ickc/MathJax-third-party-extensions>.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  ---------------------------------------------------------------------
 *
 *  This file has been revised from the original in the following ways:
 *  1. The interface is changed so that it can be called from Temml, not MathJax.
 *  2. \Re and \Im are not used, to avoid conflict with existing LaTeX letters.
 *
 *  This revision of the file is released under the MIT license.
 *  https://mit-license.org/
 */
defineMacro("\\quantity", "{\\left\\{ #1 \\right\\}}");
defineMacro("\\qty", "{\\left\\{ #1 \\right\\}}");
defineMacro("\\pqty", "{\\left( #1 \\right)}");
defineMacro("\\bqty", "{\\left[ #1 \\right]}");
defineMacro("\\vqty", "{\\left\\vert #1 \\right\\vert}");
defineMacro("\\Bqty", "{\\left\\{ #1 \\right\\}}");
defineMacro("\\absolutevalue", "{\\left\\vert #1 \\right\\vert}");
defineMacro("\\abs", "{\\left\\vert #1 \\right\\vert}");
defineMacro("\\norm", "{\\left\\Vert #1 \\right\\Vert}");
defineMacro("\\evaluated", "{\\left.#1 \\right\\vert}");
defineMacro("\\eval", "{\\left.#1 \\right\\vert}");
defineMacro("\\order", "{\\mathcal{O} \\left( #1 \\right)}");
defineMacro("\\commutator", "{\\left[ #1 , #2 \\right]}");
defineMacro("\\comm", "{\\left[ #1 , #2 \\right]}");
defineMacro("\\anticommutator", "{\\left\\{ #1 , #2 \\right\\}}");
defineMacro("\\acomm", "{\\left\\{ #1 , #2 \\right\\}}");
defineMacro("\\poissonbracket", "{\\left\\{ #1 , #2 \\right\\}}");
defineMacro("\\pb", "{\\left\\{ #1 , #2 \\right\\}}");
defineMacro("\\vectorbold", "{\\boldsymbol{ #1 }}");
defineMacro("\\vb", "{\\boldsymbol{ #1 }}");
defineMacro("\\vectorarrow", "{\\vec{\\boldsymbol{ #1 }}}");
defineMacro("\\va", "{\\vec{\\boldsymbol{ #1 }}}");
defineMacro("\\vectorunit", "{{\\boldsymbol{\\hat{ #1 }}}}");
defineMacro("\\vu", "{{\\boldsymbol{\\hat{ #1 }}}}");
defineMacro("\\dotproduct", "\\mathbin{\\boldsymbol\\cdot}");
defineMacro("\\vdot", "{\\boldsymbol\\cdot}");
defineMacro("\\crossproduct", "\\mathbin{\\boldsymbol\\times}");
defineMacro("\\cross", "\\mathbin{\\boldsymbol\\times}");
defineMacro("\\cp", "\\mathbin{\\boldsymbol\\times}");
defineMacro("\\gradient", "{\\boldsymbol\\nabla}");
defineMacro("\\grad", "{\\boldsymbol\\nabla}");
defineMacro("\\divergence", "{\\grad\\vdot}");
//defineMacro("\\div", "{\\grad\\vdot}"); Not included in Temml. Conflicts w/LaTeX \div
defineMacro("\\curl", "{\\grad\\cross}");
defineMacro("\\laplacian", "\\nabla^2");
defineMacro("\\tr", "{\\operatorname{tr}}");
defineMacro("\\Tr", "{\\operatorname{Tr}}");
defineMacro("\\rank", "{\\operatorname{rank}}");
defineMacro("\\erf", "{\\operatorname{erf}}");
defineMacro("\\Res", "{\\operatorname{Res}}");
defineMacro("\\principalvalue", "{\\mathcal{P}}");
defineMacro("\\pv", "{\\mathcal{P}}");
defineMacro("\\PV", "{\\operatorname{P.V.}}");
// Temml does not use the next two lines. They conflict with LaTeX letters.
//defineMacro("\\Re", "{\\operatorname{Re} \\left\\{ #1 \\right\\}}");
//defineMacro("\\Im", "{\\operatorname{Im} \\left\\{ #1 \\right\\}}");
defineMacro("\\qqtext", "{\\quad\\text{ #1 }\\quad}");
defineMacro("\\qq", "{\\quad\\text{ #1 }\\quad}");
defineMacro("\\qcomma", "{\\text{,}\\quad}");
defineMacro("\\qc", "{\\text{,}\\quad}");
defineMacro("\\qcc", "{\\quad\\text{c.c.}\\quad}");
defineMacro("\\qif", "{\\quad\\text{if}\\quad}");
defineMacro("\\qthen", "{\\quad\\text{then}\\quad}");
defineMacro("\\qelse", "{\\quad\\text{else}\\quad}");
defineMacro("\\qotherwise", "{\\quad\\text{otherwise}\\quad}");
defineMacro("\\qunless", "{\\quad\\text{unless}\\quad}");
defineMacro("\\qgiven", "{\\quad\\text{given}\\quad}");
defineMacro("\\qusing", "{\\quad\\text{using}\\quad}");
defineMacro("\\qassume", "{\\quad\\text{assume}\\quad}");
defineMacro("\\qsince", "{\\quad\\text{since}\\quad}");
defineMacro("\\qlet", "{\\quad\\text{let}\\quad}");
defineMacro("\\qfor", "{\\quad\\text{for}\\quad}");
defineMacro("\\qall", "{\\quad\\text{all}\\quad}");
defineMacro("\\qeven", "{\\quad\\text{even}\\quad}");
defineMacro("\\qodd", "{\\quad\\text{odd}\\quad}");
defineMacro("\\qinteger", "{\\quad\\text{integer}\\quad}");
defineMacro("\\qand", "{\\quad\\text{and}\\quad}");
defineMacro("\\qor", "{\\quad\\text{or}\\quad}");
defineMacro("\\qas", "{\\quad\\text{as}\\quad}");
defineMacro("\\qin", "{\\quad\\text{in}\\quad}");
defineMacro("\\differential", "{\\text{d}}");
defineMacro("\\dd", "{\\text{d}}");
defineMacro("\\derivative", "{\\frac{\\text{d}{ #1 }}{\\text{d}{ #2 }}}");
defineMacro("\\dv", "{\\frac{\\text{d}{ #1 }}{\\text{d}{ #2 }}}");
defineMacro("\\partialderivative", "{\\frac{\\partial{ #1 }}{\\partial{ #2 }}}");
defineMacro("\\variation", "{\\delta}");
defineMacro("\\var", "{\\delta}");
defineMacro("\\functionalderivative", "{\\frac{\\delta{ #1 }}{\\delta{ #2 }}}");
defineMacro("\\fdv", "{\\frac{\\delta{ #1 }}{\\delta{ #2 }}}");
defineMacro("\\innerproduct", "{\\left\\langle {#1} \\mid { #2} \\right\\rangle}");
defineMacro("\\outerproduct",
  "{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");
defineMacro("\\dyad",
  "{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");
defineMacro("\\ketbra",
  "{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");
defineMacro("\\op",
  "{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");
defineMacro("\\expectationvalue", "{\\left\\langle {#1 } \\right\\rangle}");
defineMacro("\\expval", "{\\left\\langle {#1 } \\right\\rangle}");
defineMacro("\\ev", "{\\left\\langle {#1 } \\right\\rangle}");
defineMacro("\\matrixelement",
  "{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}");
defineMacro("\\matrixel",
  "{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}");
defineMacro("\\mel",
  "{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}");

// Helper functions
function getHLines(parser) {
  // Return an array. The array length = number of hlines.
  // Each element in the array tells if the line is dashed.
  const hlineInfo = [];
  parser.consumeSpaces();
  let nxt = parser.fetch().text;
  if (nxt === "\\relax") {
    parser.consume();
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }
  while (nxt === "\\hline" || nxt === "\\hdashline") {
    parser.consume();
    hlineInfo.push(nxt === "\\hdashline");
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }
  return hlineInfo;
}

const validateAmsEnvironmentContext = context => {
  const settings = context.parser.settings;
  if (!settings.displayMode) {
    throw new ParseError(`{${context.envName}} can be used only in display mode.`);
  }
};

const sizeRegEx$1 = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/;
const arrayGaps = macros => {
  let arraystretch = macros.get("\\arraystretch");
  if (typeof arraystretch !== "string") {
    arraystretch = stringFromArg(arraystretch.tokens);
  }
  arraystretch = isNaN(arraystretch) ? null : Number(arraystretch);
  let arraycolsepStr = macros.get("\\arraycolsep");
  if (typeof arraycolsepStr !== "string") {
    arraycolsepStr = stringFromArg(arraycolsepStr.tokens);
  }
  const match = sizeRegEx$1.exec(arraycolsepStr);
  const arraycolsep = match
    ? { number: +(match[1] + match[2]), unit: match[3] }
    : null;
  return [arraystretch, arraycolsep]
};

const checkCellForLabels = cell => {
  // Check if the author wrote a \tag{} inside this cell.
  let rowLabel = "";
  for (let i = 0; i < cell.length; i++) {
    if (cell[i].type === "label") {
      if (rowLabel) { throw new ParseError(("Multiple \\labels in one row")) }
      rowLabel = cell[i].string;
    }
  }
  return rowLabel
};

// autoTag (an argument to parseArray) can be one of three values:
// * undefined: Regular (not-top-level) array; no tags on each row
// * true: Automatic equation numbering, overridable by \tag
// * false: Tags allowed on each row, but no automatic numbering
// This function *doesn't* work with the "split" environment name.
function getAutoTag(name) {
  if (name.indexOf("ed") === -1) {
    return name.indexOf("*") === -1;
  }
  // return undefined;
}

/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.  If given an optional argument scriptLevel
 * ("text", "display", etc.), then each cell is cast into that scriptLevel.
 */
function parseArray(
  parser,
  {
    cols, // [{ type: string , align: l|c|r|null }]
    envClasses, // align(ed|at|edat) | array | cases | cd | small | multline
    autoTag,        // boolean
    singleRow,      // boolean
    emptySingleRow, // boolean
    maxNumCols,     // number
    leqno,          // boolean
    arraystretch,   // number  | null
    arraycolsep     // size value | null
},
  scriptLevel
) {
  const endToken = envClasses && envClasses.includes("bordermatrix") ? "}" : "\\end";
  parser.gullet.beginGroup();
  if (!singleRow) {
    // \cr is equivalent to \\ without the optional size argument (see below)
    // TODO: provide helpful error when \cr is used outside array environment
    parser.gullet.macros.set("\\cr", "\\\\\\relax");
  }

  // Start group for first cell
  parser.gullet.beginGroup();

  let row = [];
  const body = [row];
  const rowGaps = [];
  const labels = [];

  const hLinesBeforeRow = [];

  const tags = (autoTag != null ? [] : undefined);

  // amsmath uses \global\@eqnswtrue and \global\@eqnswfalse to represent
  // whether this row should have an equation number.  Simulate this with
  // a \@eqnsw macro set to 1 or 0.
  function beginRow() {
    if (autoTag) {
      parser.gullet.macros.set("\\@eqnsw", "1", true);
    }
  }
  function endRow() {
    if (tags) {
      if (parser.gullet.macros.get("\\df@tag")) {
        tags.push(parser.subparse([new Token("\\df@tag")]));
        parser.gullet.macros.set("\\df@tag", undefined, true);
      } else {
        tags.push(Boolean(autoTag) &&
            parser.gullet.macros.get("\\@eqnsw") === "1");
      }
    }
  }
  beginRow();

  // Test for \hline at the top of the array.
  hLinesBeforeRow.push(getHLines(parser));

  while (true) {
    // Parse each cell in its own group (namespace)
    let cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
    parser.gullet.endGroup();
    parser.gullet.beginGroup();

    cell = {
      type: "ordgroup",
      mode: parser.mode,
      body: cell,
      semisimple: true
    };
    row.push(cell);
    const next = parser.fetch().text;
    if (next === "&") {
      if (maxNumCols && row.length === maxNumCols) {
        if (envClasses.includes("array")) {
          if (parser.settings.strict) {
            throw new ParseError("Too few columns " + "specified in the {array} column argument.",
              parser.nextToken)
          }
        } else if (maxNumCols === 2) {
          throw new ParseError("The split environment accepts no more than two columns",
            parser.nextToken);
        } else {
          throw new ParseError("The equation environment accepts only one column",
            parser.nextToken)
        }
      }
      parser.consume();
    } else if (next === endToken) {
      endRow();
      // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
      // the last line is empty.  However, AMS environments keep the
      // empty row if it's the only one.
      // NOTE: Currently, `cell` is the last item added into `row`.
      if (row.length === 1 && cell.body.length === 0 && (body.length > 1 || !emptySingleRow)) {
        body.pop();
      }
      labels.push(checkCellForLabels(cell.body));
      if (hLinesBeforeRow.length < body.length + 1) {
        hLinesBeforeRow.push([]);
      }
      break;
    } else if (next === "\\\\") {
      parser.consume();
      let size;
      // \def\Let@{\let\\\math@cr}
      // \def\math@cr{...\math@cr@}
      // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
      // \def\math@cr@@[#1]{...\math@cr@@@...}
      // \def\math@cr@@@{\cr}
      if (parser.gullet.future().text !== " ") {
        size = parser.parseSizeGroup(true);
      }
      rowGaps.push(size ? size.value : null);
      endRow();

      labels.push(checkCellForLabels(cell.body));

      // check for \hline(s) following the row separator
      hLinesBeforeRow.push(getHLines(parser));

      row = [];
      body.push(row);
      beginRow();
    } else {
      throw new ParseError("Expected & or \\\\ or \\cr or " + endToken, parser.nextToken);
    }
  }

  // End cell group
  parser.gullet.endGroup();
  // End array group defining \cr
  parser.gullet.endGroup();

  return {
    type: "array",
    mode: parser.mode,
    body,
    cols,
    rowGaps,
    hLinesBeforeRow,
    envClasses,
    autoTag,
    scriptLevel,
    tags,
    labels,
    leqno,
    arraystretch,
    arraycolsep
  };
}

// Decides on a scriptLevel for cells in an array according to whether the given
// environment name starts with the letter 'd'.
function dCellStyle(envName) {
  return envName.slice(0, 1) === "d" ? "display" : "text"
}

const alignMap = {
  c: "center ",
  l: "left ",
  r: "right "
};

const glue = group => {
  const glueNode = new mathMLTree.MathNode("mtd", []);
  glueNode.style = { padding: "0", width: "50%" };
  if (group.envClasses.includes("multline")) {
    glueNode.style.width = "7.5%";
  }
  return glueNode
};

const mathmlBuilder$9 = function(group, style) {
  const tbl = [];
  const numRows = group.body.length;
  const hlines = group.hLinesBeforeRow;

  for (let i = 0; i < numRows; i++) {
    const rw = group.body[i];
    const row = [];
    const cellLevel = group.scriptLevel === "text"
      ? StyleLevel.TEXT
      : group.scriptLevel === "script"
      ? StyleLevel.SCRIPT
      : StyleLevel.DISPLAY;

    for (let j = 0; j < rw.length; j++) {
      const mtd = new mathMLTree.MathNode(
        "mtd",
        [buildGroup$1(rw[j], style.withLevel(cellLevel))]
      );

      if (group.envClasses.includes("multline")) {
        const align = i === 0 ? "left" : i === numRows - 1 ? "right" : "center";
        mtd.setAttribute("columnalign", align);
        if (align !== "center") {
          mtd.classes.push("tml-" + align);
        }
      }
      row.push(mtd);
    }
    const numColumns = group.body[0].length;
    // Fill out a short row with empty <mtd> elements.
    for (let k = 0; k < numColumns - rw.length; k++) {
      row.push(new mathMLTree.MathNode("mtd", [], [], style));
    }
    if (group.autoTag) {
      const tag = group.tags[i];
      let tagElement;
      if (tag === true) {  // automatic numbering
        tagElement = new mathMLTree.MathNode("mtext", [new Span(["tml-eqn"])]);
      } else if (tag === false) {
        // \nonumber/\notag or starred environment
        tagElement = new mathMLTree.MathNode("mtext", [], []);
      } else {  // manual \tag
        tagElement = buildExpressionRow(tag[0].body, style.withLevel(cellLevel), true);
        tagElement = consolidateText(tagElement);
        tagElement.classes = ["tml-tag"];
      }
      if (tagElement) {
        row.unshift(glue(group));
        row.push(glue(group));
        if (group.leqno) {
          row[0].children.push(tagElement);
          row[0].classes.push("tml-left");
        } else {
          row[row.length - 1].children.push(tagElement);
          row[row.length - 1].classes.push("tml-right");
        }
      }
    }
    const mtr = new mathMLTree.MathNode("mtr", row, []);
    const label = group.labels.shift();
    if (label && group.tags && group.tags[i]) {
      mtr.setAttribute("id", label);
      if (Array.isArray(group.tags[i])) { mtr.classes.push("tml-tageqn"); }
    }

    // Write horizontal rules
    if (i === 0 && hlines[0].length > 0) {
      if (hlines[0].length === 2) {
        mtr.children.forEach(cell => { cell.style.borderTop = "0.15em double"; });
      } else {
        mtr.children.forEach(cell => {
          cell.style.borderTop = hlines[0][0] ? "0.06em dashed" : "0.06em solid";
        });
      }
    }
    if (hlines[i + 1].length > 0) {
      if (hlines[i + 1].length === 2) {
        mtr.children.forEach(cell => { cell.style.borderBottom = "0.15em double"; });
      } else {
        mtr.children.forEach(cell => {
          cell.style.borderBottom = hlines[i + 1][0] ? "0.06em dashed" : "0.06em solid";
        });
      }
    }

    // Check for \hphantom \from \bordermatrix
    let mustSquashRow = true;
    for (let j = 0; j < mtr.children.length; j++) {
      const child = mtr.children[j].children[0];
      if (!(child && child.type === "mpadded" && child.attributes.height === "0px")) {
        mustSquashRow = false;
        break
      }
    }
    if (mustSquashRow) {
      // All the cell contents are \hphantom. Squash the padding.
      for (let j = 0; j < mtr.children.length; j++) {
        mtr.children[j].style.paddingTop = "0";
        mtr.children[j].style.paddingBottom = "0";
      }
    }

    tbl.push(mtr);
  }

  if (group.arraystretch && group.arraystretch !== 1) {
    // In LaTeX, \arraystretch is a factor applied to a 12pt strut height.
    // It defines a baseline to baseline distance.
    // Here, we do an approximation of that approach.
    const pad = String(1.4 * group.arraystretch - 0.8) + "ex";
    for (let i = 0; i < tbl.length; i++) {
      for (let j = 0; j < tbl[i].children.length; j++) {
        tbl[i].children[j].style.paddingTop = pad;
        tbl[i].children[j].style.paddingBottom = pad;
      }
    }
  }

  let sidePadding;
  let sidePadUnit;
  if (group.envClasses.length > 0) {
    sidePadding = group.envClasses.includes("abut")
      ? "0"
      : group.envClasses.includes("cases")
      ? "0"
      : group.envClasses.includes("small")
      ? "0.1389"
      : group.envClasses.includes("cd")
      ? "0.25"
      : "0.4"; // default side padding
    sidePadUnit = "em";
  }
  if (group.arraycolsep) {
    const arraySidePad = calculateSize(group.arraycolsep, style);
    sidePadding = arraySidePad.number.toFixed(4);
    sidePadUnit = arraySidePad.unit;
  }
  if (sidePadding) {
    const numCols = tbl.length === 0 ? 0 : tbl[0].children.length;

    const sidePad = (j, hand) => {
      if (j === 0 && hand === 0) { return "0" }
      if (j === numCols - 1 && hand === 1) { return "0" }
      if (group.envClasses[0] !== "align") { return sidePadding }
      if (hand === 1) { return "0" }
      if (group.autoTag) {
        return (j % 2) ? "1" : "0"
      } else {
        return (j % 2) ? "0" : "1"
      }
    };

    // Side padding
    for (let i = 0; i < tbl.length; i++) {
      for (let j = 0; j < tbl[i].children.length; j++) {
        tbl[i].children[j].style.paddingLeft = `${sidePad(j, 0)}${sidePadUnit}`;
        tbl[i].children[j].style.paddingRight = `${sidePad(j, 1)}${sidePadUnit}`;
      }
    }
  }
  if (group.envClasses.length === 0) {
    // Set zero padding on side of the matrix
    for (let i = 0; i < tbl.length; i++) {
      tbl[i].children[0].style.paddingLeft = "0em";
      if (tbl[i].children.length === tbl[0].children.length) {
        tbl[i].children[tbl[i].children.length - 1].style.paddingRight = "0em";
      }
    }
  }

  if (group.envClasses.length > 0) {
    // Justification
    const align = group.envClasses.includes("align") || group.envClasses.includes("alignat");
    for (let i = 0; i < tbl.length; i++) {
      const row = tbl[i];
      if (align) {
        for (let j = 0; j < row.children.length; j++) {
          // Chromium does not recognize text-align: left. Use -webkit-
          // TODO: Remove -webkit- when Chromium no longer needs it.
          row.children[j].classes = ["tml-" + (j % 2 ? "left" : "right")];
        }
        if (group.autoTag) {
          const k = group.leqno ? 0 : row.children.length - 1;
          row.children[k].classes = ["tml-" + (group.leqno ? "left" : "right")];
        }
      }
      if (row.children.length > 1 && group.envClasses.includes("cases")) {
        row.children[1].style.paddingLeft = "1em";
      }

      if (group.envClasses.includes("cases") || group.envClasses.includes("subarray")) {
        for (const cell of row.children) {
          cell.classes.push("tml-left");
        }
      }
    }
  }

  let table = new mathMLTree.MathNode("mtable", tbl);
  if (group.envClasses.length > 0) {
    // Top & bottom padding
    if (group.envClasses.includes("jot")) {
      table.classes.push("tml-jot");
    } else if (group.envClasses.includes("small")) {
      table.classes.push("tml-small");
    }
  }
  if (group.scriptLevel === "display") { table.setAttribute("displaystyle", "true"); }

  if (group.autoTag || group.envClasses.includes("multline")) {
    table.style.width = "100%";
  }

  // Column separator lines and column alignment
  let align = "";

  if (group.cols && group.cols.length > 0) {
    const cols = group.cols;
    let prevTypeWasAlign = false;
    let iStart = 0;
    let iEnd = cols.length;

    while (cols[iStart].type === "separator") {
      iStart += 1;
    }
    while (cols[iEnd - 1].type === "separator") {
      iEnd -= 1;
    }

    if (cols[0].type === "separator") {
      const sep = cols[1].type === "separator"
        ? "0.15em double"
        : cols[0].separator === "|"
        ? "0.06em solid "
        : "0.06em dashed ";
      for (const row of table.children) {
        row.children[0].style.borderLeft = sep;
      }
    }
    let iCol = group.autoTag ? 0 : -1;
    for (let i = iStart; i < iEnd; i++) {
      if (cols[i].type === "align") {
        const colAlign = alignMap[cols[i].align];
        align += colAlign;
        iCol += 1;
        for (const row of table.children) {
          if (colAlign.trim() !== "center" && iCol < row.children.length) {
            row.children[iCol].classes = ["tml-" + colAlign.trim()];
          }
        }
        prevTypeWasAlign = true;
      } else if (cols[i].type === "separator") {
        // MathML accepts only single lines between cells.
        // So we read only the first of consecutive separators.
        if (prevTypeWasAlign) {
          const sep = cols[i + 1].type === "separator"
            ? "0.15em double"
            : cols[i].separator === "|"
            ? "0.06em solid"
            : "0.06em dashed";
          for (const row of table.children) {
            if (iCol < row.children.length) {
              row.children[iCol].style.borderRight = sep;
            }
          }
        }
        prevTypeWasAlign = false;
      }
    }
    if (cols[cols.length - 1].type === "separator") {
      const sep = cols[cols.length - 2].type === "separator"
        ? "0.15em double"
        : cols[cols.length - 1].separator === "|"
        ? "0.06em solid"
        : "0.06em dashed";
      for (const row of table.children) {
        row.children[row.children.length - 1].style.borderRight = sep;
        row.children[row.children.length - 1].style.paddingRight = "0.4em";
      }
    }
  }
  if (group.autoTag) {
     // allow for glue cells on each side
    align = "left " + (align.length > 0 ? align : "center ") + "right ";
  }
  if (align) {
    // Firefox reads this attribute, not the -webkit-left|right written above.
    // TODO: When Chrome no longer needs "-webkit-", use CSS and delete the next line.
    table.setAttribute("columnalign", align.trim());
  }

  if (group.envClasses.includes("small")) {
    // A small array. Wrap in scriptstyle.
    table = new mathMLTree.MathNode("mstyle", [table]);
    table.setAttribute("scriptlevel", "1");
  }

  return table
};

// Convenience function for align, align*, aligned, alignat, alignat*, alignedat, split.
const alignedHandler = function(context, args) {
  if (context.envName.indexOf("ed") === -1) {
    validateAmsEnvironmentContext(context);
  }
  const isSplit = context.envName === "split";
  const cols = [];
  const res = parseArray(
    context.parser,
    {
      cols,
      emptySingleRow: true,
      autoTag: isSplit ? undefined : getAutoTag(context.envName),
      envClasses: ["abut", "jot"], // set row spacing & provisional column spacing
      maxNumCols: context.envName === "split" ? 2 : undefined,
      leqno: context.parser.settings.leqno
    },
    "display"
  );

  // Determining number of columns.
  // 1. If the first argument is given, we use it as a number of columns,
  //    and makes sure that each row doesn't exceed that number.
  // 2. Otherwise, just count number of columns = maximum number
  //    of cells in each row ("aligned" mode -- isAligned will be true).
  //
  // At the same time, prepend empty group {} at beginning of every second
  // cell in each row (starting with second cell) so that operators become
  // binary.  This behavior is implemented in amsmath's \start@aligned.
  let numMaths;
  let numCols = 0;
  const isAlignedAt = context.envName.indexOf("at") > -1;
  if (args[0] && isAlignedAt) {
    // alignat environment takes an argument w/ number of columns
    let arg0 = "";
    for (let i = 0; i < args[0].body.length; i++) {
      const textord = assertNodeType(args[0].body[i], "textord");
      arg0 += textord.text;
    }
    if (isNaN(arg0)) {
      throw new ParseError("The alignat enviroment requires a numeric first argument.")
    }
    numMaths = Number(arg0);
    numCols = numMaths * 2;
  }
  res.body.forEach(function(row) {
    if (isAlignedAt) {
      // Case 1
      const curMaths = row.length / 2;
      if (numMaths < curMaths) {
        throw new ParseError(
          "Too many math in a row: " + `expected ${numMaths}, but got ${curMaths}`,
          row[0]
        );
      }
    } else if (numCols < row.length) {
      // Case 2
      numCols = row.length;
    }
  });

  // Adjusting alignment.
  // In aligned mode, we add one \qquad between columns;
  // otherwise we add nothing.
  for (let i = 0; i < numCols; ++i) {
    let align = "r";
    if (i % 2 === 1) {
      align = "l";
    }
    cols[i] = {
      type: "align",
      align: align
    };
  }
  if (context.envName === "split") ; else if (isAlignedAt) {
    res.envClasses.push("alignat"); // Sets justification
  } else {
    res.envClasses[0] = "align"; // Sets column spacing & justification
  }
  return res;
};

// Arrays are part of LaTeX, defined in lttab.dtx so its documentation
// is part of the source2e.pdf file of LaTeX2e source documentation.
// {darray} is an {array} environment where cells are set in \displaystyle,
// as defined in nccmath.sty.
defineEnvironment({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler(context, args) {
    // Since no types are specified above, the two possibilities are
    // - The argument is wrapped in {} or [], in which case Parser's
    //   parseGroup() returns an "ordgroup" wrapping some symbol node.
    // - The argument is a bare symbol node.
    const symNode = checkSymbolNodeType(args[0]);
    const colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    const cols = colalign.map(function(nde) {
      const node = assertSymbolNodeType(nde);
      const ca = node.text;
      if ("lcr".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      } else if (ca === "|") {
        return {
          type: "separator",
          separator: "|"
        };
      } else if (ca === ":") {
        return {
          type: "separator",
          separator: ":"
        };
      }
      throw new ParseError("Unknown column alignment: " + ca, nde);
    });
    const [arraystretch, arraycolsep] = arrayGaps(context.parser.gullet.macros);
    const res = {
      cols,
      envClasses: ["array"],
      maxNumCols: cols.length,
      arraystretch,
      arraycolsep
    };
    return parseArray(context.parser, res, dCellStyle(context.envName));
  },
  mathmlBuilder: mathmlBuilder$9
});

// The matrix environments of amsmath build on the array environment
// of LaTeX, which is discussed above.
// The mathtools package adds starred versions of the same environments.
// These have an optional argument to choose left|center|right justification.
defineEnvironment({
  type: "array",
  names: [
    "matrix",
    "pmatrix",
    "bmatrix",
    "Bmatrix",
    "vmatrix",
    "Vmatrix",
    "matrix*",
    "pmatrix*",
    "bmatrix*",
    "Bmatrix*",
    "vmatrix*",
    "Vmatrix*"
  ],
  props: {
    numArgs: 0
  },
  handler(context) {
    const delimiters = {
      matrix: null,
      pmatrix: ["(", ")"],
      bmatrix: ["[", "]"],
      Bmatrix: ["\\{", "\\}"],
      vmatrix: ["|", "|"],
      Vmatrix: ["\\Vert", "\\Vert"]
    }[context.envName.replace("*", "")];
    // \hskip -\arraycolsep in amsmath
    let colAlign = "c";
    const payload = {
      envClasses: [],
      cols: []
    };
    if (context.envName.charAt(context.envName.length - 1) === "*") {
      // It's one of the mathtools starred functions.
      // Parse the optional alignment argument.
      const parser = context.parser;
      parser.consumeSpaces();
      if (parser.fetch().text === "[") {
        parser.consume();
        parser.consumeSpaces();
        colAlign = parser.fetch().text;
        if ("lcr".indexOf(colAlign) === -1) {
          throw new ParseError("Expected l or c or r", parser.nextToken);
        }
        parser.consume();
        parser.consumeSpaces();
        parser.expect("]");
        parser.consume();
        payload.cols = [];
      }
    }
    const res = parseArray(context.parser, payload, "text");
    res.cols = res.body.length > 0
      ? new Array(res.body[0].length).fill({ type: "align", align: colAlign })
      : [];
    const [arraystretch, arraycolsep] = arrayGaps(context.parser.gullet.macros);
    res.arraystretch = arraystretch;
    if (arraycolsep && !(arraycolsep === 6 && arraycolsep === "pt")) {
      res.arraycolsep = arraycolsep;
    }
    return delimiters
      ? {
        type: "leftright",
        mode: context.mode,
        body: [res],
        left: delimiters[0],
        right: delimiters[1],
        rightColor: undefined // \right uninfluenced by \color in array
      }
      : res;
  },
  mathmlBuilder: mathmlBuilder$9
});

defineEnvironment({
  type: "array",
  names: ["bordermatrix"],
  props: {
    numArgs: 0
  },
  handler(context) {
    const payload = { cols: [], envClasses: ["bordermatrix"] };
    const res = parseArray(context.parser, payload, "text");
    res.cols = res.body.length > 0
      ? new Array(res.body[0].length).fill({ type: "align", align: "c" })
      : [];
    res.envClasses = [];
    res.arraystretch = 1;
    if (context.envName === "matrix") { return res}
    return bordermatrixParseTree(res, context.delimiters)
  },
  mathmlBuilder: mathmlBuilder$9
});

defineEnvironment({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler(context) {
    const payload = { type: "small" };
    const res = parseArray(context.parser, payload, "script");
    res.envClasses = ["small"];
    return res;
  },
  mathmlBuilder: mathmlBuilder$9
});

defineEnvironment({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler(context, args) {
    // Parsing of {subarray} is similar to {array}
    const symNode = checkSymbolNodeType(args[0]);
    const colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    const cols = colalign.map(function(nde) {
      const node = assertSymbolNodeType(nde);
      const ca = node.text;
      // {subarray} only recognizes "l" & "c"
      if ("lc".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      }
      throw new ParseError("Unknown column alignment: " + ca, nde);
    });
    if (cols.length > 1) {
      throw new ParseError("{subarray} can contain only one column");
    }
    let res = {
      cols,
      envClasses: ["small"]
    };
    res = parseArray(context.parser, res, "script");
    if (res.body.length > 0 && res.body[0].length > 1) {
      throw new ParseError("{subarray} can contain only one column");
    }
    return res;
  },
  mathmlBuilder: mathmlBuilder$9
});

// A cases environment (in amsmath.sty) is almost equivalent to
// \def
// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
// {dcases} is a {cases} environment where cells are set in \displaystyle,
// as defined in mathtools.sty.
// {rcases} is another mathtools environment. It's brace is on the right side.
defineEnvironment({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler(context) {
    const payload = {
      cols: [],
      envClasses: ["cases"]
    };
    const res = parseArray(context.parser, payload, dCellStyle(context.envName));
    return {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: undefined
    };
  },
  mathmlBuilder: mathmlBuilder$9
});

// In the align environment, one uses ampersands, &, to specify number of
// columns in each row, and to locate spacing between each column.
// align gets automatic numbering. align* and aligned do not.
// The alignedat environment can be used in math mode.
defineEnvironment({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: alignedHandler,
  mathmlBuilder: mathmlBuilder$9
});

// alignat environment is like an align environment, but one must explicitly
// specify maximum number of columns in each row, and can adjust where spacing occurs.
defineEnvironment({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: alignedHandler,
  mathmlBuilder: mathmlBuilder$9
});

// A gathered environment is like an array environment with one centered
// column, but where rows are considered lines so get \jot line spacing
// and contents are set in \displaystyle.
defineEnvironment({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    if (context.envName !== "gathered") {
      validateAmsEnvironmentContext(context);
    }
    const res = {
      cols: [],
      envClasses: ["abut", "jot"],
      autoTag: getAutoTag(context.envName),
      emptySingleRow: true,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  mathmlBuilder: mathmlBuilder$9
});

defineEnvironment({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    const res = {
      autoTag: getAutoTag(context.envName),
      emptySingleRow: true,
      singleRow: true,
      maxNumCols: 1,
      envClasses: ["align"],
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  mathmlBuilder: mathmlBuilder$9
});

defineEnvironment({
  type: "array",
  names: ["multline", "multline*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    const res = {
      autoTag: context.envName === "multline",
      maxNumCols: 1,
      envClasses: ["jot", "multline"],
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  mathmlBuilder: mathmlBuilder$9
});

defineEnvironment({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    return parseCD(context.parser);
  },
  mathmlBuilder: mathmlBuilder$9
});

// Catch \hline outside array environment
defineFunction({
  type: "text", // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: true
  },
  handler(context, args) {
    throw new ParseError(`${context.funcName} valid only within array environment`);
  }
});

const environments = _environments;

// \bordermatrix  from TeXbook pp 177 & 361
// Optional argument from Herbert Voß, Math mode, p 20
// Ref: https://tug.ctan.org/obsolete/info/math/voss/mathmode/Mathmode.pdf

defineFunction({
  type: "bordermatrix",
  names: ["\\bordermatrix", "\\matrix"],
  props: {
    numArgs: 0,
    numOptionalArgs: 1
  },
  handler: ({ parser, funcName }, args, optArgs) => {
    // Find out if the author has defined custom delimiters
    let delimiters = ["(", ")"];
    if (funcName === "\\bordermatrix" && optArgs[0] && optArgs[0].body) {
      const body = optArgs[0].body;
      if (body.length === 2 && body[0].type === "atom" && body[1].type === "atom") {
        if (body[0].family === "open" && body[1].family === "close") {
          delimiters = [body[0].text, body[1].text];
        }
      }
    }
    // consume the opening brace
    parser.consumeSpaces();
    parser.consume();

    // Pass control to the environment handler in array.js.
    const env = environments["bordermatrix"];
    const context = {
      mode: parser.mode,
      envName: funcName.slice(1),
      delimiters,
      parser
    };
    const result = env.handler(context);
    parser.expect("}", true);
    return result
  }
});

// \@char is an internal function that takes a grouped decimal argument like
// {123} and converts into symbol with code 123.  It is used by the *macro*
// \char defined in macros.js.
defineFunction({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler({ parser, token }, args) {
    const arg = assertNodeType(args[0], "ordgroup");
    const group = arg.body;
    let number = "";
    for (let i = 0; i < group.length; i++) {
      const node = assertNodeType(group[i], "textord");
      number += node.text;
    }
    const code = parseInt(number);
    if (isNaN(code)) {
      throw new ParseError(`\\@char has non-numeric argument ${number}`, token)
    }
    return {
      type: "textord",
      mode: parser.mode,
      text: String.fromCodePoint(code)
    }
  }
});

// Helpers
const htmlRegEx = /^(#[a-f0-9]{3}|#?[a-f0-9]{6})$/i;
const htmlOrNameRegEx = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i;
const RGBregEx = /^ *\d{1,3} *(?:, *\d{1,3} *){2}$/;
const rgbRegEx = /^ *[10](?:\.\d*)? *(?:, *[10](?:\.\d*)? *){2}$/;
const xcolorHtmlRegEx = /^[a-f0-9]{6}$/i;
const toHex = num => {
  let str = num.toString(16);
  if (str.length === 1) { str = "0" + str; }
  return str
};

// Colors from Tables 4.1 and 4.2 of the xcolor package.
// Table 4.1 (lower case) RGB values are taken from chroma and xcolor.dtx.
// Table 4.2 (Capitalizzed) values were sampled, because Chroma contains a unreliable
// conversion from cmyk to RGB. See https://tex.stackexchange.com/a/537274.
const xcolors = JSON.parse(`{
  "Apricot": "#ffb484",
  "Aquamarine": "#08b4bc",
  "Bittersweet": "#c84c14",
  "blue": "#0000FF",
  "Blue": "#303494",
  "BlueGreen": "#08b4bc",
  "BlueViolet": "#503c94",
  "BrickRed": "#b8341c",
  "brown": "#BF8040",
  "Brown": "#802404",
  "BurntOrange": "#f8941c",
  "CadetBlue": "#78749c",
  "CarnationPink": "#f884b4",
  "Cerulean": "#08a4e4",
  "CornflowerBlue": "#40ace4",
  "cyan": "#00FFFF",
  "Cyan": "#08acec",
  "Dandelion": "#ffbc44",
  "darkgray": "#404040",
  "DarkOrchid": "#a8548c",
  "Emerald": "#08ac9c",
  "ForestGreen": "#089c54",
  "Fuchsia": "#90348c",
  "Goldenrod": "#ffdc44",
  "gray": "#808080",
  "Gray": "#98949c",
  "green": "#00FF00",
  "Green": "#08a44c",
  "GreenYellow": "#e0e474",
  "JungleGreen": "#08ac9c",
  "Lavender": "#f89cc4",
  "lightgray": "#c0c0c0",
  "lime": "#BFFF00",
  "LimeGreen": "#90c43c",
  "magenta": "#FF00FF",
  "Magenta": "#f0048c",
  "Mahogany": "#b0341c",
  "Maroon": "#b03434",
  "Melon": "#f89c7c",
  "MidnightBlue": "#086494",
  "Mulberry": "#b03c94",
  "NavyBlue": "#086cbc",
  "olive": "#7F7F00",
  "OliveGreen": "#407c34",
  "orange": "#FF8000",
  "Orange": "#f8843c",
  "OrangeRed": "#f0145c",
  "Orchid": "#b074ac",
  "Peach": "#f8945c",
  "Periwinkle": "#8074bc",
  "PineGreen": "#088c74",
  "pink": "#ff7f7f",
  "Plum": "#98248c",
  "ProcessBlue": "#08b4ec",
  "purple": "#BF0040",
  "Purple": "#a0449c",
  "RawSienna": "#983c04",
  "red": "#ff0000",
  "Red": "#f01c24",
  "RedOrange": "#f86434",
  "RedViolet": "#a0246c",
  "Rhodamine": "#f0549c",
  "Royallue": "#0874bc",
  "RoyalPurple": "#683c9c",
  "RubineRed": "#f0047c",
  "Salmon": "#f8948c",
  "SeaGreen": "#30bc9c",
  "Sepia": "#701404",
  "SkyBlue": "#48c4dc",
  "SpringGreen": "#c8dc64",
  "Tan": "#e09c74",
  "teal": "#007F7F",
  "TealBlue": "#08acb4",
  "Thistle": "#d884b4",
  "Turquoise": "#08b4cc",
  "violet": "#800080",
  "Violet": "#60449c",
  "VioletRed": "#f054a4",
  "WildStrawberry": "#f0246c",
  "yellow": "#FFFF00",
  "Yellow": "#fff404",
  "YellowGreen": "#98cc6c",
  "YellowOrange": "#ffa41c"
}`);

const colorFromSpec = (model, spec) => {
  let color = "";
  if (model === "HTML") {
    if (!htmlRegEx.test(spec)) {
      throw new ParseError("Invalid HTML input.")
    }
    color = spec;
  } else if (model === "RGB") {
    if (!RGBregEx.test(spec)) {
      throw new ParseError("Invalid RGB input.")
    }
    spec.split(",").map(e => { color += toHex(Number(e.trim())); });
  } else {
    if (!rgbRegEx.test(spec)) {
      throw new ParseError("Invalid rbg input.")
    }
    spec.split(",").map(e => {
      const num = Number(e.trim());
      if (num > 1) { throw new ParseError("Color rgb input must be < 1.") }
      color += toHex(Number((num * 255).toFixed(0)));
    });
  }
  if (color.charAt(0) !== "#") { color = "#" + color; }
  return color
};

const validateColor = (color, macros, token) => {
  const macroName = `\\\\color@${color}`; // from \defineColor.
  const match = htmlOrNameRegEx.exec(color);
  if (!match) { throw new ParseError("Invalid color: '" + color + "'", token) }
  // We allow a 6-digit HTML color spec without a leading "#".
  // This follows the xcolor package's HTML color model.
  // Predefined color names are all missed by this RegEx pattern.
  if (xcolorHtmlRegEx.test(color)) {
    return "#" + color
  } else if (color.charAt(0) === "#") {
    return color
  } else if (macros.has(macroName)) {
    color = macros.get(macroName).tokens[0].text;
  } else if (xcolors[color]) {
    color = xcolors[color];
  }
  return color
};

const mathmlBuilder$8 = (group, style) => {
  // In LaTeX, color is not supposed to change the spacing of any node.
  // So instead of wrapping the group in an <mstyle>, we apply
  // the color individually to each node and return a document fragment.
  let expr = buildExpression(group.body, style.withColor(group.color));
  if (expr.length === 0) {
    expr.push(new mathMLTree.MathNode("mrow"));
  }
  expr = expr.map(e => {
    e.style.color = group.color;
    return e
  });
  return mathMLTree.newDocumentFragment(expr)
};

defineFunction({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    allowedInText: true,
    argTypes: ["raw", "raw", "original"]
  },
  handler({ parser, token }, args, optArgs) {
    const model = optArgs[0] && assertNodeType(optArgs[0], "raw").string;
    let color = "";
    if (model) {
      const spec = assertNodeType(args[0], "raw").string;
      color = colorFromSpec(model, spec);
    } else {
      color = validateColor(assertNodeType(args[0], "raw").string, parser.gullet.macros, token);
    }
    const body = args[1];
    return {
      type: "color",
      mode: parser.mode,
      color,
      isTextColor: true,
      body: ordargument(body)
    }
  },
  mathmlBuilder: mathmlBuilder$8
});

defineFunction({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: true,
    argTypes: ["raw", "raw"]
  },
  handler({ parser, breakOnTokenText, token }, args, optArgs) {
    const model = optArgs[0] && assertNodeType(optArgs[0], "raw").string;
    let color = "";
    if (model) {
      const spec = assertNodeType(args[0], "raw").string;
      color = colorFromSpec(model, spec);
    } else {
      color = validateColor(assertNodeType(args[0], "raw").string, parser.gullet.macros, token);
    }

    // Parse out the implicit body that should be colored.
    const body = parser.parseExpression(true, breakOnTokenText, true);

    return {
      type: "color",
      mode: parser.mode,
      color,
      isTextColor: false,
      body
    }
  },
  mathmlBuilder: mathmlBuilder$8
});

defineFunction({
  type: "color",
  names: ["\\definecolor"],
  props: {
    numArgs: 3,
    allowedInText: true,
    argTypes: ["raw", "raw", "raw"]
  },
  handler({ parser, funcName, token }, args) {
    const name = assertNodeType(args[0], "raw").string;
    if (!/^[A-Za-z]+$/.test(name)) {
      throw new ParseError("Color name must be latin letters.", token)
    }
    const model = assertNodeType(args[1], "raw").string;
    if (!["HTML", "RGB", "rgb"].includes(model)) {
      throw new ParseError("Color model must be HTML, RGB, or rgb.", token)
    }
    const spec = assertNodeType(args[2], "raw").string;
    const color = colorFromSpec(model, spec);
    parser.gullet.macros.set(`\\\\color@${name}`, { tokens: [{ text: color }], numArgs: 0 });
    return { type: "internal", mode: parser.mode }
  }
  // No mathmlBuilder. The point of \definecolor is to set a macro.
});

// Row breaks within tabular environments, and line breaks at top level


// \DeclareRobustCommand\\{...\@xnewline}
defineFunction({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 0,
    allowedInText: true
  },

  handler({ parser }, args, optArgs) {
    const size = parser.gullet.future().text === "[" ? parser.parseSizeGroup(true) : null;
    const newLine = !parser.settings.displayMode;
    return {
      type: "cr",
      mode: parser.mode,
      newLine,
      size: size && assertNodeType(size, "size").value
    }
  },

  // The following builder is called only at the top level,
  // not within tabular/array environments.

  mathmlBuilder(group, style) {
    // MathML 3.0 calls for newline to occur in an <mo> or an <mspace>.
    // Ref: https://www.w3.org/TR/MathML3/chapter3.html#presm.linebreaking
    const node = new mathMLTree.MathNode("mo");
    if (group.newLine) {
      node.setAttribute("linebreak", "newline");
      if (group.size) {
        const size = calculateSize(group.size, style);
        node.setAttribute("height", size.number + size.unit);
      }
    }
    return node
  }
});

const globalMap = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
};

const checkControlSequence = (tok) => {
  const name = tok.text;
  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
    throw new ParseError("Expected a control sequence", tok);
  }
  return name;
};

const getRHS = (parser) => {
  let tok = parser.gullet.popToken();
  if (tok.text === "=") {
    // consume optional equals
    tok = parser.gullet.popToken();
    if (tok.text === " ") {
      // consume one optional space
      tok = parser.gullet.popToken();
    }
  }
  return tok;
};

const letCommand = (parser, name, tok, global) => {
  let macro = parser.gullet.macros.get(tok.text);
  if (macro == null) {
    // don't expand it later even if a macro with the same name is defined
    // e.g., \let\foo=\frac \def\frac{\relax} \frac12
    tok.noexpand = true;
    macro = {
      tokens: [tok],
      numArgs: 0,
      // reproduce the same behavior in expansion
      unexpandable: !parser.gullet.isExpandable(tok.text)
    };
  }
  parser.gullet.macros.set(name, macro, global);
};

// <assignment> -> <non-macro assignment>|<macro assignment>
// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
// <macro assignment> -> <definition>|<prefix><macro assignment>
// <prefix> -> \global|\long|\outer
defineFunction({
  type: "internal",
  names: [
    "\\global",
    "\\long",
    "\\\\globallong" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler({ parser, funcName }) {
    parser.consumeSpaces();
    const token = parser.fetch();
    if (globalMap[token.text]) {
      // Temml doesn't have \par, so ignore \long
      if (funcName === "\\global" || funcName === "\\\\globallong") {
        token.text = globalMap[token.text];
      }
      return assertNodeType(parser.parseFunction(), "internal");
    }
    throw new ParseError(`Invalid token after macro prefix`, token);
  }
});

// Basic support for macro definitions: \def, \gdef, \edef, \xdef
// <definition> -> <def><control sequence><definition text>
// <def> -> \def|\gdef|\edef|\xdef
// <definition text> -> <parameter text><left brace><balanced text><right brace>
defineFunction({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler({ parser, funcName }) {
    let tok = parser.gullet.popToken();
    const name = tok.text;
    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
      throw new ParseError("Expected a control sequence", tok);
    }

    let numArgs = 0;
    let insert;
    const delimiters = [[]];
    // <parameter text> contains no braces
    while (parser.gullet.future().text !== "{") {
      tok = parser.gullet.popToken();
      if (tok.text === "#") {
        // If the very last character of the <parameter text> is #, so that
        // this # is immediately followed by {, TeX will behave as if the {
        // had been inserted at the right end of both the parameter text
        // and the replacement text.
        if (parser.gullet.future().text === "{") {
          insert = parser.gullet.future();
          delimiters[numArgs].push("{");
          break;
        }

        // A parameter, the first appearance of # must be followed by 1,
        // the next by 2, and so on; up to nine #’s are allowed
        tok = parser.gullet.popToken();
        if (!/^[1-9]$/.test(tok.text)) {
          throw new ParseError(`Invalid argument number "${tok.text}"`);
        }
        if (parseInt(tok.text) !== numArgs + 1) {
          throw new ParseError(`Argument number "${tok.text}" out of order`);
        }
        numArgs++;
        delimiters.push([]);
      } else if (tok.text === "EOF") {
        throw new ParseError("Expected a macro definition");
      } else {
        delimiters[numArgs].push(tok.text);
      }
    }
    // replacement text, enclosed in '{' and '}' and properly nested
    let { tokens } = parser.gullet.consumeArg();
    if (insert) {
      tokens.unshift(insert);
    }

    if (funcName === "\\edef" || funcName === "\\xdef") {
      tokens = parser.gullet.expandTokens(tokens);
      if (tokens.length > parser.gullet.settings.maxExpand) {
        throw new ParseError("Too many expansions in an " + funcName);
      }
      tokens.reverse(); // to fit in with stack order
    }
    // Final arg is the expansion of the macro
    parser.gullet.macros.set(
      name,
      { tokens, numArgs, delimiters },
      funcName === globalMap[funcName]
    );
    return { type: "internal", mode: parser.mode };
  }
});

// <simple assignment> -> <let assignment>
// <let assignment> -> \futurelet<control sequence><token><token>
//     | \let<control sequence><equals><one optional space><token>
// <equals> -> <optional spaces>|<optional spaces>=
defineFunction({
  type: "internal",
  names: [
    "\\let",
    "\\\\globallet" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler({ parser, funcName }) {
    const name = checkControlSequence(parser.gullet.popToken());
    parser.gullet.consumeSpaces();
    const tok = getRHS(parser);
    letCommand(parser, name, tok, funcName === "\\\\globallet");
    return { type: "internal", mode: parser.mode };
  }
});

// ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf
defineFunction({
  type: "internal",
  names: [
    "\\futurelet",
    "\\\\globalfuture" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler({ parser, funcName }) {
    const name = checkControlSequence(parser.gullet.popToken());
    const middle = parser.gullet.popToken();
    const tok = parser.gullet.popToken();
    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
    parser.gullet.pushToken(tok);
    parser.gullet.pushToken(middle);
    return { type: "internal", mode: parser.mode };
  }
});

defineFunction({
  type: "internal",
  names: ["\\newcommand", "\\renewcommand", "\\providecommand"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler({ parser, funcName }) {
    let name = "";
    const tok = parser.gullet.popToken();
    if (tok.text === "{") {
      name = checkControlSequence(parser.gullet.popToken());
      parser.gullet.popToken();
    } else {
      name = checkControlSequence(tok);
    }

    const exists = parser.gullet.isDefined(name);
    if (exists && funcName === "\\newcommand") {
      throw new ParseError(
        `\\newcommand{${name}} attempting to redefine ${name}; use \\renewcommand`
      );
    }
    if (!exists && funcName === "\\renewcommand") {
      throw new ParseError(
        `\\renewcommand{${name}} when command ${name} does not yet exist; use \\newcommand`
      );
    }

    let numArgs = 0;
    if (parser.gullet.future().text === "[") {
      let tok = parser.gullet.popToken();
      tok = parser.gullet.popToken();
      if (!/^[0-9]$/.test(tok.text)) {
        throw new ParseError(`Invalid number of arguments: "${tok.text}"`);
      }
      numArgs = parseInt(tok.text);
      tok = parser.gullet.popToken();
      if (tok.text !== "]") {
        throw new ParseError(`Invalid argument "${tok.text}"`);
      }
    }

    // replacement text, enclosed in '{' and '}' and properly nested
    const { tokens } = parser.gullet.consumeArg();

    if (!(funcName === "\\providecommand" && parser.gullet.macros.has(name))) {
      // Ignore \providecommand
      parser.gullet.macros.set(
        name,
        { tokens, numArgs }
      );
    }

    return { type: "internal", mode: parser.mode };

  }
});

// Extra data needed for the delimiter handler down below
const delimiterSizes = {
  "\\bigl": { mclass: "mopen", size: 1 },
  "\\Bigl": { mclass: "mopen", size: 2 },
  "\\biggl": { mclass: "mopen", size: 3 },
  "\\Biggl": { mclass: "mopen", size: 4 },
  "\\bigr": { mclass: "mclose", size: 1 },
  "\\Bigr": { mclass: "mclose", size: 2 },
  "\\biggr": { mclass: "mclose", size: 3 },
  "\\Biggr": { mclass: "mclose", size: 4 },
  "\\bigm": { mclass: "mrel", size: 1 },
  "\\Bigm": { mclass: "mrel", size: 2 },
  "\\biggm": { mclass: "mrel", size: 3 },
  "\\Biggm": { mclass: "mrel", size: 4 },
  "\\big": { mclass: "mord", size: 1 },
  "\\Big": { mclass: "mord", size: 2 },
  "\\bigg": { mclass: "mord", size: 3 },
  "\\Bigg": { mclass: "mord", size: 4 }
};

const delimiters = [
  "(",
  "\\lparen",
  ")",
  "\\rparen",
  "[",
  "\\lbrack",
  "]",
  "\\rbrack",
  "\\{",
  "\\lbrace",
  "\\}",
  "\\rbrace",
  "⦇",
  "\\llparenthesis",
  "⦈",
  "\\rrparenthesis",
  "\\lfloor",
  "\\rfloor",
  "\u230a",
  "\u230b",
  "\\lceil",
  "\\rceil",
  "\u2308",
  "\u2309",
  "<",
  ">",
  "\\langle",
  "\u27e8",
  "\\rangle",
  "\u27e9",
  "\\lAngle",
  "\u27ea",
  "\\rAngle",
  "\u27eb",
  "\\llangle",
  "⦉",
  "\\rrangle",
  "⦊",
  "\\lt",
  "\\gt",
  "\\lvert",
  "\\rvert",
  "\\lVert",
  "\\rVert",
  "\\lgroup",
  "\\rgroup",
  "\u27ee",
  "\u27ef",
  "\\lmoustache",
  "\\rmoustache",
  "\u23b0",
  "\u23b1",
  "\\llbracket",
  "\\rrbracket",
  "\u27e6",
  "\u27e6",
  "\\lBrace",
  "\\rBrace",
  "\u2983",
  "\u2984",
  "/",
  "\\backslash",
  "|",
  "\\vert",
  "\\|",
  "\\Vert",
  "\u2016",
  "\\uparrow",
  "\\Uparrow",
  "\\downarrow",
  "\\Downarrow",
  "\\updownarrow",
  "\\Updownarrow",
  "."
];

// Export isDelimiter for benefit of parser.
const dels = ["}", "\\left", "\\middle", "\\right"];
const isDelimiter = str => str.length > 0 &&
  (delimiters.includes(str) || delimiterSizes[str] || dels.includes(str));

// Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
const sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];

// Delimiter functions
function checkDelimiter(delim, context) {
  const symDelim = checkSymbolNodeType(delim);
  if (symDelim && delimiters.includes(symDelim.text)) {
    // If a character is not in the MathML operator dictionary, it will not stretch.
    // Replace such characters w/characters that will stretch.
    if (["<", "\\lt"].includes(symDelim.text)) { symDelim.text = "⟨"; }
    if ([">", "\\gt"].includes(symDelim.text)) { symDelim.text = "⟩"; }
    return symDelim;
  } else if (symDelim) {
    throw new ParseError(`Invalid delimiter '${symDelim.text}' after '${context.funcName}'`, delim);
  } else {
    throw new ParseError(`Invalid delimiter type '${delim.type}'`, delim);
  }
}

//                               /         \
const needExplicitStretch = ["\u002F", "\u005C", "\\backslash", "\\vert", "|"];

defineFunction({
  type: "delimsizing",
  names: [
    "\\bigl",
    "\\Bigl",
    "\\biggl",
    "\\Biggl",
    "\\bigr",
    "\\Bigr",
    "\\biggr",
    "\\Biggr",
    "\\bigm",
    "\\Bigm",
    "\\biggm",
    "\\Biggm",
    "\\big",
    "\\Big",
    "\\bigg",
    "\\Bigg"
  ],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    const delim = checkDelimiter(args[0], context);

    return {
      type: "delimsizing",
      mode: context.parser.mode,
      size: delimiterSizes[context.funcName].size,
      mclass: delimiterSizes[context.funcName].mclass,
      delim: delim.text
    };
  },
  mathmlBuilder: (group) => {
    const children = [];

    if (group.delim === ".") { group.delim = ""; }
    children.push(makeText(group.delim, group.mode));

    const node = new mathMLTree.MathNode("mo", children);

    if (group.mclass === "mopen" || group.mclass === "mclose") {
      // Only some of the delimsizing functions act as fences, and they
      // return "mopen" or "mclose" mclass.
      node.setAttribute("fence", "true");
    } else {
      // Explicitly disable fencing if it's not a fence, to override the
      // defaults.
      node.setAttribute("fence", "false");
    }
    if (needExplicitStretch.includes(group.delim) || group.delim.indexOf("arrow") > -1) {
      // We have to explicitly set stretchy to true.
      node.setAttribute("stretchy", "true");
    }
    node.setAttribute("symmetric", "true"); // Needed for tall arrows in Firefox.
    node.setAttribute("minsize", sizeToMaxHeight[group.size] + "em");
    node.setAttribute("maxsize", sizeToMaxHeight[group.size] + "em");
    return node;
  }
});

function assertParsed(group) {
  if (!group.body) {
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
  }
}

defineFunction({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    return {
      type: "leftright-right",
      mode: context.parser.mode,
      delim: checkDelimiter(args[0], context).text
    };
  }
});

defineFunction({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    const delim = checkDelimiter(args[0], context);

    const parser = context.parser;
    // Parse out the implicit body
    ++parser.leftrightDepth;
    // parseExpression stops before '\\right' or `\\middle`
    let body = parser.parseExpression(false, null, true);
    let nextToken = parser.fetch();
    while (nextToken.text === "\\middle") {
      // `\middle`, from the ε-TeX package, ends one group and starts another group.
      // We had to parse this expression with `breakOnMiddle` enabled in order
      // to get TeX-compliant parsing of \over.
      // But we do not want, at this point, to end on \middle, so continue
      // to parse until we fetch a `\right`.
      parser.consume();
      const middle = parser.fetch().text;
      if (!symbols.math[middle]) {
        throw new ParseError(`Invalid delimiter '${middle}' after '\\middle'`);
      }
      checkDelimiter({ type: "atom", mode: "math", text: middle }, { funcName: "\\middle" });
      body.push({ type: "middle", mode: "math", delim: middle });
      parser.consume();
      body = body.concat(parser.parseExpression(false, null, true));
      nextToken = parser.fetch();
    }
    --parser.leftrightDepth;
    // Check the next token
    parser.expect("\\right", false);
    const right = assertNodeType(parser.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: parser.mode,
      body,
      left: delim.text,
      right: right.delim
    };
  },
  mathmlBuilder: (group, style) => {
    assertParsed(group);
    const inner = buildExpression(group.body, style);

    if (group.left === ".") { group.left = ""; }
    const leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
    leftNode.setAttribute("fence", "true");
    leftNode.setAttribute("form", "prefix");
    if (group.left === "/" || group.left === "\u005C" || group.left.indexOf("arrow") > -1) {
      leftNode.setAttribute("stretchy", "true");
    }
    inner.unshift(leftNode);

    if (group.right === ".") { group.right = ""; }
    const rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
    rightNode.setAttribute("fence", "true");
    rightNode.setAttribute("form", "postfix");
    if (group.right === "\u2216" || group.right.indexOf("arrow") > -1) {
      rightNode.setAttribute("stretchy", "true");
    }
    if (group.body.length > 0) {
      const lastElement = group.body[group.body.length - 1];
      if (lastElement.type === "color" && !lastElement.isTextColor) {
        // \color is a switch. If the last element is of type "color" then
        // the user set the \color switch and left it on.
        // A \right delimiter turns the switch off, but the delimiter itself gets the color.
        rightNode.setAttribute("mathcolor", lastElement.color);
      }
    }
    inner.push(rightNode);

    return makeRow(inner);
  }
});

defineFunction({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    const delim = checkDelimiter(args[0], context);
    if (!context.parser.leftrightDepth) {
      throw new ParseError("\\middle without preceding \\left", delim);
    }

    return {
      type: "middle",
      mode: context.parser.mode,
      delim: delim.text
    };
  },
  mathmlBuilder: (group, style) => {
    const textNode = makeText(group.delim, group.mode);
    const middleNode = new mathMLTree.MathNode("mo", [textNode]);
    middleNode.setAttribute("fence", "true");
    if (group.delim.indexOf("arrow") > -1) {
      middleNode.setAttribute("stretchy", "true");
    }
    // The next line is not semantically correct, but
    // Chromium fails to stretch if it is not there.
    middleNode.setAttribute("form", "prefix");
    // MathML gives 5/18em spacing to each <mo> element.
    // \middle should get delimiter spacing instead.
    middleNode.setAttribute("lspace", "0.05em");
    middleNode.setAttribute("rspace", "0.05em");
    return middleNode;
  }
});

const padding = _ => {
  const node = new mathMLTree.MathNode("mspace");
  node.setAttribute("width", "3pt");
  return node
};

const mathmlBuilder$7 = (group, style) => {
  let node;
  if (group.label.indexOf("colorbox") > -1 || group.label === "\\boxed") {
    // MathML core does not support +width attribute in <mpadded>.
    // Firefox does not reliably add side padding.
    // Insert <mspace>
    node = new mathMLTree.MathNode("mrow", [
      padding(),
      buildGroup$1(group.body, style),
      padding()
    ]);
  } else {
    node = new mathMLTree.MathNode("menclose", [buildGroup$1(group.body, style)]);
  }
  switch (group.label) {
    case "\\overline":
      node.setAttribute("notation", "top"); // for Firefox & WebKit
      node.classes.push("tml-overline");    // for Chromium
      break
    case "\\underline":
      node.setAttribute("notation", "bottom");
      node.classes.push("tml-underline");
      break
    case "\\cancel":
      node.setAttribute("notation", "updiagonalstrike");
      node.children.push(new mathMLTree.MathNode("mrow", [], ["tml-cancel", "upstrike"]));
      break
    case "\\bcancel":
      node.setAttribute("notation", "downdiagonalstrike");
      node.children.push(new mathMLTree.MathNode("mrow", [], ["tml-cancel", "downstrike"]));
      break
    case "\\sout":
      node.setAttribute("notation", "horizontalstrike");
      node.children.push(new mathMLTree.MathNode("mrow", [], ["tml-cancel", "sout"]));
      break
    case "\\xcancel":
      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      node.classes.push("tml-xcancel");
      break
    case "\\longdiv":
      node.setAttribute("notation", "longdiv");
      node.classes.push("longdiv-top");
      node.children.push(new mathMLTree.MathNode("mrow", [], ["longdiv-arc"]));
      break
    case "\\phase":
      node.setAttribute("notation", "phasorangle");
      node.classes.push("phasor-bottom");
      node.children.push(new mathMLTree.MathNode("mrow", [], ["phasor-angle"]));
      break
    case "\\textcircled":
      node.setAttribute("notation", "circle");
      node.classes.push("circle-pad");
      node.children.push(new mathMLTree.MathNode("mrow", [], ["textcircle"]));
      break
    case "\\angl":
      node.setAttribute("notation", "actuarial");
      node.classes.push("actuarial");
      break
    case "\\boxed":
      // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}} from amsmath.sty
      node.setAttribute("notation", "box");
      node.classes.push("tml-box");
      node.setAttribute("scriptlevel", "0");
      node.setAttribute("displaystyle", "true");
      break
    case "\\fbox":
      node.setAttribute("notation", "box");
      node.classes.push("tml-fbox");
      break
    case "\\fcolorbox":
    case "\\colorbox": {
      // <menclose> doesn't have a good notation option for \colorbox.
      // So use <mpadded> instead. Set some attributes that come
      // included with <menclose>.
      //const fboxsep = 3; // 3 pt from LaTeX source2e
      //node.setAttribute("height", `+${2 * fboxsep}pt`)
      //node.setAttribute("voffset", `${fboxsep}pt`)
      const style = { padding: "3pt 0 3pt 0" };

      if (group.label === "\\fcolorbox") {
        style.border = "0.0667em solid " + String(group.borderColor);
      }
      node.style = style;
      break
    }
  }
  if (group.backgroundColor) {
    node.setAttribute("mathbackground", group.backgroundColor);
  }
  return node;
};

defineFunction({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    allowedInText: true,
    argTypes: ["raw", "raw", "text"]
  },
  handler({ parser, funcName }, args, optArgs) {
    const model = optArgs[0] && assertNodeType(optArgs[0], "raw").string;
    let color = "";
    if (model) {
      const spec = assertNodeType(args[0], "raw").string;
      color = colorFromSpec(model, spec);
    } else {
      color = validateColor(assertNodeType(args[0], "raw").string, parser.gullet.macros);
    }
    const body = args[1];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: color,
      body
    };
  },
  mathmlBuilder: mathmlBuilder$7
});

defineFunction({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    numOptionalArgs: 1,
    allowedInText: true,
    argTypes: ["raw", "raw", "raw", "text"]
  },
  handler({ parser, funcName }, args, optArgs) {
    const model = optArgs[0] && assertNodeType(optArgs[0], "raw").string;
    let borderColor = "";
    let backgroundColor;
    if (model) {
      const borderSpec = assertNodeType(args[0], "raw").string;
      const backgroundSpec = assertNodeType(args[0], "raw").string;
      borderColor = colorFromSpec(model, borderSpec);
      backgroundColor = colorFromSpec(model, backgroundSpec);
    } else {
      borderColor = validateColor(assertNodeType(args[0], "raw").string, parser.gullet.macros);
      backgroundColor = validateColor(assertNodeType(args[1], "raw").string, parser.gullet.macros);
    }
    const body = args[2];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor,
      borderColor,
      body
    };
  },
  mathmlBuilder: mathmlBuilder$7
});

defineFunction({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: true
  },
  handler({ parser }, args) {
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\fbox",
      body: args[0]
    };
  }
});

defineFunction({
  type: "enclose",
  names: ["\\angl", "\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\overline",
    "\\boxed", "\\longdiv", "\\phase"],
  props: {
    numArgs: 1
  },
  handler({ parser, funcName }, args) {
    const body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body
    };
  },
  mathmlBuilder: mathmlBuilder$7
});

defineFunction({
  type: "enclose",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler({ parser, funcName }, args) {
    const body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body
    };
  },
  mathmlBuilder: mathmlBuilder$7
});


defineFunction({
  type: "enclose",
  names: ["\\textcircled"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: true,
    allowedInText: true
  },
  handler({ parser, funcName }, args) {
    const body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body
    };
  },
  mathmlBuilder: mathmlBuilder$7
});

// Environment delimiters. HTML/MathML rendering is defined in the corresponding
// defineEnvironment definitions.
defineFunction({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler({ parser, funcName }, args) {
    const nameGroup = args[0];
    if (nameGroup.type !== "ordgroup") {
      throw new ParseError("Invalid environment name", nameGroup);
    }
    let envName = "";
    for (let i = 0; i < nameGroup.body.length; ++i) {
      envName += assertNodeType(nameGroup.body[i], "textord").text;
    }

    if (funcName === "\\begin") {
      // begin...end is similar to left...right
      if (!Object.prototype.hasOwnProperty.call(environments, envName )) {
        throw new ParseError("No such environment: " + envName, nameGroup);
      }
      // Build the environment object. Arguments and other information will
      // be made available to the begin and end methods using properties.
      const env = environments[envName];
      const { args, optArgs } = parser.parseArguments("\\begin{" + envName + "}", env);
      const context = {
        mode: parser.mode,
        envName,
        parser
      };
      const result = env.handler(context, args, optArgs);
      parser.expect("\\end", false);
      const endNameToken = parser.nextToken;
      const end = assertNodeType(parser.parseFunction(), "environment");
      if (end.name !== envName) {
        throw new ParseError(
          `Mismatch: \\begin{${envName}} matched by \\end{${end.name}}`,
          endNameToken
        );
      }
      return result;
    }

    return {
      type: "environment",
      mode: parser.mode,
      name: envName,
      nameGroup
    };
  }
});

defineFunction({
  type: "envTag",
  names: ["\\env@tag"],
  props: {
    numArgs: 1,
    argTypes: ["math"]
  },
  handler({ parser }, args) {
    return {
      type: "envTag",
      mode: parser.mode,
      body: args[0]
    };
  },
  mathmlBuilder(group, style) {
    return new mathMLTree.MathNode("mrow");
  }
});

defineFunction({
  type: "noTag",
  names: ["\\env@notag"],
  props: {
    numArgs: 0
  },
  handler({ parser }) {
    return {
      type: "noTag",
      mode: parser.mode
    };
  },
  mathmlBuilder(group, style) {
    return new mathMLTree.MathNode("mrow");
  }
});

const isLongVariableName = (group, font) => {
  if (font !== "mathrm" || group.body.type !== "ordgroup" || group.body.body.length === 1) {
    return false
  }
  if (group.body.body[0].type !== "mathord") { return false }
  for (let i = 1; i < group.body.body.length; i++) {
    const parseNodeType = group.body.body[i].type;
    if (!(parseNodeType ===  "mathord" ||
    (parseNodeType ===  "textord" && !isNaN(group.body.body[i].text)))) {
      return false
    }
  }
  return true
};

const mathmlBuilder$6 = (group, style) => {
  const font = group.font;
  const newStyle = style.withFont(font);
  const mathGroup = buildGroup$1(group.body, newStyle);

  if (mathGroup.children.length === 0) { return mathGroup } // empty group, e.g., \mathrm{}
  if (font === "boldsymbol" && ["mo", "mpadded", "mrow"].includes(mathGroup.type)) {
    mathGroup.style.fontWeight = "bold";
    return mathGroup
  }
  // Check if it is possible to consolidate elements into a single <mi> element.
  if (isLongVariableName(group, font)) {
    // This is a \mathrm{…} group. It gets special treatment because symbolsOrd.js
    // wraps <mi> elements with <mpadded>s to work around a Firefox bug.
    const mi = mathGroup.children[0].children[0].children
      ? mathGroup.children[0].children[0]
      : mathGroup.children[0];
    delete mi.attributes.mathvariant;
    for (let i = 1; i < mathGroup.children.length; i++) {
      mi.children[0].text += mathGroup.children[i].children[0].children
        ? mathGroup.children[i].children[0].children[0].text
        : mathGroup.children[i].children[0].text;
    }
    // Wrap in a <mpadded> to prevent the same Firefox bug.
    const mpadded = new mathMLTree.MathNode("mpadded", [mi]);
    mpadded.setAttribute("lspace", "0");
    return mpadded
  }
  let canConsolidate = mathGroup.children[0].type === "mo";
  for (let i = 1; i < mathGroup.children.length; i++) {
    if (mathGroup.children[i].type === "mo" && font === "boldsymbol") {
      mathGroup.children[i].style.fontWeight = "bold";
    }
    if (mathGroup.children[i].type !== "mi") { canConsolidate = false; }
    const localVariant = mathGroup.children[i].attributes &&
      mathGroup.children[i].attributes.mathvariant || "";
    if (localVariant !== "normal") { canConsolidate = false; }
  }
  if (!canConsolidate) { return mathGroup }
  // Consolidate the <mi> elements.
  const mi = mathGroup.children[0];
  for (let i = 1; i < mathGroup.children.length; i++) {
    mi.children.push(mathGroup.children[i].children[0]);
  }
  if (mi.attributes.mathvariant && mi.attributes.mathvariant === "normal") {
    // Workaround for a Firefox bug that renders spurious space around
    // a <mi mathvariant="normal">
    // Ref: https://bugs.webkit.org/show_bug.cgi?id=129097
    // We insert a text node that contains a zero-width space and wrap in an mrow.
    // TODO: Get rid of this <mi> workaround when the Firefox bug is fixed.
    const bogus = new mathMLTree.MathNode("mtext", new mathMLTree.TextNode("\u200b"));
    return new mathMLTree.MathNode("mrow", [bogus, mi])
  }
  return mi
};

const fontAliases = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};

defineFunction({
  type: "font",
  names: [
    // styles
    "\\mathrm",
    "\\mathit",
    "\\mathbf",
    "\\mathnormal",
    "\\up@greek",
    "\\boldsymbol",

    // families
    "\\mathbb",
    "\\mathcal",
    "\\mathfrak",
    "\\mathscr",
    "\\mathsf",
    "\\mathsfit",
    "\\mathtt",

    // aliases
    "\\Bbb",
    "\\bm",
    "\\bold",
    "\\frak"
  ],
  props: {
    numArgs: 1,
    allowedInArgument: true
  },
  handler: ({ parser, funcName }, args) => {
    const body = normalizeArgument(args[0]);
    let func = funcName;
    if (func in fontAliases) {
      func = fontAliases[func];
    }
    return {
      type: "font",
      mode: parser.mode,
      font: func.slice(1),
      body
    };
  },
  mathmlBuilder: mathmlBuilder$6
});

// Old font changing functions
defineFunction({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: ({ parser, funcName, breakOnTokenText }, args) => {
    const { mode } = parser;
    const body = parser.parseExpression(true, breakOnTokenText, true);
    const fontStyle = `math${funcName.slice(1)}`;

    return {
      type: "font",
      mode: mode,
      font: fontStyle,
      body: {
        type: "ordgroup",
        mode: parser.mode,
        body
      }
    };
  },
  mathmlBuilder: mathmlBuilder$6
});

const stylArray = ["display", "text", "script", "scriptscript"];
const scriptLevel = { auto: -1, display: 0, text: 0, script: 1, scriptscript: 2 };

const mathmlBuilder$5 = (group, style) => {
  // Track the scriptLevel of the numerator and denominator.
  // We may need that info for \mathchoice or for adjusting em dimensions.
  const childOptions = group.scriptLevel === "auto"
    ? style.incrementLevel()
    : group.scriptLevel === "display"
    ? style.withLevel(StyleLevel.TEXT)
    : group.scriptLevel === "text"
    ? style.withLevel(StyleLevel.SCRIPT)
    : style.withLevel(StyleLevel.SCRIPTSCRIPT);

  // Chromium (wrongly) continues to shrink fractions beyond scriptscriptlevel.
  // So we check for levels that Chromium shrinks too small.
  // If necessary, set an explicit fraction depth.
  const numer = buildGroup$1(group.numer, childOptions);
  const denom = buildGroup$1(group.denom, childOptions);
  if (style.level === 3) {
    numer.style.mathDepth = "2";
    numer.setAttribute("scriptlevel", "2");
    denom.style.mathDepth = "2";
    denom.setAttribute("scriptlevel", "2");
  }

  let node = new mathMLTree.MathNode("mfrac", [numer, denom]);

  if (!group.hasBarLine) {
    node.setAttribute("linethickness", "0px");
  } else if (group.barSize) {
    const ruleWidth = calculateSize(group.barSize, style);
    node.setAttribute("linethickness", ruleWidth.number + ruleWidth.unit);
  }

  if (group.leftDelim != null || group.rightDelim != null) {
    const withDelims = [];

    if (group.leftDelim != null) {
      const leftOp = new mathMLTree.MathNode("mo", [
        new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))
      ]);
      leftOp.setAttribute("fence", "true");
      withDelims.push(leftOp);
    }

    withDelims.push(node);

    if (group.rightDelim != null) {
      const rightOp = new mathMLTree.MathNode("mo", [
        new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))
      ]);
      rightOp.setAttribute("fence", "true");
      withDelims.push(rightOp);
    }

    node = makeRow(withDelims);
  }

  if (group.scriptLevel !== "auto") {
    node = new mathMLTree.MathNode("mstyle", [node]);
    node.setAttribute("displaystyle", String(group.scriptLevel === "display"));
    node.setAttribute("scriptlevel", scriptLevel[group.scriptLevel]);
  }

  return node;
};

defineFunction({
  type: "genfrac",
  names: [
    "\\dfrac",
    "\\frac",
    "\\tfrac",
    "\\dbinom",
    "\\binom",
    "\\tbinom",
    "\\\\atopfrac", // can’t be entered directly
    "\\\\bracefrac",
    "\\\\brackfrac" // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: true
  },
  handler: ({ parser, funcName }, args) => {
    const numer = args[0];
    const denom = args[1];
    let hasBarLine = false;
    let leftDelim = null;
    let rightDelim = null;
    let scriptLevel = "auto";

    switch (funcName) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        hasBarLine = true;
        break;
      case "\\\\atopfrac":
        hasBarLine = false;
        break;
      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        leftDelim = "(";
        rightDelim = ")";
        break;
      case "\\\\bracefrac":
        leftDelim = "\\{";
        rightDelim = "\\}";
        break;
      case "\\\\brackfrac":
        leftDelim = "[";
        rightDelim = "]";
        break;
      default:
        throw new Error("Unrecognized genfrac command");
    }

    switch (funcName) {
      case "\\dfrac":
      case "\\dbinom":
        scriptLevel = "display";
        break;
      case "\\tfrac":
      case "\\tbinom":
        scriptLevel = "text";
        break;
    }

    return {
      type: "genfrac",
      mode: parser.mode,
      continued: false,
      numer,
      denom,
      hasBarLine,
      leftDelim,
      rightDelim,
      scriptLevel,
      barSize: null
    };
  },
  mathmlBuilder: mathmlBuilder$5
});

defineFunction({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: ({ parser, funcName }, args) => {
    const numer = args[0];
    const denom = args[1];

    return {
      type: "genfrac",
      mode: parser.mode,
      continued: true,
      numer,
      denom,
      hasBarLine: true,
      leftDelim: null,
      rightDelim: null,
      scriptLevel: "display",
      barSize: null
    };
  }
});

// Infix generalized fractions -- these are not rendered directly, but replaced
// immediately by one of the variants above.
defineFunction({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: true
  },
  handler({ parser, funcName, token }) {
    let replaceWith;
    switch (funcName) {
      case "\\over":
        replaceWith = "\\frac";
        break;
      case "\\choose":
        replaceWith = "\\binom";
        break;
      case "\\atop":
        replaceWith = "\\\\atopfrac";
        break;
      case "\\brace":
        replaceWith = "\\\\bracefrac";
        break;
      case "\\brack":
        replaceWith = "\\\\brackfrac";
        break;
      default:
        throw new Error("Unrecognized infix genfrac command");
    }
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith,
      token
    };
  }
});

const delimFromValue = function(delimString) {
  let delim = null;
  if (delimString.length > 0) {
    delim = delimString;
    delim = delim === "." ? null : delim;
  }
  return delim;
};

defineFunction({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: true,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler({ parser }, args) {
    const numer = args[4];
    const denom = args[5];

    // Look into the parse nodes to get the desired delimiters.
    const leftNode = normalizeArgument(args[0]);
    const leftDelim = leftNode.type === "atom" && leftNode.family === "open"
      ? delimFromValue(leftNode.text)
      : null;
    const rightNode = normalizeArgument(args[1]);
    const rightDelim =
      rightNode.type === "atom" && rightNode.family === "close"
        ? delimFromValue(rightNode.text)
        : null;

    const barNode = assertNodeType(args[2], "size");
    let hasBarLine;
    let barSize = null;
    if (barNode.isBlank) {
      // \genfrac acts differently than \above.
      // \genfrac treats an empty size group as a signal to use a
      // standard bar size. \above would see size = 0 and omit the bar.
      hasBarLine = true;
    } else {
      barSize = barNode.value;
      hasBarLine = barSize.number > 0;
    }

    // Find out if we want displaystyle, textstyle, etc.
    let scriptLevel = "auto";
    let styl = args[3];
    if (styl.type === "ordgroup") {
      if (styl.body.length > 0) {
        const textOrd = assertNodeType(styl.body[0], "textord");
        scriptLevel = stylArray[Number(textOrd.text)];
      }
    } else {
      styl = assertNodeType(styl, "textord");
      scriptLevel = stylArray[Number(styl.text)];
    }

    return {
      type: "genfrac",
      mode: parser.mode,
      numer,
      denom,
      continued: false,
      hasBarLine,
      barSize,
      leftDelim,
      rightDelim,
      scriptLevel
    };
  },
  mathmlBuilder: mathmlBuilder$5
});

// \above is an infix fraction that also defines a fraction bar size.
defineFunction({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: true
  },
  handler({ parser, funcName, token }, args) {
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: "\\\\abovefrac",
      barSize: assertNodeType(args[0], "size").value,
      token
    };
  }
});

defineFunction({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: ({ parser, funcName }, args) => {
    const numer = args[0];
    const barSize = assert(assertNodeType(args[1], "infix").barSize);
    const denom = args[2];

    const hasBarLine = barSize.number > 0;
    return {
      type: "genfrac",
      mode: parser.mode,
      numer,
      denom,
      continued: false,
      hasBarLine,
      barSize,
      leftDelim: null,
      rightDelim: null,
      scriptLevel: "auto"
    };
  },

  mathmlBuilder: mathmlBuilder$5
});

// \hbox is provided for compatibility with LaTeX functions that act on a box.
// This function by itself doesn't do anything but set scriptlevel to \textstyle
// and prevent a soft line break.

defineFunction({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInArgument: true,
    allowedInText: false
  },
  handler({ parser }, args) {
    return {
      type: "hbox",
      mode: parser.mode,
      body: ordargument(args[0])
    };
  },
  mathmlBuilder(group, style) {
    const newStyle = style.withLevel(StyleLevel.TEXT);
    const mrow = buildExpressionRow(group.body, newStyle);
    return consolidateText(mrow)
  }
});

const mathmlBuilder$4 = (group, style) => {
  const accentNode = stretchy.mathMLnode(group.label);
  accentNode.style["math-depth"] = 0;
  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [
    buildGroup$1(group.base, style),
    accentNode
  ]);
};

// Horizontal stretchy braces
defineFunction({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler({ parser, funcName }, args) {
    return {
      type: "horizBrace",
      mode: parser.mode,
      label: funcName,
      isOver: /^\\over/.test(funcName),
      base: args[0]
    };
  },
  mathmlBuilder: mathmlBuilder$4
});

defineFunction({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: true
  },
  handler: ({ parser, token }, args) => {
    const body = args[1];
    const href = assertNodeType(args[0], "url").url;

    if (
      !parser.settings.isTrusted({
        command: "\\href",
        url: href
      })
    ) {
      throw new ParseError(`Function "\\href" is not trusted`, token)
    }

    return {
      type: "href",
      mode: parser.mode,
      href,
      body: ordargument(body)
    };
  },
  mathmlBuilder: (group, style) => {
    const math = new MathNode("math", [buildExpressionRow(group.body, style)]);
    const anchorNode = new AnchorNode(group.href, [], [math]);
    return anchorNode
  }
});

defineFunction({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: true
  },
  handler: ({ parser, token }, args) => {
    const href = assertNodeType(args[0], "url").url;

    if (
      !parser.settings.isTrusted({
        command: "\\url",
        url: href
      })
    ) {
      throw new ParseError(`Function "\\url" is not trusted`, token)
    }

    const chars = [];
    for (let i = 0; i < href.length; i++) {
      let c = href[i];
      if (c === "~") {
        c = "\\textasciitilde";
      }
      chars.push({
        type: "textord",
        mode: "text",
        text: c
      });
    }
    const body = {
      type: "text",
      mode: parser.mode,
      font: "\\texttt",
      body: chars
    };
    return {
      type: "href",
      mode: parser.mode,
      href,
      body: ordargument(body)
    };
  }
});

defineFunction({
  type: "html",
  names: ["\\class", "\\id", "\\style", "\\data"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: true
  },
  handler: ({ parser, funcName, token }, args) => {
    const value = assertNodeType(args[0], "raw").string;
    const body = args[1];

    if (parser.settings.strict) {
      throw new ParseError(`Function "${funcName}" is disabled in strict mode`, token)
    }

    let trustContext;
    const attributes = {};

    switch (funcName) {
      case "\\class":
        attributes.class = value;
        trustContext = {
          command: "\\class",
          class: value
        };
        break;
      case "\\id":
        attributes.id = value;
        trustContext = {
          command: "\\id",
          id: value
        };
        break;
      case "\\style":
        attributes.style = value;
        trustContext = {
          command: "\\style",
          style: value
        };
        break;
      case "\\data": {
        const data = value.split(",");
        for (let i = 0; i < data.length; i++) {
          const keyVal = data[i].split("=");
          if (keyVal.length !== 2) {
            throw new ParseError("Error parsing key-value for \\data");
          }
          attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
        }

        trustContext = {
          command: "\\data",
          attributes
        };
        break;
      }
      default:
        throw new Error("Unrecognized html command");
    }

    if (!parser.settings.isTrusted(trustContext)) {
      throw new ParseError(`Function "${funcName}" is not trusted`, token)
    }
    return {
      type: "html",
      mode: parser.mode,
      attributes,
      body: ordargument(body)
    };
  },
  mathmlBuilder: (group, style) => {
    const element =  buildExpressionRow(group.body, style);

    const classes = [];
    if (group.attributes.class) {
      classes.push(...group.attributes.class.trim().split(/\s+/));
    }
    element.classes = classes;

    for (const attr in group.attributes) {
      if (attr !== "class" && Object.prototype.hasOwnProperty.call(group.attributes, attr)) {
        element.setAttribute(attr, group.attributes[attr]);
      }
    }

    return element;
  }
});

const sizeData = function(str) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
    // str is a number with no unit specified.
    // default unit is bp, per graphix package.
    return { number: +str, unit: "bp" }
  } else {
    const match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);
    if (!match) {
      throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
    }
    const data = {
      number: +(match[1] + match[2]), // sign + magnitude, cast to number
      unit: match[3]
    };
    if (!validUnit(data)) {
      throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
    }
    return data
  }
};

defineFunction({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: false
  },
  handler: ({ parser, token }, args, optArgs) => {
    let width = { number: 0, unit: "em" };
    let height = { number: 0.9, unit: "em" };  // sorta character sized.
    let totalheight = { number: 0, unit: "em" };
    let alt = "";

    if (optArgs[0]) {
      const attributeStr = assertNodeType(optArgs[0], "raw").string;

      // Parser.js does not parse key/value pairs. We get a string.
      const attributes = attributeStr.split(",");
      for (let i = 0; i < attributes.length; i++) {
        const keyVal = attributes[i].split("=");
        if (keyVal.length === 2) {
          const str = keyVal[1].trim();
          switch (keyVal[0].trim()) {
            case "alt":
              alt = str;
              break
            case "width":
              width = sizeData(str);
              break
            case "height":
              height = sizeData(str);
              break
            case "totalheight":
              totalheight = sizeData(str);
              break
            default:
              throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.")
          }
        }
      }
    }

    const src = assertNodeType(args[0], "url").url;

    if (alt === "") {
      // No alt given. Use the file name. Strip away the path.
      alt = src;
      alt = alt.replace(/^.*[\\/]/, "");
      alt = alt.substring(0, alt.lastIndexOf("."));
    }

    if (
      !parser.settings.isTrusted({
        command: "\\includegraphics",
        url: src
      })
    ) {
      throw new ParseError(`Function "\\includegraphics" is not trusted`, token)
    }

    return {
      type: "includegraphics",
      mode: parser.mode,
      alt: alt,
      width: width,
      height: height,
      totalheight: totalheight,
      src: src
    }
  },
  mathmlBuilder: (group, style) => {
    const height = calculateSize(group.height, style);
    const depth = { number: 0, unit: "em" };

    if (group.totalheight.number > 0) {
      if (group.totalheight.unit === height.unit &&
        group.totalheight.number > height.number) {
        depth.number = group.totalheight.number - height.number;
        depth.unit = height.unit;
      }
    }

    let width = 0;
    if (group.width.number > 0) {
      width = calculateSize(group.width, style);
    }

    const graphicStyle = { height: height.number + depth.number + "em" };
    if (width.number > 0) {
      graphicStyle.width = width.number + width.unit;
    }
    if (depth.number > 0) {
      graphicStyle.verticalAlign = -depth.number + depth.unit;
    }

    const node = new Img(group.src, group.alt, graphicStyle);
    node.height = height;
    node.depth = depth;
    return new mathMLTree.MathNode("mtext", [node])
  }
});

// Horizontal spacing commands


// TODO: \hskip and \mskip should support plus and minus in lengths

defineFunction({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: true,
    allowedInText: true
  },
  handler({ parser, funcName, token }, args) {
    const size = assertNodeType(args[0], "size");
    if (parser.settings.strict) {
      const mathFunction = funcName[1] === "m"; // \mkern, \mskip
      const muUnit = size.value.unit === "mu";
      if (mathFunction) {
        if (!muUnit) {
          throw new ParseError(`LaTeX's ${funcName} supports only mu units, ` +
            `not ${size.value.unit} units`, token)
        }
        if (parser.mode !== "math") {
          throw new ParseError(`LaTeX's ${funcName} works only in math mode`, token)
        }
      } else {
        // !mathFunction
        if (muUnit) {
          throw new ParseError(`LaTeX's ${funcName} doesn't support mu units`, token)
        }
      }
    }
    return {
      type: "kern",
      mode: parser.mode,
      dimension: size.value
    };
  },
  mathmlBuilder(group, style) {
    const dimension = calculateSize(group.dimension, style);
    const ch = dimension.unit === "em" ? spaceCharacter(dimension.number) : "";
    if (group.mode === "text" && ch.length > 0) {
      const character = new mathMLTree.TextNode(ch);
      return new mathMLTree.MathNode("mtext", [character]);
    } else {
      const node = new mathMLTree.MathNode("mspace");
      node.setAttribute("width", dimension.number + dimension.unit);
      if (dimension.number < 0) {
        node.style.marginLeft = dimension.number + dimension.unit;
      }
      return node;
    }
  }
});

const spaceCharacter = function(width) {
  if (width >= 0.05555 && width <= 0.05556) {
    return "\u200a"; // &VeryThinSpace;
  } else if (width >= 0.1666 && width <= 0.1667) {
    return "\u2009"; // &ThinSpace;
  } else if (width >= 0.2222 && width <= 0.2223) {
    return "\u2005"; // &MediumSpace;
  } else if (width >= 0.2777 && width <= 0.2778) {
    return "\u2005\u200a"; // &ThickSpace;
  } else {
    return "";
  }
};

// Limit valid characters to a small set, for safety.
const invalidIdRegEx = /[^A-Za-z_0-9-]/g;

defineFunction({
  type: "label",
  names: ["\\label"],
  props: {
    numArgs: 1,
    argTypes: ["raw"]
  },
  handler({ parser }, args) {
    return {
      type: "label",
      mode: parser.mode,
      string: args[0].string.replace(invalidIdRegEx, "")
    };
  },
  mathmlBuilder(group, style) {
    // Return a no-width, no-ink element with an HTML id.
    const node = new mathMLTree.MathNode("mrow", [], ["tml-label"]);
    if (group.string.length > 0) {
      node.setLabel(group.string);
    }
    return node
  }
});

// Horizontal overlap functions

const textModeLap = ["\\clap", "\\llap", "\\rlap"];

defineFunction({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap", "\\clap", "\\llap", "\\rlap"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: ({ parser, funcName, token }, args) => {
    if (textModeLap.includes(funcName)) {
      if (parser.settings.strict && parser.mode !== "text") {
        throw new ParseError(`{${funcName}} can be used only in text mode.
 Try \\math${funcName.slice(1)}`, token)
      }
      funcName = funcName.slice(1);
    } else {
      funcName = funcName.slice(5);
    }
    const body = args[0];
    return {
      type: "lap",
      mode: parser.mode,
      alignment: funcName,
      body
    }
  },
  mathmlBuilder: (group, style) => {
    // mathllap, mathrlap, mathclap
    let strut;
    if (group.alignment === "llap") {
      // We need an invisible strut with the same depth as the group.
      // We can't just read the depth, so we use \vphantom methods.
      const phantomInner = buildExpression(ordargument(group.body), style);
      const phantom = new mathMLTree.MathNode("mphantom", phantomInner);
      strut = new mathMLTree.MathNode("mpadded", [phantom]);
      strut.setAttribute("width", "0px");
    }

    const inner = buildGroup$1(group.body, style);
    let node;
    if (group.alignment === "llap") {
      inner.style.position = "absolute";
      inner.style.right = "0";
      inner.style.bottom = `0`; // If we could have read the ink depth, it would go here.
      node = new mathMLTree.MathNode("mpadded", [strut, inner]);
    } else {
      node = new mathMLTree.MathNode("mpadded", [inner]);
    }

    if (group.alignment === "rlap") {
      if (group.body.body.length > 0 && group.body.body[0].type === "genfrac") {
        // In Firefox, a <mpadded> squashes the 3/18em padding of a child \frac. Put it back.
        node.setAttribute("lspace", "0.16667em");
      }
    } else {
      const offset = group.alignment === "llap" ? "-1" : "-0.5";
      node.setAttribute("lspace", offset + "width");
      if (group.alignment === "llap") {
        node.style.position = "relative";
      } else {
        node.style.display = "flex";
        node.style.justifyContent = "center";
      }
    }
    node.setAttribute("width", "0px");
    return node
  }
});

// Switching from text mode back to math mode
defineFunction({
  type: "ordgroup",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler({ funcName, parser }, args) {
    const outerMode = parser.mode;
    parser.switchMode("math");
    const close = funcName === "\\(" ? "\\)" : "$";
    const body = parser.parseExpression(false, close);
    parser.expect(close);
    parser.switchMode(outerMode);
    return {
      type: "ordgroup",
      mode: parser.mode,
      body
    };
  }
});

// Check for extra closing math delimiters
defineFunction({
  type: "text", // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler(context, token) {
    throw new ParseError(`Mismatched ${context.funcName}`, token);
  }
});

const chooseStyle = (group, style) => {
  switch (style.level) {
    case StyleLevel.DISPLAY:       // 0
      return group.display;
    case StyleLevel.TEXT:          // 1
      return group.text;
    case StyleLevel.SCRIPT:        // 2
      return group.script;
    case StyleLevel.SCRIPTSCRIPT:  // 3
      return group.scriptscript;
    default:
      return group.text;
  }
};

defineFunction({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: true
  },
  handler: ({ parser }, args) => {
    return {
      type: "mathchoice",
      mode: parser.mode,
      display: ordargument(args[0]),
      text: ordargument(args[1]),
      script: ordargument(args[2]),
      scriptscript: ordargument(args[3])
    };
  },
  mathmlBuilder: (group, style) => {
    const body = chooseStyle(group, style);
    return buildExpressionRow(body, style);
  }
});

const textAtomTypes = ["text", "textord", "mathord", "atom"];

function mathmlBuilder$3(group, style) {
  let node;
  const inner = buildExpression(group.body, style);

  if (group.mclass === "minner") {
    node = new mathMLTree.MathNode("mpadded", inner);
  } else if (group.mclass === "mord") {
    if (group.isCharacterBox || inner[0].type === "mathord") {
      node = inner[0];
      node.type = "mi";
      if (node.children.length === 1 && node.children[0].text && node.children[0].text === "∇") {
        node.setAttribute("mathvariant", "normal");
      }
    } else {
      node = new mathMLTree.MathNode("mi", inner);
    }
  } else {
    node = new mathMLTree.MathNode("mrow", inner);
    if (group.mustPromote) {
      node = inner[0];
      node.type = "mo";
      if (group.isCharacterBox && group.body[0].text && /[A-Za-z]/.test(group.body[0].text)) {
        node.setAttribute("mathvariant", "italic");
      }
    } else {
      node = new mathMLTree.MathNode("mrow", inner);
    }

    // Set spacing based on what is the most likely adjacent atom type.
    // See TeXbook p170.
    const doSpacing = style.level < 2; // Operator spacing is zero inside a (sub|super)script.
    if (node.type === "mrow") {
      if (doSpacing ) {
        if (group.mclass === "mbin") {
          // medium space
          node.children.unshift(padding$1(0.2222));
          node.children.push(padding$1(0.2222));
        } else if (group.mclass === "mrel") {
          // thickspace
          node.children.unshift(padding$1(0.2778));
          node.children.push(padding$1(0.2778));
        } else if (group.mclass === "mpunct") {
          node.children.push(padding$1(0.1667));
        } else if (group.mclass === "minner") {
          node.children.unshift(padding$1(0.0556));  // 1 mu is the most likely option
          node.children.push(padding$1(0.0556));
        }
      }
    } else {
      if (group.mclass === "mbin") {
        // medium space
        node.attributes.lspace = (doSpacing ? "0.2222em" : "0");
        node.attributes.rspace = (doSpacing ? "0.2222em" : "0");
      } else if (group.mclass === "mrel") {
        // thickspace
        node.attributes.lspace = (doSpacing ? "0.2778em" : "0");
        node.attributes.rspace = (doSpacing ? "0.2778em" : "0");
      } else if (group.mclass === "mpunct") {
        node.attributes.lspace = "0em";
        node.attributes.rspace = (doSpacing ? "0.1667em" : "0");
      } else if (group.mclass === "mopen" || group.mclass === "mclose") {
        node.attributes.lspace = "0em";
        node.attributes.rspace = "0em";
      } else if (group.mclass === "minner" && doSpacing) {
        node.attributes.lspace = "0.0556em"; // 1 mu is the most likely option
        node.attributes.width = "+0.1111em";
      }
    }

    if (!(group.mclass === "mopen" || group.mclass === "mclose")) {
      delete node.attributes.stretchy;
      delete node.attributes.form;
    }
  }
  return node;
}

// Math class commands except \mathop
defineFunction({
  type: "mclass",
  names: [
    "\\mathord",
    "\\mathbin",
    "\\mathrel",
    "\\mathopen",
    "\\mathclose",
    "\\mathpunct",
    "\\mathinner"
  ],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler({ parser, funcName }, args) {
    const body = args[0];
    const isCharacterBox = utils.isCharacterBox(body);
    // We should not wrap a <mo> around a <mi> or <mord>. That would be invalid MathML.
    // In that case, we instead promote the text contents of the body to the parent.
    let mustPromote = true;
    const mord = { type: "mathord", text: "", mode: parser.mode };
    const arr = (body.body) ? body.body : [body];
    for (const arg of arr) {
      if (textAtomTypes.includes(arg.type)) {
        if (symbols[parser.mode][arg.text]) {
          mord.text += symbols[parser.mode][arg.text].replace;
        } else if (arg.text) {
          mord.text += arg.text;
        } else if (arg.body) {
          arg.body.map(e => { mord.text += e.text; });
        }
      } else {
        mustPromote = false;
        break
      }
    }
    if (mustPromote && funcName === "\\mathord" && mord.type === "mathord"
                    && mord.text.length > 1) {
      return mord
    } else {
      return {
        type: "mclass",
        mode: parser.mode,
        mclass: "m" + funcName.slice(5),
        body: ordargument(mustPromote ? mord : body),
        isCharacterBox,
        mustPromote
      };
    }
  },
  mathmlBuilder: mathmlBuilder$3
});

const binrelClass = (arg) => {
  // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
  // (by rendering separately and with {}s before and after, and measuring
  // the change in spacing).  We'll do roughly the same by detecting the
  // atom type directly.
  const atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;
  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
    return "m" + atom.family;
  } else {
    return "mord";
  }
};

// \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.
defineFunction({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler({ parser }, args) {
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[1]),
      isCharacterBox: utils.isCharacterBox(args[1])
    };
  }
});

// Build a relation or stacked op by placing one symbol on top of another
defineFunction({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler({ parser, funcName }, args) {
    const baseArg = args[1];
    const shiftedArg = args[0];

    const baseOp = {
      type: "op",
      mode: baseArg.mode,
      limits: true,
      alwaysHandleSupSub: true,
      parentIsSupSub: false,
      symbol: false,
      stack: true,
      suppressBaseShift: funcName !== "\\stackrel",
      body: ordargument(baseArg)
    };

    return {
      type: "supsub",
      mode: shiftedArg.mode,
      base: baseOp,
      sup: funcName === "\\underset" ? null : shiftedArg,
      sub: funcName === "\\underset" ? shiftedArg : null
    };
  },
  mathmlBuilder: mathmlBuilder$3
});

// Helper function
const buildGroup = (el, style, noneNode) => {
  if (!el) { return noneNode }
  const node = buildGroup$1(el, style);
  if (node.type === "mrow" && node.children.length === 0) { return noneNode }
  return node
};

defineFunction({
  type: "multiscript",
  names: ["\\sideset", "\\pres@cript"], // See macros.js for \prescript
  props: {
    numArgs: 3
  },
  handler({ parser, funcName, token }, args) {
    if (args[2].body.length === 0) {
      throw new ParseError(funcName + `cannot parse an empty base.`)
    }
    const base = args[2].body[0];
    if (parser.settings.strict && funcName === "\\sideset" && !base.symbol) {
      throw new ParseError(`The base of \\sideset must be a big operator. Try \\prescript.`)
    }

    if ((args[0].body.length > 0 && args[0].body[0].type !== "supsub") ||
        (args[1].body.length > 0 && args[1].body[0].type !== "supsub")) {
      throw new ParseError("\\sideset can parse only subscripts and " +
                            "superscripts in its first two arguments", token)
    }

    // The prescripts and postscripts come wrapped in a supsub.
    const prescripts = args[0].body.length > 0 ? args[0].body[0] : null;
    const postscripts = args[1].body.length > 0 ? args[1].body[0] : null;

    if (!prescripts && !postscripts) {
      return base
    } else if (!prescripts) {
      // It's not a multi-script. Get a \textstyle supsub.
      return {
        type: "styling",
        mode: parser.mode,
        scriptLevel: "text",
        body: [{
          type: "supsub",
          mode: parser.mode,
          base,
          sup: postscripts.sup,
          sub: postscripts.sub
        }]
      }
    } else {
      return {
        type: "multiscript",
        mode: parser.mode,
        isSideset: funcName === "\\sideset",
        prescripts,
        postscripts,
        base
      }
    }
  },
  mathmlBuilder(group, style) {
    const base =  buildGroup$1(group.base, style);

    const prescriptsNode = new mathMLTree.MathNode("mprescripts");
    const noneNode = new mathMLTree.MathNode("none");
    let children = [];

    const preSub = buildGroup(group.prescripts.sub, style, noneNode);
    const preSup = buildGroup(group.prescripts.sup, style, noneNode);
    if (group.isSideset) {
      // This seems silly, but LaTeX does this. Firefox ignores it, which does not make me sad.
      preSub.setAttribute("style", "text-align: left;");
      preSup.setAttribute("style", "text-align: left;");
    }

    if (group.postscripts) {
      const postSub = buildGroup(group.postscripts.sub, style, noneNode);
      const postSup = buildGroup(group.postscripts.sup, style, noneNode);
      children = [base, postSub, postSup, prescriptsNode, preSub, preSup];
    } else {
      children = [base, prescriptsNode, preSub, preSup];
    }

    return new mathMLTree.MathNode("mmultiscripts", children);
  }
});

defineFunction({
  type: "not",
  names: ["\\not"],
  props: {
    numArgs: 1,
    primitive: true,
    allowedInText: false
  },
  handler({ parser }, args) {
    const isCharacterBox = utils.isCharacterBox(args[0]);
    let body;
    if (isCharacterBox) {
      body = ordargument(args[0]);
      if (body[0].text.charAt(0) === "\\") {
        body[0].text = symbols.math[body[0].text].replace;
      }
      // \u0338 is the Unicode Combining Long Solidus Overlay
      body[0].text = body[0].text.slice(0, 1) + "\u0338" + body[0].text.slice(1);
    } else {
      // When the argument is not a character box, TeX does an awkward, poorly placed overlay.
      // We'll do the same.
      const notNode = { type: "textord", mode: "math", text: "\u0338" };
      const kernNode = { type: "kern", mode: "math", dimension: { number: -0.6, unit: "em" } };
      body = [notNode, kernNode, args[0]];
    }
    return {
      type: "not",
      mode: parser.mode,
      body,
      isCharacterBox
    };
  },
  mathmlBuilder(group, style) {
    if (group.isCharacterBox) {
      const inner = buildExpression(group.body, style, true);
      return inner[0]
    } else {
      return buildExpressionRow(group.body, style)
    }
  }
});

// Limits, symbols

// Some helpers

const ordAtomTypes = ["textord", "mathord", "atom"];

// Most operators have a large successor symbol, but these don't.
const noSuccessor = ["\\smallint"];

// Math operators (e.g. \sin) need a space between these types and themselves:
const ordTypes = ["textord", "mathord", "ordgroup", "close", "leftright", "font"];

// NOTE: Unlike most `builders`s, this one handles not only "op", but also
// "supsub" since some of them (like \int) can affect super/subscripting.

const setSpacing = node => {
  // The user wrote a \mathop{…} function. Change spacing from default to OP spacing.
  // The most likely spacing for an OP is a thin space per TeXbook p170.
  node.attributes.lspace = "0.1667em";
  node.attributes.rspace = "0.1667em";
};

const mathmlBuilder$2 = (group, style) => {
  let node;

  if (group.symbol) {
    // This is a symbol. Just add the symbol.
    node = new MathNode("mo", [makeText(group.name, group.mode)]);
    if (noSuccessor.includes(group.name)) {
      node.setAttribute("largeop", "false");
    } else {
      node.setAttribute("movablelimits", "false");
    }
    if (group.fromMathOp) { setSpacing(node); }
  } else if (group.body) {
    // This is an operator with children. Add them.
    node = new MathNode("mo", buildExpression(group.body, style));
    if (group.fromMathOp) { setSpacing(node); }
  } else {
    // This is a text operator. Add all of the characters from the operator's name.
    node = new MathNode("mi", [new TextNode(group.name.slice(1))]);

    if (!group.parentIsSupSub) {
      // Append an invisible <mo>&ApplyFunction;</mo>.
      // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4
      const operator = new MathNode("mo", [makeText("\u2061", "text")]);
      const row = [node, operator];
      // Set spacing
      if (group.needsLeadingSpace) {
        const lead = new MathNode("mspace");
        lead.setAttribute("width", "0.1667em"); // thin space.
        row.unshift(lead);
      }
      if (!group.isFollowedByDelimiter) {
        const trail = new MathNode("mspace");
        trail.setAttribute("width", "0.1667em"); // thin space.
        row.push(trail);
      }
      node = new MathNode("mrow", row);
    }
  }

  return node;
};

const singleCharBigOps = {
  "\u220F": "\\prod",
  "\u2210": "\\coprod",
  "\u2211": "\\sum",
  "\u22c0": "\\bigwedge",
  "\u22c1": "\\bigvee",
  "\u22c2": "\\bigcap",
  "\u22c3": "\\bigcup",
  "\u2a00": "\\bigodot",
  "\u2a01": "\\bigoplus",
  "\u2a02": "\\bigotimes",
  "\u2a04": "\\biguplus",
  "\u2a05": "\\bigsqcap",
  "\u2a06": "\\bigsqcup",
  "\u2a03": "\\bigcupdot",
  "\u2a07": "\\bigdoublevee",
  "\u2a08": "\\bigdoublewedge",
  "\u2a09": "\\bigtimes"
};

defineFunction({
  type: "op",
  names: [
    "\\coprod",
    "\\bigvee",
    "\\bigwedge",
    "\\biguplus",
    "\\bigcupplus",
    "\\bigcupdot",
    "\\bigcap",
    "\\bigcup",
    "\\bigdoublevee",
    "\\bigdoublewedge",
    "\\intop",
    "\\prod",
    "\\sum",
    "\\bigotimes",
    "\\bigoplus",
    "\\bigodot",
    "\\bigsqcap",
    "\\bigsqcup",
    "\\bigtimes",
    "\\smallint",
    "\u220F",
    "\u2210",
    "\u2211",
    "\u22c0",
    "\u22c1",
    "\u22c2",
    "\u22c3",
    "\u2a00",
    "\u2a01",
    "\u2a02",
    "\u2a03",
    "\u2a04",
    "\u2a05",
    "\u2a06",
    "\u2a07",
    "\u2a08",
    "\u2a09"
  ],
  props: {
    numArgs: 0
  },
  handler: ({ parser, funcName }, args) => {
    let fName = funcName;
    if (fName.length === 1) {
      fName = singleCharBigOps[fName];
    }
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: true,
      stack: false, // This is true for \stackrel{}, not here.
      name: fName
    };
  },
  mathmlBuilder: mathmlBuilder$2
});

// Note: calling defineFunction with a type that's already been defined only
// works because the same mathmlBuilder is being used.
defineFunction({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: ({ parser }, args) => {
    const body = args[0];
    // It would be convienient to just wrap a <mo> around the argument.
    // But if the argument is a <mi> or <mord>, that would be invalid MathML.
    // In that case, we instead promote the text contents of the body to the parent.
    const arr = (body.body) ? body.body : [body];
    const isSymbol = arr.length === 1 && ordAtomTypes.includes(arr[0].type);
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: isSymbol,
      fromMathOp: true,
      stack: false,
      name: isSymbol ? arr[0].text : null,
      body: isSymbol ? null : ordargument(body)
    };
  },
  mathmlBuilder: mathmlBuilder$2
});

// There are 2 flags for operators; whether they produce limits in
// displaystyle, and whether they are symbols and should grow in
// displaystyle. These four groups cover the four possible choices.

const singleCharIntegrals = {
  "\u222b": "\\int",
  "\u222c": "\\iint",
  "\u222d": "\\iiint",
  "\u222e": "\\oint",
  "\u222f": "\\oiint",
  "\u2230": "\\oiiint",
  "\u2231": "\\intclockwise",
  "\u2232": "\\varointclockwise",
  "\u2a0c": "\\iiiint",
  "\u2a0d": "\\intbar",
  "\u2a0e": "\\intBar",
  "\u2a0f": "\\fint",
  "\u2a12": "\\rppolint",
  "\u2a13": "\\scpolint",
  "\u2a15": "\\pointint",
  "\u2a16": "\\sqint",
  "\u2a17": "\\intlarhk",
  "\u2a18": "\\intx",
  "\u2a19": "\\intcap",
  "\u2a1a": "\\intcup"
};

// No limits, not symbols
defineFunction({
  type: "op",
  names: [
    "\\arcsin",
    "\\arccos",
    "\\arctan",
    "\\arctg",
    "\\arcctg",
    "\\arg",
    "\\ch",
    "\\cos",
    "\\cosec",
    "\\cosh",
    "\\cot",
    "\\cotg",
    "\\coth",
    "\\csc",
    "\\ctg",
    "\\cth",
    "\\deg",
    "\\dim",
    "\\exp",
    "\\hom",
    "\\ker",
    "\\lg",
    "\\ln",
    "\\log",
    "\\sec",
    "\\sin",
    "\\sinh",
    "\\sh",
    "\\sgn",
    "\\tan",
    "\\tanh",
    "\\tg",
    "\\th"
  ],
  props: {
    numArgs: 0
  },
  handler({ parser, funcName }) {
    const prevAtomType = parser.prevAtomType;
    const next = parser.gullet.future().text;
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      stack: false,
      isFollowedByDelimiter: isDelimiter(next),
      needsLeadingSpace: prevAtomType.length > 0 && ordTypes.includes(prevAtomType),
      name: funcName
    };
  },
  mathmlBuilder: mathmlBuilder$2
});

// Limits, not symbols
defineFunction({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler({ parser, funcName }) {
    const prevAtomType = parser.prevAtomType;
    const next = parser.gullet.future().text;
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: false,
      stack: false,
      isFollowedByDelimiter: isDelimiter(next),
      needsLeadingSpace: prevAtomType.length > 0 && ordTypes.includes(prevAtomType),
      name: funcName
    };
  },
  mathmlBuilder: mathmlBuilder$2
});

// No limits, symbols
defineFunction({
  type: "op",
  names: [
    "\\int",
    "\\iint",
    "\\iiint",
    "\\iiiint",
    "\\oint",
    "\\oiint",
    "\\oiiint",
    "\\intclockwise",
    "\\varointclockwise",
    "\\intbar",
    "\\intBar",
    "\\fint",
    "\\rppolint",
    "\\scpolint",
    "\\pointint",
    "\\sqint",
    "\\intlarhk",
    "\\intx",
    "\\intcap",
    "\\intcup",
    "\u222b",
    "\u222c",
    "\u222d",
    "\u222e",
    "\u222f",
    "\u2230",
    "\u2231",
    "\u2232",
    "\u2a0c",
    "\u2a0d",
    "\u2a0e",
    "\u2a0f",
    "\u2a12",
    "\u2a13",
    "\u2a15",
    "\u2a16",
    "\u2a17",
    "\u2a18",
    "\u2a19",
    "\u2a1a"
  ],
  props: {
    numArgs: 0
  },
  handler({ parser, funcName }) {
    let fName = funcName;
    if (fName.length === 1) {
      fName = singleCharIntegrals[fName];
    }
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: true,
      stack: false,
      name: fName
    };
  },
  mathmlBuilder: mathmlBuilder$2
});

// NOTE: Unlike most builders, this one handles not only
// "operatorname", but also  "supsub" since \operatorname* can
// affect super/subscripting.

const mathmlBuilder$1 = (group, style) => {
  let expression = buildExpression(group.body, style.withFont("mathrm"));

  // Is expression a string or has it something like a fraction?
  let isAllString = true; // default
  for (let i = 0; i < expression.length; i++) {
    let node = expression[i];
    if (node instanceof mathMLTree.MathNode) {
      if ((node.type === "mrow" || node.type === "mpadded") && node.children.length === 1 &&
          node.children[0] instanceof mathMLTree.MathNode) {
        node = node.children[0];
      }
      switch (node.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mtext":
          break; // Do nothing yet.
        case "mspace":
          {
            if (node.attributes.width) {
              const width = node.attributes.width.replace("em", "");
              const ch = spaceCharacter(Number(width));
              if (ch === "") {
                isAllString = false;
              } else {
                expression[i] = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode(ch)]);
              }
            }
          }
          break
        case "mo": {
          const child = node.children[0];
          if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
            child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
          } else {
            isAllString = false;
          }
          break
        }
        default:
          isAllString = false;
      }
    } else {
      isAllString = false;
    }
  }

  if (isAllString) {
    // Write a single TextNode instead of multiple nested tags.
    const word = expression.map((node) => node.toText()).join("");
    expression = [new mathMLTree.TextNode(word)];
  } else if (
    expression.length === 1
    && ["mover", "munder"].includes(expression[0].type) &&
    (expression[0].children[0].type === "mi" || expression[0].children[0].type === "mtext")
  ) {
    expression[0].children[0].type = "mi";
    if (group.parentIsSupSub) {
      return new mathMLTree.MathNode("mrow", expression)
    } else {
      const operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);
      return mathMLTree.newDocumentFragment([expression[0], operator])
    }
  }

  let wrapper;
  if (isAllString) {
    wrapper = new mathMLTree.MathNode("mi", expression);
    if (expression[0].text.length === 1) {
      wrapper.setAttribute("mathvariant", "normal");
    }
  } else {
    wrapper = new mathMLTree.MathNode("mrow", expression);
  }

  if (!group.parentIsSupSub) {
    // Append an <mo>&ApplyFunction;</mo>.
    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4
    const operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);
    const fragment = [wrapper, operator];
    if (group.needsLeadingSpace) {
      // LaTeX gives operator spacing, but a <mi> gets ord spacing.
      // So add a leading space.
      const space = new mathMLTree.MathNode("mspace");
      space.setAttribute("width", "0.1667em"); // thin space.
      fragment.unshift(space);
    }
    if (!group.isFollowedByDelimiter) {
      const trail = new mathMLTree.MathNode("mspace");
      trail.setAttribute("width", "0.1667em"); // thin space.
      fragment.push(trail);
    }
    return mathMLTree.newDocumentFragment(fragment)
  }

  return wrapper
};

// \operatorname
// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@
defineFunction({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1,
    allowedInArgument: true
  },
  handler: ({ parser, funcName }, args) => {
    const body = args[0];
    const prevAtomType = parser.prevAtomType;
    const next = parser.gullet.future().text;
    return {
      type: "operatorname",
      mode: parser.mode,
      body: ordargument(body),
      alwaysHandleSupSub: (funcName === "\\operatornamewithlimits"),
      limits: false,
      parentIsSupSub: false,
      isFollowedByDelimiter: isDelimiter(next),
      needsLeadingSpace: prevAtomType.length > 0 && ordTypes.includes(prevAtomType)
    };
  },
  mathmlBuilder: mathmlBuilder$1
});

defineMacro("\\operatorname",
  "\\@ifstar\\operatornamewithlimits\\operatorname@");

defineFunctionBuilders({
  type: "ordgroup",
  mathmlBuilder(group, style) {
    return buildExpressionRow(group.body, style, group.semisimple);
  }
});

defineFunction({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: ({ parser }, args) => {
    const body = args[0];
    return {
      type: "phantom",
      mode: parser.mode,
      body: ordargument(body)
    };
  },
  mathmlBuilder: (group, style) => {
    const inner = buildExpression(group.body, style);
    return new mathMLTree.MathNode("mphantom", inner);
  }
});

defineFunction({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: ({ parser }, args) => {
    const body = args[0];
    return {
      type: "hphantom",
      mode: parser.mode,
      body
    };
  },
  mathmlBuilder: (group, style) => {
    const inner = buildExpression(ordargument(group.body), style);
    const phantom = new mathMLTree.MathNode("mphantom", inner);
    const node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("height", "0px");
    node.setAttribute("depth", "0px");
    return node;
  }
});

defineFunction({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: ({ parser }, args) => {
    const body = args[0];
    return {
      type: "vphantom",
      mode: parser.mode,
      body
    };
  },
  mathmlBuilder: (group, style) => {
    const inner = buildExpression(ordargument(group.body), style);
    const phantom = new mathMLTree.MathNode("mphantom", inner);
    const node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("width", "0px");
    return node;
  }
});

// In LaTeX, \pmb is a simulation of bold font.
// The version of \pmb in ambsy.sty works by typesetting three copies of the argument
// with small offsets. We use CSS font-weight:bold.

defineFunction({
  type: "pmb",
  names: ["\\pmb"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler({ parser }, args) {
    return {
      type: "pmb",
      mode: parser.mode,
      body: ordargument(args[0])
    }
  },
  mathmlBuilder(group, style) {
    const inner = buildExpression(group.body, style);
    // Wrap with an <mstyle> element.
    const node = wrapWithMstyle(inner);
    node.setAttribute("style", "font-weight:bold");
    return node
  }
});

// \raise, \lower, and \raisebox

const mathmlBuilder = (group, style) => {
  const newStyle = style.withLevel(StyleLevel.TEXT);
  const node = new mathMLTree.MathNode("mpadded", [buildGroup$1(group.body, newStyle)]);
  const dy = calculateSize(group.dy, style);
  node.setAttribute("voffset", dy.number + dy.unit);
  // Add padding, which acts to increase height in Chromium.
  // TODO: Figure out some way to change height in Firefox w/o breaking Chromium.
  if (dy.number > 0) {
    node.style.padding = dy.number + dy.unit + " 0 0 0";
  } else {
    node.style.padding = "0 0 " + Math.abs(dy.number) + dy.unit + " 0";
  }
  return node
};

defineFunction({
  type: "raise",
  names: ["\\raise", "\\lower"],
  props: {
    numArgs: 2,
    argTypes: ["size", "primitive"],
    primitive: true
  },
  handler({ parser, funcName }, args) {
    const amount = assertNodeType(args[0], "size").value;
    if (funcName === "\\lower") { amount.number *= -1; }
    const body = args[1];
    return {
      type: "raise",
      mode: parser.mode,
      dy: amount,
      body
    };
  },
  mathmlBuilder
});


defineFunction({
  type: "raise",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: true
  },
  handler({ parser, funcName }, args) {
    const amount = assertNodeType(args[0], "size").value;
    const body = args[1];
    return {
      type: "raise",
      mode: parser.mode,
      dy: amount,
      body
    };
  },
  mathmlBuilder
});

defineFunction({
  type: "ref",
  names: ["\\ref", "\\eqref"],
  props: {
    numArgs: 1,
    argTypes: ["raw"]
  },
  handler({ parser, funcName }, args) {
    return {
      type: "ref",
      mode: parser.mode,
      funcName,
      string: args[0].string.replace(invalidIdRegEx, "")
    };
  },
  mathmlBuilder(group, style) {
    // Create an empty <a> node. Set a class and an href attribute.
    // The post-processor will populate with the target's tag or equation number.
    const classes = group.funcName === "\\ref" ? ["tml-ref"] : ["tml-ref", "tml-eqref"];
    return new AnchorNode("#" + group.string, classes, null)
  }
});

defineFunction({
  type: "reflect",
  names: ["\\reflectbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: true
  },
  handler({ parser }, args) {
    return {
      type: "reflect",
      mode: parser.mode,
      body: args[0]
    };
  },
  mathmlBuilder(group, style) {
    const node = buildGroup$1(group.body, style);
    node.style.transform = "scaleX(-1)";
    return node
  }
});

defineFunction({
  type: "internal",
  names: ["\\relax"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler({ parser }) {
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});

defineFunction({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    argTypes: ["size", "size", "size"]
  },
  handler({ parser }, args, optArgs) {
    const shift = optArgs[0];
    const width = assertNodeType(args[0], "size");
    const height = assertNodeType(args[1], "size");
    return {
      type: "rule",
      mode: parser.mode,
      shift: shift && assertNodeType(shift, "size").value,
      width: width.value,
      height: height.value
    };
  },
  mathmlBuilder(group, style) {
    const width = calculateSize(group.width, style);
    const height = calculateSize(group.height, style);
    const shift = group.shift
      ? calculateSize(group.shift, style)
      : { number: 0, unit: "em" };
    const color = (style.color && style.getColor()) || "black";

    const rule = new mathMLTree.MathNode("mspace");
    if (width.number > 0 && height.number > 0) {
      rule.setAttribute("mathbackground", color);
    }
    rule.setAttribute("width", width.number + width.unit);
    rule.setAttribute("height", height.number + height.unit);
    if (shift.number === 0) { return rule }

    const wrapper = new mathMLTree.MathNode("mpadded", [rule]);
    if (shift.number >= 0) {
      wrapper.setAttribute("height", "+" + shift.number + shift.unit);
    } else {
      wrapper.setAttribute("height", shift.number + shift.unit);
      wrapper.setAttribute("depth", "+" + -shift.number + shift.unit);
    }
    wrapper.setAttribute("voffset", shift.number + shift.unit);
    return wrapper;
  }
});

// The size mappings are taken from TeX with \normalsize=10pt.
// We don't have to track script level. MathML does that.
const sizeMap = {
  "\\tiny": 0.5,
  "\\sixptsize": 0.6,
  "\\Tiny": 0.6,
  "\\scriptsize": 0.7,
  "\\footnotesize": 0.8,
  "\\small": 0.9,
  "\\normalsize": 1.0,
  "\\large": 1.2,
  "\\Large": 1.44,
  "\\LARGE": 1.728,
  "\\huge": 2.074,
  "\\Huge": 2.488
};

defineFunction({
  type: "sizing",
  names: [
    "\\tiny",
    "\\sixptsize",
    "\\Tiny",
    "\\scriptsize",
    "\\footnotesize",
    "\\small",
    "\\normalsize",
    "\\large",
    "\\Large",
    "\\LARGE",
    "\\huge",
    "\\Huge"
  ],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: ({ breakOnTokenText, funcName, parser }, args) => {
    if (parser.settings.strict && parser.mode === "math") {
      // eslint-disable-next-line no-console
      console.log(`Temml strict-mode warning: Command ${funcName} is invalid in math mode.`);
    }
    const body = parser.parseExpression(false, breakOnTokenText, true);
    return {
      type: "sizing",
      mode: parser.mode,
      funcName,
      body
    };
  },
  mathmlBuilder: (group, style) => {
    const newStyle = style.withFontSize(sizeMap[group.funcName]);
    const inner = buildExpression(group.body, newStyle);
    // Wrap with an <mstyle> element.
    const node = wrapWithMstyle(inner);
    const factor = (sizeMap[group.funcName] / style.fontSize).toFixed(4);
    node.setAttribute("mathsize", factor + "em");
    return node;
  }
});

// smash, with optional [tb], as in AMS

defineFunction({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: true
  },
  handler: ({ parser }, args, optArgs) => {
    let smashHeight = false;
    let smashDepth = false;
    const tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");
    if (tbArg) {
      // Optional [tb] argument is engaged.
      // ref: amsmath: \renewcommand{\smash}[1][tb]{%
      //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
      let letter = "";
      for (let i = 0; i < tbArg.body.length; ++i) {
        const node = tbArg.body[i];
        // TODO: Write an AssertSymbolNode
        letter = node.text;
        if (letter === "t") {
          smashHeight = true;
        } else if (letter === "b") {
          smashDepth = true;
        } else {
          smashHeight = false;
          smashDepth = false;
          break;
        }
      }
    } else {
      smashHeight = true;
      smashDepth = true;
    }

    const body = args[0];
    return {
      type: "smash",
      mode: parser.mode,
      body,
      smashHeight,
      smashDepth
    };
  },
  mathmlBuilder: (group, style) => {
    const node = new mathMLTree.MathNode("mpadded", [buildGroup$1(group.body, style)]);

    if (group.smashHeight) {
      node.setAttribute("height", "0px");
    }

    if (group.smashDepth) {
      node.setAttribute("depth", "0px");
    }

    return node;
  }
});

defineFunction({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler({ parser }, args, optArgs) {
    const index = optArgs[0];
    const body = args[0];
    return {
      type: "sqrt",
      mode: parser.mode,
      body,
      index
    };
  },
  mathmlBuilder(group, style) {
    const { body, index } = group;
    return index
      ? new mathMLTree.MathNode("mroot", [
        buildGroup$1(body, style),
        buildGroup$1(index, style.incrementLevel())
      ])
    : new mathMLTree.MathNode("msqrt", [buildGroup$1(body, style)]);
  }
});

const styleMap = {
  display: 0,
  text: 1,
  script: 2,
  scriptscript: 3
};

const styleAttributes = {
  display: ["0", "true"],
  text: ["0", "false"],
  script: ["1", "false"],
  scriptscript: ["2", "false"]
};

defineFunction({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler({ breakOnTokenText, funcName, parser }, args) {
    // parse out the implicit body
    const body = parser.parseExpression(true, breakOnTokenText, true);

    const scriptLevel = funcName.slice(1, funcName.length - 5);
    return {
      type: "styling",
      mode: parser.mode,
      // Figure out what scriptLevel to use by pulling out the scriptLevel from
      // the function name
      scriptLevel,
      body
    };
  },
  mathmlBuilder(group, style) {
    // Figure out what scriptLevel we're changing to.
    const newStyle = style.withLevel(styleMap[group.scriptLevel]);
    // The style argument in the next line does NOT directly set a MathML script level.
    // It just tracks the style level, in case we need to know it for supsub or mathchoice.
    const inner = buildExpression(group.body, newStyle);
    // Wrap with an <mstyle> element.
    const node = wrapWithMstyle(inner);

    const attr = styleAttributes[group.scriptLevel];

    // Here is where we set the MathML script level.
    node.setAttribute("scriptlevel", attr[0]);
    node.setAttribute("displaystyle", attr[1]);

    return node;
  }
});

/**
 * Sometimes, groups perform special rules when they have superscripts or
 * subscripts attached to them. This function lets the `supsub` group know that
 * Sometimes, groups perform special rules when they have superscripts or
 * its inner element should handle the superscripts and subscripts instead of
 * handling them itself.
 */

// Helpers
const symbolRegEx = /^m(over|under|underover)$/;

// Super scripts and subscripts, whose precise placement can depend on other
// functions that precede them.
defineFunctionBuilders({
  type: "supsub",
  mathmlBuilder(group, style) {
    // Is the inner group a relevant horizontal brace?
    let isBrace = false;
    let isOver;
    let isSup;
    let appendApplyFunction = false;
    let appendSpace = false;
    let needsLeadingSpace = false;

    if (group.base && group.base.type === "horizBrace") {
      isSup = !!group.sup;
      if (isSup === group.base.isOver) {
        isBrace = true;
        isOver = group.base.isOver;
      }
    }

    if (group.base && !group.base.stack &&
      (group.base.type === "op" || group.base.type === "operatorname")) {
      group.base.parentIsSupSub = true;
      appendApplyFunction = !group.base.symbol;
      appendSpace = appendApplyFunction && !group.isFollowedByDelimiter;
      needsLeadingSpace = group.base.needsLeadingSpace;
    }

    const children = group.base && group.base.stack
      ? [buildGroup$1(group.base.body[0], style)]
      : [buildGroup$1(group.base, style)];

    // Note regarding scriptstyle level.
    // (Sub|super)scripts should not shrink beyond MathML scriptlevel 2 aka \scriptscriptstyle
    // Ref: https://w3c.github.io/mathml-core/#the-displaystyle-and-scriptlevel-attributes
    // (BTW, MathML scriptlevel 2 is equal to Temml level 3.)
    // But Chromium continues to shrink the (sub|super)scripts. So we explicitly set scriptlevel 2.

    const childStyle = style.inSubOrSup();
    if (group.sub) {
      const sub = buildGroup$1(group.sub, childStyle);
      if (style.level === 3) { sub.setAttribute("scriptlevel", "2"); }
      children.push(sub);
    }

    if (group.sup) {
      const sup = buildGroup$1(group.sup, childStyle);
      if (style.level === 3) { sup.setAttribute("scriptlevel", "2"); }
      const testNode = sup.type === "mrow" ? sup.children[0] : sup;
      if ((testNode && testNode.type === "mo" && testNode.classes.includes("tml-prime"))
        && group.base && group.base.text && "fF".indexOf(group.base.text) > -1) {
        // Chromium does not address italic correction on prime.  Prevent f′ from overlapping.
        testNode.classes.push("prime-pad");
      }
      children.push(sup);
    }

    let nodeType;
    if (isBrace) {
      nodeType = isOver ? "mover" : "munder";
    } else if (!group.sub) {
      const base = group.base;
      if (
        base &&
        base.type === "op" &&
        base.limits &&
        (style.level === StyleLevel.DISPLAY || base.alwaysHandleSupSub)
      ) {
        nodeType = "mover";
      } else if (
        base &&
        base.type === "operatorname" &&
        base.alwaysHandleSupSub &&
        (base.limits || style.level === StyleLevel.DISPLAY)
      ) {
        nodeType = "mover";
      } else {
        nodeType = "msup";
      }
    } else if (!group.sup) {
      const base = group.base;
      if (
        base &&
        base.type === "op" &&
        base.limits &&
        (style.level === StyleLevel.DISPLAY || base.alwaysHandleSupSub)
      ) {
        nodeType = "munder";
      } else if (
        base &&
        base.type === "operatorname" &&
        base.alwaysHandleSupSub &&
        (base.limits || style.level === StyleLevel.DISPLAY)
      ) {
        nodeType = "munder";
      } else {
        nodeType = "msub";
      }
    } else {
      const base = group.base;
      if (base && ((base.type === "op" && base.limits) || base.type === "multiscript") &&
        (style.level === StyleLevel.DISPLAY || base.alwaysHandleSupSub)
      ) {
        nodeType = "munderover";
      } else if (
        base &&
        base.type === "operatorname" &&
        base.alwaysHandleSupSub &&
        (style.level === StyleLevel.DISPLAY || base.limits)
      ) {
        nodeType = "munderover";
      } else {
        nodeType = "msubsup";
      }
    }

    let node = new mathMLTree.MathNode(nodeType, children);
    if (appendApplyFunction) {
      // Append an <mo>&ApplyFunction;</mo>.
      // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4
      const operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);
      if (needsLeadingSpace) {
        const space = new mathMLTree.MathNode("mspace");
        space.setAttribute("width", "0.1667em"); // thin space.
        node = mathMLTree.newDocumentFragment([space, node, operator]);
      } else {
        node = mathMLTree.newDocumentFragment([node, operator]);
      }
      if (appendSpace) {
        const space = new mathMLTree.MathNode("mspace");
        space.setAttribute("width", "0.1667em"); // thin space.
        node.children.push(space);
      }
    } else if (symbolRegEx.test(nodeType)) {
      // Wrap in a <mrow>. Otherwise Firefox stretchy parens will not stretch to include limits.
      node = new mathMLTree.MathNode("mrow", [node]);
    }

    return node
  }
});

// Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.

const short = ["\\shortmid", "\\nshortmid", "\\shortparallel",
  "\\nshortparallel", "\\smallsetminus"];

const arrows = ["\\Rsh", "\\Lsh", "\\restriction"];

const isArrow = str => {
  if (str.length === 1) {
    const codePoint = str.codePointAt(0);
    return (0x218f < codePoint && codePoint < 0x2200)
  }
  return str.indexOf("arrow") > -1 || str.indexOf("harpoon") > -1 || arrows.includes(str)
};

defineFunctionBuilders({
  type: "atom",
  mathmlBuilder(group, style) {
    const node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);
    if (group.family === "punct") {
      node.setAttribute("separator", "true");
    } else if (group.family === "open" || group.family === "close") {
      // Delims built here should not stretch vertically.
      // See delimsizing.js for stretchy delims.
      if (group.family === "open") {
        node.setAttribute("form", "prefix");
        // Set an explicit attribute for stretch. Otherwise Firefox may do it wrong.
        node.setAttribute("stretchy", "false");
      } else if (group.family === "close") {
        node.setAttribute("form", "postfix");
        node.setAttribute("stretchy", "false");
      }
    } else if (group.text === "\\mid") {
      // Firefox messes up this spacing if at the end of an <mrow>. See it explicitly.
      node.setAttribute("lspace", "0.22em"); // medium space
      node.setAttribute("rspace", "0.22em");
      node.setAttribute("stretchy", "false");
    } else if (group.family === "rel" && isArrow(group.text)) {
      node.setAttribute("stretchy", "false");
    } else if (short.includes(group.text)) {
      node.setAttribute("mathsize", "70%");
    } else if (group.text === ":") {
      // ":" is not in the MathML operator dictionary. Give it BIN spacing.
      node.attributes.lspace = "0.2222em";
      node.attributes.rspace = "0.2222em";
    } else if (group.needsSpacing) {
      // Fix a MathML bug that occurs when a <mo> is between two <mtext> elements.
      if (group.family === "bin") {
        return new mathMLTree.MathNode("mrow", [padding$1(0.222), node, padding$1(0.222)])
      } else {
        // REL spacing
        return new mathMLTree.MathNode("mrow", [padding$1(0.2778), node, padding$1(0.2778)])
      }
    }
    return node;
  }
});

/**
 * Maps TeX font commands to "mathvariant" attribute in buildMathML.js
 */
const fontMap = {
  // styles
  mathbf: "bold",
  mathrm: "normal",
  textit: "italic",
  mathit: "italic",
  mathnormal: "italic",

  // families
  mathbb: "double-struck",
  mathcal: "script",
  mathfrak: "fraktur",
  mathscr: "script",
  mathsf: "sans-serif",
  mathtt: "monospace"
};

/**
 * Returns the math variant as a string or null if none is required.
 */
const getVariant = function(group, style) {
  // Handle font specifiers as best we can.
  // Chromium does not support the MathML mathvariant attribute.
  // So we'll use Unicode replacement characters instead.
  // But first, determine the math variant.

  // Deal with the \textit, \textbf, etc., functions.
  if (style.fontFamily === "texttt") {
    return "monospace"
  } else if (style.fontFamily === "textsc") {
    return "normal"; // handled via character substitution in symbolsOrd.js.
  } else if (style.fontFamily === "textsf") {
    if (style.fontShape === "textit" && style.fontWeight === "textbf") {
      return "sans-serif-bold-italic"
    } else if (style.fontShape === "textit") {
      return "sans-serif-italic"
    } else if (style.fontWeight === "textbf") {
      return "sans-serif-bold"
    } else {
      return "sans-serif"
    }
  } else if (style.fontShape === "textit" && style.fontWeight === "textbf") {
    return "bold-italic"
  } else if (style.fontShape === "textit") {
    return "italic"
  } else if (style.fontWeight === "textbf") {
    return "bold"
  }

  // Deal with the \mathit, mathbf, etc, functions.
  const font = style.font;
  if (!font || font === "mathnormal") {
    return null
  }

  const mode = group.mode;
  switch (font) {
    case "mathit":
      return "italic"
    case "mathrm": {
      const codePoint = group.text.codePointAt(0);
      // LaTeX \mathrm returns italic for Greek characters.
      return  (0x03ab < codePoint && codePoint < 0x03cf) ? "italic" : "normal"
    }
    case "greekItalic":
      return "italic"
    case "up@greek":
      return "normal"
    case "boldsymbol":
    case "mathboldsymbol":
      return "bold-italic"
    case "mathbf":
      return "bold"
    case "mathbb":
      return "double-struck"
    case "mathfrak":
      return "fraktur"
    case "mathscr":
    case "mathcal":
      return "script"
    case "mathsf":
      return "sans-serif"
    case "mathsfit":
      return "sans-serif-italic"
    case "mathtt":
      return "monospace"
  }

  let text = group.text;
  if (symbols[mode][text] && symbols[mode][text].replace) {
    text = symbols[mode][text].replace;
  }

  return Object.prototype.hasOwnProperty.call(fontMap, font) ? fontMap[font] : null
};

// Chromium does not support the MathML `mathvariant` attribute.
// Instead, we replace ASCII characters with Unicode characters that
// are defined in the font as bold, italic, double-struck, etc.
// This module identifies those Unicode code points.

// First, a few helpers.
const script = Object.freeze({
  B: 0x20EA, // Offset from ASCII B to Unicode script B
  E: 0x20EB,
  F: 0x20EB,
  H: 0x20C3,
  I: 0x20C7,
  L: 0x20C6,
  M: 0x20E6,
  R: 0x20C9,
  e: 0x20CA,
  g: 0x20A3,
  o: 0x20C5
});

const frak = Object.freeze({
  C: 0x20EA,
  H: 0x20C4,
  I: 0x20C8,
  R: 0x20CA,
  Z: 0x20CE
});

const bbb$1 = Object.freeze({
  C: 0x20BF, // blackboard bold
  H: 0x20C5,
  N: 0x20C7,
  P: 0x20C9,
  Q: 0x20C9,
  R: 0x20CB,
  Z: 0x20CA
});

const bold = Object.freeze({
  "\u03f5": 0x1D2E7, // lunate epsilon
  "\u03d1": 0x1D30C, // vartheta
  "\u03f0": 0x1D2EE, // varkappa
  "\u03c6": 0x1D319, // varphi
  "\u03f1": 0x1D2EF, // varrho
  "\u03d6": 0x1D30B  // varpi
});

const boldItalic = Object.freeze({
  "\u03f5": 0x1D35B, // lunate epsilon
  "\u03d1": 0x1D380, // vartheta
  "\u03f0": 0x1D362, // varkappa
  "\u03c6": 0x1D38D, // varphi
  "\u03f1": 0x1D363, // varrho
  "\u03d6": 0x1D37F  // varpi
});

const boldsf = Object.freeze({
  "\u03f5": 0x1D395, // lunate epsilon
  "\u03d1": 0x1D3BA, // vartheta
  "\u03f0": 0x1D39C, // varkappa
  "\u03c6": 0x1D3C7, // varphi
  "\u03f1": 0x1D39D, // varrho
  "\u03d6": 0x1D3B9  // varpi
});

const bisf = Object.freeze({
  "\u03f5": 0x1D3CF, // lunate epsilon
  "\u03d1": 0x1D3F4, // vartheta
  "\u03f0": 0x1D3D6, // varkappa
  "\u03c6": 0x1D401, // varphi
  "\u03f1": 0x1D3D7, // varrho
  "\u03d6": 0x1D3F3  // varpi
});

// Code point offsets below are derived from https://www.unicode.org/charts/PDF/U1D400.pdf
const offset = Object.freeze({
  upperCaseLatin: { // A-Z
    "normal": ch =>                 { return 0 },
    "bold": ch =>                   { return 0x1D3BF },
    "italic": ch =>                 { return 0x1D3F3 },
    "bold-italic": ch =>            { return 0x1D427 },
    "script": ch =>                 { return script[ch] || 0x1D45B },
    "script-bold": ch =>            { return 0x1D48F },
    "fraktur": ch =>                { return frak[ch] || 0x1D4C3 },
    "fraktur-bold": ch =>           { return 0x1D52B },
    "double-struck": ch =>          { return bbb$1[ch] || 0x1D4F7 },
    "sans-serif": ch =>             { return 0x1D55F },
    "sans-serif-bold": ch =>        { return 0x1D593 },
    "sans-serif-italic": ch =>      { return 0x1D5C7 },
    "sans-serif-bold-italic": ch => { return 0x1D63C },
    "monospace": ch =>              { return 0x1D62F }
  },
  lowerCaseLatin: { // a-z
    "normal": ch =>                 { return 0 },
    "bold": ch =>                   { return 0x1D3B9 },
    "italic": ch =>                 { return ch === "h" ? 0x20A6 : 0x1D3ED },
    "bold-italic": ch =>            { return 0x1D421 },
    "script": ch =>                 { return script[ch] || 0x1D455 },
    "script-bold": ch =>            { return 0x1D489 },
    "fraktur": ch =>                { return 0x1D4BD },
    "fraktur-bold": ch =>           { return 0x1D525 },
    "double-struck": ch =>          { return 0x1D4F1 },
    "sans-serif": ch =>             { return 0x1D559 },
    "sans-serif-bold": ch =>        { return 0x1D58D },
    "sans-serif-italic": ch =>      { return 0x1D5C1 },
    "sans-serif-bold-italic": ch => { return 0x1D5F5 },
    "monospace": ch =>              { return 0x1D629 }
  },
  upperCaseGreek: { // A-Ω
    "normal": ch =>                 { return 0 },
    "bold": ch =>                   { return 0x1D317 },
    "italic": ch =>                 { return 0x1D351 },
    // \boldsymbol actually returns upright bold for upperCaseGreek
    "bold-italic": ch =>            { return 0x1D317 },
    "script": ch =>                 { return 0 },
    "script-bold": ch =>            { return 0 },
    "fraktur": ch =>                { return 0 },
    "fraktur-bold": ch =>           { return 0 },
    "double-struck": ch =>          { return 0 },
    // Unicode has no code points for regular-weight san-serif Greek. Use bold.
    "sans-serif": ch =>             { return 0x1D3C5 },
    "sans-serif-bold": ch =>        { return 0x1D3C5 },
    "sans-serif-italic": ch =>      { return 0 },
    "sans-serif-bold-italic": ch => { return 0x1D3FF },
    "monospace": ch =>              { return 0 }
  },
  lowerCaseGreek: { // α-ω
    "normal": ch =>                 { return 0 },
    "bold": ch =>                   { return 0x1D311 },
    "italic": ch =>                 { return 0x1D34B },
    "bold-italic": ch =>            { return ch === "\u03d5" ? 0x1D37E : 0x1D385 },
    "script": ch =>                 { return 0 },
    "script-bold": ch =>            { return 0 },
    "fraktur": ch =>                { return 0 },
    "fraktur-bold": ch =>           { return 0 },
    "double-struck": ch =>          { return 0 },
    // Unicode has no code points for regular-weight san-serif Greek. Use bold.
    "sans-serif": ch =>             { return 0x1D3BF },
    "sans-serif-bold": ch =>        { return 0x1D3BF },
    "sans-serif-italic": ch =>      { return 0 },
    "sans-serif-bold-italic": ch => { return 0x1D3F9 },
    "monospace": ch =>              { return 0 }
  },
  varGreek: { // \varGamma, etc
    "normal": ch =>                 { return 0 },
    "bold": ch =>                   { return  bold[ch] || -51 },
    "italic": ch =>                 { return 0 },
    "bold-italic": ch =>            { return boldItalic[ch] || 0x3A },
    "script": ch =>                 { return 0 },
    "script-bold": ch =>            { return 0 },
    "fraktur": ch =>                { return 0 },
    "fraktur-bold": ch =>           { return 0 },
    "double-struck": ch =>          { return 0 },
    "sans-serif": ch =>             { return boldsf[ch] || 0x74 },
    "sans-serif-bold": ch =>        { return boldsf[ch] || 0x74 },
    "sans-serif-italic": ch =>      { return 0 },
    "sans-serif-bold-italic": ch => { return bisf[ch] || 0xAE },
    "monospace": ch =>              { return 0 }
  },
  numeral: { // 0-9
    "normal": ch =>                 { return 0 },
    "bold": ch =>                   { return 0x1D79E },
    "italic": ch =>                 { return 0 },
    "bold-italic": ch =>            { return 0 },
    "script": ch =>                 { return 0 },
    "script-bold": ch =>            { return 0 },
    "fraktur": ch =>                { return 0 },
    "fraktur-bold": ch =>           { return 0 },
    "double-struck": ch =>          { return 0x1D7A8 },
    "sans-serif": ch =>             { return 0x1D7B2 },
    "sans-serif-bold": ch =>        { return 0x1D7BC },
    "sans-serif-italic": ch =>      { return 0 },
    "sans-serif-bold-italic": ch => { return 0 },
    "monospace": ch =>              { return 0x1D7C6 }
  }
});

const variantChar = (ch, variant) => {
  const codePoint = ch.codePointAt(0);
  const block = 0x40 < codePoint && codePoint < 0x5b
    ? "upperCaseLatin"
    : 0x60 < codePoint && codePoint < 0x7b
    ? "lowerCaseLatin"
    : (0x390  < codePoint && codePoint < 0x3AA)
    ? "upperCaseGreek"
    : 0x3B0 < codePoint && codePoint < 0x3CA || ch === "\u03d5"
    ? "lowerCaseGreek"
    : 0x1D6E1 < codePoint && codePoint < 0x1D6FC  || bold[ch]
    ? "varGreek"
    : (0x2F < codePoint && codePoint <  0x3A)
    ? "numeral"
    : "other";
  return block === "other"
    ? ch
    : String.fromCodePoint(codePoint + offset[block][variant](ch))
};

const smallCaps = Object.freeze({
  a: "ᴀ",
  b: "ʙ",
  c: "ᴄ",
  d: "ᴅ",
  e: "ᴇ",
  f: "ꜰ",
  g: "ɢ",
  h: "ʜ",
  i: "ɪ",
  j: "ᴊ",
  k: "ᴋ",
  l: "ʟ",
  m: "ᴍ",
  n: "ɴ",
  o: "ᴏ",
  p: "ᴘ",
  q: "ǫ",
  r: "ʀ",
  s: "s",
  t: "ᴛ",
  u: "ᴜ",
  v: "ᴠ",
  w: "ᴡ",
  x: "x",
  y: "ʏ",
  z: "ᴢ"
});

// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
// src/symbols.js.

const numberRegEx = /^\d(?:[\d,.]*\d)?$/;
const latinRegEx = /[A-Ba-z]/;
const primes = new Set(["\\prime", "\\dprime", "\\trprime", "\\qprime",
  "\\backprime", "\\backdprime", "\\backtrprime"]);

const italicNumber = (text, variant, tag) => {
  const mn = new mathMLTree.MathNode(tag, [text]);
  const wrapper = new mathMLTree.MathNode("mstyle", [mn]);
  wrapper.style["font-style"] = "italic";
  wrapper.style["font-family"] = "Cambria, 'Times New Roman', serif";
  if (variant === "bold-italic") { wrapper.style["font-weight"] = "bold"; }
  return wrapper
};

defineFunctionBuilders({
  type: "mathord",
  mathmlBuilder(group, style) {
    const text = makeText(group.text, group.mode, style);
    const codePoint = text.text.codePointAt(0);
    // Test for upper-case Greek
    const defaultVariant = (0x0390 < codePoint && codePoint < 0x03aa) ? "normal" : "italic";
    const variant = getVariant(group, style) || defaultVariant;
    if (variant === "script") {
      text.text = variantChar(text.text, variant);
      return new mathMLTree.MathNode("mi", [text], [style.font])
    } else if (variant !== "italic") {
      text.text = variantChar(text.text, variant);
    }
    let node = new mathMLTree.MathNode("mi", [text]);
    // TODO: Handle U+1D49C - U+1D4CF per https://www.unicode.org/charts/PDF/U1D400.pdf
    if (variant === "normal") {
      node.setAttribute("mathvariant", "normal");
      if (text.text.length === 1) {
        // A Firefox bug will apply spacing here, but there should be none. Fix it.
        node = new mathMLTree.MathNode("mpadded", [node]);
        node.setAttribute("lspace", "0");
      }
    }
    return node
  }
});

defineFunctionBuilders({
  type: "textord",
  mathmlBuilder(group, style) {
    let ch = group.text;
    const codePoint = ch.codePointAt(0);
    if (style.fontFamily === "textsc") {
      // Convert small latin letters to small caps.
      if (96 < codePoint && codePoint < 123) {
        ch = smallCaps[ch];
      }
    }
    const text = makeText(ch, group.mode, style);
    const variant = getVariant(group, style) || "normal";

    let node;
    if (numberRegEx.test(group.text)) {
      const tag = group.mode === "text" ? "mtext" : "mn";
      if (variant === "italic" || variant === "bold-italic") {
        return italicNumber(text, variant, tag)
      } else {
        if (variant !== "normal") {
          text.text = text.text.split("").map(c => variantChar(c, variant)).join("");
        }
        node = new mathMLTree.MathNode(tag, [text]);
      }
    } else if (group.mode === "text") {
      if (variant !== "normal") {
        text.text = variantChar(text.text, variant);
      }
      node = new mathMLTree.MathNode("mtext", [text]);
    } else if (primes.has(group.text)) {
      node = new mathMLTree.MathNode("mo", [text]);
      // TODO: If/when Chromium uses ssty variant for prime, remove the next line.
      node.classes.push("tml-prime");
    } else {
      const origText = text.text;
      if (variant !== "italic") {
        text.text = variantChar(text.text, variant);
      }
      node = new mathMLTree.MathNode("mi", [text]);
      if (text.text === origText && latinRegEx.test(origText)) {
        node.setAttribute("mathvariant", "italic");
      }
    }
    return node
  }
});

// A map of CSS-based spacing functions to their CSS class.
const cssSpace = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
};

// A lookup table to determine whether a spacing function/symbol should be
// treated like a regular space character.  If a symbol or command is a key
// in this table, then it should be a regular space character.  Furthermore,
// the associated value may have a `className` specifying an extra CSS class
// to add to the created `span`.
const regularSpace = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
};

// ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
// src/symbols.js.
defineFunctionBuilders({
  type: "spacing",
  mathmlBuilder(group, style) {
    let node;

    if (Object.prototype.hasOwnProperty.call(regularSpace, group.text)) {
      // Firefox does not render a space in a <mtext> </mtext>. So write a no-break space.
      // TODO: If Firefox fixes that bug, uncomment the next line and write ch into the node.
      //const ch = (regularSpace[group.text].className === "nobreak") ? "\u00a0" : " "
      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\u00a0")]);
    } else if (Object.prototype.hasOwnProperty.call(cssSpace, group.text)) {
      // MathML 3.0 calls for nobreak to occur in an <mo>, not an <mtext>
      // Ref: https://www.w3.org/Math/draft-spec/mathml.html#chapter3_presm.lbattrs
      node = new mathMLTree.MathNode("mo");
      if (group.text === "\\nobreak") {
        node.setAttribute("linebreak", "nobreak");
      }
    } else {
      throw new ParseError(`Unknown type of space "${group.text}"`)
    }

    return node
  }
});

defineFunctionBuilders({
  type: "tag"
});

// For a \tag, the work usually done in a mathmlBuilder is instead done in buildMathML.js.
// That way, a \tag can be pulled out of the parse tree and wrapped around the outer node.

// Non-mathy text, possibly in a font
const textFontFamilies = {
  "\\text": undefined,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm",
  "\\textsc": "textsc"      // small caps
};

const textFontWeights = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
};

const textFontShapes = {
  "\\textit": "textit",
  "\\textup": "textup"
};

const styleWithFont = (group, style) => {
  const font = group.font;
  // Checks if the argument is a font family or a font style.
  if (!font) {
    return style;
  } else if (textFontFamilies[font]) {
    return style.withTextFontFamily(textFontFamilies[font]);
  } else if (textFontWeights[font]) {
    return style.withTextFontWeight(textFontWeights[font]);
  } else if (font === "\\emph") {
    return style.fontShape === "textit"
      ? style.withTextFontShape("textup")
      : style.withTextFontShape("textit")
  }
  return style.withTextFontShape(textFontShapes[font])
};

defineFunction({
  type: "text",
  names: [
    // Font families
    "\\text",
    "\\textrm",
    "\\textsf",
    "\\texttt",
    "\\textnormal",
    "\\textsc",
    // Font weights
    "\\textbf",
    "\\textmd",
    // Font Shapes
    "\\textit",
    "\\textup",
    "\\emph"
  ],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: true,
    allowedInText: true
  },
  handler({ parser, funcName }, args) {
    const body = args[0];
    return {
      type: "text",
      mode: parser.mode,
      body: ordargument(body),
      font: funcName
    };
  },
  mathmlBuilder(group, style) {
    const newStyle = styleWithFont(group, style);
    const mrow = buildExpressionRow(group.body, newStyle);
    return consolidateText(mrow)
  }
});

// \vcenter:  Vertically center the argument group on the math axis.

defineFunction({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    allowedInText: false
  },
  handler({ parser }, args) {
    return {
      type: "vcenter",
      mode: parser.mode,
      body: args[0]
    };
  },
  mathmlBuilder(group, style) {
    // Use a math table to create vertically centered content.
    const mtd = new mathMLTree.MathNode("mtd", [buildGroup$1(group.body, style)]);
    mtd.style.padding = "0";
    const mtr = new mathMLTree.MathNode("mtr", [mtd]);
    return new mathMLTree.MathNode("mtable", [mtr])
  }
});

defineFunction({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler(context, args, optArgs) {
    // \verb and \verb* are dealt with directly in Parser.js.
    // If we end up here, it's because of a failure to match the two delimiters
    // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
    // terminated by end of line (or file).
    throw new ParseError("\\verb ended by end of line instead of matching delimiter");
  },
  mathmlBuilder(group, style) {
    const text = new mathMLTree.TextNode(makeVerb(group));
    const node = new mathMLTree.MathNode("mtext", [text]);
    node.setAttribute("mathvariant", "monospace");
    return node;
  }
});

/**
 * Converts verb group into body string.
 *
 * \verb* replaces each space with an open box \u2423
 * \verb replaces each space with a no-break space \xA0
 */
const makeVerb = (group) => group.body.replace(/ /g, group.star ? "\u2423" : "\xA0");

/** Include this to ensure that all functions are defined. */

const functions = _functions;

/**
 * The Lexer class handles tokenizing the input in various ways. Since our
 * parser expects us to be able to backtrack, the lexer allows lexing from any
 * given starting point.
 *
 * Its main exposed function is the `lex` function, which takes a position to
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
 * function.
 *
 * The various `_innerLex` functions perform the actual lexing of different
 * kinds.
 */


/* The following tokenRegex
 * - matches typical whitespace (but not NBSP etc.) using its first two groups
 * - does not match any control character \x00-\x1f except whitespace
 * - does not match a bare backslash
 * - matches any ASCII character except those just mentioned
 * - does not match the BMP private use area \uE000-\uF8FF
 * - does not match bare surrogate code units
 * - matches any BMP character except for those just described
 * - matches any valid Unicode surrogate pair
 * - mathches numerals
 * - matches a backslash followed by one or more whitespace characters
 * - matches a backslash followed by one or more letters then whitespace
 * - matches a backslash followed by any BMP character
 * Capturing groups:
 *   [1] regular whitespace
 *   [2] backslash followed by whitespace
 *   [3] anything else, which may include:
 *     [4] left character of \verb*
 *     [5] left character of \verb
 *     [6] backslash followed by word, excluding any trailing whitespace
 * Just because the Lexer matches something doesn't mean it's valid input:
 * If there is no matching function or symbol definition, the Parser will
 * still reject the input.
 */
const spaceRegexString = "[ \r\n\t]";
const controlWordRegexString = "\\\\[a-zA-Z@]+";
const controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
const controlWordWhitespaceRegexString = `(${controlWordRegexString})${spaceRegexString}*`;
const controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
const combiningDiacriticalMarkString = "[\u0300-\u036f]";
const combiningDiacriticalMarksEndRegex = new RegExp(`${combiningDiacriticalMarkString}+$`);
const tokenRegexString =
  `(${spaceRegexString}+)|` + // whitespace
  `${controlSpaceRegexString}|` +  // whitespace
  "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + // single codepoint
  `${combiningDiacriticalMarkString}*` + // ...plus accents
  "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
  `${combiningDiacriticalMarkString}*` + // ...plus accents
  "|\\\\verb\\*([^]).*?\\4" + // \verb*
  "|\\\\verb([^*a-zA-Z]).*?\\5" + // \verb unstarred
  `|${controlWordWhitespaceRegexString}` + // \macroName + spaces
  `|${controlSymbolRegexString})`; // \\, \', etc.

/** Main Lexer class */
class Lexer {
  constructor(input, settings) {
    // Separate accents from characters
    this.input = input;
    this.settings = settings;
    this.tokenRegex = new RegExp(tokenRegexString, 'g');
    // Category codes. The lexer only supports comment characters (14) for now.
    // MacroExpander additionally distinguishes active (13).
    this.catcodes = {
      "%": 14, // comment character
      "~": 13  // active character
    };
  }

  setCatcode(char, code) {
    this.catcodes[char] = code;
  }

  /**
   * This function lexes a single token.
   */
  lex() {
    const input = this.input;
    const pos = this.tokenRegex.lastIndex;
    if (pos === input.length) {
      return new Token("EOF", new SourceLocation(this, pos, pos));
    }
    const match = this.tokenRegex.exec(input);
    if (match === null || match.index !== pos) {
      throw new ParseError(
        `Unexpected character: '${input[pos]}'`,
        new Token(input[pos], new SourceLocation(this, pos, pos + 1))
      );
    }
    const text = match[6] || match[3] || (match[2] ? "\\ " : " ");

    if (this.catcodes[text] === 14) {
      // comment character
      const nlIndex = input.indexOf("\n", this.tokenRegex.lastIndex);
      if (nlIndex === -1) {
        this.tokenRegex.lastIndex = input.length; // EOF
        if (this.settings.strict) {
          throw new ParseError("% comment has no terminating newline; LaTeX would " +
              "fail because of commenting the end of math mode")
        }
      } else {
        this.tokenRegex.lastIndex = nlIndex + 1;
      }
      return this.lex();
    }

    return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
  }
}

/**
 * A `Namespace` refers to a space of nameable things like macros or lengths,
 * which can be `set` either globally or local to a nested group, using an
 * undo stack similar to how TeX implements this functionality.
 * Performance-wise, `get` and local `set` take constant time, while global
 * `set` takes time proportional to the depth of group nesting.
 */


class Namespace {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  constructor(builtins = {}, globalMacros = {}) {
    this.current = globalMacros;
    this.builtins = builtins;
    this.undefStack = [];
  }

  /**
   * Start a new nested group, affecting future local `set`s.
   */
  beginGroup() {
    this.undefStack.push({});
  }

  /**
   * End current nested group, restoring values before the group began.
   */
  endGroup() {
    if (this.undefStack.length === 0) {
      throw new ParseError(
        "Unbalanced namespace destruction: attempt " +
          "to pop global namespace; please report this as a bug"
      );
    }
    const undefs = this.undefStack.pop();
    for (const undef in undefs) {
      if (Object.prototype.hasOwnProperty.call(undefs, undef )) {
        if (undefs[undef] === undefined) {
          delete this.current[undef];
        } else {
          this.current[undef] = undefs[undef];
        }
      }
    }
  }

  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  has(name) {
    return Object.prototype.hasOwnProperty.call(this.current, name ) ||
    Object.prototype.hasOwnProperty.call(this.builtins, name );
  }

  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  get(name) {
    if (Object.prototype.hasOwnProperty.call(this.current, name )) {
      return this.current[name];
    } else {
      return this.builtins[name];
    }
  }

  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   */
  set(name, value, global = false) {
    if (global) {
      // Global set is equivalent to setting in all groups.  Simulate this
      // by destroying any undos currently scheduled for this name,
      // and adding an undo with the *new* value (in case it later gets
      // locally reset within this environment).
      for (let i = 0; i < this.undefStack.length; i++) {
        delete this.undefStack[i][name];
      }
      if (this.undefStack.length > 0) {
        this.undefStack[this.undefStack.length - 1][name] = value;
      }
    } else {
      // Undo this set at end of this group (possibly to `undefined`),
      // unless an undo is already in place, in which case that older
      // value is the correct one.
      const top = this.undefStack[this.undefStack.length - 1];
      if (top && !Object.prototype.hasOwnProperty.call(top, name )) {
        top[name] = this.current[name];
      }
    }
    this.current[name] = value;
  }
}

/**
 * This file contains the “gullet” where macros are expanded
 * until only non-macro tokens remain.
 */


// List of commands that act like macros but aren't defined as a macro,
// function, or symbol.  Used in `isDefined`.
const implicitCommands = {
  "^": true, // Parser.js
  _: true, // Parser.js
  "\\limits": true, // Parser.js
  "\\nolimits": true // Parser.js
};

class MacroExpander {
  constructor(input, settings, mode) {
    this.settings = settings;
    this.expansionCount = 0;
    this.feed(input);
    // Make new global namespace
    this.macros = new Namespace(macros, settings.macros);
    this.mode = mode;
    this.stack = []; // contains tokens in REVERSE order
  }

  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */
  feed(input) {
    this.lexer = new Lexer(input, this.settings);
  }

  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(newMode) {
    this.mode = newMode;
  }

  /**
   * Start a new group nesting within all namespaces.
   */
  beginGroup() {
    this.macros.beginGroup();
  }

  /**
   * End current group nesting within all namespaces.
   */
  endGroup() {
    this.macros.endGroup();
  }

  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  future() {
    if (this.stack.length === 0) {
      this.pushToken(this.lexer.lex());
    }
    return this.stack[this.stack.length - 1]
  }

  /**
   * Remove and return the next unexpanded token.
   */
  popToken() {
    this.future(); // ensure non-empty stack
    return this.stack.pop();
  }

  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  pushToken(token) {
    this.stack.push(token);
  }

  /**
   * Append an array of tokens to the token stack.
   */
  pushTokens(tokens) {
    this.stack.push(...tokens);
  }

  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  scanArgument(isOptional) {
    let start;
    let end;
    let tokens;
    if (isOptional) {
      this.consumeSpaces(); // \@ifnextchar gobbles any space following it
      if (this.future().text !== "[") {
        return null;
      }
      start = this.popToken(); // don't include [ in tokens
      ({ tokens, end } = this.consumeArg(["]"]));
    } else {
      ({ tokens, start, end } = this.consumeArg());
    }

    // indicate the end of an argument
    this.pushToken(new Token("EOF", end.loc));

    this.pushTokens(tokens);
    return start.range(end, "");
  }

  /**
   * Consume all following space tokens, without expansion.
   */
  consumeSpaces() {
    for (;;) {
      const token = this.future();
      if (token.text === " ") {
        this.stack.pop();
      } else {
        break;
      }
    }
  }

  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  consumeArg(delims) {
    // The argument for a delimited parameter is the shortest (possibly
    // empty) sequence of tokens with properly nested {...} groups that is
    // followed ... by this particular list of non-parameter tokens.
    // The argument for an undelimited parameter is the next nonblank
    // token, unless that token is ‘{’, when the argument will be the
    // entire {...} group that follows.
    const tokens = [];
    const isDelimited = delims && delims.length > 0;
    if (!isDelimited) {
      // Ignore spaces between arguments.  As the TeXbook says:
      // "After you have said ‘\def\row#1#2{...}’, you are allowed to
      //  put spaces between the arguments (e.g., ‘\row x n’), because
      //  TeX doesn’t use single spaces as undelimited arguments."
      this.consumeSpaces();
    }
    const start = this.future();
    let tok;
    let depth = 0;
    let match = 0;
    do {
      tok = this.popToken();
      tokens.push(tok);
      if (tok.text === "{") {
        ++depth;
      } else if (tok.text === "}") {
        --depth;
        if (depth === -1) {
          throw new ParseError("Extra }", tok);
        }
      } else if (tok.text === "EOF") {
        throw new ParseError(
          "Unexpected end of input in a macro argument" +
            ", expected '" +
            (delims && isDelimited ? delims[match] : "}") +
            "'",
          tok
        );
      }
      if (delims && isDelimited) {
        if ((depth === 0 || (depth === 1 && delims[match] === "{")) && tok.text === delims[match]) {
          ++match;
          if (match === delims.length) {
            // don't include delims in tokens
            tokens.splice(-match, match);
            break;
          }
        } else {
          match = 0;
        }
      }
    } while (depth !== 0 || isDelimited);
    // If the argument found ... has the form ‘{<nested tokens>}’,
    // ... the outermost braces enclosing the argument are removed
    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
      tokens.pop();
      tokens.shift();
    }
    tokens.reverse(); // to fit in with stack order
    return { tokens, start, end: tok };
  }

  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  consumeArgs(numArgs, delimiters) {
    if (delimiters) {
      if (delimiters.length !== numArgs + 1) {
        throw new ParseError("The length of delimiters doesn't match the number of args!");
      }
      const delims = delimiters[0];
      for (let i = 0; i < delims.length; i++) {
        const tok = this.popToken();
        if (delims[i] !== tok.text) {
          throw new ParseError("Use of the macro doesn't match its definition", tok);
        }
      }
    }

    const args = [];
    for (let i = 0; i < numArgs; i++) {
      args.push(this.consumeArg(delimiters && delimiters[i + 1]).tokens);
    }
    return args;
  }

  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order, and the number of such tokens will be
   * returned.  This number might be zero or positive.
   *
   * If not, the return value is `false`, and the next token remains at the
   * top of the stack.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty (in case of empty expansion
   * and no other tokens).
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  expandOnce(expandableOnly) {
    const topToken = this.popToken();
    const name = topToken.text;
    const expansion = !topToken.noexpand ? this._getExpansion(name) : null;
    if (expansion == null || (expandableOnly && expansion.unexpandable)) {
      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
        throw new ParseError("Undefined control sequence: " + name);
      }
      this.pushToken(topToken);
      return false;
    }
    this.expansionCount++;
    if (this.expansionCount > this.settings.maxExpand) {
      throw new ParseError(
        "Too many expansions: infinite loop or " + "need to increase maxExpand setting"
      );
    }
    let tokens = expansion.tokens;
    const args = this.consumeArgs(expansion.numArgs, expansion.delimiters);
    if (expansion.numArgs) {
      // paste arguments in place of the placeholders
      tokens = tokens.slice(); // make a shallow copy
      for (let i = tokens.length - 1; i >= 0; --i) {
        let tok = tokens[i];
        if (tok.text === "#") {
          if (i === 0) {
            throw new ParseError("Incomplete placeholder at end of macro body", tok);
          }
          tok = tokens[--i]; // next token on stack
          if (tok.text === "#") {
            // ## → #
            tokens.splice(i + 1, 1); // drop first #
          } else if (/^[1-9]$/.test(tok.text)) {
            // replace the placeholder with the indicated argument
            tokens.splice(i, 2, ...args[+tok.text - 1]);
          } else {
            throw new ParseError("Not a valid argument number", tok);
          }
        }
      }
    }
    // Concatenate expansion onto top of stack.
    this.pushTokens(tokens);
    return tokens.length;
  }

  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  expandAfterFuture() {
    this.expandOnce();
    return this.future();
  }

  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  expandNextToken() {
    for (;;) {
      if (this.expandOnce() === false) { // fully expanded
        const token = this.stack.pop();
        // The token after \noexpand is interpreted as if its meaning were ‘\relax’
        if (token.treatAsRelax) {
          token.text = "\\relax";
        }
        return token
      }
    }

    // This pathway is impossible.
    throw new Error(); // eslint-disable-line no-unreachable
  }

  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  expandMacro(name) {
    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
  }

  /**
   * Fully expand the given token stream and return the resulting list of
   * tokens.  Note that the input tokens are in reverse order, but the
   * output tokens are in forward order.
   */
  expandTokens(tokens) {
    const output = [];
    const oldStackLength = this.stack.length;
    this.pushTokens(tokens);
    while (this.stack.length > oldStackLength) {
      // Expand only expandable tokens
      if (this.expandOnce(true) === false) {  // fully expanded
        const token = this.stack.pop();
        if (token.treatAsRelax) {
          // the expansion of \noexpand is the token itself
          token.noexpand = false;
          token.treatAsRelax = false;
        }
        output.push(token);
      }
    }
    return output;
  }

  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  expandMacroAsText(name) {
    const tokens = this.expandMacro(name);
    if (tokens) {
      return tokens.map((token) => token.text).join("");
    } else {
      return tokens;
    }
  }

  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  _getExpansion(name) {
    const definition = this.macros.get(name);
    if (definition == null) {
      // mainly checking for undefined here
      return definition;
    }
    // If a single character has an associated catcode other than 13
    // (active character), then don't expand it.
    if (name.length === 1) {
      const catcode = this.lexer.catcodes[name];
      if (catcode != null && catcode !== 13) {
        return
      }
    }
    const expansion = typeof definition === "function" ? definition(this) : definition;
    if (typeof expansion === "string") {
      let numArgs = 0;
      if (expansion.indexOf("#") !== -1) {
        const stripped = expansion.replace(/##/g, "");
        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
          ++numArgs;
        }
      }
      const bodyLexer = new Lexer(expansion, this.settings);
      const tokens = [];
      let tok = bodyLexer.lex();
      while (tok.text !== "EOF") {
        tokens.push(tok);
        tok = bodyLexer.lex();
      }
      tokens.reverse(); // to fit in with stack using push and pop
      const expanded = { tokens, numArgs };
      return expanded;
    }

    return expansion;
  }

  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  isDefined(name) {
    return (
      this.macros.has(name) ||
      Object.prototype.hasOwnProperty.call(functions, name ) ||
      Object.prototype.hasOwnProperty.call(symbols.math, name ) ||
      Object.prototype.hasOwnProperty.call(symbols.text, name ) ||
      Object.prototype.hasOwnProperty.call(implicitCommands, name )
    );
  }

  /**
   * Determine whether a command is expandable.
   */
  isExpandable(name) {
    const macro = this.macros.get(name);
    return macro != null
      ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable
      : Object.prototype.hasOwnProperty.call(functions, name ) && !functions[name].primitive;
  }
}

// Helpers for Parser.js handling of Unicode (sub|super)script characters.

const unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;

const uSubsAndSups = Object.freeze({
  '₊': '+',
  '₋': '-',
  '₌': '=',
  '₍': '(',
  '₎': ')',
  '₀': '0',
  '₁': '1',
  '₂': '2',
  '₃': '3',
  '₄': '4',
  '₅': '5',
  '₆': '6',
  '₇': '7',
  '₈': '8',
  '₉': '9',
  '\u2090': 'a',
  '\u2091': 'e',
  '\u2095': 'h',
  '\u1D62': 'i',
  '\u2C7C': 'j',
  '\u2096': 'k',
  '\u2097': 'l',
  '\u2098': 'm',
  '\u2099': 'n',
  '\u2092': 'o',
  '\u209A': 'p',
  '\u1D63': 'r',
  '\u209B': 's',
  '\u209C': 't',
  '\u1D64': 'u',
  '\u1D65': 'v',
  '\u2093': 'x',
  '\u1D66': 'β',
  '\u1D67': 'γ',
  '\u1D68': 'ρ',
  '\u1D69': '\u03d5',
  '\u1D6A': 'χ',
  '⁺': '+',
  '⁻': '-',
  '⁼': '=',
  '⁽': '(',
  '⁾': ')',
  '⁰': '0',
  '¹': '1',
  '²': '2',
  '³': '3',
  '⁴': '4',
  '⁵': '5',
  '⁶': '6',
  '⁷': '7',
  '⁸': '8',
  '⁹': '9',
  '\u1D2C': 'A',
  '\u1D2E': 'B',
  '\u1D30': 'D',
  '\u1D31': 'E',
  '\u1D33': 'G',
  '\u1D34': 'H',
  '\u1D35': 'I',
  '\u1D36': 'J',
  '\u1D37': 'K',
  '\u1D38': 'L',
  '\u1D39': 'M',
  '\u1D3A': 'N',
  '\u1D3C': 'O',
  '\u1D3E': 'P',
  '\u1D3F': 'R',
  '\u1D40': 'T',
  '\u1D41': 'U',
  '\u2C7D': 'V',
  '\u1D42': 'W',
  '\u1D43': 'a',
  '\u1D47': 'b',
  '\u1D9C': 'c',
  '\u1D48': 'd',
  '\u1D49': 'e',
  '\u1DA0': 'f',
  '\u1D4D': 'g',
  '\u02B0': 'h',
  '\u2071': 'i',
  '\u02B2': 'j',
  '\u1D4F': 'k',
  '\u02E1': 'l',
  '\u1D50': 'm',
  '\u207F': 'n',
  '\u1D52': 'o',
  '\u1D56': 'p',
  '\u02B3': 'r',
  '\u02E2': 's',
  '\u1D57': 't',
  '\u1D58': 'u',
  '\u1D5B': 'v',
  '\u02B7': 'w',
  '\u02E3': 'x',
  '\u02B8': 'y',
  '\u1DBB': 'z',
  '\u1D5D': 'β',
  '\u1D5E': 'γ',
  '\u1D5F': 'δ',
  '\u1D60': '\u03d5',
  '\u1D61': 'χ',
  '\u1DBF': 'θ'
});

// Used for Unicode input of calligraphic and script letters
const asciiFromScript = Object.freeze({
  "\ud835\udc9c": "A",
  "\u212c": "B",
  "\ud835\udc9e": "C",
  "\ud835\udc9f": "D",
  "\u2130": "E",
  "\u2131": "F",
  "\ud835\udca2": "G",
  "\u210B": "H",
  "\u2110": "I",
  "\ud835\udca5": "J",
  "\ud835\udca6": "K",
  "\u2112": "L",
  "\u2133": "M",
  "\ud835\udca9": "N",
  "\ud835\udcaa": "O",
  "\ud835\udcab": "P",
  "\ud835\udcac": "Q",
  "\u211B": "R",
  "\ud835\udcae": "S",
  "\ud835\udcaf": "T",
  "\ud835\udcb0": "U",
  "\ud835\udcb1": "V",
  "\ud835\udcb2": "W",
  "\ud835\udcb3": "X",
  "\ud835\udcb4": "Y",
  "\ud835\udcb5": "Z"
});

// Mapping of Unicode accent characters to their LaTeX equivalent in text and
// math mode (when they exist).
var unicodeAccents = {
  "\u0301": { text: "\\'", math: "\\acute" },
  "\u0300": { text: "\\`", math: "\\grave" },
  "\u0308": { text: '\\"', math: "\\ddot" },
  "\u0303": { text: "\\~", math: "\\tilde" },
  "\u0304": { text: "\\=", math: "\\bar" },
  "\u0306": { text: "\\u", math: "\\breve" },
  "\u030c": { text: "\\v", math: "\\check" },
  "\u0302": { text: "\\^", math: "\\hat" },
  "\u0307": { text: "\\.", math: "\\dot" },
  "\u030a": { text: "\\r", math: "\\mathring" },
  "\u030b": { text: "\\H" },
  '\u0327': { text: '\\c' }
};

var unicodeSymbols = {
  "á": "á",
  "à": "à",
  "ä": "ä",
  "ǟ": "ǟ",
  "ã": "ã",
  "ā": "ā",
  "ă": "ă",
  "ắ": "ắ",
  "ằ": "ằ",
  "ẵ": "ẵ",
  "ǎ": "ǎ",
  "â": "â",
  "ấ": "ấ",
  "ầ": "ầ",
  "ẫ": "ẫ",
  "ȧ": "ȧ",
  "ǡ": "ǡ",
  "å": "å",
  "ǻ": "ǻ",
  "ḃ": "ḃ",
  "ć": "ć",
  "č": "č",
  "ĉ": "ĉ",
  "ċ": "ċ",
  "ď": "ď",
  "ḋ": "ḋ",
  "é": "é",
  "è": "è",
  "ë": "ë",
  "ẽ": "ẽ",
  "ē": "ē",
  "ḗ": "ḗ",
  "ḕ": "ḕ",
  "ĕ": "ĕ",
  "ě": "ě",
  "ê": "ê",
  "ế": "ế",
  "ề": "ề",
  "ễ": "ễ",
  "ė": "ė",
  "ḟ": "ḟ",
  "ǵ": "ǵ",
  "ḡ": "ḡ",
  "ğ": "ğ",
  "ǧ": "ǧ",
  "ĝ": "ĝ",
  "ġ": "ġ",
  "ḧ": "ḧ",
  "ȟ": "ȟ",
  "ĥ": "ĥ",
  "ḣ": "ḣ",
  "í": "í",
  "ì": "ì",
  "ï": "ï",
  "ḯ": "ḯ",
  "ĩ": "ĩ",
  "ī": "ī",
  "ĭ": "ĭ",
  "ǐ": "ǐ",
  "î": "î",
  "ǰ": "ǰ",
  "ĵ": "ĵ",
  "ḱ": "ḱ",
  "ǩ": "ǩ",
  "ĺ": "ĺ",
  "ľ": "ľ",
  "ḿ": "ḿ",
  "ṁ": "ṁ",
  "ń": "ń",
  "ǹ": "ǹ",
  "ñ": "ñ",
  "ň": "ň",
  "ṅ": "ṅ",
  "ó": "ó",
  "ò": "ò",
  "ö": "ö",
  "ȫ": "ȫ",
  "õ": "õ",
  "ṍ": "ṍ",
  "ṏ": "ṏ",
  "ȭ": "ȭ",
  "ō": "ō",
  "ṓ": "ṓ",
  "ṑ": "ṑ",
  "ŏ": "ŏ",
  "ǒ": "ǒ",
  "ô": "ô",
  "ố": "ố",
  "ồ": "ồ",
  "ỗ": "ỗ",
  "ȯ": "ȯ",
  "ȱ": "ȱ",
  "ő": "ő",
  "ṕ": "ṕ",
  "ṗ": "ṗ",
  "ŕ": "ŕ",
  "ř": "ř",
  "ṙ": "ṙ",
  "ś": "ś",
  "ṥ": "ṥ",
  "š": "š",
  "ṧ": "ṧ",
  "ŝ": "ŝ",
  "ṡ": "ṡ",
  "ẗ": "ẗ",
  "ť": "ť",
  "ṫ": "ṫ",
  "ú": "ú",
  "ù": "ù",
  "ü": "ü",
  "ǘ": "ǘ",
  "ǜ": "ǜ",
  "ǖ": "ǖ",
  "ǚ": "ǚ",
  "ũ": "ũ",
  "ṹ": "ṹ",
  "ū": "ū",
  "ṻ": "ṻ",
  "ŭ": "ŭ",
  "ǔ": "ǔ",
  "û": "û",
  "ů": "ů",
  "ű": "ű",
  "ṽ": "ṽ",
  "ẃ": "ẃ",
  "ẁ": "ẁ",
  "ẅ": "ẅ",
  "ŵ": "ŵ",
  "ẇ": "ẇ",
  "ẘ": "ẘ",
  "ẍ": "ẍ",
  "ẋ": "ẋ",
  "ý": "ý",
  "ỳ": "ỳ",
  "ÿ": "ÿ",
  "ỹ": "ỹ",
  "ȳ": "ȳ",
  "ŷ": "ŷ",
  "ẏ": "ẏ",
  "ẙ": "ẙ",
  "ź": "ź",
  "ž": "ž",
  "ẑ": "ẑ",
  "ż": "ż",
  "Á": "Á",
  "À": "À",
  "Ä": "Ä",
  "Ǟ": "Ǟ",
  "Ã": "Ã",
  "Ā": "Ā",
  "Ă": "Ă",
  "Ắ": "Ắ",
  "Ằ": "Ằ",
  "Ẵ": "Ẵ",
  "Ǎ": "Ǎ",
  "Â": "Â",
  "Ấ": "Ấ",
  "Ầ": "Ầ",
  "Ẫ": "Ẫ",
  "Ȧ": "Ȧ",
  "Ǡ": "Ǡ",
  "Å": "Å",
  "Ǻ": "Ǻ",
  "Ḃ": "Ḃ",
  "Ć": "Ć",
  "Č": "Č",
  "Ĉ": "Ĉ",
  "Ċ": "Ċ",
  "Ď": "Ď",
  "Ḋ": "Ḋ",
  "É": "É",
  "È": "È",
  "Ë": "Ë",
  "Ẽ": "Ẽ",
  "Ē": "Ē",
  "Ḗ": "Ḗ",
  "Ḕ": "Ḕ",
  "Ĕ": "Ĕ",
  "Ě": "Ě",
  "Ê": "Ê",
  "Ế": "Ế",
  "Ề": "Ề",
  "Ễ": "Ễ",
  "Ė": "Ė",
  "Ḟ": "Ḟ",
  "Ǵ": "Ǵ",
  "Ḡ": "Ḡ",
  "Ğ": "Ğ",
  "Ǧ": "Ǧ",
  "Ĝ": "Ĝ",
  "Ġ": "Ġ",
  "Ḧ": "Ḧ",
  "Ȟ": "Ȟ",
  "Ĥ": "Ĥ",
  "Ḣ": "Ḣ",
  "Í": "Í",
  "Ì": "Ì",
  "Ï": "Ï",
  "Ḯ": "Ḯ",
  "Ĩ": "Ĩ",
  "Ī": "Ī",
  "Ĭ": "Ĭ",
  "Ǐ": "Ǐ",
  "Î": "Î",
  "İ": "İ",
  "Ĵ": "Ĵ",
  "Ḱ": "Ḱ",
  "Ǩ": "Ǩ",
  "Ĺ": "Ĺ",
  "Ľ": "Ľ",
  "Ḿ": "Ḿ",
  "Ṁ": "Ṁ",
  "Ń": "Ń",
  "Ǹ": "Ǹ",
  "Ñ": "Ñ",
  "Ň": "Ň",
  "Ṅ": "Ṅ",
  "Ó": "Ó",
  "Ò": "Ò",
  "Ö": "Ö",
  "Ȫ": "Ȫ",
  "Õ": "Õ",
  "Ṍ": "Ṍ",
  "Ṏ": "Ṏ",
  "Ȭ": "Ȭ",
  "Ō": "Ō",
  "Ṓ": "Ṓ",
  "Ṑ": "Ṑ",
  "Ŏ": "Ŏ",
  "Ǒ": "Ǒ",
  "Ô": "Ô",
  "Ố": "Ố",
  "Ồ": "Ồ",
  "Ỗ": "Ỗ",
  "Ȯ": "Ȯ",
  "Ȱ": "Ȱ",
  "Ő": "Ő",
  "Ṕ": "Ṕ",
  "Ṗ": "Ṗ",
  "Ŕ": "Ŕ",
  "Ř": "Ř",
  "Ṙ": "Ṙ",
  "Ś": "Ś",
  "Ṥ": "Ṥ",
  "Š": "Š",
  "Ṧ": "Ṧ",
  "Ŝ": "Ŝ",
  "Ṡ": "Ṡ",
  "Ť": "Ť",
  "Ṫ": "Ṫ",
  "Ú": "Ú",
  "Ù": "Ù",
  "Ü": "Ü",
  "Ǘ": "Ǘ",
  "Ǜ": "Ǜ",
  "Ǖ": "Ǖ",
  "Ǚ": "Ǚ",
  "Ũ": "Ũ",
  "Ṹ": "Ṹ",
  "Ū": "Ū",
  "Ṻ": "Ṻ",
  "Ŭ": "Ŭ",
  "Ǔ": "Ǔ",
  "Û": "Û",
  "Ů": "Ů",
  "Ű": "Ű",
  "Ṽ": "Ṽ",
  "Ẃ": "Ẃ",
  "Ẁ": "Ẁ",
  "Ẅ": "Ẅ",
  "Ŵ": "Ŵ",
  "Ẇ": "Ẇ",
  "Ẍ": "Ẍ",
  "Ẋ": "Ẋ",
  "Ý": "Ý",
  "Ỳ": "Ỳ",
  "Ÿ": "Ÿ",
  "Ỹ": "Ỹ",
  "Ȳ": "Ȳ",
  "Ŷ": "Ŷ",
  "Ẏ": "Ẏ",
  "Ź": "Ź",
  "Ž": "Ž",
  "Ẑ": "Ẑ",
  "Ż": "Ż",
  "ά": "ά",
  "ὰ": "ὰ",
  "ᾱ": "ᾱ",
  "ᾰ": "ᾰ",
  "έ": "έ",
  "ὲ": "ὲ",
  "ή": "ή",
  "ὴ": "ὴ",
  "ί": "ί",
  "ὶ": "ὶ",
  "ϊ": "ϊ",
  "ΐ": "ΐ",
  "ῒ": "ῒ",
  "ῑ": "ῑ",
  "ῐ": "ῐ",
  "ό": "ό",
  "ὸ": "ὸ",
  "ύ": "ύ",
  "ὺ": "ὺ",
  "ϋ": "ϋ",
  "ΰ": "ΰ",
  "ῢ": "ῢ",
  "ῡ": "ῡ",
  "ῠ": "ῠ",
  "ώ": "ώ",
  "ὼ": "ὼ",
  "Ύ": "Ύ",
  "Ὺ": "Ὺ",
  "Ϋ": "Ϋ",
  "Ῡ": "Ῡ",
  "Ῠ": "Ῠ",
  "Ώ": "Ώ",
  "Ὼ": "Ὼ"
};

/* eslint no-constant-condition:0 */

const binLeftCancellers = ["bin", "op", "open", "punct", "rel"];
const sizeRegEx = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/;
const textRegEx = /^ *\\text/;

/**
 * This file contains the parser used to parse out a TeX expression from the
 * input. Since TeX isn't context-free, standard parsers don't work particularly
 * well.
 *
 * The strategy of this parser is as such:
 *
 * The main functions (the `.parse...` ones) take a position in the current
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
 * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
 * individual tokens are needed at a position, the lexer is called to pull out a
 * token, which is then used.
 *
 * The parser has a property called "mode" indicating the mode that
 * the parser is currently in. Currently it has to be one of "math" or
 * "text", which denotes whether the current environment is a math-y
 * one or a text-y one (e.g. inside \text). Currently, this serves to
 * limit the functions which can be used in text mode.
 *
 * The main functions then return an object which contains the useful data that
 * was parsed at its given point, and a new position at the end of the parsed
 * data. The main functions can call each other and continue the parsing by
 * using the returned position as a new starting point.
 *
 * There are also extra `.handle...` functions, which pull out some reused
 * functionality into self-contained functions.
 *
 * The functions return ParseNodes.
 */

class Parser {
  constructor(input, settings, isPreamble = false) {
    // Start in math mode
    this.mode = "math";
    // Create a new macro expander (gullet) and (indirectly via that) also a
    // new lexer (mouth) for this parser (stomach, in the language of TeX)
    this.gullet = new MacroExpander(input, settings, this.mode);
    // Store the settings for use in parsing
    this.settings = settings;
    // Are we defining a preamble?
    this.isPreamble = isPreamble;
    // Count leftright depth (for \middle errors)
    this.leftrightDepth = 0;
    this.prevAtomType = "";
  }

  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */
  expect(text, consume = true) {
    if (this.fetch().text !== text) {
      throw new ParseError(`Expected '${text}', got '${this.fetch().text}'`, this.fetch());
    }
    if (consume) {
      this.consume();
    }
  }

  /**
   * Discards the current lookahead token, considering it consumed.
   */
  consume() {
    this.nextToken = null;
  }

  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  fetch() {
    if (this.nextToken == null) {
      this.nextToken = this.gullet.expandNextToken();
    }
    return this.nextToken;
  }

  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(newMode) {
    this.mode = newMode;
    this.gullet.switchMode(newMode);
  }

  /**
   * Main parsing function, which parses an entire input.
   */
  parse() {
    // Create a group namespace for every $...$, $$...$$, \[...\].)
    // A \def is then valid only within that pair of delimiters.
    this.gullet.beginGroup();

    if (this.settings.colorIsTextColor) {
      // Use old \color behavior (same as LaTeX's \textcolor) if requested.
      // We do this within the group for the math expression, so it doesn't
      // pollute settings.macros.
      this.gullet.macros.set("\\color", "\\textcolor");
    }

    // Try to parse the input
    const parse = this.parseExpression(false);

    // If we succeeded, make sure there's an EOF at the end
    this.expect("EOF");

    if (this.isPreamble) {
      const macros = Object.create(null);
      Object.entries(this.gullet.macros.current).forEach(([key, value]) => {
        macros[key] = value;
      });
      this.gullet.endGroup();
      return macros
    }

    // The only local macro that we want to save is from \tag.
    const tag = this.gullet.macros.get("\\df@tag");

    // End the group namespace for the expression
    this.gullet.endGroup();

    if (tag) { this.gullet.macros.current["\\df@tag"] = tag; }

    return parse;
  }

  static get endOfExpression() {
    return ["}", "\\endgroup", "\\end", "\\right", "\\endtoggle", "&"];
  }

  /**
   * Fully parse a separate sequence of tokens as a separate job.
   * Tokens should be specified in reverse order, as in a MacroDefinition.
   */
  subparse(tokens) {
    // Save the next token from the current job.
    const oldToken = this.nextToken;
    this.consume();

    // Run the new job, terminating it with an excess '}'
    this.gullet.pushToken(new Token("}"));
    this.gullet.pushTokens(tokens);
    const parse = this.parseExpression(false);
    this.expect("}");

    // Restore the next token from the current job.
    this.nextToken = oldToken;

    return parse;
  }

/**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precedence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   *
   * `breakOnMiddle`: \color, \over, and old styling functions work on an implicit group.
   *                  These groups end just before the usual tokens, but they also
   *                  end just before `\middle`.
   */
  parseExpression(breakOnInfix, breakOnTokenText, breakOnMiddle) {
    const body = [];
    this.prevAtomType = "";
    // Keep adding atoms to the body until we can't parse any more atoms (either
    // we reached the end, a }, or a \right)
    while (true) {
      // Ignore spaces in math mode
      if (this.mode === "math") {
        this.consumeSpaces();
      }
      const lex = this.fetch();
      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
        break;
      }
      if (breakOnTokenText && lex.text === breakOnTokenText) {
        break;
      }
      if (breakOnMiddle && lex.text === "\\middle") {
        break
      }
      if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
        break;
      }
      const atom = this.parseAtom(breakOnTokenText);
      if (!atom) {
        break;
      } else if (atom.type === "internal") {
        continue;
      }
      body.push(atom);
      // Keep a record of the atom type, so that op.js can set correct spacing.
      this.prevAtomType = atom.type === "atom" ? atom.family : atom.type;
    }
    if (this.mode === "text") {
      this.formLigatures(body);
    }
    return this.handleInfixNodes(body);
  }

  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  handleInfixNodes(body) {
    let overIndex = -1;
    let funcName;

    for (let i = 0; i < body.length; i++) {
      if (body[i].type === "infix") {
        if (overIndex !== -1) {
          throw new ParseError("only one infix operator per group", body[i].token);
        }
        overIndex = i;
        funcName = body[i].replaceWith;
      }
    }

    if (overIndex !== -1 && funcName) {
      let numerNode;
      let denomNode;

      const numerBody = body.slice(0, overIndex);
      const denomBody = body.slice(overIndex + 1);

      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
        numerNode = numerBody[0];
      } else {
        numerNode = { type: "ordgroup", mode: this.mode, body: numerBody };
      }

      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
        denomNode = denomBody[0];
      } else {
        denomNode = { type: "ordgroup", mode: this.mode, body: denomBody };
      }

      let node;
      if (funcName === "\\\\abovefrac") {
        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
      } else {
        node = this.callFunction(funcName, [numerNode, denomNode], []);
      }
      return [node];
    } else {
      return body;
    }
  }

  /**
   * Handle a subscript or superscript with nice errors.
   */
  handleSupSubscript(
    name // For error reporting.
  ) {
    const symbolToken = this.fetch();
    const symbol = symbolToken.text;
    this.consume();
    this.consumeSpaces(); // ignore spaces before sup/subscript argument
    const group = this.parseGroup(name);

    if (!group) {
      throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
    }

    return group;
  }

  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  formatUnsupportedCmd(text) {
    const textordArray = [];

    for (let i = 0; i < text.length; i++) {
      textordArray.push({ type: "textord", mode: "text", text: text[i] });
    }

    const textNode = {
      type: "text",
      mode: this.mode,
      body: textordArray
    };

    const colorNode = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [textNode]
    };

    return colorNode;
  }

  /**
   * Parses a group with optional super/subscripts.
   */
  parseAtom(breakOnTokenText) {
    // The body of an atom is an implicit group, so that things like
    // \left(x\right)^2 work correctly.
    const base = this.parseGroup("atom", breakOnTokenText);

    // In text mode, we don't have superscripts or subscripts
    if (this.mode === "text") {
      return base;
    }

    // Note that base may be empty (i.e. null) at this point.

    let superscript;
    let subscript;
    while (true) {
      // Guaranteed in math mode, so eat any spaces first.
      this.consumeSpaces();

      // Lex the first token
      const lex = this.fetch();

      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
        // We got a limit control
        if (base && base.type === "op") {
          const limits = lex.text === "\\limits";
          base.limits = limits;
          base.alwaysHandleSupSub = true;
        } else if (base && base.type === "operatorname") {
          if (base.alwaysHandleSupSub) {
            base.limits = lex.text === "\\limits";
          }
        } else {
          throw new ParseError("Limit controls must follow a math operator", lex);
        }
        this.consume();
      } else if (lex.text === "^") {
        // We got a superscript start
        if (superscript) {
          throw new ParseError("Double superscript", lex);
        }
        superscript = this.handleSupSubscript("superscript");
      } else if (lex.text === "_") {
        // We got a subscript start
        if (subscript) {
          throw new ParseError("Double subscript", lex);
        }
        subscript = this.handleSupSubscript("subscript");
      } else if (lex.text === "'") {
        // We got a prime
        if (superscript) {
          throw new ParseError("Double superscript", lex);
        }
        const prime = { type: "textord", mode: this.mode, text: "\\prime" };

        // Many primes can be grouped together, so we handle this here
        const primes = [prime];
        this.consume();
        // Keep lexing tokens until we get something that's not a prime
        while (this.fetch().text === "'") {
          // For each one, add another prime to the list
          primes.push(prime);
          this.consume();
        }
        // If there's a superscript following the primes, combine that
        // superscript in with the primes.
        if (this.fetch().text === "^") {
          primes.push(this.handleSupSubscript("superscript"));
        }
        // Put everything into an ordgroup as the superscript
        superscript = { type: "ordgroup", mode: this.mode, body: primes };
      } else if (uSubsAndSups[lex.text]) {
        // A Unicode subscript or superscript character.
        // We treat these similarly to the unicode-math package.
        // So we render a string of Unicode (sub|super)scripts the
        // same as a (sub|super)script of regular characters.
        const isSub = unicodeSubRegEx.test(lex.text);
        const subsupTokens = [];
        subsupTokens.push(new Token(uSubsAndSups[lex.text]));
        this.consume();
        // Continue fetching tokens to fill out the group.
        while (true) {
          const token = this.fetch().text;
          if (!(uSubsAndSups[token])) { break }
          if (unicodeSubRegEx.test(token) !== isSub) { break }
          subsupTokens.unshift(new Token(uSubsAndSups[token]));
          this.consume();
        }
        // Now create a (sub|super)script.
        const body = this.subparse(subsupTokens);
        if (isSub) {
          subscript = { type: "ordgroup", mode: "math", body };
        } else {
          superscript = { type: "ordgroup", mode: "math", body };
        }
      } else {
        // If it wasn't ^, _, a Unicode (sub|super)script, or ', stop parsing super/subscripts
        break;
      }
    }

    if (superscript || subscript) {
      if (base && base.type === "multiscript" && !base.postscripts) {
        // base is the result of a \prescript function.
        // Write the sub- & superscripts into the multiscript element.
        base.postscripts = { sup: superscript, sub: subscript };
        return base
      } else {
        // We got either a superscript or subscript, create a supsub
        const isFollowedByDelimiter = (!base || base.type !== "op" && base.type !== "operatorname")
          ? undefined
          : isDelimiter(this.nextToken.text);
        return {
          type: "supsub",
          mode: this.mode,
          base: base,
          sup: superscript,
          sub: subscript,
          isFollowedByDelimiter
        }
      }
    } else {
      // Otherwise return the original body
      return base;
    }
  }

  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  parseFunction(
    breakOnTokenText,
    name // For determining its context
  ) {
    const token = this.fetch();
    const func = token.text;
    const funcData = functions[func];
    if (!funcData) {
      return null;
    }
    this.consume(); // consume command token

    if (name && name !== "atom" && !funcData.allowedInArgument) {
      throw new ParseError(
        "Got function '" + func + "' with no arguments" + (name ? " as " + name : ""),
        token
      );
    } else if (this.mode === "text" && !funcData.allowedInText) {
      throw new ParseError("Can't use function '" + func + "' in text mode", token);
    } else if (this.mode === "math" && funcData.allowedInMath === false) {
      throw new ParseError("Can't use function '" + func + "' in math mode", token);
    }

    const prevAtomType = this.prevAtomType;
    const { args, optArgs } = this.parseArguments(func, funcData);
    this.prevAtomType = prevAtomType;
    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
  }

  /**
   * Call a function handler with a suitable context and arguments.
   */
  callFunction(name, args, optArgs, token, breakOnTokenText) {
    const context = {
      funcName: name,
      parser: this,
      token,
      breakOnTokenText
    };
    const func = functions[name];
    if (func && func.handler) {
      return func.handler(context, args, optArgs);
    } else {
      throw new ParseError(`No function handler for ${name}`);
    }
  }

  /**
   * Parses the arguments of a function or environment
   */
  parseArguments(
    func, // Should look like "\name" or "\begin{name}".
    funcData
  ) {
    const totalArgs = funcData.numArgs + funcData.numOptionalArgs;
    if (totalArgs === 0) {
      return { args: [], optArgs: [] };
    }

    const args = [];
    const optArgs = [];

    for (let i = 0; i < totalArgs; i++) {
      let argType = funcData.argTypes && funcData.argTypes[i];
      const isOptional = i < funcData.numOptionalArgs;

      if (
        (funcData.primitive && argType == null) ||
        // \sqrt expands into primitive if optional argument doesn't exist
        (funcData.type === "sqrt" && i === 1 && optArgs[0] == null)
      ) {
        argType = "primitive";
      }

      const arg = this.parseGroupOfType(`argument to '${func}'`, argType, isOptional);
      if (isOptional) {
        optArgs.push(arg);
      } else if (arg != null) {
        args.push(arg);
      } else {
        // should be unreachable
        throw new ParseError("Null argument, please report this as a bug");
      }
    }

    return { args, optArgs };
  }

  /**
   * Parses a group when the mode is changing.
   */
  parseGroupOfType(name, type, optional) {
    switch (type) {
      case "size":
        return this.parseSizeGroup(optional);
      case "url":
        return this.parseUrlGroup(optional);
      case "math":
      case "text":
        return this.parseArgumentGroup(optional, type);
      case "hbox": {
        // hbox argument type wraps the argument in the equivalent of
        // \hbox, which is like \text but switching to \textstyle size.
        const group = this.parseArgumentGroup(optional, "text");
        return group != null
          ? {
            type: "styling",
            mode: group.mode,
            body: [group],
            scriptLevel: "text" // simulate \textstyle
          }
          : null;
      }
      case "raw": {
        const token = this.parseStringGroup("raw", optional);
        return token != null
          ? {
            type: "raw",
            mode: "text",
            string: token.text
          }
          : null;
      }
      case "primitive": {
        if (optional) {
          throw new ParseError("A primitive argument cannot be optional");
        }
        const group = this.parseGroup(name);
        if (group == null) {
          throw new ParseError("Expected group as " + name, this.fetch());
        }
        return group;
      }
      case "original":
      case null:
      case undefined:
        return this.parseArgumentGroup(optional);
      default:
        throw new ParseError("Unknown group type as " + name, this.fetch());
    }
  }

  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  consumeSpaces() {
    while (true) {
      const ch = this.fetch().text;
      // \ufe0e is the Unicode variation selector to supress emoji. Ignore it.
      if (ch === " " || ch === "\u00a0" || ch === "\ufe0e") {
        this.consume();
      } else {
        break
      }
    }
  }

  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  parseStringGroup(
    modeName, // Used to describe the mode in error messages.
    optional
  ) {
    const argToken = this.gullet.scanArgument(optional);
    if (argToken == null) {
      return null;
    }
    let str = "";
    let nextToken;
    while ((nextToken = this.fetch()).text !== "EOF") {
      str += nextToken.text;
      this.consume();
    }
    this.consume(); // consume the end of the argument
    argToken.text = str;
    return argToken;
  }

  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  parseRegexGroup(
    regex,
    modeName // Used to describe the mode in error messages.
  ) {
    const firstToken = this.fetch();
    let lastToken = firstToken;
    let str = "";
    let nextToken;
    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
      lastToken = nextToken;
      str += lastToken.text;
      this.consume();
    }
    if (str === "") {
      throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
    }
    return firstToken.range(lastToken, str);
  }

  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  parseSizeGroup(optional) {
    let res;
    let isBlank = false;
    // don't expand before parseStringGroup
    this.gullet.consumeSpaces();
    if (!optional && this.gullet.future().text !== "{") {
      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
    } else {
      res = this.parseStringGroup("size", optional);
    }
    if (!res) {
      return null;
    }
    if (!optional && res.text.length === 0) {
      // Because we've tested for what is !optional, this block won't
      // affect \kern, \hspace, etc. It will capture the mandatory arguments
      // to \genfrac and \above.
      res.text = "0pt"; // Enable \above{}
      isBlank = true; // This is here specifically for \genfrac
    }
    const match = sizeRegEx.exec(res.text);
    if (!match) {
      throw new ParseError("Invalid size: '" + res.text + "'", res);
    }
    const data = {
      number: +(match[1] + match[2]), // sign + magnitude, cast to number
      unit: match[3]
    };
    if (!validUnit(data)) {
      throw new ParseError("Invalid unit: '" + data.unit + "'", res);
    }
    return {
      type: "size",
      mode: this.mode,
      value: data,
      isBlank
    };
  }

  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  parseUrlGroup(optional) {
    this.gullet.lexer.setCatcode("%", 13); // active character
    this.gullet.lexer.setCatcode("~", 12); // other character
    const res = this.parseStringGroup("url", optional);
    this.gullet.lexer.setCatcode("%", 14); // comment character
    this.gullet.lexer.setCatcode("~", 13); // active character
    if (res == null) {
      return null;
    }
    // hyperref package allows backslashes alone in href, but doesn't
    // generate valid links in such cases; we interpret this as
    // "undefined" behaviour, and keep them as-is. Some browser will
    // replace backslashes with forward slashes.
    let url = res.text.replace(/\\([#$%&~_^{}])/g, "$1");
    url = res.text.replace(/{\u2044}/g, "/");
    return {
      type: "url",
      mode: this.mode,
      url
    };
  }

  /**
   * Parses an argument with the mode specified.
   */
  parseArgumentGroup(optional, mode) {
    const argToken = this.gullet.scanArgument(optional);
    if (argToken == null) {
      return null;
    }
    const outerMode = this.mode;
    if (mode) {
      // Switch to specified mode
      this.switchMode(mode);
    }

    this.gullet.beginGroup();
    const expression = this.parseExpression(false, "EOF");
    // TODO: find an alternative way to denote the end
    this.expect("EOF"); // expect the end of the argument
    this.gullet.endGroup();
    const result = {
      type: "ordgroup",
      mode: this.mode,
      loc: argToken.loc,
      body: expression
    };

    if (mode) {
      // Switch mode back
      this.switchMode(outerMode);
    }
    return result;
  }

  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  parseGroup(
    name, // For error reporting.
    breakOnTokenText
  ) {
    const firstToken = this.fetch();
    const text = firstToken.text;

    let result;
    // Try to parse an open brace or \begingroup
    if (text === "{" || text === "\\begingroup" || text === "\\toggle") {
      this.consume();
      const groupEnd = text === "{"
        ? "}"
        : text === "\\begingroup"
        ? "\\endgroup"
        : "\\endtoggle";

      this.gullet.beginGroup();
      // If we get a brace, parse an expression
      const expression = this.parseExpression(false, groupEnd);
      const lastToken = this.fetch();
      this.expect(groupEnd); // Check that we got a matching closing brace
      this.gullet.endGroup();
      result = {
        type: (lastToken.text === "\\endtoggle" ? "toggle" : "ordgroup"),
        mode: this.mode,
        loc: SourceLocation.range(firstToken, lastToken),
        body: expression,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/
        semisimple: text === "\\begingroup" || undefined
      };
    } else {
      // If there exists a function with this name, parse the function.
      // Otherwise, just return a nucleus
      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();
      if (result == null && text[0] === "\\" &&
          !Object.prototype.hasOwnProperty.call(implicitCommands, text )) {
        result = this.formatUnsupportedCmd(text);
        this.consume();
      }
    }
    return result;
  }

  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  formLigatures(group) {
    let n = group.length - 1;
    for (let i = 0; i < n; ++i) {
      const a = group[i];
      const v = a.text;
      if (v === "-" && group[i + 1].text === "-") {
        if (i + 1 < n && group[i + 2].text === "-") {
          group.splice(i, 3, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 2]),
            text: "---"
          });
          n -= 2;
        } else {
          group.splice(i, 2, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 1]),
            text: "--"
          });
          n -= 1;
        }
      }
      if ((v === "'" || v === "`") && group[i + 1].text === v) {
        group.splice(i, 2, {
          type: "textord",
          mode: "text",
          loc: SourceLocation.range(a, group[i + 1]),
          text: v + v
        });
        n -= 1;
      }
    }
  }

  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  parseSymbol() {
    const nucleus = this.fetch();
    let text = nucleus.text;

    if (/^\\verb[^a-zA-Z]/.test(text)) {
      this.consume();
      let arg = text.slice(5);
      const star = arg.charAt(0) === "*";
      if (star) {
        arg = arg.slice(1);
      }
      // Lexer's tokenRegex is constructed to always have matching
      // first/last characters.
      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
        throw new ParseError(`\\verb assertion failed --
                    please report what input caused this bug`);
      }
      arg = arg.slice(1, -1); // remove first and last char
      return {
        type: "verb",
        mode: "text",
        body: arg,
        star
      };
    }
    // At this point, we should have a symbol, possibly with accents.
    // First expand any accented base symbol according to unicodeSymbols.
    if (Object.prototype.hasOwnProperty.call(unicodeSymbols, text[0]) &&
      this.mode === "math" && !symbols[this.mode][text[0]]) {
      // This behavior is not strict (XeTeX-compatible) in math mode.
      if (this.settings.strict && this.mode === "math") {
        throw new ParseError(`Accented Unicode text character "${text[0]}" used in ` + `math mode`,
          nucleus
        );
      }
      text = unicodeSymbols[text[0]] + text.slice(1);
    }
    // Strip off any combining characters
    const match = this.mode === "math"
      ? combiningDiacriticalMarksEndRegex.exec(text)
      : null;
    if (match) {
      text = text.substring(0, match.index);
      if (text === "i") {
        text = "\u0131"; // dotless i, in math and text mode
      } else if (text === "j") {
        text = "\u0237"; // dotless j, in math and text mode
      }
    }
    // Recognize base symbol
    let symbol;
    if (symbols[this.mode][text]) {
      let group = symbols[this.mode][text].group;
      if (group === "bin" && binLeftCancellers.includes(this.prevAtomType)) {
        // Change from a binary operator to a unary (prefix) operator
        group = "open";
      }
      const loc = SourceLocation.range(nucleus);
      let s;
      if (Object.prototype.hasOwnProperty.call(ATOMS, group )) {
        const family = group;
        s = {
          type: "atom",
          mode: this.mode,
          family,
          loc,
          text
        };
        if ((family === "rel" || family === "bin") && this.prevAtomType === "text") {
          if (textRegEx.test(loc.lexer.input.slice(loc.end))) {
            s.needsSpacing = true;  // Fix a MathML bug.
          }
        }
      } else {
        if (asciiFromScript[text]) {
          // Unicode 14 disambiguates chancery from roundhand.
          // See https://www.unicode.org/charts/PDF/U1D400.pdf
          this.consume();
          const nextCode = this.fetch().text.charCodeAt(0);
          // mathcal is Temml default. Use mathscript if called for.
          const font = nextCode === 0xfe01 ? "mathscr" : "mathcal";
          if (nextCode === 0xfe00 || nextCode === 0xfe01) { this.consume(); }
          return {
            type: "font",
            mode: "math",
            font,
            body: { type: "mathord", mode: "math", loc, text: asciiFromScript[text] }
          }
        }
        // Default ord character. No disambiguation necessary.
        s = {
          type: group,
          mode: this.mode,
          loc,
          text
        };
      }
      symbol = s;
    } else if (text.charCodeAt(0) >= 0x80 || combiningDiacriticalMarksEndRegex.exec(text)) {
      // no symbol for e.g. ^
      if (this.settings.strict && this.mode === "math") {
        throw new ParseError(`Unicode text character "${text[0]}" used in math mode`, nucleus)
      }
      // All nonmathematical Unicode characters are rendered as if they
      // are in text mode (wrapped in \text) because that's what it
      // takes to render them in LaTeX.
      symbol = {
        type: "textord",
        mode: "text",
        loc: SourceLocation.range(nucleus),
        text
      };
    } else {
      return null; // EOF, ^, _, {, }, etc.
    }
    this.consume();
    // Transform combining characters into accents
    if (match) {
      for (let i = 0; i < match[0].length; i++) {
        const accent = match[0][i];
        if (!unicodeAccents[accent]) {
          throw new ParseError(`Unknown accent ' ${accent}'`, nucleus);
        }
        const command = unicodeAccents[accent][this.mode] ||
                        unicodeAccents[accent].text;
        if (!command) {
          throw new ParseError(`Accent ${accent} unsupported in ${this.mode} mode`, nucleus);
        }
        symbol = {
          type: "accent",
          mode: this.mode,
          loc: SourceLocation.range(nucleus),
          label: command,
          isStretchy: false,
          base: symbol
        };
      }
    }
    return symbol;
  }
}

/**
 * Parses an expression using a Parser, then returns the parsed result.
 */
const parseTree = function(toParse, settings) {
  if (!(typeof toParse === "string" || toParse instanceof String)) {
    throw new TypeError("Temml can only parse string typed expression")
  }
  const parser = new Parser(toParse, settings);
  // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors
  delete parser.gullet.macros.current["\\df@tag"];

  let tree = parser.parse();

  // LaTeX ignores a \tag placed outside an AMS environment.
  if (!(tree.length > 0 &&  tree[0].type && tree[0].type === "array" && tree[0].addEqnNum)) {
    // If the input used \tag, it will set the \df@tag macro to the tag.
    // In this case, we separately parse the tag and wrap the tree.
    if (parser.gullet.macros.get("\\df@tag")) {
      if (!settings.displayMode) {
        throw new ParseError("\\tag works only in display mode")
      }
      parser.gullet.feed("\\df@tag");
      tree = [
        {
          type: "tag",
          mode: "text",
          body: tree,
          tag: parser.parse()
        }
      ];
    }
  }

  return tree
};

/**
 * This file contains information about the style that the mathmlBuilder carries
 * around with it. Data is held in an `Style` object, and when
 * recursing, a new `Style` object can be created with the `.with*` functions.
 */

const subOrSupLevel = [2, 2, 3, 3];

/**
 * This is the main Style class. It contains the current style.level, color, and font.
 *
 * Style objects should not be modified. To create a new Style with
 * different properties, call a `.with*` method.
 */
class Style {
  constructor(data) {
    // Style.level can be 0 | 1 | 2 | 3, which correspond to
    //       displaystyle, textstyle, scriptstyle, and scriptscriptstyle.
    // style.level usually does not directly set MathML's script level. MathML does that itself.
    // However, Chromium does not stop shrinking after scriptscriptstyle, so we do explicitly
    // set a scriptlevel attribute in those conditions.
    // We also use style.level to track math style so that we can get the correct
    // scriptlevel when needed in supsub.js, mathchoice.js, or for dimensions in em.
    this.level = data.level;
    this.color = data.color;  // string | void
    // A font family applies to a group of fonts (i.e. SansSerif), while a font
    // represents a specific font (i.e. SansSerif Bold).
    // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
    this.font = data.font || "";                // string
    this.fontFamily = data.fontFamily || "";    // string
    this.fontSize = data.fontSize || 1.0;       // number
    this.fontWeight = data.fontWeight || "";
    this.fontShape = data.fontShape || "";
    this.maxSize = data.maxSize;                // [number, number]
  }

  /**
   * Returns a new style object with the same properties as "this".  Properties
   * from "extension" will be copied to the new style object.
   */
  extend(extension) {
    const data = {
      level: this.level,
      color: this.color,
      font: this.font,
      fontFamily: this.fontFamily,
      fontSize: this.fontSize,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize
    };

    for (const key in extension) {
      if (Object.prototype.hasOwnProperty.call(extension, key)) {
        data[key] = extension[key];
      }
    }

    return new Style(data);
  }

  withLevel(n) {
    return this.extend({
      level: n
    });
  }

  incrementLevel() {
    return this.extend({
      level: Math.min(this.level + 1, 3)
    });
  }

  inSubOrSup() {
    return this.extend({
      level: subOrSupLevel[this.level]
    })
  }

  /**
   * Create a new style object with the given color.
   */
  withColor(color) {
    return this.extend({
      color: color
    });
  }

  /**
   * Creates a new style object with the given math font or old text font.
   * @type {[type]}
   */
  withFont(font) {
    return this.extend({
      font
    });
  }

  /**
   * Create a new style objects with the given fontFamily.
   */
  withTextFontFamily(fontFamily) {
    return this.extend({
      fontFamily,
      font: ""
    });
  }

  /**
   * Creates a new style object with the given font size
   */
  withFontSize(num) {
    return this.extend({
      fontSize: num
    });
  }

  /**
   * Creates a new style object with the given font weight
   */
  withTextFontWeight(fontWeight) {
    return this.extend({
      fontWeight,
      font: ""
    });
  }

  /**
   * Creates a new style object with the given font weight
   */
  withTextFontShape(fontShape) {
    return this.extend({
      fontShape,
      font: ""
    });
  }

  /**
   * Gets the CSS color of the current style object
   */
  getColor() {
    return this.color;
  }
}

/* Temml Post Process
 * Populate the text contents of each \ref & \eqref
 *
 * As with other Temml code, this file is released under terms of the MIT license.
 * https://mit-license.org/
 */

const version = "0.11.03";

function postProcess(block) {
  const labelMap = {};
  let i = 0;

  // Get a collection of the parents of each \tag & auto-numbered equation
  const amsEqns = document.getElementsByClassName('tml-eqn');
  for (let parent of amsEqns) {
    // AMS automatically numbered equation.
    // Assign an id.
    i += 1;
    parent.setAttribute("id", "tml-eqn-" + String(i));
    // No need to write a number into the text content of the element.
    // A CSS counter has done that even if this postProcess() function is not used.

    // Find any \label that refers to an AMS automatic eqn number.
    while (true) {
      if (parent.tagName === "mtable") { break }
      const labels = parent.getElementsByClassName("tml-label");
      if (labels.length > 0) {
        const id = parent.attributes.id.value;
        labelMap[id] = String(i);
        break
      } else {
        parent = parent.parentElement;
      }
    }
  }

  // Find \labels associated with \tag
  const taggedEqns = document.getElementsByClassName('tml-tageqn');
  for (const parent of taggedEqns) {
    const labels = parent.getElementsByClassName("tml-label");
    if (labels.length > 0) {
      const tags = parent.getElementsByClassName("tml-tag");
      if (tags.length > 0) {
        const id = parent.attributes.id.value;
        labelMap[id] = tags[0].textContent;
      }
    }
  }

  // Populate \ref & \eqref text content
  const refs = block.getElementsByClassName("tml-ref");
  [...refs].forEach(ref => {
    const attr = ref.getAttribute("href");
    let str = labelMap[attr.slice(1)];
    if (ref.className.indexOf("tml-eqref") === -1) {
      // \ref. Omit parens.
      str = str.replace(/^\(/, "");
      str = str.replace(/\)$/, "");
    } else {
      // \eqref. Include parens
      if (str.charAt(0) !== "(") { str = "(" + str; }
      if (str.slice(-1) !== ")") { str =  str + ")"; }
    }
    const mtext = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mtext");
    mtext.appendChild(document.createTextNode(str));
    const math =  document.createElementNS("http://www.w3.org/1998/Math/MathML", "math");
    math.appendChild(mtext);
    ref.textContent = '';
    ref.appendChild(math);
  });
}

const findEndOfMath = function(delimiter, text, startIndex) {
  // Adapted from
  // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx
  let index = startIndex;
  let braceLevel = 0;

  const delimLength = delimiter.length;

  while (index < text.length) {
    const character = text[index];

    if (braceLevel <= 0 && text.slice(index, index + delimLength) === delimiter) {
      return index;
    } else if (character === "\\") {
      index++;
    } else if (character === "{") {
      braceLevel++;
    } else if (character === "}") {
      braceLevel--;
    }

    index++;
  }

  return -1;
};

const escapeRegex = function(string) {
  return string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
};

const amsRegex = /^\\(?:begin|(?:eq)?ref){/;

const splitAtDelimiters = function(text, delimiters) {
  let index;
  const data = [];

  const regexLeft = new RegExp(
    "(" + delimiters.map((x) => escapeRegex(x.left)).join("|") + ")"
  );

  while (true) {
    index = text.search(regexLeft);
    if (index === -1) {
      break;
    }
    if (index > 0) {
      data.push({
        type: "text",
        data: text.slice(0, index)
      });
      text = text.slice(index); // now text starts with delimiter
    }
    // ... so this always succeeds:
    const i = delimiters.findIndex((delim) => text.startsWith(delim.left));
    index = findEndOfMath(delimiters[i].right, text, delimiters[i].left.length);
    if (index === -1) {
      break;
    }
    const rawData = text.slice(0, index + delimiters[i].right.length);
    const math = amsRegex.test(rawData)
      ? rawData
      : text.slice(delimiters[i].left.length, index);
    data.push({
      type: "math",
      data: math,
      rawData,
      display: delimiters[i].display
    });
    text = text.slice(index + delimiters[i].right.length);
  }

  if (text !== "") {
    data.push({
      type: "text",
      data: text
    });
  }

  return data;
};

const defaultDelimiters = [
  { left: "$$", right: "$$", display: true },
  { left: "\\(", right: "\\)", display: false },
  // LaTeX uses $…$, but it ruins the display of normal `$` in text:
  // {left: "$", right: "$", display: false},
  // $ must come after $$

  // Render AMS environments even if outside $$…$$ delimiters.
  { left: "\\begin{equation}", right: "\\end{equation}", display: true },
  { left: "\\begin{equation*}", right: "\\end{equation*}", display: true },
  { left: "\\begin{align}", right: "\\end{align}", display: true },
  { left: "\\begin{align*}", right: "\\end{align*}", display: true },
  { left: "\\begin{alignat}", right: "\\end{alignat}", display: true },
  { left: "\\begin{alignat*}", right: "\\end{alignat*}", display: true },
  { left: "\\begin{gather}", right: "\\end{gather}", display: true },
  { left: "\\begin{gather*}", right: "\\end{gather*}", display: true },
  { left: "\\begin{CD}", right: "\\end{CD}", display: true },
  // Ditto \ref & \eqref
  { left: "\\ref{", right: "}", display: false },
  { left: "\\eqref{", right: "}", display: false },

  { left: "\\[", right: "\\]", display: true }
];

const firstDraftDelimiters = {
  "$": [
         { left: "$$", right: "$$", display: true },
         { left: "$`", right: "`$", display: false },
         { left: "$", right: "$", display: false }
  ],
  "(": [
    { left: "\\[", right: "\\]", display: true },
    { left: "\\(", right: "\\)", display: false }
  ]
};

const amsDelimiters = [
  { left: "\\begin{equation}", right: "\\end{equation}", display: true },
  { left: "\\begin{equation*}", right: "\\end{equation*}", display: true },
  { left: "\\begin{align}", right: "\\end{align}", display: true },
  { left: "\\begin{align*}", right: "\\end{align*}", display: true },
  { left: "\\begin{alignat}", right: "\\end{alignat}", display: true },
  { left: "\\begin{alignat*}", right: "\\end{alignat*}", display: true },
  { left: "\\begin{gather}", right: "\\end{gather}", display: true },
  { left: "\\begin{gather*}", right: "\\end{gather*}", display: true },
  { left: "\\begin{CD}", right: "\\end{CD}", display: true },
  { left: "\\ref{", right: "}", display: false },
  { left: "\\eqref{", right: "}", display: false }
];

const delimitersFromKey = key => {
  if (key === "$" || key === "(") {
    return firstDraftDelimiters[key];
  } else if (key === "$+" || key === "(+") {
    const firstDraft = firstDraftDelimiters[key.slice(0, 1)];
    return firstDraft.concat(amsDelimiters)
  } else if (key === "ams") {
    return amsDelimiters
  } else if (key === "all") {
    return (firstDraftDelimiters["("]).concat(firstDraftDelimiters["$"]).concat(amsDelimiters)
  } else {
    return defaultDelimiters
  }
};

/* Note: optionsCopy is mutated by this method. If it is ever exposed in the
 * API, we should copy it before mutating.
 */
const renderMathInText = function(text, optionsCopy) {
  const data = splitAtDelimiters(text, optionsCopy.delimiters);
  if (data.length === 1 && data[0].type === "text") {
    // There is no formula in the text.
    // Let's return null which means there is no need to replace
    // the current text node with a new one.
    return null;
  }

  const fragment = document.createDocumentFragment();

  for (let i = 0; i < data.length; i++) {
    if (data[i].type === "text") {
      fragment.appendChild(document.createTextNode(data[i].data));
    } else {
      const span = document.createElement("span");
      let math = data[i].data;
      // Override any display mode defined in the settings with that
      // defined by the text itself
      optionsCopy.displayMode = data[i].display;
      try {
        if (optionsCopy.preProcess) {
          math = optionsCopy.preProcess(math);
        }
        // Importing render() from temml.js would be a circular dependency.
        // So call the global version.
        // eslint-disable-next-line no-undef
        temml.render(math, span, optionsCopy);
      } catch (e) {
        if (!(e instanceof ParseError)) {
          throw e;
        }
        optionsCopy.errorCallback(
          "Temml auto-render: Failed to parse `" + data[i].data + "` with ",
          e
        );
        fragment.appendChild(document.createTextNode(data[i].rawData));
        continue;
      }
      fragment.appendChild(span);
    }
  }

  return fragment;
};

const renderElem = function(elem, optionsCopy) {
  for (let i = 0; i < elem.childNodes.length; i++) {
    const childNode = elem.childNodes[i];
    if (childNode.nodeType === 3) {
      // Text node
      const frag = renderMathInText(childNode.textContent, optionsCopy);
      if (frag) {
        i += frag.childNodes.length - 1;
        elem.replaceChild(frag, childNode);
      }
    } else if (childNode.nodeType === 1) {
      // Element node
      const className = " " + childNode.className + " ";
      const shouldRender =
        optionsCopy.ignoredTags.indexOf(childNode.nodeName.toLowerCase()) === -1 &&
        optionsCopy.ignoredClasses.every((x) => className.indexOf(" " + x + " ") === -1);

      if (shouldRender) {
        renderElem(childNode, optionsCopy);
      }
    }
    // Otherwise, it's something else, and ignore it.
  }
};

const renderMathInElement = function(elem, options) {
  if (!elem) {
    throw new Error("No element provided to render");
  }

  const optionsCopy = {};

  // Object.assign(optionsCopy, option)
  for (const option in options) {
    if (Object.prototype.hasOwnProperty.call(options, option)) {
      optionsCopy[option] = options[option];
    }
  }

  if (optionsCopy.fences) {
    optionsCopy.delimiters = delimitersFromKey(optionsCopy.fences);
  } else {
    optionsCopy.delimiters = optionsCopy.delimiters || defaultDelimiters;
  }
  optionsCopy.ignoredTags = optionsCopy.ignoredTags || [
    "script",
    "noscript",
    "style",
    "textarea",
    "pre",
    "code",
    "option"
  ];
  optionsCopy.ignoredClasses = optionsCopy.ignoredClasses || [];
  // eslint-disable-next-line no-console
  optionsCopy.errorCallback = optionsCopy.errorCallback || console.error;

  // Enable sharing of global macros defined via `\gdef` between different
  // math elements within a single call to `renderMathInElement`.
  optionsCopy.macros = optionsCopy.macros || {};

  renderElem(elem, optionsCopy);
  postProcess(elem);
};

/* eslint no-console:0 */
/**
 * This is the main entry point for Temml. Here, we expose functions for
 * rendering expressions either to DOM nodes or to markup strings.
 *
 * We also expose the ParseError class to check if errors thrown from Temml are
 * errors in the expression, or errors in javascript handling.
 */


/**
 * @type {import('./temml').render}
 * Parse and build an expression, and place that expression in the DOM node
 * given.
 */
let render$1 = function(expression, baseNode, options = {}) {
  baseNode.textContent = "";
  const alreadyInMathElement = baseNode.tagName.toLowerCase() === "math";
  if (alreadyInMathElement) { options.wrap = "none"; }
  const math = renderToMathMLTree(expression, options);
  if (alreadyInMathElement) {
    // The <math> element already exists. Populate it.
    baseNode.textContent = "";
    math.children.forEach(e => { baseNode.appendChild(e.toNode()); });
  } else if (math.children.length > 1) {
    baseNode.textContent = "";
    math.children.forEach(e => { baseNode.appendChild(e.toNode()); });
  } else {
    baseNode.appendChild(math.toNode());
  }
};

// Temml's styles don't work properly in quirks mode. Print out an error, and
// disable rendering.
if (typeof document !== "undefined") {
  if (document.compatMode !== "CSS1Compat") {
    typeof console !== "undefined" &&
      console.warn(
        "Warning: Temml doesn't work in quirks mode. Make sure your " +
          "website has a suitable doctype."
      );

    render$1 = function() {
      throw new ParseError("Temml doesn't work in quirks mode.");
    };
  }
}

/**
 * @type {import('./temml').renderToString}
 * Parse and build an expression, and return the markup for that.
 */
const renderToString = function(expression, options) {
  const markup = renderToMathMLTree(expression, options).toMarkup();
  return markup;
};

/**
 * @type {import('./temml').generateParseTree}
 * Parse an expression and return the parse tree.
 */
const generateParseTree = function(expression, options) {
  const settings = new Settings(options);
  return parseTree(expression, settings);
};

/**
 * @type {import('./temml').definePreamble}
 * Take an expression which contains a preamble.
 * Parse it and return the macros.
 */
const definePreamble = function(expression, options) {
  const settings = new Settings(options);
  settings.macros = {};
  if (!(typeof expression === "string" || expression instanceof String)) {
    throw new TypeError("Temml can only parse string typed expression")
  }
  const parser = new Parser(expression, settings, true);
  // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors
  delete parser.gullet.macros.current["\\df@tag"];
  const macros = parser.parse();
  return macros
};

/**
 * If the given error is a Temml ParseError,
 * renders the invalid LaTeX as a span with hover title giving the Temml
 * error message.  Otherwise, simply throws the error.
 */
const renderError = function(error, expression, options) {
  if (options.throwOnError || !(error instanceof ParseError)) {
    throw error;
  }
  const node = new Span(["temml-error"], [new TextNode$1(expression + "\n\n" + error.toString())]);
  node.style.color = options.errorColor;
  node.style.whiteSpace = "pre-line";
  return node;
};

/**
 * @type {import('./temml').renderToMathMLTree}
 * Generates and returns the Temml build tree. This is used for advanced
 * use cases (like rendering to custom output).
 */
const renderToMathMLTree = function(expression, options) {
  const settings = new Settings(options);
  try {
    const tree = parseTree(expression, settings);
    const style = new Style({
      level: settings.displayMode ? StyleLevel.DISPLAY : StyleLevel.TEXT,
      maxSize: settings.maxSize
    });
    return buildMathML(tree, expression, style, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};

/** @type {import('./temml').default} */
var temml$1 = {
  /**
   * Current Temml version
   */
  version: version,
  /**
   * Renders the given LaTeX into MathML, and adds
   * it as a child to the specified DOM node.
   */
  render: render$1,
  /**
   * Renders the given LaTeX into MathML string,
   * for sending to the client.
   */
  renderToString,
  /**
   * Finds all the math delimiters in a given element of a running HTML document
   * and converts the contents of each instance into a <math> element.
   */
  renderMathInElement,
  /**
   * Post-process an entire HTML block.
   * Writes AMS auto-numbers and implements \ref{}.
   * Typcally called once, after a loop has rendered many individual spans.
   */
  postProcess,
  /**
   * Temml error, usually during parsing.
   */
  ParseError,
  /**
   * Creates a set of macros with document-wide scope.
   */
  definePreamble,
  /**
   * Parses the given LaTeX into Temml's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __parse: generateParseTree,
  /**
   * Renders the given LaTeX into a MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToMathMLTree: renderToMathMLTree,
  /**
   * adds a new symbol to builtin symbols table
   */
  __defineSymbol: defineSymbol,
  /**
   * adds a new macro to builtin macro list
   */
  __defineMacro: defineMacro
};

/*
 * This file bundles together and exposes the calculation parts of Hurmet.
 * I use Rollup to create a UMD module from this code.
 * That way, one file can expose the same functionality to (1) the Hurmet.org web page,
 * (2) the REPL in the reference manual, (3) the script that transpiles
 * the Hurmet reference manual from Markdown to HTML, and (4) unit testing.
 *
 * Some of Hurmet’s exported functions are valuable only to the Hurmet.org web page.
 * If you wish to use Hurmet’s math parsing and/or calculation abilities,
 * the two functions you want are:
 *   parse(entry: string, formats?: { decimalFormat: string, dateFormat: string })
 *   calculate(entry: string, vars?: Object, draftMode?: boolean,
 *             formats?: { decimalFormat: string, dateFormat: string })
 *
 *   parse() returns a TeX string.
 *   calculate() returns either a TeX string or a string in Hurmet calculation syntax.
 */

const render = (tex, dom, options) => {
  temml$1.render(tex, dom, options);
};

var hurmet = {
  parse: parse$1,
  calculate,
  compile,
  md2ast,
  md2html,
  hurmet2html,
  scanModule,
  tex2Calc,
  updateCalculations,
  render,
  Rnl
};

/* eslint-disable */

// Helpers for creating a schema that supports tables.

function getCellAttrs(dom, extraAttrs) {
  let widthAttr = dom.getAttribute("data-colwidth");
  let widths = widthAttr && /^\d+(,\d+)*$/.test(widthAttr) ? widthAttr.split(",").map(s => Number(s)) : null;
  let colspan = Number(dom.getAttribute("colspan") || 1);
  let result = {
    colspan,
    rowspan: Number(dom.getAttribute("rowspan") || 1),
    colwidth: widths && widths.length == colspan ? widths : null
  };
  for (let prop in extraAttrs) {
    let getter = extraAttrs[prop].getFromDOM;
    let value = getter && getter(dom);
    if (value != null) result[prop] = value;
  }
  return result
}

function setCellAttrs(node, extraAttrs) {
  let attrs = {};
  if (node.attrs.colspan != 1) attrs.colspan = node.attrs.colspan;
  if (node.attrs.rowspan != 1) attrs.rowspan = node.attrs.rowspan;
  if (node.attrs.colwidth)
    attrs["data-colwidth"] = node.attrs.colwidth.join(",");
  for (let prop in extraAttrs) {
    let setter = extraAttrs[prop].setDOMAttr;
    if (setter) setter(node.attrs[prop], attrs);
  }
  return attrs
}

const functionOrModuleRegEx = /^ *(?:function|module) /;
 
// :: Object
// [Specs](#model.NodeSpec) for the nodes defined in this schema.
const nodes = {
  // :: NodeSpec The top level document node.
  doc: {
    content: "block+",
    // Hurmet uses doc.attrs for document metadata, but ProseMirror transactions
    // can not reach doc.attrs. So any user change to document metadata will be
    // outside the undo stack.
    attrs: {
      decimalFormat: { default: '1,000,000.', validate: "string" },
      dateFormat: { default: 'yyyy-mm-dd', validate: "string" },
      inDraftMode: { default: false, validate: "boolean" },
      saveIsValid: { default: false, validate: "boolean" },
      fileHandle: { default: null, validate: "null|string" },
      saveDate: { default: null, validate: "null|string" },
      fontSize: { default: 12, validate: "number|string" },       // 12 | 10
      pageSize: { default: "letter", validate: "string" }, // letter | A4
      snapshots: { default: [] },
      fallbacks: { default: {} }       // Fallback data, in case fetched files are unavailable
    }
  },

  fragment: {
    content: "block+"
  },

  // :: NodeSpec A plain paragraph textblock. Represented in the DOM as a `<p>` element.
  paragraph: {
    content: "inline*",
    group: "block",
    parseDOM: [{tag: "p"}], // priority is the default, 50
    toDOM() { return ["p", 0] }
  },

  // An indented div.
  indented: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "div.indented"}],
    toDOM() { return ['div', { class: 'indented' }, 0] }
  },

  // A center-aligned div.
  centered: {
    content: "block+",
    group: "block",
    defining: true,
    parseDOM: [{tag: "div.centered"}],
    toDOM () { return ['div', { class: 'centered' }, 0] },
  },

  // A right-justified div.
  right_justified: {
    content: "block+",
    group: "block",
    defining: true,
    parseDOM: [{tag: "div.right-justified"}],
    toDOM () { return ['div', { class: 'right-justified' }, 0] },
  },

  // A boxed div.
  boxed: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "div.boxed"}],
    toDOM() { return ['div', { class: 'boxed' }, 0] }
  },

  // Epigraph
  epigraph: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "blockquote.epigraph"}],
    toDOM() { return ['blockquote', { class: 'epigraph' }, 0] }
  },

  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.
  blockquote: {
    content: "block+",
    group: "block",
    defining: true,
    parseDOM: [{tag: "blockquote"}],
    toDOM() { return ["blockquote", 0] }
  },

  // A "Note" alert div.
  note: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "div.note"}],
    toDOM() { return ['div', { class: 'note' }, 0] }
  },

  // A "Tip" alert div.
  tip: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "div.tip"}],
    toDOM() { return ['div', { class: 'tip' }, 0] }
  },

  // An "Inportant" alert div.
  important: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "div.important"}],
    toDOM() { return ['div', { class: 'important' }, 0] }
  },

  // A "Warning" alert div.
  warning: {
    content: "block+",
    group: "block",
    defining: true,
	  parseDOM: [{tag: "div.warning"}],
    toDOM() { return ['div', { class: 'warning' }, 0] }
  },

  // :: NodeSpec A horizontal rule (`<hr>`).
  horizontal_rule: {
    group: "block",
    parseDOM: [{tag: "hr"}],
    toDOM() { return ["hr"] }
  },

  // :: NodeSpec A heading textblock, with a `level` attribute that
  // should hold the number 1 to 6. Parsed and serialized as `<h1>` to
  // `<h6>` elements.
  heading: {
    attrs: {level: { default: 1, validate: "number" }},
    content: "inline*",
    group: "block",
    defining: true,
    parseDOM: [{tag: "h1", attrs: {level: 1}},
               {tag: "h2", attrs: {level: 2}},
               {tag: "h3", attrs: {level: 3}},
               {tag: "h4", attrs: {level: 4}},
               {tag: "h5", attrs: {level: 5}},
               {tag: "h6", attrs: {level: 6}}],
    toDOM(node) { return ["h" + node.attrs.level, 0] }
  },

  // :: NodeSpec A code listing. Disallows marks or non-text inline
  // nodes by default. Represented as a `<pre>` element with a
  // `<code>` element inside of it.
  code_block: {
    content: "text*",
    marks: "",
    group: "block",
    code: true,
    defining: true,
    parseDOM: [{tag: "pre", preserveWhitespace: "full"}],
    toDOM() { return ["pre", ["code", 0]] }
  },

  // :: NodeSpec The text node.
  text: {
    group: "inline"
  },

  // :: NodeSpec An inline image (`<img>`) node.
  image: {
    inline: true,
    attrs: {
      src: { validate: "string" },
      alt: {default: null, validate: "null|string"},
      width: {default: null, validate: "null|string"},
      class: {default: "inline", validate: "string"}
    },
    group: "inline",
    draggable: true,
    parseDOM: [{tag: "img[src]", getAttrs(dom) {
      return {
        src: dom.getAttribute("src"),
        alt: dom.getAttribute("alt"),
        width: dom.getAttribute("width"),
        class: dom.getAttribute("class")
      }
    }}],
    toDOM(node) { return ["img", node.attrs] }
  },

  // :: NodeSpec A block image (`<img>`) node, for inclusion in a <figure>
  figimg: {
    attrs: {
      src: {validate: "string"},
      alt: {default: null, validate: "null|string"},
      width: {default: null, validate: "null|string"},
    },
    group: "block",
    draggable: false,
    parseDOM: [{tag: "img.figimg", getAttrs(dom) {
      return {
        src: dom.getAttribute("src"),
        alt: dom.getAttribute("alt"),
        width: dom.getAttribute("width"),
        class: "figimg"
      }
    }}],
    toDOM(node) { return ["img", node.attrs] }
  },

  figure: {
    content: "block{2,2}",
    attrs: { class: {default: "auto", validate: "string"} },
    group: "block",
    marks: "",
    parseDOM: [{tag: "figure", getAttrs(dom) {
      return { class: dom.getAttribute("class") }
    }}],
    toDOM(node) { return ["figure", node.attrs, 0] }
  },
  figcaption: {
    content: "inline*",
    attrs: { class: {default: null, validate: "null|string"} },
    group: "block",
    parseDOM: [{tag: "figcaption", getAttrs(dom) {
      return { class: dom.getAttribute("class") }
    }}],
    toDOM(node) { 
      return ["figcaption", node.attrs, 0] 
    }
  },

  footnote: {
    group: "inline",
    content: "inline*",
    inline: true,
    atom: true,
    toDOM: () => ["footnote", 0],
    parseDOM: [{tag: "footnote"}]
  },

  // Table of contents
  toc: {
    atom: true,
    attrs: {
      start: { default: 1, validate: "number" },
      end:   { default: 2, validate: "number" },
      body:  { default: [] }
    },
    group: "block",
    draggable: true,
    parseDOM: [{tag: "ul.toc",  getAttrs(dom) {
      const [start, end] = tocLevels(dom.getAttribute('data-levels'));
      const body = JSON.parse(dom.getAttribute('data-body'));
      return { start, end, body }
    }}],
    toDOM(node) {
      const dom = document.createElement('ul');
      dom.dataset.levels = String(node.attrs.start) + ".." + String(node.attrs.end);
      dom.dataset.body = JSON.stringify(node.attrs.body);
      renderToC(node.attrs.body, dom);
      return dom
     }
  },

  ordered_list: {
    attrs: { class: { default: "decimal", validate: "string" }, order: {default: 1, validate: "number"}},
    content: "list_item+|tight_list_item+",
    group: "block",
    parseDOM: [{tag: "ol", getAttrs(dom) {
      return {
        class: dom.getAttribute("class"),
        order: dom.hasAttribute("start") ? + dom.getAttribute("start") : 1
      }
    }}],
    toDOM(node) {
      return node.attrs.order == 1 && node.attrs.class === "decimal"
      ? ["ol", 0]
      : node.attrs.order == 1
      ? ["ol", { class: node.attrs.class }, 0]
      : node.attrs.class === "decimal"
      ? ["ol", {start: node.attrs.order}, 0]
      : ["ol", {class: node.attrs.class, start: node.attrs.order}, 0]
    }
  },
  
  // A bullet list node spec, represented in the DOM as `<ul>`.
  bullet_list: {
    content: "list_item+|tight_list_item+",
    group: "block",
    parseDOM: [{tag: "ul"}],
    toDOM() { return ["ul", 0] }
  },

  tight_list_item: {
    content: "paragraph",
    parseDOM: [{tag: "li.tight"}],
    toDOM() { return ["li", { class: 'tight' }, 0] },
    defining: true
  },

  // A list item (`<li>`) spec.
  list_item: {
    content: "block*",
    parseDOM: [{tag: "li"}],
    toDOM() { return ["li", 0] },
    defining: true
  },

  // :: NodeSpec A hard line break, represented in the DOM as `<br>`.
  hard_break: {
    inline: true,
    group: "inline",
    selectable: false,
    parseDOM: [{tag: "br"}],
    toDOM() { return ["br"] }
  },

  table: {
    content: "table_row+",
    tableRole: "table",
    group: "block",
    attrs: {
      class: { default: 'grid', validate: "string" },
      name: { default: "", validate: "string" },
      numRows: { default: 0, validage: "number" }, // Used in spreadsheetSum
      columnMap: { default: {} },
      unitMap: { default: [] },
      units: { default: {} },
      rowMap: { default: {} },
      dependencies: { default: null },
      dtype: { default: dt.NULL, validate: "number" }  // or dt.SPREADSHEET
    },
    parseDOM: [{tag: "table", getAttrs(dom) {
      const className = dom.getAttribute('class');
      let dtype = 0;
      if (className) {
        dtype = className.indexOf(" spreadsheet") > -1 ? dt.SPREADSHEET : 0;
      }
      return {
        class: className || "grid",
        name: dom.getAttribute('id'),
        dtype
      }
    }}],
    toDOM(node) {
      // ProseMirror does not use this toDOM().
      // Instead, it uses the TableView class in prosemirror-tables.
      // That's why editPM inserts some code into prosemirror.js.
      return [
        'table',
        { class: node.attrs.class, id: node.attrs.name },
        ["tbody", 0]
      ]
    }
  },
  table_row: {
    content: "(table_cell | table_header)*",
    tableRole: "row",
    parseDOM: [{tag: "tr"}],
    toDOM() { return ["tr", 0] }
  },
  table_cell: {
    content: "block+|spreadsheet_cell",
    attrs: {
      colspan: {default: 1, validate: "number"},
      rowspan: {default: 1, validate: "number"},
      colwidth: {default: null},
      background: {default: null, validate: "null|string"}
    },
    tableRole: "cell",
    isolating: true,
    parseDOM: [{tag: "td", getAttrs: dom => getCellAttrs(dom, [])}],
    toDOM(node) { return ["td", setCellAttrs(node, []), 0] }
  },
  table_header: {
    content: "block+",
    attrs: {
      colspan: {default: 1, validate: "number"},
      rowspan: {default: 1, validate: "number"},
      colwidth: {default: null},
      background: {default: null, validate: "null|string"}
    },
    tableRole: "header_cell",
    isolating: true,
    parseDOM: [{tag: "th", getAttrs: dom => getCellAttrs(dom, [])}],
    toDOM(node) { return ["th", setCellAttrs(node, []), 0] }
  },

  // Hurmet uses the <header> element for print-headers
  header: {
    content: "table",
    group: "block",
    defining: true,
    parseDOM: [{tag: "header"}],
    toDOM() { return ["header", 0] }
  },

  spreadsheet_cell: {
    atom: true,
    defining: false,
    marks: "",
    group: "block",
    attrs: {
      entry: { default: "", validate: "string" },
      name: { default: "", validate: "string" },
      rpn: { default: "", validate: "string" },
      resulttemplate: { default: "@", validate: "string" },
      altresulttemplate: { default: "@", validate: "string" },
      resultdisplay: { default: "@", validate: "string" },
      value: { default: null },
      dependencies: {default: []},
      display: { default: "", validate: "string" },
      unit: {default: null},
      dtype: {default: 0, validate: "number"},
    },
    parseDOM: [{tag: "div.hurmet-cell",  getAttrs(dom) {
      return { entry: dom.getAttribute('data-entry') }
    }}],
    toDOM(node) {
      let dom;
      dom = document.createElement('div');
      dom.classList = "hurmet-cell";
      dom.dataset.entry = node.attrs.entry;
      dom.innerHTML = node.attrs.display
        ? node.attrs.display
        : node.attrs.entry;
      return dom
    }
  },

  calculation: {
    atom: true, // No direct editing. Instead, edit via CalcView in file nodeviews.js.
    defining: false,
    marks: "",
    group: "inline",
    inline: true,
    attrs: {
      // I cache several items with each Hurmet calculation cell.
      // By keeping this data when the author submits a cell, I avoid having to
      // redo the work each time a cell calculation is updated with a new variable value.
      // Most of this info is kept only during run-time.
      // (What isn't saved cannot break a document.)
      // When a document is re-opened, all but the entries must be recalculated.
      entry: { default: "" }, //          Raw string input by the author, edited for decimal.
      displayMode: { default: false }, // Type set in TeX display mode if true.
      name: {default: null}, //           Name of cell, as in "x" from x = 12
      tex: {default: ""}, //              The string I pass to Temml for final rendering.
      alt: {default: ""}, //              The string I render when in draft mode.
      md:  {default: null}, //            The Markdown string in the saved document
      displaySelector: {default: ""}, //  Display selector: (??|?|%%|%|@@|@|!!|!)
      rpn: {default: null}, //            RPN from parser.js, for calculation.
      dependencies: {default: []}, //     For use in avoiding unnecesary calculations
      inDraftMode: {default: false},
      resulttemplate: {default: null}, // String with units, but waiting for a value.
      altresulttemplate: {default: null}, // Ditto, but in draft mode.
      resultdisplay: {default: null}, //  Result after unit conversions and rounding.
      template: {default: null}, //       tex, including echo, but waiting for plugged-in values.
      altTemplate: {default: ""}, //      Ditto, but in draft mode.
      value: {default: null},  //         Value passed to other calculations.
      unit: {default: null}, //           Unit specified by user, in which to display the result.
      dtype: {default: 0}, //             Data type of the result. See constants.js.
      isFetch: {default: false}, //       Identifies cells that need async treatment.
      fallback: {default: ""}, //         Fallback data, in case imported files are unavailable.
      error: {default: false} //          boolean. True if calculation resulted in an error.
    },
    parseDOM: [{tag: "span.hurmet-calc",  getAttrs(dom) {
      const displayMode = Boolean(dom.getAttribute('data-display')) || false;
      return { entry: dom.getAttribute('data-entry'), displayMode }
    }}],
    toDOM(node) {
      let dom;
      //if (node.attrs.dtype !== dt.IMAGE) {
      dom = document.createElement('span');
      dom.classList = "hurmet-calc";
      if (node.attrs.dtype && node.attrs.dtype === dt.DRAWING) {
        dom = document.createElement('span');
        if (node.attrs.resultdisplay.attrs.float) {
          dom.style.float = node.attrs.resultdisplay.attrs.float;
        }
        dom.appendChild(renderSVG(node.attrs.resultdisplay));
      } else if (node.attrs.dtype && node.attrs.dtype === dt.MODULE &&
        functionOrModuleRegEx.test(node.attrs.entry)) {
        dom.appendChild(document.createElement('span'));
        dom.firstChild.className = "hmt-code";
        dom.firstChild.textContent = node.attrs.entry;
      } else if (node.attrs.inDraftMode || !node.attrs.tex) {
        dom.appendChild(document.createElement('span'));
        dom.firstChild.className = "hmt-code";
        dom.firstChild.textContent = node.attrs.alt ? node.attrs.alt : node.attrs.entry;
      } else {
        const tex = node.attrs.tex;
        hurmet.render(tex, dom, {
          displayMode: node.attrs.displayMode,
          trust: (context) => context.command === '\\class' && 
            (context.class === "special-fraction" || context.class === "date-result"),
          wrap: "="
        });
      }
      if (node.attrs.displayMode) {
        dom.style.display = "flex";
        dom.style.justifyContent = "center";
        dom.style.margin = "0.5em 0";
      }
      // Before writing to DOM, I filter out most of the run-time info in node.attrs.
      dom.dataset.entry = node.attrs.entry;
      if (node.attrs.displayMode) {
        dom.dataset.display = "true";
      } else if ("display" in dom.dataset) {
        delete dom.dataset.display;
      }
      return dom
    }
  },

  tex: {
    // For display of LaTeX math.
    atom: true,  // No direct editing. See TexView in nodeviews.js
    marks: "",
    group: "inline",
    inline: true,
    attrs: {
      tex: {default: "", validate: "string"},
      displayMode: { default: false, validate: "boolean" }
    },
    parseDOM: [{tag: "span.hurmet-tex",  getAttrs(dom) {
      const displayMode = Boolean(dom.getAttribute('data-display')) || false;
      return { tex: dom.getAttribute('data-tex'), displayMode }
    }}],
    toDOM(node) {
      const dom = document.createElement('span');
      dom.classList = "hurmet-tex";
      const tex = node.attrs.tex;
      dom.dataset.tex = tex;
      if (node.attrs.displayMode) {
        dom.dataset.display = "true";
      } else if ("display" in dom.dataset) {
        delete dom.dataset.display;
      }
      hurmet.render(tex, dom, { displayMode: node.attrs.displayMode, wrap: "=" });
      if (node.attrs.displayMode) {
        dom.style.display = "flex";
        dom.style.justifyContent = "center";
        dom.style.margin = "0.5em 0";
      }
      return dom
    }
  },

  comment: {
    content: "block+",
    group: "block",
    isolating: true,
    parseDOM: [{tag: "aside.comment"}],
    toDOM(node) { return ["aside", { class: 'comment' }, 0] }
  }

};

// :: Object [Specs](#model.MarkSpec) for the marks in the schema.
const marks = {
  // :: MarkSpec A link. Has `href` and `title` attributes. `title`
  // defaults to the empty string. Rendered and parsed as an `<a>`
  // element.
  link: {
    attrs: { href: {} },
    inclusive: false,
    parseDOM: [{tag: "a[href]", getAttrs(dom) {
      return {href: dom.getAttribute("href")}
    }}],
    toDOM(node) {
      node.attrs.title = node.attrs.href;
      return ["a", node.attrs] }
  },

  // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.
  // Has parse rules that also match `<i>` and `font-style: italic`.
  em: {
    parseDOM: [{tag: "i"}, {tag: "em"}, {style: "font-style=italic"}],
    toDOM() { return ["em"] }
  },

  // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules
  // also match `<b>` and `font-weight: bold`.
  strong: {
    parseDOM: [{tag: "strong"},
               // This works around a Google Docs misbehavior where
               // pasted content will be inexplicably wrapped in `<b>`
               // tags with a font-weight normal.
               {tag: "b", getAttrs: node => node.style.fontWeight != "normal" && null},
               {style: "font-weight", getAttrs: value => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null}],
    toDOM() { return ["strong"] }
  },

  // :: MarkSpec Code font mark. Represented as a `<code>` element.
  code: {
    parseDOM: [{tag: "code"}],
    toDOM() { return ["code"] }
  },

  // :: MarkSpec subscript mark. Represented as a `<sub>` element.
  subscript: {
    excludes: "superscript",
	  parseDOM: [{tag: "sub"}],
    toDOM() { return ["sub"] }
  },

  // :: MarkSpec superscript mark. Represented as a `<sup>` element.
  superscript: {
    excludes: "subscript",
	  parseDOM: [{tag: "sup"}],
    toDOM() { return ["sup"] }
  },

  // :: MarkSpec strikethru mark. Represented as a `<del>` element.
  strikethru: {
	  parseDOM: [{tag: "del"}],
    toDOM() { return ["del"] }
  },

    // :: MarkSpec superscript mark. Represented as a `<u>` element.
  underline: {
	  parseDOM: [{tag: "u"}],
    toDOM() { return ["u"] }
  },

  // :: MarkSpec highlight mark. Represented as a `<mark>` element.
  highlight: {
    parseDOM: [{tag: "mark"}],
    toDOM() { return ["mark"] }
  }
};


// :: (NodeType, ?Object) ? (state: EditorState, dispatch: ?(tr: Transaction)) ? bool
// Returns a command function that wraps the selection in a list with
// the given type an attributes. If `dispatch` is null, only return a
// value to indicate whether this is possible, but don't actually
// perform the change.
function wrapInList(listType, attrs) {
  return function(state, dispatch) {
    let {$from, $to} = state.selection;
    let range = $from.blockRange($to), doJoin = false, outerRange = range;
    if (!range) return false
    // This is at the top of an existing list item
    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
      // Don't do anything if this is the top of the list
      if ($from.index(range.depth - 1) == 0) return false
      let $insert = state.doc.resolve(range.start - 2);
      outerRange = new NodeRange($insert, $insert, range.depth);
      if (range.endIndex < range.parent.childCount)
        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
      doJoin = true;
    }
    let wrap = findWrapping(outerRange, listType, attrs, range);
    if (!wrap) return false
    if (dispatch) dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
    return true
  }
}

function doWrapInList(tr, range, wrappers, joinBefore, listType) {
  let content = Fragment.empty;
  for (let i = wrappers.length - 1; i >= 0; i--)
    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));

  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,
                                new Slice(content, 0, 0), wrappers.length, true));

  let found = 0;
  for (let i = 0; i < wrappers.length; i++) if (wrappers[i].type == listType) found = i + 1;
  let splitDepth = wrappers.length - found;

  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
      tr.split(splitPos, splitDepth);
      splitPos += 2 * splitDepth;
    }
    splitPos += parent.child(i).nodeSize;
  }
  return tr
}

const listItems = ["list_item", "tight_list_item"];

// :: (NodeType) ? (state: EditorState, dispatch: ?(tr: Transaction)) ? bool
// Build a command that splits a non-empty textblock at the top level
// of a list item by also splitting that list item.
function splitListItem(itemType) {
  return function(state, dispatch) {
    let {$from, $to, node} = state.selection;
    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) return false
    let grandParent = $from.node(-1);
    if (!listItems.includes(grandParent.type.name)) return false
    if ($from.parent.content.size == 0) {
      // In an empty block. If this is a nested list, the wrapping
      // list item should be split. Otherwise, bail out and let next
      // command handle lifting.
      if ($from.depth == 2 || $from.node(-3).type != itemType ||
          $from.index(-2) != $from.node(-2).childCount - 1) return false
      if (dispatch) {
        let wrap = Fragment.empty, keepItem = $from.index(-1) > 0;
        // Build a fragment containing empty versions of the structure
        // from the outer list item to the parent node of the cursor
        for (let d = $from.depth - (keepItem ? 1 : 2); d >= $from.depth - 3; d--)
          wrap = Fragment.from($from.node(d).copy(wrap));
        // Add a second list item with an empty default start node
        wrap = wrap.append(Fragment.from(itemType.createAndFill()));
        let tr = state.tr.replace($from.before(keepItem ? null : -1), $from.after(-3), new Slice(wrap, keepItem ? 3 : 2, 2));
        tr.setSelection(state.selection.constructor.near(tr.doc.resolve($from.pos + (keepItem ? 3 : 2))));
        dispatch(tr.scrollIntoView());
      }
      return true
    }
    let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
    let tr = state.tr.delete($from.pos, $to.pos);
    let types = nextType && [null, {type: nextType}];
    if (!canSplit(tr.doc, $from.pos, 2, types)) return false
    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView());
    return true
  }
}

// :: (NodeType) ? (state: EditorState, dispatch: ?(tr: Transaction)) ? bool
// Create a command to lift the list item around the selection up into
// a wrapping list.
function liftListItem(itemType) {
  return function(state, dispatch) {
    let {$from, $to} = state.selection;
    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType);
    if (!range) return false
    if (!dispatch) return true
    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list
      return liftToOuterList(state, dispatch, itemType, range)
    else // Outer list node
      return liftOutOfList(state, dispatch, range)
  }
}

function liftToOuterList(state, dispatch, itemType, range) {
  let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
  if (end < endOfList) {
    // There are siblings after the lifted items, which must become
    // children of the last item
    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList,
                                  new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
  }
  dispatch(tr.lift(range, liftTarget(range)).scrollIntoView());
  return true
}

function liftOutOfList(state, dispatch, range) {
  let tr = state.tr, list = range.parent;
  // Merge the list items into a single big item
  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
    pos -= list.child(i).nodeSize;
    tr.delete(pos - 1, pos + 1);
  }
  let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
  let parent = $start.node(-1), indexBefore = $start.index(-1);
  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,
                         item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
    return false
  let start = $start.pos, end = start + item.nodeSize;
  // Strip off the surrounding list. At the sides where we're not at
  // the end of the list, the existing list is closed. At sides where
  // this is the end, it is overwritten to its end.
  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,
                                new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))
                                          .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))),
                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
  dispatch(tr.scrollIntoView());
  return true
}

// :: (NodeType) ? (state: EditorState, dispatch: ?(tr: Transaction)) ? bool
// Create a command to sink the list item around the selection down
// into an inner list.
function sinkListItem(itemType) {
  return function(state, dispatch) {
    let {$from, $to} = state.selection;
    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType);
    if (!range) return false
    let startIndex = range.startIndex;
    if (startIndex == 0) return false
    let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
    if (nodeBefore.type != itemType) return false

    if (dispatch) {
      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
      let inner = Fragment.from(nestedBefore ? itemType.create() : null);
      let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.copy(inner)))),
                            nestedBefore ? 3 : 1, 0);
      let before = range.start, after = range.end;
      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,
                                                   before, after, slice, 1, true))
               .scrollIntoView());
    }
    return true
  }
}

// :: Schema
// This schema rougly corresponds to the document schema used by
// [CommonMark](http://commonmark.org/), minus the list elements,
// which are defined in the [`prosemirror-schema-list`](#schema-list)
// module.
//
// To reuse elements from this schema, extend or read from its
// `spec.nodes` and `spec.marks` [properties](#model.Schema.spec).
const schema = new Schema({nodes, marks});

const prefix$1 = "ProseMirror-prompt";

function insertHint(params) {
  if (params.inMathZone) {
    const range = new Range();
    range.setStart(params.textNode, params.start);
    range.setEnd(params.textNode, params.end);
    const hintNode = document.createElement('text');
    hintNode.innerHTML = params.str;
    range.deleteContents();
    range.insertNode(hintNode);
    const sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
    sel.collapseToEnd();
  } else {
    const tr = params.state.tr;
    tr.replaceSelectionWith(params.state.schema.text(params.str));
    params.dispatch(tr);
  }
  document.getElementsByClassName("ProseMirror-prompt")[0].remove();
}

function openPrompt(options) {
  const wrapper = document.body.appendChild(document.createElement("div"));
  wrapper.className = prefix$1;

  const mouseOutside = e => { if (!wrapper.contains(e.target)) { close(); } };
  setTimeout(() => window.addEventListener("mousedown", mouseOutside), 50);
  const close = () => {
    window.removeEventListener("mousedown", mouseOutside);
    if (wrapper.parentNode) { wrapper.parentNode.removeChild(wrapper); }
  };

  const domFields = [];
  // eslint-disable-next-line guard-for-in
  for (const name in options.fields) {
    domFields.push(options.fields[name].render());
  }
  const submitButton = document.createElement("button");
  submitButton.type = "submit";
  submitButton.className = prefix$1 + "-submit";
  submitButton.textContent = "OK";
  const cancelButton = document.createElement("button");
  cancelButton.type = "button";
  cancelButton.className = prefix$1 + "-cancel";
  cancelButton.textContent = "Cancel";
  cancelButton.addEventListener("click", close);

  const form = wrapper.appendChild(document.createElement("form"));
  if (options.title) {
    form.appendChild(document.createElement("h5")).textContent = options.title;
  }
  if (options.note) {
    const note = document.createElement("p");
    note.textContent = options.note;
    form.append(note);
  }
  domFields.forEach(field => {
    form.appendChild(document.createElement("div")).appendChild(field);
  });

  if (options.radioButtons) {
    // Create buttons for image placement or rounding criteria.
    const radioGroup = document.createElement("div");
    radioGroup.style.display = "flex";
    radioGroup.style["flex-direction"] = options.radioButtons.direction;
    radioGroup.style.margin = "8px 0 8px 0";
    const current = options.radioButtons.current;
    options.radioButtons.buttons.forEach(btn => {
      const span = document.createElement("span");
      const button = document.createElement("input");
      button.type = "radio";
      button.name = options.radioButtons.name;
      button.value = btn[0]; // label
      button.setAttribute('id', btn[0]);
      if (btn[0] === current) { button.setAttribute("checked", null); }
      const labelTag = document.createElement("label");
      labelTag.setAttribute("for", btn[1]);
      labelTag.appendChild(document.createTextNode(btn[1]));
      span.appendChild(button);
      span.appendChild(labelTag);
      radioGroup.appendChild(span);
    });
    if (options.radioButtons.name !== "rounding") {
      form.appendChild(radioGroup);
    } else {
      const container = document.createElement("div");
      container.style.display = "flex";
      container.style["flex-direction"] = "row";
      container.style["align-items"] = "center";
      container.appendChild(radioGroup);
      const digitDiv = document.createElement("div");
      digitDiv.style.display = "flex";
      digitDiv.style["flex-direction"] = "column";
      digitDiv.style.margin = "3em";
      const digitLabel = document.createElement("label");
      digitDiv.appendChild(digitLabel);
      digitLabel.setAttribute("for", "digits");
      digitLabel.textContent = "Number of digits";
      const digitBox = document.createElement("input");
      digitBox.setAttribute("type", "text");
      digitBox.setAttribute("name", "digits");
      digitBox.style.width = "3em";
      digitBox.setAttribute("value", options.numDigits);
      digitDiv.appendChild(digitBox);
      container.appendChild(digitDiv);
      form.appendChild(container);
    }
  }

  let checkbox;
  if (options.checkbox) {
    // Create a checkbox
    checkbox = form.appendChild(document.createElement("input"));
    checkbox.setAttribute("type", "checkbox");
    checkbox.setAttribute("id", "checkbox");
    const checkboxLabel = form.appendChild(document.createElement("label"));
    checkboxLabel.setAttribute("for", "checkbox");
    checkboxLabel.innerHTML = options.checkbox.name;
    if (options.checkbox.checked) { checkbox.checked = true; }
  } else {
    checkbox = { checked: false };
  }

  if (options.hints) {
    const sel = document.getSelection();
    let node = sel.anchorNode;
    let inMathZone = false;
    let start = -1;
    let end = -1;
    if (node.nodeType === 3 && node.parentNode.parentNode.classList.contains("math-code")) {
      inMathZone = true;
      start = Math.min(sel.anchorOffset, sel.extentOffset);
      end = Math.max(sel.anchorOffset, sel.extentOffset);
    } else if (node.nodeType === 1 && node.parentNode.classList.contains("math-code")) {
      inMathZone = true;
      if (node.children.length > 0) {
        node = node.firstChild;
        start = node.length;
        end = node.length;
      } else {
        // Empty math zone, i.e., no text node children.
        start = 0;
        end = 0;
      }
    } else {
      start = options.state.selection.$from;
      end = options.state.selection.$to;
    }

    if (options.title === "Display Selectors") {
      const hintButtons = form.appendChild(document.createElement("table"));
      hintButtons.className = "ProseMirror grid c1c c2c";
      hintButtons.appendChild(document.createElement("tr"));
      hintButtons.firstChild.append(document.createElement("th"));
      hintButtons.firstChild.firstChild.textContent = "Regular";
      hintButtons.firstChild.append(document.createElement("th"));
      hintButtons.firstChild.children[1].textContent = "Unit-Aware";
      hintButtons.firstChild.append(document.createElement("th"));
      hintButtons.firstChild.children[2].textContent = "How much to display?";
      for (let i = 0; i < 4; i++) {
        hintButtons.appendChild(document.createElement("tr"));
        for (let j = 0; j < 3; j++) {
          hintButtons.children[i + 1].append(document.createElement("td"));
          if (j < 2) {
            const button = document.createElement("button");
            button.className = "hint-button";
            button.textContent = options.hints[i][j];
            const params = { inMathZone, start, end };
            if (inMathZone) {
              params.textNode = node;
            } else {
              params.state = options.state;
              params.dispatch = options.dispatch;
            }
            params.str = button.textContent;
            button.addEventListener('click', (event) => insertHint(params));
            hintButtons.children[i + 1].children[j].append(button);
          } else {
            hintButtons.children[i + 1].children[j].textContent = options.hints[i][j];
          }
        }
      }
    } else {
      const hintButtons = form.appendChild(document.createElement("div"));
      for (const hintRow of options.hints) {
        for (const hint of hintRow) {
          const button = document.createElement("button");
          button.className = "hint-button";
          const params = { inMathZone, start, end };
          if (inMathZone) {
            params.textNode = node;
          } else {
            params.state = options.state;
            params.dispatch = options.dispatch;
          }
          if (options.title === "Accents") {
            button.innerHTML = hint[0];
            params.str = hint[1];
          } else {
            button.innerHTML = hint;
            params.str = hint;
          }
          button.addEventListener('click', (event) => insertHint(params));
          hintButtons.appendChild(button);
        }
        hintButtons.appendChild(document.createElement("br"));
      }
    }
  }

  const buttons = form.appendChild(document.createElement("div"));
  buttons.className = prefix$1 + "-buttons";
  buttons.appendChild(submitButton);
  buttons.appendChild(document.createTextNode(" "));
  buttons.appendChild(cancelButton);

  if (options.useOkButton) {
    buttons.lastChild.style.float = "right";
    buttons.style.display = "block";
  }

  const box = wrapper.getBoundingClientRect();
  wrapper.style.top = ((window.innerHeight - box.height) / 2) + "px";
  wrapper.style.left = ((window.innerWidth - box.width) / 2) + "px";

  const submit = () => {
    const params = getValues(options.fields, domFields);
    if (options.radioButtons) {
      if (options.radioButtons.name === "rounding") {
        params.value = form[options.radioButtons.name].value + form.digits.value;
      } else if (options.radioButtons.name === "dateFormat") {
        params.format = form[options.radioButtons.name].value;
      } else {
        params.class = form[options.radioButtons.name].value;
      }
    }
    if (options.src && !params.src) {
      params.src = options.src;
    }
    params.checkbox = checkbox.checked;
    if (params) {
      close();
      if (options.callback) {
        options.callback(params);
      }
    }
  };

  form.addEventListener("submit", e => {
    e.preventDefault();
    submit();
  });

  form.addEventListener("keydown", e => {
    if (e.keyCode === 27) {
      e.preventDefault();
      close();
    } else if (e.keyCode === 13) {
      const doSubmit = (options.useOkButton && e.shiftKey)
        ? true
        : !options.useOkButton && !(e.ctrlKey || e.metaKey || e.shiftKey)
        ? true
        : false;
      if (doSubmit) {
        e.preventDefault();
        submit();
      }
    } else if (e.keyCode === 9) {
      window.setTimeout(() => {
        if (!wrapper.contains(document.activeElement)) { close(); }
      }, 500);
    }
  });

  const input = form.elements[0];
  if (input && input.type && input.type === "text") {
    input.focus();
  }
}

function getValues(fields, domFields) {
  const result = Object.create(null);
  let i = 0;
  // eslint-disable-next-line guard-for-in
  for (const name in fields) {
    const field = fields[name];
    const dom = domFields[i++];
    const value = dom.tagName === "INPUT"
      ? field.read(dom)
      : field.read(dom.lastChild);
    const bad = field.validate(value);
    if (bad) {
      reportInvalid(dom, bad);
      return null
    }
    result[name] = field.clean(value);
  }
  return result
}

function reportInvalid(dom, message) {
  // FIXME this is awful and needs a lot more work
  const parent = dom.parentNode;
  const msg = parent.appendChild(document.createElement("div"));
  msg.style.left = (dom.offsetLeft + dom.offsetWidth + 2) + "px";
  msg.style.top = (dom.offsetTop - 5) + "px";
  msg.className = "ProseMirror-invalid";
  msg.textContent = message;
  setTimeout(() => parent.removeChild(msg), 1500);
}

// ::- The type of field that `FieldPrompt` expects to be passed to it.
class Field {
  // :: (Object)
  // Create a field with the given options. Options support by all
  // field types are:
  //
  // **`value`**`: ?any`
  //   : The starting value for the field.
  //
  // **`label`**`: string`
  //   : The label for the field.
  //
  // **`required`**`: ?bool`
  //   : Whether the field is required.
  //
  // **`validate`**`: ?(any) → ?string`
  //   : A function to validate the given value. Should return an
  //     error message if it is not valid.
  constructor(options) { this.options = options; }

  // render:: (state: EditorState, props: Object) → dom.Node
  // Render the field to the DOM. Should be implemented by all subclasses.

  // :: (dom.Node) → any
  // Read the field's value from its DOM node.
  read(dom) { return dom.value }

  // :: (any) → ?string
  // A field-type-specific validation function.
  validateType(_value) {}

  validate(value) {
    if (!value && this.options.required) {
      return "Required field"
    }
    return this.validateType(value) || (this.options.validate && this.options.validate(value))
  }

  clean(value) {
    return this.options.clean ? this.options.clean(value) : value
  }
}

// ::- A field class for single-line text fields.
class TextField extends Field {
  render() {
    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = this.options.label;
    input.value = this.options.value || "";
    input.autocomplete = "off";
    if (this.options.leader) {
      input.style.width = "50px";
      const leader = document.createElement("span");
      leader.textContent = this.options.leader;
      const div = document.createElement("div");
      div.appendChild(leader);
      div.appendChild(input);
      return div
    } else {
      return input
    }
  }
}

const prefix = "ProseMirror-prompt";

function openSelectPrompt(title, buttons, callback) {
  const wrapper = document.body.appendChild(document.createElement("div"));
  wrapper.className = prefix;

  const mouseOutside = e => { if (!wrapper.contains(e.target)) { close(); } };
  setTimeout(() => window.addEventListener("mousedown", mouseOutside), 50);
  const close = () => {
    window.removeEventListener("mousedown", mouseOutside);
    if (wrapper.parentNode) { wrapper.parentNode.removeChild(wrapper); }
  };

  const form = wrapper.appendChild(document.createElement("form"));
  form.appendChild(document.createElement("h5")).textContent = title;

  for (let i = 0; i < buttons.length; i++) {
    const button = document.createElement("button");
    button.type = "button";
    button.className = prefix + "-button";
    button.textContent = buttons[i].textContent;
    button.dataset.pos = buttons[i].pos;
    button.onclick = function(e) {
      const pos = e.target.dataset.pos;
      close();
      callback(pos);
    };
    form.appendChild(button);
  }

  const box = wrapper.getBoundingClientRect();
  wrapper.style.top = ((window.innerHeight - box.height) / 2) + "px";
  wrapper.style.left = ((window.innerWidth - box.width) / 2) + "px";
}

function draftMode(state, dispatch, calcNode) {
  // Toggle the document's draft mode.
  // When in draft mode, Hurmet displays calc zones in plain text and omits the blue echo.
  const inDraftMode = !state.doc.attrs.inDraftMode;
  state.doc.attrs.inDraftMode = inDraftMode;
  const tr = state.tr;  // Create a ProseMirror transacation.
  state.doc.nodesBetween(0, state.doc.content.size, function(node, pos) {
    if (node.type.name === "calculation") {
      const attrs = Object.assign({}, node.attrs);
      attrs.inDraftMode = inDraftMode;
      tr.replaceWith(pos, pos + 1, calcNode.createAndFill(attrs));
    }
  });
  dispatch(tr);
}

const handleContents = (view, schema, str, format) => {
  // Strip the BOM, if any, from the beginning of the result string.
  if (/^ï»¿/.test(str)) { str = str.substring(3); }

  let doc;

  if (format === "hurmet") {
    doc = JSON.parse(str);
  } else if (format === "markdown") {
    const ast = hurmet.md2ast(str);
    if (typeof ast === "object" && ast.type && ast.type === "doc") {
      doc = ast;
    } else {
      doc = {
        type: "doc",
        "attrs": {
          "decimalFormat": "1,000,000.",
          "inDraftMode": false,
          "fontSize": 12,
          "fileHandle": null,
          "pageSize": "letter"
        },
        "content": ast
      };
    }
    doc = JSON.parse(JSON.stringify(doc));
  }
  const fontSize = (doc.attrs.fontSize) ? Number(doc.attrs.fontSize) : 12;
  const ed = document.getElementById("editor-content");
  if (fontSize === 10 && ed.classList.contains("pica")) {
    ed.classList.add("long-primer");
    ed.classList.remove("pica");
  } else if (fontSize === 12 && ed.classList.contains("long-primer")) {
    ed.classList.add("pica");
    ed.classList.remove("long-primer");
  }
  document.getElementById("print-div").className = fontSize === 12
    ? "ProseMirror pica"
    : "ProseMirror long-primer";
  const pageSize = (doc.attrs.pageSize) ? doc.attrs.pageSize : "letter";
  const style = document.getElementById("pageStyle");
  style.innerHTML = pageSize === "letter"
  ? `@media print {@page{size: letter; margin: 16mm 0.75in 16mm 0.75in;}}`
  : `@media print {@page{size: A4; margin: 16mm 16.1mm 16mm 16.1mm;}}`;

  // Write the document with just the entries.
  // If a Hurmet error occurs later, the document is at least loaded and rendered.
  view.dispatch(
    view.state.tr.replaceWith(0, view.state.doc.content.size, schema.nodeFromJSON(doc))
  );
  // A ProseMirror transaction does not reach the document metadata.
  // Write the metadate separately.
  view.state.doc.attrs.fontSize = fontSize;
  view.state.doc.attrs.pageSize = pageSize;
  if (doc.attrs.saveDate) { view.state.doc.attrs.saveDate = doc.attrs.saveDate; }
  if (doc.attrs.snapshots) { view.state.doc.attrs.snapshots = doc.attrs.snapshots; }
  if (doc.attrs.fallbacks) { view.state.doc.attrs.fallbacks = doc.attrs.fallbacks; }

  // Update all the calculation nodes and refresh the document display.
  hurmet.updateCalculations(view, true);
  view.state.doc.attrs.fallbacks = {};
};

async function getFile(view, schema, format) {
  const pickerOpts = {
    types: [{ description: 'Text', accept: { 'text/*': ['.md'] } }],
    excludeAcceptAllOption: true,
    multiple: false
  };
  const [fileHandle] = await window.showOpenFilePicker(pickerOpts);
  const file = await fileHandle.getFile();
  const contents = await file.text();
  // doc.attrs is not updated by a ProseMirror transaction. Update fileHandle separately.
  view.state.doc.attrs.fileHandle = fileHandle;
  // Now update the rest of the document.
  handleContents(view, schema, contents, format);
  document.title = fileHandle.name.replace(/\.md$/, "");
}

function readFile(state, _, view, schema, format) {
  if (window.showOpenFilePicker && !(format === "hurmet")) {
    // Use the Chromium File System Access API, so users can Ctrl-S to save a document.
    getFile(view, schema, format);
    state.doc.attrs.saveIsValid = true;
  } else {
    // Legacy file open system for Firefox and Safari
    // Open a dialog box.
    const input = document.createElement('input');
    // Populate the dialog with a list of available file names.
    input.type = 'file';
    input.accept = format === "hurmet" ? ".hurmet" : ".md";
    // Wait for the user to select a filename.
    input.onchange = _ => {
      const fileName = input.files[0];  // The file name selected by the user.
      // Spin up the JavaScript FileReader object to read the file.
      const reader = new FileReader();
      reader.onload = function(evt) {
        // We're now inside the event handler for after the file is loaded.
        const str = evt.target.result;
        handleContents(view, schema, str, format);
      };
      reader.readAsText(fileName);
    };
    input.click();
  }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var FileSaver = {exports: {}};

/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.1.20160520
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

(function (module) {
	/*global self */
	/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

	/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

	var saveAs = saveAs || (function(view) {
		// IE <10 is explicitly unsupported
		if (typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
			return;
		}
		var
			  doc = view.document
			  // only get URL when necessary in case Blob.js hasn't overridden it yet
			, get_URL = function() {
				return view.URL || view.webkitURL || view;
			}
			, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
			, can_use_save_link = "download" in save_link
			, click = function(node) {
				var event = new MouseEvent("click");
				node.dispatchEvent(event);
			}
			, is_safari = /Version\/[\d\.]+.*Safari/.test(navigator.userAgent)
			, webkit_req_fs = view.webkitRequestFileSystem
			, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
			, throw_outside = function(ex) {
				(view.setImmediate || view.setTimeout)(function() {
					throw ex;
				}, 0);
			}
			, force_saveable_type = "application/octet-stream"
			, fs_min_size = 0
			// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
			, arbitrary_revoke_timeout = 1000 * 40 // in ms
			, revoke = function(file) {
				var revoker = function() {
					if (typeof file === "string") { // file is an object URL
						get_URL().revokeObjectURL(file);
					} else { // file is a File
						file.remove();
					}
				};
				/* // Take note W3C:
				var
				  uri = typeof file === "string" ? file : file.toURL()
				, revoker = function(evt) {
					// idealy DownloadFinishedEvent.data would be the URL requested
					if (evt.data === uri) {
						if (typeof file === "string") { // file is an object URL
							get_URL().revokeObjectURL(file);
						} else { // file is a File
							file.remove();
						}
					}
				}
				;
				view.addEventListener("downloadfinished", revoker);
				*/
				setTimeout(revoker, arbitrary_revoke_timeout);
			}
			, dispatch = function(filesaver, event_types, event) {
				event_types = [].concat(event_types);
				var i = event_types.length;
				while (i--) {
					var listener = filesaver["on" + event_types[i]];
					if (typeof listener === "function") {
						try {
							listener.call(filesaver, event || filesaver);
						} catch (ex) {
							throw_outside(ex);
						}
					}
				}
			}
			, auto_bom = function(blob) {
				// prepend BOM for UTF-8 XML and text/* types (including HTML)
				if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
					return new Blob(["\xEF\xBB\xBF", blob], {type: blob.type});
				}
				return blob;
			}
			, FileSaver = function(blob, name, no_auto_bom) {
				if (!no_auto_bom) {
					blob = auto_bom(blob);
				}
				// First try a.download, then web filesystem, then object URLs
				var
					  filesaver = this
					, type = blob.type
					, blob_changed = false
					, object_url
					, target_view
					, dispatch_all = function() {
						dispatch(filesaver, "writestart progress write writeend".split(" "));
					}
					// on any filesys errors revert to saving with object URLs
					, fs_error = function() {
						if (target_view && is_safari && typeof FileReader !== "undefined") {
							// Safari doesn't allow downloading of blob urls
							var reader = new FileReader();
							reader.onloadend = function() {
								var base64Data = reader.result;
								target_view.location.href = "data:attachment/file" + base64Data.slice(base64Data.search(/[,;]/));
								filesaver.readyState = filesaver.DONE;
								dispatch_all();
							};
							reader.readAsDataURL(blob);
							filesaver.readyState = filesaver.INIT;
							return;
						}
						// don't create more object URLs than needed
						if (blob_changed || !object_url) {
							object_url = get_URL().createObjectURL(blob);
						}
						if (target_view) {
							target_view.location.href = object_url;
						} else {
							var new_tab = view.open(object_url, "_blank");
							if (new_tab === undefined && is_safari) {
								// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
								view.location.href = object_url;
							}
						}
						filesaver.readyState = filesaver.DONE;
						dispatch_all();
						revoke(object_url);
					}
					, abortable = function(func) {
						return function() {
							if (filesaver.readyState !== filesaver.DONE) {
								return func.apply(this, arguments);
							}
						};
					}
					, create_if_not_found = {create: true, exclusive: false}
					, slice
				;
				filesaver.readyState = filesaver.INIT;
				if (!name) {
					name = "download";
				}
				if (can_use_save_link) {
					object_url = get_URL().createObjectURL(blob);
					setTimeout(function() {
						save_link.href = object_url;
						save_link.download = name;
						click(save_link);
						dispatch_all();
						revoke(object_url);
						filesaver.readyState = filesaver.DONE;
					});
					return;
				}
				// Object and web filesystem URLs have a problem saving in Google Chrome when
				// viewed in a tab, so I force save with application/octet-stream
				// http://code.google.com/p/chromium/issues/detail?id=91158
				// Update: Google errantly closed 91158, I submitted it again:
				// https://code.google.com/p/chromium/issues/detail?id=389642
				if (view.chrome && type && type !== force_saveable_type) {
					slice = blob.slice || blob.webkitSlice;
					blob = slice.call(blob, 0, blob.size, force_saveable_type);
					blob_changed = true;
				}
				// Since I can't be sure that the guessed media type will trigger a download
				// in WebKit, I append .download to the filename.
				// https://bugs.webkit.org/show_bug.cgi?id=65440
				if (webkit_req_fs && name !== "download") {
					name += ".download";
				}
				if (type === force_saveable_type || webkit_req_fs) {
					target_view = view;
				}
				if (!req_fs) {
					fs_error();
					return;
				}
				fs_min_size += blob.size;
				req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
					fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
						var save = function() {
							dir.getFile(name, create_if_not_found, abortable(function(file) {
								file.createWriter(abortable(function(writer) {
									writer.onwriteend = function(event) {
										target_view.location.href = file.toURL();
										filesaver.readyState = filesaver.DONE;
										dispatch(filesaver, "writeend", event);
										revoke(file);
									};
									writer.onerror = function() {
										var error = writer.error;
										if (error.code !== error.ABORT_ERR) {
											fs_error();
										}
									};
									"writestart progress write abort".split(" ").forEach(function(event) {
										writer["on" + event] = filesaver["on" + event];
									});
									writer.write(blob);
									filesaver.abort = function() {
										writer.abort();
										filesaver.readyState = filesaver.DONE;
									};
									filesaver.readyState = filesaver.WRITING;
								}), fs_error);
							}), fs_error);
						};
						dir.getFile(name, {create: false}, abortable(function(file) {
							// delete file if it already exists
							file.remove();
							save();
						}), abortable(function(ex) {
							if (ex.code === ex.NOT_FOUND_ERR) {
								save();
							} else {
								fs_error();
							}
						}));
					}), fs_error);
				}), fs_error);
			}
			, FS_proto = FileSaver.prototype
			, saveAs = function(blob, name, no_auto_bom) {
				return new FileSaver(blob, name, no_auto_bom);
			}
		;
		// IE 10+ (native saveAs)
		if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
			return function(blob, name, no_auto_bom) {
				if (!no_auto_bom) {
					blob = auto_bom(blob);
				}
				return navigator.msSaveOrOpenBlob(blob, name || "download");
			};
		}

		FS_proto.abort = function() {
			var filesaver = this;
			filesaver.readyState = filesaver.DONE;
			dispatch(filesaver, "abort");
		};
		FS_proto.readyState = FS_proto.INIT = 0;
		FS_proto.WRITING = 1;
		FS_proto.DONE = 2;

		FS_proto.error =
		FS_proto.onwritestart =
		FS_proto.onprogress =
		FS_proto.onwrite =
		FS_proto.onabort =
		FS_proto.onerror =
		FS_proto.onwriteend =
			null;

		return saveAs;
	}(
		   typeof self !== "undefined" && self
		|| typeof window !== "undefined" && window
		|| commonjsGlobal.content
	));
	// `self` is undefined in Firefox for Android content script context
	// while `this` is nsIContentFrameMessageManager
	// with an attribute `content` that corresponds to the window

	if (module.exports) {
	  module.exports.saveAs = saveAs;
	} 
} (FileSaver));

var FileSaverExports = FileSaver.exports;

/* eslint-disable */


const showDiff = state => {
  const title = "Show the difference since:";
  const buttons = [];
  const snapshots = state.doc.attrs.snapshots;
  if (state.doc.attrs.snapshots.length === 0) {
    alert('There are no snapshots to diff.');
    return
  }
  for (let i = 0; i < state.doc.attrs.snapshots.length; i++) {
    buttons.push({
      textContent: (new Date(snapshots[i].date)).toISOString().replace(/T.+/, "") + "  " + snapshots[i].message,
      pos: i
    });
  }
  const callback = pos => {
    const dmp = new diff_match_patch();
    const text1 = state.doc.attrs.snapshots[pos].content;
    const text2 = hurmetMarkdownSerializer.serialize(state.doc, new Map(), false, true);
    dmp.Diff_Timeout = 2;
    dmp.Diff_EditCost = 4;
    let d = dmp.diff_main(text1, text2);
    dmp.diff_cleanupSemantic(d);
    const ds = dmp.diff_prettyHtml(d);
    const wrapper = document.body.appendChild(document.createElement("div"));
    wrapper.className = "ProseMirror-prompt";
    wrapper.style = "width: 850px; height: 500px";
    wrapper.id = "";
    const container = wrapper.appendChild(document.createElement("div"));
    container.style = "width: 850px; max-height: 450px; overflow: scroll;";
    container.innerHTML = ds;
    const spacer = wrapper.appendChild(document.createElement("div"));
    spacer.style.height = "10px";
    const prevButton = document.createElement("button");
    prevButton.type = "button";
    prevButton.style.marginRight = "2em";
    prevButton.textContent = "Previous";
    prevButton.onclick = function(e) {
      const top = container.getBoundingClientRect().top;
      const diffs = Array.from(container.getElementsByClassName("diff"));
      for (let i = diffs.length - 1; i >= 0; i--) {
        const bottom = diffs[i].getBoundingClientRect().bottom;
        if (bottom < top) {
          diffs[i].scrollIntoView();
          container.scrollTo({top: container.scrollTop - 80});
          break
        }
      }
    };
    wrapper.appendChild(prevButton);
    const nextButton = document.createElement("button");
    nextButton.type = "button";
    nextButton.style.marginRight = "2em";
    nextButton.textContent = "Next";
    nextButton.onclick = function(e) {
      const bottom = container.getBoundingClientRect().bottom;
      const diffs = container.getElementsByClassName("diff");
      for (let diff of [...diffs]) {
        const top = diff.getBoundingClientRect().top;
        if (top > bottom) {
          diff.scrollIntoView();
          container.scrollTo({top: container.scrollTop - 80});
          break
        }
      }
    };
    wrapper.appendChild(nextButton);
    const closeButton = document.createElement("button");
    closeButton.type = "button";
    closeButton.textContent = "Close";
    closeButton.onclick = function(e) { wrapper.parentNode.removeChild(wrapper); };
    wrapper.appendChild(closeButton);
    const box = wrapper.getBoundingClientRect();
    wrapper.style.top = ((window.innerHeight - box.height) / 2) + "px";
    wrapper.style.left = ((window.innerWidth - box.width) / 2) + "px";
  };
  openSelectPrompt(title, buttons, callback);
};

/* The rest of this file contains the diff-match-patch class from
 * https://github.com/google/diff-match-patch/blob/master/javascript/diff_match_patch_uncompressed.js
 * I have modified this file to:
 *   1. Delete the match function
 *   2. Delete the patch function
 *   3. Delete the diff_cleanupEfficiency function
 *   4. Modify diff_prettyHtml() for coordination with Hurmet
 *   5. Prepend the `export` keyword to line 41
 */

/**
 * Diff Match and Patch
 * Copyright 2018 The diff-match-patch Authors.
 * https://github.com/google/diff-match-patch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */
const diff_match_patch = function() {

  // Defaults.
  // Redefine these in your program to override the defaults.

  // Number of seconds to map a diff before giving up (0 for infinity).
  this.Diff_Timeout = 1.0;
  // Cost of an empty edit operation in terms of edit characters.
  this.Diff_EditCost = 4;
  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
  this.Match_Threshold = 0.5;
  // How far to search for a match (0 = exact location, 1000+ = broad match).
  // A match this many characters away from the expected location will add
  // 1.0 to the score (0.0 is a perfect match).
  this.Match_Distance = 1000;
  // When deleting a large block of text (over ~64 characters), how close do
  // the contents have to be to match the expected contents. (0.0 = perfection,
  // 1.0 = very loose).  Note that Match_Threshold controls how closely the
  // end points of a delete need to match.
  this.Patch_DeleteThreshold = 0.5;
  // Chunk size for context length.
  this.Patch_Margin = 4;

  // The number of bits in an int.
  this.Match_MaxBits = 32;
};


//  DIFF FUNCTIONS


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;

/**
 * Class representing one diff tuple.
 * Attempts to look like a two-element array (which is what this used to be).
 * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.
 * @param {string} text Text to be deleted, inserted, or retained.
 * @constructor
 */
diff_match_patch.Diff = function(op, text) {
  this[0] = op;
  this[1] = text;
};

diff_match_patch.Diff.prototype.length = 2;

/**
 * Emulate the output of a two-element array.
 * @return {string} Diff operation as a string.
 */
diff_match_patch.Diff.prototype.toString = function() {
  return this[0] + ',' + this[1];
};


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff.
 * @param {number=} opt_deadline Optional time when the diff should be complete
 *     by.  Used internally for recursive calls.  Users should set DiffTimeout
 *     instead.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 */
diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,
    opt_deadline) {
  // Set a deadline by which time the diff must be complete.
  if (typeof opt_deadline == 'undefined') {
    if (this.Diff_Timeout <= 0) {
      opt_deadline = Number.MAX_VALUE;
    } else {
      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;
    }
  }
  var deadline = opt_deadline;

  // Check for null inputs.
  if (text1 == null || text2 == null) {
    throw new Error('Null input. (diff_main)');
  }

  // Check for equality (speedup).
  if (text1 == text2) {
    if (text1) {
      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];
    }
    return [];
  }

  if (typeof opt_checklines == 'undefined') {
    opt_checklines = true;
  }
  var checklines = opt_checklines;

  // Trim off common prefix (speedup).
  var commonlength = this.diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);

  // Trim off common suffix (speedup).
  commonlength = this.diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);

  // Compute the diff on the middle block.
  var diffs = this.diff_compute_(text1, text2, checklines, deadline);

  // Restore the prefix and suffix.
  if (commonprefix) {
    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));
  }
  if (commonsuffix) {
    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));
  }
  this.diff_cleanupMerge(diffs);
  return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,
    deadline) {
  var diffs;

  if (!text1) {
    // Just add some text (speedup).
    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];
  }

  if (!text2) {
    // Just delete some text (speedup).
    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];
  }

  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i != -1) {
    // Shorter text is inside the longer text (speedup).
    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),
             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),
             new diff_match_patch.Diff(DIFF_INSERT,
                 longtext.substring(i + shorttext.length))];
    // Swap insertions for deletions if diff is reversed.
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    }
    return diffs;
  }

  if (shorttext.length == 1) {
    // Single character string.
    // After the previous speedup, the character can't be an equality.
    return [new diff_match_patch.Diff(DIFF_DELETE, text1),
            new diff_match_patch.Diff(DIFF_INSERT, text2)];
  }

  // Check to see if the problem can be split in two.
  var hm = this.diff_halfMatch_(text1, text2);
  if (hm) {
    // A half-match was found, sort out the return data.
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    // Send both pairs off for separate processing.
    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
    // Merge the results.
    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],
                          diffs_b);
  }

  if (checklines && text1.length > 100 && text2.length > 100) {
    return this.diff_lineMode_(text1, text2, deadline);
  }

  return this.diff_bisect_(text1, text2, deadline);
};


/**
 * Do a quick line-level diff on both strings, then rediff the parts for
 * greater accuracy.
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {
  // Scan the text on a line-by-line basis first.
  var a = this.diff_linesToChars_(text1, text2);
  text1 = a.chars1;
  text2 = a.chars2;
  var linearray = a.lineArray;

  var diffs = this.diff_main(text1, text2, false, deadline);

  // Convert the diff back to original text.
  this.diff_charsToLines_(diffs, linearray);
  // Eliminate freak matches (e.g. blank lines)
  this.diff_cleanupSemantic(diffs);

  // Rediff any replacement blocks, this time character-by-character.
  // Add a dummy entry at the end.
  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete >= 1 && count_insert >= 1) {
          // Delete the offending records and add the merged ones.
          diffs.splice(pointer - count_delete - count_insert,
                       count_delete + count_insert);
          pointer = pointer - count_delete - count_insert;
          var subDiff =
              this.diff_main(text_delete, text_insert, false, deadline);
          for (var j = subDiff.length - 1; j >= 0; j--) {
            diffs.splice(pointer, 0, subDiff[j]);
          }
          pointer = pointer + subDiff.length;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
    pointer++;
  }
  diffs.pop();  // Remove the dummy entry at the end.

  return diffs;
};


/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = Math.ceil((text1_length + text2_length) / 2);
  var v_offset = max_d;
  var v_length = 2 * max_d;
  var v1 = new Array(v_length);
  var v2 = new Array(v_length);
  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
  // integers and undefined.
  for (var x = 0; x < v_length; x++) {
    v1[x] = -1;
    v2[x] = -1;
  }
  v1[v_offset + 1] = 0;
  v2[v_offset + 1] = 0;
  var delta = text1_length - text2_length;
  // If the total number of characters is odd, then the front path will collide
  // with the reverse path.
  var front = (delta % 2 != 0);
  // Offsets for start and end of k loop.
  // Prevents mapping of space beyond the grid.
  var k1start = 0;
  var k1end = 0;
  var k2start = 0;
  var k2end = 0;
  for (var d = 0; d < max_d; d++) {
    // Bail out if deadline is reached.
    if ((new Date()).getTime() > deadline) {
      break;
    }

    // Walk the front path one step.
    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
      var k1_offset = v_offset + k1;
      var x1;
      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
        x1 = v1[k1_offset + 1];
      } else {
        x1 = v1[k1_offset - 1] + 1;
      }
      var y1 = x1 - k1;
      while (x1 < text1_length && y1 < text2_length &&
             text1.charAt(x1) == text2.charAt(y1)) {
        x1++;
        y1++;
      }
      v1[k1_offset] = x1;
      if (x1 > text1_length) {
        // Ran off the right of the graph.
        k1end += 2;
      } else if (y1 > text2_length) {
        // Ran off the bottom of the graph.
        k1start += 2;
      } else if (front) {
        var k2_offset = v_offset + delta - k1;
        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
          // Mirror x2 onto top-left coordinate system.
          var x2 = text1_length - v2[k2_offset];
          if (x1 >= x2) {
            // Overlap detected.
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }

    // Walk the reverse path one step.
    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
      var k2_offset = v_offset + k2;
      var x2;
      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
        x2 = v2[k2_offset + 1];
      } else {
        x2 = v2[k2_offset - 1] + 1;
      }
      var y2 = x2 - k2;
      while (x2 < text1_length && y2 < text2_length &&
             text1.charAt(text1_length - x2 - 1) ==
             text2.charAt(text2_length - y2 - 1)) {
        x2++;
        y2++;
      }
      v2[k2_offset] = x2;
      if (x2 > text1_length) {
        // Ran off the left of the graph.
        k2end += 2;
      } else if (y2 > text2_length) {
        // Ran off the top of the graph.
        k2start += 2;
      } else if (!front) {
        var k1_offset = v_offset + delta - k2;
        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
          var x1 = v1[k1_offset];
          var y1 = v_offset + x1 - k1_offset;
          // Mirror x2 onto top-left coordinate system.
          x2 = text1_length - x2;
          if (x1 >= x2) {
            // Overlap detected.
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }
  }
  // Diff took too long and hit the deadline or
  // number of diffs equals number of characters, no commonality at all.
  return [new diff_match_patch.Diff(DIFF_DELETE, text1),
          new diff_match_patch.Diff(DIFF_INSERT, text2)];
};


/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,
    deadline) {
  var text1a = text1.substring(0, x);
  var text2a = text2.substring(0, y);
  var text1b = text1.substring(x);
  var text2b = text2.substring(y);

  // Compute both diffs serially.
  var diffs = this.diff_main(text1a, text2a, false, deadline);
  var diffsb = this.diff_main(text1b, text2b, false, deadline);

  return diffs.concat(diffsb);
};


/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
 *     An object containing the encoded text1, the encoded text2 and
 *     the array of unique strings.
 *     The zeroth element of the array of unique strings is intentionally blank.
 * @private
 */
diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {
  var lineArray = [];  // e.g. lineArray[4] == 'Hello\n'
  var lineHash = {};   // e.g. lineHash['Hello\n'] == 4

  // '\x00' is a valid character, but various debuggers don't like it.
  // So we'll insert a junk entry to avoid generating a null character.
  lineArray[0] = '';

  /**
   * Split a text into an array of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * Modifies linearray and linehash through being a closure.
   * @param {string} text String to encode.
   * @return {string} Encoded string.
   * @private
   */
  function diff_linesToCharsMunge_(text) {
    var chars = '';
    // Walk the text, pulling out a substring for each line.
    // text.split('\n') would would temporarily double our memory footprint.
    // Modifying text would create many large strings to garbage collect.
    var lineStart = 0;
    var lineEnd = -1;
    // Keeping our own length variable is faster than looking it up.
    var lineArrayLength = lineArray.length;
    while (lineEnd < text.length - 1) {
      lineEnd = text.indexOf('\n', lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length - 1;
      }
      var line = text.substring(lineStart, lineEnd + 1);

      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :
          (lineHash[line] !== undefined)) {
        chars += String.fromCharCode(lineHash[line]);
      } else {
        if (lineArrayLength == maxLines) {
          // Bail out at 65535 because
          // String.fromCharCode(65536) == String.fromCharCode(0)
          line = text.substring(lineStart);
          lineEnd = text.length;
        }
        chars += String.fromCharCode(lineArrayLength);
        lineHash[line] = lineArrayLength;
        lineArray[lineArrayLength++] = line;
      }
      lineStart = lineEnd + 1;
    }
    return chars;
  }
  // Allocate 2/3rds of the space for text1, the rest for text2.
  var maxLines = 40000;
  var chars1 = diff_linesToCharsMunge_(text1);
  maxLines = 65535;
  var chars2 = diff_linesToCharsMunge_(text2);
  return {chars1: chars1, chars2: chars2, lineArray: lineArray};
};


/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {!Array.<string>} lineArray Array of unique strings.
 * @private
 */
diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {
  for (var i = 0; i < diffs.length; i++) {
    var chars = diffs[i][1];
    var text = [];
    for (var j = 0; j < chars.length; j++) {
      text[j] = lineArray[chars.charCodeAt(j)];
    }
    diffs[i][1] = text.join('');
  }
};


/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: https://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) ==
        text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
  // Quick check for common null cases.
  if (!text1 || !text2 ||
      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    return 0;
  }
  // Binary search.
  // Performance analysis: https://neil.fraser.name/news/2007/10/09/
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};


/**
 * Determine if the suffix of one string is the prefix of another.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of the first
 *     string and the start of the second string.
 * @private
 */
diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {
  // Cache the text lengths to prevent multiple calls.
  var text1_length = text1.length;
  var text2_length = text2.length;
  // Eliminate the null case.
  if (text1_length == 0 || text2_length == 0) {
    return 0;
  }
  // Truncate the longer string.
  if (text1_length > text2_length) {
    text1 = text1.substring(text1_length - text2_length);
  } else if (text1_length < text2_length) {
    text2 = text2.substring(0, text1_length);
  }
  var text_length = Math.min(text1_length, text2_length);
  // Quick check for the worst case.
  if (text1 == text2) {
    return text_length;
  }

  // Start by looking for a single character match
  // and increase length until no match is found.
  // Performance analysis: https://neil.fraser.name/news/2010/11/04/
  var best = 0;
  var length = 1;
  while (true) {
    var pattern = text1.substring(text_length - length);
    var found = text2.indexOf(pattern);
    if (found == -1) {
      return best;
    }
    length += found;
    if (found == 0 || text1.substring(text_length - length) ==
        text2.substring(0, length)) {
      best = length;
      length++;
    }
  }
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 * @private
 */
diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {
  if (this.Diff_Timeout <= 0) {
    // Don't risk returning a non-optimal diff if we have unlimited time.
    return null;
  }
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    return null;  // Pointless.
  }
  var dmp = this;  // 'this' becomes 'window' in a closure.

  /**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */
  function diff_halfMatchI_(longtext, shorttext, i) {
    // Start with a 1/4 length substring at position i as a seed.
    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    var j = -1;
    var best_common = '';
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),
                                               shorttext.substring(j));
      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),
                                               shorttext.substring(0, j));
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext.substring(j - suffixLength, j) +
            shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length * 2 >= longtext.length) {
      return [best_longtext_a, best_longtext_b,
              best_shorttext_a, best_shorttext_b, best_common];
    } else {
      return null;
    }
  }

  // First check if the second quarter is the seed for a half-match.
  var hm1 = diff_halfMatchI_(longtext, shorttext,
                             Math.ceil(longtext.length / 4));
  // Check again based on the third quarter.
  var hm2 = diff_halfMatchI_(longtext, shorttext,
                             Math.ceil(longtext.length / 2));
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    // Both matched.  Select the longest.
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }

  // A half-match was found, sort out the return data.
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];  // Stack of indices where equalities are found.
  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
  /** @type {?string} */
  var lastEquality = null;
  // Always equal to diffs[equalities[equalitiesLength - 1]][1]
  var pointer = 0;  // Index of current position.
  // Number of characters that changed prior to the equality.
  var length_insertions1 = 0;
  var length_deletions1 = 0;
  // Number of characters that changed after the equality.
  var length_insertions2 = 0;
  var length_deletions2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
      equalities[equalitiesLength++] = pointer;
      length_insertions1 = length_insertions2;
      length_deletions1 = length_deletions2;
      length_insertions2 = 0;
      length_deletions2 = 0;
      lastEquality = diffs[pointer][1];
    } else {  // An insertion or deletion.
      if (diffs[pointer][0] == DIFF_INSERT) {
        length_insertions2 += diffs[pointer][1].length;
      } else {
        length_deletions2 += diffs[pointer][1].length;
      }
      // Eliminate an equality that is smaller or equal to the edits on both
      // sides of it.
      if (lastEquality && (lastEquality.length <=
          Math.max(length_insertions1, length_deletions1)) &&
          (lastEquality.length <= Math.max(length_insertions2,
                                           length_deletions2))) {
        // Duplicate record.
        diffs.splice(equalities[equalitiesLength - 1], 0,
                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));
        // Change second copy to insert.
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
        // Throw away the equality we just deleted.
        equalitiesLength--;
        // Throw away the previous equality (it needs to be reevaluated).
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_insertions1 = 0;  // Reset the counters.
        length_deletions1 = 0;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastEquality = null;
        changes = true;
      }
    }
    pointer++;
  }

  // Normalize the diff.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
  this.diff_cleanupSemanticLossless(diffs);

  // Find any overlaps between deletions and insertions.
  // e.g: <del>abcxxx</del><ins>xxxdef</ins>
  //   -> <del>abc</del>xxx<ins>def</ins>
  // e.g: <del>xxxabc</del><ins>defxxx</ins>
  //   -> <ins>def</ins>xxx<del>abc</del>
  // Only extract an overlap if it is as big as the edit ahead or behind it.
  pointer = 1;
  while (pointer < diffs.length) {
    if (diffs[pointer - 1][0] == DIFF_DELETE &&
        diffs[pointer][0] == DIFF_INSERT) {
      var deletion = diffs[pointer - 1][1];
      var insertion = diffs[pointer][1];
      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
      if (overlap_length1 >= overlap_length2) {
        if (overlap_length1 >= deletion.length / 2 ||
            overlap_length1 >= insertion.length / 2) {
          // Overlap found.  Insert an equality and trim the surrounding edits.
          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,
              insertion.substring(0, overlap_length1)));
          diffs[pointer - 1][1] =
              deletion.substring(0, deletion.length - overlap_length1);
          diffs[pointer + 1][1] = insertion.substring(overlap_length1);
          pointer++;
        }
      } else {
        if (overlap_length2 >= deletion.length / 2 ||
            overlap_length2 >= insertion.length / 2) {
          // Reverse overlap found.
          // Insert an equality and swap and trim the surrounding edits.
          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,
              deletion.substring(0, overlap_length2)));
          diffs[pointer - 1][0] = DIFF_INSERT;
          diffs[pointer - 1][1] =
              insertion.substring(0, insertion.length - overlap_length2);
          diffs[pointer + 1][0] = DIFF_DELETE;
          diffs[pointer + 1][1] =
              deletion.substring(overlap_length2);
          pointer++;
        }
      }
      pointer++;
    }
    pointer++;
  }
};


/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
  /**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 6 (best) to 0 (worst).
   * Closure, but does not reference any external variables.
   * @param {string} one First string.
   * @param {string} two Second string.
   * @return {number} The score.
   * @private
   */
  function diff_cleanupSemanticScore_(one, two) {
    if (!one || !two) {
      // Edges are the best.
      return 6;
    }

    // Each port of this function behaves slightly differently due to
    // subtle differences in each language's definition of things like
    // 'whitespace'.  Since this function's purpose is largely cosmetic,
    // the choice has been made to use each language's native features
    // rather than force total conformity.
    var char1 = one.charAt(one.length - 1);
    var char2 = two.charAt(0);
    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
    var whitespace1 = nonAlphaNumeric1 &&
        char1.match(diff_match_patch.whitespaceRegex_);
    var whitespace2 = nonAlphaNumeric2 &&
        char2.match(diff_match_patch.whitespaceRegex_);
    var lineBreak1 = whitespace1 &&
        char1.match(diff_match_patch.linebreakRegex_);
    var lineBreak2 = whitespace2 &&
        char2.match(diff_match_patch.linebreakRegex_);
    var blankLine1 = lineBreak1 &&
        one.match(diff_match_patch.blanklineEndRegex_);
    var blankLine2 = lineBreak2 &&
        two.match(diff_match_patch.blanklineStartRegex_);

    if (blankLine1 || blankLine2) {
      // Five points for blank lines.
      return 5;
    } else if (lineBreak1 || lineBreak2) {
      // Four points for line breaks.
      return 4;
    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
      // Three points for end of sentences.
      return 3;
    } else if (whitespace1 || whitespace2) {
      // Two points for whitespace.
      return 2;
    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
      // One point for non-alphanumeric.
      return 1;
    }
    return 0;
  }

  var pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];

      // First, shift the edit as far left as possible.
      var commonOffset = this.diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }

      // Second, step character by character right, looking for the best fit.
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +
          diff_cleanupSemanticScore_(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore_(equality1, edit) +
            diff_cleanupSemanticScore_(edit, equality2);
        // The >= encourages trailing rather than leading whitespace on edits.
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }

      if (diffs[pointer - 1][1] != bestEquality1) {
        // We have an improvement, save it back to the diff.
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};

// Define some regex patterns for matching boundaries.
diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
diff_match_patch.whitespaceRegex_ = /\s/;
diff_match_patch.linebreakRegex_ = /[\r\n]/;
diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;

/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
  // Add a dummy entry at the end.
  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = '';
  var text_insert = '';
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete + count_insert > 1) {
          if (count_delete !== 0 && count_insert !== 0) {
            // Factor out any common prefixies.
            commonlength = this.diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if ((pointer - count_delete - count_insert) > 0 &&
                  diffs[pointer - count_delete - count_insert - 1][0] ==
                  DIFF_EQUAL) {
                diffs[pointer - count_delete - count_insert - 1][1] +=
                    text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,
                    text_insert.substring(0, commonlength)));
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixies.
            commonlength = this.diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length -
                  commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length -
                  commonlength);
              text_delete = text_delete.substring(0, text_delete.length -
                  commonlength);
            }
          }
          // Delete the offending records and add the merged ones.
          pointer -= count_delete + count_insert;
          diffs.splice(pointer, count_delete + count_insert);
          if (text_delete.length) {
            diffs.splice(pointer, 0,
                new diff_match_patch.Diff(DIFF_DELETE, text_delete));
            pointer++;
          }
          if (text_insert.length) {
            diffs.splice(pointer, 0,
                new diff_match_patch.Diff(DIFF_INSERT, text_insert));
            pointer++;
          }
          pointer++;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
          // Merge this equality with the previous one.
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = '';
        text_insert = '';
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === '') {
    diffs.pop();  // Remove the dummy entry at the end.
  }

  // Second pass: look for single edits surrounded on both sides by equalities
  // which can be shifted sideways to eliminate an equality.
  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
  var changes = false;
  pointer = 1;
  // Intentionally ignore the first and last element (don't need checking).
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL) {
      // This is a single edit surrounded by equalities.
      if (diffs[pointer][1].substring(diffs[pointer][1].length -
          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
        // Shift the edit over the previous equality.
        diffs[pointer][1] = diffs[pointer - 1][1] +
            diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                        diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
          diffs[pointer + 1][1]) {
        // Shift the edit over the next equality.
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] =
            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
            diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  // If shifts were made, the diff needs reordering and another shift sweep.
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};


/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */
diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
  var chars1 = 0;
  var chars2 = 0;
  var last_chars1 = 0;
  var last_chars2 = 0;
  var x;
  for (x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.
      chars1 += diffs[x][1].length;
    }
    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.
      chars2 += diffs[x][1].length;
    }
    if (chars1 > loc) {  // Overshot the location.
      break;
    }
    last_chars1 = chars1;
    last_chars2 = chars2;
  }
  // Was the location was deleted?
  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
    return last_chars2;
  }
  // Add the remaining character length.
  return last_chars2 + (loc - last_chars1);
};



/**
 * Convert a diff array into a pretty HTML report.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */
diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
  var html = [];
  var pattern_amp = /&/g;
  var pattern_lt = /</g;
  var pattern_gt = />/g;
  var pattern_para = /\n/g;
  if (diffs.length === 1 && diffs[0][0] === DIFF_EQUAL) {
    return '<span>There is no difference.</span><br>'
  }
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];    // Operation (insert, delete, equal)
    var data = diffs[x][1];  // Text of change.
    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')
        .replace(pattern_gt, '&gt;').replace(pattern_para, '<br>');
    switch (op) {
      case DIFF_INSERT:
        html[x] = '<ins class="diff" style="background:#e6ffe6;">' + text + '</ins>';
        break;
      case DIFF_DELETE:
        html[x] = '<del class="diff" style="background:#ffe6e6;">' + text + '</del>';
        break;
      case DIFF_EQUAL:
        html[x] = '<span>' + text + '</span>';
        break;
    }
  }
  return html.join('') + '<br>';
};


/**
 * Compute and return the source text (all equalities and deletions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Source text.
 */
diff_match_patch.prototype.diff_text1 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */
diff_match_patch.prototype.diff_text2 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_DELETE) {
      text[x] = diffs[x][1];
    }
  }
  return text.join('');
};


/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */
diff_match_patch.prototype.diff_levenshtein = function(diffs) {
  var levenshtein = 0;
  var insertions = 0;
  var deletions = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT:
        insertions += data.length;
        break;
      case DIFF_DELETE:
        deletions += data.length;
        break;
      case DIFF_EQUAL:
        // A deletion and an insertion is one substitution.
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
    }
  }
  levenshtein += Math.max(insertions, deletions);
  return levenshtein;
};


/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */
diff_match_patch.prototype.diff_toDelta = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    switch (diffs[x][0]) {
      case DIFF_INSERT:
        text[x] = '+' + encodeURI(diffs[x][1]);
        break;
      case DIFF_DELETE:
        text[x] = '-' + diffs[x][1].length;
        break;
      case DIFF_EQUAL:
        text[x] = '=' + diffs[x][1].length;
        break;
    }
  }
  return text.join('\t').replace(/%20/g, ' ');
};


/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
  var diffs = [];
  var diffsLength = 0;  // Keeping our own length var is faster in JS.
  var pointer = 0;  // Cursor in text1
  var tokens = delta.split(/\t/g);
  for (var x = 0; x < tokens.length; x++) {
    // Each token begins with a one character parameter which specifies the
    // operation of this token (delete, insert, equality).
    var param = tokens[x].substring(1);
    switch (tokens[x].charAt(0)) {
      case '+':
        try {
          diffs[diffsLength++] =
              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));
        } catch (ex) {
          // Malformed URI sequence.
          throw new Error('Illegal escape in diff_fromDelta: ' + param);
        }
        break;
      case '-':
        // Fall through.
      case '=':
        var n = parseInt(param, 10);
        if (isNaN(n) || n < 0) {
          throw new Error('Invalid number in diff_fromDelta: ' + param);
        }
        var text = text1.substring(pointer, pointer += n);
        if (tokens[x].charAt(0) == '=') {
          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);
        } else {
          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);
        }
        break;
      default:
        // Blank tokens are ok (from a trailing \t).
        // Anything else is an error.
        if (tokens[x]) {
          throw new Error('Invalid diff operation in diff_fromDelta: ' +
                          tokens[x]);
        }
    }
  }
  if (pointer != text1.length) {
    throw new Error('Delta length (' + pointer +
        ') does not equal source text length (' + text1.length + ').');
  }
  return diffs;
};

/* eslint-disable */

// Menu icons that are not included in node-module menu.js
const hurmetIcons = {
  navicon: {
    width: 16,
    height: 16,
    path: "M3 4h10v1.5h-20z M3 8h10v1.5h-20z M3 12h10v1.5h-20z"
  },
  recalc: {
    width: 16,
    height: 16,
    path: "M0 9c0 2.389 1.048 4.534 2.709 6l1.323-1.5c-1.246-1.099-2.031-2.708-2.031-4.5 0-3.314 2.686-6 6-6 1.657 0 3.157 0.672 4.243 1.757l-2.243 2.243h6v-6l-2.343 2.343c-1.448-1.448-3.448-2.343-5.657-2.343-4.418 0-8 3.582-8 8z"
  },
  subscript: { text: "X₂", css: "font-weight: bold" },
  superscript: { text: "X²", css: "font-weight: bold" },
  strikethru: {
    width: 1024,
    height: 1024,
    path:
      "M1024 512v64h-234.506c27.504 38.51 42.506 82.692 42.506 128 0 70.878-36.66 139.026-100.58 186.964-59.358 44.518-137.284 69.036-219.42 69.036-82.138 0-160.062-24.518-219.42-69.036-63.92-47.938-100.58-116.086-100.58-186.964h128c0 69.382 87.926 128 192 128s192-58.618 192-128c0-69.382-87.926-128-192-128h-512v-64h299.518c-2.338-1.654-4.656-3.324-6.938-5.036-63.92-47.94-100.58-116.086-100.58-186.964s36.66-139.024 100.58-186.964c59.358-44.518 137.282-69.036 219.42-69.036 82.136 0 160.062 24.518 219.42 69.036 63.92 47.94 100.58 116.086 100.58 186.964h-128c0-69.382-87.926-128-192-128s-192 58.618-192 128c0 69.382 87.926 128 192 128 78.978 0 154.054 22.678 212.482 64h299.518z"
  },
  underline: {
    width: 1024,
    height: 1024,
    path:
      "M704 64h128v416c0 159.058-143.268 288-320 288-176.73 0-320-128.942-320-288v-416h128v416c0 40.166 18.238 78.704 51.354 108.506 36.896 33.204 86.846 51.494 140.646 51.494s103.75-18.29 140.646-51.494c33.116-29.802 51.354-68.34 51.354-108.506v-416zM192 832h640v128h-640z"
  },
  highlight: { text: "🟨" },
  paragraph: {
    width: 24,
    height: 24,
    path: "M22.5.248H7.228a6.977,6.977,0,1,0,0,13.954H9.546a.25.25,0,0,1,.25.25V22.5a1.25,1.25,0,0,0,2.5,0V3a.25.25,0,0,1,.25-.25h3.682a.25.25,0,0,1,.25.25V22.5a1.25,1.25,0,0,0,2.5,0V3a.249.249,0,0,1,.25-.25H22.5a1.25,1.25,0,0,0,0-2.5ZM9.8,11.452a.25.25,0,0,1-.25.25H7.228a4.477,4.477,0,1,1,0-8.954H9.546A.25.25,0,0,1,9.8,3Z"
  },
  upload: {
    width: 16,
    height: 16,
    path: "M7 9h2v-4h3l-4-4-4 4h3zM10 6.75v1.542l4.579 1.708-6.579 2.453-6.579-2.453 4.579-1.708v-1.542l-6 2.25v4l8 3 8-3v-4z"
  },
  image: {
    width: 16,
    height: 16,
    path: "M14.998 2c0.001 0.001 0.001 0.001 0.002 0.002v11.996c-0.001 0.001-0.001 0.001-0.002 0.002h-13.996c-0.001-0.001-0.001-0.001-0.002-0.002v-11.996c0.001-0.001 0.001-0.001 0.002-0.002h13.996zM15 1h-14c-0.55 0-1 0.45-1 1v12c0 0.55 0.45 1 1 1h14c0.55 0 1-0.45 1-1v-12c0-0.55-0.45-1-1-1v0z M13 4.5c0 0.828-0.672 1.5-1.5 1.5s-1.5-0.672-1.5-1.5 0.672-1.5 1.5-1.5 1.5 0.672 1.5 1.5z M14 13h-12v-2l3.5-6 4 5h1l3.5-3z"
  },
  comment: {
    width: 1024,
    height: 1024,
    path: "M512 219q-116 0-218 39t-161 107-59 145q0 64 40 122t115 100l49 28-15 54q-13 52-40 98 86-36 157-97l24-21 32 3q39 4 74 4 116 0 218-39t161-107 59-145-59-145-161-107-218-39zM1024 512q0 99-68 183t-186 133-257 48q-40 0-82-4-113 100-262 138-28 8-65 12h-2q-8 0-15-6t-9-15v-0q-1-2-0-6t1-5 2-5l3-5t4-4 4-5q4-4 17-19t19-21 17-22 18-29 15-33 14-43q-89-50-141-125t-51-160q0-99 68-183t186-133 257-48 257 48 186 133 68 183z"
  },
  footnote: {
    width: 16,
    height: 16,
    path: "M3.032 13l0.9-3h4.137l0.9 3h1.775l-3-10h-3.488l-3 10h1.776zM5.432 5h1.137l0.9 3h-2.937l0.9-3zM11 13l2.5-4 2.5 4h-5z M13.5 2h-1c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5h2c0.276 0 0.5-0.224 0.5-0.5s-0.224-0.5-0.5-0.5h-2c-0.827 0-1.5 0.673-1.5 1.5 0 0.384 0.145 0.734 0.383 1 0.275 0.307 0.674 0.5 1.117 0.5h1c0.276 0 0.5 0.224 0.5 0.5s-0.224 0.5-0.5 0.5h-2c-0.276 0-0.5 0.224-0.5 0.5s0.224 0.5 0.5 0.5h2c0.827 0 1.5-0.673 1.5-1.5 0-0.384-0.145-0.734-0.383-1-0.275-0.307-0.674-0.5-1.117-0.5z"
  },
  scroll: {
    width: 512,
    height: 512,
    path: "M426.667 0c-46.933 0-85.333 38.4-85.333 85.333V192c0 12.8 8.533 21.333 21.333 21.333h128c12.8 0 21.333-8.533 21.333-21.333V85.333C512 38.4 473.6 0 426.667 0zm42.666 170.667H384V85.333c0-23.467 19.2-42.667 42.667-42.667s42.667 19.2 42.667 42.667v85.334zM362.667 384c-12.8 0-21.333 8.533-21.333 21.333v21.333c0 12.8 8.533 21.333 21.333 21.333S384 439.467 384 426.667v-21.333c0-12.801-8.533-21.334-21.333-21.334z M362.667 405.333c-12.8 0-21.333 8.533-21.333 21.333 0 23.467-19.2 42.667-42.667 42.667S256 450.133 256 426.667v-21.333c0-12.8-8.533-21.333-21.333-21.333-12.8 0-21.333 8.533-21.333 21.333v21.333c0 46.933 38.4 85.333 85.333 85.333S384 473.6 384 426.667c0-12.8-8.533-21.334-21.333-21.334z M426.667 0h-320c-36.267 0-64 27.733-64 64v341.333c0 12.8 8.533 21.333 21.333 21.333s21.333-8.533 21.333-21.333V64c0-12.8 8.533-21.333 21.333-21.333H352c-6.4 12.8-10.667 27.733-10.667 42.667v320c0 12.8 8.533 21.333 21.333 21.333S384 418.133 384 405.333v-320c0-23.467 19.2-42.667 42.667-42.667C454.4 42.667 454.4 0 426.667 0z M298.667 469.333c-23.467 0-42.667-19.2-42.667-42.667v-21.333c0-12.8-8.533-21.333-21.333-21.333H21.333C8.533 384 0 392.533 0 405.333v21.333C0 473.6 38.4 512 85.333 512h213.333c27.734 0 27.734-42.667.001-42.667zm-213.334 0c-23.467 0-42.667-19.2-42.667-42.667h170.667c0 14.933 4.267 29.867 10.667 42.667H85.333zM192 106.667h-42.667C136.533 106.667 128 115.2 128 128s8.533 21.333 21.333 21.333H192c12.8 0 21.333-8.533 21.333-21.333S204.8 106.667 192 106.667zM277.333 192h-42.667c-12.8 0-21.333 8.533-21.333 21.333 0 12.8 8.533 21.333 21.333 21.333h42.667c12.8 0 21.333-8.533 21.333-21.333.001-12.8-8.533-21.333-21.333-21.333zM277.333 106.667H256c-12.8 0-21.333 8.533-21.333 21.333S243.2 149.333 256 149.333h21.333c12.8 0 21.333-8.533 21.333-21.333s-8.533-21.333-21.333-21.333zM192 277.333h-42.667c-12.8 0-21.333 8.533-21.333 21.333 0 12.8 8.533 21.333 21.333 21.333H192c12.8 0 21.333-8.533 21.333-21.333 0-12.799-8.533-21.333-21.333-21.333zM277.333 277.333H256c-12.8 0-21.333 8.533-21.333 21.333 0 12.8 8.533 21.333 21.333 21.333h21.333c12.8 0 21.333-8.533 21.333-21.333.001-12.799-8.533-21.333-21.333-21.333zM149.333 192c-12.8 0-21.333 8.533-21.333 21.333 0 12.8 8.533 21.333 21.333 21.333 12.8 0 21.333-8.533 21.333-21.333.001-12.8-8.533-21.333-21.333-21.333z"
  },
  tighten: {
    width: 16,
    height: 16,
    path: "M0 4h3v2.75h-3z M4.5 4H16v2.75H4.5z M0 9h3v2.75h-3z M4.5 9H16v2.75H4.5z M7 0H13.5L10.25 4 M7 16L10.25 12L13.5 16z"
  },
  table: {
    width: 24,
    height: 24,
    path: "M17,17 L17,22 L19,22 C20.6568542,22 22,20.6568542 22,19 L22,17 L17,17 Z M15,17 L9,17 L9,22 L15,22 L15,17 Z M17,15 L22,15 L22,9 L17,9 L17,15 Z M15,15 L15,9 L9,9 L9,15 L15,15 Z M17,7 L22,7 L22,5 C22,3.34314575 20.6568542,2 19,2 L17,2 L17,7 Z M15,7 L15,2 L9,2 L9,7 L15,7 Z M24,16.1768671 L24,19 C24,21.7614237 21.7614237,24 19,24 L5,24 C2.23857625,24 2.11453371e-15,21.7614237 1.77635684e-15,19 L0,5 C-3.38176876e-16,2.23857625 2.23857625,2.28362215e-15 5,0 L19,0 C21.7614237,-5.07265313e-16 24,2.23857625 24,5 L24,7.82313285 C24.0122947,7.88054124 24.0187107,7.93964623 24.0187107,8 C24.0187107,8.06035377 24.0122947,8.11945876 24,8.17686715 L24,15.8231329 C24.0122947,15.8805412 24.0187107,15.9396462 24.0187107,16 C24.0187107,16.0603538 24.0122947,16.1194588 24,16.1768671 Z M7,2 L5,2 C3.34314575,2 2,3.34314575 2,5 L2,7 L7,7 L7,2 Z M2,9 L2,15 L7,15 L7,9 L2,9 Z M2,17 L2,19 C2,20.6568542 3.34314575,22 5,22 L7,22 L7,17 L2,17 Z"
  },
  delete_table: {
    width: 24,
    height: 24,
    path: "M19,14 C21.7600532,14.0033061 23.9966939,16.2399468 24,19 C24,21.7614237 21.7614237,24 19,24 C16.2385763,24 14,21.7614237 14,19 C14,16.2385763 16.2385763,14 19,14 Z M16.5,19.9375 L21.5,19.9375 C22.017767,19.9375 22.4375,19.517767 22.4375,19 C22.4375,18.482233 22.017767,18.0625 21.5,18.0625 L16.5,18.0625 C15.982233,18.0625 15.5625,18.482233 15.5625,19 C15.5625,19.517767 15.982233,19.9375 16.5,19.9375 Z M12.2898787,17 L9,17 L9,22 L12.6736312,22 C13.0297295,22.7496048 13.515133,23.4258795 14.1010173,24 L5,24 C2.23857625,24 -1.43817996e-15,21.7614237 -1.77635684e-15,19 L-3.55271368e-15,5 C-3.89089055e-15,2.23857625 2.23857625,5.07265313e-16 5,-1.77635684e-15 L19,-1.77635684e-15 C21.7614237,-2.28362215e-15 24,2.23857625 24,5 L24,7.82313285 C24.0122947,7.88054124 24.0187107,7.93964623 24.0187107,8 C24.0187107,8.06035377 24.0122947,8.11945876 24,8.17686715 L24,14.1010173 C23.4258795,13.515133 22.7496048,13.0297295 22,12.6736312 L22,9 L17,9 L17,12.2898787 C16.2775651,12.5048858 15.6040072,12.8333806 15,13.2546893 L15,9 L9,9 L9,15 L13.2546893,15 C12.8333806,15.6040072 12.5048858,16.2775651 12.2898787,17 Z M17,7 L22,7 L22,5 C22,3.34314575 20.6568542,2 19,2 L17,2 L17,7 Z M15,7 L15,2 L9,2 L9,7 L15,7 Z M7,2 L5,2 C3.34314575,2 2,3.34314575 2,5 L2,7 L7,7 L7,2 Z M2,9 L2,15 L7,15 L7,9 L2,9 Z M2,17 L2,19 C2,20.6568542 3.34314575,22 5,22 L7,22 L7,17 L2,17 Z"
  },
  add_col_before: {
    width: 24,
    height: 24,
    path: "M19,14 C21.7600532,14.0033061 23.9966939,16.2399468 24,19 C24,21.7614237 21.7614237,24 19,24 C16.2385763,24 14,21.7614237 14,19 C14,16.2385763 16.2385763,14 19,14 Z M21.5,19.9375 C22.017767,19.9375 22.4375,19.517767 22.4375,19 C22.4375,18.482233 22.017767,18.0625 21.5,18.0625 L20.25,18.0625 C20.077411,18.0625 19.9375,17.922589 19.9375,17.75 L19.9375,16.5 C19.9375,15.982233 19.517767,15.5625 19,15.5625 C18.482233,15.5625 18.0625,15.982233 18.0625,16.5 L18.0625,17.75 C18.0625,17.922589 17.922589,18.0625 17.75,18.0625 L16.5,18.0625 C15.982233,18.0625 15.5625,18.482233 15.5625,19 C15.5625,19.517767 15.982233,19.9375 16.5,19.9375 L17.75,19.9375 C17.922589,19.9375 18.0625,20.077411 18.0625,20.25 L18.0625,21.5 C18.0625,22.017767 18.482233,22.4375 19,22.4375 C19.517767,22.4375 19.9375,22.017767 19.9375,21.5 L19.9375,20.25 C19.9375,20.077411 20.077411,19.9375 20.25,19.9375 L21.5,19.9375 Z M2,19 C2,20.6568542 3.34314575,22 5,22 C6.65685425,22 8,20.6568542 8,19 L8,5 C8,3.34314575 6.65685425,2 5,2 C3.34314575,2 2,3.34314575 2,5 L2,19 Z M-2.7585502e-16,19 L5.81397739e-16,5 C-1.37692243e-16,2.23857625 2.23857625,0 5,0 C7.76142375,0 10,2.23857625 10,5 L10,19 C10,21.7614237 7.76142375,24 5,24 C2.23857625,24 4.43234962e-16,21.7614237 -2.7585502e-16,19 Z"
  },
  add_col_after: {
    width: 24,
    height: 24,
    path: "M5,14 C7.76005315,14.0033061 9.99669388,16.2399468 10,19 C10,21.7614237 7.76142375,24 5,24 C2.23857625,24 1.77635684e-15,21.7614237 1.77635684e-15,19 C1.77635684e-15,16.2385763 2.23857625,14 5,14 Z M7.5,19.9375 C8.01776695,19.9375 8.4375,19.517767 8.4375,19 C8.4375,18.482233 8.01776695,18.0625 7.5,18.0625 L6.25,18.0625 C6.07741102,18.0625 5.9375,17.922589 5.9375,17.75 L5.9375,16.5 C5.9375,15.982233 5.51776695,15.5625 5,15.5625 C4.48223305,15.5625 4.0625,15.982233 4.0625,16.5 L4.0625,17.75 C4.0625,17.922589 3.92258898,18.0625 3.75,18.0625 L2.5,18.0625 C1.98223305,18.0625 1.5625,18.482233 1.5625,19 C1.5625,19.517767 1.98223305,19.9375 2.5,19.9375 L3.75,19.9375 C3.92258898,19.9375 4.0625,20.077411 4.0625,20.25 L4.0625,21.5 C4.0625,22.017767 4.48223305,22.4375 5,22.4375 C5.51776695,22.4375 5.9375,22.017767 5.9375,21.5 L5.9375,20.25 C5.9375,20.077411 6.07741102,19.9375 6.25,19.9375 L7.5,19.9375 Z M16,19 C16,20.6568542 17.3431458,22 19,22 C20.6568542,22 22,20.6568542 22,19 L22,5 C22,3.34314575 20.6568542,2 19,2 C17.3431458,2 16,3.34314575 16,5 L16,19 Z M14,19 L14,5 C14,2.23857625 16.2385763,0 19,0 C21.7614237,0 24,2.23857625 24,5 L24,19 C24,21.7614237 21.7614237,24 19,24 C16.2385763,24 14,21.7614237 14,19 Z"
  },
  add_row_before: {
    width: 24,
    height: 24,
    path: "M19,14 C21.7600532,14.0033061 23.9966939,16.2399468 24,19 C24,21.7614237 21.7614237,24 19,24 C16.2385763,24 14,21.7614237 14,19 C14,16.2385763 16.2385763,14 19,14 Z M21.5,19.9375 C22.017767,19.9375 22.4375,19.517767 22.4375,19 C22.4375,18.482233 22.017767,18.0625 21.5,18.0625 L20.25,18.0625 C20.077411,18.0625 19.9375,17.922589 19.9375,17.75 L19.9375,16.5 C19.9375,15.982233 19.517767,15.5625 19,15.5625 C18.482233,15.5625 18.0625,15.982233 18.0625,16.5 L18.0625,17.75 C18.0625,17.922589 17.922589,18.0625 17.75,18.0625 L16.5,18.0625 C15.982233,18.0625 15.5625,18.482233 15.5625,19 C15.5625,19.517767 15.982233,19.9375 16.5,19.9375 L17.75,19.9375 C17.922589,19.9375 18.0625,20.077411 18.0625,20.25 L18.0625,21.5 C18.0625,22.017767 18.482233,22.4375 19,22.4375 C19.517767,22.4375 19.9375,22.017767 19.9375,21.5 L19.9375,20.25 C19.9375,20.077411 20.077411,19.9375 20.25,19.9375 L21.5,19.9375 Z M5,2 C3.34314575,2 2,3.34314575 2,5 C2,6.65685425 3.34314575,8 5,8 L19,8 C20.6568542,8 22,6.65685425 22,5 C22,3.34314575 20.6568542,2 19,2 L5,2 Z M5,0 L19,0 C21.7614237,-5.07265313e-16 24,2.23857625 24,5 C24,7.76142375 21.7614237,10 19,10 L5,10 C2.23857625,10 3.38176876e-16,7.76142375 0,5 C-1.2263553e-15,2.23857625 2.23857625,5.07265313e-16 5,0 Z"
  },
  add_row_after: {
    width: 24,
    height: 24,
    path: "M19,0 C21.7600532,0.00330611633 23.9966939,2.23994685 24,5 C24,7.76142375 21.7614237,10 19,10 C16.2385763,10 14,7.76142375 14,5 C14,2.23857625 16.2385763,0 19,0 Z M21.5,5.9375 C22.017767,5.9375 22.4375,5.51776695 22.4375,5 C22.4375,4.48223305 22.017767,4.0625 21.5,4.0625 L20.25,4.0625 C20.077411,4.0625 19.9375,3.92258898 19.9375,3.75 L19.9375,2.5 C19.9375,1.98223305 19.517767,1.5625 19,1.5625 C18.482233,1.5625 18.0625,1.98223305 18.0625,2.5 L18.0625,3.75 C18.0625,3.92258898 17.922589,4.0625 17.75,4.0625 L16.5,4.0625 C15.982233,4.0625 15.5625,4.48223305 15.5625,5 C15.5625,5.51776695 15.982233,5.9375 16.5,5.9375 L17.75,5.9375 C17.922589,5.9375 18.0625,6.07741102 18.0625,6.25 L18.0625,7.5 C18.0625,8.01776695 18.482233,8.4375 19,8.4375 C19.517767,8.4375 19.9375,8.01776695 19.9375,7.5 L19.9375,6.25 C19.9375,6.07741102 20.077411,5.9375 20.25,5.9375 L21.5,5.9375 Z M5,16 C3.34314575,16 2,17.3431458 2,19 C2,20.6568542 3.34314575,22 5,22 L19,22 C20.6568542,22 22,20.6568542 22,19 C22,17.3431458 20.6568542,16 19,16 L5,16 Z M5,14 L19,14 C21.7614237,14 24,16.2385763 24,19 C24,21.7614237 21.7614237,24 19,24 L5,24 C2.23857625,24 3.38176876e-16,21.7614237 0,19 C-1.2263553e-15,16.2385763 2.23857625,14 5,14 Z"
  },
  combine_cells: {
    width: 24,
    height: 24,
    path: "M2,19 C2,20.6568542 3.34314575,22 5,22 L19,22 C20.6568542,22 22,20.6568542 22,19 L22,5 C22,3.34314575 20.6568542,2 19,2 L5,2 C3.34314575,2 2,3.34314575 2,5 L2,19 Z M-1.16403344e-15,19 L-3.0678068e-16,5 C-6.44957556e-16,2.23857625 2.23857625,0 5,0 L19,0 C21.7614237,0 24,2.23857625 24,5 L24,19 C24,21.7614237 21.7614237,24 19,24 L5,24 C2.23857625,24 9.50500275e-16,21.7614237 -1.16403344e-15,19 Z M12,10 C12.5522847,10 13,10.4477153 13,11 L13,13 C13,13.5522847 12.5522847,14 12,14 C11.4477153,14 11,13.5522847 11,13 L11,11 C11,10.4477153 11.4477153,10 12,10 Z M12,16 C12.5522847,16 13,16.4477153 13,17 L13,20 C13,20.5522847 12.5522847,21 12,21 C11.4477153,21 11,20.5522847 11,20 L11,17 C11,16.4477153 11.4477153,16 12,16 Z M12,3 C12.5522847,3 13,3.44771525 13,4 L13,7 C13,7.55228475 12.5522847,8 12,8 C11.4477153,8 11,7.55228475 11,7 L11,4 C11,3.44771525 11.4477153,3 12,3 Z"
  },
  table_caption: {
    width: 24,
    height: 24,
    path: "M17,18 L17,22 L19,22 C20.6568542,22,22,20.6568542,22,19 L22,18 L17,18 Z M15,18 L9,18 L9,22 L15,22 L15,18 Z M17,16 L22,16 L22,12 L17,12 L17,16 Z M15,16 L15,12 L9,12 L9,16 L15,16 Z M17,10 L22,10 L22,9 C22,9,22,6,19,6 L17,6 L17,10 Z M15,10 L15,6 L9,6 L9,10 L15,10 Z M24,16.1768671 L24,19 C24,21.7614237,21.7614237,24,19,24 L5,24 C2.23857625,24,0,21.7614237,0,19 L0,9 C0,6,2,4,5,4 L19,4 C21.7614237,4,24,6.23857625,24,9 L24,7.82313285 C24.0122947,7.88054124,24.0187107,7.93964623,24.0187107,8 C24.0187107,8.06035377,24.0122947,8.11945876,24,8.17686715 L24,15.8231329 C24.0122947,15.8805412,24.0187107,15.9396462,24.0187107,16 C24.0187107,16.0603538,24.0122947,16.1194588,24,16.1768671 Z M7,6 L5,6 C3.34314575,6,2,7.34314575,2,9 L2,10 L7,10 L7,6 Z M2,12 L2,16 L7,16 L7,12 L2,12 Z M2,18 L2,19 C2,20.6568542,3.34314575,22,5,22 L7,22 L7,18 L2,18 Z M4,0 H20 V1.75 H4 Z"
  },
  delete_col: {
    width: 24,
    height: 24,
    path: "M12.6414391,21.9312708 C12.9358807,22.5689168 13.3234155,23.1547532 13.7866134,23.6713497 C13.2317936,23.8836754 12.6294813,24 12,24 C9.23857625,24 7,21.7614237 7,19 L7,5 C7,2.23857625 9.23857625,0 12,0 C14.7614237,0 17,2.23857625 17,5 L17,12.2898787 C16.2775651,12.5048858 15.6040072,12.8333806 15,13.2546893 L15,5 C15,3.34314575 13.6568542,2 12,2 C10.3431458,2 9,3.34314575 9,5 L9,19 C9,20.6568542 10.3431458,22 12,22 C12.220157,22 12.4347751,21.9762852 12.6414391,21.9312708 Z M19,14 C21.7600532,14.0033061 23.9966939,16.2399468 24,19 C24,21.7614237 21.7614237,24 19,24 C16.2385763,24 14,21.7614237 14,19 C14,16.2385763 16.2385763,14 19,14 Z M16.5,19.9375 L21.5,19.9375 C22.017767,19.9375 22.4375,19.517767 22.4375,19 C22.4375,18.482233 22.017767,18.0625 21.5,18.0625 L16.5,18.0625 C15.982233,18.0625 15.5625,18.482233 15.5625,19 C15.5625,19.517767 15.982233,19.9375 16.5,19.9375 Z"
  },
  delete_row: {
    width: 24,
    height: 24,
    path: "M13.2546893,15 C12.8333806,15.6040072 12.5048858,16.2775651 12.2898787,17 L5,17 C2.23857625,17 3.38176876e-16,14.7614237 0,12 C-1.2263553e-15,9.23857625 2.23857625,7 5,7 L19,7 C21.7614237,7 24,9.23857625 24,12 C24,12.6294813 23.8836754,13.2317936 23.6713497,13.7866134 C23.1547532,13.3234155 22.5689168,12.9358807 21.9312708,12.6414391 C21.9762852,12.4347751 22,12.220157 22,12 C22,10.3431458 20.6568542,9 19,9 L5,9 C3.34314575,9 2,10.3431458 2,12 C2,13.6568542 3.34314575,15 5,15 L13.2546893,15 Z M19,14 C21.7600532,14.0033061 23.9966939,16.2399468 24,19 C24,21.7614237 21.7614237,24 19,24 C16.2385763,24 14,21.7614237 14,19 C14,16.2385763 16.2385763,14 19,14 Z M16.5,19.9375 L21.5,19.9375 C22.017767,19.9375 22.4375,19.517767 22.4375,19 C22.4375,18.482233 22.017767,18.0625 21.5,18.0625 L16.5,18.0625 C15.982233,18.0625 15.5625,18.482233 15.5625,19 C15.5625,19.517767 15.982233,19.9375 16.5,19.9375 Z"
  },
  spreadsheet: {
    width: 24,
    height: 24,
    path: "M17 22 L 19 22 C20.6569 22 22 20.6569 22 19 L22 7 L 22 5 C 22 3.3431 20.6569 2 19 2 L7 2 L5 2 C 3.3431 2 3 3.3431 2 5 L2 17 L2 19 C 2 20.6569 3.3431 22 5 22 L7 22 Z M24,16.1768671 L24,19 C24,21.7614237 21.7614237,24 19,24 L5,24 C2.23857625,24 2.11453371e-15,21.7614237 1.77635684e-15,19 L0,5 C-3.38176876e-16,2.23857625 2.23857625,2.28362215e-15 5,0 L19,0 C21.7614237,-5.07265313e-16 24,2.23857625 24,5 L24,7.82313285 C24.0122947,7.88054124 24.0187107,7.93964623 24.0187107,8 C24.0187107,8.06035377 24.0122947,8.11945876 24,8.17686715 L24,15.8231329 C24.0122947,15.8805412 24.0187107,15.9396462 24.0187107,16 C24.0187107,16.0603538 24.0122947,16.1194588 24,16.1768671 Z M19 7 H5 V10 H19 Z M19 14 H5 V17 H19 Z"
  },
  grid: {
    width: 16,
    height: 16,
    path: "M0 1v13h16v-13h-16zM6 9v-3h4v3h-4zM10 10v3h-4v-3h4zM10 2v3h-4v-3h4zM5 2v3h-4v-3h4zM1 6h4v3h-4v-3zM11 6h4v3h-4v-3zM11 5v-3h4v3h-4zM1 10h4v3h-4v-3zM11 13v-3h4v3h-4z"
  },
  nogrid: {text: "\u2b1a", css: "font-weight: bold"},
  oneRule: {
    width: 16,
    height: 16,
    path: "M0 2h16v-1.5h-16z"
  },
  twoRules: {
    width: 16,
    height: 16,
    path: "M0 2h16v-1h-16zM0 14h16v-1h-16z"
  },
  threeRules: {
    width: 16,
    height: 16,
    path: "M0 2h16v-2h-16zM0 5h16v-1h-16zM0 16h16v-2h-16z"
  },
  fourRules: {
    width: 16,
    height: 16,
    path: "M0 2h16v-2h-16zM0 5h16v-1h-16zM0 12h16v-1h-16zM0 16h16v-2h-16z"
  },
  rules: {
    width: 16,
    height: 16,
    path: "M0 1h16v1h-16zM0 5h16v1h-16zM0 9h16v1h-16zM0 13h16v1h-16z"
  },
  striped: {
    width: 16,
    height: 16,
    path: "M0 1h16v3h-16zM0 9h16v3h-16z"
  },
  cog: {
    width: 16,
    height: 16,
    path: "M14.59 9.535c-0.839-1.454-0.335-3.317 1.127-4.164l-1.572-2.723c-0.449 0.263-0.972 0.414-1.529 0.414-1.68 0-3.042-1.371-3.042-3.062h-3.145c0.004 0.522-0.126 1.051-0.406 1.535-0.839 1.454-2.706 1.948-4.17 1.106l-1.572 2.723c0.453 0.257 0.845 0.634 1.123 1.117 0.838 1.452 0.336 3.311-1.12 4.16l1.572 2.723c0.448-0.261 0.967-0.41 1.522-0.41 1.675 0 3.033 1.362 3.042 3.046h3.145c-0.001-0.517 0.129-1.040 0.406-1.519 0.838-1.452 2.7-1.947 4.163-1.11l1.572-2.723c-0.45-0.257-0.839-0.633-1.116-1.113zM8 11.24c-1.789 0-3.24-1.45-3.24-3.24s1.45-3.24 3.24-3.24c1.789 0 3.24 1.45 3.24 3.24s-1.45 3.24-3.24 3.24z"
  },
  "align-left": {
    width: 16,
    height: 16,
    path: "M0 1h16v2h-16zM0 4h10v2h-10zM0 10h10v2h-10zM0 7h16v2h-16zM0 13h16v2h-16"
  },
  "align-center": {
    width: 16,
    height: 16,
    path: "M0 1h16v2h-16zM3 4h10v2h-10zM3 10h10v2h-10zM0 7h16v2h-16zM0 13h16v2h-16z"
  },
  "align-right": {
    width: 16,
    height: 16,
    path: "M0 1h16v2h-16zM6 4h10v2h-10zM6 10h10v2h-10zM0 7h16v2h-16zM0 13h16v2h-16z"
  },
  info: {
    width: 16,
    height: 16,
    path: "M7 4.75c0-0.412 0.338-0.75 0.75-0.75h0.5c0.412 0 0.75 0.338 0.75 0.75v0.5c0 0.412-0.338 0.75-0.75 0.75h-0.5c-0.412 0-0.75-0.338-0.75-0.75v-0.5z M10 12h-4v-1h1v-3h-1v-1h3v4h1z M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5 6.5 2.91 6.5 6.5-2.91 6.5-6.5 6.5z"
  }
};


// Helpers to create specific types of items

function canInsert(state, nodeType) {
  let $from = state.selection.$from;
  for (let d = $from.depth; d >= 0; d--) {
    let index = $from.index(d);
    if ($from.node(d).canReplaceWith(index, index, nodeType)) return true
  }
  return false
}

function insertHeader(state, dispatch) {
  return new MenuItem({
    title: "Insert a print header",
    label: "Print header",
    enable() {
      return true
    },
    run(state, dispatch) {
      window.scrollTo(0, 0);

      // Don't overwrite an existing header.
      if (state.doc.nodeAt(0).type.name === "header") { return }

      // Insert the <header> element and an enclosed one-row <table>.
      dispatch(state.tr.insert(0, schema.nodeFromJSON(JSON.parse(
        `{"type":"header","content":[{"type":"table","attrs":{"class":"one-rule c2c c3r"},
"content":[{"type":"table_row","content":[{"type":"table_header","content":[
{"type":"paragraph","content":[{"type":"text","text":"left"}]}]},
{"type":"table_header","content":[{"type":"paragraph","content":[{"type":"text","text":"center"}]}]},
{"type":"table_header","content":[{"type":"paragraph","content":[{"type":"text","text":"$PAGE"}]}]}]}]}]}`
      ))));
    }
  })
}

const navigate = () => {
  return new MenuItem({
    title: "Navigate",
    icon: hurmetIcons.navicon,
    run(state, _, view) {
      // Get an array of the h1 nodes
      const buttons = [{ textContent: "Top", pos: 0 }];
      const bottom = view.dom.getBoundingClientRect().bottom - 320;
      state.doc.nodesBetween(0, state.doc.content.size, function(node, pos) {
        if (node.type.name === "heading" && (node.attrs.level === 1 || node.attrs.level === 2)) {
          buttons.push({textContent: (node.attrs.level === 1)
            ? node.textContent
            : "\xa0\xa0\xa0\xa0" + node.textContent,
            pos: pos});
        }
      });
      buttons.push({ textContent: "Bottom", pos: bottom });
      // Open a dialog box and populate with buttons
      const callback = pos => {
        const headingTop = view.coordsAtPos(pos).top;
        const boundingTop = view.dom.getBoundingClientRect().top;
        window.scrollTo(0, headingTop - boundingTop);
      };
      openSelectPrompt("Scroll to…", buttons, callback);
    }
  })
};

const tighten = () => {
  return new MenuItem({
    title: "Tighten list item",
    icon: hurmetIcons.tighten,
    select: state => {
      // Make the button visible only when inside a list item.
      const {$from, $to, node} = state.selection;
      const parent = $from.node(-1);
      return ($from.node().type.name == "paragraph" && 
              parent.type.name == "list_item" &&
              parent.childCount < 2 &&
              $from.pos === $to.pos)
    },
    run(state, _, view) {
      const {$from, $to, node} = state.selection;
      const pos = $from.pos;
      const list = $from.node(-2);
      const listPos = $from.start(-2) - 1;
      const ast = list.toJSON();
      for (const item of ast.content) {
        item.type = "tight_list_item";
      }
      const tightList = schema.nodeFromJSON(ast);
      const tr = state.tr;
      tr.replaceWith(listPos, listPos + list.nodeSize, tightList);
      tr.setSelection(TextSelection.create(tr.doc, pos));
      view.dispatch(tr);
    }
  })
};

const findParentNode = predicate => selection => {
  const { $from } = selection;
  for (let i = $from.depth; i > 0; i--) {
    const node = $from.node(i);
    if (predicate(node)) {
      return {
        pos: i > 0 ? $from.before(i) : 0,
        start: $from.start(i),
        depth: i,
        node
      }
    }
  }
};

// Export printHurmet so that it is available in keymap.js
function printHurmet(view) {
  paginate(view, schema.nodes.toc, forPrint);
  window.print();
}

const print = () => {
  return new MenuItem({
    title: "Print",
    label: "Print…",
    run(state, _, view) {
      printHurmet(view);
    }
  })
};

const hint = (label, buttonTitle, promptTitle, className, hints) => {
  return new MenuItem({
    label: label,
    title: buttonTitle,
    class: className,
    run(state, dispatch, view) {
      const promptOptions = { title: promptTitle, hints, state, dispatch };
      openPrompt(promptOptions);
    }
  })
};

const footnote = () => {
  return new MenuItem({
    title: "Insert footnote",
    icon: hurmetIcons.footnote,
    select(state) {
      return insertPoint(state.doc, state.selection.from, schema.nodes.footnote) != null
    },
    run(state, dispatch) {
      let {empty, $from, $to} = state.selection, content = Fragment.empty;
      if (!empty && $from.sameParent($to) && $from.parent.inlineContent) {
        content = $from.parent.content.cut($from.parentOffset, $to.parentOffset);
      }
      const tr = state.tr;
      tr.replaceSelectionWith(schema.nodes.footnote.create(null, content));
      if (content.content.length === 0) {
        tr.setSelection(NodeSelection.create(tr.doc, $from.pos));
      }
      dispatch(tr);
    }
  })
};

const findTable = selection =>
  findParentNode(
    node => node.type.spec.tableRole && node.type.spec.tableRole === 'table'
  )(selection);

const isCellSelection = selection => {
  return selection instanceof CellSelection;
};
  // :: (selection: Selection) → ?{left: number, right: number, top: number, bottom: number}
// Get the selection rectangle. Returns `undefined` if selection is not a CellSelection.
const getSelectionRect = selection => {
  if (!isCellSelection(selection)) {
    return;
  }
  const start = selection.$anchorCell.start(-1);
  const map = TableMap.get(selection.$anchorCell.node(-1));
  return map.rectBetween(
    selection.$anchorCell.pos - start,
    selection.$headCell.pos - start
  )
};

const pruneHurmet = (state, view) => {
  const positions = [];
  const tr = state.tr;
  // Traverse the doc and find locations of empty calculation zones.
  state.doc.nodesBetween(0, state.doc.content.size, function(node, pos) {
    if ((node.type.name === "calculation" && node.attrs.entry.length === 0) || 
        (node.type.name === "tex" && node.attrs.tex.length === 0)) {
      positions.push(pos);
    }
  });
  // Delete the empty nodes
  for (let i = positions.length - 1; i >= 0; i--) {
    tr.delete(positions[i], positions[i] + 1);
  }
  view.dispatch(tr);
};

function deleteComments(state, dispatch) {
  return new MenuItem({
    title: "Delete all comments",
    label: "Delete all comments",
    enable() {
      return true
    },
    run(state, dispatch) {
      // Traverse the document tree and locate all comment nodes
      const positions = [];
      const tr = state.tr;
      state.doc.nodesBetween(0, state.doc.content.size, function(node, pos) {
        if (node.type.name === "comment") {
          positions.push({ start: pos, end: pos + node.nodeSize });
        }
      });
      // Delete the comments
      for (let i = positions.length - 1; i >= 0; i--) {
        tr.delete(positions[i].start, positions[i].end);
      }
      dispatch(tr);
    }
  })
}

async function writeFile(fileHandle, contents) {
  // Create a FileSystemWritableFileStream to write to.
  const writable = await fileHandle.createWritable();
  // Write the contents of the file to the stream.
  await writable.write(contents);
  // Close the file and write the contents to disk.
  await writable.close();
}

function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}

// Export saveFileAsMarkdown so that it is available in keymap.js
function saveFileAsMarkdown(state, view, isSaveAs = false) {
  pruneHurmet(state, view);   // Prune away any empty Hurmet math zones.
  let str = `---------------
decimalFormat: ${state.doc.attrs.decimalFormat}
fontSize: ${state.doc.attrs.fontSize}
pageSize: ${state.doc.attrs.pageSize}
dateFormat: ${state.doc.attrs.dateFormat}
saveDate: ${new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60 * 1000).toISOString().split("T")[0]}
---------------

` + hurmetMarkdownSerializer.serialize(state.doc, new Map(), [], false, false, false);

  // Save some fetched data as a fallback for when the internet is down.
  let gottaFallback = false;
  const fallbacks = {};
  state.doc.nodesBetween(0, state.doc.content.size, function(node, pos) {
    if (node.type.name === "calculation" && node.attrs.isFetch) {
      gottaFallback = true;
      const url = node.attrs.entry.replace(/^[^()]+\("?/, "").replace(/"?\).*$/, "").trim();
      let text = "";
      if (node.attrs.dtype === dt.MODULE) {
        text = node.attrs.fallback;
      } else if (node.attrs.dtype === dt.DATAFRAME) {
        text += node.attrs.value.rowMap ? "#" : "";
        text += node.attrs.value.headings.join("\t");
        if (node.attrs.value.units) { text += "\n" + node.attrs.value.units.join("\t"); }
        Array.from(node.attrs.value.usedRows).sort((a, b) => a - b).forEach(row => {
          let rowText = "\n";
          for (let j = 0; j < node.attrs.value.headings.length; j++) {
            rowText += node.attrs.value.data[j][row] + "\t";
          }
          text += rowText.slice(0, -1);
        });
      }
      fallbacks[node.attrs.name] = { url, text };
    }
  });
  if (gottaFallback) {
    str += `\n<!--FALLBACKS-->\n` + JSON.stringify(fallbacks);
  }

  for (const snapshot of state.doc.attrs.snapshots) {
    str += `\n<!--SNAPSHOT-->\ndate: ${snapshot.date}\nmessage: ${snapshot.message}\n\n`;
    str += snapshot.content;
  }
  str =  str;
  if (window.showOpenFilePicker && state.doc.attrs.saveIsValid && state.doc.attrs.fileHandle && !isSaveAs) {
    // Use the Chromium File System Access API, so users can click to save a document.
    const button = document.getElementsByClassName("ProseMirror-menubar").item(0).children[1];
    // Blink the button, so the author knows that a save takes place.
    button.classList.add("ProseMirror-menu-active");
    writeFile(state.doc.attrs.fileHandle, str);
    sleep(500).then(() => {
      button.classList.remove("ProseMirror-menu-active");
    });
  } else {
    // Legacy method for Firefox and Safari
    const blob = new Blob([str], {type: "text/plain;charset=utf-8"});
    FileSaverExports.saveAs(blob, "HurmetFile.md", { autoBom : false });
    state.doc.attrs.saveIsValid = false;
    document.name = "Hurmet.org";
  }
}

function saveFile() {
  return new MenuItem({
    title: window.showOpenFilePicker
      ? "Save file   Ctrl-S"
      : '"Save" works only in Chrome or Edge.',
    label: "Save",
    enable(state) {
      return state.doc.attrs.saveIsValid
    },
    run(state, _, view) {
      saveFileAsMarkdown(state, view);
    }
  })
}

function saveFileAs() {
  return new MenuItem({
    title: window.showOpenFilePicker
      ? "Save file as…"
      : "Download file…",
    label: window.showOpenFilePicker
      ? "Save as…"
      : "Download file…",
    run(state, _, view) {
      saveFileAsMarkdown(state, view, true);
    }
  })
}

function permalink() {
  return new MenuItem({
    title: "Create a permalink URL in the address bar",
    label: "Create permalink",
    run(state, _, view) {
      const symbols = /[\r\n%#"()<>?[\\\]^`{|}]/g;
      const md = hurmetMarkdownSerializer.serialize(state.doc, new Map(), [], false, false, false);
      if (md && md.length > 0) {
        const hash = "#" + md.replace(symbols, encodeURIComponent);
        if (hash.length > 32000) {
          alert(`A URL this long will not work.\nFor best results, limit to one page and do not include embedded images.`);
        } else {
          if (hash.length > 5000) {
            alert(`A URL this long may not work in some browsers.\nFor best results, limit to one page and do not include embedded images.`);
          }
          location.hash = hash;
        }
      }
    }
  })
}

function openFile() {
  return new MenuItem({
    title: "Open file...",
    label: "Open…",
    run(state, _, view) {
      readFile(state, _, view, schema, "markdown");
    }
  })
}

function copyText(state, isGFM, withResults = false) {
  const text = hurmetMarkdownSerializer.serialize(state.selection.content().content, new Map(), [], isGFM, false, withResults);
  const type = "text/plain";
  const blob = new Blob([text], { type });
  const data = [new ClipboardItem({ [type]: blob })];
  navigator.clipboard.write(data);
}

function copyAsMarkdown() {
  return new MenuItem({
    label: "Copy as Hurmet Markdown",
    run(state, _, view) {
      copyText(state, false);
    }
  })
}

function copyAsMarkdownWithResults() {
  return new MenuItem({
    label: "Copy as MD w/Results",
    title: "Copy as Markdown. Include human-readable results.",
    run(state, _, view) {
      copyText(state, false, true);
    }
  })
}

function copyAsGFM() {
  return new MenuItem({
    label: "Copy as GitHub Markdown",
    title: "Copy as GitHub Flavored Markdown",
    run(state, _, view) {
      copyText(state, true);
    }
  })
}

function uploadImage(nodeType) {
  return new MenuItem({
    title: "Upload image file",
    icon: hurmetIcons.upload,
    enable(state) {
      return canInsert(state, nodeType)
    },
    run(state, _, view) {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = ".gif,.jpg,.jpeg,.png,.svg";
      input.onchange = _ => {
        const file = input.files[0];
        const alt = file.name.replace(/\..+$/, "");
        const reader = new FileReader();
        reader.onload = function(evt) {
          const url = evt.target.result;
          const pos = view.state.selection.from;
          view.dispatch(view.state.tr.replaceWith(pos, pos, schema.nodes.image.create(
            { src: url, alt }
          )));
        };
        reader.readAsDataURL(file);
      };
      input.click();
    }
  })
}

function toggleTableCaption() {
  return new MenuItem({
    title: "Insert or delete caption…",
    icon: hurmetIcons.table_caption,
    select(state) {
      return isInTable(state)
    },
    run(state, _, view) {
      const table = findTable(state.selection);
      let tableStart = 0;
      let tableEnd = 0;
      let depth = -1;
      let inFigure = false;
      let $from = state.selection.$from;
      const resolvedPos = state.doc.resolve(state.selection.from);
      for (let d = $from.depth; d >= 0; d--) {
        if ($from.node(d).type.name === "table") {
          tableStart = resolvedPos.before(d);
          tableEnd = resolvedPos.after(d);
          inFigure = d > 0 && $from.node(d - 1).type.name === "figure";
          depth = d;
          break
        }
      }
      if (inFigure) {
        // Delete the existing figure & caption, but keep the table.
        const figureStart = resolvedPos.before(depth - 1);
        const figureEnd = resolvedPos.after(depth - 1);
        const tr = state.tr;
        tr.replaceWith(figureStart, figureEnd, table.node);
        view.dispatch(tr);
        view.focus();
      } else {
        const promptOptions = {
          title: "Insert Table Caption",
          fields: { caption: new TextField({
            label: "Caption",
            value: ""
          }) },
          radioButtons: {
            name: "position",
            direction: "row",
            buttons: [["auto", "auto"], ["left", "left"], ["right", "right"]],
            current: "auto"
          },
          callback(attrs) {
            const str = attrs.caption ? attrs.caption : "caption";
            const caption = schema.nodes.figcaption.createAndFill(null, [schema.text(str)]);
            attrs.class += " top-caption";
            const tr = state.tr;
            tr.replaceWith(tableStart, tableEnd, schema.nodes.figure.createAndFill(attrs, [caption, table.node]));
            view.dispatch(tr);
            view.focus();
          }
        };
        openPrompt(promptOptions);
      }
    }
  })
}

function toggleSpreadsheet() {
  return new MenuItem({
    title: "Toggle Table ⇄ Spreadsheet",
    icon: hurmetIcons.spreadsheet,
    select(state) {
      return isInTable(state)
    },
    run(state, _, view) {
      let table = findTable(state.selection);
      let tableObj;
      let tableStart = 0;
      let tableEnd = 0;
      const fromSpreadsheet = table.node.content.content[0].content.content[0].content.content[0].type.name
                                 === "spreadsheet_cell";
      if (fromSpreadsheet) {
        [tableObj, tableStart, tableEnd] = sheetToTable(state, table.node);
      } else {
        [tableObj, tableStart, tableEnd] = tableToSheet(state, table.node);
      }
      const tr = state.tr;
      tr.replaceWith(tableStart, tableEnd, state.schema.nodeFromJSON(tableObj));
      view.dispatch(tr);
      if (!fromSpreadsheet) {
        hurmet.updateCalculations(view, false, tableObj.attrs, tableStart);    
      }
    }
  })
}

function insertImage(nodeType) {
  return new MenuItem({
    title: "Insert link to image or edit existing image",
    icon: hurmetIcons.image,
    enable(state) {
      if (state.selection.node && state.selection.node.type.name == "figimg") {
        nodeType = schema.nodes.figimg;
      }
      return canInsert(state, nodeType)
    },
    run(state, _, view) {
      let { from, to } = state.selection;
      let attrs = null;
      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType) {
        attrs = state.selection.node.attrs;
      }
      const resolvedPos = state.doc.resolve(from);
      const parent = resolvedPos.parent;
      const inFigure = parent.type.name === "figure";
      const parentStart = inFigure ? from - 1 : 0;
      const parentEnd = inFigure ? from - 1 + parent.nodeSize : 0;
      const promptOptions = {
        title: attrs && attrs.src ? "Edit image" : "Insert image",
        fields: {
          alt: new TextField({
            label: "Description",
            value: attrs ? attrs.alt : state.doc.textBetween(from, to, " ")
          }),
          width: new TextField({ label: "Width", value: attrs && attrs.width })
        },
        radioButtons: {
          name: "position",
          direction: "row",
          buttons: [["inline", "inline"], ["left", "left"],  ["center", "center"], ["right", "right"]],
          current: attrs && attrs.class ? attrs.class : "inline"
        },
        checkbox: {
          name: "Include a caption",
          checked: inFigure
        },
        callback(attrs) {
          const tr = view.state.tr;
          if (attrs.checkbox && !inFigure) {
            // Wrap with a figure and write a caption
            const str = attrs.alt ? attrs.alt : "caption";
            const caption = schema.nodes.figcaption.createAndFill(null, [schema.text(str)]);
            const image = schema.nodes.figimg.createAndFill(attrs);
            tr.replaceSelectionWith(schema.nodes.figure.createAndFill(attrs, [image, caption]));
          } else if (inFigure && !attrs.checkbox) {
            // Remove the wrapping figure and caption
            tr.replaceWith(parentStart, parentEnd, nodeType.createAndFill(attrs));
          } else {
            // Insert an image w/o a caption
            tr.replaceSelectionWith(nodeType.createAndFill(attrs));
          }
          view.dispatch(tr);
          view.focus();
        }
      };
      if (!(attrs && attrs.src) || (attrs && attrs.src && attrs.src.length < 400)) {
        promptOptions.fields = {
          src: new TextField({ label: "File path", required: true, value: attrs && attrs.src }),
          ...promptOptions.fields
        };
      } else if (attrs && attrs.src) {
        promptOptions.src = attrs.src;
      }
      openPrompt(promptOptions);
    }
  })
}

function setRoundingCriteria(nodeType) {
  return new MenuItem({
    title: "Insert rounding criteria",
    label: " .#… ",
    class: "math-button",
    enable(state) {
      return canInsert(state, nodeType)
    },
    run(state, _, view) {
      // Get the current loading criteria.
      let formatSpec = "h3"; // default
      const currentPos = state.selection.$from.pos;
      state.doc.nodesBetween(0, currentPos, function(node, pos) {
        if (node.type.name === "calculation" && node.attrs.name === "format") {
          formatSpec = node.attrs.value;
        }
      });
      const promptOptions = {
        title: "Rounding Criteria",
        radioButtons: {
          name: "rounding",
          direction: "column",
          buttons: [
            ["f", "Digits after decimal (f)"],
            ["r", "Significant digits (r)"],
            ["h", "Significant digits in fraction (h)"],
            ["S", "Scientific (S)"],
            ["N", "Engineering (N)"],
            ["e", "Programmer (e)"],
            ["k", "SI prefix (k)"],
            ["%", "Percentage (%)"],
            ["t", "Truncate to integer (t)"],
            ["b", "Binary (b)"],
            ["x", "Hexadecimal (x)"]
          ],
          current: formatSpec.slice(0, 1)
        },
        numDigits: formatSpec.slice(1),
        callback(params) {
          let spec = params.value;
          const numDigits = spec.slice(1);
          if (numDigits.length === 0) { spec += "0";}
          if (isNaN(numDigits)) {
            alert("Invalid number of digits");
            return
          }
          const attrs = hurmet.compile(`format = "${spec}"`);
          const tr = view.state.tr;
          tr.replaceSelectionWith(schema.nodes.calculation.createAndFill(attrs));
          view.dispatch(tr);
          hurmet.updateCalculations(view, true);
          view.focus();
        }
      };
      openPrompt(promptOptions);
    }
  })
}

function wrapInEpigraph(nodeType) {
  return new MenuItem({
    title: "Wrap in an epigraph",
    label: "Epigraph",
    enable(state) {
      return canInsert(state, nodeType)
    },
    run(state, dispatch) {
      const {$from, $to} = state.selection;
      let resolvedPos = state.doc.resolve(state.selection.from);
      const from = resolvedPos.before(resolvedPos.depth);
      resolvedPos = state.doc.resolve(state.selection.to);
      const to = resolvedPos.after(resolvedPos.depth);
      const tr = state.tr;
      tr.addMark(from, to, schema.marks.em.create());
      let range = $from.blockRange($to);
      const wrapping = range && findWrapping(range, schema.nodes.epigraph);
      if (!wrapping) return false
      tr.wrap(range, wrapping);
      dispatch(tr);
    }
  })
}

function toggleComment(nodeType) {
  return new MenuItem({
    title: "Insert or delete a comment",
    icon: hurmetIcons.comment,
    enable(state) {
      return canInsert(state, nodeType)
    },
    run(state, dispatch) {
      // This is a toggle switch.
      // If we are inside a comment bubble, delete it.
      const $pos = state.selection.$anchor;
      for (let d = $pos.depth; d > 0; d--) {
        if ($pos.node(d).type.name == 'comment') {
          dispatch(state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView());
          return false
        }
      }
      // Where not in a comment, insert a new one.
      const resolvedPos = state.doc.resolve(state.selection.from);
      const parent = resolvedPos.parent;
      if (parent.type.name === "comment") { return }
      const tr = state.tr;
      // Anchor the comment at a point preceding the parent block.
      const blockPos = resolvedPos.before(resolvedPos.depth);
      tr.insert(blockPos, schema.nodeFromJSON(JSON.parse(
        `{"type":"comment", "content":[{"type":"paragraph","content":[]}]}`
      )));
      tr.setSelection(TextSelection.create(tr.doc, blockPos + 1));
      dispatch(tr);
    }
  })
}

function takeSnapshot() {
  return new MenuItem({
    title: "Take and save a snapshot of the current document",
    label: "Take a snapshot...",
    run(state, _, view) {
      openPrompt({
        title: "Snapshot",
        fields: { message: new TextField({ label: "Commit message", required: true }) },
        callback(attrs) {
          const dateStr = new Date().toISOString().replace(/T.+/, "");
          let md = hurmetMarkdownSerializer.serialize(state.doc, new Map(), [], false, true, false);
          // Ignore path definitions
          md = md.replace(/\n\n\[[^\]]+\\: .+/, "");
          state.doc.attrs.snapshots.push({ message: attrs.message, date: dateStr, content: md });
        }
      });
    }
  })
}

function showDiffMenuItem() {
  return new MenuItem({
    label: "Show diff...",
    run(state, _, view) {
      showDiff(state);
    }
  })
}

function deleteSnapshots() {
  return new MenuItem({
    label: "Delete all snapshots...",
    run(state, _, view) {
      openPrompt({
        title: "Delete Snapshots",
        note: "This will delete all snapshots. It cannot be undone.",
        useOkButton: true,
        callback() {
          state.doc.attrs.snapshots = [];
        }
      });
    }
  })
}

function expandHurmetMacro(state, view) {
  let textFrom = 0;
  let textTo = 0;
  if (state.selection.from < state.selection.to) {
    textFrom = state.selection.from;
    textTo = state.selection.to;
  } else {
    textFrom = state.doc.resolve(state.selection.from).before();
    textTo = state.selection.from;
  }
  const text = state.doc.textBetween(textFrom, textTo);
  const match = /[A-Za-z][A-Za-z0-9_]*$/.exec(text);
  if (match) {
    const name = match[0];
    state.doc.nodesBetween(0, state.doc.content.size, function(node, pos) {
      if (node.type.name === "calculation" && node.attrs.dtype === dt.MODULE) {
        if (node.attrs.value[name] && node.attrs.value[name].dtype === dt.MACRO) {
          const macro = node.attrs.value[name].value;
          const fragment = { type: "fragment", content: hurmet.md2ast(macro) };
          view.dispatch(
            view.state.tr.replaceWith(textTo - name.length, textTo, schema.nodeFromJSON(fragment))
          );
          hurmet.updateCalculations(view, true);
        }
      }
    });
  }
}

function macroButton() {
  return new MenuItem({
    icon: hurmetIcons.scroll,
    title: "Expand a macro from the previous word.  Alt-E",
    run(state, _, view) {
      expandHurmetMacro(state, view);
    }
  })
}

function insertToC(nodeType) {
  // Table of Contents
  return new MenuItem({
    title: "Insert or edit a Table of Contents",
    label: "ToC",
    enable(state) {
      return canInsert(state, nodeType)
    },
    run(state, dispatch, view) {
      state.selection;
        let attrs = null;
      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType)
        attrs = state.selection.node.attrs;
      if (!attrs) { attrs = { start: 1, end: 2, body: [] }; }
      openPrompt({
        title: "Table of Contents",
        note: "Set a range of heading levels:",
        fields: {
          start: new TextField({ label: "Start", required: true, value: attrs && attrs.start,
            validate(str) { if (!/^[1-6]$/.test(str)) { return "Input must be an integer between 1 and 6." }  }
          }),
          end: new TextField({ label: "End", required: true, value: attrs && attrs.end,
            validate(str) { if (!/^[1-6]$/.test(str)) { return "Input must be an integer between 1 and 6." }  }
          }),
        },
        callback(attrs) {
          const {$from, $to} = state.selection;
          const same = $from.sharedDepth($to);
          const startPos = same !== 0 ? $from.before(same) : $from.pos;
          const endPos = same !== 0 ? $from.after(same) : startPos + 1;
          attrs.body = paginate(view, schema.nodes.toc, forToC,  attrs.start, attrs.end);
          dispatch(state.tr.replaceWith(startPos, endPos, nodeType.createAndFill(attrs)));
        }
      });
    }
  })
}

function insertMath(state, view, encoding) {
  // This function is exported so that it can be called from keymap.js.
  const nodeType = (encoding === "calculation") ? schema.nodes.calculation : schema.nodes.tex;
  // Create a new math cell.
  let attrs = (encoding === "calculation") ? { entry: "" } : { tex: "" };
  if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType) {
    attrs = state.selection.node.attrs;
  }
  const tr = state.tr;
  const pos = tr.selection.from;
  tr.replaceSelectionWith(nodeType.createAndFill(attrs));
  tr.setSelection(NodeSelection.create(tr.doc, pos));
  view.dispatch(tr);
}

function mathMenuItem(nodeType, encoding) {
  return new MenuItem({
    title: "Insert " + ((encoding === "calculation")
      ? "a calculation cell  Alt-C"
      : "a TeX cell"),
    label: (encoding === "calculation") ? " ℂ " : " 𝕋 ",
    class: (encoding === "tex") ? "math-button" : "mb-left",
    enable(state) { return canInsert(state, nodeType) },
    run(state, _, view) {
      insertMath(state, view, encoding);
    }
  })
}

function toggleMathItem(originalNodeType, desiredEncoding) {
  return new MenuItem({
    label: "Convert " + ((desiredEncoding === "calculation")
      ? "selected TeX cells into calculation cells"
      : "selected calculation cells into TeX cells"),
    enable(state) { return canInsert(state, originalNodeType) },
    run(state, _, view) {
      const targetType = (desiredEncoding === "calculation") ? "tex" : "calculation";
      const { from, to } = state.selection;
      const tr = state.tr;
      if (to - from > 0) {
        // Toggle the math cells
        state.doc.nodesBetween(from, to, function(node, pos) {
          if (node.type.name === targetType) {
            const attrs = clone(node.attrs);
            if (desiredEncoding === "tex") {
              attrs.tex = parse$1(attrs.entry);
              delete attrs.entry;
              tr.replaceWith(pos, pos + 1, schema.nodes.tex.createAndFill(attrs));
            } else {
              attrs.entry = tex2Calc(attrs.tex);
              attrs.tex = parse$1(attrs.entry);
              tr.replaceWith(pos, pos + 1, schema.nodes.calculation.createAndFill(attrs));
            }
          }
        });
        view.dispatch(tr);
      }
    }
  })
}

const toggleDisplayMode = new MenuItem({
  title: "Toggle display mode of the selected math cell(s)",
  label: "ⅆ  ",
  class: "math-button",
  run: (state, _, view) => {
    const tr = state.tr;
    const { from, to } = state.selection;
    if (to - from > 1) {
      state.doc.nodesBetween(from, to, function(node, pos) {
        if (node.type.name === "calculation" || node.type.name === "tex") {
          const attrs = clone(node.attrs);
          attrs.displayMode = false;
          if (node.type.name === "tex") {
            tr.replaceWith(pos, pos + 1, schema.nodes.tex.createAndFill(attrs));
          } else {
            tr.replaceWith(pos, pos + 1, schema.nodes.calculation.createAndFill(attrs));
          }
        }
      });
    } else {
      // Check if the cell should be type set as display mode.
      const pos = tr.selection.from;
      const node = state.selection.node;
      if (node  && (node.type.name === "calculation" || node.type.name === "tex")) {
        const attrs = clone(node.attrs);
        attrs.displayMode = !node.attrs.displayMode;
        const schemaNode = node.type.name === "calculation"
          ? schema.nodes.calculation
          : schema.nodes.tex;
        tr.replaceWith(pos, pos + node.nodeSize, schemaNode.createAndFill(attrs));
      }
    }
    view.dispatch(tr);
    view.focus();
  }
});


const createTable = (schema, rowsCount = 3, colsCount = 3, withHeaderRow = true) => {
  const cells = [];
  const headerCells = [];
  for (let i = 0; i < colsCount; i++) {
    cells.push(schema.nodes.table_cell.createAndFill());

    if (withHeaderRow) {
      headerCells.push(schema.nodes.table_header.createAndFill());
    }
  }

  const rows = [];
  for (let i = 0; i < rowsCount; i++) {
    rows.push(
      schema.nodes.table_row.createChecked(
        null,
        withHeaderRow && i === 0 ? headerCells : cells
      )
    );
  }

  return schema.nodes.table.create(null, rows);
};

function cmdItem(cmd, options) {
  let passedOptions = {
    label: options.title,
    run: cmd
  };
  for (let prop in options) passedOptions[prop] = options[prop];
  if (!options.enable || options.enable === true)
    passedOptions["enable"] = state => cmd(state);

  return new MenuItem(passedOptions)
}

function markActive(state, type) {
  let { from, $from, to, empty } = state.selection;
  if (empty) return type.isInSet(state.storedMarks || $from.marks())
  else return state.doc.rangeHasMark(from, to, type)
}

function markItem(markType, options) {
  let passedOptions = {
    active(state) {
      return markActive(state, markType)
    },
    enable: true
  };
  for (let prop in options) passedOptions[prop] = options[prop];
  return cmdItem(toggleMark(markType), passedOptions)
}

function toggleDraftMode() {
  return new MenuItem({
    title: "Toggle draft mode",
    label: "Draft mode",
    enable() { return true },
    active(state) {return state.doc.attrs.inDraftMode},
    run(state, dispatch) {
      draftMode(state, dispatch, schema.nodes.calculation);
    }
  })
}

function tableItem(title, icon, cmd, cell) {
  return new MenuItem({
    title: "title",
    icon: hurmetIcons[icon],
    select(state) {
      return isInTable(state)
    },
    run(state, dispatch) {
      cmd(state, dispatch);
    }
  })
}

function deleteTable() {
  return new MenuItem({
    title: "Delete Table",
    icon: hurmetIcons["delete_table"],
    select(state) {
      return isInTable(state)
    },
    run(state, dispatch) {
      const $pos = state.selection.$anchor;
      for (let d = $pos.depth; d > 0; d--) {
        const node = $pos.node(d);
        if (node.type.spec.tableRole == 'table') {
          const parent = $pos.node(d - 1);
          if (parent.type.name == 'figure') {
            dispatch(state.tr.delete($pos.before(d - 1), $pos.after(d -1)).scrollIntoView());
          } else {
            dispatch(state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView());
          }
          break
        }
      }
      return false
    }
  })
}

function reCalcAll() {
  return new MenuItem({
    title: "Recalculate all",
    icon: hurmetIcons.recalc,
    run(state, _, view) {
      hurmet.updateCalculations(view, true);
    }
  })
}

function setDecimalFormat(label) {
  return new MenuItem({
    label: label,
    run(state, _, view) {
      state.doc.attrs.decimalFormat = label;
      hurmet.updateCalculations(view, true);
    }
  })
}

const setDateFormat = new MenuItem({
  label: "Date format...",
  title: "Set date format",
  run(state, _, view) {
    let currentFormat = state.doc.attrs.dateFormat;
    const match = dateFormatRegEx.exec(currentFormat);
    const prependWeekday = match[1] ? true : false;
    if (prependWeekday) {
      currentFormat = currentFormat.slice(match[1].length + 1).trim();
    }
    if (match[7]) {
      currentFormat = currentFormat.slice(0, -match[7].length).trim();
    }
    const promptOptions = {
      title: "Date Format",
      radioButtons: {
        name: "dateFormat",
        direction: "column",
        buttons: [
          ["yyyy-mm-dd", "yyyy-mm-dd"],
          ["dd.mm.yyyy", "dd.mm.yyyy"],
          ["d mmmm yyyy", "d mmmm yyyy"],
          ["d mmm yyyy", "d mmm yyyy"],
          ["mmmm d, yyyy", "mmmm d, yyyy"],
          ["mmm d, yyyy", "mmm d, yyyy"],
          ["d de mmmm de yyyy", "d de mmmm de yyyy"]
        ],
        current: currentFormat
      },
      checkbox: {
        name: "Prepend weekday",
        checked: prependWeekday
      },
      fields: {
        language: new TextField({
          label: "Language code",
          leader: "Language code",
          value: match[7] ? match[7] : "en",
          required: false
        })
      },
      callback(attrs) {
        let dateFormat = attrs.format;
        if (attrs.checkbox) {
          dateFormat = (dateFormat.indexOf("mmmm") > -1 ? "wwww" : "www" ) + ", " + dateFormat;
        }
        if (attrs.language && attrs.language !== "en") {
          dateFormat += " " + attrs.language;
        }
        state.doc.attrs.dateFormat = dateFormat;
        hurmet.updateCalculations(view, true);
      }
    };
    openPrompt(promptOptions);
  }
});

function setFontSize(size) {
  return new MenuItem({
    label: String(size) + " pt",
    run(state, _, view) {
      state.doc.attrs.fontSize = size;
      const ed = document.getElementById("editor-content");
      if (ed.classList.contains("pica")) {
        ed.classList.add("long-primer");
        ed.classList.remove("pica");
      } else {
        ed.classList.add("pica");
        ed.classList.remove("long-primer");
      }
      document.getElementById("print-div").className = size === 12 ? "ProseMirror pica" : "ProseMirror long-primer";
    }
  })
}

function setPageSize(size) {
  return new MenuItem({
    label: size,
    run(state, _, view) {
      state.doc.attrs.pageSize = size;
      const style = document.getElementById("pageStyle");
      style.innerHTML = size === "letter"
        ? `@media print {@page{size: letter; margin: 16mm 0.75in 16mm 0.75in;}}`
        : `@media print {@page{size: A4; margin: 16mm 16.1mm 16mm 16.1mm;}}`;
    }
  })
}

function tableStyle(title, className, icon) {
  return new MenuItem({
    title: title,
    icon: hurmetIcons[icon],
    select(state) {
      return isInTable(state)
    },
    run(state, dispatch) {
      const table = findTable(state.selection);
      // Get an array of the table CSS classes.
      // These are of two types:
      // classes[0] defines a table style: grid, striped, etc.
      // The rest of the classes all set a column alignment: c1c, c2r, c3c, etc.
      // We don't write a "c1l" because the default alignment is left.
      const attrs = clone(table.node.attrs);
      const classes = attrs.class.split(" ");
      const tr = state.tr;
      if (/^align/.test(className)) {
        const align = className.slice(6, 7); //  l  c  r
        const rect = getSelectionRect(state.selection);
        if (rect) {
          for (let i = rect.left + 1; i < rect.right + 1; i++) {
            let gotMatch = false;
            for (let j = 0; j < classes.length; j ++) {
              const ch = classes[j].slice(1, 2);
              if (!isNaN(ch)) {
                if (Number(ch) === i) {
                  gotMatch = true;
                  // default alignment is left. 
                  classes[j] = align === "l" ? "" : "c" + ch + align;
                }
              }
            }
            if (!gotMatch) classes.push("c" + i + align);
          }
        }
      } else {
        classes[0] = className;
      }
      attrs.class = classes.join(" ").replace(/ {2,}/g, " ");
      tr.setNodeMarkup(table.pos, undefined, attrs);
      dispatch(tr);
    } 
  })
}

// :: MenuItem
// Menu item for the `lift` command.
const liftItem = new MenuItem({
  title: "Lift (unwrap) out of enclosing block",
  run(state, dispatch)  {
    let {$from, $to} = state.selection;
    let range = $from.blockRange($to), target = range && liftTarget(range);
    const depth = range.depth;
    if (target == null) return false
    const tr = state.tr;
    if ($from.node(-1).type.name == "centered") {
      // We're lifting out of a "centered" block. Set math zone displayMode to false.
      state.doc.nodesBetween($from.before(depth + 1), $to.after(depth + 1), function(node, pos) {
        if (node.type.name === "calculation" || node.type.name === "tex") {
          const nodeAttrs = node.attrs;
          nodeAttrs.displayMode = false;
          tr.replaceWith(pos, pos + 1, schema.nodes[node.type.name].createAndFill(nodeAttrs));
        }
      });
    }
    tr.lift(range, target).scrollIntoView();
    if (dispatch) dispatch(tr);
    return true
  },
  select: state => lift(state),
  icon: icons.lift
});

// :: MenuItem
// Menu item for the `center` command.
const centerBlock = new MenuItem({
  title: "Center block",
  label: "Centered",
  run(state, dispatch)  {
    let {$from, $to} = state.selection;
    let range = $from.blockRange($to);
    const depth = $from.depth;
    const wrapping = range && findWrapping(range, schema.nodes.centered);
    if (!wrapping) return false
    const tr = state.tr;
    state.doc.nodesBetween($from.before(depth), $to.after(depth), function(node, pos) {
      if (node.type.name === "calculation" || node.type.name === "tex") {
        if (state.doc.resolve(pos).parent.childCount === 1) {
          const nodeAttrs = node.attrs;
          nodeAttrs.displayMode = true;
          tr.replaceWith(pos, pos + 1, schema.nodes[node.type.name].createAndFill(nodeAttrs));
        }
      }
    });
    tr.wrap(range, wrapping).scrollIntoView();
    if (dispatch) dispatch(tr);
    return true
  },
  select(state) {
    return wrapIn(schema.nodes.centered)(state)
  }
});

// :: MenuItem
// Menu item for the `selectParentNode` command.
const selectParentNodeItem = new MenuItem({
  title: "Select parent node",
  run: selectParentNode,
  enable: state => selectParentNode(state),
  icon: icons.selectParentNode
});

function linkItem(markType) {
  return new MenuItem({
    title: "Add or remove link",
    icon: icons.link,
    active(state) {
      return markActive(state, markType)
    },
    enable(state) {
      return !state.selection.empty
    },
    run(state, dispatch, view) {
      if (markActive(state, markType)) {
        toggleMark(markType)(state, dispatch);
        return true
      }
      openPrompt({
        title: "Create a link",
        fields: {
          href: new TextField({ label: "Link target", required: true })
        },
        callback(attrs) {
          toggleMark(markType, attrs)(view.state, view.dispatch);
          view.focus();
        }
      });
    }
  })
}

function wrapListItem(nodeType, options) {
  return cmdItem(wrapInList(nodeType, options.attrs), options)
}

// :: (Schema) → Object
// Given a schema, look for default mark and node types in it and
// return an object with relevant menu items relating to those marks:
//
// **`toggleStrong`**`: MenuItem`
//   : A menu item to toggle the [strong mark](#schema-basic.StrongMark).
//
// **`toggleEm`**`: MenuItem`
//   : A menu item to toggle the [emphasis mark](#schema-basic.EmMark).
//
// **`toggleCode`**`: MenuItem`
//   : A menu item to toggle the [code font mark](#schema-basic.CodeMark).
//
// **`toggleLink`**`: MenuItem`
//   : A menu item to toggle the [link mark](#schema-basic.LinkMark).
//
// **`insertImage`**`: MenuItem`
//   : A menu item to insert an [image](#schema-basic.Image).
//
// **`wrapBulletList`**`: MenuItem`
//   : A menu item to wrap the selection in a [bullet list](#schema-list.BulletList).
//
// **`wrapOrderedList`**`: MenuItem`
//   : A menu item to wrap the selection in an [ordered list](#schema-list.OrderedList).
//
// **`wrapBlockQuote`**`: MenuItem`
//   : A menu item to wrap the selection in a [block quote](#schema-basic.BlockQuote).
//
// **`makeParagraph`**`: MenuItem`
//   : A menu item to set the current textblock to be a normal
//     [paragraph](#schema-basic.Paragraph).
//
// **`makeCodeBlock`**`: MenuItem`
//   : A menu item to set the current textblock to be a
//     [code block](#schema-basic.CodeBlock).
//
// **`makeHead[N]`**`: MenuItem`
//   : Where _N_ is 1 to 6. Menu items to set the current textblock to
//     be a [heading](#schema-basic.Heading) of level _N_.
//
// **`insertHorizontalRule`**`: MenuItem`
//   : A menu item to insert a horizontal rule.
//
// The return value also contains some prefabricated menu elements and
// menus, that you can use instead of composing your own menu from
// scratch:
//
// **`insertMenu`**`: Dropdown`
//   : A dropdown containing the `insertImage` and
//     `insertHorizontalRule` items.
//
// **`typeMenu`**`: Dropdown`
//   : A dropdown containing the items for making the current
//     textblock a paragraph, code block, or heading.
//
// **`fullMenu`**`: [[MenuElement]]`
//   : An array of arrays of menu elements for use as the full menu
//     for, for example the [menu bar](https://github.com/prosemirror/prosemirror-menu#user-content-menubar).
function buildMenuItems(schema) {
  const r = {};
  let type;

  r.navigate = navigate();
  r.openFile = openFile();
  r.saveFile = saveFile();
  r.saveFileAs = saveFileAs();
  r.permalink = permalink();
  r.insertHeader = insertHeader();

  r.dot = setDecimalFormat("1000000.");
  r.commadot = setDecimalFormat("1,000,000.");
  r.lakh = setDecimalFormat("1,00,000.");
  r.cn = setDecimalFormat("1,0000,0000.");
  r.comma = setDecimalFormat("1000000,");
  r.spacecomma = setDecimalFormat("1 000 000,");
  r.apostrophecomma = setDecimalFormat("1’000’000,");
  r.dotcomma = setDecimalFormat("1.000.000,");

  r.pica = setFontSize(12);
  r.longprimer = setFontSize(10);
  r.letter = setPageSize("letter");
  r.A4 = setPageSize("A4");

  r.toggleDraftMode = toggleDraftMode();
  r.recalcAll = reCalcAll();
  r.deleteComments = deleteComments();
  r.takeSnapshot = takeSnapshot();
  r.showDiffMenuItem = showDiffMenuItem();
  r.deleteSnapshots = deleteSnapshots();
  r.print = print();

  if ((type = schema.marks.strong))
    r.toggleStrong = markItem(type, { title: "Toggle strong style", icon: icons.strong });
  if ((type = schema.marks.em))
    r.toggleEm = markItem(type, { title: "Toggle emphasis", icon: icons.em });
  if ((type = schema.marks.code))
    r.toggleCode = markItem(type, { title: "Toggle code font  Ctrl-`", icon: icons.code });
  if ((type = schema.marks.subscript))
    r.toggleSubscript = markItem(type, {
      title: "Toggle subscript  Ctrl-,",
      icon: hurmetIcons.subscript
    });
  if ((type = schema.marks.superscript))
    r.toggleSuperscript = markItem(type, {
      title: "Toggle superscript  Ctrl-.",
      icon: hurmetIcons.superscript
    });
  if ((type = schema.marks.strikethru))
    r.toggleStrikethru = markItem(type, {
      title: "Toggle strikethrough",
      icon: hurmetIcons.strikethru
    });
  if ((type = schema.marks.underline))
    r.toggleUnderline = markItem(type, {
      title: "Toggle underline  Ctrl-u",
      icon: hurmetIcons.underline
    });
  if ((type = schema.marks.highlight))
  r.toggleHighlight = markItem(type, {
    title: "Toggle highlight",
    icon: hurmetIcons.highlight
  });
  if ((type = schema.marks.link)) r.toggleLink = linkItem(type);

  if ((type = schema.nodes.image)) r.imageUpload = uploadImage(type);
  if ((type = schema.nodes.image)) r.imageLink = insertImage(type);
  if ((type = schema.nodes.footnote)) r.footnote = footnote();
  if ((type = schema.nodes.toc)) r.toc = insertToC(type);
  r.macroButton = macroButton();
  if ((type = schema.nodes.calculation)) {
    r.insertCalclation = mathMenuItem(type, "calculation");
    r.convertCalc2Tex = toggleMathItem(type, "tex");
  } 
  if ((type = schema.nodes.tex)) {
    r.insertTeX = mathMenuItem(type, "tex");
    r.convertTex2Calc = toggleMathItem(type, "calculation");
  }
  if ((type = schema.nodes.comment)) r.toggleComment = toggleComment(type);
  if ((type = schema.nodes.tight_list_item)) r.tighten = tighten();

  if ((type = schema.nodes.bullet_list))
    r.wrapBulletList = wrapListItem(type, {
      title: "Wrap in bullet list",
      icon: icons.bulletList
    });
  if ((type = schema.nodes.ordered_list))
    r.wrapOrderedList = wrapListItem(type, {
      title: "Wrap in ordered list",
      icon: icons.orderedList
    });
  if ((type = schema.nodes.blockquote))
    r.wrapBlockQuote = wrapItem(type, {
      title: "Wrap in block quote",
      icon: icons.blockquote
    });
  if ((type = schema.nodes.epigraph))
    r.wrapEpigraph = wrapInEpigraph(type);
  if ((type = schema.nodes.centered))
    r.wrapCentered = centerBlock;
  if ((type = schema.nodes.right_justified))
    r.wrapRightJustified = wrapItem(type, {
      title: "Right-justify block",
      label: "Right-justifed"
    });
  if ((type = schema.nodes.indented))
    r.wrapIndent = wrapItem(type, {
      title: "Indent block  Alt-I",
      label: "Indented  Alt-I"
    });
  if ((type = schema.nodes.boxed))
    r.wrapBoxed = wrapItem(type, {
      title: "Draw box around block",
      label: "Boxed"
    });
  if ((type = schema.nodes.note))
    r.wrapNote = wrapItem(type, {
      title: "Note alert",
      label: "Note"
  });
  if ((type = schema.nodes.tip))
    r.wrapTip = wrapItem(type, {
      title: "Tip alert",
      label: "Tip"
  });
  if ((type = schema.nodes.important))
    r.wrapImportant = wrapItem(type, {
      title: "Alert as important",
      label: "Important"
  });
  if ((type = schema.nodes.warning))
    r.wrapWarning = wrapItem(type, {
      title: "Warning alert",
      label: "Warning"
  });
  if ((type = schema.nodes.paragraph))
    r.makeParagraph = blockTypeItem(type, {
      title: "Change to plain paragraph",
      icon: hurmetIcons.paragraph
    });
  if ((type = schema.nodes.code_block))
    r.makeCodeBlock = blockTypeItem(type, {
      title: "Change to code block",
      icon: icons.code
    });
  if ((type = schema.nodes.heading)) {
    for (let i = 1; i <= 6; i++) {
      r["makeHead" + i] = blockTypeItem(type, {
        title: "Change to heading " + i,
        label: "\xa0H" + i + "\xa0",
        attrs: { level: i }
      });
    }
  }
  if ((type = schema.nodes.horizontal_rule)) {
    let hr = type;
    r.insertHorizontalRule = new MenuItem({
      title: "Insert horizontal rule",
      label: "\u2015",
      enable(state) {
        return canInsert(state, hr)
      },
      run(state, dispatch) {
        dispatch(state.tr.replaceSelectionWith(hr.create()));
      }
    });
  }
  if ((type = schema.nodes.table)) {
    let table = type;
    r.insertTable = new MenuItem({
      title: "Insert Table",
      icon: hurmetIcons.table,
      enable(state) {
        return  canInsert(state, table)
      },
      run(state, dispatch) {
        dispatch(state.tr.replaceSelectionWith(createTable(schema, 3, 3, true)));
      }
    });
  }
  r.deleteTable = deleteTable(); //tableItem("Delete table", "delete_table", deleteTable, cell)
  r.addRowBefore = tableItem("Insert row before", "add_row_before", addRowBefore);
  r.deleteRow = tableItem("Delete row", "delete_row", deleteRow);
  r.addColumnBefore = tableItem("Insert column before", "add_col_before", addColumnBefore);
  r.deleteColumn = tableItem("Delete column", "delete_col", deleteColumn);
  r.toggleCellMerge = new MenuItem({
    title: "Toggle cell merge",
    icon: hurmetIcons.combine_cells,
      select(state) {
        return isInTable(state)
      },
      run(state, dispatch) {
        if (mergeCells(state, dispatch)) {
          return
        }
      splitCell(state, dispatch);
    }
  });
  r.toggleTableCaption = toggleTableCaption();
  r.toggleSpreadsheet = toggleSpreadsheet();
  r.grid = tableStyle("Grid", "grid", "grid");
  r.nogrid = tableStyle("No borders", "nogrid", "nogrid");
  r.oneRule = tableStyle("Border below header", "one-rule", "oneRule");
  r.twoRules = tableStyle("Borders below header and above bottom line.", "two-rules", "twoRules");
  r.threeRules = tableStyle("Three rules", "three-rules", "threeRules");
  r.fourRules = tableStyle("Four rules", "four-rules", "fourRules");
  r.rules = tableStyle("All rules", "rules", "rules");
  r.striped = tableStyle("striped", "striped", "striped");
  r.alignColLeft = tableStyle("Align Column Left", "align-left", "align-left");
  r.alignColCenter = tableStyle("Align Column Center", "align-center", "align-center");
  r.alignColRight = tableStyle("Align Column Right", "align-right", "align-right");

  r.help = blockTypeItem(type, {
    title: "Help",
    icon: hurmetIcons.info,
    enable() {
      return true
    },
    run() {
      window.open("manual.html");
    } 
  });

  r.toggleDisplayMode = toggleDisplayMode;
  r.accessors = hint("Accessors…", "Accessors", "Accessors", "",
    [['vector[number]'],
    ['vector[start:finish]'],
    ['matrix[rowNum, colNum]'],
    ['matrix[startRowNum,:finishRowNum, startColNum:finishColNum]'],
    ['dataframe["rowName", "colName"]'],
    ['dataFrame.rowName.colName'],
    ['dataFrame.colName.rowName'],
    ['dataFrame.colName.end'],
    ['dataframe.colName[rowNum]'],
    ['dataframe[["rowName1"; "rowName2"]]["col1", "col2"]'],
    ['spreadsheet.A1'],
    ['spreadsheet.A'],
    ['spreadsheet.colName']]);
  r.display = hint(" ?… ", "Display Selectors", "Display Selectors", "math-button",
    [["?", "??", "All"],
    ["%", "%%", "Omit blue echo"],
    ["!", "!!", "Omit result"],
    ["@", "@@", "Result only"]]);
  r.letters = hint(" Ω… ", "Letters…", "Letters", "math-button",
    [["Γ", "Δ", "Θ", "Λ", "Ξ", "Π", "Σ", "Φ", "Ψ", "Ω"],
    ["α", "β", "γ", "δ", "ε", "ζ", "η", "θ", "ι", "κ", "λ", "μ"],
    ["ν", "ξ", "π", "ρ", "σ", "τ", "υ", "ϕ", "χ", "ψ", "ω"],
    ["𝐀", "𝐁", "𝐂", "𝐃", "𝐄", "𝐅", "𝐆", "𝐇", "𝐈", "𝐉", "𝐊", "𝐋", "𝐌"],
    ["𝐍", "𝐎", "𝐏", "𝐐", "𝐑", "𝐒", "𝐓", "𝐔", "𝐕", "𝐖", "𝐗", "𝐘", "𝐙"],
    ["𝐚", "𝐛", "𝐜", "𝐝", "𝐞", "𝐟", "𝐠", "𝐡", "𝐢", "𝐣", "𝐤", "𝐥", "𝐦"],
    ["𝐧", "𝐨", "𝐩", "𝐪", "𝐫", "𝐬", "𝐭", "𝐮", "𝐯", "𝐰", "𝐱", "𝐲", "𝐳"],
    ["ℂ", "ℍ", "ℕ", "ℚ", "ℝ", "ℤ", "ℏ", "ℓ"],
    ["𝒜", "ℬ", "𝒞", "𝒟", "ℰ", "ℱ", "𝒢", "ℋ", "ℐ", "𝒦", "ℒ", "ℳ"],
    ["𝒩", "𝒪", "𝒫", "𝒬", "ℛ", "𝒮", "𝒯", "𝒰", "𝒱", "𝒲", "𝒳", "𝒴", "𝒵"]]);
  r.symbols = hint(" √… ", "Symbols…", "Symbols", "math-button",
    [["∀", "∃", "∞", "¢", "︀€", "¥", "£", "ø", "✓", "°", "′"],
    ["√", "∛", "×", "*", "·", "∘", "∕", "‖", "∠", "÷", "±", "∓", "⊻", "¬"],
    ["≤", "≥", "≠", "≅", "≈", "∈", "∉", "⋐", "≡", "≔", "→", "←", "↔", "⇒"],
    ["⎾", "⏋", "⎿", "⏌", "⟨", "⟩", "∧", "∨", "⋁", "∩", "⋂", "∪", "⋃", "∑", "∫", "∬", "∇"]]);
  r.accents = hint(" â… ", "Accents…", "Accents", "math-button",
    [[["acute", "\u0301"], ["bar", "\u0305"], ["breve", "\u0306"], ["check", "\u030c"], ["dot", "\u0307"], ["ddot", "\u0308"], ["grave", "\u0300"], ["hat", "\u0302"]],
    [["harpoon", "\u20d1"], ["leftharpoon", "\u20d0"], ["leftrightvec", "\u20e1"], ["leftvec", "\u20d6"], ["ring", "\u030a"], ["tilde", "\u0303"], ["vec", "\u20d7"], ["ul", "\u0332"]]]);
  r.syntax = hint("Syntax…", "Syntax", "Syntax", "",
    [['a_subscript', 'b^exponent', 'x′'],
    ['(a+b) / (c+d)', '1//2', '2///3'],
    ['[1; 2; 3]', '(a, b; c, d)'],
    ['[start:step:end] = ?'],
    ['{a if b; c otherwise}']]);
  r.trig = hint("Trigonometry…", "Trigonometry", "Trigonometry Functions", "",
    [["cos", "sin", "tan", "sec", "csc", "cot"],
    ["acos", "asin", "atan", "atan2", "asec", "acsc", "acot"],
    ["cosd", "sind", "tand", "secd", "cscd", "cotd"],
    ["acosd", "asind", "atand", "asecd", "acscd", "acotd"]]);
  r.hyperbolic = hint("Hyperbolic…", "Hyperbolic", "Hyperbolic Functions", "",
    [["cosh", "sinh", "tanh", "sech", "csch", "coth"],
    ["acosh", "asinh", "atanh", "asech", "acsch", "acoth"]]);
  r.math = hint("Math…", "Math", "Math Functions", "",
    [["ln", "log", "log10", "log2", "logn"],
    ["binomial", "exp", "factorial", "lfact", "lgamma", "gamma", "Γ"],
    ["isnan", "Int", "abs", "ceil", "floor", "sign"],
    ["conj", "imag", "real", "angle"],
    ["gcd", "hypot", "rand", "rms", "mod", "rem"],
    ["format", "round", "roundSig", "roundn"]]);
  r.matrix = hint("Matrix…", "Matrix", "Matrix Functions", "",
    [["length", "accumulate", "findmax", "hcat", "vcat"],
    ["lerp", "trace", "transpose", "ones", "zeros", "matrix2table"]]);
  r.reducers = hint("Reducer…", "Reducer", "Reducer Functions", "",
    [["accumulate", "dataframe", "findfirst", "matrix2table"],
    ["min", "max", "sum", "mean", "median"],
    ["product", "range", "stddev", "variance"]]);
  r.string = hint("String…", "String", "String Functions", "",
    [["fetch", "Char", "count", "number", "string"]]);
  r.date = hint("Date…", "Date", "Date functions", "",
    [["today", "savedate", ""]]);
  r.functionsDropDown = new Dropdown([r.trig, r.hyperbolic, r.math, r.matrix, r.reducers, r.string, r.date],
    { label: " 𝑓", title: "Functions", class: "math-dropdown" });
  r.rounding = setRoundingCriteria(schema.nodes.calculation);
  r.hintDropDown = new Dropdown(
    [r.accessors, r.syntax],
    { label: "Q", title: "Quick Reference", class: "math-dropdown" });

  // Now that the menu buttons are created, assemble them into the menu.
  
  let cut = arr => arr.filter(x => x);
  
  r.fontsize = new DropdownSubmenu([r.pica, r.longprimer], { label: "Font size" });
  r.dateFormat = setDateFormat;
  r.pagesize = new DropdownSubmenu([r.letter, r.A4], { label: "Page size" });
  r.separators = new DropdownSubmenu(
    [r.dot, r.commadot, r.lakh, r.cn, r.comma, r.spacecomma, r.apostrophecomma, r.dotcomma],
    {title: "Set decimal format", label: "Decimal format"}
  );
  r.fileDropDown = new Dropdown([
    r.openFile,
    r.saveFile,
    r.saveFileAs,
    r.permalink,
    r.takeSnapshot,
    r.showDiffMenuItem,
    r.deleteSnapshots,
    r.pagesize,
    r.print
  ],
  { label: "File" }
  );
  r.documentDropDown = new Dropdown([
    r.separators,
    r.fontsize,
    r.dateFormat,
    r.toggleDraftMode,
    r.insertHeader,
    r.deleteComments
  ],
  { label: "Doc" }
  );
  r.fileMenu = [[
    r.navigate,
    r.fileDropDown,
    r.documentDropDown,
    r.recalcAll,
  ]];

  r.inlineMenu = [[
    r.toggleStrong,
    r.toggleEm,
    r.toggleCode,
    r.toggleSubscript,
    r.toggleSuperscript,
    r.toggleStrikethru,
    r.toggleUnderline,
    r.toggleHighlight
  ]];

  r.insertMenu = [[
    r.toggleLink,
    r.insertHorizontalRule,
    r.imageUpload,
    r.imageLink,
    r.footnote,
    r.toc,
    r.toggleComment
  ]];

  r.headingDropDown = new Dropdown([
    r.makeHead4,
    r.makeHead5,
    r.makeHead6,
  ],
  { label: "H*" }
  );
  r.typeMenu = [cut([
      r.makeParagraph,
      r.makeCodeBlock,
      r.makeHead1, r.makeHead2, r.makeHead3, r.headingDropDown
    ])];

  r.blockMenu = [
    [
      r.wrapBulletList,
      r.wrapOrderedList,
      r.tighten,
      r.wrapBlockQuote,
      r.blockDropDown = new Dropdown([
        r.wrapIndent,
        r.wrapCentered,
        r.wrapRightJustified,
        r.wrapEpigraph,
        r.wrapBoxed,
        r.wrapNote,
        r.wrapTip,
        r.wrapImportant,
        r.wrapWarning
        ],
        { label: "⎕", title: "Block format" }
      ),
      joinUpItem,
      liftItem,
      selectParentNodeItem
    ]
  ];

  r.tableStyle = new Dropdown([r.grid, r.nogrid, r.oneRule, r.twoRules, r.threeRules, r.fourRules, r.rules, r.striped], {label: "Tbl Style"});
  r.tableMenu = [cut([
    r.insertTable,
    r.addRowBefore,
    r.addColumnBefore,
    r.deleteTable,
    r.deleteRow,
    r.deleteColumn,
    r.toggleCellMerge,
    r.toggleTableCaption,
    r.alignColLeft,
    r.alignColCenter,
    r.alignColRight,
    r.tableStyle,
    r.toggleSpreadsheet
  ])];

  r.copyAsMarkdown = copyAsMarkdown();
  r.copyAsMarkdownWithResults = copyAsMarkdownWithResults();
  r.copyAsGFM = copyAsGFM();
  r.Markdown = new Dropdown([
    r.copyAsMarkdown,
    r.copyAsMarkdownWithResults,
    r.copyAsGFM
  ], {label: "𝐌"});

  r.toggleMath = new Dropdown([
    r.convertTex2Calc,
    r.convertCalc2Tex
  ], {label: "ℂ↔𝕋", class: "md-right"});

  r.math = [[
    r.insertCalclation,
    r.insertTeX,
    r.toggleDisplayMode,
    r.letters,
    r.symbols,
    r.accents,
    r.display,
    r.rounding,
    r.functionsDropDown,
    r.hintDropDown,
    r.toggleMath
  ]];

  r.fullMenu = r.fileMenu.concat(
    [[undoItem, redoItem, r.Markdown]],
    r.inlineMenu,
    r.insertMenu,
    r.typeMenu,
    r.blockMenu,
    r.math,
    [[r.help]],
    r.tableMenu
  );

  return r
}

/**
Input rules are regular expressions describing a piece of text
that, when typed, causes something to happen. This might be
changing two dashes into an emdash, wrapping a paragraph starting
with `"> "` into a blockquote, or something entirely different.
*/
class InputRule {
    // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)
    /**
    Create an input rule. The rule applies when the user typed
    something and the text directly in front of the cursor matches
    `match`, which should end with `$`.
    
    The `handler` can be a string, in which case the matched text, or
    the first matched group in the regexp, is replaced by that
    string.
    
    Or a it can be a function, which will be called with the match
    array produced by
    [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),
    as well as the start and end of the matched range, and which can
    return a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) that describes the
    rule's effect, or null to indicate the input was not handled.
    */
    constructor(
    /**
    @internal
    */
    match, handler, options = {}) {
        this.match = match;
        this.match = match;
        this.handler = typeof handler == "string" ? stringHandler(handler) : handler;
        this.undoable = options.undoable !== false;
        this.inCode = options.inCode || false;
    }
}
function stringHandler(string) {
    return function (state, match, start, end) {
        let insert = string;
        if (match[1]) {
            let offset = match[0].lastIndexOf(match[1]);
            insert += match[0].slice(offset + match[1].length);
            start += offset;
            let cutOff = start - end;
            if (cutOff > 0) {
                insert = match[0].slice(offset - cutOff, offset) + insert;
                start = end;
            }
        }
        return state.tr.insertText(insert, start, end);
    };
}
const MAX_MATCH = 500;
/**
Create an input rules plugin. When enabled, it will cause text
input that matches any of the given rules to trigger the rule's
action.
*/
function inputRules({ rules }) {
    let plugin = new Plugin({
        state: {
            init() { return null; },
            apply(tr, prev) {
                let stored = tr.getMeta(this);
                if (stored)
                    return stored;
                return tr.selectionSet || tr.docChanged ? null : prev;
            }
        },
        props: {
            handleTextInput(view, from, to, text) {
                return run(view, from, to, text, rules, plugin);
            },
            handleDOMEvents: {
                compositionend: (view) => {
                    setTimeout(() => {
                        let { $cursor } = view.state.selection;
                        if ($cursor)
                            run(view, $cursor.pos, $cursor.pos, "", rules, plugin);
                    });
                }
            }
        },
        isInputRules: true
    });
    return plugin;
}
function run(view, from, to, text, rules, plugin) {
    if (view.composing)
        return false;
    let state = view.state, $from = state.doc.resolve(from);
    let textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset, null, "\ufffc") + text;
    for (let i = 0; i < rules.length; i++) {
        let rule = rules[i];
        if ($from.parent.type.spec.code) {
            if (!rule.inCode)
                continue;
        }
        else if (rule.inCode === "only") {
            continue;
        }
        let match = rule.match.exec(textBefore);
        let tr = match && rule.handler(state, match, from - (match[0].length - text.length), to);
        if (!tr)
            continue;
        if (rule.undoable)
            tr.setMeta(plugin, { transform: tr, from, to, text });
        view.dispatch(tr);
        return true;
    }
    return false;
}
/**
This is a command that will undo an input rule, if applying such a
rule was the last thing that the user did.
*/
const undoInputRule = (state, dispatch) => {
    let plugins = state.plugins;
    for (let i = 0; i < plugins.length; i++) {
        let plugin = plugins[i], undoable;
        if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
            if (dispatch) {
                let tr = state.tr, toUndo = undoable.transform;
                for (let j = toUndo.steps.length - 1; j >= 0; j--)
                    tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
                if (undoable.text) {
                    let marks = tr.doc.resolve(undoable.from).marks();
                    tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
                }
                else {
                    tr.delete(undoable.from, undoable.to);
                }
                dispatch(tr);
            }
            return true;
        }
    }
    return false;
};

/**
Converts double dashes to an emdash.
*/
const emDash = new InputRule(/--$/, "—");
/**
Converts three dots to an ellipsis character.
*/
const ellipsis = new InputRule(/\.\.\.$/, "…");
/**
“Smart” opening double quotes.
*/
const openDoubleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "“");
/**
“Smart” closing double quotes.
*/
const closeDoubleQuote = new InputRule(/"$/, "”");
/**
“Smart” opening single quotes.
*/
const openSingleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "‘");
/**
“Smart” closing single quotes.
*/
const closeSingleQuote = new InputRule(/'$/, "’");
/**
Smart-quote related input rules.
*/
const smartQuotes = [openDoubleQuote, closeDoubleQuote, openSingleQuote, closeSingleQuote];

/**
Build an input rule for automatically wrapping a textblock when a
given string is typed. The `regexp` argument is
directly passed through to the `InputRule` constructor. You'll
probably want the regexp to start with `^`, so that the pattern can
only occur at the start of a textblock.

`nodeType` is the type of node to wrap in. If it needs attributes,
you can either pass them directly, or pass a function that will
compute them from the regular expression match.

By default, if there's a node with the same type above the newly
wrapped node, the rule will try to [join](https://prosemirror.net/docs/ref/#transform.Transform.join) those
two nodes. You can pass a join predicate, which takes a regular
expression match and the node before the wrapped node, and can
return a boolean to indicate whether a join should happen.
*/
function wrappingInputRule(regexp, nodeType, getAttrs = null, joinPredicate) {
    return new InputRule(regexp, (state, match, start, end) => {
        let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
        let tr = state.tr.delete(start, end);
        let $start = tr.doc.resolve(start), range = $start.blockRange(), wrapping = range && findWrapping(range, nodeType, attrs);
        if (!wrapping)
            return null;
        tr.wrap(range, wrapping);
        let before = tr.doc.resolve(start - 1).nodeBefore;
        if (before && before.type == nodeType && canJoin(tr.doc, start - 1) &&
            (!joinPredicate || joinPredicate(match, before)))
            tr.join(start - 1);
        return tr;
    });
}
/**
Build an input rule that changes the type of a textblock when the
matched text is typed into it. You'll usually want to start your
regexp with `^` to that it is only matched at the start of a
textblock. The optional `getAttrs` parameter can be used to compute
the new node's attributes, and works the same as in the
`wrappingInputRule` function.
*/
function textblockTypeInputRule(regexp, nodeType, getAttrs = null) {
    return new InputRule(regexp, (state, match, start, end) => {
        let $start = state.doc.resolve(start);
        let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
        if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType))
            return null;
        return state.tr
            .delete(start, end)
            .setBlockType(start, start, nodeType, attrs);
    });
}

const mac = typeof navigator != "undefined" ? /Mac/.test(navigator.platform) : false;

// :: (Schema, ?Object) → Object
// Inspect the given schema looking for marks and nodes from the
// basic schema, and if found, add key bindings related to them.
// This will add:
//
// * **Mod-b** for toggling [strong](#schema.StrongMark)
// * **Mod-i** for toggling [emphasis](#schema.EmMark)
// * **Mod-`** for toggling [code font](#schema.CodeMark)
// * **Mod-,** for toggling [subscript](#schema.subscript)
// * **Mod-.** for toggling [superscript](#schema.superscript)
// * **Mod-u** for toggling [underline](#schema.underline)
// * **Ctrl-Shift-0** for making the current textblock a paragraph
// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current
//   textblock a heading of the corresponding level
// * **Ctrl-Shift-Backslash** to make the current textblock a code block
// * **Ctrl-Shift-8** to wrap the selection in an ordered list
// * **Ctrl-Shift-9** to wrap the selection in a bullet list
// * **Ctrl->** to wrap the selection in a block quote
// * **Enter** to split a non-empty textblock in a list item while at
//   the same time splitting the list item
// * **Mod-Enter** to insert a hard break
// * **Mod-_** to insert a horizontal rule
// * **Backspace** to undo an input rule
// * **Alt-ArrowUp** to `joinUp`
// * **Alt-ArrowDown** to `joinDown`
// * **Mod-BracketLeft** to `lift`
// * **Escape** to `selectParentNode`
//
// You can suppress or map these bindings by passing a `mapKeys`
// argument, which maps key names (say `"Mod-B"` to either `false`, to
// remove the binding, or a new key name string.
function buildKeymap(schema, mapKeys) {
  let keys = {},
    type;
  function bind(key, cmd) {
    if (mapKeys) {
      let mapped = mapKeys[key];
      if (mapped === false) return
      if (mapped) key = mapped;
    }
    keys[key] = cmd;
  }

  bind("Ctrl-s", (state, _, view) => { saveFileAsMarkdown(state, view); return true });
  bind("Ctrl-p", (state, _, view) => { printHurmet(view); return true });
  bind("Alt-j", (state, _, view) => { readFile(state, _, view, schema, "hurmet"); return true });
  bind("Mod-z", undo);
  bind("Shift-Mod-z", redo);
  bind("Backspace", undoInputRule);
  if (!mac) bind("Mod-y", redo);

  bind ("Tab", goToNextCell(1));
  bind ("Shift-Tab", goToNextCell(-1));

  bind("Alt-ArrowUp", joinUp);
  bind("Alt-ArrowDown", joinDown);
  bind("Mod-BracketLeft", lift);
//  bind("Escape", selectParentNode)

  if ((type = schema.marks.strong)) bind("Mod-b", toggleMark(type));
  if ((type = schema.marks.em)) bind("Mod-i", toggleMark(type));
  if ((type = schema.marks.code)) bind("Mod-`", toggleMark(type));
  if ((type = schema.marks.subscript)) bind("Mod-,", toggleMark(type));
  if ((type = schema.marks.superscript)) bind("Mod-.", toggleMark(type));
  if ((type = schema.marks.underline)) bind("Mod-u", toggleMark(type));
  if ((type = schema.nodes.calculation)) {
    bind("Alt-c", (state, _, view) => {
      insertMath(state, view, "calculation");
      return true
    });
  }
  bind("Alt-e", (state, _, view) => {
    expandHurmetMacro(state, view);
    return true
  });
  if ((type = schema.nodes.bullet_list)) bind("Shift-Ctrl-8", wrapInList(type));
  if ((type = schema.nodes.ordered_list)) bind("Shift-Ctrl-9", wrapInList(type));
  if ((type = schema.nodes.blockquote)) bind("Ctrl->", wrapIn(type));
  if ((type = schema.nodes.indented)) bind("Alt-i", wrapIn(type));
  if ((type = schema.nodes.hard_break)) {
    let br = type,
      cmd = chainCommands(exitCode, (state, dispatch) => {
        dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
        return true
      });
    bind("Mod-Enter", cmd);
    bind("Shift-Enter", cmd);
    if (mac) bind("Ctrl-Enter", cmd);
  }
  if ((type = schema.nodes.list_item)) {
    bind("Enter", splitListItem(type));
    bind("Mod-[", liftListItem(type));
    bind("Mod-]", sinkListItem(type));
  }
  if ((type = schema.nodes.paragraph)) bind("Shift-Ctrl-0", setBlockType(type));
  if ((type = schema.nodes.code_block)) bind("Shift-Ctrl-\\", setBlockType(type));
  if ((type = schema.nodes.heading))
    for (let i = 1; i <= 6; i++) bind("Shift-Ctrl-" + i, setBlockType(type, { level: i }));
  if ((type = schema.nodes.horizontal_rule)) {
    let hr = type;
    bind("Mod-_", (state, dispatch) => {
      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());
      return true
    });
  }

  return keys
}

// : (NodeType) → InputRule
// Given a blockquote node type, returns an input rule that turns `"> "`
// at the start of a textblock into a blockquote.
function blockQuoteRule(nodeType) {
  return wrappingInputRule(/^\s*>\s$/, nodeType)
}

// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a number
// followed by a dot at the start of a textblock into an ordered list.
function orderedListRule(nodeType) {
  return wrappingInputRule(
    /^(?:(\d+)|([A-Z])|([a-z]))\.\s$/,
    nodeType, match => ({
      class: match[2] ? "upper-alpha" : match[3] ? "lower-alpha" : "decimal",
      order: match[1]
        ? +match[1]
        : match[2]
        ? match[2].codePointAt(0) - 64
        : match[3].codePointAt(0) - 96
    }),
    (match, node) => match[1] ? node.childCount + node.attrs.order === +match[1] : false)
}

// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a bullet
// (dash, plush, or asterisk) at the start of a textblock into a
// bullet list.
function bulletListRule(nodeType) {
  return wrappingInputRule(/^\s*([-+*])\s$/, nodeType)
}

// : (NodeType) → InputRule
// Given a code block node type, returns an input rule that turns a
// textblock starting with three backticks into a code block.
function codeBlockRule(nodeType) {
  return textblockTypeInputRule(/^```$/, nodeType)
}

// : (NodeType, number) → InputRule
// Given a node type and a maximum level, creates an input rule that
// turns up to that number of `#` characters followed by a space at
// the start of a textblock into a heading whose level corresponds to
// the number of `#` signs.
function headingRule(nodeType, maxLevel) {
  return textblockTypeInputRule(new RegExp("^(#{1," + maxLevel + "})\\s$"),
                                nodeType, match => ({ level: match[1].length }))
}

// : (Schema) → Plugin
// A set of input rules for creating the basic block quotes, lists,
// code blocks, and heading.
function buildInputRules(schema) {
  let rules = smartQuotes.concat(ellipsis, emDash), type;
  if (type = schema.nodes.blockquote) { rules.push(blockQuoteRule(type)); }
  if (type = schema.nodes.ordered_list) { rules.push(orderedListRule(type)); }
  if (type = schema.nodes.bullet_list) { rules.push(bulletListRule(type)); }
  if (type = schema.nodes.code_block) { rules.push(codeBlockRule(type)); }
  if (type = schema.nodes.heading) { rules.push(headingRule(type, 6)); }
  return inputRules({ rules })
}

// autocorrect.js

const autoCorrectRegEx = /([?:<>\-~/_!]=| \.| \*|~~|\+-|-\+|<-->|<->|<>|<--|<-|-->|->|=>|-:|\^\^|\\\||\/\/\/|\b(bar|hat|vec|tilde|dot|ddot|ul)|\b(bb|bbb|cc|ff|ss) [A-Za-z]|\\?[A-Za-z]{2,}|\\c|\\ |\\o|root [234]|<<|>>|\^-?[0-9]+|\|\|\||\/_|''|""|00)\s$/;

const accents = {
  acute: "\u0301",
  bar: "\u0305",
  breve: "\u0306",
  check: "\u030c",
  dot: "\u0307",
  ddot: "\u0308",
  grave: "\u0300",
  hat: "\u0302",
  harpoon: "\u20d1",
  leftharpoon: "\u20d0",
  leftrightvec: "\u20e1",
  leftvec: "\u20d6",
  ring: "\u030a",
  tilde: "\u0303",
  vec: "\u20d7",
  ul: "\u0332"
};

const autoCorrections = {
  alpha: "α",
  beta: "β",
  chi: "χ",
  delta: "δ",
  Delta: "Δ",
  epsilon: "ε",
  varepsilon: "\u025B",
  eta: "\u03B7",
  gamma: "γ",
  Gamma: "Γ",
  iota: "\u03B9",
  kappa: "\u03BA",
  lambda: "λ",
  Lambda: "Λ",
  mu: "μ",
  nu: "\u03BD",
  omega: "ω",
  Omega: "Ω",
  phi: "\u03D5",
  varphi: "\u03C6",
  Phi: "\u03A6",
  pi: "π",
  Pi: "Π",
  psi: "ψ",
  Psi: "Ψ",
  rho: "ρ",
  sigma: "σ",
  Sigma: "Σ",
  tau: "τ",
  theta: "θ",
  vartheta: "\u03D1",
  Theta: "Θ",
  upsilon: "\u03C5",
  xi: "\u03BE",
  Xi: "\u039E",
  zeta: "\u03B6",
  prime: "ʹ",
  ee: "ε",
  ll: "λ",
  sqrt: "√",
  "root 2": "\u221A",
  "root 3": "\u221B",
  "root 4": "\u221C",
  AA: "∀",
  CC: "\u2102",
  EE: "∃",
  HH: "\u210D",
  NN: "\u2115",
  QQ: "\u211A",
  RR: "\u211D",
  ZZ: "\u2124",
  OO: "𝒪",
  ii: "√(-1)",
  oo: "∞", // infinity
  ooo: "°",
  not: "¬",
  "-:": "÷",
  "\\ ": "˽",  // space
  "\\c": "¢",
  "\\cdots": "\u22ef",
  "\\vdots": "\u22ee",
  "\\ddots": "\u22f1",
  "\\floor": "\u23BF\u23CC",
  "\\ceil": "\u23BE\u23CB",
  xx: "×",
  "\\int": "∫",
  "\\iint": "∬",
  "\\iiint": "∭",
  "\\oint": "∮",
  "\\oiint": "∯",
  "\\oiiint": "∰",
  "\\sum": "∑",
  "\\prod": "∏",
  nn: "∩", // cap
  nnn: "⋂",
  uu: "∪", // cup
  uuu: "⋃",
  "\\del": "∂",
  "\\grad": "∇",
  "\\hbar": "ℏ",
  "\\ell": "ℓ",
  "\\nabla": "∇",
  "\\alef": "ℵ",
  "\\subset": "⊂",
  "\\supset": "⊃",
  "contains": "⊃",
  "owns": "∋",
  "\\subseteq": "⊆",
  "\\nsubset": "⊄",
  "\\nsubseteq": "⊈",
  "\\nsupset": "⊅",
  "\\nsupseteq": "⊉",
  "\\forall": "∀",
  "\\therefore": "∴",
  "\\mapsto": "↦",
  "\\checkmark": "✓",
  bar: "\u02C9",
  dot: "\u02D9",
  ddot: "\u00A8",
  hat: "\u02C6",
  tilde: "\u02DC",
  vec: "\u00A0\u20D7",
  "\\land": "∧",
  "\\lor": "∨",
  "\\not": "¬",
  "\\notin": "∉",
  "\\euro": "€",
  "\\pound": "£",
  "\\yen": "¥",
  "\\o": "ø",
  "^^": "∧",
  vv: "∨",
  vvv: "⋁",
  "\\xor": "⊻",
  "\\in": "\u2208",
  "<>": "≠",
  "!=": "≠",
  ":=": "≔",
  "?=": "≟",
  "<=": "≤",
  ">=": "≥",
  "-=": "≡",
  "~=": "≅",
  "_=": "≡",
  "~~": "≈",
  "+-": "±",
  "-+": "∓",
  "<<": "\u27E8",
  ">>": "\u27E9",
  "///": "\u2215",
  "<->": "\u2194",
  "<-": "\u2190",
  "<--": "\u27F5",
  "-->": "⟶",
  "->": "→",
  "=>": "⇒",
  "<-->": "\\xrightleftarrows",
  "\\circ": "∘",
  "\\otimes": "⊗",
  "|||": "¦",
  "\\|": "‖",
  "/_": "∠",
  " .": "\u00B7", // half-high dot
  " *": " \u2217 ", // asterisk operator
  "''": "\u2032", // two apostrophes → prime
  '""': "\u2033" // double prime
};

const supCharFromNum = {
  "^": "",
  "-": "⁻",
  "2": "²",
  "3": "³",
  "1": "¹",
  "0": "⁰",
  "4": "⁴",
  "5": "⁵",
  "6": "⁶",
  "7": "⁷",
  "8": "⁸",
  "9": "⁹",
  "(": "",
  ")": ""
};

const superscript = str => {
  let superChar = "";
  for (const ch of str) {
    superChar += supCharFromNum[ch];
  }
  return superChar
};

const lowSurrogateDiff = {
  // captital diff, lower case diff
  bb: [0xdbbf, 0xdbb9], //  bold
  bbb: [0xdcf7, 0xdcf1], // blackboard bold
  cc: [0xdc5b, 0xdc55], // calligraphic
  ff: [0xdd5f, 0xdd59] //   sans-serif
};

// 7 blackboard bold characters (ℂ, ℍ, ℕ, ℙ, ℚ, ℝ, ℤ) have Unicode code points in the
// basic multi-lingual plane. So they must be treated differently than the other
// blackboard bold characters. Eleven calligraphic characters work the same way.
const wideExceptions = [0xdd3a, 0xdd3f, 0xdd45, 0xdd47, 0xdd48, 0xdd49, 0xdd51, // bbb
  0xdc9d, 0xdca0, 0xdca1, 0xdca3, 0xdca4, 0xdca7, 0xdca8, // calligraphic
  0xdcad, 0xdcba, 0xdcbc, 0xdcc1, 0xdcc4];

const bbb = {
  C: "\u2102",
  H: "\u210D",
  N: "\u2115",
  P: "\u2119",
  Q: "\u211A",
  R: "\u211D",
  Z: "\u2124"
};
const calligraphic = {
  B: "\u212C",
  E: "\u2130",
  F: "\u2131",
  H: "\u210B",
  I: "\u2110",
  L: "\u2112",
  M: "\u2133",
  R: "\u211B",
  e: "\u212F",
  g: "\u210A",
  l: "\u2113",
  o: "\u2134"
};

const fontStr = str => {
  const posSpace = str.indexOf(" ");
  const ch = str.substring(posSpace + 1);
  const accentName = str.substring(0, posSpace);
  return fontedChar(ch, accentName)
};

const fontedChar = (ch, accentName) => {
  switch (accentName) {
    case "bb": // bold
    case "bbb": // blackboard bold
    case "cc": // caligraphic
    case "ff": { // sans-serif
      const code = ch.charCodeAt(0);
      let newChar = "";
      if (code < 0x0041 || code > 0x007a) { return null }
      const isSmall = code < 0x005b ? 0 : 1;
      if (accentName === "cc" && isSmall && code !== 0x006c) { return null }
      if (code > 0x005a && accentName === "bbb") { return null }
      const lowSurrogate = code + lowSurrogateDiff[accentName][isSmall];
      if (wideExceptions.includes(lowSurrogate)) {
        newChar = accentName === "bbb" ? bbb[ch] : calligraphic[ch];
      } else {
        newChar = "\uD835" + String.fromCharCode(lowSurrogate);
      }
      return newChar
    }

    default:
      return null
  }
};

const autoCorrect = (jar, preText, postText) => {
  // Auto-correct math in real time.
  // jar is an instance of a CodeJar editing box.
//  const pos = doc.getCursor()
  if (preText.length > 0 && preText.slice(-1) === " ") {
    // Auto-correct only after the user hits the space bar.
    const matches = autoCorrectRegEx.exec(preText);
    if (matches) {
      const word = matches[0].slice(0, -1); // Trim the final space.
      let correction;
      const accent = accents[word];
      if (accent) {
        const newStr = preText.slice(0, -(matches[0].length + 1)) + accent;
        jar.updateCode(newStr + postText);
        // Move the cursor to the correct location
        const L = newStr.length;
        jar.restore({ start: L, end: L, dir: undefined });
      } else {
        correction = autoCorrections[word]; // Check for a match in the lookup table.
        if (!correction) {
          // No perfect match in the lookup table. Try for a superscript or an accent.
          if (word.charAt(0) === "^") {
            correction = superscript(word); // e.g. x²
          } else {
            if (word.indexOf(" ") > 0) {
              // accented char or Unicode character. E.g.  bb M
              correction = fontStr(word);
            }
          }
        }
      }
      if (correction) {
        const newStr = preText.slice(0, -matches[0].length) + correction;
        jar.updateCode(newStr + postText);
        // Move the cursor to the correct location
        const L = newStr.length;
        jar.restore({ start: L, end: L, dir: undefined });
      }
    }
  }
};

const boldPrevChar = preText => {
  if (preText.length === 0) { return null }
  const ch = preText.charAt(preText.length - 1);
  return fontedChar(ch, "bb")
};

/* eslint-disable */


const highlight = (editor) => {
  const code = editor.textContent
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;")
    .replace(/\t/gm, '<span style="background-color: lemonchiffon">\t</span>');
  editor.innerHTML = code;
};

const codeJar = (editor, isMathPrompt) => {
  const options = {
    tab: "\t",
    indentOn: /{$/,
    catchTab: true,
    preserveIdent: true,
    addClosing: true
  };

  const document = window.document;

  const listeners = [];
  let callback;
  let prev;

  editor.setAttribute("contenteditable", "plaintext-only");
  editor.setAttribute("spellcheck", "false");
  editor.style.outline = "none";
  editor.style.overflowWrap = "break-word";
  editor.style.overflowY = "auto";
  editor.style.whiteSpace = "pre-wrap";

  const doHighlight = (editor) => {
    highlight(editor);
  };
  
  let isLegacy = false; // true if plaintext-only is not supported

  if (editor.contentEditable !== "plaintext-only") isLegacy = true;
  if (isLegacy) editor.setAttribute("contenteditable", "true");

  const debounceHighlight = debounce(() => {
    const pos = save();
    doHighlight(editor);
    restore(pos);
  }, 30);

  const on = (type, fn) => {
    listeners.push([type, fn]);
    editor.addEventListener(type, fn);
  }

  ;on("keydown", event => {
    // The next five lines are Hurmet customization. Not part of vanilla CodeJar.
    if (event.keyCode === 13 && !event.shiftKey) return
    if (event.keyCode === 66 && event.ctrlKey) {
      // Make the previous letter bold.
      const preText = textBeforeCursor(editor);
      const ch = boldPrevChar(preText);
      if (ch) {
        const L = preText.length;
        editor.textContent = preText.slice(0, -1) + ch + textAfterCursor(editor);
        restore({ start: L, end: L, dir: undefined });
      }
    }
    if (event.keyCode === 65 && event.ctrlKey ) {
      window.getSelection().selectAllChildren(editor);
      event.preventDefault();
    }
    if (event.defaultPrevented) return
    prev = toString();
    if (options.preserveIdent) handleNewLine(event);
    else legacyNewLineFix(event);
    if (options.catchTab) handleTabCharacters(event);
    if (options.addClosing) handleSelfClosingCharacters(event);
    if (isLegacy) restore(save());
  })

  ;on("keyup", event => {
    if (event.defaultPrevented) return
    if (event.isComposing) return
    if (prev !== toString()) debounceHighlight();
    if (callback) callback(toString());
  })

  ;on("paste", event => {
    handlePaste(event);
  });

  function save() {
    const s = getSelection();
    const pos = { start: 0, end: 0, dir: undefined };

    let { anchorNode, anchorOffset, focusNode, focusOffset } = s;
    if (!anchorNode || !focusNode) throw "error1"

    // Selection anchor and focus are expected to be text nodes,
    // so normalize them.
    if (anchorNode.nodeType === Node.ELEMENT_NODE) {
      const node = document.createTextNode("");
      anchorNode.insertBefore(node, anchorNode.childNodes[anchorOffset]);
      anchorNode = node;
      anchorOffset = 0;
    }
    if (focusNode.nodeType === Node.ELEMENT_NODE) {
      const node = document.createTextNode("");
      focusNode.insertBefore(node, focusNode.childNodes[focusOffset]);
      focusNode = node;
      focusOffset = 0;
    }

    visit(editor, el => {
      if (el === anchorNode && el === focusNode) {
        pos.start += anchorOffset;
        pos.end += focusOffset;
        pos.dir = anchorOffset <= focusOffset ? "->" : "<-";
        return "stop"
      }

      if (el === anchorNode) {
        pos.start += anchorOffset;
        if (!pos.dir) {
          pos.dir = "->";
        } else {
          return "stop"
        }
      } else if (el === focusNode) {
        pos.end += focusOffset;
        if (!pos.dir) {
          pos.dir = "<-";
        } else {
          return "stop"
        }
      }

      if (el.nodeType === Node.TEXT_NODE) {
        if (pos.dir != "->") pos.start += el.nodeValue.length;
        if (pos.dir != "<-") pos.end += el.nodeValue.length;
      }
    });

    // collapse empty text nodes
    editor.normalize();

    return pos
  }

  function restore(pos) {
    const s = getSelection();
    let startNode,
      startOffset = 0;
    let endNode,
      endOffset = 0;

    if (!pos.dir) pos.dir = "->";
    if (pos.start < 0) pos.start = 0;
    if (pos.end < 0) pos.end = 0;

    // Flip start and end if the direction reversed
    if (pos.dir == "<-") {
      const { start, end } = pos;
      pos.start = end;
      pos.end = start;
    }

    let current = 0;

    visit(editor, el => {
      if (el.nodeType !== Node.TEXT_NODE) return

      const len = (el.nodeValue || "").length;
      if (current + len > pos.start) {
        if (!startNode) {
          startNode = el;
          startOffset = pos.start - current;
        }
        if (current + len > pos.end) {
          endNode = el;
          endOffset = pos.end - current;
          return "stop"
        }
      }
      current += len;
    });

    if (!startNode)
      (startNode = editor), (startOffset = editor.childNodes.length);
    if (!endNode) (endNode = editor), (endOffset = editor.childNodes.length);

    // Flip back the selection
    if (pos.dir == "<-") {
[startNode, startOffset, endNode, endOffset] = [
        endNode,
        endOffset,
        startNode,
        startOffset
      ];
    }

    s.setBaseAndExtent(startNode, startOffset, endNode, endOffset);
  }

  function beforeCursor() {
    const s = getSelection();
    const r0 = s.getRangeAt(0);
    const r = document.createRange();
    r.selectNodeContents(editor);
    r.setEnd(r0.startContainer, r0.startOffset);
    return r.toString()
  }

  function afterCursor() {
    const s = getSelection();
    const r0 = s.getRangeAt(0);
    const r = document.createRange();
    r.selectNodeContents(editor);
    r.setStart(r0.endContainer, r0.endOffset);
    return r.toString()
  }

  function handleNewLine(event) {
    if (event.key === "Enter") {
      const before = beforeCursor();
      const after = afterCursor();

      let [padding] = findPadding(before);
      let newLinePadding = padding;

      // If last symbol is "{" ident new line
      // Allow user defines indent rule
      if (options.indentOn.test(before)) {
        newLinePadding += options.tab;
      }

      // Preserve padding
      if (newLinePadding.length > 0) {
        preventDefault(event);
        event.stopPropagation();
        insert("\n" + newLinePadding);
      } else {
        legacyNewLineFix(event);
      }

      // Place adjacent "}" on next line
      if (newLinePadding !== padding && after[0] === "}") {
        const pos = save();
        insert("\n" + padding);
        restore(pos);
      }
    }
  }

  function legacyNewLineFix(event) {
    // Firefox does not support plaintext-only mode
    // and puts <div><br></div> on Enter. Let's help.
    if (isLegacy && event.key === "Enter") {
      preventDefault(event);
      event.stopPropagation();
      if (afterCursor() == "") {
        insert("\n ");
        const pos = save();
        pos.start = --pos.end;
        restore(pos);
      } else {
        insert("\n");
      }
    }
  }

  function handleSelfClosingCharacters(event) {
    const open = `([{'"`;
    const close = `)]}'"`;
    const codeAfter = afterCursor();
    const codeBefore = beforeCursor();
    const escapeCharacter = codeBefore.substr(codeBefore.length - 1) === "\\";
    const charAfter = codeAfter.substr(0, 1);
    if (
      close.includes(event.key) &&
      !escapeCharacter &&
      charAfter === event.key
    ) {
      // We already have closing char next to cursor.
      // Move one char to right.
      const pos = save();
      preventDefault(event);
      pos.start = ++pos.end;
      restore(pos);
    } else if (
      open.includes(event.key) &&
      !escapeCharacter &&
      (`"'`.includes(event.key) || ["", " ", "\n"].includes(charAfter))
    ) {
      preventDefault(event);
      const pos = save();
      const wrapText = pos.start == pos.end ? "" : getSelection().toString();
      const text = event.key + wrapText + close[open.indexOf(event.key)];
      insert(text);
      pos.start++;
      pos.end++;
      restore(pos);
    }
  }

  function handleTabCharacters(event) {
    if (event.key === "Tab") {
      preventDefault(event);
      if (event.shiftKey) {
        const before = beforeCursor();
        let [padding, start] = findPadding(before);
        if (padding.length > 0) {
          const pos = save();
          // Remove full length tab or just remaining padding
          const len = Math.min(options.tab.length, padding.length);
          restore({ start, end: start + len });
          document.execCommand("delete");
          pos.start -= len;
          pos.end -= len;
          restore(pos);
        }
      } else {
        insert(options.tab);
      }
    }
  }

  function handlePaste(event) {
    preventDefault(event);
    const text = (event.originalEvent || event).clipboardData
      .getData("text/plain")
      .replace(/\r/g, "");
    const pos = save();
    insert(text);
    doHighlight(editor);
    restore({ start: pos.start + text.length, end: pos.start + text.length });
  }

  function visit(editor, visitor) {
    const queue = [];

    if (editor.firstChild) queue.push(editor.firstChild);

    let el = queue.pop();

    while (el) {
      if (visitor(el) === "stop") break

      if (el.nextSibling) queue.push(el.nextSibling);
      if (el.firstChild) queue.push(el.firstChild);

      el = queue.pop();
    }
  }

  function insert(text) {
    text = text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
    document.execCommand("insertHTML", false, text);
  }

  function debounce(cb, wait) {
    let timeout = 0;
    return (...args) => {
      clearTimeout(timeout);
      timeout = window.setTimeout(() => cb(...args), wait);
    }
  }

  function findPadding(text) {
    // Find beginning of previous line.
    let i = text.length - 1;
    while (i >= 0 && text[i] !== "\n") i--;
    i++;
    // Find padding of the line.
    let j = i;
    while (j < text.length && /[ \t]/.test(text[j])) j++;
    return [text.substring(i, j) || "", i, j]
  }

  function toString() {
    return editor.textContent || ""
  }

  function preventDefault(event) {
    event.preventDefault();
  }

  function getSelection() {
    if (editor.parentNode && editor.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE) {
      return editor.parentNode.getSelection()
    }
    return window.getSelection()
  }

  function pos() {
    return window.getSelection().anchorOffset
  }

  return {
    updateOptions(newOptions) {
      Object.assign(options, newOptions);
    },
    updateCode(code) {
      editor.textContent = code;
      doHighlight(editor);
    },
    onUpdate(cb) {
      callback = cb;
    },
    toString,
    pos,
    save,
    restore,
    destroy() {
      for (let [type, fn] of listeners) {
        editor.removeEventListener(type, fn);
      }
    }
  }
};

/**
 * Returns selected text.
 */
function selectedText() {
  const s = window.getSelection();
  if (s.rangeCount === 0) return ""
  return s.getRangeAt(0).toString()
}

/**
 * Returns text before the cursor.
 * @param editor Editor DOM node.
 */
function textBeforeCursor(editor) {
  const s = window.getSelection();
  if (s.rangeCount === 0) return ""

  const r0 = s.getRangeAt(0);
  const r = document.createRange();
  r.selectNodeContents(editor);
  r.setEnd(r0.startContainer, r0.startOffset);
  return r.toString()
}

/**
 * Returns text after the cursor.
 * @param editor Editor DOM node.
 */
function textAfterCursor(editor) {
  const s = window.getSelection();
  if (s.rangeCount === 0) return ""

  const r0 = s.getRangeAt(0);
  const r = document.createRange();
  r.selectNodeContents(editor);
  r.setStart(r0.endContainer, r0.endOffset);
  return r.toString()
}

const findWordAtClickPos = (str, clickPos) => {
  // Split the string into words and punctuation/symbols
  const words = str.split(/([\w\dı_\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133\uD835\uDC00-\udc33\udc9c-\udcb5′]+)/);
  let currentPos = 0;
  for (let word of words) {
    currentPos += word.length;
    if (clickPos < currentPos) {
      word = word.replace(/^\d/, "");
      return isValidIdentifier$1.test(word) ? word : null
    }
  }
  return null
};

const positionOfDefinition = (word, doc, nodePos) => {
  let definitionPos = -1;
  doc.nodesBetween(0, nodePos, function(node, pos) {
    if (node.type.name === "calculation" && node.attrs.name) {
      if (node.attrs.name === word) {
        definitionPos = pos;
      } else if (Array.isArray(node.attrs.name)) {
        for (const def of node.attrs.name) {
          if (def === word) {
            definitionPos = pos;
            break
          }
        }
      }
    }
  });
  return definitionPos
};

const commaRegEx = /"[^"]*"|[0-9]+,[0-9]+|[A-Za-zıȷ\u0391-\u03D5\uD835][A-Za-z0-9_ıȷ\u0391-\u03D5\uD835\uDC00-\uDFFF]/g;
const dotRegEx = /"[^"]*"|[0-9]+\.[0-9]+|[A-Za-zıȷ\u0391-\u03D5\uD835][A-Za-z0-9_ıȷ\u0391-\u03D5\uD835\uDC00-\uDFFF]/g;
const functionRegEx = /^(?:private +)?function (?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*\(/;

const dotFromCommaForStorage = (str) => {
  // Lex for strings, numbers, and identifiers
  let match;
  while ((match = commaRegEx.exec(str)) != null) {
    if ("0123456789".indexOf(match[0].charAt(0)) > -1) {
      // Change comma decimal to dot decimal.
      const pos = match.index + match[0].indexOf(",");
      str = str.slice(0, pos) + "." + str.slice(pos + 1);
    }
  }
  return str
};

const commaFromDotForDisplay = (str) => {
  let match;
  while ((match = dotRegEx.exec(str)) !== null) {
    if ("0123456789".indexOf(match[0].charAt(0)) > -1) {
      // Change dot decimal to comma decimal.
      const pos = match.index + match[0].indexOf(".");
      str = str.slice(0, pos) + "," + str.slice(pos + 1);
    }
  }
  return str
};

function openMathPrompt(options) {
  const wrapper = options.dom.appendChild(document.createElement("div"));
  wrapper.className = "math-code";
  wrapper.parentNode.firstChild.style.display = "none";

  const close = () => {
    if (wrapper.parentNode) {
      wrapper.parentNode.firstChild.removeAttribute("style");
      wrapper.parentNode.removeChild(wrapper);
    }
  };

  const isCalculation = (options.encoding === "HurmetMath");
  const isTex = !isCalculation;
  const decimalSymbol = isCalculation
    ? options.outerView.state.doc.attrs.decimalFormat.slice(-1)
    : "";

  const editor = wrapper.appendChild(document.createElement("div"));
  const jar = codeJar(editor);

  // Populate the editor.
  if (options.attrs) {
    if (isCalculation && options.attrs.entry) {
      let math = options.attrs.entry;
      if (decimalSymbol === ",") { math = commaFromDotForDisplay(math); }
      jar.updateCode(math);
    } else if (options.attrs.tex) {
      jar.updateCode(options.attrs.tex);
    }
  }
  // Place the cursor at the end of the editor.
  const L = jar.toString().length;
  jar.restore({ start: L, end: L, dir: undefined });

  const closeIfNotHint = _ => {
    // Close, unless the math zone was blurred to click on a hint.
    if (document.getElementsByClassName("ProseMirror-prompt").length === 0) {
      close();
    }
  };
  editor.addEventListener("blur", closeIfNotHint );

  const mathDisplay = wrapper.appendChild(document.createElement("div"));
  mathDisplay.setAttribute("class", "math-display");

  const renderMath = function(code) {
    let tex = "";
    let isUDF = false;
    if (isCalculation) {
      // Check if an auto-correct is needed (after a user types a space.)
      const selText = selectedText();
      if (selText.length === 0) {
        autoCorrect(jar, textBeforeCursor(editor), textAfterCursor(editor));
      }
      tex = jar.toString();
      if (decimalSymbol === ",") { tex = dotFromCommaForStorage(tex); }
      isUDF = functionRegEx.test(tex);
      if (!isUDF) {
        const formats = {
          decimalFormat: options.outerView.state.doc.attrs.decimalFormat,
          dateFormat: options.outerView.state.doc.attrs.dateFormat
        };
        tex = hurmet.parse(tex, formats, false, true);
      }
    } else {
      tex = code;
    }
    if (!isUDF) {
      try {
        hurmet.render(tex, mathDisplay, {
          displayMode: options.attrs.displayMode,
          trust: (context) => context.command === '\\class' &&
                              context.class === "special-fraction",
          wrap: "=",
          errorColor: "#fff"
        });
      // eslint-disable-next-line no-unused-vars
      } catch (err) {
        while (mathDisplay.lastChild) {
          mathDisplay.removeChild(mathDisplay.lastChild);
        }
        mathDisplay.textContent = tex;
      }
    }
  };
  if (jar.toString().length > 0) { renderMath(jar.toString()); }

  editor.addEventListener("input", e => {
    renderMath(jar.toString());
  });

  const submit = _ => {
    // Get the string that the user typed into the prompt box.
    let mathString = jar.toString();
    // Strip leading spaces and trailing spaces
    mathString = mathString.replace(/^[\s\u200b]+/, "");
    mathString = mathString.replace(/[\s\u200b]+$/, "");
    mathString = mathString.replace(/\r?\n/g, "\n");
    // Save all number strings with no thousands separator and with a
    // dot for a decimal separator. Later functions will display numbers
    // in the reader's preference for decimal separator.
    if (isCalculation && decimalSymbol === ",") {
      mathString = dotFromCommaForStorage(mathString);
    }
    const formats = {
      decimalFormat: options.outerView.state.doc.attrs.decimalFormat,
      dateFormat: options.outerView.state.doc.attrs.dateFormat
    };
    const params = (isTex)
      ? { tex: mathString }
      : hurmet.compile(mathString, formats);
    params.displayMode = options.attrs.displayMode;
    if (wrapper.parentNode) {
      wrapper.parentNode.firstChild.removeAttribute("style");
      if (!params.displayMode && wrapper.dataset['data-display'] &&
                                 wrapper.dataset['data-display'] === "true") {
        params.displayMode = true;
      } else if (params.displayMode && !wrapper.dataset['data-display']) {
        params.displayMode = false;
      }
    }
    options.callback(params);
    editor.removeEventListener('blur', close);
    if (wrapper.parentNode) {
      wrapper.remove();
    }
  };

  editor.addEventListener("submit", e => {
    e.preventDefault();
    submit();
  });

  editor.addEventListener("keydown", e => {
    if (e.keyCode === 27) {
      // Esc. Close without updating.
      e.preventDefault();
      close();
    } else if (e.keyCode === 13 && !e.shiftKey) {
      // Submit upon Enter. (Shift-Enter creates a newline.)
      e.preventDefault();
      submit();
    }
  });

  editor.addEventListener("pointerup", e => {
    if (e.ctrlKey || e.metaKey) {
      // Check if the clicked-on word is a previously defined variable
      const word = findWordAtClickPos(jar.toString(), jar.pos());
      if (word) {
        const defPos = positionOfDefinition(word, options.outerView.state.doc, options.pos);
        if (defPos > -1) {
          // Hand control to the callback, which will scroll to the definition.
          e.preventDefault();
          if (wrapper.parentNode) {
            wrapper.parentNode.classList.remove("ProseMirror-selectednode");
          }
          options.callback2(defPos);
          close();
        }
      }
    }
  });
}

class CalcView {
  constructor(node, view) {
    this.node = node;
    this.outerView = view;
    this.dom = schema.nodes.calculation.spec.toDOM(node);
  }

  selectNode() {
    if (this.dom.children.length > 1) { return }
    this.dom.classList.add("ProseMirror-selectednode");
    const attrs = this.node.attrs;
    const pos = this.outerView.state.selection.from;
    // A CalcView node is a ProseMirror atom. It does not enable direct ProseMirror editing.
    // Instead we temporarily open a text editor instance in the node location.
    // Then, we update all dependent calculations only if the node is submitted.
    openMathPrompt({
      encoding: "HurmetMath",
      attrs: attrs,
      outerView: this.outerView,
      dom: this.dom,
      pos: pos,
      callback(attrs) {
        hurmet.updateCalculations(this.outerView, false, attrs, pos);
      },
      callback2(defPos) {
        // Scroll to a variable definition.
        const definitionTop = this.outerView.coordsAtPos(defPos).top;
        const boundingTop = this.outerView.dom.getBoundingClientRect().top;
        window.scrollTo(0, definitionTop - boundingTop);
      }
    });
  }

  deselectNode() {
    this.dom.classList.remove("ProseMirror-selectednode");
  }
  stopEvent() { return true }
}

class TexView {
  constructor(node, view) {
    this.node = node;
    this.outerView = view;
    this.dom = schema.nodes.tex.spec.toDOM(node);
  }

  selectNode() {
    this.dom.classList.add("ProseMirror-selectednode");
    const attrs = this.node.attrs;
    openMathPrompt({
      // Create a user interface for TeX that is similar to CalcView.
      // The need for a text editor instance is not as great here as it is in CalcView,
      // but I want the look and feel to be similar for both.
      encoding: "TeX",
      attrs: attrs,
      outerView: this.outerView,
      dom: this.dom,
      callback(attrs) {
        const oView = this.outerView;
        oView.dispatch(
          oView.state.tr.replaceSelectionWith(schema.nodes.tex.createAndFill(attrs))
        );
        oView.focus();
      }
    });
  }

  deselectNode() {
    this.dom.classList.remove("ProseMirror-selectednode");
  }
  stopEvent() { return true }
}

class FootnoteView {
  constructor(node, view, getPos) {
    // We'll need these later
    this.node = node;
    this.outerView = view;
    this.getPos = getPos;

    // The node's representation in the editor (empty, for now)
    this.dom = document.createElement("footnote");
    // These are used when the footnote is selected
    this.innerView = null;
  }

  selectNode() {
    this.dom.classList.add("ProseMirror-selectednode");
    if (!this.innerView) { this.open(); }
  }

  deselectNode() {
    this.dom.classList.remove("ProseMirror-selectednode");
    if (this.innerView) { this.close(); }
  }

  open() {
    const tooltip = this.dom.appendChild(document.createElement("div"));
    tooltip.className = "footnote-tooltip";
    this.innerView = new EditorView(tooltip, {
      // Create a whole new editor in the node.
      state: EditorState.create({
        doc: this.node,
        plugins: [keymap({
          "Mod-z": () => undo(this.outerView.state, this.outerView.dispatch),
          "Mod-y": () => redo(this.outerView.state, this.outerView.dispatch),
          'Mod-b': toggleMark(schema.marks.strong),
          'Mod-i': toggleMark(schema.marks.em),
          'Mod-`': toggleMark(schema.marks.code),
          'Mod-,': toggleMark(schema.marks.subscript),
          'Mod-.': toggleMark(schema.marks.superscript),
          'Mod-u': toggleMark(schema.marks.underline)
        })]
      }),
      dispatchTransaction: this.dispatchInner.bind(this),
      handleDOMEvents: {
        mousedown: () => {
          if (this.outerView.hasFocus()) { this.innerView.focus(); }
        }
      }
    });
  }

  close() {
    this.innerView.destroy();
    this.innerView = null;
    this.dom.textContent = "";
  }

  dispatchInner(tr) {
    const { state, transactions } = this.innerView.state.applyTransaction(tr);
    this.innerView.updateState(state);

    if (!tr.getMeta("fromOutside")) {
      const outerTr = this.outerView.state.tr;
      const offsetMap = StepMap.offset(this.getPos() + 1);
      for (let i = 0; i < transactions.length; i++) {
        const steps = transactions[i].steps;
        for (let j = 0; j < steps.length; j++) {
          outerTr.step(steps[j].map(offsetMap));
        }
      }
      if (outerTr.docChanged) { this.outerView.dispatch(outerTr); }
    }
  }

  update(node) {
    if (!node.sameMarkup(this.node)) { return false }
    this.node = node;
    if (this.innerView) {
      const state = this.innerView.state;
      const start = node.content.findDiffStart(state.doc.content);
      if (start != null) {
        let { a: endA, b: endB } = node.content.findDiffEnd(state.doc.content);
        const overlap = start - Math.min(endA, endB);
        if (overlap > 0) { endA += overlap; endB += overlap; }
        this.innerView.dispatch(
          state.tr
            .replace(start, endB, node.slice(start, endA))
            .setMeta("fromOutside", true));
      }
    }
    return true
  }

  destroy() {
    if (this.innerView) { this.close(); }
  }

  stopEvent(event) {
    return this.innerView && this.innerView.dom.contains(event.target)
  }

  ignoreMutation() { return true }

}

// Prosemirror core modules

// Bundle together the plugins.
function pmSetup(options) {
  return [
    buildInputRules(options.schema),
    keymap(buildKeymap(options.schema, options.mapKeys)),
    keymap(baseKeymap),
//    dropCursor(),
    gapCursor(),
    menuBar({ floating: true, content: buildMenuItems(options.schema).fullMenu }),
    history(),
    columnResizing(),
    tableEditing(),
    new Plugin({  props: {
      attributes: { class: "ProseMirror-setup pica", id: "editor-content" }
    } }),
    new Plugin({ props: { clipboardTextParser(text, _, plain) {
      if (plain) { return text }
      const ast = hurmet.md2ast(text, false);
      return schema.nodeFromJSON({ type: "fragment", content: ast })
    } } })
  ]
}

window.view = new EditorView(document.querySelector("#editor"), {
  state: EditorState.create({
    doc: DOMParser.fromSchema(schema).parse(document.querySelector("#content")),
    plugins: pmSetup({ schema: schema })
  }),
  nodeViews: {
    calculation(node, view) { return new CalcView(node, view) },
    tex(node, view) { return new TexView(node, view) },
    footnote(node, view, getPos) { return new FootnoteView(node, view, getPos) }
  },
  clipboardTextSerializer: (content, view) => {
    // If the selection consists of a single calc with a numeric result, return the result.
    if (content.content && content.content.content.length === 1
        && content.content.content[0].type.name === "paragraph"
        && content.content.content[0].content && content.content.content[0].content.content
        && content.content.content[0].content.content.length === 1
        && content.content.content[0].content.content[0].type.name === "calculation") {
      const attrs = content.content.content[0].content.content[0].attrs;
      const value = attrs.value;
      if (value.plain && hurmet.Rnl.isRational(value.plain)) {
        return hurmet.Rnl.toNumber(value.plain)
      } else if (hurmet.Rnl.isRational(value)) {
        return hurmet.Rnl.toNumber(value)
      } else if (attrs.dtype === dt.ROWVECTOR + dt.RATIONAL
                 || attrs.dtype === dt.COLUMNVECTOR + dt.RATIONAL) {
        const sep = (attrs.dtype & dt.ROWVECTOR) ? ", " : "; ";
        return "[" + value.map(e => String(hurmet.Rnl.toNumber(e))).join(sep) + "]"
      } else if ((attrs.dtype & dt.ROWVECTOR) || (attrs.dtype & dt.COLUMNVECTOR)) {
        const sep = (attrs.dtype & dt.ROWVECTOR) ? ", " : "; ";
        return "[" + value.map(e => String(e)).join(sep) + "]"
      } else if (attrs.dtype === dt.MATRIX + dt.RATIONAL) {
        // eslint-disable-next-line max-len
        return "(" + value.map(row => row.map(e => String(hurmet.Rnl.toNumber(e))).join(", ")).join(";\n") + ")"
      } else if (attrs.dtype & dt.MATRIX) {
        return "(" + value.map(row => row.map(e => String(e)).join(", ")).join(";\n") + ")"
      } else if (attrs.dtype === dt.DATAFRAME) {
        return DataFrame.displayAlt(value)
      }
      return value
    } else {
      // Otherwise, return the default.
      return content.content.textBetween(0, content.content.size, "\n\n")
    }
  }
});

// Set decimal separator display per the browser language.
const userLanguageTag = navigator.language || navigator.userLanguage;
const parts = userLanguageTag.match(/([A-Za-z]{1,2})(?:-(\w{1,3})(?:-(\w{2,3}))?)?/);
const userLanguage = (parts[1]).toLowerCase();
const userRegion = (parts[3] ? parts[3] : (parts[2] ? parts[2] : "")).toUpperCase();
if (["BD", "IN", "LK", "MV", "MP", "PK"].includes(userRegion)) {
  window.view.state.doc.attrs.decimalFormat = "1,00,000.";  // south Asia
} else if (userLanguage === "en" || (userRegion.length > 0 &&
  ["BN", "BU", "BW", "DO", "EG", "ET", "GH", "GT", "GY", "HN", "IE", "IL", "JO", "JP", "KE",
    "KH", "KP", "KR", "LB", "LY", "MM", "MN", "MT", "MX", "MY", "NG", "NI", "PA", "PH", "PR",
    "QA", "PS", "SG", "SV", "TH", "TW", "TZ", "UG", "ZW"].includes(userRegion))) {
  window.view.state.doc.attrs.decimalFormat = "1,000,000.";
} else if (userLanguage === "zh") {
  window.view.state.doc.attrs.decimalFormat = "1,0000,0000.";  // China
} else {
  window.view.state.doc.attrs.decimalFormat = "1 000 000,"; // Europe, S America, much of Africa
}

const tidyUp = _ => {
  const fix = fixTables(window.view.state);
  if (fix) { window.view.state = window.view.state.apply(fix.setMeta("addToHistory", false)); }

  hurmet.updateCalculations(window.view, true);

  document.execCommand("enableObjectResizing", false, false);
  document.execCommand("enableInlineTableEditing", false, false);
};

let hash = location.hash;
if (hash && hash.length > 1) {
  hash = hash.slice(1);
  const anchor = document.getElementById(hash);
  if (anchor) {
    anchor.scrollIntoView({ behavior: 'smooth' });
  } else {
    const md = decodeURIComponent(hash);
    const ast = hurmet.md2ast(md);
    const fragment = { type: "fragment", content: ast };
    window.view.dispatch(
      window.view.state.tr.replaceWith(
        0,
        window.view.state.doc.content.size,
        schema.nodeFromJSON(fragment)
      )
    );
    hurmet.updateCalculations(window.view, true);
  }
}
tidyUp();
