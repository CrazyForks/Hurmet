import{katex}from"./katex.js";import{temml}from"./temml.js";const autoCorrectRegEx=/([!?:<>\-~/_]=| \.|~~|\+-|-\+|<-->|<->|<>|<--|<-|-->|->|=>|-:|\^\^|\|\||\/\/\/|\b(bar|hat|vec|tilde|dot|ddot|ul)|\b(bb|bbb|cc|ff|ss) [A-Za-z]|\\?[A-Za-z]{2,}|\\c|\\ |\\o|root [234]|<<|>>|\^-?[0-9]+|\|\|\||\/_|''|""|00)\s$/;const accents={acute:"́",bar:"̅",breve:"̆",check:"̌",dot:"̇",ddot:"̈",grave:"̀",hat:"̂",harpoon:"⃑",leftharpoon:"⃐",leftrightvec:"⃡",leftvec:"⃖",ring:"̊",tilde:"̃",vec:"⃗",ul:"̲"};const autoCorrections={alpha:"α",beta:"β",chi:"χ",delta:"δ",Delta:"Δ",epsilon:"ε",varepsilon:"ɛ",eta:"η",gamma:"γ",Gamma:"Γ",iota:"ι",kappa:"κ",lambda:"λ",Lambda:"Λ",mu:"μ",nu:"ν",omega:"ω",Omega:"Ω",phi:"ϕ",varphi:"φ",Phi:"Φ",pi:"π",Pi:"Π",psi:"ψ",Psi:"Ψ",rho:"ρ",sigma:"σ",Sigma:"Σ",tau:"τ",theta:"θ",vartheta:"ϑ",Theta:"Θ",upsilon:"υ",xi:"ξ",Xi:"Ξ",zeta:"ζ",prime:"ʹ",ee:"ε",ll:"λ",sqrt:"√","root 2":"√","root 3":"∛","root 4":"∜",AA:"∀",CC:"ℂ",EE:"∃",HH:"ℍ",NN:"ℕ",QQ:"ℚ",RR:"ℝ",ZZ:"ℤ",OO:"𝒪",ii:"√(-1)",oo:"∞",ooo:"°",not:"¬","-:":"÷","\\ ":"˽","\\c":"¢","\\cdots":"⋯","\\vdots":"⋮","\\ddots":"⋱","\\floor":"⎿⏌","\\ceil":"⎾⏋",xx:"×","\\int":"∫","\\iint":"∬","\\oint":"∮","\\sum":"∑",nn:"∩",nnn:"⋂",uu:"∪",uuu:"⋃","\\del":"∂","\\grad":"∇","\\hbar":"ℏ","\\ell":"ℓ","\\nabla":"∇","\\alef":"ℵ","\\subset":"⊂","\\supset":"⊃","\\Subset":"⋐","\\forall":"∀","\\therefore":"∴","\\mapsto":"↦","\\checkmark":"✓",bar:"ˉ",dot:"˙",ddot:"¨",hat:"ˆ",tilde:"˜",vec:" ⃗","\\land":"∧","\\lor":"∨","\\not":"¬","\\notin":"∉","\\euro":"€","\\pound":"£","\\yen":"¥","\\o":"ø","^^":"∧",vv:"∨",vvv:"⋁","\\xor":"⊻","\\in":"∈","!=":"≠","<>":"≠",":=":"≔","?=":"≟","<=":"≤",">=":"≥","-=":"≡","~=":"≅","_=":"≡","~~":"≈","+-":"±","-+":"∓","<<":"⟨",">>":"⟩","///":"∕","<->":"↔","<-":"←","<--":"⟵","--\x3e":"⟶","->":"→","=>":"⇒","<--\x3e":"\\xrightleftarrows","\\circ":"∘","\\otimes":"⊗","|||":"¦","||":"‖","/_":"∠"," .":"·","''":"′",'""':"″"};const supCharFromNum={"^":"","-":"⁻",2:"²",3:"³",1:"¹",0:"⁰",4:"⁴",5:"⁵",6:"⁶",7:"⁷",8:"⁸",9:"⁹","(":"",")":""};const superscript=e=>{let t="";for(const n of e){t+=supCharFromNum[n]}return t};const lowSurrogateDiff={bb:[56255,56249],bbb:[56567,56561],cc:[56411,56405],ff:[56671,56665]};const wideExceptions=[56634,56639,56645,56647,56648,56649,56657,56477,56480,56481,56483,56484,56487,56488,56493,56506,56508,56513,56516];const bbb={C:"ℂ",H:"ℍ",N:"ℕ",P:"ℙ",Q:"ℚ",R:"ℝ",Z:"ℤ"};const calligraphic={B:"ℬ",E:"ℰ",F:"ℱ",H:"ℋ",I:"ℐ",L:"ℒ",M:"ℳ",R:"ℛ",e:"ℯ",g:"ℊ",l:"ℓ",o:"ℴ"};const accentedChar=e=>{const t=e.indexOf(" ");const n=e.substring(t+1);const r=e.substring(0,t);switch(r){case"bb":case"bbb":case"cc":case"ff":{const e=n.charCodeAt(0);let t="";if(e<65||e>122){return null}const l=e<91?0:1;if(r==="cc"&&l&&e!==108){return null}if(e>90&&r==="bbb"){return null}const a=e+lowSurrogateDiff[r][l];if(wideExceptions.includes(a)){t=r==="bbb"?bbb[n]:calligraphic[n]}else{t="\ud835"+String.fromCharCode(a)}return t}default:return null}};const autoCorrect=(e,t,n)=>{if(t.length>0&&t.slice(-1)===" "){const r=autoCorrectRegEx.exec(t);if(r){const l=r[0].slice(0,-1);let a;const s=accents[l];if(s){const l=t.slice(0,-(r[0].length+1))+s;e.updateCode(l+n);const a=l.length;e.restore({start:a,end:a,dir:undefined})}else{a=autoCorrections[l];if(!a){if(l.charAt(0)==="^"){a=superscript(l)}else{if(l.indexOf(" ")>0){a=accentedChar(l)}}}}if(a){const l=t.slice(0,-r[0].length)+a;e.updateCode(l+n);const s=l.length;e.restore({start:s,end:s,dir:undefined})}}}};const allZeros=Object.freeze([0,0,0,0,0,0,0,0]);const dt=Object.freeze({NULL:0,RATIONAL:1,COMPLEX:2,BOOLEAN:4,FROMCOMPARISON:8,BOOLEANFROMCOMPARISON:12,STRING:16,QUANTITY:32,DATE:64,RANGE:128,TUPLE:256,MAP:512,ROWVECTOR:1024,COLUMNVECTOR:2048,MATRIX:4096,DATAFRAME:8192,MODULE:16384,ERROR:32768,UNIT:65536,DRAWING:131072,RICHTEXT:262144});const isIn=(e,t)=>{if(t.length===0){return false}let n=0;let r=0;let l=t.length-1;while(r<l){n=Math.floor((r+l)/2);if(e>t[n]){r=n+1}else{l=n}}return e===t[r]};const clone=e=>{if(null==e||"object"!=typeof e){return e}if(e instanceof Date){return(new Date).setTime(e.valueOf())}if(Array.isArray(e)){const t=[];for(let n=0,r=e.length;n<r;n++){t[n]=clone(e[n])}return t}if(e instanceof Map){const t=new Map;for(const[n,r]of e.entries()){t.set(n,clone(r))}return t}if(typeof e==="object"){const t=Object.create(null);Object.entries(e).forEach((([e,n])=>{t[e]=clone(n)}));return t}throw new Error("Unable to clone obj! Its type isn't supported.")};const mapMap=(e,t)=>{const n=new Map;for(const[r,l]of e.entries()){n.set(r,t(l))}return n};const arrayOfRegExMatches=(e,t)=>{if(e.constructor!==RegExp){throw new Error("not RegExp")}const n=[];let r=null;if(e.global){while(r=e.exec(t)){n.push({value:r[0],index:r.index,length:r[0].length})}}else if(r=e.exec(t)){n.push({value:r[0],index:r.index,length:r[0].length})}return n};const textAccent={"̀":"`","́":"'","̂":"^","̃":"~","̄":"=","̅":"=","̆":"u","̇":".","̈":'"',"̊":"r","̌":"v"};const escapeRegEx=/[#$&%_~^]/g;const accentRegEx=/[\u0300-\u0308\u030A\u030c]/g;const addTextEscapes=e=>{if(e.length>1){let t=arrayOfRegExMatches(escapeRegEx,e);let n=t.length;if(n>0){for(let r=n-1;r>=0;r--){const n=t[r];const l=n.index;if(n.value==="~"){e=e.slice(0,l)+"\\textasciitilde "+e.slice(l+1)}else if(n.value==="^"){e=e.slice(0,l)+"\\textasciicircum "+e.slice(l+1)}else if(l===0){e="\\"+e}else{const t=e.substr(l-1,1);if(t!=="\\"){e=e.slice(0,l)+"\\"+e.slice(l)}}}}t=arrayOfRegExMatches(accentRegEx,e);n=t.length;if(n>0){for(let r=n-1;r>=0;r--){const n=t[r];const l=n.index;if(l>0){e=e.slice(0,l-1)+"\\"+textAccent[n.value]+e.slice(l-1,l)+e.slice(l+1)}}}}return e};const numeralFromSuperScript=e=>{switch(e){case"²":return"2";case"³":return"3";case"⁻":return"-";case"¹":return"1";case"⁰":return"0";default:return String.fromCharCode(e.charCodeAt(0)-8256)}};const leadingSpaceRegEx=/^[ \r\n\f]+/;const trailingSpaceRegEx=/[ \r\n\f]+$/;const tablessTrim=e=>e.replace(leadingSpaceRegEx,"").replace(trailingSpaceRegEx,"");const midDotRegEx=/^(\*|·|\.|-[A-Za-z])/;const exponentRegEx=/[⁰¹²³\u2074-\u2079⁻]/;const unitTeXFromString=e=>{let t=" {\\text{";let n=false;for(let r=0;r<e.length;r++){let l=e.charAt(r);if(exponentRegEx.test(l)){l=numeralFromSuperScript(l)}if(midDotRegEx.test(e.slice(r))){t+="}\\mkern1mu{\\cdot}\\mkern1mu\\text{"}else if(/[0-9-]/.test(l)){l=l==="-"?"\\text{-}":l;if(n){t+=l}else{t+="}^{"+l;n=true}}else if(l==="^"){t+="}^{";n=true}else if(n){t+="}\\text{"+l;n=false}else if(l==="$"){t+="\\$"}else{t+=l}}return t+"}}"};const errorMessages=Object.freeze({EN:{ERROR:"Error. Hurmet does not understand the expression.",ERR_FUNC:"@",BAD_FUN_NM:'Error. Unrecognized function name "@".',DIV:"Error. Divide by zero.",NAN:"Error. Value of $@$ is not a numeric.",NANARG:"Error. Argument to function $@$ must be numeric.",NULL:"Error. Missing value for $@$.",V_NAME:"Error. Variable $@$ not found.",F_NAME:"Error. Function @ not found.",NAN_OP:"Error. Arithmetic operation on a non-numeric value.",UNIT_ADD:"Error. Adding incompatible units.",UNIT_COMP:"Error. Comparing incompatible units.",UNIT_APEND:"Error. Apppending incompatible units.",UNIT_RES:"Error. Calculated units are not compatible with the desired result unit:",UNIT_MISS:"Error. No units specified for the result.",UNIT_IN:"Error. Incorrect unit for input to function @.",UNIT_ARG:"Error. Unit mis-match between arguments to function @.",UNIT_COL:"Error. Data frame column @ has no units. Do not make a unit-aware call to it.",UNIT_AWARE:"Error. Calculation must be unit-aware in order to apply unit @",DATE:"Error. Date required.",LOGIC:"Error. Logic operation “@” on a non-boolean value.",FACT:"Error. Factorial may be applied only to a unit-less non-negative integer.",PER:"Error. Percentage may be applied only to a unit-less number.",BINOM:"Error. Binomial may be applied only to unit-less numbers.",LOGF:"Error. Argument to log!() must be a non-negative integer.","Γ0":"Error. Γ(0) is infinite.","ΓPOLE":"Error. Γ() of a negative integer is infinite.","LOGΓ":"Error. Argument to Hurmet logΓ() must be a positive number.",TAN90:"Error. tan($@$) is infinite.",ATRIG:"Error. Input to @ must be between -1 and 1.",COT:"Error. Input to @ must not be zero.",ASEC:"Error. Absolute value of input to @ must be ≥ 1",STRING:"Error. Text operand required.",NUMARGS:"Error. Wrong number of arguments passed to function @.",NONSQUARE:"Error. Only a square matrix can be inverted.",SINGULAR:"Error. Matrix is singular and cannot be inverted.",BAD_ROW_NAME:"Error. Data frame does not have a row named @.",BAD_COLUMN_NAME:"Error. Data frame does not have a column named @.",SINGLE_ARG:"Error. A call to a data frame must have two arguments in the brackets.",BAD_TYPE:"Error. Unrecognized data type for $@$.",CONCAT:'Error. Cannot add strings. Use "&" if concatenation is desired.',MATRIX_DIV:"Error. Cannot divide one matrix by another.",MATRIX_MOD:"Error. Cannot take the modulo of one matrix by another.",BAD_INDEX:"Error. Index to a matrix must be numeric.",FUNC_LINE:"Error in function @.",BAD_BREAK:"Error in function @. break called outside of a loop",FETCH:"Error. A fetch() function must be the only item in its expression.",STR_INDEX:"Error. The index to text may be only a real number or a range.",UNIT_NAME:"Error. Unrecognized unit name: @",INT_NUM:'Error. Number display type "@" must be an integer.',TWO_MAPS:"Error. Both operands are maps. Hurmet accepts only one.",BAD_FORMAT:"Error. Invalid format @.",BAD_PREC:"Error. Significant digit specification must be between 1 and 15.",ZERO_ROOT:"Error. Zeroth root.",BAD_ROOT:"Error while taking root.",UNREAL:'Error. Argument to function "@" must be a real number.',BIGINDEX:"Error. Index too large.",MIS_ELNUM:"Error. Mis-matched number of elements",CROSS:"Error. Cross product can be performed only on three-vectors. Use * if you want element-wise multiplication.",QUANT_NUM:"Error. A Quantity must include a numeric magnitude.",CURRENCY:"Error. Currency exchange rates must be defined before using a monetary unit.",DF_UNIT:'Invalid unit "&" in data frame.',FORM_FRAC:"Error. Hurmet can do binary or hexadecimal format only on integers.",PRIVATE:"Error. Function @ is not private.",GCD:"Error. The gcd function can take only integers as arguments.",BAD_KEY:'Error. Data structure does not contain key "@".',NUM_KEY:"Error. A key must be a string, not a number.",IMMUT_UDF:`Error. Variable @ already contains a user-defined function.\n                Hurmet cannot assign a different value to @.`,NO_PROP:`Error. Cannot call a property from variable "@" because it has no properties.`,NOT_ARRAY:`Error. Cannot check if an element is in the second operand because\n the second operand is not an array.`,MULT_MIS:"Error. Mismatch in number of multiple assignment.",COUNT:"Error. The count() function works only on strings.",NOT_VECTOR:"Error. Arguments to dataframe() must be vectors.",BAD_DISPLAY:"Error. Result may not be suppressed. Use '?' display selector.",NA_COMPL_OP:'Error. "@" cannot be performed on a complex number.',NA_REAL:'Error. "@" can be performed only a complex number.',ORIGIN:'Error. Function "@" is undefined at the origin.',LOG_ZERO:"Error. Logarithm of zero is negative infinity.",END_MISS:"Error. Too few END statments in function @.",BAD_CONCAT:"Error. Unmatched dimensions.",BAD_KEYSTR:"Error. The key in a key:value pair must be a string.",BAD_APPEND:"Error. Can not append a @",MAP_APPEND:"Error. Can not append. Wrong data type.",BAD_J:"Error. Do not use j for a loop index. In Hurmet, j = √(-1)"}});const errorOprnd=(e,t)=>{if(e===""){return{value:"Error",unit:null,dtype:dt.ERROR}}let n=errorMessages["EN"][e];if(n===undefined){return{value:"Error",unit:null,dtype:dt.ERROR}}if(t){t=addTextEscapes(t);n=n.replace(/@/g,t)}else{n=n.replace(/@ ?/,"")}return{value:n,unit:null,dtype:dt.ERROR}};const iZero=BigInt(0);const iOne=BigInt(1);const iTwo=BigInt(2);const zero=[iZero,iOne];const one=[iOne,iOne];const two=[iTwo,iOne];const pi$1=[BigInt(3141592653589793e34),BigInt(1e49)];const e$1=[BigInt(2718281828459045e42),BigInt(1e57)];const hbar=[BigInt(1054571817),BigInt(1e43)];const intAbs=e=>e>=iZero?e:BigInt(-1)*e;const numberPattern="^(-?)(?:(0x[0-9A-Fa-f]+)|([0-9]+)(?: ([0-9]+)\\/([0-9]+)|(?:\\.([0-9]+))?(?:e([+-]?[0-9]+)|(%))?))";const numberRegEx=new RegExp(numberPattern);const fromNumber=e=>{if(Number.isInteger(e)){return[BigInt(e),iOne]}else{const t=e.toExponential().match(numberRegEx);const n=t[6]||"";const r=BigInt(t[7])-BigInt(n.length);if(r<0){return[BigInt(t[1]+t[3]+n),BigInt(10)**-r]}else if(t[5]){const e=BigInt(t[5]);return normalize([BigInt(t[1]+t[3])*e+BigInt(t[4])])}else{return normalize([BigInt(t[1]+t[3]+n)*BigInt(10)**r,iOne])}}};const fromString=e=>{const t=e.match(numberRegEx);let n;if(t[5]){const e=BigInt(t[5]);const r=BigInt(t[1]+t[3])*e+BigInt(t[4]);n=normalize([r,e])}else if(t[2]){n=[BigInt(t[2]),iOne]}else{const e=t[6]||"";const r=BigInt(t[3]+e);const l=t[7]?BigInt(t[7])-BigInt(e.length):t[8]?BigInt(-2)-BigInt(e.length):BigInt(0)-BigInt(e.length);n=l<0?[r,BigInt(10)**-l]:normalize([r*BigInt(10)**l,iOne])}if(t[1]){n=negate(n)}return n};const gcdi=(e,t)=>{e=intAbs(e);t=intAbs(t);while(t!==iZero){const n=e%t;e=t;t=n}return e};const gcd=(e,t)=>{if(!Rnl.isInteger(e)||!Rnl.isInteger(t)){return errorOprnd("GCD")}return[gcdi(e[0]/e[1],t[0]/t[1]),iOne]};const normalize=e=>{const[t,n]=e;if(n===iOne){return e}const r=gcdi(t,n);return r===iOne?e:[t/r,n/r]};const isRational=e=>Array.isArray(e)&&e.length===2&&typeof e[0]==="bigint"&&typeof e[1]==="bigint";const isInteger=e=>e[1]===iOne||e[0]%e[1]===iZero;const isZero=e=>e[0]===iZero;const isNegative=e=>e[0]<iZero;const isPositive=e=>e[0]>iZero;const negate=e=>[BigInt(-1)*e[0],e[1]];const abs=e=>{const t=e[0]<iZero?BigInt(-1)*e[0]:e[0];return[t,e[1]]};const increment=e=>[e[0]+e[1],e[1]];const decrement=e=>[e[0]-e[1],e[1]];const floor=e=>{if(e[0]%e[1]===iZero){return[e[0]/e[1],iOne]}return e[0]>=iZero?[e[0]/e[1],iOne]:[e[0]/e[1]-iOne,iOne]};const ceil=e=>{if(e[0]%e[1]===iZero){return[e[0]/e[1],iOne]}return e[0]>=iZero?[e[0]/e[1]+iOne,iOne]:[e[0]/e[1],iOne]};const add=(e,t)=>e[1]===t[1]?[e[0]+t[0],e[1]]:normalize([e[0]*t[1]+t[0]*e[1],e[1]*t[1]]);const subtract=(e,t)=>e[1]===t[1]?[e[0]-t[0],e[1]]:normalize([e[0]*t[1]-t[0]*e[1],e[1]*t[1]]);const multiply=(e,t)=>[e[0]*t[0],e[1]*t[1]];const divide=(e,t)=>{let n=e[0]*t[1];let r=e[1]*t[0];if(r<0){n*=BigInt(-1);r*=BigInt(-1)}return[n,r]};const power=(e,t)=>{if(t[0]===iZero){return[iOne,iOne]}else{t=normalize(t);let n;try{n=isInteger(t)&&isNegative(t)?[e[1]**(BigInt(-1)*t[0]),e[0]**(BigInt(-1)*t[0])]:isInteger(t)?[e[0]**t[0],e[1]**t[0]]:isPositive(e)||greaterThan(t,one)||lessThan(t,negate(one))?fromNumber(toNumber(e)**toNumber(t)):areEqual(modulo(t,two),one)?fromNumber(-1*(-1*toNumber(e))**toNumber(t)):errorOprnd("BAD_ROOT")}catch(r){n=fromNumber(toNumber(e)**toNumber(t))}return n}};const sqrt=e=>fromNumber(Math.sqrt(toNumber(e)));const exp=e=>fromNumber(Math.exp(toNumber(e)));const reciprocal=e=>{let t=e[1];let n=e[0];if(n<0){t*=BigInt(-1);n*=BigInt(-1)}return[t,n]};const hypot=(e,t)=>{const n=abs(e);const r=abs(t);const l=max(n,r);const a=min(n,r);const s=Rnl.divide(a,l);return Rnl.multiply(l,sqrt(Rnl.increment(Rnl.multiply(s,s))))};const modulo=(e,t)=>{const n=divide(normalize(e),normalize(t));return[intAbs(n[0]%n[1]),iOne]};const areEqual=(e,t)=>e[1]===t[1]?e[0]===t[0]:e[0]*t[1]===e[1]*t[0];const lessThan=(e,t)=>isNegative(e)!==isNegative(t)?isNegative(e):isNegative(subtract(e,t));const greaterThan=(e,t)=>isPositive(e)!==isPositive(t)?isPositive(e):isPositive(subtract(e,t));const lessThanOrEqualTo=(e,t)=>lessThan(e,t)||areEqual(e,t);const greaterThanOrEqualTo=(e,t)=>greaterThan(e,t)||areEqual(e,t);const max=(e,t)=>greaterThan(e,t)?[e[0],e[1]]:[t[0],t[1]];const min=(e,t)=>lessThan(e,t)?[e[0],e[1]]:[t[0],t[1]];const cos=e=>areEqual(e,divide(pi$1,two))?zero:fromNumber(Math.cos(toNumber(e)));const sin=e=>fromNumber(Math.sin(toNumber(e)));const tan=e=>{if(areEqual(e,divide(pi$1,two))){return errorOprnd("TAN90","π/2")}return fromNumber(Math.tan(toNumber(e)))};const cosh=e=>{const t=toNumber(e);return fromNumber((Math.exp(t)+Math.exp(-t))/2)};const sinh=e=>{const t=toNumber(e);return fromNumber((Math.exp(t)-Math.exp(-t))/2)};const tanh=e=>{const t=toNumber(e);return fromNumber((Math.exp(t)-Math.exp(-t))/(Math.exp(t)+Math.exp(-t)))};const toNumber=e=>{const t=Number(e[0])/Number(e[1]);if(!isNaN(t)&&t!==Infinity){return t}const n=toStringSignificant(e,20);return Number(n)};const toStringSignificant=(e,t)=>{if(isZero(e)){return"0"}else{const n=intAbs(e[0]/e[1]);if(n>0){return toString(e,t-String(n).length)}else{const n=String(intAbs(e[1]/e[0])).length;return toString(e,n+t-1)}}};const toString=(e,t)=>{if(isZero(e)){return"0"}else if(t<0){const n=-t;const r=toString(divide(e,[BigInt(10)**BigInt(n),iOne]),0);return r+"0".repeat(n)}else{const[n,r]=normalize(e);const l=n/r;let a=n%r;let s=String(l);if(a===iZero&&t>0){s+="."+"0".repeat(t)}else if(a!==iZero){a=intAbs(a);const e=a*BigInt(10)**BigInt(t);let n=e/r;const o=e%r;if(t===0){return intAbs(iTwo*o)>=intAbs(r)?String(l+iOne):s}if(intAbs(iTwo*o)>=intAbs(r)){n=n+iOne}s+="."+String(n).padStart(t,"0")}return s}};const preComputedFactorials=["1","1","2","6","24","120","720","5040","40320","362880","3628800","39916800","479001600","6227020800","87178291200","1307674368000","20922789888000","355687428096000","6402373705728000","121645100408832000","2432902008176640000","51090942171709440000","1124000727777607680000","25852016738884976640000","620448401733239439360000","15511210043330985984000000","403291461126605635584000000","10888869450418352160768000000","304888344611713860501504000000","8841761993739701954543616000000","265252859812191058636308480000000","8222838654177922817725562880000000","263130836933693530167218012160000000","8683317618811886495518194401280000000","295232799039604140847618609643520000000","10333147966386144929666651337523200000000","371993326789901217467999448150835200000000","13763753091226345046315979581580902400000000","523022617466601111760007224100074291200000000","20397882081197443358640281739902897356800000000","815915283247897734345611269596115894272000000000","33452526613163807108170062053440751665152000000000","1405006117752879898543142606244511569936384000000000","60415263063373835637355132068513997507264512000000000","2658271574788448768043625811014615890319638528000000000","119622220865480194561963161495657715064383733760000000000","5502622159812088949850305428800254892961651752960000000000","258623241511168180642964355153611979969197632389120000000000","12413915592536072670862289047373375038521486354677760000000000","608281864034267560872252163321295376887552831379210240000000000","30414093201713378043612608166064768844377641568960512000000000000","1551118753287382280224243016469303211063259720016986112000000000000","80658175170943878571660636856403766975289505440883277824000000000000","4274883284060025564298013753389399649690343788366813724672000000000000","230843697339241380472092742683027581083278564571807941132288000000000000","12696403353658275925965100847566516959580321051449436762275840000000000000","710998587804863451854045647463724949736497978881168458687447040000000000000","40526919504877216755680601905432322134980384796226602145184481280000000000000","2350561331282878571829474910515074683828862318181142924420699914240000000000000","138683118545689835737939019720389406345902876772687432540821294940160000000000000","8320987112741390144276341183223364380754172606361245952449277696409600000000000000","507580213877224798800856812176625227226004528988036003099405939480985600000000000000","31469973260387937525653122354950764088012280797258232192163168247821107200000000000000","1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000","126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000","8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000","544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000","36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000","2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000","171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000","11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000","850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000","61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000","4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000","330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000","24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000","1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000","145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000","11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000","894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000","71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000","5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000","475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000","39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000","3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000","281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000","24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000","2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000","185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000","16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000","1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000","135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000","12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000","1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000","108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000","10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000","991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000","96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000","9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000","933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000","93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"];const factorial=e=>{if(lessThan(e,[BigInt(101),iOne])){return fromString(preComputedFactorials[toNumber(e)])}else{return lanczos(increment(e))}};const lanczos=e=>{const t=subtract(e,one);const n=multiply(two,sqrt(divide(e$1,pi$1)));const r=power(divide(add(t,fromNumber(11.400511)),e$1),add(t,[iOne,iTwo]));const l=["2.48574089138753565546e-5","1.05142378581721974210","-3.45687097222016235469","4.51227709466894823700","-2.98285225323576655721","1.05639711577126713077","-0.195428773191645869583","0.0170970543404441224307","-0.000571926117404305781283","0.00000463399473359905636708","-0.00000000271994908488607703910"];let a=fromString(l[0]);for(let e=1;e<=10;e++){a=add(a,divide(fromString(l[e]),add(t,fromNumber(e))))}return multiply(multiply(n,r),a)};const Rnl=Object.freeze({fromNumber:fromNumber,fromString:fromString,normalize:normalize,isRational:isRational,isInteger:isInteger,isZero:isZero,isNegative:isNegative,isPositive:isPositive,negate:negate,abs:abs,increment:increment,decrement:decrement,exp:exp,floor:floor,ceil:ceil,add:add,subtract:subtract,multiply:multiply,divide:divide,reciprocal:reciprocal,gcd:gcd,hbar:hbar,modulo:modulo,hypot:hypot,one:one,pi:pi$1,power:power,sqrt:sqrt,two:two,cos:cos,sin:sin,tan:tan,cosh:cosh,sinh:sinh,tanh:tanh,areEqual:areEqual,lessThan:lessThan,greaterThan:greaterThan,lessThanOrEqualTo:lessThanOrEqualTo,greaterThanOrEqualTo:greaterThanOrEqualTo,factorial:factorial,lanczos:lanczos,max:max,min:min,numberPattern:numberPattern,toNumber:toNumber,toString:toString,toStringSignificant:toStringSignificant,zero:zero});const siPrefixes=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];const groupByThreeRegEx=/\B(?=(\d{3})+$)/g;const groupByFourRegEx=/\B(?=(\d{4})+$)/g;const groupByLakhCroreRegEx=/(\d)(?=(\d\d)+\d$)/g;const formatRegEx=/^([beEfhkmprsStx%])?(-?[\d]+)?([j∠°])?$/;const superscript$1=e=>{let t="";for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);t+=r===49?"¹":r===50?"²":r===51?"³":String.fromCharCode(r+8256)}return t};const subscript=e=>{let t="";for(let n=0;n<e.length;n++){t+=String.fromCharCode(e.charCodeAt(n)+8272)}return t};const texFromMixedFraction=e=>(e[1]?"-":"")+e[3]+"\\,\\class{special-fraction}{\\text{"+superscript$1(e[4])+"⁄"+subscript(e[5])+"}}";const intAbs$1=e=>e>=BigInt(0)?e:BigInt(-1)*e;const roundedString=(e,t)=>{const n=t.numDigits;switch(t.ftype){case"h":{const t=String(Rnl.toString(e,0));if(t.replace("-","").length>=n){return t}if(n<1||n>15){return errorOprnd("BAD_PREC")}return Rnl.toNumber(e).toPrecision(n)}case"f":case"%":return Rnl.toString(e,n);case"r":case"p":{if(n<1||n>15){return errorOprnd("BAD_PREC")}const t=Rnl.toNumber(e).toPrecision(n);return t.indexOf("e")>-1?Number(t).toPrecision():t}case"s":case"S":case"e":case"E":case"n":case"N":case"k":if(n<1||n>15){return errorOprnd("BAD_PREC")}return Rnl.toNumber(e).toExponential(n-1).replace("+","");default:{e=Rnl.normalize(e);const n=Rnl.isNegative(e)?"-":"";const r=intAbs$1(e[0]);const l=e[1];switch(t.ftype){case"m":{const e=String(r/l);const t=r%l;return n+e+" "+superscript$1(t)+"⁄"+subscript(l)}case"t":return n+String(r/l);case"b":case"x":case"X":if(l!==BigInt(1)){return errorOprnd("INT_NUM",t.ftype)}if(r<=Number.MAX_SAFE_INTEGER){return t.ftype==="b"?n+"0b"+Number(r).toString(2):t.ftype==="x"?n+"0x"+Number(r).toString(16):n+"0x"+Number(r).toString(16).toUpperCase()}else{return""}}}}};const formattedInteger=(e,t)=>{const n=t.charAt(1);if(n==="0"){return e}else if(t==="1,00,000."){return e.replace(groupByLakhCroreRegEx,"$1{,}")}else if(t==="1,0000,0000."){return e.replace(groupByFourRegEx,"$1{,}")}else{return e.replace(groupByThreeRegEx,n===","?"{,}":n===" "?"\\:":n==="’"?"’":".")}};const formattedDecimal=(e,t,n)=>{const r=e.indexOf(".");if(r===-1){return formattedInteger(e,t)}else{const l=e.slice(0,r);const a=t.slice(-1);let s=(a==="."?".":"{,}")+e.slice(r+1);if(n){s=s.replace(/(\.|{,})?0+$/,"")}return formattedInteger(l,t)+s}};const parseFormatSpec=e=>{const t=formatRegEx.exec(e);if(!t){const t=errorOprnd("BAD_FORMAT",e).value;return[e,undefined,dt.ERROR,"\\text{"+t+"}"]}let n=t[1]||"h";let r=Number(t[2]||"15");const l=t[3]||"";switch(n){case"b":case"x":case"X":return[e,undefined,dt.STRING,"\\text{"+n+l+"}"];case"t":r=0;break;case"f":case"%":break;default:if(r<1||r>15){const t="\\text{"+errorOprnd("BAD_PREC").value+"}";return[e,undefined,dt.ERROR,t]}}if(n==="%"){n="\\%"}return[e,undefined,dt.STRING,"\\text{"+n+String(r)+l+"}"]};const format=(e,t="h3",n="1,000,000.")=>{if(Rnl.isZero(e)){return"0"}const r={ftype:t.charAt(0)};if(/[j∠°]$/.test(t)){t=t.slice(0,-1)}if(t.length>1){r.numDigits=Number(t.slice(1))}if(r.ftype==="%"||r.ftype==="p"){e[0]=e[0]*BigInt(100)}if((r.ftype==="b"||r.ftype==="x")&&!Rnl.isInteger(e)){return errorOprnd("FORM_FRAC")}const l=roundedString(e,r);switch(r.ftype){case"f":case"r":case"h":return formattedDecimal(l,n,r.ftype==="h");case"t":return formattedInteger(l,n);case"%":case"p":return formattedDecimal(l,n)+"\\%";case"m":case"b":case"x":case"X":return l;default:{const e=l.indexOf("e");let t=l.slice(0,e);if(n.slice(-1)===","){t=t.replace(".","{,}")}switch(r.ftype){case"e":case"E":{const n=t+"\\text{"+r.ftype;if(l.charAt(e+1)==="-"){return n+"-}"+l.slice(e+2)}else{return n+"}"+l.slice(e+1)}}case"s":case"S":case"n":case"N":{const n=r.ftype==="S"?"×":"\\mkern2mu{\\cdot}\\mkern1mu";return t+n+"10^{"+l.slice(e+1)+"}"}case"k":{const n=Number(l.slice(e+1));const r=n/3;const a=r>=0?Math.floor(r):Math.ceil(r);const s=n%3;if(s!==0){t=String(Number(t)*Math.pow(10,s))}return t+siPrefixes[8+a]}}}}};const unitsAreCompatible=(e,t)=>{if(e==null&&t==null){return true}if(e==null||t==null){return false}if(!Array.isArray(e)||!Array.isArray(t)){return false}if(e.length!==t.length){return false}for(let n=0;n<e.length;++n){if(e[n]!==t[n]){return false}}return true};const prefixFactor=JSON.parse('{"Y":1e24,"yotta":1e24,"Z":1e21,"zetta":1e21,"E":1e18,"exa":1e18,"P":1e15,"peta":1e15,"T":1e12,"tera":1e12,"G":1e9,"giga":1e9,"M":1e6,"mega":1e6,"k":1000,"kilo":1000,"h":100,"hecto":100,"deka":10,"d":0.1,"deci":0.1,"c":0.01,"centi":0.01,"m":0.001,"milli":0.001,"µ":1e-6,"µ":1e-6,"micro":1e-6,"n":1e-9,"nano":1e-9,"p":1e-12,"pico":1e-12,"f":1e-15,"femto":1e-15,"a":1e-18,"atto":1e-18,"z":1e-21,"zepto":1e-21,"y":1e-24,"yocto":1e-24,"Ki":1024,"kibi":1024,"Mi":1048576,"mebi":1048576,"Gi":1073741824,"gibi":1073741824,"Ti":1099511627776,"tebi":1099511627776}');const unitTable=Object.freeze(JSON.parse(`{\n"#":["0.45359237", "1","0","0",[0,1,0,0,0,0,0,0]],\n"$":["1","1","0","USD",[0,0,0,0,0,0,0,1]],\n"£":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"'":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"A":["1","1","0","siSymbol",[0,0,0,1,0,0,0,0]],\n"AUD":["1.5553","1","0","AUD",[0,0,0,0,0,0,0,1]],\n"Adobe point":["0.0254","72","0","0",[1,0,0,0,0,0,0,0]],\n"At":["1","1","0","siSymbol",[0,0,0,0,1,0,1,0]],\n"Australian dollar":["1","1","0","AUD",[0,0,0,0,0,0,0,1]],\n"BRL":["5.5457","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"BTU":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],\n"BThU":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],\n"Bq":["1","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],\n"Brazilian Real":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"British Pound":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"Btu":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],\n"C":["1","1","0","siSymbol",[0,0,1,1,0,0,0,0]],\n"C$":["1","1","0","CAD",[0,0,0,0,0,0,0,1]],\n"CAD":["1.4380","1","0","CAD",[0,0,0,0,0,0,0,1]],\n"CCF":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"CHF":["0.9856","1","0","CHF",[0,0,0,0,0,0,0,1]],\n"CNY":["7.3475","1","0","CNY",[0,0,0,0,0,0,0,1]],\n"CY":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],\n"Calorie":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],\n"Canadian dollar":["1","1","0","CAD",[0,0,0,0,0,0,0,1]],\n"Celsius":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],\n"Chinese Yuan":["1","1","0","CNY",[0,0,0,0,0,0,0,1]],\n"Ci":["37000000000","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],\n"Ckm":["100000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"Da":["1.66053872e-24","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"Dalton":["1.66053872e-24","1","0","0",[0,1,0,0,0,0,0,0]],\n"Didot point":["15.625","41559","0","0",[1,0,0,0,0,0,0,0]],\n"EB":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"EMU":["0.01","360000","0","0",[1,0,0,0,0,0,0,0]],\n"EUR":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"EiB":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"Euro":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"F":["1","1","0","siSymbol",[-2,-1,4,2,0,0,0,0]],\n"Fahrenheit":["5","9","459","0",[0,0,0,0,1,0,0,0]],\n"G":["0.0001","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"GB":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],\n"GBP":["0.85950","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"Gal":["0.01","1","0","siSymbol",[1,0,-2,0,0,0,0,0]],\n"Gi":["10","12.5663706143592","0","siWord",[0,0,0,0,1,0,1,0]],\n"GiB":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],\n"Gregorian year":["31556952","1","0","0",[0,0,1,0,0,0,0,0]],\n"Gy":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"H":["1","1","0","siSymbol",[2,1,-2,-2,0,0,0,0]],\n"HK$":["1","1","0","HKD",[0,0,0,0,0,0,0,1]],\n"HKD":["8.2169","1","0","HKD",[0,0,0,0,0,0,0,1]],\n"HP":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"Hong Kong dollar":["1","1","0","HKD",[0,0,0,0,0,0,0,1]],\n"Hz":["1","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],\n"ILS":["3.6128","1","0","ILS",[0,0,0,0,0,0,0,1]],\n"INR":["86.9535","1","0","INR",[0,0,0,0,0,0,0,1]],\n"Indian Rupee":["1","1","0","INR",[0,0,0,0,0,0,0,1]],\n"Israeli New Shekel":["1","1","0","ILS",[0,0,0,0,0,0,0,1]],\n"J":["1","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],\n"JPY":["143.30","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"Japanese Yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"Joule":["1","1","0","0",[2,1,-2,0,0,0,0,0]],\n"Julian year":["31557600","1","0","0",[0,0,1,0,0,0,0,0]],\n"Jy":["1e-26","1","0","siSymbol",[0,1,-2,0,0,0,0,0]],\n"K":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"KiB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"KRW":["1373.94","1","0","KRW",[0,0,0,0,0,0,0,1]],\n"L":["0.001","1","0","siSymbol",[3,0,0,0,0,0,0,0]],\n"Lego stud":["0.008","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"MB":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],\n"MCM":["5.06707479097497e-07","1","0","0",[2,0,0,0,0,0,0,0]],\n"MMBtu":["1055056000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"MMbbl":["158987.294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"MMbblpd":["158987.294928","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"MMscf":["28316.846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"MMscfd":["0.32774128","1","0","0",[3,0,0,0,0,0,0,0]],\n"MT":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"MXN":["20.8490","1","0","MXN",[0,0,0,0,0,0,0,1]],\n"Mach":["331.6","1","0","0",[1,0,-1,0,0,0,0,0]],\n"Mbbl":["158.987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"Mexican Peso":["1","1","0","MXN",[0,0,0,0,0,0,0,1]],\n"MiB":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],\n"Mscfd":["0.00032774128","1","0","0",[3,0,0,0,0,0,0,0]],\n"Mscfh":["0.00786579072","1","0","0",[3,0,0,0,0,0,0,0]],\n"N":["1","1","0","siSymbol",[1,1,-2,0,0,0,0,0]],\n"NM":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"PB":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"PS":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"Pa":["1","1","0","siSymbol",[-1,1,-2,0,0,0,0,0]],\n"Pascal":["1","1","0","siWord",[-1,1,-2,0,0,0,0,0]],\n"Pferdestärke":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"PiB":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"R":["0.000258","1","0","siSymbol",[0,-1,1,1,0,0,0,0]],\n"R$":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"RT":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],\n"RUB":["1","1","0","RUB",[0,0,0,0,0,0,0,1]],\n"S":["1","1","0","siSymbol",[-2,-1,3,2,0,0,0,0]],\n"SF":["0.09290304","1","0","0",[2,0,0,0,0,0,0,0]],\n"SY":["0.83612736","1","0","0",[2,0,0,0,0,0,0,0]],\n"Sv":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"Swiss Franc":["1","1","0","CHF",[0,0,0,0,0,0,0,1]],\n"T":["1","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"TB":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"TWD":["1","1","0","TWD",[0,0,0,0,0,0,0,1]],\n"TeX point":["0.0003515","1","0","0",[1,0,0,0,0,0,0,0]],\n"TiB":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"US$":["1","1","0","USD",[0,0,0,0,0,0,0,1]],\n"USD":["1.0559","1","0","USD",[0,0,0,0,0,0,0,1]],\n"V":["1","1","0","siSymbol",[2,1,-3,-1,0,0,0,0]],\n"VA":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],\n"W":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],\n"Wb":["1","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],\n"Wh":["3600","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],\n"Won":["1","1","0","KRW",[0,0,0,0,0,0,0,1]],\n"Yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"a":["31556925.9747","1","0","siSymbol",[0,0,1,0,0,0,0,0]],\n"ac":["4046.8564224","1","0","0",[2,0,0,0,0,0,0,0]],\n"acre":["4046.8564224","1","0","0",[2,0,0,0,0,0,0,0]],\n"admiralty mile":["1853.188","1","0","0",[1,0,0,0,0,0,0,0]],\n"af":["1233.48183754752","1","0","0",[3,0,0,0,0,0,0,0]],\n"amp":["1","1","0","0",[0,0,0,1,0,0,0,0]],\n"ampere":["1","1","0","siWord",[0,0,0,1,0,0,0,0]],\n"ampere turn":["1","1","0","siWord",[0,0,0,0,1,0,1,0]],\n"amu":["1.66053872e-24","1","0","0",[0,1,0,0,0,0,0,0]],\n"angstrom":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0]],\n"angstrom star":["0.00000000010000015","1","0","0",[1,0,0,0,0,0,0,0]],\n"apostilb":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"arcminute":["3.14159265358979","10800","0","0",[0,0,0,0,0,0,0,0]],\n"arcsecond":["3.14159265358979","648000","0","0",[0,0,0,0,0,0,0,0]],\n"are":["100","1","0","0",[2,0,0,0,0,0,0,0]],\n"as":["4.3.14159265358979","648000","0","0",[0,0,0,0,0,0,0,0]],\n"asb":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"assay ton":["0.0875","3","0","0",[0,1,0,0,0,0,0,0]],\n"astronomical unit":["149597870691","1","0","0",[1,0,0,0,0,0,0,0]],\n"atmosphere":["101325","1","0","siSymbol",[-1,1,-2,0,0,0,0,0]],\n"au":["149597870691","1","0","0",[1,0,0,0,0,0,0,0]],\n"bar":["100000","1","0","siWord",[-1,1,-2,0,0,0,0,0]],\n"barg":["100000","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"barleycorn":["0.0254","3","0","0",[1,0,0,0,0,0,0,0]],\n"barrel":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"barrel bulk":["0.14158423296","1","0","0",[3,0,0,0,0,0,0,0]],\n"basis point":["0.0001","1","0","0",[0,0,0,0,0,0,0,0]],\n"baud":["1","1","0","siSymbol",[0,0,-1,0,0,1,0,0]],\n"bbl":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"becquerel":["1","1","0","siWord",[0,0,-1,0,0,0,0,0]],\n"beer barrel":["0.119240471196","1","0","0",[3,0,0,0,0,0,0,0]],\n"bit":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"blink":["0.864","1","0","0",[0,0,1,0,0,0,0,0]],\n"bo":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"boe":["6119000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"boiler horsepower":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],\n"bpd":["0.158987294928","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"bph":["0.158987294928","3600","0","0",[3,0,-1,0,0,0,0,0]],\n"breadth":["0.2286","1","0","0",[1,0,0,0,0,0,0,0]],\n"bushel":["0.03523907016688","1","0","0",[3,0,0,0,0,0,0,0]],\n"byte":["8","1","0","0",[0,0,0,0,0,1,0,0]],\n"caballo de vapor":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"cal":["4.1868","1","0","0",[2,1,-2,0,0,0,0,0]],\n"calorie":["4.1868","1","0","siWord",[2,1,-2,0,0,0,0,0]],\n"candela":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"candlepower":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"carat":["0.00002","1","0","0",[0,1,0,0,0,0,0,0]],\n"cc":["0.000001","1","0","0",[3,0,0,0,0,0,0,0]],\n"cd":["1","1","0","siSymbol",[0,0,0,0,0,0,1,0]],\n"centipoise":["0.001","1","0","0",[-1,1,-1,0,0,0,0,0]],\n"centistoke":["0.000001","1","0","0",[2,0,-1,0,0,0,0,0]],\n"cfm":["0.0004719474432","1","0","0",[3,0,-1,0,0,0,0,0]],\n"cfs":["0.028316846592","1","0","0",[3,0,-1,0,0,0,0,0]],\n"ch":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"chain":["20.116","1","0","0",[1,0,0,0,0,0,0,0]],\n"cheval vapeur":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"cmil":["5.06707479097497e-10","1","0","0",[2,0,0,0,0,0,0,0]],\n"cmm":["0.00001","1","0","0",[1,0,0,0,0,0,0,0]],\n"constant":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"coulomb":["1","1","0","siWord",[0,0,1,1,0,0,0,0]],\n"cp":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"cps":["1","1","0","0",[0,0,-1,0,0,0,0,0]],\n"cu ft":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"cu in":["0.000016387064","1","0","0",[3,0,0,0,0,0,0,0]],\n"cu yd":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],\n"cubic meter":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"cubic metre":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"cup":["0.0002365882365","1","0","0",[3,0,0,0,0,0,0,0]],\n"curie":["37000000000","1","0","siWord",[0,0,-1,0,0,0,0,0]],\n"cv":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"cy":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],\n"d":["86400","1","0","0",[0,0,1,0,0,0,0,0]],\n"daN":["10","1","0","0",[1,1,-2,0,0,0,0,0]],\n"darcy":["0.0000000000009869233","1","0","0",[2,0,0,0,0,0,0,0]],\n"day":["86400","1","0","0",[0,0,1,0,0,0,0,0]],\n"deg":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"degree":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"dekan":["31.4159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"diopter":["1","1","0","0",[-1,0,0,0,0,0,0,0]],\n"dioptre":["1","1","0","0",[-1,0,0,0,0,0,0,0]],\n"dollar":["1","1","0","USD",[0,0,0,0,0,0,0,1]],\n"drum":["0.20819764812","1","0","0",[3,0,0,0,0,0,0,0]],\n"dscf":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"dyn":["0.00001","1","0","0",[1,1,-2,0,0,0,0,0]],\n"dyne":["0.00001","1","0","0",[1,1,-2,0,0,0,0,0]],\n"eV":["1.602176462e-19","1","0","0",[2,1,-2,0,0,0,0,0]],\n"electric horsepower":["746","1","0","0",[2,1,-3,0,0,0,0,0]],\n"electrical horsepower":["746","1","0","0",[2,1,-3,0,0,0,0,0]],\n"electron volt":["1.602176462e-19","1","0","0",[2,1,-2,0,0,0,0,0]],\n"erg":["0.0000001","1","0","0",[2,1,-2,0,0,0,0,0]],\n"euro":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"exabyte":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"exbibyte":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"farad":["1","1","0","siWord",[-2,-1,4,2,0,0,0,0]],\n"faraday":["96485.339924","1","0","0",[0,0,1,1,0,0,0,0]],\n"fathom":["1.8288","1","0","0",[1,0,0,0,0,0,0,0]],\n"fc":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],\n"feet":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"fermi":["0.000000000000001","1","0","siWord",[1,0,0,0,0,0,0,0]],\n"fl oz":["0.003785411784","128","0","0",[3,0,0,0,0,0,0,0]],\n"flop":["1","1","0","0",[0,0,-1,0,0,0,0,0]],\n"fluid ounce":["0.003785411784","128","0","0",[3,0,0,0,0,0,0,0]],\n"food calorie":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],\n"foot":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"footcandle":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],\n"footlambert":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"fortnight":["1209600","1","0","0",[0,0,1,0,0,0,0,0]],\n"fps":["0.3048","1","0","0",[1,0,-1,0,0,0,0,0]],\n"franklin":["0.00000000033356","1","0","siWord",[0,0,1,1,0,0,0,0]],\n"ft":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"ft water":["2988.874","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"ftc":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],\n"ftl":["3.426259","1","0","0",[-2,0,0,0,0,0,1,0]],\n"furlong":["201.168","1","0","0",[1,0,0,0,0,0,0,0]],\n"g":["0.001","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"gal":["0.003785411784","1","0","0",[3,0,0,0,0,0,0,0]],\n"galileo":["0.01","1","0","siWord",[1,0,-2,0,0,0,0,0]],\n"gallon":["0.003785411784","1","0","0",[3,0,0,0,0,0,0,0]],\n"gauss":["0.0001","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"gigabyte":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],\n"gilbert":["10","12.5663706143592","0","siWord",[0,0,0,0,1,0,1,0]],\n"gill":["0.003785411784","32","0","0",[3,0,0,0,0,0,0,0]],\n"gon":["3.14159265358979","200","0","0",[0,0,0,0,0,0,0,0]],\n"gongjin":["1","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"gongli":["1000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"gpd":["0.003785411784","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"gph":["0.003785411784","3600","0","0",[3,0,-1,0,0,0,0,0]],\n"gpm":["0.003785411784","60","0","0",[3,0,-1,0,0,0,0,0]],\n"gps":["0.003785411784","1","0","0",[3,0,-1,0,0,0,0,0]],\n"gr":["0.00006479891","1","0","0",[0,1,0,0,0,0,0,0]],\n"grad":["3.14159265358979","200","0","0",[0,0,0,0,0,0,0,0]],\n"grain":["0.00006479891","1","0","0",[0,1,0,0,0,0,0,0]],\n"gram":["0.001","1","0","0",[0,1,0,0,0,0,0,0]],\n"gramme":["0.001","1","0","0",[0,1,0,0,0,0,0,0]],\n"gray":["1","1","0","0",[2,0,-2,0,0,0,0,0]],\n"great year":["814000000000","1","0","0",[0,0,1,0,0,0,0,0]],\n"gsm":["0.001","1","0","0",[-2,1,0,0,0,0,0,0]],\n"gutenberg":["0.0254","7200","0","0",[1,0,0,0,0,0,0,0]],\n"gōngjin":["1","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"gōngli":["1000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"h":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"ha":["10000","1","0","siSymbol",[2,0,0,0,0,0,0,0]],\n"hand":["0.1016","1","0","0",[1,0,0,0,0,0,0,0]],\n"hectare":["10000","1","0","siWord",[2,0,0,0,0,0,0,0]],\n"helek":["10","3","0","0",[0,0,1,0,0,0,0,0]],\n"hemisphere":["6.28318530717959","1","0","0",[0,0,0,0,0,0,0,0]],\n"henrie":["1","1","0","siWord",[2,1,-2,-2,0,0,0,0]],\n"henry":["1","1","0","siWord",[2,1,-2,-2,0,0,0,0]],\n"hertz":["1","1","0","siWord",[0,0,-1,0,0,0,0,0]],\n"hk":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"horsepower":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hour":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"hp":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpE":["746","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpI":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpM":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpS":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hr":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"in":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"in Hg":["3863.8","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"inch":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"inche":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"jansky":["1e-26","1","0","0",[0,1,-2,0,0,0,0,0]],\n"jar":["1","900000000","0","0",[-2,-1,4,2,0,0,0,0]],\n"joule":["1","1","0","0",[2,1,-2,0,0,0,0,0]],\n"k":["4448.2216152605","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"kB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"kairi":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"kanal":["505.8570528","1","0","0",[2,0,0,0,0,0,0,0]],\n"katal":["6.02214179e+23","1","0","siWord",[0,0,-1,0,0,1,0,0]],\n"kcal":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],\n"kcmil":["5.06707479097497e-07","1","0","0",[2,0,0,0,0,0,0,0]],\n"keg":["0.058673882652","1","0","0",[3,0,0,0,0,0,0,0]],\n"kelvin":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"kgf":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kilo":["1","1","0","0",[0,1,0,0,0,0,0,0]],\n"kilobyte":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"kilogram":["1","1","0","0",[0,1,0,0,0,0,0,0]],\n"kilogramme":["1","1","0","0",[0,1,0,0,0,0,0,0]],\n"kilopond":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kip":["4448.2216152605","1","0","0",[1,1,-2,0,0,0,0,0]],\n"klf":["4448.2216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],\n"kn":["1852","3600","0","0",[1,0,-1,0,0,0,0,0]],\n"knot":["1852","3600","0","0",[1,0,-1,0,0,0,0,0]],\n"kp":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kpf":["4448.2216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],\n"kph":["1000/3600","1","0","0",[1,0,-1,0,0,0,0,0]],\n"kpph":["1000/3600","1","0","0",[-1,1,-3,0,0,0,0,0]],\n"ks":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"ksf":["47880.2589803358","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"ksi":["6894757.29316836","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"kwh":["3600000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"l":["0.001","1","0","siSymbol",[3,0,0,0,0,0,0,0]],\n"lambert":["10000","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"lb":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],\n"lbf":["4.4482216152605","1","0","0",[1,1,-2,0,0,0,0,0]],\n"lbm":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],\n"league":["5556","1","0","0",[1,0,0,0,0,0,0,0]],\n"lf":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"li":["500","1","0","0",[1,0,0,0,0,0,0,0]],\n"light year":["9460730472580800","1","0","0",[1,0,0,0,0,0,0,0]],\n"link":["0.201168","1","0","0",[1,0,0,0,0,0,0,0]],\n"liter":["0.001","1","0","siWord",[3,0,0,0,0,0,0,0]],\n"litre":["0.001","1","0","siWord",[3,0,0,0,0,0,0,0]],\n"lm":["1","1","0","siSymbol",[0,0,0,0,0,0,1,0]],\n"long ton":["1016.0469088","1","0","0",[0,1,0,0,0,0,0,0]],\n"lt":["1016.0469088","1","0","0",[0,1,0,0,0,0,0,0]],\n"ltpd":["0.0117598021851852","1","0","0",[0,1,-1,0,0,0,0,0]],\n"lumen":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"lunar day":["89416.32","1","0","0",[0,0,1,0,0,0,0,0]],\n"lunar month":["2551442.976","1","0","0",[0,0,1,0,0,0,0,0]],\n"lux":["1","1","0","siWord",[-2,0,0,0,0,0,1,0]],\n"lx":["1","1","0","siSymbol",[-2,0,0,0,0,0,1,0]],\n"m":["1","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"mD":["9.869233e-16","1","0","0",[2,0,0,0,0,0,0,0]],\n"marathon":["42195","1","0","0",[1,0,0,0,0,0,0,0]],\n"marla":["25.29285264","1","0","0",[2,0,0,0,0,0,0,0]],\n"mas":["3.14159265358979","648000000","0","0",[0,0,0,0,0,0,0,0]],\n"maxwell":["0.00000001","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],\n"mb":["100","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"megabyte":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],\n"megaton TNT":["4184000000000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"megatons TNT":["4184000000000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"megohm":["1000000","1","0","0",[2,1,-3,-2,0,0,0,0]],\n"meter":["1","1","0","siWord",[1,0,0,0,0,0,0,0]],\n"metre":["1","1","0","siWord",[1,0,0,0,0,0,0,0]],\n"metric horsepower":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"metric ton":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"mgd":["3785.411784","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"mho":["1","1","0","0",[-2,-1,3,2,0,0,0,0]],\n"mi":["1609.344","1","0","0",[1,0,0,0,0,0,0,0]],\n"mil":["0.0000254","1","0","0",[1,0,0,0,0,0,0,0]],\n"mile":["1609.344","1","0","0",[1,0,0,0,0,0,0,0]],\n"min":["60","1","0","0",[0,0,1,0,0,0,0,0]],\n"minute":["60","1","0","0",[0,0,1,0,0,0,0,0]],\n"moa":["3.14159265358979","10800","0","0",[0,0,0,0,0,0,0,0]],\n"mol":["6.02214179e+23","1","0","0",[0,0,0,0,0,1,0,0]],\n"mole":["6.02214179e+23","1","0","0",[0,0,0,0,0,1,0,0]],\n"mpg":["1609.344","0.003785411784","0","0",[-2,0,0,0,0,0,0,0]],\n"mph":["0.44704","1","0","0",[1,0,-1,0,0,0,0,0]],\n"mt":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"nautical mile":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"newton":["1","1","0","0",[1,1,-2,0,0,0,0,0]],\n"nit":["1","1","0","0",[-2,0,0,0,0,0,1,0]],\n"ohm":["1","1","0","siWord",[2,1,-3,-2,0,0,0,0]],\n"ounce":["0.45359237","16","0","0",[0,1,0,0,0,0,0,0]],\n"oz":["0.45359237","16","0","0",[0,1,0,0,0,0,0,0]],\n"oz t":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],\n"parsec":["30856780000000000","1","0","0",[1,0,0,0,0,0,0,0]],\n"pc":["0.0254","6","0","0",[1,0,0,0,0,0,0,0]],\n"pcf":["4.4482216152605","0.028316846592","0","0",[-2,1,-2,0,0,0,0,0]],\n"pci":["4.4482216152605","0.000016387064","0","0",[-2,1,-2,0,0,0,0,0]],\n"pebibyte":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"peck":["0.00880976754172","1","0","0",[3,0,0,0,0,0,0,0]],\n"perfect ream":["516","1","0","0",[0,0,0,0,0,1,0,0]],\n"person":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"petabyte":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"pfd":["0.5","1","0","0",[0,1,0,0,0,0,0,0]],\n"pferdestärke":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"pfund":["0.5","1","0","0",[0,1,0,0,0,0,0,0]],\n"phot":["10000","1","0","0",[-2,0,0,0,0,0,1,0]],\n"pica":["0.0254","6","0","0",[1,0,0,0,0,0,0,0]],\n"pied du roi":["9000","27706","0","0",[1,0,0,0,0,0,0,0]],\n"pieze":["1000","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"pint":["0.000473176473","1","0","0",[3,0,0,0,0,0,0,0]],\n"pk":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"platonic year":["814000000000","1","0","0",[0,0,1,0,0,0,0,0]],\n"plf":["4.4482216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],\n"point":["0.0254","72","0","0",[1,0,0,0,0,0,0,0]],\n"poise":["0.1","1","0","siWord",[-1,1,-1,0,0,0,0,0]],\n"pound":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],\n"poundal":["4.4482216152605","32.174","0","0",[1,1,-2,0,0,0,0,0]],\n"ppm":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"ppmdv":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"ppmv":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"ppmw":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"printer's point":["0.0003515","1","0","0",[1,0,0,0,0,0,0,0]],\n"printer's ream":["516","1","0","0",[0,0,0,0,0,1,0,0]],\n"ps":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"psf":["4.4482216152605","0.09290304","0","0",[-1,1,-2,0,0,0,0,0]],\n"psi":["4.4482216152605","0.00064516","0","0",[-1,1,-2,0,0,0,0,0]],\n"psia":["6894.75729316836","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"psig":["6894.75729316836","1","14.6959","0",[-1,1,-2,0,0,0,0,0]],\n"px":["0.0254","96","0","0",[1,0,0,0,0,0,0,0]],\n"pz":["1000","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"quart":["0.003785411784","4","0","0",[3,0,0,0,0,0,0,0]],\n"quire":["25","1","0","0",[0,0,0,0,0,1,0,0]],\n"rad":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"radian":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"rankin":["5","9","0","0",[0,0,0,0,1,0,0,0]],\n"rd":["0.01","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"real":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"ream":["500","1","0","0",[0,0,0,0,0,1,0,0]],\n"rem":["0.01","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"rev":["6.28318530717959","1","0","0",[0,0,0,0,0,0,0,0]],\n"rod":["5.0292","1","0","0",[1,0,0,0,0,0,0,0]],\n"roentgen":["0.000258","1","0","siWord",[0,-1,1,1,0,0,0,0]],\n"rpm":["6.28318530717959","3600","0","0",[0,0,-1,0,0,0,0,0]],\n"ruble":["1","1","0","RUB",[0,0,0,0,0,0,0,1]],\n"röntgen":["0.000258","1","0","siWord",[0,-1,1,1,0,0,0,0]],\n"s":["1","1","0","siSymbol",[0,0,1,0,0,0,0,0]],\n"saltspoon":["0.003785411784","3072","0","0",[3,0,0,0,0,0,0,0]],\n"scf":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"scfd":["0.028316846592","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"scfh":["0.028316846592","3600","0","0",[3,0,-1,0,0,0,0,0]],\n"scfm":["0.028316846592","60","0","0",[3,0,-1,0,0,0,0,0]],\n"sea mile":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"sec":["1","1","0","0",[0,0,1,0,0,0,0,0]],\n"second":["1","1","0","0",[0,0,1,0,0,0,0,0]],\n"section":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],\n"sennight":["604800","1","0","0",[0,0,1,0,0,0,0,0]],\n"sheet":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"short ream":["480","1","0","0",[0,0,0,0,0,1,0,0]],\n"short ton":["907.18474","1","0","0",[0,1,0,0,0,0,0,0]],\n"siemen":["1","1","0","siWord",[-2,-1,3,2,0,0,0,0]],\n"sievert":["1","1","0","siWord",[2,0,-2,0,0,0,0,0]],\n"slinch":["175.126835246477","1","0","0",[0,1,0,0,0,0,0,0]],\n"slug":["14.5939029372064","1","0","0",[0,1,0,0,0,0,0,0]],\n"smoot":["1.7018","1","0","0",[0,1,0,0,0,0,0,0]],\n"span":["0.2286","1","0","0",[1,0,0,0,0,0,0,0]],\n"sphere":["12.5663706143592","1","0","0",[0,0,0,0,0,0,0,0]],\n"sq ft":["0.09290304","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq in":["0.00064516","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq km":["1000000","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq mi":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq yd":["0.83612736","1","0","0",[2,0,0,0,0,0,0,0]],\n"square degree":["0.000304617419786709","1","0","0",[0,0,0,0,0,0,0,0]],\n"square meter":["1","1","0","0",[2,0,0,0,0,0,0,0]],\n"square metre":["1","1","0","0",[2,0,0,0,0,0,0,0]],\n"square mi":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],\n"sr":["1","1","0","siSymbol",[0,0,0,0,0,0,0,0]],\n"ssp":["0.003785411784","3072","0","0",[3,0,0,0,0,0,0,0]],\n"standard volume":["22.414","1","0","0",[3,0,0,0,0,0,0,0]],\n"statampere":["0.00000000033356","1","0","0",[0,0,0,1,0,0,0,0]],\n"statcoulomb":["0.00000000033356","1","0","0",[0,0,1,1,0,0,0,0]],\n"statfarad":["0.0000000000011126","1","0","0",[-2,-1,4,2,0,0,0,0]],\n"stathenrie":["898760000000","1","0","0",[2,1,-2,-2,0,0,0,0]],\n"stathenry":["898760000000","1","0","0",[2,1,-2,-2,0,0,0,0]],\n"statohm":["898760000000","1","0","0",[2,1,-3,-2,0,0,0,0]],\n"statvolt":["299.79","1","0","0",[2,1,-3,-1,0,0,0,0]],\n"statwatt":["0.0000001","1","0","0",[2,1,-3,0,0,0,0,0]],\n"steam horsepower":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],\n"steradian":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"stere":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"stoke":["0.0001","1","0","0",[2,0,-1,0,0,0,0,0]],\n"stone":["6.35029318","1","0","0",[0,1,0,0,0,0,0,0]],\n"stpd":["0.0104998233796296","1","0","0",[0,1,-1,0,0,0,0,0]],\n"stunde":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"survey feet":["1200","3937","0","0",[1,0,0,0,0,0,0,0]],\n"survey foot":["1200","3937","0","0",[1,0,0,0,0,0,0,0]],\n"Sv":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"sverdrup":["1000000","1","0","0",[3,0,-1,0,0,0,0,0]],\n"sym":["1","1","0","siSymbol",[0,0,0,0,0,1,0,0]],\n"tablespoon":["0.003785411784","256","0","0",[3,0,0,0,0,0,0,0]],\n"tbsp":["0.003785411784","256","0","0",[3,0,0,0,0,0,0,0]],\n"teaspoon":["0.003785411784","768","0","0",[3,0,0,0,0,0,0,0]],\n"tebibyte":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"terabyte":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"tesla":["1","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"therm":["105480400","1","0","0",[2,1,-2,0,0,0,0,0]],\n"tidal day":["89416.32","1","0","0",[0,0,1,0,0,0,0,0]],\n"ton":["907.18474","1","0","0",[0,1,0,0,0,0,0,0]],\n"tonf":["8896.443230521","1","0","0",[1,1,-2,0,0,0,0,0]],\n"ton TNT":["4184000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"ton refrigeration":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],\n"tonne":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"tons TNT":["4184000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"tons refrigeration":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],\n"township":["93239571.972096","1","0","0",[2,0,0,0,0,0,0,0]],\n"toz":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],\n"tpy":["0.0000287475400032297","1","0","0",[0,1,-1,0,0,0,0,0]],\n"tropical year":["31556925.9747","1","0","0",[0,0,1,0,0,0,0,0]],\n"troy ounce":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],\n"tsp":["0.003785411784","768","0","0",[3,0,0,0,0,0,0,0]],\n"turn":["6.28318530717958","1","0","0",[0,0,0,0,0,0,0,0]],\n"twip":["0.0254","1440","0","0",[1,0,0,0,0,0,0,0]],\n"unit":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"vapeur":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"var":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],\n"varistor":["1","1","0","siWord",[2,1,-3,0,0,0,0,0]],\n"volt":["1","1","0","siWord",[2,1,-3,-1,0,0,0,0]],\n"watt":["1","1","0","siWord",[2,1,-3,0,0,0,0,0]],\n"weber":["1","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],\n"week":["604800","1","0","0",[0,0,1,0,0,0,0,0]],\n"won":["1","1","0","KRW",[0,0,0,0,0,0,0,1]],\n"wppm":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"yard":["0.9144","1","0","0",[1,0,0,0,0,0,0,0]],\n"yd":["0.9144","1","0","0",[1,0,0,0,0,0,0,0]],\n"year":["31556952","1","0","0",[0,0,1,0,0,0,0,0]],\n"yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"£":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"¥":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"°":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"°C":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],\n"°F":["5","9","459","0",[0,0,0,0,1,0,0,0]],\n"°K":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"°R":["5","9","0","0",[0,0,0,0,1,0,0,0]],\n"°R":["5","9","0","0",[0,0,0,0,1,0,0,0]],\n"Å":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0]],\n"Ω":["1","1","0","siSymbol",[2,1,-3,-2,0,0,0,0]],\n"”":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"₨":["1","1","0","INR",[0,0,0,0,0,0,0,1]],\n"₪":["1","1","0","ILS",[0,0,0,0,0,0,0,1]],\n"€":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"℃":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],\n"℉":["5","9","459","0",[0,0,0,0,1,0,0,0]],\n"Ω":["1","1","0","siSymbol",[2,1,-3,-2,0,0,0,0]],\n"K":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"Å":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0,0]]\n}`));const synonyms=Object.freeze({$:"USD",US$:"USD",dollar:"USD",A$:"AUD","Australian dollar":"AUD","Brazilian Real":"BRL",real:"BRL",R$:"BRL","British Pound":"GBP","£":"GBP",C$:"CAD","Canadian dollar":"CAD","Chinese Yuan":"CNY","€":"EUR",Euro:"EUR",euro:"EUR",HK$:"HKD","Hong Kong dollar":"HKD","Indian Rupee":"IDR","₨":"IDR","Israeli New Shekel":"ILS","₪":"ILS","Mexican Peso":"MXN","Swiss Franc":"CHF",Won:"KRW",won:"KRW",yen:"JPY",Yen:"JPY","Japanese Yen":"JPY","¥":"JPY"});const unitFromWord=(e,t,n)=>{const r=e.trim();const l=r.length;const a={name:r,factor:Rnl.one,gauge:Rnl.zero,log:"",expos:[0,0,0,0,0,0,0,0]};if(e===""){return a}let s="";let o;let i=false;let u="";let c=false;let p=false;for(let e=1;e<3;e++){if(e===1){i=true;s=r;if(l>2){if(s.charAt(s.length-1)==="s"){if(!(s==="cfs"||l===3&s.charAt(1)==="p")){s=s.slice(0,-1)}}}let e="";if(l>3){const t=/^(yotta|zetta|exa|peta|tera|giga|mega|kilo|hecto|deka|deci|centi|milli|micro|nano|pico|femto|atto|zepto|yocto)/.exec(s);if(t){e=t[0].value;i=true;s=s.slice(e.length)}}}else{i=false;u=s.charAt(0);if("YZEPTGMkhdcmnpfazyµμ".indexOf(u)>-1){i=true;s=s.substring(1)}}if(n&&Object.hasOwnProperty.call(n.value.columnMap,s)){const e=n.value.columnMap[s];const t=n.unit[n.value.units[e]];a.factor=Rnl.multiply(Rnl.fromString(n.value.data[e][0]),t.factor);a.expos=t.expos;return a}if(i){o=unitTable[s];if(o){p=true}if(e===1&&p&&u===""){break}else if(p){if(e===1){p=o[3]==="siWord";c=true;break}else{p=o[3]==="siSymbol";c=true}}}}if(p){a.gauge=Rnl.fromString(o[2]);a.expos=Object.freeze(o[4]);if(a.expos[7]===1){const e=synonyms[s]?synonyms[s]:s;if(t&&t.value.has(e)){a.factor=Rnl.reciprocal(t.value.get(e))}else{o=unitTable[e];if(o[0]==="0"){return errorOprnd("CURRENCY")}else{a.factor=Rnl.reciprocal(Rnl.fromString(o[0]))}}}else{a.factor=Rnl.divide(Rnl.fromString(o[0]),Rnl.fromString(o[1]))}if(c){a.factor=Rnl.multiply(a.factor,Rnl.fromNumber(prefixFactor[u]))}}else{return errorOprnd("UNIT_NAME",r)}return Object.freeze(a)};const opOrNumRegEx=/[0-9·\-⁰¹²³\u2074-\u2079⁻/^()]/;const numeralRegEx=/[0-9-]/;const unitFromUnitName=(e,t)=>{if(!e){return{name:null,factor:null,gauge:null,log:"",expos:null}}const n=t.currencies;const r=t.units?t.units:null;let l=e.trim();l=l.replace(/[*.•×\-−](?![0-9.])/g,"·");const a={name:l,factor:Rnl.one,gauge:Rnl.zero,log:"",expos:allZeros};if(l===""){return a}else if(l==="°"||l==="°ʹ"||l==="degMinSec"){a.factor=Rnl.fromString("0.0174532925199433");return a}else if(l==="feetInch"){a.unitExpos=[1,0,0,0,0,0,0,0];a.factor=Rnl.fromString("0.3048");return a}else if(l==="″"||l==="ʹʹ"){a.unitExpos=[1,0,0,0,0,0,0,0];a.factor=Rnl.fromString("0.0254");return a}const s=";";let o=false;let i="";let u="";let c="";let p="";const d=[];let f=0;const m=[{symbol:"",prec:-1}];let R="";for(let e=0;e<l.length;e++){i=l.charAt(e);if(numeralRegEx.test(i)){if(!o){c+=s;p+=s;m.push({symbol:"^",prec:3});o=true}c+=i;p+=i}else if(exponentRegEx.test(i)){if(!o){c+=s;p+=s;m.push({symbol:"^",prec:3});o=true}const e=numeralFromSuperScript(i);c+=e;p+=e}else if(i==="^"){c+=s;p+=s;m.push({symbol:"^",prec:3});o=true}else if(i==="·"||i==="/"){o=false;c+=s;p+=s;while(m[m.length-1].prec>=1){const e=m.pop().symbol;c+=e+s;p+=e+s}m.push({symbol:i,prec:1})}else if(i==="("){m.push({symbol:"(",prec:0})}else if(i===")"){while(m[m.length-1].prec>0){const e=m.pop().symbol;c+=e+s;p+=e+s}m.pop();o=false}else if(i==="-"){o=true;m.push({symbol:"^",prec:3});m.push({symbol:"-",prec:2});c+=s;p+=s}else{o=false;let t;for(t=e+1;t<l.length;t++){if(opOrNumRegEx.test(l.charAt(t))){break}}u=l.substring(e,t);R=unitFromWord(u,n,r);if(R.dtype&&R.dtype===dt.ERROR){return R}if(R.factor===0){a.name="";return a}c+=String(R.factor[0])+","+String(R.factor[1]);p+="¿"+f;d.push(R.expos);f+=1;e=t-1}}if(u===a.name){return Object.freeze(R)}while(m.length>1){const e=m.pop().symbol;c+=s+e;p+=s+e}const h=[];const g=[];const y=c.split(s);const b=p.split(s);let O=1;let x;f=0;for(let e=0;e<y.length;e++){if(/[·/\-^]/.test(y[e])){O=h.pop();x=g.pop()}switch(y[e]){case"·":h[h.length-1]=Rnl.multiply(h[h.length-1],O);g[g.length-1]=g[g.length-1].map(((e,t)=>e+x[t]));break;case"/":if(Rnl.isZero(O)){return errorOprnd("DIV")}h[h.length-1]=Rnl.divide(h[h.length-1],O);g[g.length-1]=g[g.length-1].map(((e,t)=>e-x[t]));break;case"^":h[h.length-1]=Rnl.power(h[h.length-1],O);g[g.length-1]=g[g.length-1].map((e=>e*x));break;case"-":h[h.length-1]=Rnl.negate(h[h.length-1]);break;default:if(y[e].indexOf(",")>-1){const t=y[e].split(",");h.push([BigInt(t[0]),BigInt(t[1])])}else{h.push([BigInt(y[e]),BigInt(1)])}if(b[e].charAt(0)==="¿"){g.push(d[f]);f+=1}else{g.push(b[e])}}}a.factor=Object.freeze(h.pop());a.expos=Object.freeze(g.pop());return Object.freeze(a)};const j=[Rnl.zero,Rnl.one];const isComplex=e=>Array.isArray(e)&&e.length===2&&Rnl.isRational(e[0])&&Rnl.isRational(e[1]);const re=e=>e[0];const im=e=>e[1];const abs$1=e=>Rnl.hypot(e[0],e[1]);const negate$1=e=>[Rnl.negate(e[0]),Rnl.negate(e[1])];const conjugate=e=>[e[0],Rnl.negate(e[1])];const argument=e=>{if(Rnl.isZero(e[0])&&Rnl.isZero(e[1])){return errorOprnd("ORIGIN","argument")}else if(Rnl.isZero(e[1])){return Rnl.isPositive(e[0])?Rnl.zero:Rnl.pi}else if(Rnl.isZero(e[0])){return Rnl.isPositive(e[1])?Rnl.divide(Rnl.pi,Rnl.two):Rnl.negate(Rnl.divide(Rnl.pi,Rnl.two))}else{return Rnl.fromNumber(Math.atan2(Rnl.toNumber(e[1]),Rnl.toNumber(e[0])))}};const add$1=(e,t)=>[Rnl.add(e[0],t[0]),Rnl.add(e[1],t[1])];const subtract$1=(e,t)=>[Rnl.subtract(e[0],t[0]),Rnl.subtract(e[1],t[1])];const multiply$1=(e,t)=>[Rnl.subtract(Rnl.multiply(e[0],t[0]),Rnl.multiply(e[1],t[1])),Rnl.add(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]))];const divide$1=(e,t)=>{if(!Rnl.isZero(e[1])&&!Rnl.isZero(t[1])){if(Rnl.lessThan(Rnl.abs(t[1]),Rnl.abs(t[0]))){const n=Rnl.divide(t[1],t[0]);const r=Rnl.add(t[0],Rnl.multiply(t[1],n));return[Rnl.divide(Rnl.add(e[0],Rnl.multiply(e[1],n)),r),Rnl.divide(Rnl.subtract(e[1],Rnl.multiply(e[0],n)),r)]}else{const n=Rnl.divide(t[0],t[1]);const r=Rnl.add(t[1],Rnl.multiply(t[0],n));return[Rnl.divide(Rnl.add(e[1],Rnl.multiply(e[0],n)),r),Rnl.divide(Rnl.add(Rnl.negate(e[0]),Rnl.multiply(e[1],n)),r)]}}else if(Rnl.isZero(e[1])){if(Rnl.lessThan(Rnl.abs(t[1]),Rnl.abs(t[0]))){const n=Rnl.divide(t[1],t[0]);const r=Rnl.add(t[0],Rnl.multiply(t[1],n));return[Rnl.divide(e[0],r),Rnl.negate(Rnl.multiply(e[0],Rnl.divide(n,r)))]}else{const n=Rnl.divide(t[0],t[1]);const r=Rnl.add(t[1],Rnl.multiply(t[0],n));return[Rnl.divide(Rnl.multiply(e[0],n),r),Rnl.negate(Rnl.divide(e[0],r))]}}else if(Rnl.isZero(t[1])){if(Rnl.isZero(t[0]));else{return[Rnl.divide(e[0],t[0]),Rnl.divide(e[1],t[0])]}}else{if(Rnl.isZero(t[0])){return errorOprnd("DIV")}else{return[Rnl.divide(e[0],t[0]),Rnl.zero]}}};const increment$1=e=>[Rnl.increment(e[0]),e[1]];const decrement$1=e=>[Rnl.decrement(e[0]),e[1]];const inverse=e=>{if(Rnl.isZero(e[1])){if(Rnl.isZero(e[0])){return errorOprnd("DIV")}return[Rnl.inverse(e[0]),0]}else{return divide$1([Rnl.one,Rnl.zero],e)}};const cos$1=e=>{const t=Rnl.multiply(Rnl.cos(e[0]),Rnl.cosh(e[1]));const n=Rnl.multiply(Rnl.negate(Rnl.sin(e[0])),Rnl.sinh(e[1]));return[t,n]};const sin$1=e=>{const t=Rnl.multiply(Rnl.sin(e[0]),Rnl.cosh(e[1]));const n=Rnl.multiply(Rnl.cos(e[0]),Rnl.sinh(e[1]));return[t,n]};const log=e=>{let t=[Rnl.zero,Rnl.zero];if(Rnl.isZero(e[0])&&Rnl.isZero(e[1])){return errorOprnd("ORIGIN","log")}else{t[0]=Rnl.fromNumber(Math.log(Rnl.toNumber(Rnl.hypot(e[0],e[1]))));t[1]=argument(e)}return t};const isSmall=e=>Rnl.lessThan(Rnl.abs(e),[BigInt(1),BigInt(1e14)]);const exp$1=e=>{let t=[Rnl.zero,Rnl.zero];if(isSmall(e[1])){t[1]=Rnl.zero;t[0]=Rnl.exp(e[0])}else{if(Rnl.isZero(e[0])){t[0]=Rnl.cos(e[1]);if(isSmall(t[0])){t[0]=Rnl.zero}t[1]=Rnl.sin(e[1]);if(isSmall(t[1])){t[1]=Rnl.zero}}else{const n=Rnl.exp(e[0]);t[0]=Rnl.multiply(n,Rnl.cos(e[1]));t[1]=Rnl.multiply(n,Rnl.sin(e[1]))}}return t};const power$1=(e,t)=>{let n=[Rnl.zero,Rnl.zero];if(!isComplex(t)){n=log(e);n[0]=Rnl.multiply(n[0],t);n[1]=Rnl.multiply(n[1],t)}else if(Rnl.isZero(t[1])){n=log(e);n[0]=Rnl.multiply(n[0],t[0]);n[1]=Rnl.multiply(n[1],t[0])}else if(Rnl.isZero(e[1])&&!Rnl.isNegative(e[0])){e[0]=Rnl.fromNumber(Math.log(Rnl.toNumber(e[0])));n[0]=Rnl.multiply(e[0],t[0]);n[1]=Rnl.multiply(e[0],t[1])}else{e=log(e);n[0]=Rnl.subtract(Rnl.multiply(e[0],t[0]),Rnl.multiply(e[1],t[1]));n[1]=Rnl.add(Rnl.multiply(e[1],t[0]),Rnl.multiply(e[0],t[1]))}n=exp$1(n);if(isSmall(n[1])){n[1]=Rnl.zero}if(isSmall(n[0])){n[0]=Rnl.zero}return n};const acosh=e=>log(add$1(e,multiply$1(sqrt$1(decrement$1(e)),sqrt$1(increment$1(e)))));const asinh=e=>{const t=sqrt$1(add$1(multiply$1(e,e),[Rnl.one,Rnl.zero]));return log(add$1(e,t))};const atanh=e=>divide$1(subtract$1(log(increment$1(e)),log(subtract$1([Rnl.one,Rnl.zero],e))),[Rnl.two,Rnl.zero]);const asin=e=>divide$1(asinh(multiply$1(j,e)),j);const atan=e=>{const t=log(increment$1(multiply$1(j,e)));const n=log(subtract$1([Rnl.one,Rnl.zero],multiply$1(j,e)));return divide$1(subtract$1(t,n),[Rnl.zero,Rnl.two])};const sqrt$1=e=>{const t=log(e);t[0]=Rnl.divide(t[0],Rnl.two);t[1]=Rnl.divide(t[1],Rnl.two);return exp$1(t)};const lanczos$1=t=>{const n=subtract$1(t,[Rnl.one,Rnl.zero]);const r=Rnl.sqrt(Rnl.divide(e,pi));const l=multiply$1([Rnl.two,Rnl.zero],[r,Rnl.zero]);const a=Rnl.fromNumber(11.400511);const s=[[BigInt(1),BigInt(2)],Rnl.zero];const o=power$1(divide$1(add$1(n,[a,Rnl.zero]),[e,Rnl.zero]),add$1(n,s));const i=["2.48574089138753565546e-5","1.05142378581721974210","-3.45687097222016235469","4.51227709466894823700","-2.98285225323576655721","1.05639711577126713077","-0.195428773191645869583","0.0170970543404441224307","-0.000571926117404305781283","0.00000463399473359905636708","-0.00000000271994908488607703910"];let u=[Rnl.fromString(i[0]),Rnl.zero];for(let e=1;e<=10;e++){const t=[Rnl.fromString(t[e]),Rnl.zero];const r=[Rnl.fromNumber(e),Rnl.zero];u=add$1(u,divide$1(t,add$1(n,r)))}return multiply$1(multiply$1(l,o),u)};const display=(e,t,n)=>{const r=/[j∠°]/.test(t)?t.slice(-1):"j";let l="";let a="";if(r==="j"){const r=format(e[0],t,n);let s=format(e[1],t,n);if(s.charAt(0)==="-"){s="("+s+")"}l=r+" + j"+s;a=r+" + j"+s}else{const s=Rnl.hypot(e[0],e[1]);let o=Cpx.argument(result.value);if(r==="°"){o=Rnl.divide(Rnl.multiply(o,Rnl.fromNumber(180)),Rnl.pi)}l=format(s,t,n)+"∠"+format(o,t,n)+(r==="°"?"°":"");a=l}return[l,a]};const Cpx=Object.freeze({j:j,re:re,im:im,abs:abs$1,conjugate:conjugate,argument:argument,inverse:inverse,increment:increment$1,decrement:decrement$1,isComplex:isComplex,add:add$1,subtract:subtract$1,divide:divide$1,multiply:multiply$1,negate:negate$1,power:power$1,exp:exp$1,log:log,sqrt:sqrt$1,sin:sin$1,cos:cos$1,asin:asin,atan:atan,acosh:acosh,asinh:asinh,atanh:atanh,lanczos:lanczos$1,display:display});const isMatrix=e=>e.dtype&dt.ROWVECTOR||e.dtype&dt.COLUMNVECTOR||e.dtype&dt.MATRIX;const isVector=e=>(e.dtype&dt.ROWVECTOR||e.dtype&dt.COLUMNVECTOR)>0;const convertFromBaseUnits=(e,t,n)=>{let r=isVector(e)?e.value.map((e=>Rnl.divide(e,n))):e.value.map((e=>e.map((e=>Rnl.divide(e,n)))));if(!Rnl.isZero(t)){r=isVector(e)?e.value.map((e=>Rnl.subtract(e,t))):e.value.map((e=>e.map((e=>Rnl.subtract(e,t)))))}return Object.freeze(r)};const convertToBaseUnits=(e,t,n)=>{let r=clone(e.value);if(!Rnl.isZero(t)){r=isVector(e)?e.value.map((e=>Rnl.add(e,t))):e.value.map((e=>e.map((e=>Rnl.add(e,t)))))}r=isVector(e)?r.map((e=>Rnl.multiply(e,n))):r.map((e=>e.map((e=>Rnl.multiply(e,n)))));return Object.freeze(r)};const display$1=(e,t,n)=>{let r="\\begin";if(e.dtype&dt.MATRIX){r+="{pmatrix}";const l=e.value.length;const a=e.value[1].length;for(let s=0;s<l;s++){for(let l=0;l<a;l++){r+=format(e.value[s][l],t,n)+" &"}r=r.slice(0,-1)+" \\\\ "}r=r.slice(0,-3).trim();r+="\\end{pmatrix}"}else{r+="{bmatrix}";const l=e.dtype&dt.ROWVECTOR?" & ":" \\\\ ";if(e.value.plain){const a=e.value.plain.length;for(let s=0;s<a;s++){r+=format(e.value.plain[s],t,n)+(s<a-1?l:"")}}else{const a=e.value.length;for(let s=0;s<a;s++){const o=e.value[s]===undefined?"":e.dtype&dt.RATIONAL?format(e.value[s],t,n):e.dtype&dt.COMPLEX?Cpx.display(e.value[s],t,n)[0]:e.dtype&dt.BOOLEAN||e.dtype&dt.STRING?"\\text{"+e.value[s]+"}":e.value[s];r+=o+(s<a-1?l:"")}}r+="\\end{bmatrix}"}return r};const displayAlt=(e,t,n)=>{let r="";if(e.dtype&dt.MATRIX){r+="(";const l=e.value.length;const a=e.value[1].length;for(let s=0;s<l;s++){for(let l=0;l<a;l++){r+=format(e.value[s][l],t,n).replace(/{,}/g,",")+", "}r=r.slice(0,-2)+"; "}r=r.slice(0,-2).trim();r+=")"}else{r+="[";const l=e.dtype&dt.ROWVECTOR?", ":"; ";if(e.value.plain){const a=e.value.plain.length;for(let s=0;s<a;s++){r+=format(e.value.plain[s],t,n).replace(/{,}/g,",")+(s<a-1?l:"")}}else{const a=e.value.length;for(let s=0;s<a;s++){const o=e.value[s]===undefined?"":e.dtype&dt.RATIONAL?format(e.value[s],t,n).replace(/{,}/g,","):e.dtype&dt.COMPLEX?Cpx.display(e.value[s],t,n)[1].replace(/{,}/g,","):e.value[s];r+=o+(s<a-1?l:"")}}r+="]"}return r};const displayMapOfVectors=(e,t,n)=>{let r="\\begin{Bmatrix}";Object.keys(e).forEach((l=>{const a=e[l];r+="\\text{"+l+"}: \\begin{bmatrix}";const s=a.plain.length;if(a.plain){for(let e=0;e<s;e++){r+=format(a.plain[e],t,n)+(e<s-1?", ":"")}}else{for(let e=0;e<s;e++){const l=Rnl.isRational(a[e])?format(a[e],t,n):typeof a[e]==="boolean"||typeof a[e]==="string"?"\\text{"+a[e]+"}":a[e];r+=l+(e<s-1?" & ":"")}}r+="\\end{bmatrix} \\\\"}));r=r.slice(0,-2)+"\\end{Bmatrix}";return r};const displayAltMapOfVectors=(e,t,n)=>{let r="{";Object.keys(e).forEach((l=>{const a=e[l];r+=l+": [";const s=a.plain.length;if(a.plain){for(let e=0;e<s;e++){r+=format(a.plain[e],t,n)+(e<s-1?", ":"").replace(/{,}/g,",")+" "}}else{for(let e=0;e<s;e++){const l=Rnl.isRational(a[e])?format(a[e],t,n).replace(/{,}/g,",")+" ":String(a[e])+"}";r+=l+(e<s-1?" ":"")}}r+="];"}));return r.slice(0,-1)+"}"};const identity=(e,t)=>{const n=Rnl.isRational(e)?Rnl.toNumber(e):e;if(n===1){return[Rnl.one]}else{const e=[];for(let t=0;t<n;t++){e.push(new Array(n).fill(Rnl.zero));e[t][t]=Rnl.one}return t?e:Object.freeze(e)}};const invert=(e,t)=>{if(e.length!==e[0].length){return errorOprnd("NONSQUARE")}const n=e.length;let r=0;let l=0;let a=0;let s=Rnl.zero;let o=Rnl.one;const i=clone(e);const u=identity(n,true);for(r=0;r<n;r+=1){s=i[r][r];if(Rnl.isZero(s)){for(l=r+1;l<n;l++){if(!Rnl.isZero(i[l][r])){for(a=0;a<n;a++){s=i[r][a];i[r][a]=i[l][a];i[l][a]=s;s=u[r][a];u[r][a]=u[l][a];u[l][a]=s}break}}s=i[r][r];if(Rnl.isZero(s)){return errorOprnd("SINGULAR")}}if(t){o=Rnl.divide(o,s);if(r===n-1){return o}}for(a=0;a<n;a++){i[r][a]=Rnl.divide(i[r][a],s);u[r][a]=Rnl.divide(u[r][a],s)}for(l=0;l<n;l++){if(l===r){continue}s=i[l][r];for(a=0;a<n;a++){i[l][a]=Rnl.subtract(i[l][a],Rnl.multiply(s,i[r][a]));u[l][a]=Rnl.subtract(u[l][a],Rnl.multiply(s,u[r][a]))}}}return Object.freeze(u)};const submatrix=(e,t,n)=>{if(!(t.dtype&dt.RATIONAL||t.dtype&dt.RANGE)){return errorOprnd("BAD_INDEX")}let r=[];let l=e.dtype;let a=0;let s=1;let o=0;if(t.dtype&dt.RANGE){a=Rnl.toNumber(t.value[0]);s=Rnl.toNumber(t.value[1]);o=t.value[2]==="∞"?e.value.length:Rnl.toNumber(t.value[2])}else if(Rnl.areEqual(t.value,Rnl.zero)){a=1;o=e.value.length}else{a=Rnl.toNumber(t.value);o=a}if(isVector(e)){if(a===o){r=e.value[a-1];l=e.dtype-(e.dtype&dt.ROWVECTOR)-(e.dtype&dt.COLUMNVECTOR)}else if(s===1){r=e.value.slice(a-1,o)}else{for(let t=a-1;t<o;t+=s){r.push(e.value[t])}}Object.freeze(r);return Object.freeze({value:r,unit:e.unit,dtype:l})}let i=0;let u=1;let c=0;if(n){if(n.dtype&dt.RANGE){i=Rnl.toNumber(n.value[0]);u=Rnl.toNumber(n.value[1]);c=n.value[2]==="∞"?e.value[0].length:Rnl.toNumber(n.value[2])}else if(Rnl.areEqual(n.value,Rnl.zero)){i=1;c=e.value[0].length}else{i=Rnl.toNumber(n.value);c=i}}if(a===o&&i===c){r=e.value[a-1][i-1];l-=dt.MATRIX}else if(a===o){if(u===1){r=e.value[a-1].slice(i-1,c)}else{for(let t=i-1;t<c;t+=u){r.push(e.value[a-1][t])}}l=l-dt.MATRIX+dt.ROWVECTOR}else if(i===c){for(let t=a-1;t<o;t+=s){r.push(e.value[t][i-1])}l=l-dt.MATRIX+dt.COLUMNVECTOR}else if(u===1){for(let t=a-1;t<o;t+=s){r.push([]);r[r.length-1]=e.value[t].slice(i-1,c)}}else{for(let t=a-1;t<o;t+=s){r.push([]);for(let n=i-1;n<c;n+=u){r[r.length-1].push(e[t][n])}}}Object.freeze(r);return Object.freeze({value:r,unit:e.unit,dtype:l})};const multResultType=(e,t)=>{if(e.dtype&dt.ROWVECTOR&&t.dtype&dt.COLUMNVECTOR){return dt.RATIONAL}else if(e.dtype&dt.MATRIX&&t.dtype&dt.COLUMNVECTOR){return t.dtype}else if(e.dtype&dt.ROWVECTOR&&t.dtype&dt.MATRIX){return e.dtype}else{return dt.MATRIX+dt.RATIONAL}};const operandFromRange=e=>{const t=[];if(Rnl.greaterThan(e[2],e[0])){for(let n=e[0];Rnl.lessThan(n,e[2]);n=Rnl.add(n,e[1])){t.push(n)}}else{for(let n=e[0];Rnl.greaterThanOrEqualTo(n,e[2]);n=Rnl.add(n,e[1])){t.push(n)}}if(!Rnl.areEqual(t[t.length-1],e[2])){t.push(e[2])}Object.freeze(t);return Object.freeze({value:t,unit:{expos:allZeros},dtype:dt.RATIONAL+dt.ROWVECTOR})};const operandFromTokenStack=(e,t,n)=>{if(t===0&&n===0){return Object.freeze({value:new Array(0),unit:null,dtype:dt.ROWVECTOR})}else if(t===1&&n===1){return e.pop()}else if(t===1||n===1){const r=Math.max(t,n);let l;let a=e[e.length-1].dtype;if(t===1&&a&dt.COLUMNVECTOR){a=a-dt.COLUMNVECTOR+dt.MATRIX;l=new Array(e[0].value.length);for(let t=0;t<e[0].value.length;t++){l[t]=[];for(let n=0;n<r;n++){l[t][n]=e[n].value[t]}}for(let t=0;t<r;t++){e.pop()}}else{l=new Array(r);a+=t===1?dt.ROWVECTOR:dt.COLUMNVECTOR;for(let t=r-1;t>=0;t--){l[t]=e.pop().value}}Object.freeze(l);return Object.freeze({value:l,unit:a&dt.RATIONAL?{expos:allZeros}:null,dtype:a})}else{const r=new Array(t);const l=e[e.length-1].dtype+dt.MATRIX;for(let e=0;e<t;e++){r[e]=new Array(n)}for(let l=t-1;l>=0;l--){for(let t=n-1;t>=0;t--){r[l][t]=e.pop().value}}Object.freeze(r);return Object.freeze({value:r,unit:l&dt.RATIONAL?{expos:allZeros}:null,dtype:l})}};const zeros=(e,t)=>{if(e===1){return{value:new Array(t).fill(Rnl.zero),unit:allZeros,dtype:dt.RATIONAL+dt.ROWVECTOR}}else if(t===1){return{value:new Array(e).fill(Rnl.zero),unit:allZeros,dtype:dt.RATIONAL+dt.COLUMNVECTOR}}else{const n=[];for(let r=0;r<e;r++){n.push(new Array(t).fill(Rnl.zero))}Object.freeze(n);return Object.freeze({value:n,unit:{expos:allZeros},dtype:dt.RATIONAL+dt.MATRIX})}};const Matrix=Object.freeze({convertFromBaseUnits:convertFromBaseUnits,convertToBaseUnits:convertToBaseUnits,display:display$1,displayAlt:displayAlt,displayMapOfVectors:displayMapOfVectors,displayAltMapOfVectors:displayAltMapOfVectors,identity:identity,invert:invert,isVector:isVector,multResultType:multResultType,operandFromRange:operandFromRange,operandFromTokenStack:operandFromTokenStack,submatrix:submatrix,zeros:zeros});const columnListFromRange=(e,t)=>{const n=[];for(let r=e;r<=t;r++){n.push(r)}return n};const valueFromDatum=e=>e==="true"?true:e==="false"?false:numberRegEx$1.test(e)?Rnl.fromString(e):e===""?undefined:e;const datumFromValue=(e,t)=>e===true?"true":e===false?"false":e=t===dt.RATIONAL?"0 "+String(e[0])+"/"+String(e[1]):e;const range=(e,t,n,r)=>{let l;let a;const s=[];let o=[];let i=Object.create(null);if(e.value.data[0].length===1){l=0;a=0;for(let n=0;n<t.length;n++){if(t[n].dtype===dt.STRING){o.push(e.value.columnMap[t[n].value])}else if(t[n].dtype===dt.RATIONAL){o.push(Rnl.toNumber(t[n].value))}else if(t[n].dtype===dt.RANGE){const e=Rnl.toNumber(t[n].value[0]);const r=Rnl.toNumber(t[n].value[1]);for(let t=e;t<=r;t++){o.push(t)}}}}else if(t.length===1&&t[0].dtype===dt.RATIONAL){l=Rnl.toNumber(t[0].value)-1;a=l;o=columnListFromRange(0,e.value.data.length-1)}else if(t.length===1&&t[0].dtype===dt.RANGE){l=Rnl.toNumber(t[0].value[0])-1;a=Rnl.toNumber(t[0].value[1])-1;o=columnListFromRange(0,e.value.data.length-1)}else if(t.length===1&&t[0].dtype===dt.STRING){if(e.value.rowMap&&t[0].value in e.value.rowMap){l=e.value.rowMap[t[0].value];a=l;o=columnListFromRange(0,e.value.data.length-1)}else if(e.value.columnMap&&t[0].value in e.value.columnMap){l=0;a=e.value.data[0].length-1;o.push(e.value.columnMap[t[0].value])}else{return errorOprnd("BAD_ROW_NAME",t[0].value)}}else if(t.length===1&&t[0].dtype===dt.STRING+dt.COLUMNVECTOR){for(const e of t[0].value){s.push(e)}o=columnListFromRange(0,e.value.data.length-1)}else if(t.length===1&&t[0].dtype===dt.STRING+dt.ROWVECTOR){l=0;a=e.value.data[0].length;for(const n of t[0].value){o.push(e.columnIndicator[n])}}else if(t.length===2&&t[0].dtype===dt.STRING&&e.value.rowMap&&t[0].value in e.value.rowMap&&t[1].dtype===dt.STRING&&e.value.columnMap&&t[0].value in e.value.columnMap){l=e.value.rowMap[t[0].value];a=l;o.push(e.value.columnMap[t[0].value])}if(s.length===0&&l===a&&o.length===1){let t=e.value.dtype[o[0]];if(t&dt.QUANTITY){t-=dt.QUANTITY}const a=o[0];let s=valueFromDatum(e.value.data[a][l]);i.expos=t&dt.RATIONAL?allZeros:null;if(r&&e.value.units[a]){const t=e.value.units[a]?e.value.units[a]:undefined;const r=unitFromUnitName(t,n);s=Rnl.multiply(Rnl.add(s,r.gauge),r.factor);i.expos=r.expos}return{value:s,unit:i,dtype:t}}else if(o.length===1){const t=o[0];const n=e.value.units[t]?e.value.units[t]:{};i=e.unit&&e.unit[n]?e.unit[n]:{expos:null};const s=e.value.data[t].slice(l,a+1).map((e=>valueFromDatum(e)));const u=e.value.dtype[t]+dt.COLUMNVECTOR;const c={value:s,name:e.value.headings[t],unit:i,dtype:u};if(r&&i.gauge){return{value:Matrix.convertToBaseUnits(c,i.gauge,i.factor),name:e.value.headings[t],unit:{expos:clone(i.expos)},dtype:dt.RATIONAL+dt.COLUMNVECTOR}}else{return c}}else{const t=[];const n=[];const r=[];const i=[];const u=Object.create(null);const c=Object.create(null);const p=s.length===0?false:Object.create(null);for(let d=0;d<o.length;d++){t.push(e.value.headings[o[d]]);const f=e.value.units[o[d]];n.push(f);if(f&&!c[f]){c[f]=e.unit[f]}r.push(e.value.dtype[o[d]]);u[e.value.headings[d]]=d;if(s.length>0){const t=[];for(let n=0;n<s.length;n++){const r=s[n];t.push(e.value.data[o[d]][e.value.rowMap[r]]);p[r]=n}i.push(t)}else{i.push(e.value.data[o[d]].slice(l,a+1))}}return{value:{data:i,headings:t,columnMap:u,rowMap:false,units:n,dtype:r},unit:clone(c),dtype:dt.DATAFRAME}}};const numberRegEx$1=new RegExp("^(?:=|"+Rnl.numberPattern.slice(1)+"$)");const mixedFractionRegEx=/^-?(?:[0-9]+(?: [0-9]+\/[0-9]+))$/;const dataFrameFromCSV=(e,t)=>{const n=[];const r=[];const l=Object.create(null);let a=false;const s=[];const o=[];const i=Object.create(null);let u=false;const c=e.indexOf("\t")>-1?"\t":"|";if(e.charAt(0)==="`"){e=e.slice(1)}let p=0;let d=0;const f=e=>{let r=false;for(let e=0;e<n.length;e++){if(numberRegEx$1.test(n[e][0])){r=true;break}}if(!r){for(let e=0;e<n.length;e++){if(numberRegEx$1.test(n[e][1])){u=true;break}}}if(u){for(let e=0;e<n.length;e++){const r=n[e].shift();s.push(r);if(r.length>0){if(!i[r]){const e=unitFromUnitName(r,t);if(e){i[r]=e}else{return errorOprnd("DF_UNIT",r)}}}}if(a){Object.entries(a).forEach((([e,t])=>{a[e]=t-1}))}}};const m=/^(?:[Nn]ame|[Ii]tem|[Ll]able)$/;const R=e=>{e=e.trim();if(p===3&&d===0){f()}if(p===0){r.push(e);l[e]=d;if(d===0&&(e.length===0||m.test(e))){a=Object.create(null)}}else{if(p===1){n.push([])}if(e==="sumAbove()"){let t=Rnl.zero;for(const e of n[d]){if(!isNaN(e)){t=Rnl.add(t,Rnl.fromString(e))}}e=String(Rnl.toNumber(t))}n[d].push(e);if(a&&d===0){a[e]=p-1-(u?1:0)}}};if(e.indexOf('"')===-1){const t=e.split(/\r?\n/g);for(const e of t){if(e.length>0){d=0;const t=e.split(c);for(const e of t){R(e.trim());d++}p+=1}}if(p===3){f()}}else{let t="";let n=false;for(let r=0;r<e.length;r++){const l=e[r];const a=e[r+1];if(l==='"'&&n&&a==='"'){t+=l;++r;continue}if(l==='"'){n=!n;continue}if(l===c&&!n){R(t);t="";++d;continue}if(l==="\r"&&a==="\n"&&!n){R(t);t="";++p;d=0;++r;continue}if(l==="\n"&&!n){R(t);t="";++p;d=0;++r;continue}if(l==="\r"&&!n){R(t);t="";++p;d=0;++r;continue}t+=l}if(t.length>0){R(t)}if(p===2){f()}}for(let e=0;e<n.length;e++){for(let t=0;t<n[0].length;t++){const r=n[e][t];if(r===""){continue}o.push(numberRegEx$1.test(r)?dt.RATIONAL+(s.length>0&&s[e].length>0?dt.QUANTITY:0):r==="true"||r==="false"?dt.BOOLEAN:dt.STRING);break}}let h=false;if(n[0].length===1&&Object.keys(i).length===0){h=true;for(let e=1;e<o.length;e++){if(o[e]!==o[0]){h=false;break}}}if(h){const e=new Map;const t=Object.keys(l);for(let r=0;r<t.length;r++){e.set(t[r],valueFromDatum(n[r][0]))}return{value:e,unit:o[0]===dt.RATIONAL?allZeros:null,dtype:dt.MAP+o[0]}}else{return{value:{data:n,headings:r,columnMap:l,rowMap:a,units:s,dtype:o},unit:i,dtype:dt.DATAFRAME}}};const dataFrameFromVectors=(e,t)=>{const n=[];const r=[];const l=Object.create(null);const a=[];const s=[];const o=Object.create(null);const i=e[0].name&&e[0].name==="name"?Object.create(null):false;for(let u=0;u<e.length;u++){const c=e[u];const p=c.dtype&dt.ROWVECTOR?dt.ROWVECTOR:c.dtype&dt.COLUMNVECTOR?dt.COLUMNVECTOR:dt.ERROR;if(p===dt.ERROR){return errorOprnd("NOT_VECTOR")}r.push(c.name);l[c.name]=u;const d=c.dtype-p;n.push(c.value.map((e=>datumFromValue(e,d))));s.push(d);if(c.unit.name){a.push(c.unit.name);if(!o[c.unit.name]){const e=unitFromUnitName(c.unit.name,t);o[c.unit.name]=e}}else{a.push(null)}if(i){const t=e[0].value;for(let e=0;e<t.length;e++){i[t[e]]=e}}}return{value:{data:n,headings:r,columnMap:l,rowMap:i,units:a,dtype:s},unit:o,dtype:dt.DATAFRAME}};const matrix2table=(e,t,n,r)=>{const l=[];for(let t=0;t<=e.value[0].length;t++){l.push([])}const a=n.value;a.unshift("");const s=Object.create(null);for(let e=1;e<n.value[0].length;e++){s[a[e]]=e}const o=dt.RATIONAL+(e.unit?dt.QUANTITY:0);const i=Array(e.value[0].length).fill(o);i.unshift(null);let u=[];const c=Object.create(null);if(e.unit.name){u=Array(e.value[0].length).fill(e.unit.name);u.unshift("");c[e.unit.name]=unitFromUnitName(e.unit.name,r)}const p=Object.create(null);l[0]=t.value;const d=r.format?r.format.value:"h15";for(let e=0;e<t.value.length;e++){p[l[0][e]]=e}for(let t=0;t<e.value.length;t++){for(let n=0;n<e.value[0].length;n++){const r=e.value[t][n];l[n+1].push(format(r,d,"1000000."))}}return{value:{data:l,headings:a,columnMap:s,rowMap:p,units:u,dtype:i},unit:c,dtype:dt.DATAFRAME}};const append=(e,t,n,r)=>{const l=clone(e);const a=e.value.data[0].length;if(a!==t.value.length){return errorOprnd("BAD_CONCAT")}l.value.headings.push(t.name);l.value.columnMap[t.name]=e.value.headings.length-1;const s=t.dtype&dt.COLUMNVECTOR?t.dtype-dt.COLUMNVECTOR:t.dtype-dt.ROWVECTOR;if(t.unit.name&&t.unit.name.length>0){l.value.units.push(t.unit.name);const e=unitFromUnitName(t.unit.name,n);if(!l.unit[t.unit.name]){l.unit[t.unit.name]=e}if(r){const n=Matrix.convertFromBaseUnits(t,e.gauge,e.factor);l.value.data.push(n.map((e=>datumFromValue(e,s))))}else{l.value.data.push(t.value.map((e=>datumFromValue(e,s))))}}else{l.value.units.push(null)}l.value.dtype.push(s);return l};const quickDisplay=e=>{if(e===""){return""}e=addTextEscapes(e.trim());const t=e.indexOf("\t")>-1?/ *\t */g:/ *\| */g;const n=e.split(/\r?\n/g);let r="";if(n.length<3){r="\\begin{matrix}\\text{";for(let e=0;e<n.length;e++){r+=tablessTrim(n[e]).replace(t,"} & \\text{")+"} \\\\ \\text{"}r=r.slice(0,-10)+"\\end{matrix}"}else{r="\\begin{array}{l|cccccccccccccccccccccccc}\\text{";const e=new Array(n.length);for(let r=0;r<n.length;r++){e[r]=tablessTrim(n[r]).split(t)}let l=false;let a=false;for(let t=0;t<e[1].length;t++){if(numberRegEx$1.test(e[1][t])){a=true;break}}if(!a){for(let t=0;t<e[2].length;t++){if(numberRegEx$1.test(e[2][t])){l=true;break}}}for(let e=0;e<n.length;e++){r+=tablessTrim(n[e]).replace(t,"} & \\text{");r+=l&&e===1||!l&&e===0?"} \\\\ \\hline \\text{":"} \\\\ \\text{"}r=r.slice(0,-10)+"\\end{array}"}r=r.replace(/·/g,"$·$");return r};const isValidIdentifier=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;const accentRegEx$1=/^([^\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]+)([\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1])(.+)?/;const subscriptRegEx=/([^_]+)(_[^']+)?(.*)?/;const accentFromChar=Object.freeze({"̀":"\\grave","́":"\\acute","̂":"\\hat","̃":"\\tilde","̄":"\\bar","̅":"\\bar","̇":"\\dot","̈":"\\ddot","̊":"\\mathring","̌":"\\check","̲":"\\underline","⃐":"\\overleftharpoon","⃑":"\\overrightharpoon","⃖":"\\overleftarrow","⃗":"\\vec","⃡":"\\overleftrightarrow"});const formatColumnName=e=>{if(!isValidIdentifier.test(e)){return"\\text{"+addTextEscapes(e)+"}"}else{e=e.replace(/′/g,"'");let t=e.match(accentRegEx$1);if(t){e=accentFromChar[t[2]]+"{"+t[1]+"}";return e+(t[3]?t[3]:"")}else{t=e.match(subscriptRegEx);let n=t[1].length>1?`\\text{${t[1]}}`:t[1];if(t[2]){n+="_"+`\\text{${t[2].slice(1)}}`}return n+(t[3]?t[3]:"")}}};const isNotEmpty=e=>{for(let t=0;t<e.length;t++){if(e[t]!==""&&e[t]!==null){return true}}return false};const getNumInfo=e=>{const t=e.data.length;const n=new Array(t);const r=new Array(t);for(let l=0;l<t;l++){if(e.dtype[l]&dt.RATIONAL){n[l]={hasAlignChar:false,maxLenAfterAlignChar:0};r[l]=[];for(let t=0;t<e.data[0].length;t++){const a=e.data[l][t];const s=a.indexOf(".");const o=s>-1;const i=o?a.length-s-1:0;r[l].push({hasAlignChar:o,lenAfterAlignChar:i});if(o){n[l].hasAlignChar=true;if(i>n[l].maxLenAfterAlignChar){n[l].maxLenAfterAlignChar=i}}}}}return[n,r]};const displayNum=(e,t,n,r)=>{let l=formattedDecimal(e,r);const a=t.maxLenAfterAlignChar-n.lenAfterAlignChar;if(t.hasAlignChar&&(a>0||!n.hasAlignChar)){l+="\\phantom{";if(t.hasAlignChar&&!n.hasAlignChar){l+=r.slice(-1)==="."?".":"{,}"}if(a>0){l+="0".repeat(a)}l+="}"}return l};const totalRegEx=/^(?:total|sum)/i;const display$2=(e,t="h3",n="1,000,000.",r=false)=>{if(e.data.length===0){return""}const l=e.data[0].length;const a=e.data.length;const s=l>5&&!e.rowMap;const o=a+(s?1:0);let i="\\begin{array}{";i+=e.rowMap?"l|":s?"r|":"";for(let t=1;t<o;t++){i+=e.dtype[t]&dt.RATIONAL?"r ":"l "}i=i.slice(0,-1)+"}";if(!r){if(s){i+="&"}for(let t=0;t<a;t++){i+="{"+formatColumnName(e.headings[t])+"}&"}i=i.slice(0,-1)+" \\\\ "}if(isNotEmpty(e.units)){if(s){i+="&"}for(let t=0;t<a;t++){let n="";if(e.units[t]&&e.units[t].length>0){const r=unitTeXFromString(e.units[t]);n=r.replace("\\;\\, ","")}else{n=""}i+=n+"&"}i=i.slice(0,-1)+" \\\\ "}i+="\\hline ";const[u,c]=getNumInfo(e);for(let r=0;r<l;r++){if(r===l-1&&totalRegEx.test(e.data[0][r])){i+="\\hline "}if(s){i+=String(r+1)+" & "}for(let l=0;l<a;l++){const a=e.data[l][r];i+=mixedFractionRegEx.test(a)?format(Rnl.fromString(a),t,n)+"&":numberRegEx$1.test(a)?displayNum(a,u[l],c[l][r],n)+"&":a===""?"&":"\\text{"+addTextEscapes(a)+"}&"}i=i.slice(0,-1)+" \\\\ "}i=i.slice(0,-3).trim();i+="\\end{array}";return i};const displayAlt$1=(e,t="h3",n=false)=>{if(e.data.length===0){return""}const r=e.data[0].length;const l=e.data.length;const a=r>5&&!e.rowMap;let s="``";if(!n){if(a){s+="|"}s+=(e.headings[0]==="name"||e.headings[0]==="item"?"":e.headings[0])+"|";for(let t=1;t<l;t++){s+=e.headings[t]+"|"}s=s.slice(0,-1)+"\n"}if(isNotEmpty(e.units)){if(a){s+="|"}for(let t=0;t<l;t++){s+=e.units[t]+"|"}s=s.slice(0,-1)+"\n"}for(let n=0;n<r;n++){if(a){s+=String(n+1)+"|"}for(let r=0;r<l;r++){const l=e.data[r][n];if(mixedFractionRegEx.test(l)){s+=format(Rnl.fromString(l),t,"100000.")+"|"}else{s+=l+"|"}}s=s.slice(0,-1)+"\n"}s=s.slice(0,-1).trim();s+="``";return s};const DataFrame=Object.freeze({append:append,dataFrameFromCSV:dataFrameFromCSV,dataFrameFromVectors:dataFrameFromVectors,matrix2table:matrix2table,display:display$2,displayAlt:displayAlt$1,quickDisplay:quickDisplay,range:range});const checkUnitEquality=(e,t)=>{let n;let r;if(e.expos&&t.expos){n=e.expos;r=t.expos}else{n=e;r=t}if(Array.isArray(n)){if(Array.isArray(r)){if(n.length!==r.length){return false}n.forEach(((e,t)=>{if(e!==r[t]){return false}}));return true}else{return false}}else{return n===r}};const append$1=(e,t,n,r)=>{let l;let a;if(e.dtype&dt.MAP){if(r!=="scalar"){return errorOprnd("BAD_APPEND",r)}l=e;a=t}else{if(n!=="scalar"){return errorOprnd("BAD_APPEND",n)}l=t;a=e}if(!(l.dtype&a.dtype)){errorOprnd("MAP_APPEND")}if(!checkUnitEquality(l.unit,a.unit)){errorOprnd("UNIT_APEND")}l.value.set(a.name,a.value);return l};const convertFromBaseUnits$1=(e,t,n)=>{e=mapMap(e,(e=>Rnl.divide(e,n)));if(!Rnl.isZero(t)){e=mapMap(e,(e=>Rnl.subtract(e,t)))}return e};const convertToBaseUnits$1=(e,t,n)=>{if(!Rnl.isZero(t)){e=mapMap(e,(e=>Rnl.add(e,t)))}return mapMap(e,(e=>Rnl.multiply(e,n)))};const display$3=(e,t,n,r=false)=>{const l=e.value.plain?e.value.plain:e.value;let a="";let s="";for(const[e,r]of l.entries()){a+=formatColumnName(e)+" & ";s+=format(r,t,n)+" & "}a=a.slice(0,-3);s=s.slice(0,-3);let o="\\begin{array}{c}";if(!r){o+=a+" \\\\ \\hline "}o+=s+"\\end{array}";if(e.unit&&e.unit.name){o+="\\;"+unitTeXFromString(e.unit.name)}return o};const displayAlt$2=(e,t,n,r=false)=>{const l=e.value.plain?e.value.plain:e.value;let a="";let s="";for(const[e,r]of l.entries()){a+=e+" | ";s+=format(r,t,n)+" | "}a=a.slice(0,-3);s=s.slice(0,-3);let o="``";if(!r){o+=a+"\n"}o+=s+"``";if(e.unit&&e.unit.name){o=`${o} '${e.unit.name}'`}return o};const singleValueFromMap=(e,t,n,r)=>{if(!e.value.has(t)){return errorOprnd("BAD_KEY",t)}const l=clone(e.value.get(t));if(!n){return{value:l,unit:e.unit,dtype:e.dtype-dt.MAP}}else if(r){return{value:l,unit:{expos:e.unit.expos},dtype:e.dtype-dt.MAP}}else{return{value:l,unit:allZeros,dtype:e.dtype-dt.MAP}}};const valueFromMap=(e,t,n)=>{for(let e=0;e<t.length;e++){if(t[e].dtype===dt.RATIONAL){return errorOprnd("NUM_KEY")}t[e]=t[e].value}if(t.length===1){const r=e.dtype&dt.RATIONAL;const l=t.length>1||n;return singleValueFromMap(e,t[0],r,l)}else{const n=new Map;for(let r=0;r<t.length;r++){n.set(t[r],e.value.get(t[r]))}return{value:n,unit:e.unit,dtype:e.dtype}}};const map=Object.freeze({append:append$1,convertFromBaseUnits:convertFromBaseUnits$1,convertToBaseUnits:convertToBaseUnits$1,display:display$3,displayAlt:displayAlt$2,valueFromMap:valueFromMap});const tt=Object.freeze({UNARY:0,BINARY:1,SUB:2,SUP:3,ACCENT:4,UNARYMINUS:5,DIV:6,PRIME:7,CURRENCY:8,ORD:9,VAR:10,NUM:11,SPACE:12,LONGVAR:13,LEFTBRACKET:14,RIGHTBRACKET:15,UNDEROVER:16,LEFTRIGHT:17,STRING:18,UNIT:19,BIN:20,ADD:21,MULT:22,REL:23,LOGIC:24,SEP:25,FUNCTION:26,ACCESSOR:28,ENVIRONMENT:29,FACTORIAL:30,SUPCHAR:31,ANGLE:32,ELLIPSIS:33,KEYWORD:34,PROPERTY:36,COMMENT:37,RETURN:38,TO:39,DATAFRAME:40,RICHTEXT:41});const minusRegEx=/^-(?![-=<>:])/;const numberRegEx$2=new RegExp(Rnl.numberPattern);const unitRegEx=/^(?:'[^']+'|[°ΩÅK])/;const texFromNumStr=(e,t)=>{let n="";if(e[2]){n="\\mathrm{"+e[2]+"}"}else if(e[5]){return texFromMixedFraction(e)}else{n=e[3];if(e[6]){n+="."+e[6]}n=formattedDecimal(n,t);if(e[8]){n+="\\%"}else if(e[7]){if(e[7].charAt(0)==="-"){n+="\\text{e-}"+e[7].slice(1)}else{n+="\\text{e}"+e[7]}}}if(e[1]){n="\\text{-}"+n}return n};const isUnary=e=>{switch(e.ttype){case tt.NUM:case tt.ORD:case tt.VAR:case tt.RIGHTBRACKET:case tt.LONGVAR:case tt.CURRENCY:case tt.SUPCHAR:case tt.PRIME:case tt.FACTORIAL:return false;default:return true}};const wordRegEx=/^(?:(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u212C\u2130\u2131\u210B\u2110\u2112\u2133\u211B\u212F\u210A\u2113\u2134]|(?:\uD835[\uDC00-\udc33\udc9c-\udccf\udd38-\udd50]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*|!in|-->|->|left\.|right\.|log10|log2)/;const words=Object.freeze({true:["true","\\mathord{\\text{true}}",tt.ORD,""],false:["false","\\mathord{\\text{false}}",tt.ORD,""],j:["j","j",tt.ORD,""],cos:["cos","\\cos",tt.FUNCTION,""],cosd:["cosd","\\operatorname{\\cos_d}",tt.FUNCTION,""],if:["if","\\mathrel{\\mathrm{if}}",tt.LOGIC,""],else:["else","\\mathrel{\\mathrm{else}}",tt.LOGIC,""],and:["and","\\mathrel{\\mathrm{and}}",tt.LOGIC,""],or:["or","\\mathrel{\\mathrm{or}}",tt.LOGIC,""],for:["for","\\mathrel{\\mathrm{for}}",tt.KEYWORD,""],while:["while","\\mathrel{\\mathrm{while}}",tt.KEYWORD,""],in:["in","\\mathrel{\\mathrm{in}}",tt.KEYWORD,""],break:["break","\\mathrel{\\mathrm{break}}",tt.KEYWORD,""],to:["to","\\mathbin{\\mathrm{to}}",tt.TO,""],raise:["raise","\\mathrel{\\mathrm{raise}}",tt.UNARY,""],echo:["echo","\\mathrel{\\mathrm{echo}}",tt.UNARY,""],return:["return","\\mathrel{\\mathrm{return}}",tt.RETURN,""],sqrt:["sqrt","\\sqrt",tt.UNARY,""],otherwise:["otherwise","\\mathrel{\\mathrm{otherwise}}",tt.LOGIC,""],root:["root","\\sqrt",tt.BINARY,""],sin:["sin","\\sin",tt.FUNCTION,""],sind:["sind","\\operatorname{\\sin_d}",tt.FUNCTION,""],tan:["tan","\\tan",tt.FUNCTION,""],tand:["tand","\\operatorname{\\tan_d}",tt.FUNCTION,""],cotd:["cotd","\\operatorname{\\cot_d}",tt.FUNCTION,""],secd:["secd","\\operatorname{\\sec_d}",tt.FUNCTION,""],cscd:["cscd","\\operatorname{\\csc_d}",tt.FUNCTION,""],log:["log","\\log",tt.FUNCTION,""],ln:["ln","\\ln",tt.FUNCTION,""],log10:["log10","\\log_{10}",tt.FUNCTION,""],log2:["log2","\\log_{2}",tt.FUNCTION,""],"log!":["log!","\\operatorname{log!}",tt.FUNCTION,""],"π":["π","π",tt.ORD,""],"ℓ":["ℓ","ℓ",tt.VAR,""],modulo:["modulo","\\operatorname{modulo}",tt.MULT,""],"->":["->","→",tt.REL,""],"--\x3e":["--\x3e","\\xrightarrow",tt.UNARY,""],"<--\x3e":["<--\x3e","\\xrightleftarrows",tt.UNARY,""]});const miscRegEx=/^([/÷\u2215_:,;^+\\\-–−*×∘⊗⦼⊙√∛∜·.%∘|╏‖¦><=≈≟≠≡≤≥≅∈∉⋐!¡‼¬∧∨⊻~#?⇒⟶⟵→←&@′″∀∃∫∬∮∑([{⟨⌊⎿⌈⎾〖〗⏋⌉⏌⌋⟩}\])˽∣ℂℕℚℝℤℓℏ∠¨ˆˉ˙˜▪✓\u00A0\u20D7$£¥€₨₩₪]+)/;const miscSymbols=Object.freeze({"#":["#","#",tt.COMMENT,""],"/":["/","\\dfrac{",tt.DIV,""],"//":["//","\\tfrac{",tt.DIV,""],"///":["///","/",tt.MULT,""],"∕":["∕","∕",tt.MULT,""],"÷":["÷","÷",tt.MULT,""],_:["_","_",tt.SUB,""],"^":["^","^",tt.SUP,""],"+":["+","+",tt.ADD,""],"-":["-","-",tt.ADD,""],"–":["-","-",tt.ADD,""],"−":["-","-",tt.ADD,""],"*":["*","*",tt.MULT,""],"×":["×","×",tt.MULT,""],"∘":["∘","\\circ",tt.MULT,""],"⊗":["⊗","⊗",tt.MULT,""],"√":["√","\\sqrt",tt.UNARY,""],"∛":["∛","\\sqrt[3]",tt.UNARY,""],"∜":["∜","\\sqrt[4]",tt.UNARY,""],"+-":["+-","±",tt.BIN,""],"**":["**","\\star",tt.BIN,""],"·":["·","⋅",tt.MULT,""],"...":["...","\\dots",tt.ORD,""],"%":["%","\\%",tt.FACTORIAL,""],"^*":["^*","^*",tt.FACTORIAL,""],"-:":["-:","÷",tt.MULT,""],"=":["=","=",tt.REL,""],"≈":["≈","≈",tt.REL,""],"==":["==","==",tt.REL,""],"≡":["≡","≡",tt.REL,""],">":[">","\\gt",tt.REL,""],"<":["<","\\lt",tt.REL,""],"?=":["?=","≟",tt.REL,""],"≟":["≟","≟",tt.REL,""],"≠":["≠","≠",tt.REL,""],"!=":["!=","≠",tt.REL,""],"<>":["<>","≠",tt.REL,""],":=":[":=","≔",tt.REL,""],"<=":["<=","≤",tt.REL,""],"≤":["≤","≤",tt.REL,""],">=":[">=","≥",tt.REL,""],"≥":["≥","≥",tt.REL,""],"-=":["-=","≡",tt.REL,""],"~=":["~=","≅",tt.REL,""],"≅":["≅","≅",tt.REL,""],"~~":["~~","≈",tt.REL,""],"~":["~","\\sim",tt.REL,""],"=>":["=>","⇒",tt.REL,""],"⟶":["⟶","\\xrightarrow",tt.UNARY,""],"⟵":["⟵","\\xleftarrow",tt.UNARY,""],"⇒":["⇒","⇒",tt.REL,""],"<=>":["<=>","⇔",tt.REL,""],"-<":["-<","≺",tt.REL,""],">-":[">-","≻",tt.REL,""],"-<=":["-<=","⪯",tt.REL,""],">-=":[">-=","⪰",tt.REL,""],"_|_":["_|_","\\bot",tt.REL,""],"|--":["|--","⊢",tt.REL,""],"|==":["|==","\\models",tt.REL,""],"∈":["∈","∈",tt.REL,""],"∉":["∉","∉",tt.REL,""],"⋐":["⋐","⋐",tt.REL,""],"▪":["▪","\\mathrel{▪}",tt.REL,""],"!":["!","!",tt.FACTORIAL,""],"‼":["‼","!!",tt.FACTORIAL,""],"!!":["!!","!!",tt.FACTORIAL,""],"¡":["¡","¡",tt.FACTORIAL,""],"&":["&","\\mathbin{\\&}",tt.ADD,""],"&_":["&_","\\mathbin{\\underline{\\&}}",tt.ADD,""],"′":["′","'",tt.PRIME,""],"″":["″","''",tt.PRIME,""],"′′":["′′","''",tt.PRIME,""],"′′′":["′′′","'''",tt.PRIME,""],"∀":["∀","∀",tt.LOGIC,""],"∃":["∃","∃",tt.LOGIC,""],"∧":["∧","∧",tt.LOGIC,""],"∨":["∨","∨",tt.LOGIC,""],"⊻":["⊻","⊻",tt.LOGIC,""],"¬":["¬","¬",tt.UNARY,""],":":[":",":",tt.LOGIC,""],"∫":["∫","∫",tt.UNDEROVER,""],"∬":["∬","∬",tt.UNDEROVER,""],"∮":["∮","∮",tt.UNDEROVER,""],"∑":["∑","∑",tt.UNDEROVER,""],"(":["(","(",tt.LEFTBRACKET,")"],"[":["[","[",tt.LEFTBRACKET,"]"],"{":["{","\\{",tt.LEFTBRACKET,"\\}"],"{:":["{:","{",tt.LEFTBRACKET,"}"],"⟨":["⟨","⟨",tt.LEFTBRACKET,"⟩"],")":[")",")",tt.RIGHTBRACKET,""],"]":["]","]",tt.RIGHTBRACKET,""],"}":["}","\\}",tt.RIGHTBRACKET,""],"⟩":["⟩","⟩",tt.RIGHTBRACKET,""],":}":[":}","}",tt.RIGHTBRACKET,""],"|":["|","|",tt.LEFTRIGHT,""],"||":["||","\\Vert ",tt.LEFTRIGHT,""],"‖":["‖","\\Vert ",tt.LEFTRIGHT,""],"<<":["<<","⟨",tt.LEFTBRACKET,"⟩"],">>":[">>","⟩",tt.RIGHTBRACKET,""],"⎿":["⎿","\\lfloor ",tt.LEFTBRACKET,"\\rfloor "],"⌋":["⌋","\\rfloor ",tt.RIGHTBRACKET,""],"⏌":["⏌","\\rfloor ",tt.RIGHTBRACKET,""],"⌈":["⌈","\\lceil ",tt.LEFTBRACKET,"\\rceil "],"⎾":["⎾","\\lceil ",tt.LEFTBRACKET,"\\rceil "],"⌉":["⌉","\\rceil ",tt.RIGHTBRACKET,""],"⏋":["⏋","\\rceil ",tt.RIGHTBRACKET,""],"〖":["〖","{",tt.LEFTBRACKET,"}"],"〗":["〗","}",tt.RIGHTBRACKET,""],"¦":["¦","\\mid ",tt.REL,""],"ℂ":["ℂ","ℂ",tt.ORD,""],"ℕ":["ℕ","ℕ",tt.ORD,""],"ℚ":["ℚ","ℚ",tt.ORD,""],"ℝ":["ℝ","ℝ",tt.ORD,""],"ℤ":["ℤ","ℤ",tt.ORD,""],"ℏ":["ℏ","ℏ",tt.ORD,""],"→":["→","→",tt.REL,""],"←":["←","←",tt.REL,""],">->":[">->","↣",tt.REL,""],"->>":["->>","↠",tt.REL,""],"|->":["|->","↦",tt.REL,""],"<--":["<--","\\xleftarrow",tt.UNARY,""],"==>":["==>","\\xRightarrow",tt.UNARY,""],"<==":["<==","\\xLeftarrow",tt.UNARY,""],"<--\x3e":["<--\x3e","\\xleftrightarrow",tt.UNARY,""],"<==>":["<==>","\\xLeftrightarrow",tt.UNARY,""],"∠":["∠","∠",tt.ANGLE,""],"✓":["✓","✓",tt.ORD,""],"˽":["˽","~",tt.SPACE,""],"\\,":["\\,",",\\:",tt.SEP,""],"\\;":["\\;",";\\:",tt.SEP,""],"…":["…","…",tt.ORD,""],"..":["..","..",tt.RANGE,""],",":[",",",\\:",tt.SEP,""],";":[";",";\\:",tt.SEP,""],$:["$","\\$",tt.CURRENCY,""],"£":["£","£",tt.CURRENCY,""],"¥":["¥","¥",tt.CURRENCY,""],"€":["€","€",tt.CURRENCY,""],"₨":["₨","₨",tt.CURRENCY,""],"₩":["₩","₩",tt.CURRENCY,""],"₪":["₪","₪",tt.CURRENCY,""]});const texFunctionRegEx=/^(\\[A-Za-z]+\.?|\\([:.!\u0020]|'+))/;const texFunctions=Object.freeze({"\\aleph":["\\aleph","ℵ",tt.VAR,""],"\\beth":["\\beth","ℶ",tt.VAR,""],"\\gimel":["gimel","ℷ",tt.VAR,""],"\\daleth":["daleth","ℸ",tt.VAR,""],"\\atop":["\\atop","\\atop{",tt.DIV,""],"\\cdots":["\\cdots","⋯",tt.BIN,""],"\\vdots":["\\vdots","⋮",tt.BIN,""],"\\ddots":["\\ddots","⋱",tt.BIN,""],"\\iff":["\\iff","\\iff",tt.LOGIC,""],"\\land":["\\land","\\land",tt.BIN,""],"\\lor":["\\lor","\\lor",tt.BIN,""],"\\in":["\\in","∈",tt.REL,""],"\\notin":["\\notin","∉",tt.REL,""],"\\Subset":["\\Subset","⋐",tt.REL,""],"\\left.":["\\left.","\\left.",tt.LEFTBRACKET,"\\right."],"\\right.":["\\right.","\\right.",tt.RIGHTBRACKET,""],"\\mod":["\\mod","\\mod",tt.BIN,""],"\\diamond":["\\diamond","\\diamond",tt.ORD,""],"\\square":["\\square","\\square",tt.ORD,""],"\\int":["\\int","\\int",tt.UNDEROVER,""],"\\iint":["\\iint","\\iint",tt.UNDEROVER,""],"\\iiint":["\\iiint","\\iiint",tt.UNDEROVER,""],"\\oint":["\\oint","\\oint",tt.UNDEROVER,""],"\\oiint":["\\oiint","\\oiint",tt.UNDEROVER,""],"\\oiiint":["\\oiiint","\\oiiint",tt.UNDEROVER,""],"\\over":["\\over","\\dfrac{",tt.DIV],"\\sum":["\\sum","\\sum",tt.UNDEROVER,""],"\\prod":["\\prod","\\prod",tt.UNDEROVER,""],"\\quad":["\\quad","\\quad",tt.SPACE,""],"\\qquad":["\\qquad","\\qquad",tt.SPACE,""]});const accents$1=Object.freeze(["Bbb","Overrightarrow","acute","bar","bm","bold","boldsymbol","breve","check","ddot","dot","frak","grave","hat","mathbb","mathbf","mathcal","mathfrak","mathit","mathnormal","mathring","mathrm","mathscr","mathsf","mathtt","overbrace","overgroup","overleftarrow","overleftharpoon","overleftrightarrow","overline","overrightarrow","overrightharpoon","tilde","underbrace","undergroup","underleftarrow","underleftrightarrow","underline","underrightarrow","utilde","vec","widecheck","widehat","widetilde"]);const mathOperators=Object.freeze(["arccos","arcsin","arctan","arctg","arcctg","cos","cosec","cosh","cot","cotg","coth","csc","ctg","cth","det","dim","exp","gcd","lg","lim","ln","log","max","min","sec","sin","sinh","sh","sqrt","sup","tan","tanh","tg","th"]);const colors=Object.freeze(["blue","gray","green","orange","pink","purple","red"]);const unaries=Object.freeze(["bcancel","boxed","cancel","clap","color","llap","mathclap","not","operatorname","phantom","pu","rlap","sout","sqrt","tag","textbf","textit","textmd","textnormal","textrm","textsc","textsf","texttt","textup","xLeftarrow","xLeftrightarrow","xRightarrow","xcancel","xleftarrow","xleftrightarrow","xleftharpoondown","xleftharpoons","xleftharpoonup","xlongequal","xmapsto","xrightarrow","xrightharpoondown","xrightharpoonup","xrightleftarrows","xrightleftharpoons","xtofrom","xtwoheadleftarrow","xtwoheadrightarrow"]);const binaries=Object.freeze(["dfrac","frac","lower","overset","raisebox","stackrel","tag","tfrac","underset"]);const texREL=Object.freeze(["Bumpeq","Colonapprox","Coloneq","Coloneqq","Colonsim","Darr","Doteq","Downarrow","Eqcolon","Eqqcolon","Harr","Larr","Leftarrow","Leftrightarrow","Lleftarrow","Longleftarrow","Longleftrightarrow","Longrightarrow","Lrarr","Lsh","Rarr","Rightarrow","Rrightarrow","Rsh","Supset","Subset","Uarr","Uparrow","Updownarrow","Vdash","Vvdash","approx","approxeq","asymp","backepsilon","backsim","backsimeq","between","bowtie","bumpeq","circeq","circlearrowleft","circlearrowright","colonapprox","coloneq","coloneqq","colonsim","cong","curlyeqprec","curlyeqsucc","curvearrowleft","curvearrowright","dArr","darr","dashleftarrow","dashrightarrow","dashv","dblcolon","doteq","doteqdot","downarrow","downdownarrows","downharpoonleft","downharpoonright","eqcirc","eqcolon","eqqcolon","eqsim","eqslantgtr","eqslantless","equiv","fallingdotseq","frown","ge","geq","geqq","geqslant","gets","gg","ggg","gggtr","gnapprox","gneq","gneqq","gnsim","gt","gtrapprox","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","hArr","harr","hookleftarrow","hookrightarrow","iff","impliedby","implies","in","isin","Join","gets","impliedby","implies","in","isin","lArr","larr","le","leadsto","leftarrow","leftarrowtail","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","leq","leqq","leqslant","lessapprox","lesseqgtr","lesseqqgtr","lessgtr","lesssim","ll","lll","llless","lnapprox","lneq","lneqq","lnsim","longleftarrow","longleftrightarrow","longmapsto","longrightarrow","looparrowleft","looparrowright","lrArr","lrarr","lt","lvertneqq","mapsto","mid","models","multimap","nLeftarrow","nLeftrightarrow","nRightarrow","nVDash","nVdash","ncong","ne","nearrow","neq","nexists","ngeq","ngeqq","ngeqslant","ngtr","ni","nleftarrow","nleftrightarrow","nleq","nleqq","nleqslant","nless","nmid","notin","notni","nparallel","nprec","npreceq","nrightarrow","nshortmid","nshortparallel","nsim","nsubseteq","nsubseteqq","nsucc","nsucceq","nsupseteq","nsupseteqq","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","nvDash","nvdash","nwarrow","owns","parallel","perp","pitchfork","prec","precapprox","preccurlyeq","preceq","precnapprox","precneqq","precnsim","precsim","propto","rArr","rarr","restriction","rightarrow","rightarrowtail","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","risingdotseq","searrow","shortmid","shortparallel","sim","simeq","smallfrown","smallsmile","smile","sqsubset","sqsubseteq","sqsupset","sqsupseteq","sub","sube","subset","subseteq","subseteqq","subsetneq","subsetneqq","succ","succapprox","succcurlyeq","succeq","succnapprox","succneqq","succnsim","succsim","supe","supset","supseteq","supseteqq","supsetneq","supsetneqq","swarrow","thickapprox","thicksim","to","trianglelefteq","triangleq","trianglerighteq","twoheadleftarrow","twoheadrightarrow","uArr","uarr","uparrow","updownarrow","upharpoonleft","upharpoonright","upuparrows","varpropto","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartriangle","vartriangleleft","vartriangleright","vcentcolon","vdash","vDash"]);const superRegEx=/^⁻?[²³¹⁰⁴⁵⁶⁷⁸⁹]+/;const cloneToken=e=>[e[0],e[1],e[2],e[3]];const accentFromChar$1=Object.freeze({"̀":"\\grave","́":"\\acute","̂":"\\hat","̃":"\\tilde","̄":"\\bar","̅":"\\bar","̇":"\\dot","̈":"\\ddot","̊":"\\mathring","̌":"\\check","̲":"\\underline","⃐":"\\overleftharpoon","⃑":"\\overrightharpoon","⃖":"\\overleftarrow","⃗":"\\vec","⃡":"\\overleftrightarrow"});const wideAccentFromChar=Object.freeze({"̀":"\\grave","́":"\\acute","̂":"\\widehat","̃":"\\widetilde","̄":"\\overline","̅":"\\overline","̇":"\\dot","̈":"\\ddot","̊":"\\mathring","̌":"\\check","̲":"\\underline","⃐":"\\overleftharpoon","⃑":"\\overrightharpoon","⃖":"\\overleftarrow","⃗":"\\overrightarrow","⃡":"\\overleftrightarrow"});const groupSubscript=e=>{const t=e.indexOf("_");return t===-1?e:e.slice(0,t+1)+"{"+e.slice(t+1)+"}"};const checkForTrailingAccent=e=>{const t=e.slice(-1);if(/[\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]/.test(t)){e=e.slice(0,-1);return e==="i"?accentFromChar$1[t]+"{ı}":e==="j"?accentFromChar$1[t]+"{ȷ}":e.length===1?accentFromChar$1[t]+"{"+e+"}":wideAccentFromChar[t]+"{"+e+"}"}else{return e}};const lexOneWord=(e,t)=>{const n=wordRegEx.exec(e);if(n){let r=n[0].replace(/_*$/,"");const l=e.charAt(r.length);const a=words[r];if(a&&l!=="′"){return a}else if(/^\(/.test(l)){return t.ttype===tt.ACCENT?[r,r+"}{",tt.FUNCTION,""]:r==="sqrt"?[r,"\\sqrt",tt.UNARY,""]:r==="f"?[r,r,tt.FUNCTION,""]:isIn(r,mathOperators)?[r,"\\"+r,tt.FUNCTION,""]:[r,"\\operatorname{"+groupSubscript(r)+"}",tt.FUNCTION,""]}else if(t.ttype===tt.ACCESSOR){return[r,r,tt.PROPERTY,""]}else if(/[_\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]/.test(r)){let t="";if(r.indexOf("_")===-1){t=checkForTrailingAccent(r);return[r,t,r.length>2?tt.LONGVAR:tt.VAR,""]}else{const n=r.split("_");for(let e=n.length-1;e>=0;e--){n[e]=checkForTrailingAccent(n[e]);if(e>0){n[e]="_\\text{"+n[e]+"}"}}t=n.join("");const l=/^′*/.exec(e.slice(r.length));if(l){r+=l[0];t+="'".repeat(l[0].length)}const a=t.indexOf("_");if(a>-1){t=t.slice(0,a)+"{"+t.slice(a)+"}"}return[r,t,n[0].length>1?tt.LONGVAR:tt.VAR,""]}}else if(r.length===2&r.charAt(0)==="\ud835"){return[r,r,tt.VAR,""]}else if(r.length>1){return[r,r,tt.LONGVAR,""]}else{if(r.charAt(0)==="\ud835"){return[r.substring(0,2),r.substring(0,2),tt.VAR,""]}else{return[r.charAt(0),r.charAt(0),tt.VAR,""]}}}};const lex=(e,t,n,r=false)=>{let l=0;let a="";let s;if(e.charAt(0)==='"'){l=e.indexOf('"',1);if(l>0){a=e.substring(1,l).replace(/\r?\n.*/,"");return['"'+a+'"',a,tt.STRING,""]}else{return[e,e.replace(/\r?\n.*/,""),tt.STRING,""]}}if(/^#/.test(e)){a=e.slice(2);l=a.indexOf("\n");if(l>-1){const e=a.indexOf("\n");if(e>-1&&e<l){l=e}}if(l>-1){a=a.slice(0,l)}return[`#${a}`,`\\text{\\texttt{ \\#${a}}}`,tt.COMMENT,""]}if(/^``/.test(e)){l=e.indexOf("`",e.charAt(2)==="`"?3:2);const n=l>0?e.slice(2,l):e.slice(2);const a=tablessTrim(n);let s="";if(r){s=DataFrame.quickDisplay(a)}else{const e=DataFrame.dataFrameFromCSV(a,{});if(e.dtype===dt.DATAFRAME){s=DataFrame.display(e.value,"h3",t)}else{s=map.display(e,"h3",t)}}return["``"+n+"``",s,tt.DATAFRAME,""]}if(e.charAt(0)==="`"){l=e.indexOf("`",1);if(l>0){a=e.substring(1,l).replace(/\r?\n.*/,"");return["`"+a+"`",a,tt.RICHTEXT,""]}else{return[e,e.replace(/\r?\n.*/,""),tt.RICHTEXT,""]}}if(unitRegEx.test(e)){l=e.indexOf("'",1);if(l>0){a=e.substring(1,l);return["'"+a+"'",unitTeXFromString(a),tt.UNIT,""]}else{return[e.charAt(0),e.charAt(0),tt.UNIT,""]}}s=texFunctionRegEx.exec(e);if(s){const e=s[0];a=e.substring(1);if(isIn(a,accents$1)){return[e,e,tt.ACCENT,""]}if(isIn(a,unaries)){return[e,e,tt.UNARY,""]}if(isIn(a,colors)){return[e,"\\textcolor{"+a+"}",tt.UNARY,""]}if(isIn(a,binaries)){return[e,e,tt.BINARY,""]}if(isIn(a,texREL)){return[e,e,tt.REL,""]}const t=texFunctions[e];if(t){return cloneToken(t)}return[e,e,tt.ORD,""]}if(minusRegEx.test(e)){if(isUnary(n)){const n=e.match(numberRegEx$2);if(n){a=texFromNumStr(n,t);return[n[0],a,tt.NUM,""]}}return["-","-",tt.ADD,""]}const o=e.match(numberRegEx$2);if(o){a=texFromNumStr(o,t);return[o[0],a,tt.NUM,""]}if(/^_[([{]/.test(e)){return["_","_",tt.SUB,""]}const i=lexOneWord(e,n);if(i){return cloneToken(i)}const u=superRegEx.exec(e);if(u){return[u[0],u[0],tt.SUPCHAR,""]}s=miscRegEx.exec(e);if(s){const e=s[0];for(let t=e.length;t>=1;t--){a=e.substr(0,t);if(miscSymbols[a]){return cloneToken(miscSymbols[a])}}}const c=e.charAt(0);if(c==="."&&(n.ttype===tt.VAR||n.ttype===tt.LONGVAR||n.ttype===tt.STRING||n.input==="]"||n.ttype===tt.PROPERTY)){return[".","{.}",tt.ACCESSOR,""]}return[c,addTextEscapes(c),tt.VAR,""]};const builtInFunctions=["Gamma","Im","Re","abs","acos","acosd","acosh","acot","acotd","acoth","acsc","acscd","acsch","argument","asec","asecd","asech","asin","asind","asinh","atan","atan2","atand","atanh","binomial","chr","cos","cosd","cosh","cosh","cot","cotd","coth","coth","count","csc","cscd","csch","csch","exp","fetch","format","gcd","hypot","isNaN","length","lerp","ln","log","log10","log2","logFactorial","logGamma","logn","logΓ","matrix2table","random","rms","round","roundSig","roundn","sec","secd","sech","sech","sign","sin","sind","sinh","startSvg","string","tan","tand","tanh","tanh","trace","transpose","zeros","Γ"];const builtInReducerFunctions=["accumulate","dataframe","max","mean","median","min","product","range","stddev","sum","variance"];const trigFunctions=["cos","cosd","cot","cotd","csc","cscd","sec","secd","sin","sind","tand","tan"];const rationalRPN=e=>{const t=Rnl.fromString(e);return"®"+String(t[0])+"/"+String(t[1])};const calligraphicRegEx=/^(:?\uD835[\uDC9C-\uDCCF]|[\udc9d\udca0\udca1\udca3\udca4\udca7\udca8\udcad\udcba\udcbc\udcc1\udcc4])/;const bmpCalligraphic={"ℬ":"B","ℰ":"E","ℱ":"F","ℋ":"H","ℐ":"I","ℒ":"L","ℳ":"M","ℛ":"R","ℯ":"e","ℊ":"g","ℓ":"l","ℴ":"o"};const assertCalligraphic=e=>{const t=calligraphicRegEx.exec(e);if(!t){return e}let n="";if(e.charAt(0)==="\ud835"){const t=e.charCodeAt(1);n=String.fromCharCode(t-(t<=56501?56411:56405))}else{n=bmpCalligraphic[e.charAt(0)]}return`\\mathcal{${n}}`+e.slice(t[0].length)};const checkForUnaryMinus=(e,t)=>{switch(t.ttype){case tt.NUM:case tt.ORD:case tt.VAR:case tt.RIGHTBRACKET:case tt.LONGVAR:case tt.PROPERTY:case tt.UNIT:case tt.SUPCHAR:case tt.PRIME:case tt.FACTORIAL:return e}if(e.output==="-"){return{input:"~",output:"\\text{-}",ttype:tt.UNARYMINUS}}else{return{input:"+",output:"~+",ttype:tt.UNARYMINUS}}};const numFromSuperChar={"⁻":"-","²":"2","³":"3","¹":"1","⁰":"0","⁴":"4","⁵":"5","⁶":"6","⁷":"7","⁸":"8","⁹":"9"};const numFromSupChars=e=>{let t="";for(const n of e){t+=numFromSuperChar[n]}return t};const colorSpecRegEx=/^(#([a-f0-9]{6}|[a-f0-9]{3})|[a-z]+|\([^)]+\))/i;const factors=/^[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133\uD835[({√∛∜]/;const setUpIf=(e,t,n,r)=>{const l=e.replace(/^.*\xa0/,"").replace(/§$/," ");n.push(l);e=e.length===l.length?"":e.slice(0,e.length-l.length);r.numArgs+=1;if(t==="otherwise"){e+="true"}return e};const functionExpoRegEx=/^[\^⁻⁰¹²³\u2074-\u2079]/;const openParenRegEx=/^ *\(/;const exponentOfFunction=(e,t,n)=>{let r="";if(e.charAt(0)!=="^"){r=/^[⁰¹²³\u2074-\u2079⁻]+/.exec(e)[0];r=numeralFromSuperScript(r)}else if(!openParenRegEx.test(e.slice(1))){r=lex(e.slice(1),t,{input:"",output:"",ttype:50})[0]}else{r="(";let t=1;for(let n=2;n<e.length;n++){const l=e.charAt(n);r+=l;if("\"'`".indexOf(l)>-1){const t=e.indexOf(l,n+1);r+=e.slice(n+1,t+1);n=t}else if("([{⟨⌈⎿⎾〖".indexOf(l)>-1){t+=1}else if(")]}⟩⌉⌋⏌〗".indexOf(l)>-1){t-=1}if(t===0){break}}}const l=r.charAt(0)==="("?r.slice(1,-1).trim():r;if(n){const e=parse(l,t,true);return[r,"{"+e[0]+"}",e[1]]}else{const e=parse(l,t,false);return[r,"{"+e+"}",""]}};const testForImplicitMult=(e,t,n)=>{if(t.length>0){const e=t[t.length-1].ttype;if(e===tt.UNARY||e===tt.BINARY){return false}if(e===tt.SUB||e===tt.SUP){if(t[t.length-1].isOnFunction){return false}}}let r=false;if(e.output){const t=e.output.charAt(e.length-1);if(")]}".indexOf(t)>-1){if((t===")"||t==="]")&&/^[([]/.test(n)){return false}else{r=true}}else{switch(e.ttype){case tt.ORD:case tt.NUM:case tt.VAR:case tt.LONGVAR:case tt.PRIME:case tt.SUP:case tt.SUPCHAR:case tt.SUB:case tt.PROPERTY:case tt.UNIT:case tt.RIGHTBRACKET:case tt.FACTORIAL:r=true;break;default:r=false}}}if(r&&nextCharIsFactor(n,e.ttype)){return true}return false};const nextCharIsFactor=(e,t)=>{const n=e.replace(leadingLaTeXSpaceRegEx,"");const r=n.charAt(0);let l=false;if(n.length>0){if(r==="|"||r==="‖");else if(/^[({[√∛∜0-9]/.test(n)&&isIn(t,[tt.ORD,tt.VAR,tt.NUM,tt.LONGVAR,tt.RIGHTBRACKET,tt.CURRENCY,tt.SUPCHAR])){return true}else{if(factors.test(r)){l=!/^(if|and|atop|or|else|modulo|otherwise|not|for|in|while|end)\b/.test(n)}}}return l};const cloneToken$1=e=>({input:e.input,output:e.output,ttype:e.ttype,closeDelim:e.closeDelim});const leadingSpaceRegEx$1=/^[ \f\r\t\v\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;const leadingLaTeXSpaceRegEx=/^(˽|\\quad|\\qquad)+/;const rpnPrecFromType=[12,12,15,13,16,10,7,10,12,-1,-1,-1,1,-1,0,0,-1,0,-1,14,0,6,7,5,4,1,-1,16,15,-1,14,13,9,3,2,10,-1,-1,4,3,-1,-1];const texPrecFromType=[12,12,15,13,16,10,2,10,12,2,2,2,1,2,2,0,1,1,2,14,1,2,2,1,1,1,2,-1,15,2,14,13,9,-1,1,-1,15,-1,1,-1,2,2];const dNOTHING=0;const dPAREN=1;const dFUNCTION=2;const dACCESSOR=3;const dMATRIX=4;const dVECTORFROMRANGE=5;const dCASES=7;const dBINOMIAL=8;const dSUBSCRIPT=9;const dDISTRIB=10;const parse=(e,t="1,000,000.",n=false,r=false)=>{let l="";let a="";let s={};let o={input:"",output:"",ttype:50};let i=true;let u=false;let c=0;let p=false;let d=false;let f=false;let m=false;let R=false;let h;const g=[];const y=[];const b=[{delimType:dNOTHING,isTall:false}];let O=true;let x="";let v="";let A=" ";let N=-1;const E=[];const T=e=>{if(n&&e>=0){while(y.length>0){const t=y[y.length-1].prec;if(t<e||t===13&&e===13){break}a+=y.pop().symbol+A}}};const M=(t,r,i)=>{if(!r){return}if(g.length===0){if(o.ttype!==tt.RIGHTBRACKET&&o.ttype!==tt.LEFTRIGHT){h={pos:c,ttype:o.ttype,closeDelim:""}}return}const u=g[g.length-1];if((t===2||t===12||t===14||t===15)&&(o.ttype!==tt.RIGHTBRACKET&&o.ttype!==tt.LEFTRIGHT)&&u.prec<t){h={pos:c,ttype:o.ttype,closeDelim:""};return}let p={};while(g[g.length-1].prec>=t&&!(g[g.length-1].prec===13&&t===13)){h=g.pop();if(h.prec===0){p=b[b.length-1];if((h.ttype===tt.LEFTBRACKET||h.ttype===tt.LEFTRIGHT)&&h.closeDelim.length>0){if(g.length>0){if(h.ttype===tt.LEFTRIGHT&&s.output===")"&&g[g.length-1].closeDelim===")"){if(p.isTall){l=l.substring(0,h.pos)+"\\middle"+l.substring(h.pos);b[b.length-1].isTall=true}h=g.pop();b.pop();p=b[b.length-1]}}if(p.delimType===dMATRIX){const e=l.slice(h.pos,h.pos+1)==="\\"?2:1;l=l.slice(0,h.pos)+p.open+l.slice(h.pos+e);h.closeDelim=p.close}else if(p.delimType===dCASES){l=l.slice(0,h.pos)+p.open+l.slice(h.pos+2);h.closeDelim=p.close}else if(p.delimType===dPAREN&&p.name==="("&&/^(\/|\\atop\s)/.test(e)){l=l.substring(0,h.pos)+l.substring(h.pos+1);h.closeDelim=""}else if(p.isPrecededByDiv&&p.delimType===dPAREN&&p.name==="("&&(/^[^^_!%°⁻²³¹⁰⁴⁵⁶⁷⁸⁹]/.test(e)||e.length===0)){l=l.substring(0,h.pos)+l.substring(h.pos+1);h.closeDelim=""}else if(p.isTall){if(/^\\left/.test(l.substring(h.pos))===false){l=l.substring(0,h.pos)+"\\left"+l.substring(h.pos)}if(/\\right/.test(h.closeDelim)===false){h.closeDelim="\\right"+s.output}}}}l=l.replace(/\\, *$/,"");l+=h.closeDelim;if(h.closeDelim.slice(-1)==="{"){if(h.ttype===tt.BINARY){g.push({prec:12,pos:h.pos,ttype:tt.UNARY,closeDelim:"}"});if(n){a+=A;if(y[y.length-1].symbol==="\\sqrt"){y[y.length-1].symbol="root"}}}h.ttype=tt.UNARY;o={input:"",output:"",ttype:tt.UNARY};return}if(g.length===0||h.prec===0){return}}};e=e.replace(leadingSpaceRegEx$1,"");e=e.replace(/\s+$/,"");while(e.length>0){if(e.charAt(0)==="\n"){e=e.slice(1);const t=o?o.input.slice(-1):"0";if(o.ttype===tt.COMMENT||"{[(,;+-".indexOf(t)===-1&&!/^ *[)}\]]/.test(e)){M(0,true);l+="\\\\ ";const t=/^ +/.exec(e);e=e.replace(/^ */,"");if(e.length>0&&e.charAt(0)==="="&l.indexOf("=")>-1){u=true;l+="&"}else if(t){l+="\\quad ".repeat(t[0].length-1)}}e=e.trim()}i=true;m=p&&O&&testForImplicitMult(o,g,e);if(m){const e=o.ttype;s={input:"⌧",output:[tt.LONGVAR,tt.NUM,tt.UNIT].includes(e)?"\\,":"",ttype:tt.MULT};d=false;f=false;i=false}if(i){const n=lex(e,t,o,r);s={input:n[0],output:n[1],ttype:n[2],closeDelim:n[3]};e=e.substring(s.input.length);d=leadingSpaceRegEx$1.test(e)||/^(˽|\\quad|\\qquad)+/.test(e);f=/^[ \n]/.test(e);e=e.replace(leadingSpaceRegEx$1,"");R=nextCharIsFactor(e,s.ttype)}switch(s.ttype){case tt.SPACE:case tt.BIN:case tt.ADD:case tt.MULT:case tt.REL:case tt.UNDEROVER:{if(s.output.length>0&&"- +".indexOf(s.output)>-1){s=checkForUnaryMinus(s,o)}if(n&&s.ttype!==tt.SPACE){if(s.output!=="\\text{-}"){a+=A}N=rpnPrecFromType[s.ttype];T(N)}const e=texPrecFromType[s.ttype];M(e,O);l+=s.output+" ";c=l.length;if(s.ttype===tt.UNDEROVER&&b.length>1){b[b.length-1].isTall=true}else if(n){y.push({prec:N,symbol:s.input})}O=true;break}case tt.ACCESSOR:case tt.ANGLE:s=checkForUnaryMinus(s,o);if(n){a+=A;N=rpnPrecFromType[s.ttype];T(N);y.push({prec:N,symbol:s.input})}M(texPrecFromType[s.ttype],O);l+=n?s.input:s.output+" ";O=true;break;case tt.NUM:case tt.ORD:M(2,O);if(n){T(-1);a+=s.ttype===tt.NUM?rationalRPN(s.input):s.input}if(p){c=l.length}if(n&&(o.ttype===tt.MULT||R&&o.ttype!==tt.DIV)){s.output="("+s.output+")"}l+=s.output+" ";O=true;if(!d&&R){M(2,O);if(n){a+=A;T(7);y.push({prec:rpnPrecFromType[tt.MULT],symbol:"⌧"})}}break;case tt.STRING:{M(2,O);const e=s.input.charAt(0);if(n){a+=e+s.output+e}if(p){c=l.length}s.output=addTextEscapes(s.output);s.output=s.output.replace(/ +$/,"\\,");l+="\\text{"+s.output+"}";O=true;break}case tt.RICHTEXT:{M(2,O);const e=s.input.charAt(0);if(n){a+=e+s.output+e}if(p){c=l.length}s.output=s.output==="`"?"`":parse(s.output,t,false);l+="{"+s.output+"}";O=true;break}case tt.DATAFRAME:M(2,O);c=l.length;l+=s.output;O=true;break;case tt.VAR:case tt.LONGVAR:{if(s.ttype===tt.LONGVAR&&o.input==="⌧"){l+="\\,"}M(7,O);if(p){c=l.length}s.output=assertCalligraphic(s.output);if(!n){if(s.ttype===tt.LONGVAR){s.output="\\mathrm{"+s.output+"}"}}else if(o.input==="for"){a+='"'+s.input+'"'}else{if(/^(\.[^.]|\[)/.test(e)){s.output=s.ttype===tt.LONGVAR?"\\mathrm{"+s.output+"}":s.output}else{s.output=s.input;s.output="〖"+s.output}a+="¿"+s.input}l+=s.output+(e.charAt(0)==="."?"":" ");if(n){b[b.length-1].isTall=true}O=true;break}case tt.UNIT:{M(14,true);g.push({prec:14,pos:h.pos,ttype:tt.UNIT,closeDelim:""});if(n){T(14);a+=A+"applyUnit"+A+s.input.replace(/'/g,"")}if(!/^'?°'?$/.test(s.input)){l+="\\;"}l+=s.output;O=true;break}case tt.PROPERTY:{M(15,O);const t=s.input.indexOf("_");if(n){a+='"'+s.output+'"';l+=`\\mathrm{${s.output}}`;if(e.charAt(0)!=="."){l+=" "}}else if(t>-1){l+=s.input.substring(0,t)+"_\\mathrm{"+s.input.substring(t+1)+"}"}else{s.output=addTextEscapes(s.output);s.output=s.output.replace(/ +$/,"\\,");l+="\\text{"+s.output+"}"}O=true;break}case tt.TO:{b[b.length-1].delimType=dDISTRIB;M(1,O);c=l.length;l+=s.output;if(n){a+=A;T(3);const e=b[b.length-1].symbol;const t=e==="("?"normal":e==="["?"uniform":"lognormal";y.push({prec:3,symbol:t})}break}case tt.RANGE:{M(1,O);c=l.length;if(n){a+=A;T(3);y.push({prec:3,symbol:".."});if(e.charAt(0)==="]"||e.length===0){a+='"∞"'}}l+=s.output;break}case tt.DIV:if(n){a+=A}M(2,true);T(7);if(s.input==="//"){g.push({prec:2,pos:h.pos,ttype:tt.DIV,closeDelim:"}"});l=l.substring(0,h.pos)+"\\tfrac{"+l.substring(h.pos)+"}{"}else if(s.input==="/"||s.input==="\\over"){g.push({prec:2,pos:h.pos,ttype:tt.DIV,closeDelim:"}"});l=l.substring(0,h.pos)+"\\dfrac{"+l.substring(h.pos)+"}{"}else{g.push({prec:2,pos:h.pos,ttype:tt.DIV,closeDelim:"}}"});l=l.substring(0,h.pos)+"{{"+l.substring(h.pos)+"}\\atop{";if(b[b.length-1].name==="("){b[b.length-1].delimType=dBINOMIAL}}if(n){if(s.input==="\\atop"){if(b[b.length-1].delimType===dBINOMIAL){y.push({prec:7,symbol:"()"})}}else{y.push({prec:7,symbol:s.input})}}b[b.length-1].isTall=true;c=l.length;O=false;break;case tt.SUB:{M(15,true);const e=o.ttype===tt.FUNCTION?"}{":"}";g.push({prec:15,pos:h.pos,ttype:tt.SUB,closeDelim:e});l+="_{";if(n){a+="_"}O=false;break}case tt.SUP:if(n){if(/¿e$/.test(a)){a=a.slice(0,-2)+"®27182818284590452353602874713527/10000000000000000000000000000000"}a+=A;T(13)}M(13,true);if(o.ttype===tt.RIGHTBRACKET){g.push({prec:13,pos:h.pos,ttype:tt.SUP,closeDelim:"}"})}else{g.push({prec:13,pos:c,ttype:tt.SUP,closeDelim:"}"})}if(n){y.push({prec:13,symbol:"^"})}l+="^{";O=false;break;case tt.SUPCHAR:{if(n){if(/¿e$/.test(a)){a=a.slice(0,-2)+"®27182818284590452353602874713527/10000000000000000000000000000000"}a+=A;T(13)}M(13,true);const e=numFromSupChars(s.output);if(o.ttype===tt.RIGHTBRACKET){g.push({prec:13,pos:h.pos,ttype:tt.SUP,closeDelim:"}"})}else{g.push({prec:13,pos:c,ttype:tt.SUP,closeDelim:"}"})}l+="^{"+e;if(n){y.push({prec:13,symbol:"^"});a+=rationalRPN(e)}O=true;break}case tt.FUNCTION:{M(2,O);c=l.length;if(functionExpoRegEx.test(e)){const[r,l,a]=exponentOfFunction(e,t,n);if(n&&a===`®1/1${A}~`&&isIn(s.input,trigFunctions)){s.input="a"+s.input;s.output="\\a"+s.output.slice(1)}else{if(n){s.input+=A+a+A+"^"}s.output+="^"+l}const o=r.length+(e.charAt(0)==="^"?1:0);e=e.slice(o).trim()}if(n){y.push({prec:12,symbol:s.input});if(o.input==="⌧"){l+="×"}}x=e.charAt(0);g.push({prec:12,pos:l.length,ttype:tt.FUNCTION,closeDelim:x==="("?"":"}"});l+=s.output;l+=x==="("?"":"{";v=s.input;O=false;break}case tt.ACCENT:if(n){a+=A;T(16)}M(1,O);if(n){g.push({prec:16,pos:l.length,ttype:tt.ACCENT,closeDelim:"〗"});l+="〖"+s.input;a+="¿"+s.input}else{g.push({prec:16,pos:l.length,ttype:tt.ACCENT,closeDelim:"}"});l+=s.output+"{"}b[b.length-1].isTall=true;O=false;break;case tt.PRIME:M(15,true);if(n){a+=s.input}l=l.trim()+s.output+" ";O=true;break;case tt.BINARY:{M(1,O);c=l.length;const e=s.input==="root"?"]{":"}{";g.push({prec:12,pos:l.length,ttype:tt.BINARY,closeDelim:e});if(n){y.push({prec:12,symbol:s.output})}l+=s.output+(s.input==="root"?"[":"{");b[b.length-1].isTall=true;O=false;break}case tt.CURRENCY:{M(1,O);c=l.length;g.push({prec:12,pos:l.length,ttype:tt.CURRENCY,closeDelim:""});if(n){y.push({prec:12,symbol:"applyUnit"+A+s.input});if(o.input==="⌧"){l+="×"}}l+=s.output;O=false;break}case tt.UNARY:M(1,O);c=l.length;g.push({prec:12,pos:l.length,ttype:tt.UNARY,closeDelim:"}"});if(n){y.push({prec:12,symbol:s.input});if(o.input==="⌧"){l+="×"}}l+=s.output;if(/det|inf/.test(s.input)&&e.charAt(0)==="_"){g.push({prec:15,pos:l.length,ttype:tt.SUB,closeDelim:"}"});s={input:"_",output:"_",ttype:tt.SUB};l+="_{";e=e.substring(1);e=e.replace(/^\s+/,"")}else if(s.input==="\\color"){const t=colorSpecRegEx.exec(e);if(t){l+="{"+t[0].replace(/[()]/g,"")+"}";g.pop();e=e.slice(t[0].length).trim()}else{l+="{"}}else{l+="{"}b[b.length-1].isTall=true;O=false;break;case tt.FACTORIAL:M(14,true);g.push({prec:14,pos:h.pos,ttype:tt.FACTORIAL,closeDelim:""});if(n){T(14);a+=A+s.output}l+=s.output;O=true;break;case tt.RETURN:M(1,O);c=l.length;if(n){T(4);y.push({prec:4,symbol:"return"})}l+=s.output+" ";break;case tt.KEYWORD:M(1,true);c=l.length;if(n){T(2);if(s.input==="in"){a+=A;y.push({prec:N,symbol:"for"})}}l+=s.output+" ";break;case tt.LOGIC:{M(1,O);if(n){a+=A}T(4);const e=b[b.length-1];if(s.input==="if"||s.input==="otherwise"){if(e.delimType===dPAREN&&e.name==="{"){e.delimType=dCASES;e.close="\\end{cases}";e.open="\\begin{cases}";if(n&&A===" "&&s.input==="if"){a=a.slice(0,e.rpnPos)+a.slice(e.rpnPos).replace(/\xa0/g,"§")}}}if(e.delimType===dCASES&&isIn(s.input,["if","otherwise"])){l+="&"}if(s.input===":"&&e.delimType===dPAREN&&e.symbol==="{"){s.output="\\colon"}l+=s.output;if(n){if(e.delimType===dCASES&&(s.input==="if"||s.input==="otherwise")){a=setUpIf(a,s.input,E,e);A=" "}else{y.push({prec:4,symbol:s.input})}}c=l.length;O=true;break}case tt.LEFTBRACKET:{M(2,O);const t=o.ttype===tt.DIV;let r=false;const i={prec:0,pos:l.length,ttype:tt.LEFTBRACKET,closeDelim:s.closeDelim};if((s.input==="("||s.input==="[")&&o.ttype<5){i.closeDelim=""}else if(s.input==="("&&h.ttype===tt.BINARY){i.closeDelim=""}else{i.closeDelim=s.closeDelim;r=(s.input==="("||s.input==="[")&&o.ttype===tt.FUNCTION;l+=s.output}g.push(i);if(n){while(y.length>0&&y[y.length-1].symbol==="."){a+=A+y.pop().symbol}y.push({prec:0,symbol:s.output.trim()})}const u=/^\s*[)}\]]/.test(e)?0:1;const p={name:s.input,isTall:false,open:s.output,close:i.closeDelim,numArgs:u,numRows:u,rpnPos:a.length,isPrecededByDiv:t,isFuncParen:r,isControlWordParen:o.ttype<5};if(r){p.delimType=dFUNCTION;p.name=v}else if(o.ttype===tt.SUB){p.delimType=dSUBSCRIPT;p.name="("}else if(s.input==="{"){p.delimType=dPAREN;p.rpnLength=a.length}else if(s.input==="["&&(isIn(o.ttype,[tt.VAR,tt.LONGVAR,tt.STRING,tt.PROPERTY])||o.input==="]")){a+=A;p.delimType=dACCESSOR}else{p.delimType=dPAREN;p.name=s.input}b.push(p);v="";c=l.length;O=false;break}case tt.SEP:{M(1,O);c=l.length;if(s.input==="\\,"||s.input==="\\;"){l+=s.output+" "}else{const t=b[b.length-1];if(t.delimType===dPAREN&&f){t.delimType=dMATRIX;const e=t.name==="["?"b":t.name==="("?"p":t.name==="{:"?"":"B";t.open=`\\begin{${e}matrix}`;t.close=`\\end{${e}matrix}`;t.isTall=true;s.output=s.input===","?"&":"\\\\"}else if(t.delimType===dMATRIX&&s.input===","){s.output="&"}else if(t.delimType>3&&s.input===";"){s.output="\\\\"}if(n){if(o.ttype===tt.LEFTBRACKET&&t.delimType===dACCESSOR){a+="®0/1"}a+=A;T(1)}l+=s.output+" ";if(n){if(b.length===1){a+=s.output}else{if(s.input===";"){t.numRows+=1;if(b.length>0&&t.delimType===dCASES){A="§"}}if(t.numRows===1){if(s.input===","||s.input===" "&&t.delimType===dMATRIX){if(e.charAt(0)==="]"){a+="®0/1"}else if(s.input===","&&t.delimType===dFUNCTION&&t.numArgs===2&&t.name==="plot"){a=a.slice(0,t.rpnPos+5)+'"'+a.slice(t.rpnPos+5,-1).replace(/\u00a0/g,"§")+'"'+A}}}t.numArgs+=1}}}O=true;break}case tt.RIGHTBRACKET:{M(0,true,s.output);const t=b.pop();if(t.delimType===dPAREN&&!t.isControlWordParen&&t.close!==s.output){l=l.slice(0,-1*t.close.length)+s.output}if(t.isTall&&b.length>1){b[b.length-1].isTall=true}if(n){while(y.length>0&&y[y.length-1].prec>0){a+=A+y.pop().symbol}if(t.delimType===dCASES&&o.input!=="otherwise"){a=setUpIf(a,"otherwise",E,t);A=" "}const n=y.pop();const r=t.numArgs;const l=t.numRows;const i=t.numArgs/t.numRows;const u=r===0?"":A;switch(t.delimType){case dFUNCTION:{let e=y.pop().symbol;const t=new RegExp(A+"!$");if(r===2){if(e==="log"){e="logn"}if(e==="round"){e="roundn"}if(e==="atan"){e="atan2"}if(e==="plot"){a=a.slice(0,6)+'"'+a.slice(6).replace(/\u00a0/g,"§")+'"'}}else if(e==="log"&&t.test(a)){a=a.slice(0,a.length-1)+"logFactorial";break}a+=e.slice(-1)==="^"?u+e:isIn(e,builtInFunctions)?u+e:isIn(e,builtInReducerFunctions)?u+e+A+r:u+"function"+A+e+A+r;break}case dACCESSOR:a+=u+"[]"+A+r;break;case dMATRIX:a+=u+"matrix"+A+l+A+i;break;case dCASES:A=" ";a+=A+"cases"+A+l+A;while(E.length>0){a+=E.shift()}a=a.slice(0,-1);break;case dVECTORFROMRANGE:a+=A+"matrix"+A+"1"+A+"1";break;case dDISTRIB:break;default:if(r===0&&t.open==="["){a+="matrix"+A+0+A+0}else if(r===1&&t.open==="["){a+=A+"matrix"+A+1+A+1}if(n.symbol==="\\lfloor"){a+=A+"⎿⏌"}if(n.symbol==="\\lceil"){a+=A+"⎾⏋"}}if(s.input===")"&&nextCharIsFactor(e,tt.RIGHTBRACKET)||s.input==="]"&&/^\(/.test(e)){a+=A;T(rpnPrecFromType[tt.MULT]);y.push({prec:rpnPrecFromType[tt.MULT],symbol:"⌧"});d=false}}c=l.length;O=h.ttype!==tt.BINARY;break}case tt.LEFTRIGHT:{M(1,O);const e=b[b.length-1];let t=false;if(g.length>0){t=g[g.length-1].ttype===tt.LEFTRIGHT||g[g.length-1].closeDelim==="⟩"||g[g.length-1].closeDelim==="\\right."||g[g.length-1].closeDelim==="\\end{vmatrix}"}if(t){e.close=s.input==="|"?"\\vert ":"\\Vert ";g[g.length-1].closeDelim=e.close;M(0,O);b.pop();if(n){while(y.length>0&&y[y.length-1].prec>0){a+=A+y.pop().symbol}a+=A+y.pop().symbol}O=h.ttype!==tt.BINARY}else if(e.delimType===dPAREN&&e.name==="{"){l+="\\mid ";c=l.length;O=true}else{g.push({prec:0,pos:l.length,ttype:tt.LEFTRIGHT,closeDelim:s.input==="|"?"\\vert ":"\\Vert "});b.push({delimType:dPAREN,name:s.input,isTall:false,open:s.input==="|"?"\\vert ":"\\Vert ",close:s.input==="|"?"\\vert ":"\\Vert ",numArgs:1,numRows:1,rpnPos:a.length,isPrecededByDiv:o.ttype===tt.DIV});if(n){y.push({prec:0,symbol:s.output})}l+=s.input==="|"?"\\vert ":"\\Vert ";c=l.length;O=false}break}case tt.COMMENT:M(0,true);l+=s.output+" ";break;default:if(n){a+=A;T(12)}M(1,O);g.push({prec:1,pos:l.length,ttype:tt.ORD,closeDelim:""});if(n){y.push({prec:12,symbol:s.output})}l+=s.output+" ";c=l.length;O=true}o=cloneToken$1(s);p=d||s.input==="⌧"}M(0,true);if(n){while(y.length>0){a+=A+y.pop().symbol}const e=/〖[^ ().]+/g;let t;while((t=e.exec(l))!==null){if("¨ˆˉ˙˜".indexOf(t[0][1])===-1){const e=t.index+t[0].length;if(l.length>e&&l.charAt(e)==="("){l=l.slice(0,t.index)+l.slice(t.index+1)}else{l=l.substring(0,e)+"〗"+l.substring(e)}}}}l=l.replace(/ {2,}/g," ");l=l.replace(/\s+(?=[_^'!)}\]〗])/g,"");l=l.replace(/\s+$/,"");if(u){const e=l.indexOf("=");l="\\begin{aligned}"+l.slice(0,e)+"&"+l.slice(e)+"\\end{aligned}"}return n?[l,a]:l};const fromAssignment=(e,t)=>{if(e.value===null){const t=e.name?e.name:"?";return errorOprnd("NULL",t)}const n=Object.create(null);n.dtype=e.dtype;n.name=e.name;const r=e.dtype;if(r===dt.STRING||r===dt.BOOLEAN||r===dt.DRAWING||r===dt.MODULE||r===dt.NULL){n.unit=null}else if(r===dt.DATAFRAME||r&dt.MAP){n.unit=Object.freeze(clone(e.unit))}else if(e.unit&&e.unit.expos){n.unit=clone(e.unit)}else if(e.unit){n.unit=Object.create(null);if(e.unit){n.unit.name=e.unit}if(e.expos){n.unit.expos=clone(e.expos)}}else if(e.expos&&Array.isArray(e.expos)){n.unit={expos:clone(e.expos)}}else{n.unit=null}if(e.dtype&dt.QUANTITY){n.value=Object.freeze(t?clone(e.value.inBaseUnits):clone(e.value.plain));n.dtype=e.dtype-dt.QUANTITY}else if(e.dtype===dt.STRING){const t=e.value;const r=t.charAt(0);const l=t.charAt(t.length-1);n.value=r==='"'&&l==='"'?t.slice(1,-1).trim():t.trim()}else if(e.dtype===dt.DATAFRAME){n.value=e.value}else{n.value=clone(e.value)}return Object.freeze(n)};function propertyFromDotAccessor(e,t,n,r){const l=Object.create(null);if(e.dtype&dt.MAP){return map.valueFromMap(e,[t],r)}else if(e.dtype&dt.DATAFRAME){return DataFrame.range(e,[t],n,r)}else if((e.dtype===dt.STRING||e.dtype&dt.ARRAY)&&t.dtype===dt.RATIONAL){const n=Rnl.toNumber(t.value);l.value=e.value.slice(n-1,n);l.unit=e.unit;l.dtype=e.dtype;return l}else if((e.dtype===dt.STRING||e.dtype&dt.ARRAY)&&t.dtype===dt.RANGE){const n=t.value[0]-1;const r=t.value[1];const a=t.value[2]==="∞"?e.value.length:t.value[2];l.unit=e.unit;l.dtype=e.dtype;if(r===1){l.value=e.value.slice(n,a)}else{l.value=[];for(let t=n;t<a;t+=r){l.value.push(e.value[t])}}return l}else if(e.dtype===dt.MODULE){return fromAssignment(e.value[t.value],r)}else{return errorOprnd("NO_PROP",e.name)}}const display$4=(e,t="h3",n="1,000,000.")=>{if(e.size===0){return""}let r="\\begin{array}{c}";let l=false;for(const t of e.values()){if(t.unit&&t.unit.name){l=true;break}}if(l){let t="";for(const n of e.values()){if(n.unit&&n.unit.name){t+=unitTeXFromString(n.unit.name).replace("\\;\\, ","")}t+="&"}r+=t.slice(0,-1)+" \\\\ ";r+="\\hline "}let a="";for(const r of e.values()){a+=format(r.value,t,n)+" & "}r+=a.slice(0,-1);r+="\\end{array}";return r};const displayAlt$3=(e,t="h3")=>{if(e.size===0){return""}let n="``";let r=false;for(const t of e.values()){if(t.unit&&t.unit.name){r=true;break}}if(r){let t="";for(const n of e.values()){if(n.unit&&n.unit.name){t+=n.unit.name}t+=" | "}n+=t.slice(0,-3)+"\n"}let l="";for(const n of e.values()){l+=format(n.value,t,"100000.")+" | "}n=l.slice(0,-3);return n+"``"};const Tuple=Object.freeze({display:display$4,displayAlt:displayAlt$3});const numMisMatchError=e=>{const t="Error. Mismatch in number of multiple assignment.";return[`\\color{firebrick}\\text{${t}}`,t]};const formatResult=(e,t,n,r,l)=>{if(!t){return e}if(t.dtype===dt.DRAWING){e.resultdisplay=t.value;delete e.resultdisplay.temp;return e}const a=!e.name?0:!Array.isArray(e.name)?1:e.name.length;if(e.resulttemplate.indexOf("?")>-1||e.resulttemplate.indexOf("!")>-1||e.resulttemplate.indexOf("@")>-1||e.resulttemplate.indexOf("%")>-1){e.value=t.value;let s="";let o="";if(e.resulttemplate.indexOf("!")>-1){s="";o="";return e}else if(isMatrix(t)&&t.dtype&dt.MAP){s=Matrix.displayMapOfVectors(t.value,n,r);o=Matrix.displayAltMapOfVectors(t.value,n,r)}else if(isMatrix(t)){s=Matrix.display(l?{value:t.value.plain,dtype:t.dtype}:t,n,r);o=Matrix.displayAlt(l?{value:t.value.plain,dtype:t.dtype}:t,n,r)}else if(t.dtype===dt.DATAFRAME){if(a>1&&a!==t.value.data.length){[s,o]=numMisMatchError()}else{const l=e.name&&Array.isArray(e.name)&&e.name.length>1;s=DataFrame.display(t.value,n,r,l);o=DataFrame.displayAlt(t.value,n,l)}}else if(t.dtype&dt.MAP){const l=e.dtype&dt.QUANTITY?t.value.plain.size:t.value.size;if(a>1&&a!==l){[s,o]=numMisMatchError()}else{const l=e.name&&Array.isArray(e.name)&&e.name.length>1;s=map.display(t,n,r,l);o=map.displayAlt(t,n,r,l)}}else if(t.dtype===dt.TUPLE){if(a>1&&a!==t.length){[s,o]=numMisMatchError()}else{s=Tuple.display(t.value,n,r);o=Tuple.displayAlt(t.value,n)}}else if(t.dtype&dt.STRING){s="\\text{"+addTextEscapes(t.value)+"}";if(t.unit){s=`\\textcolor{${t.unit}}{${s}}`}o=t.value}else if(t.dtype&dt.RICHTEXT){s=parse(t.value,r,false);o=t.value}else if(t.dtype&dt.BOOLEAN){s="\\text{"+t.value+"}";o=String(t.value)}else if(t.dtype===dt.COMPLEX){const e=t.value;[s,o]=Cpx.display(e,n,r)}else if(t.value.plain){s=format(t.value.plain,n,r);if(s.dtype&&s.dtype===dt.ERROR){s="\\color{firebrick}\\text{"+s.value+"}";o=s.value}else{o=s.replace(/{,}/g,",").replace("\\","")}}else if(Rnl.isRational(t.value)){s=format(t.value,n,r);if(s.dtype&&s.dtype===dt.ERROR){s="\\color{firebrick}\\text{"+s.value+"}";o=s.value}else{o=s.replace(/{,}/g,",").replace("\\","")}}else if(t.dtype===dt.IMAGE){return e}else{s=t.value;o=s}e.resultdisplay=e.resulttemplate.replace(/(\? *\??|@ *@?|%%?)/,s);if(e.resulttemplate.indexOf("@")>-1){e.tex=e.resultdisplay;e.alt=e.altresulttemplate.replace(/@@?/,o)}else if(e.resulttemplate.indexOf("?")>-1){let t=e.tex.lastIndexOf("?");e.tex=e.tex.slice(0,t).replace(/\? *$/,"")+s+e.tex.slice(t+1);t=e.alt.lastIndexOf("?");e.alt=e.alt.slice(0,t).replace(/\? *$/,"")+o+e.alt.slice(t+1)}else if(e.resulttemplate.indexOf("%")>-1){let t=e.tex.lastIndexOf("%");e.tex=e.tex.slice(0,t).replace(/% *$/,"")+s+e.tex.slice(t+1);t=e.alt.lastIndexOf("%");e.alt=e.alt.slice(0,t).replace(/% *$/,"")+o+e.alt.slice(t+1)}}return e};const varRegEx=/〖[^〗]*〗/;const openParenRegEx$1=/([([{|‖]|[^\\][,;:])$/;const plugValsIntoEcho=(e,t,n,r,l)=>{let a;while((a=varRegEx.exec(e))!==null){const s=a[0].replace(/[〖〗()]/g,"").trim().replace(/'/g,"′");const o=a[0].length;const i=a.index;let u;let c="";if(s.indexOf(".")>-1){const a=s.split(".");const p=a[0];if(!t[p]){return errorOprnd("V_NAME",p)}u=t[p];if(u.dtype===dt.DATAFRAME&&a.length===2){c="\\mathrm{"+t[a[0]].name+"{.}\\mathrm{"+a[1]+"}";return e.substring(0,i)+c+e.substring(i+o)}else{for(let e=1;e<a.length;e++){const s=a[e].replace("}","").replace("\\mathrm{","").trim();const o={value:s,unit:null,dtype:dt.STRING};u=propertyFromDotAccessor(u,o,t,n);if(!u){return errorOprnd("V_NAME",s)}const i={resulttemplate:"@",altresulttemplate:"@"};u.resultdisplay=formatResult(i,u,r,l).resultdisplay}}}else if(!t[s]&&s==="T"){u={dtype:dt.RATIONAL,resultdisplay:"\\text{T}"}}else if(s==="e"&&/^\^/.test(e.slice(i+3).trim())){e=e.substring(0,i)+"e"+e.substring(i+o);continue}else if(!t[s]){return errorOprnd("V_NAME",s)}else{u={dtype:t[s].dtype,resultdisplay:t[s].resultdisplay}}if(!u||!u.resultdisplay){const e=s?s:"?";return errorOprnd("NULL",e)}else if(u.error){return errorOprnd("NULL",s)}let p=true;if(isMatrix(u)||u.dtype&dt.DATAFRAME){p=false}if(n&&u.dtype&dt.QUANTITY){p=true}let d=false;if(i>0){const t=e.slice(0,i).trim();if(openParenRegEx$1.test(t)){const t=e.slice(i+s.length+2).trim();d=t.length>0&&/^([)|‖\]},;:]|\\right)/.test(t)}else if(/^\\begin{[bp]matrix}/.test(u.resultdisplay)){d=/\\end{[bp]matrix}$/.test(u.resultdisplay)}}p=p&&!d;if(u.dtype===dt.DATAFRAME||u.dtype&dt.MAP){c="\\mathrm{"+t[s].name+"}"}else if(n){c=p?"\\left("+u.resultdisplay+"\\right)":u.resultdisplay}else{let e=u.resultdisplay;const t=u.resultdisplay.lastIndexOf("{\\text{");if(t>-1){e=u.resultdisplay.slice(0,t).trim();e=e.replace(/\\; *$/,"").trim()}c=p?"\\left("+e+"\\right)":e}e=e.substring(0,i)+c+e.substring(i+o)}return e};const negativeOne=Object.freeze(Rnl.negate(Rnl.one));const oneHalf=[BigInt(1),BigInt(2)];const thirty=[BigInt(30),BigInt(1)];const fortyFive=[BigInt(45),BigInt(1)];const sixty=[BigInt(60),BigInt(1)];const ninety=[BigInt(90),BigInt(1)];const halfPi=Object.freeze(Rnl.divide(Rnl.pi,Rnl.two));const functionExpos=(e,t)=>{const n=t.length;const r=n===1?t[0].unit.expos:null;switch(e){case"abs":case"round":case"roundn":case"sign":case"trace":case"fetch":return r;case"cos":case"sin":case"tan":case"sec":case"csc":case"cot":case"acos":case"arccos":case"asin":case"arcsin":case"atan":case"arctan":case"asec":case"arcsec":case"acsc":case"arccsc":case"acot":case"arccot":case"cosd":case"sind":case"tand":case"secd":case"cscd":case"cotd":case"acosd":case"asind":case"atand":case"asecd":case"acscd":case"acotd":case"gud":if(!unitsAreCompatible(r,allZeros)){return errorOprnd("UNIT_IN",e)}return allZeros;case"exp":case"log":case"ln":case"log10":case"log2":case"logn":case"cosh":case"sinh":case"tanh":case"sech":case"csch":case"coth":case"acosh":case"asinh":case"atanh":case"asech":case"acsch":case"acoth":case"binomial":case"gamma":case"Γ":case"logΓ":case"logFactorial":if(!unitsAreCompatible(r,allZeros)){return errorOprnd("UNIT_IN",e)}return allZeros;case"sqrt":return r.map((e=>e/2));case"gcd":case"mht":if(!unitsAreCompatible(r,allZeros)){return errorOprnd("UNIT_IN",e)}return e==="hmt"?[1,0,0,0,0,0,0,0]:allZeros;case"atan2":case"hypot":case"rms":case"sum":case"mean":case"median":case"min":case"max":case"range":case"stddev":case"variance":{const n=t[0].unit.expos;for(let r=1;r<t.length;r++){const l=t[r].unit.expos;if(n.length!==l.length){return errorOprnd("UNIT_ARG",e)}for(let t=0;t<n.length;t++){if(n[t]!==l[t]){return errorOprnd("UNIT_ARG",e)}}}return e==="atan2"?allZeros:n}case"Re":case"Im":case"argument":return allZeros;case"product":{const e=clone(t[0].unit.expos);for(let n=1;n<t.length;n++){const r=t[n].unit.expos;e.map(((e,t)=>e+r[t]))}return e}default:return errorOprnd("F_NAME",e)}};const gamma=e=>{if(Rnl.isZero(e)){return errorOprnd("Γ0")}else if(Rnl.isPositive(e)&&Rnl.isInteger(e)&&Rnl.lessThan(e,Rnl.fromNumber(101))){return Rnl.factorial(Rnl.subtract(e,Rnl.one))}else if(Rnl.isNegative(e)&&Rnl.isInteger(e)){return errorOprnd("ΓPOLE")}else if(Rnl.lessThan(e,oneHalf)){return Rnl.fromNumber(Math.PI/Math.sin(Math.PI*Rnl.toNumber(e))*Rnl.toNumber(gamma(Rnl.subtract(Rnl.one,e))))}else{return Rnl.lanczos(e)}};const logΓ=e=>{if(Rnl.isZero(e)){return errorOprnd("Γ0")}if(Rnl.isNegative(e)){return errorOprnd("LOGΓ")}if(Rnl.areEqual(e,Rnl.one)||Rnl.areEqual(e,Rnl.two)){return Rnl.zero}if(Rnl.lessThanOrEqualTo(e,Rnl.fromNumber(14))){return Rnl.fromNumber(Math.log(Rnl.toNumber(gamma(e))))}else{const t=Rnl.toNumber(e);const n=(t-.5)*Math.log(t)-t+.5*Math.log(2*Math.PI)+1/(12*t)-1/(360*t**3)+1/(1260*t**5)-1/(1680*t**7)+5/(540*t**9);return Rnl.fromNumber(n)}};const binomial=(e,t)=>{if(Rnl.areEqual(e,t)){return Rnl.one}if(Rnl.isZero(e)){return Rnl.zero}if(Rnl.isNegative(t)){return Rnl.zero}if(Rnl.lessThan(e,t)){return Rnl.zero}if(Rnl.isInteger(e)&&Rnl.isInteger(t)&&Rnl.isPositive(e)&&Rnl.isPositive(t)){return Rnl.divide(Rnl.factorial(e),Rnl.multiply(Rnl.factorial(t),Rnl.factorial(Rnl.subtract(e,t))))}else if(Rnl.isInteger(e)&&Rnl.isInteger(t)&&Rnl.isPositive(t)){return Rnl.multiply(Rnl.power(negativeOne,t),multiset(Rnl.negate(e),t))}else{return Rnl.divide(gamma(Rnl.increment(e)),Rnl.multiply(gamma(Rnl.increment(t)),gamma(Rnl.increment(Rnl.subtract(e,t)))))}};const multiset=(e,t)=>binomial(Rnl.add(e,Rnl.decrement(t)),t);const piOver180=Rnl.divide(Rnl.pi,[BigInt(180),BigInt(1)]);const unary={scalar:{abs(e){return Rnl.abs(e)},argument(e){return errorOprnd("NA_REAL","argument")},Re(e){return errorOprnd("NA_REAL","Re")},Im(e){return errorOprnd("NA_REAL","Im")},cos(e){return Rnl.cos(e)},sin(e){return Rnl.sin(e)},tan(e){return Rnl.tan(e)},cosh(e){return Rnl.cosh(e)},sinh(e){return Rnl.sinh(e)},tanh(e){return Rnl.tanh(e)},acos(e){if(Rnl.greaterThan(Rnl.abs(e),Rnl.one)){return errorOprnd("ATRIG","acos")}return Rnl.fromNumber(Math.acos(Rnl.toNumber(e)))},asin(e){if(Rnl.greaterThan(Rnl.abs(e),Rnl.one)){return errorOprnd("ATRIG","asin")}return Rnl.fromNumber(Math.asin(Rnl.toNumber(e)))},atan(e){return Rnl.fromNumber(Math.atan(Rnl.toNumber(e)))},sec(e){return Rnl.fromNumber(1/Math.cos(Rnl.toNumber(e)))},csc(e){return Rnl.fromNumber(1/Math.sin(Rnl.toNumber(e)))},cot(e){if(Rnl.isZero(e)){return errorOprnd("COT","cotangent")}return Rnl.fromNumber(1/Math.tan(Rnl.toNumber(e)))},asec(e){if(Rnl.greaterThanOrEqualTo(Rnl.abs(e),Rnl.one)){return errorOprnd("ASEC","arcecant")}const t=Math.atn(Math.sqrt(Rnl.toNumber(Rnl.decrement(Rnl.multiply(e,e)))));return Rnl.isPositive(e)?Rnl.fromNumber(t):Rnl.fromNumber(t-Math.PI)},acot(e){if(Rnl.greaterThanOrEqualTo(Rnl.abs(e),Rnl.one)){return errorOprnd("ASEC","acot")}const t=Math.atn(1/Math.sqrt(Rnl.toNumber(Rnl.decrement(Rnl.multiply(e,e)))));return Rnl.isPositive(e)?Rnl.fromNumber(t):Rnl.fromNumber(t-Math.PI)},acsc(e){return Rnl.fromNumber(Math.atn(-Rnl.toNumber(e))+Math.PI)},exp(e){return Rnl.exp(e)},log(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log(Rnl.toNumber(e)))},ln(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log(Rnl.toNumber(e)))},log10(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log10(Rnl.toNumber(e)))},log2(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log2(Rnl.toNumber(e)))},sech(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(2/(Math.exp(t)+Math.exp(-t)))},csch(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(2/(Math.exp(t)-Math.exp(-t)))},coth(e){const t=Rnl.toNumber(e);return Rnl.fromNumber((Math.exp(t)+Math.exp(-t))/(Math.exp(t)-Math.exp(-t)))},acosh(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log(t+Math.sqrt(t-1)*Math.sqrt(t+1)))},asinh(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log(t+Math.sqrt(Math.pow(t,2)+1)))},atanh(e){const t=Rnl.toNumber(e);return Rnl.fromNumber((Math.log(1+t)-Math.log(1-t))/2)},asech(e){if(Rnl.isZero(e)){return errorOprnd("DIV")}const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log((Math.sqrt(-t*t+1)+1)/t))},ascsh(e){if(Rnl.isZero(e)){return errorOprnd("DIV")}const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log(Math.sqrt(1+1/Math.pow(t,2))+1/t))},acoth(e){if(Rnl.isZero(e)){return errorOprnd("DIV")}const t=Rnl.toNumber(e);return Rnl.fromNumber((Math.log(1+1/t)-Math.log(1-1/t))/2)},Gamma(e){return gamma(e)},"Γ"(e){return gamma(e)},"logΓ"(e){if(Rnl.isNegative(e)||Rnl.isZero(e)){return errorOprnd("LOGΓ")}return logΓ(e)},logFactorial(e){if(Rnl.isNegative(e)||!Rnl.isInteger(e)){return errorOprnd("FACT")}return logΓ(Rnl.add(e,Rnl.one))},sign(e){return Rnl.isPositive(e)?Rnl.one:Rnl.isZero(e)?Rnl.zero:negativeOne},cosd(e){if(Rnl.areEqual(e,ninety)){return Rnl.zero}if(Rnl.areEqual(e,sixty)){return oneHalf}return this.cos(Rnl.multiply(e,piOver180))},sind(e){if(Rnl.areEqual(e,thirty)){return oneHalf}return this.sin(Rnl.multiply(e,piOver180))},tand(e){if(Rnl.areEqual(e,fortyFive)){return Rnl.one}if(Rnl.areEqual(e,ninety)){return errorOprnd("TAN90","90°")}return this.tan(Rnl.multiply(e,piOver180))},cotd(e){return this.cot(Rnl.multiply(e,piOver180))},cscd(e){return this.csc(Rnl.multiply(e,piOver180))},secd(e){return this.sec(Rnl.multiply(e,piOver180))},acosd(e){const t=this.acos(e);return t.dtype?t:Rnl.divide(t,piOver180)},asind(e){const t=this.asin(e);return t.dtype?t:Rnl.divide(t,piOver180)},atand(e){return Rnl.divide(this.atan(e),piOver180)},acotd(e){const t=this.acot(e);return t.dtype?t:Rnl.divide(t,piOver180)},acscd(e){const t=this.acsc(e);return t.dtype?t:Rnl.divide(t,piOver180)},asecd(e){const t=this.asec(e);return t.dtype?t:Rnl.divide(t,piOver180)},chr(e){return String.fromCodePoint(Number(e))},sqrt(e){const t=[BigInt(1),BigInt(2)];return Cpx.isComplex(e)||Rnl.isNegative(e)?Cpx.power([e,Rnl.zero],t):Rnl.power(e,t)},round(e){return Rnl.fromString(Rnl.toString(e,0))}},complex:{abs(e){return Cpx.abs(e)},argument(e){return Cpx.argument(e)},Re(e){return e[0]},Im(e){return e[1]},cos(e){return Cpx.cos(e)},sin(e){return Cpx.sin(e)},asin(e){return Cpx.asin(e)},atan(e){return Cpx.atan(e)},acos(e){return Cpx.subtract([halfPi,Rnl.zero],Cpx.asin(e))},tan(e){return Cpx.divide(Cpx.sin(e),Cpx.cos(e))},cot(e){return Cpx.divide(Cpx.cos(e),Cpx.sin(e))},sec(e){const t=Cpx.cos(e);return t.dtype?t:Cpx.inverse(t)},csc(e){const t=Cpx.sin(e);return t.dtype?t:Cpx.inverse(t)},asec(e){const t=Cpx.inverse(e);return Cpx.subtract([halfPi,Rnl.zero],Cpx.asin(t))},acot(e){return Cpx.atan(Cpx.inverse(e))},acsc(e){return Cpx.asin(Cpx.inverse(e))},exp(e){return Cpx.exp(e)},log(e){return Cpx.log(e)},ln(e){return Cpx.log(e)},log10(e){return Rnl.fromNumber(Math.log10(Rnl.toNumber(e)))},log2(e){return Rnl.fromNumber(Math.log2(Rnl.toNumber(e)))},cosh(e){return Cpx.divide(Cpx.add(Cpx.exp(e),Cpx.exp(Cpx.negate(e))),[Rnl.two,Rnl.zero])},sinh(e){return Cpx.divide(Cpx.subtract(Cpx.exp(e),Cpx.exp(Cpx.negate(e))),[Rnl.two,Rnl.zero])},tanh(e){const t=Cpx.exp(e);const n=Cpx.exp(Cpx.negate(e));return Cpx.divide(Cpx.subtract(t,n),Cpx.add(t,n))},sech(e){return Cpx.divide([Rnl.two,Rnl.zero],Cpx.add(Cpx.exp(e),Cpx.exp(Cpx.negate(e))))},csch(e){return Cpx.divide([Rnl.two,Rnl.zero],Cpx.subtract(Cpx.exp(e),Cpx.exp(Cpx.negate(e))))},coth(e){const t=Cpx.exp(e);const n=Cpx.exp(Cpx.negate(e));return Cpx.divide(Cpx.add(t,n),Cpx.subtract(t,n))},acosh(e){return Cpx.acosh(e)},asinh(e){return Cpx.asinh(e)},atanh(e){return Cpx.atanh(e)},asech(e){return Cpx.acosh(Cpx.inverse(e))},acsch(e){return Cpx.asinh(Cpx.inverse(e))},acoth(e){return Cpx.atanh(Cpx.inverse(e))},Gamma(e){return Cpx.gamma(e)},"Γ"(e){return Cpx.gamma(e)},"logΓ"(e){return errorOprnd("NA_COMPL_OP","logΓ")},sign(e){if(Rnl.isZero(e[1])&&Rnl.isPositive(e[0])){return Rnl.one}else if(Rnl.isZero(e[1])&&Rnl.isNegative(e[0])){return Rnl.negate(Rnl.one)}else{return Cpx.divide(e,[Cpx.abs(e),Rnl.zero])}},round(e){return errorOprnd("NA_COMPL_OP","round")}}};const binary={logn([e,t]){return Rnl.fromNumber(Math.log(Rnl.toNumber(t))/Math.log(Rnl.toNumber(e)))},roundFixed([e,t]){return Rnl.fromString(Rnl.toString(e,t))},roundSignificant([e,t]){return Rnl.fromString(Rnl.toStringSignificant(e,t))},stringFixed([e,t]){return Rnl.toString(e,t)},stringSignificant([e,t]){return Rnl.toStringSignificant(e,t)},atan2([e,t]){return Rnl.fromNumber(Math.atan2(Rnl.toNumber(t),Rnl.toNumber(e)))},hypot([e,t]){const n=Rnl.max(e,t);const r=Rnl.divide(Rnl.min(e,t),n);return Rnl.multiply(n,Rnl.sqrt(Rnl.increment(Rnl.multiply(r,r))))},gcd([e,t]){return Rnl.gcd(e,t)},rms([e,t]){return this.hypot(e,t)},binomial([e,t]){return binomial(e,t)},zeros([e,t]){return Matrix.zeros(Rnl.toNumber(e),Rnl.toNumber(t))}};const reduce={max(e){return e.reduce(((e,t)=>Rnl.max(e,t)))},min(e){return e.reduce(((e,t)=>Rnl.min(e,t)))},sum(e){return e.reduce(((e,t)=>Rnl.add(e,t)))},product(e){return e.reduce(((e,t)=>Rnl.multiply(e,t)))},mean(e){const t=this.sum(e);return Rnl.divide(t,Rnl.fromNumber(e.length))},median(e){const t=this.max(e);const n=this.min(e);return Rnl.divide(Rnl.add(t,n),Rnl.two)},range(e){return Rnl.subtract(this.max(e),this.min(e))},variance(e){const t=this.sum(e);const n=Rnl.divide(t,Rnl.fromNumber(e.length));const r=e.reduce(((e,t)=>Rnl.add(e,Rnl.pow(Rnl.subtract(t,n),Rnl.two))));return Rnl.divide(r,Rnl.subtract(Rnl.fromNumber(e.length),Rnl.one))},stddev(e){const t=this.variance(e);return Rnl.power(t,oneHalf)},accumulate(e){const t=new Array(e.length).fill(0);t[0]=e[0];for(let n=1;n<e.length;n++){t[n]=Rnl.add(t[n-1],e[n])}return t}};const lerp=(e,t)=>{for(let t=0;t<3;t++){if(!(e[t].dtype&dt.RATIONAL)){return errorOprnd("")}}let n=allZeros;if(t){if(e[0].expos!==e[1].expos){return errorOprnd("")}if(e[1].expos!==e[2].expos){return errorOprnd("")}n=e[0].expos}const r=Object.create(null);r.unit=Object.create(null);r.unit.expos=n;r.dtype=dt.RATIONAL;const l=e[0].value;const a=e[1].value;const s=e[2].value;for(let e=0;e<l.length-1;e++){if(Rnl.lessThanOrEqualTo(l[e],s)&Rnl.lessThanOrEqualTo(s,l[e+1])){const t=Rnl.divide(Rnl.subtract(a[e+1],a[e]),Rnl.subtract(l[e+1],l[e]));r.value=Rnl.add(a[e],Rnl.multiply(t,Rnl.subtract(s,l[e])));return Object.freeze(r)}}};const Functions=Object.freeze({functionExpos:functionExpos,unary:unary,binary:binary,reduce:reduce,lerp:lerp});const multivarFunction=(e,t,n)=>{if(n.length===1){const r=Matrix.isVector(n[0])?n[0].value:n.dtype&dt.MATRIX?n[0].value.flat():n[0].value;const l=Functions[e][t](r);let a=n[0].dtype;if(e==="reduce"&&t!=="accumulate"){if(a&dt.MATRIX){a-=dt.MATRIX}if(a&dt.ROWVECTOR){a-=dt.ROWVECTOR}if(a&dt.COLUMNVECTOR){a-=dt.COLUMNVECTOR}}return[l,a]}else{let r=0;let l=false;let a=n[0].dtype;for(r=0;r<n.length;r++){if(Matrix.isVector(n[r])){l=true;a=n[r].dtype;break}}const s=n.map((e=>e.value));if(!l){const r=Functions[e][t](s);return t==="zeros"?[r.value,r.dtype]:[r,n[0].dtype]}else{const n=clone(s);const l=[];for(let a=0;a<s[r].length;a++){n[r]=s[r][a];l.push(Functions[e][t](n))}return[l,a]}}};const equals=(e,t)=>{if(Rnl.isRational(e)&&Rnl.isRational(t)){return Rnl.areEqual(e,t)}else{return e===t}};const compare=(e,t,n,r)=>{if(t===false&&r){return false}if(t===true&&r){t=r}switch(e){case"=":return equals(t,n);case"≠":case"!=":case"/=":if(Rnl.isRational(t)&&Rnl.isRational(n)){return!Rnl.areEqual(t,n)}else{return t!==n}case">":if(Rnl.isRational(t)&&Rnl.isRational(n)){return Rnl.greaterThan(t,n)}else{return t>n}case"<":if(Rnl.isRational(t)&&Rnl.isRational(n)){return Rnl.lessThan(t,n)}else{return t<n}case"≥":case">=":if(Rnl.isRational(t)&&Rnl.isRational(n)){return Rnl.greaterThanOrEqualTo(t,n)}else{return t>=n}case"≤":case"<=":if(Rnl.isRational(t)&&Rnl.isRational(n)){return Rnl.lessThanOrEqualTo(t,n)}else{return t<=n}case"∈":if(typeof t==="string"&&typeof n==="string"){return n.indexOf(t)>-1}else if(Array.isArray(n)&&!Array.isArray(t)){for(let e=0;e<n.length;e++){if(equals(t,n[e])){return true}}return false}else if(n instanceof Map){return n.has(t)}else{return errorOprnd("NOT_ARRAY")}case"⋐":if(typeof t==="string"&&typeof n==="string"){return n.indexOf(t)>-1}else if(Array.isArray(t)&&Array.isArray(n)){for(let e=0;e<n.length;e++){if(equals(t[0],n[e])){if(e+t.length>n.length){return false}for(let r=1;r<t.length;r++){if(!equals(t[r],n[e+r])){return false}}return true}}return false}else{return errorOprnd("NOT_ARRAY")}case"∉":if(typeof t==="string"&&typeof n==="string"){return n.indexOf(t)===-1}else if(Array.isArray(n)){for(let e=0;e<n.length;e++){if(t===n[e]){return false}}return true}else if(n instanceof Map){return!n.has(t)}else{return errorOprnd("NOT_ARRAY")}}};const transpose2D=e=>e[0].map(((t,n)=>e.map((e=>e[n]))));const dotProduct=(e,t)=>e.map(((e,n)=>Rnl.multiply(e,t[n]))).reduce(((e,t)=>Rnl.add(e,t)));const sumOfSquares=e=>e.map((e=>Rnl.multiply(e,e))).reduce(((e,t)=>Rnl.add(e,t)));const oneTenth=[BigInt(1),BigInt(100)];const unary$1={scalar:{abs(e){return Rnl.abs(e)},norm(e){return Rnl.abs(e)},negate(e){return Rnl.negate(e)},exp(e){return Rnl.exp(e)},floor(e){return Rnl.floor(e)},ceil(e){return Rnl.ceil(e)},percent(e){return Rnl.multiply(oneTenth,e)},factorial(e){return Rnl.factorial(e)},not(e){return!e}},complex:{abs(e){return Cpx.abs(e)},norm(e){return Cpx.abs(e)},conjugate(e){return Cpx.conjugate(e)},negate(e){return Cpx.negate(e)},exp(e){return Cpx.exp(e)},floor(e){return errorOprnd("NA_COMPL_OP","floor")},ceil(e){return errorOprnd("NA_COMPL_OP","ceil")},percent(e){return errorOprnd("NA_COMPL_OP","percent")},factorial(e){return errorOprnd("NA_COMPL_OP","factorial")},not(e){return errorOprnd("NA_COMPL_OP","not")}},vector:{abs(e){return Rnl.sqrt(sumOfSquares(e))},norm(e){return Rnl.sqrt(sumOfSquares(e))},negate(e){return e.map((e=>Rnl.negate(e)))},exp(e){return e.map((e=>Rnl.exp(e)))},floor(e){return e.map((e=>Rnl.floor(e)))},ceil(e){return e.map((e=>Rnl.ceil(e)))},percent(e){return e.map((e=>Rnl.multiply(oneTenth,e)))},factorial(e){return e.map((e=>Rnl.factorial(e)))},not(e){return e.map((e=>!e))}},matrix:{abs(e){return Matrix.invert(e,true)},norm(e){if(e.length===e[0].length){let t=Rnl.zero;for(let n=0;n<e.length;n++){t=Rnl.add(t,sumOfSquares(e[n]))}return t.sqrt()}},negate(e){return e.map((e=>e.map((e=>Rnl.negate(e)))))},exp(e){return e.map((e=>e.map((e=>Rnl.exp(e)))))},floor(e){return e.map((e=>e.map((e=>Rnl.floor(e)))))},ceil(e){return e.map((e=>e.map((e=>Rnl.ceil(e)))))},percent(e){return e.map((e=>e.map((e=>Rnl.multiply(oneTenth,e)))))},factorial(e){return e.map((e=>e.map((e=>Rnl.factorial(e)))))},not(e){return e.map((e=>e.map((e=>!e))))}},map:{abs(e){return mapMap(e,(e=>Rnl.abs(e)))},negate(e){return mapMap(e,(e=>Rnl.negate(e)))},exp(e){return mapMap(e,(e=>Rnl.exp(e)))},floor(e){return mapMap(e,(e=>Rnl.floor(e)))},ceil(e){return mapMap(e,(e=>Rnl.ceil(e)))},percent(e){return mapMap(e,(e=>Rnl.multiply(oneTenth,e)))},factorial(e){return mapMap(e,(e=>Rnl.factorial(e)))},not(e){return mapMap(e,(e=>!e))}},mapWithVectorValues:{abs(e){return mapMap(e,(e=>e.map((e=>Rnl.abs(e)))))},negate(e){return mapMap(e,(e=>e.map((e=>Rnl.negate(e)))))},exp(e){return mapMap(e,(e=>e.map((e=>Rnl.exp(e)))))},floor(e){return mapMap(e,(e=>e.map((e=>Rnl.floor(e)))))},ceil(e){return mapMap(e,(e=>e.map((e=>Rnl.ceil(e)))))},percent(e){return mapMap(e,(e=>e.map((e=>Rnl.multiply(oneTenth,e)))))},factorial(e){return mapMap(e,(e=>e.map((e=>Rnl.factorial(e)))))},not(e){return mapMap(e,(e=>e.map((e=>!e))))}}};const condition={scalar(e){return e},vector(e){return e.reduce(((e,t)=>e&&t),true)},matrix(e){const t=new Array(e.length);for(let n=0;n<e.length;n++){t[n]=e[n].reduce(((e,t)=>e&&t),true)}return t.reduce(((e,t)=>e&&t),true)}};const dtype={scalar:{scalar(e,t,n){return n==="&"||n==="&_"?e+(n==="&"?dt.ROWVECTOR:dt.COLUMNVECTOR):e},complex(e,t,n){return t},vector(e,t,n){return t},matrix(e,t,n){return t},dataFrame(e,t,n){return t},map(e,t,n){return t},mapWithVectorValues(e,t,n){return t}},complex:{scalar(e,t,n){return e},complex(e,t,n){return e}},vector:{scalar(e,t,n){return e},map(e,t,n){return t+(e&dt.ROWVECTOR)+(e&dt.COLUMNVECTOR)}},rowVector:{rowVector(e,t,n){return n==="&_"?e-dt.ROWVECTOR+dt.MATRIX:e},columnVector(e,t,n){return e},matrix(e,t,n){return n==="&_"?t:e}},columnVector:{rowVector(e,t,n){return n==="dot"?dt.RATIONAL:n==="cross"?e:e-dt.COLUMNVECTOR+dt.MATRIX},columnVector(e,t,n){return n==="&"?e-dt.COLUMNVECTOR+dt.MATRIX:e},matrix(e,t,n){return t}},matrix:{scalar(e,t,n){return e},rowVector(e,t,n){return e},columnVector(e,t,n){return n==="&"?e:t},matrix(e,t,n){return e},map(e,t,n){return 0}},dataFrame:{scalar(e,t,n){return e}},map:{scalar(e,t,n){return e},vector(e,t,n){return e+(t&dt.ROWVECTOR)+(t&dt.COLUMNVECTOR)},matrix(e,t,n){return 0},map(e,t,n){return e}},mapWithVectorValues:{scalar(e,t,n){return e}}};const binary$1={scalar:{scalar:{add(e,t){return Rnl.add(e,t)},subtract(e,t){return Rnl.subtract(e,t)},multiply(e,t){return Rnl.multiply(e,t)},divide(e,t){return Rnl.divide(e,t)},power(e,t){return Cpx.isComplex(e)||Rnl.isNegative(e)&&Rnl.isPositive(t)&&Rnl.lessThan(t,Rnl.one)?Cpx.power([e,Rnl.zero],t):Rnl.power(e,t)},hypot(e,t){return Rnl.hypot(e,t)},modulo(e,t){return Rnl.modulo(e,t)},and(e,t){return e&&t},or(e,t){return e||t},xor(e,t){return e!==t},concat(e,t){return[e,t]},unshift(e,t){return[e,t]}},complex:{add(e,t){return[Rnl.add(e,t[0]),t[1]]},subtract(e,t){return[Rnl.subtract(e,t[0]),Rnl.negate(t[1])]},multiply(e,t){return[Rnl.multiply(e,t[0]),Rnl.multiply(e,t[1])]},divide(e,t){return Cpx.divide([e,Rnl.zero],t)},power(e,t){return Cpx.power([e,Rnl.zero],t)},modulo(e,t){return errorOprnd("NA_COMPL_OP","modulo")},and(e,t){return errorOprnd("NA_COMPL_OP","and")},or(e,t){return errorOprnd("NA_COMPL_OP","or")},xor(e,t){return errorOprnd("NA_COMPL_OP","xor")}},vector:{add(e,t){return t.map((t=>Rnl.add(e,t)))},subtract(e,t){return t.map((t=>Rnl.subtract(e,t)))},multiply(e,t){return t.map((t=>Rnl.multiply(e,t)))},divide(e,t){return t.map((t=>Rnl.divide(e,t)))},power(e,t){return t.map((t=>Rnl.power(e,t)))},modulo(e,t){return t.map((t=>Rnl.modulo(e,t)))},and(e,t){return t.map((t=>e&&t))},or(e,t){return t.map((t=>e||t))},xor(e,t){return t.map((t=>e!==t))},concat(e,t){return[e,...t]}},matrix:{add(e,t){return t.map((t=>t.map((t=>Rnl.add(e,t)))))},subtract(e,t){return t.map((t=>t.map((t=>Rnl.subtract(e,t)))))},multiply(e,t){return t.map((t=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return t.map((t=>t.map((t=>Rnl.divide(e,t)))))},power(e,t){return t.map((t=>t.map((t=>Rnl.power(e,t)))))},modulo(e,t){return t.map((t=>t.map((t=>Rnl.modulo(e,t)))))},and(e,t){return t.map((t=>t.map((t=>e&&t))))},or(e,t){return t.map((t=>t.map((t=>e||t))))},xor(e,t){return t.map((t=>t.map((t=>e!==t))))},concat(e,t){return errorOprnd("BAD_CONCAT")}},dataFrame:{multiply(e,t){t.data=t.data.map((t=>isNaN(t[0])?t:t.map((t=>{let n=t.length;if(t.indexOf(".")){n-=1}return Rnl.toStringSignificant(Rnl.multiply(e,Rnl.fromString(t)),n)}))));return t},divide(e,t){t.data=t.data.map((t=>isNaN(t[0])?t:t.map((t=>{let n=t.length;if(t.indexOf(".")){n-=1}return Rnl.toStringSignificant(Rnl.divide(e,Rnl.fromString(t)),n)}))));return t}},map:{add(e,t){return mapMap(t,(t=>Rnl.add(e,t)))},subtract(e,t){return mapMap(t,(t=>Rnl.subtract(e,t)))},multiply(e,t){return mapMap(t,(t=>Rnl.multiply(e,t)))},divide(e,t){return mapMap(t,(t=>Rnl.divide(e,t)))},power(e,t){return mapMap(t,(t=>Rnl.power(e,t)))},modulo(e,t){return mapMap(t,(t=>Rnl.modulo(e,t)))},and(e,t){return mapMap(t,(t=>e&&t))},or(e,t){return mapMap(t,(t=>e||t))},xor(e,t){return mapMap(t,(t=>e!==t))}},mapWithVectorValues:{add(e,t){return mapMap(t,(t=>t.map((t=>Rnl.add(e,t)))))},subtract(e,t){return mapMap(t,(t=>t.map((t=>Rnl.subtract(e,t)))))},multiply(e,t){return mapMap(t,(t=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return mapMap(t,(t=>t.map((t=>Rnl.divide(e,t)))))},power(e,t){return mapMap(t,(t=>t.map((t=>Rnl.power(e,t)))))},modulo(e,t){return mapMap(t,(t=>t.map((t=>Rnl.modulo(e,t)))))},and(e,t){return mapMap(t,(t=>t.map((t=>e&&t))))},or(e,t){return mapMap(t,(t=>t.map((t=>e||t))))},xor(e,t){return mapMap(t,(t=>t.map((t=>e!==t))))}}},complex:{scalar:{add(e,t){return[Rnl.add(e[0],t),e[1]]},subtract(e,t){return[Rnl.subtract(e[0],t),e[1]]},multiply(e,t){return[Rnl.multiply(e[0],t),Rnl.multiply(e[1],t)]},divide(e,t){return Cpx.divide(e,[t,Rnl.zero])},power(e,t){return Cpx.power(e,[t,Rnl.zero])},modulo(e,t){return errorOprnd("NA_COMPL_OP","modulo")},and(e,t){return errorOprnd("NA_COMPL_OP","and")},or(e,t){return errorOprnd("NA_COMPL_OP","or")},xor(e,t){return errorOprnd("NA_COMPL_OP","xor")}},complex:{add(e,t){return[Rnl.add(e[0],t[0]),Rnl.add(e[1],t[1])]},subtract(e,t){return[Rnl.subtract(e[0],t[0]),Rnl.subtract(e[1],t[1])]},multiply(e,t){return Cpx.multiply(e,t)},divide(e,t){return Cpx.divide(e,t)},power(e,t){return Cpx.power(e,t)},modulo(e,t){return errorOprnd("NA_COMPL_OP","modulo")},and(e,t){return errorOprnd("NA_COMPL_OP","and")},or(e,t){return errorOprnd("NA_COMPL_OP","or")},xor(e,t){return errorOprnd("NA_COMPL_OP","xor")}}},vector:{scalar:{add(e,t){return e.map((e=>Rnl.add(e,t)))},subtract(e,t){return e.map((e=>Rnl.subtract(e,t)))},multiply(e,t){return e.map((e=>Rnl.multiply(e,t)))},divide(e,t){return e.map((e=>Rnl.divide(e,t)))},power(e,t){return e.map((e=>Rnl.power(e,t)))},modulo(e,t){return e.map((e=>Rnl.modulo(e,t)))},and(e,t){return e.map((e=>e&&t))},or(e,t){return e.map((e=>e||t))},xor(e,t){return e.map((e=>e!==t))},concat(e,t){return[...e,t]}},map:{add(e,t){return mapMap(t,(t=>e.map((e=>Rnl.add(t,e)))))},subtract(e,t){return mapMap(t,(t=>e.map((e=>Rnl.subtract(t,e)))))},multiply(e,t){return mapMap(t,(t=>e.map((e=>Rnl.multiply(t,e)))))},divide(e,t){return mapMap(t,(t=>e.map((e=>Rnl.divide(t,e)))))},power(e,t){return mapMap(t,(t=>e.map((e=>Rnl.power(t,e)))))},modulo(e,t){return mapMap(t,(t=>e.map((e=>Rnl.modulo(t,e)))))},and(e,t){return mapMap(t,(t=>e.map((e=>t&&e))))},or(e,t){return mapMap(t,(t=>e.map((e=>t||e))))},xor(e,t){return mapMap(t,(t=>e.map((e=>t!==e))))}}},rowVector:{rowVector:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.add(e,t[n])))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.subtract(e,t[n])))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.divide(e,t[n])))},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const n=[Rnl.zero,Rnl.zero,Rnl.zero];n[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));n[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));n[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return n},multiply(e,t){if(e.length===1&&t.length===1){return[Rnl.multiply(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},asterisk(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.multiply(e,t[n])))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.power(e,t[n])))},modulo(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.modulo(e,t[n])))},and(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e&&t[n]))},or(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e||t[n]))},xor(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e!==t[n]))},concat(e,t){return e.concat(t)},unshift(e,t){return[e,t]}},columnVector:{add(e,t){if(e.length===1&&t.length===1){return[Rnl.add(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},subtract(e,t){if(e.length===1&&t.length===1){return[Rnl.subtract(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const n=[Rnl.zero,Rnl.zero,Rnl.zero];n[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));n[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));n[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return n},multiply(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},asterisk(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.multiply(e,t[n])))},power(e,t){if(e.length===1&&t.length===1){return[Rnl.power(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},modulo(e,t){if(e.length===1&&t.length===1){return[Rnl.modulo(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},and(e,t){if(e.length===1&&t.length===1){return[e[0]&&t[0]]}return errorOprnd("MIS_ELNUM")},or(e,t){if(e.length===1&&t.length===1){return[e[0]||t[0]]}return errorOprnd("MIS_ELNUM")},xor(e,t){if(e.length===1&&t.length===1){return[e[0]!==t[0]]}return errorOprnd("MIS_ELNUM")},concat(e,t){return"BAD_CONCAT"},unshift(e,t){return"BAD_CONCAT"}},matrix:{add(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,n)=>Rnl.add(e[n],t)))))},subtract(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,n)=>Rnl.subtract(e[n],t)))))},concat(e,t){if(e.length!==t[0].length){return errorOprnd("BAD_CONCAT")}return t.map(((t,n)=>[e[n],...t]))},unshift(e,t){if(e.length!==t.length){return errorOprnd("BAD_CONCAT")}return[e,...t]}}},columnVector:{rowVector:{add(e,t){if(e.length===1&&t.length===1){return[Rnl.add(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},subtract(e,t){if(e.length===1&&t.length===1){return[Rnl.subtract(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const n=[Rnl.zero,Rnl.zero,Rnl.zero];n[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));n[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));n[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return n},multiply(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},divide(e,t){return e.map((e=>t.map((t=>Rnl.divide(e,t)))))},asterisk(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.multiply(e,t[n])))},power(e,t){if(e.length===1&&t.length===1){return[Rnl.power(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},modulo(e,t){if(e.length===1&&t.length===1){return[Rnl.modulo(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},and(e,t){if(e.length===1&&t.length===1){return[e[0]&&t[0]]}return errorOprnd("MIS_ELNUM")},or(e,t){if(e.length===1&&t.length===1){return[e[0]||t[0]]}return errorOprnd("MIS_ELNUM")},xor(e,t){if(e.length===1&&t.length===1){return[e[0]!==t[0]]}return errorOprnd("MIS_ELNUM")},concat(e,t){return"BAD_CONCAT"},unshift(e,t){return"BAD_CONCAT"}},columnVector:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.add(e,t[n])))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.subtract(e,t[n])))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.divide(e,t[n])))},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const n=[Rnl.zero,Rnl.zero,Rnl.zero];n[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));n[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));n[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return n},multiply(e,t){if(e.length===1&&t.length===1){return[Rnl.multiply(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},asterisk(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.multiply(e,t[n])))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.power(e,t[n])))},modulo(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>Rnl.modulo(e,t[n])))},and(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e&&t[n]))},or(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e||t[n]))},xor(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e!==t[n]))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>[e,t[n]]))},unshift(e,t){return e.concat(t)}},matrix:{add(e,t){const n=clone(t);if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}for(let r=0;r<t.length;r++){for(let l=0;l<t[0].length;l++){n[r][l]=Rnl.add(t[r][l],e[l])}}return n},subtract(e,t){const n=clone(t);if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}for(let r=0;r<t.length;r++){for(let l=0;l<t[0].length;l++){n[r][l]=Rnl.subtract(t[r][l],e[l])}}return n},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,n)=>[e[n],...t]))},unshift(e,t){return"BAD_CONCAT"}}},matrix:{scalar:{add(e,t){return e.map((e=>e.map((e=>Rnl.add(e,t)))))},subtract(e,t){return e.map((e=>e.map((e=>Rnl.subtract(e,t)))))},multiply(e,t){return e.map((e=>e.map((e=>Rnl.multiply(e,t)))))},divide(e,t){return e.map((e=>e.map((e=>Rnl.divide(e,t)))))},power(e,t){if(t==="T"){return transpose2D(e)}if(e.length===e[0].length&&Rnl.areEqual(t,[BigInt(-1),BigInt(1)])){return Matrix.invert(e)}return e.map((e=>e.map((e=>Rnl.power(e,t)))))},modulo(e,t){return e.map((e=>e.map((e=>Rnl.modulo(e,t)))))}},rowVector:{add(e,t){return e.map((e=>e.map(((e,n)=>Rnl.add(e,t[n])))))},subtract(e,t){return e.map((e=>e.map(((e,n)=>Rnl.subtract(e,t[n])))))},multiply(e,t){return e.map((e=>e.map(((e,n)=>Rnl.multiply(e,t[n])))))},divide(e,t){return e.map((e=>e.map(((e,n)=>Rnl.divide(e,t[n])))))},power(e,t){return e.map((e=>e.map(((e,n)=>Rnl.power(e,t[n])))))},unshift(e,t){if(e[0].length!==t.length){return errorOprnd("MIS_ELNUM")}return[...e,t]}},columnVector:{add(e,t){return e.map((e=>e.map(((e,n)=>Rnl.add(e,t[n])))))},subtract(e,t){return e.map((e=>e.map(((e,n)=>Rnl.subtract(e,t[n])))))},multiply(e,t){if(e[0].length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map((e=>dotProduct(e,t)))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>[...e,t[n]]))}},matrix:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>Rnl.add(e,t[n][r])))))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>Rnl.subtract(e,t[n][r])))))},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>dotProduct(e,t[n]))).reduce(((e,t)=>Rnl.add(e,t)))},cross(e,t){return errorOprnd("CROSS")},multiply(e,t){},asterisk(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>Rnl.multiply(e,t[n][r])))))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>Rnl.divide(e,t[n][r])))))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>Rnl.power(e,t[n][r])))))},modulo(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>Rnl.modulo(e,t[n][r])))))},and(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>e&&t[n][r]))))},or(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>e||t[n][r]))))},xor(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.map(((e,r)=>e!==t[n][r]))))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,n)=>e.concat(t[n])))},unshift(e,t){if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.concat(t)}},map:{}},dataFrame:{multiply(e,t){e.data=e.data.map((e=>isNaN(e[0])?e:e.map((e=>{let n=e.length;if(e.indexOf(".")){n-=1}return Rnl.toStringSignificant(Rnl.multiply(t,Rnl.fromString(e)),n)}))));return e},divide(e,t){e.data=e.data.map((e=>isNaN(e[0])?e:e.map((e=>{let n=e.length;if(e.indexOf(".")){n-=1}return Rnl.toStringSignificant(Rnl.divide(t,Rnl.fromString(e)),n)}))));return e}},map:{scalar:{add(e,t){return mapMap(e,(e=>Rnl.add(e,t)))},subtract(e,t){return mapMap(e,(e=>Rnl.subtract(e,t)))},multiply(e,t){return mapMap(e,(e=>Rnl.multiply(e,t)))},divide(e,t){return mapMap(e,(e=>Rnl.divide(e,t)))},power(e,t){return mapMap(e,(e=>Rnl.power(e,t)))},modulo(e,t){return mapMap(e,(e=>Rnl.modulo(e,t)))},and(e,t){return mapMap(e,(e=>e&&t))},or(e,t){return mapMap(e,(e=>e||t))},xor(e,t){return mapMap(e,(e=>e!==t))}},vector:{add(e,t){return mapMap(e,(e=>t.map((t=>Rnl.add(e,t)))))},subtract(e,t){return mapMap(e,(e=>t.map((t=>Rnl.subtract(e,t)))))},multiply(e,t){return mapMap(e,(e=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return mapMap(e,(e=>t.map((t=>Rnl.divide(e,t)))))},power(e,t){return mapMap(e,(e=>t.map((t=>Rnl.power(e,t)))))},modulo(e,t){return mapMap(e,(e=>t.map((t=>Rnl.modulo(e,t)))))},and(e,t){return mapMap(e,(e=>t.map((t=>e&&t))))},or(e,t){return mapMap(e,(e=>t.map((t=>e||t))))},xor(e,t){return mapMap(e,(e=>t.map((t=>e!==t))))}},matrix:{},map:{}},mapWithVectorValues:{scalar:{add(e,t){return mapMap(e,(e=>e.map((e=>Rnl.add(e,t)))))},subtract(e,t){return mapMap(e,(e=>e.map((e=>Rnl.subtract(e,t)))))},multiply(e,t){return mapMap(e,(e=>e.map((e=>Rnl.multiply(e,t)))))},divide(e,t){return mapMap(e,(e=>e.map((e=>Rnl.divide(e,t)))))},power(e,t){return mapMap(e,(e=>e.map((e=>Rnl.power(e,t)))))},modulo(e,t){return mapMap(e,(e=>e.map((e=>Rnl.modulo(e,t)))))},and(e,t){return mapMap(e,(e=>e.map((e=>e&&t))))},or(e,t){return mapMap(e,(e=>e.map((e=>e||t))))},xor(e,t){return mapMap(e,(e=>e.map((e=>e!==t))))}},vector:{},matrix:{},map:{},mapWithVectorValues:{}}};const relations={scalar:{scalar:{relate(e,t,n,r){return compare(e,t,n,r)}},vector:{relate(e,t,n,r){if(r===undefined){return n.map((n=>compare(e,t,n,undefined)))}else if(typeof r!=="object"){return n.map((n=>compare(e,t,n,r)))}else if(Array.isArray(r)){return n.map(((n,l)=>compare(e,t,n,r[l])))}}},matrix:{relate(e,t,n,r){if(r===undefined){return n.map((n=>n.map((n=>compare(e,t,n,undefined)))))}else if(typeof r!=="object"){return n.map((n=>n.map((n=>compare(e,t,n,r)))))}else if(Array.isArray(r)){return n.map(((n,l)=>n.map(((n,a)=>compare(e,t,n,r[l][a])))))}}},map:{relate(e,t,n,r){if(r===undefined){return mapMap(n,(n=>compare(e,t,n,undefined)))}else if(typeof r!=="object"){return mapMap(n,(n=>compare(e,t,n,r)))}else{const l=new Map;for(const[a,s]of n.entries()){l.set(a,compare(e,t,s,r[a]))}return l}}}},vector:{scalar:{relate(e,t,n,r){if(r===undefined){return t.map((t=>compare(e,t,n,undefined)))}else if(typeof r!=="object"){return t.map((t=>compare(e,t,n,r)))}else if(Array.isArray(r)){return t.map(((t,l)=>compare(e,t,n,r[l])))}}}},rowVector:{rowVector:{relate(e,t,n,r){if(r===undefined){return t.map(((t,r)=>compare(e,t,n[r],undefined)))}}}},columnVector:{columnVector:{relate(e,t,n,r){if(r===undefined){return t.map(((t,r)=>compare(e,t,n[r],undefined)))}}}},matrix:{scalar:{relate(e,t,n,r){if(r===undefined){return t.map((t=>t.map((t=>compare(e,t,n,undefined)))))}else if(typeof r!=="object"){return t.map((t=>t.map((t=>compare(e,t,n,r)))))}else if(Array.isArray(r)){return t.map(((t,l)=>t.map(((t,a)=>compare(e,t,n,r[l][a])))))}}}}};const isDivByZero=(e,t)=>{switch(t){case"scalar":return e[1]===BigInt(0);case"vector":for(let t=0;t<e.length;t++){if(e[t][1]===BigInt(0)){return true}}return false;case"matrix":for(let t=0;t<e.length;t++){for(let n=0;n<e[0].length;n++){if(e[t][n][1]===BigInt(0)){return true}}}return false;case"map":for(const[t,n]of Object.entries(e)){if(n[1]===BigInt(0)){return true}}return false;case"mapWithVectorValues":for(const[t,n]of Object.entries(e)){for(let e=0;e<n.length;e++){if(n[e][1]===BigInt(0)){return true}}}return false;default:return false}};const Operators=Object.freeze({unary:unary$1,binary:binary$1,relations:relations,condition:condition,dtype:dtype});const wideCharRegEx=/[\uD800-\uDBFF][\uDC00-\uDFFF][\uFE00\uFE01]?/g;const textRange=(e,t)=>{if(t.dtype!==dt.RATIONAL&&t.dtype!==dt.RANGE){return errorOprnd("STR_INDEX")}const n=arrayOfRegExMatches(wideCharRegEx,e);let r="";if(n.length===0){if(t.dtype===dt.RATIONAL){r=e.charAt(Rnl.toNumber(t.value)-1)}else if(t.dtype===dt.RANGE){const n=Rnl.toNumber(t.value[0]);const l=Rnl.toNumber(t.value[1]);const a=t.value[2]==="∞"?e.length:Rnl.toNumber(t.value[2]);if(l===1){r=e.slice(n-1,a)}else{for(let t=n-1;t<a;t+=l){r+=e.charAt(t)}}}}else{let l=0;let a=0;let s="";let o=0;let i=0;let u=0;if(t.dtype===dt.RATIONAL){o=Rnl.toNumber(t.value);i=1;u=o}else{o=Rnl.toNumber(t.value[0]);i=Rnl.toNumber(t.value[1]);u=Rnl.toNumber(t.value[2])}let c=o;for(let t=0;t<n.length;t++){const o=n[t].index;s=e.slice(a,o);while(c<=u&&l+s.length>=c){r+=s[c-l-1];c+=i}if(c<=u&&l+s.length===c-1){r+=n[t].value;c+=i}if(c>u){return{value:r,unit:null,dtype:dt.STRING}}l+=s.length+1;a=o+n[t].length}if(c>=l&&c<=u){s=e.slice(a);while(c<=u&&l+s.length>=c){r+=s[c-l-1];c+=i}}else{return errorOprnd("BIGINDEX")}}return{value:r,unit:null,dtype:dt.STRING}};function insertOneHurmetVar(e,t,n){const r=e.format?e.format.value:"h15";if(!Array.isArray(t.name)){e[t.name]=t}else if(t.value===null){for(let n=0;n<t.name.length;n++){e[t.name[n]]={value:null}}}else if(isMatrix(t)){const n=Boolean(t.dtype&dt.QUANTITY);let r=t.resultdisplay;r=r.replace(/\\(begin|end){[bp]matrix}/g,"").trim();const l=r.split(/&|\\\\/);if(t.dtype&dt.MATRIX){const r=t.dtype-dt.MATRIX;const a=n?t.value.plain.length:t.value.length;const s=t.name.length/a;let o=0;for(let i=0;i<a;i++){for(let a=0;a<s;a++){const s=n?{plain:t.value.plain[i][a],inBaseUnits:t.value.inBaseUnits[i][a]}:t.value[i][a];e[t.name[i]]={name:t.name[o],value:s,resultdisplay:n?parse(l[o].trim()+" '"+t.unit+"'"):l[o].trim(),expos:t.expos,unit:n?t.unit:undefined,dtype:r};o+=1}}}else{const r=Boolean(t.dtype&dt.COLUMNVECTOR);const a=t.dtype-(r?dt.COLUMNVECTOR:dt.ROWVECTOR);for(let r=0;r<t.name.length;r++){const s=n?{plain:t.value.plain[r],inBaseUnits:t.value.inBaseUnits[r]}:t.value[r];e[t.name[r]]={name:t.name[r],value:s,resultdisplay:n?parse(l[r].trim()+" '"+t.unit+"'"):l[r].trim(),expos:t.expos,unit:n?t.unit:undefined,dtype:a}}}}else if(t.dtype&dt.MAP){const l=t.value.unit;const a=l&&l.name?l.name:undefined;const s=t.dtype-dt.MAP;let o=0;if(t.dtype&dt.QUANTITY){for(const l of t.value.plain.values()){const i={value:{plain:l},expos:t.expos,factor:t.factor,dtype:s};i.resultdisplay=format(l,r,n);if(a){i.resultdisplay+=" "+unitTeXFromString(a)}e[t.name[o]]=i;o+=1}o=0;for(const n of t.value.inBaseUnits.values()){e[t.name[o]].value.inBaseUnits=n;o+=1}}else{for(const l of t.value.values()){const i={value:l,expos:t.expos,factor:t.factor,dtype:s};i.resultdisplay=Rnl.isRational(l)?format(l,r,n):String(l);if(a){i.resultdisplay+=" "+unitTeXFromString(a)}e[t.name[o]]=i;o+=1}}}else if(t.dtype===dt.DATAFRAME){for(let n=0;n<t.name.length;n++){const r=t.value.data[n][0];const l=t.value.dtype[n];const a=l&dt.RATIONAL?Rnl.fromString(r):r;const s={value:a,unit:t.unit[t.value.units[n]],dtype:l,resultdisplay:l&dt.RATIONAL?parse(format(a)):parse(a)};if(t.value.units[n]){s.value={plain:s.value};const e=t.unit[t.value.units[n]];s.value.inBaseUnits=Rnl.multiply(Rnl.add(s.value.plain,e.gauge),e.factor);s.expos=e.expos;s.resultdisplay+=" "+unitTeXFromString(s.unit.name)}e[t.name[n]]=s}}else if(t.dtype===dt.TUPLE){let n=0;for(const r of t.value.values()){e[t.name[n]]=r;n+=1}}else if(t.dtype===dt.MODULE){if(t.name.length!==t.value.length){return errorOprnd("MULT_MIS")}else{let n=0;for(const r of t.value.values()){const l=clone(r);e[t.name[n]]=l;n+=1}}}}const CR_NEWLINE_R=/\r\n?/g;const TAB_R=/\t/g;const FORMFEED_R=/\f/g;const CLASS_R=/(?:^| )\.([a-z-]+)(?: |$)/;const WIDTH_R=/(?:^| )width="?([\d.a-z]+"?)(?: |$)/;const COL_WIDTHS_R=/(?:^| )colWidths="([^"]*)"/;const ID_R=/(?:^| )#([a-z-]+)(?: |$)/;const preprocess=function(e){return e.replace(CR_NEWLINE_R,"\n").replace(FORMFEED_R,"").replace(TAB_R,"    ")};const inlineRegex=function(e){const t=function(t,n){return n.inline?e.exec(t):null};t.regex=e;return t};const blockRegex=function(e){const t=function(t,n){return n.inline?null:e.exec(t)};t.regex=e;return t};const anyScopeRegex=function(e){const t=function(t,n){return e.exec(t)};t.regex=e;return t};const UNESCAPE_URL_R=/\\([^0-9A-Za-z\s])/g;const unescapeUrl=function(e){return e.replace(UNESCAPE_URL_R,"$1")};const parseList=(e,t)=>{const n=e.replace(LIST_BLOCK_END_R,"\n").match(LIST_ITEM_R);const r=t.inHtml&&!/\n\n(?!$)/.test(e);const l=n.map((function(e,n){const l=LIST_ITEM_PREFIX_R.exec(e);const a=l?l[0].length:0;const s=new RegExp("^ {1,"+a+"}","gm");const o=e.replace(s,"").replace(LIST_ITEM_PREFIX_R,"");const i=t.inline;const u=t._list;t._list=true;const c=t.isTight;t.isTight=r;t.inline=r;const p=o.replace(LIST_ITEM_END_R,"");const d=r?{type:"list_item",content:parseInline(p,t)}:{type:"list_item",content:parse$1(p,t)};t.inline=i;t._list=u;t.isTight=c;return d}));return l};const TABLES=function(){const e=/^ *\| *| *\| *$/g;const t=/^[-=]+:$/;const n=/^:[-=]+:$/;const r=function(r){r=r.replace(e,"");const l=r.trim().split(/[|+*]/);let a="";for(let e=0;e<l.length;e++){a+=n.test(l[e])?` c${String(e+1)}c`:t.test(l[e])?` c${String(e+1)}r`:""}return a.trim()};const l=(e,t)=>{if(!e&&t===""){return["","",null]}const n=CLASS_R.exec(e);let r=n?n[1]:"";if(t.length>0){r+=(r.length>0?" ":"")+t}const l=ID_R.exec(e);const a=l?l[1]:"";const s=COL_WIDTHS_R.exec(e);const o=s?s[1].split(" "):null;return[r,a,o]};const a=function(e,t,n,r,l){const a=n.inTable;n.inTable=true;const s=t(e.trim(),n);consolidate(s);n.inTable=a;const o={type:"table_row",content:[]};let i=-1;s.forEach((function(e,t){if(e.type==="text"){e.text=e.text.trim()}if(e.type==="tableSeparator"){if(t!==s.length-1){i+=1;o.content.push({type:l?"table_header":"table_cell",attrs:{colspan:1,rowspan:1,colwidth:r?[Number(r[i])]:null,background:null},content:n.inHtml?[]:[{type:"paragraph",content:[]}]})}}else if(n.inHtml){o.content[i].content.push(e)}else{o.content[i].content[0].content.push(e)}}));return o};const s=function(){return function(e,t){t.inline=true;const n=r(e[2]);const[s,o,i]=l(e[4],n);const u={type:"table",attrs:{},content:[]};if(o){u.attrs.id=o}if(s){u.attrs.class=s}u.content.push(a(e[1],parse$1,t,i,true));const c=e[3].trim().split("\n");c.forEach((e=>{u.content.push(a(e,parse$1,t,i,false))}));t.inline=false;return u}};const o=/^\+:?=/;const i=function(){return function(e,t){const n=e[2];const a=r(n.slice(1));const[s,i,u]=l(e[3],a);const c=e[1].slice(0,-1).split("\n");let p=false;let d=c.length+10;for(let e=0;e<c.length;e++){if(o.test(c[e])){p=true;d=e;break}}const f=[0];for(let e=1;e<n.length;e++){const t=n.charAt(e);if(t==="+"){f.push(e)}}const m=[0];for(let e=1;e<c.length;e++){const t=c[e].charAt(0);if(t==="+"){m.push(e)}}const R=f.length-1;const h=m.length-1;const g=[];for(let e=0;e<h;e++){const e=new Array(R);for(let t=0;t<R;t++){e[t]={rowspan:1}}g.push(e)}for(let e=0;e<h;e++){const t=g[e];for(let n=0;n<R;n++){const r=t[n];if(r.rowspan===0){continue}r.colspan=1;const l=c[m[e+1]-1];for(let e=n+1;e<f.length;e++){if(l.charAt(f[e])==="|"){break}r.colspan+=1;t[e].rowspan=0}for(let t=e+1;t<m.length;t++){const e=c[m[t]].charAt(f[n]+1);if(e==="-"||e==="="){break}r.rowspan+=1;for(let e=0;e<r.colspan;e++){g[t][n+e].rowspan=0}}const a=f[n]+2;const s=f[n+r.colspan]-1;const o=m[e]+1;const i=m[e+r.rowspan];let R="";for(let e=o;e<i;e++){R+=c[e].slice(a,s).replace(/ +$/,"")+"\n"}r.blob=R.slice(0,-1).replace(/^\n+/,"");r.inHeader=p&&o<d;if(u){let e=0;for(let t=0;t<r.colspan;t++){e+=Number(u[n+t])}r.width=e}}}const y={type:"table",attrs:{},content:[]};if(i){y.attrs.id=i}if(s){y.attrs.class=s}for(let e=0;e<h;e++){y.content.push({type:"table_row",content:[]});for(let n=0;n<R;n++){if(g[e][n].rowspan===0){continue}const r=g[e][n];t.inline=false;let l=t.inHtml&&r.blob.indexOf("```")===-1&&!/\n\n/.test(r.blob.replace(/\n+$/g,""))?parseInline(r.blob,t):parse$1(r.blob,t);if(l.length===1&&l[0].type==="null"){l=t.inHtml?[{type:"text",text:""}]:[{type:"paragraph",content:[]}]}y.content[e].content.push({type:r.inHeader?"table_header":"table_cell",attrs:{colspan:r.colspan,rowspan:r.rowspan,colwidth:u?[r.width]:null,background:null},content:l})}}t.inline=false;return y}};return{parsePipeTable:s(),PIPE_TABLE_REGEX:/^(\|.+)\n\|([-:]+[-| :]*)\n((?:\|.*(?:\n|$))*)(?:\{([^\n}]+)\}\n)?\n*/,parseGridTable:i(),GRID_TABLE_REGEX:/^((\+(?:[-:=]+\+)+)\n(?:[+|][^\n]+[+|]\n)+)(?:\{([^\n}]+)\}\n)?\n*/}}();const LINK_INSIDE="(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*";const LINK_HREF_AND_TITLE="\\s*<?((?:\\([^)]*\\)|[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*";const linkIndex=e=>{for(let t=0;t<e.length;t++){if(e[t].type==="link"){return t}}};const parseRef=function(e,t,n){let r=e[2]?e[2]:e[1];r=r.replace(/\s+/g," ");if(t._defs&&t._defs[r]){const e=t._defs[r];if(n.type==="image"){n.attrs.src=e.target;n.attrs.width=null}else{n.attrs.href=e.target}}t._refs=t._refs||{};t._refs[r]=t._refs[r]||[];t._refs[r].push(n);return n};const parseTextMark=(e,t,n)=>{const r=parseInline(e,t);if(Array.isArray(r)&&r.length===0){return r}consolidate(r);for(const e of r){if(e.marks){e.marks.push({type:n})}else{e.marks=[{type:n}]}}return r};const BLOCK_HTML=/^ *(?:<(head|h[1-6]|p|pre|script|style|table)[\s>][\s\S]*?(?:<\/\1>[^\n]*\n)|<!--[^>]+-->[^\n]*\n|<\/?(?:body|details|(div|input|label)(?: [^>]+)?|!DOCTYPE[a-z ]*|html[a-z ="]*|br|dl(?: class="[a-z-]+")?|li|main[a-z\- ="]*|nav|ol|ul(?: [^>]+)?)\/?>[^\n]*?(?:\n|$))/;const divType={C:"centered_div",H:"header",i:"indented_div"};const rules=new Map;rules.set("html",{isLeaf:true,match:blockRegex(BLOCK_HTML),parse:function(e,t){if(!t.inHtml){return null}return{type:"html",text:e[0]}}});rules.set("heading",{isLeaf:false,match:blockRegex(/^ *(#{1,6})([^\n]+?)#* *(?:\n *)+\n/),parse:function(e,t){return{attrs:{level:e[1].length},content:parseInline(e[2].trim(),t)}}});rules.set("dt",{isLeaf:false,match:blockRegex(/^(([^\n]*)\n)(?=<dd>|\n:)/),parse:function(e,t){return{content:parseInline(e[2].trim(),t)}}});rules.set("horizontal_rule",{isLeaf:true,match:blockRegex(/^( *[-*_]){3,} *(?:\n *)+\n/),parse:function(e,t,n){return{type:"horizontal_rule"}}});rules.set("lheading",{isLeaf:false,match:blockRegex(/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/),parse:function(e,t,n){return{type:"heading",level:e[2]==="="?1:2,content:parseInline(t,e[1])}}});rules.set("fence",{isLeaf:true,match:blockRegex(/^(`{3,}) *(?:(\S+) *)?\n([\s\S]+?)\n?\1 *(?:\n *)+\n/),parse:function(e,t){return{type:"code_block",content:[{type:"text",text:e[3]}]}}});rules.set("blockquote",{isLeaf:false,match:blockRegex(/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/),parse:function(e,t){const n=e[0].replace(/^ *> ?/gm,"");return{content:parse$1(n,t)}}});rules.set("ordered_list",{isLeaf:false,match:blockRegex(/^( {0,3})(\d{1,9}\.) [\s\S]+?(?:\n{2,}(?! )(?!\1(?:\d{1,9}\.) )\n*|\s*$)/),parse:function(e,t){const n=Number(e[2].trim());return{attrs:{order:n},content:parseList(e[0],t,e[1])}}});rules.set("bullet_list",{isLeaf:false,match:blockRegex(/^( {0,3})([*+-]) [\s\S]+?(?:\n{2,}(?! )(?!\1(?:[*+-]) )\n*|\s*$)/),parse:function(e,t){return{content:parseList(e[0],t,e[1])}}});rules.set("dd",{isLeaf:false,match:blockRegex(/^:( +)[\s\S]+?(?:\n{2,}(?! |:)(?!\1)\n*|\s*$)/),parse:function(e,t){let n=" "+e[0].slice(1);const r=1+e[1].length;const l=new RegExp("^ {"+r+","+r+"}","gm");n=n.replace(l,"");return{content:parse$1(n,t)}}});rules.set("special_div",{isLeaf:false,match:blockRegex(/^(C|H|i)>( {1,})[\s\S]+?(?:\n{2,}(?! {2,2}\2)\n*|\s*$)/),parse:function(e,t){const n=divType[e[1]];let r="  "+e[0].slice(2);const l=2+e[2].length;const a=new RegExp("^ {"+l+","+l+"}","gm");r=r.replace(a,"");return{type:n,content:parse$1(r,t)}}});rules.set("def",{isLeaf:true,match:blockRegex(/^\[([^\]]+)\]: *<?([^\n>]*)>? *\n(?:\{([^\n}]*)\}\n)?/),parse:function(e,t){const n=e[1].replace(/\s+/g," ");const r=e[2];const l=e[3]||"";const a={};if(t._refs&&t._refs[n]){t._refs[n].forEach((function(e){if(e.type==="image"){e.attrs.src=r;if(l){const t=CLASS_R.exec(l);if(t){e.attrs.class=t[1];a.class=t[1]}const n=WIDTH_R.exec(l);if(n){e.attrs.width=n[1];a.width=n[1]}const r=ID_R.exec(l);if(r){e.attrs.id=r[1];a.id=r[1]}}}else{e.attrs.href=r}}))}t._defs=t._defs||{};t._defs[n]={target:r,attrs:a};return{def:n,target:r,directives:l}}});rules.set("toc",{isLeaf:true,match:blockRegex(/^{\.toc start=(\d) end=(\d)}\n/),parse:function(e,t){return{attrs:{start:Number(e[1]),end:Number(e[2]),body:[]}}}});rules.set("pipeTable",{isLeaf:false,match:blockRegex(TABLES.PIPE_TABLE_REGEX),parse:TABLES.parsePipeTable});rules.set("gridTable",{isLeaf:false,match:blockRegex(TABLES.GRID_TABLE_REGEX),parse:TABLES.parseGridTable});rules.set("newline",{isLeaf:true,match:blockRegex(/^(?:\n *)*\n/),parse:function(){return{type:"null"}}});rules.set("paragraph",{isLeaf:false,match:blockRegex(/^((?:[^\n]|\n(?! *\n))+)(?:\n *)+\n/),parse:function(e,t){return{content:parseInline(e[1],t)}}});rules.set("escape",{isLeaf:true,match:inlineRegex(/^\\([^0-9A-Za-z\s])/),parse:function(e,t){return{type:"text",text:e[1]}}});rules.set("tableSeparator",{isLeaf:true,match:function(e,t){if(!t.inTable){return null}return/^ *\| */.exec(e)},parse:function(){return{type:"tableSeparator"}}});rules.set("calculation",{isLeaf:true,match:anyScopeRegex(/^(?:¢((?:\\[\s\S]|[^\\])+?)¢|¢¢\n?((?:\\[\s\S]|[^\\])+?)\n?¢¢)/),parse:function(e,t){if(e[1]){let t=e[1].trim();if(!/^(?:function|draw\()/.test(t)&&t.indexOf("``")===-1){t=t.replace(/\n/g," ")}return{content:"",attrs:{entry:t}}}else{const t=e[2].trim();return{content:"",attrs:{entry:t,displayMode:true}}}}});rules.set("tex",{isLeaf:true,match:anyScopeRegex(/^(?:\$\$\n?((?:\\[\s\S]|[^\\])+?)\n?\$\$|\$((?:\\[\s\S]|[^\\])+?)\$)/),parse:function(e,t){if(e[2]){const t=e[2].trim().replace(/\n/g," ");return{content:"",attrs:{tex:t}}}else{const t=e[1].trim();return{content:"",attrs:{tex:t,displayMode:true}}}}});rules.set("comment",{isLeaf:true,match:inlineRegex(/^©((?:\\[\s\S]|[^\\])+?)©/),parse:function(e,t){return{content:"",attrs:{comment:e[1]}}}});rules.set("link",{isLeaf:true,match:inlineRegex(new RegExp("^\\[("+LINK_INSIDE+")\\]\\("+LINK_HREF_AND_TITLE+"\\)")),parse:function(e,t){const n=parseTextMark(e[1],t,"link")[0];const r=linkIndex(n.marks);n.marks[r].attrs={href:unescapeUrl(e[2])};return n}});rules.set("image",{isLeaf:true,match:inlineRegex(new RegExp("^!\\[("+LINK_INSIDE+")\\]\\("+LINK_HREF_AND_TITLE+"\\)")),parse:function(e,t){return{attrs:{alt:e[1],src:unescapeUrl(e[2])}}}});rules.set("reflink",{isLeaf:true,match:inlineRegex(/^\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\]/),parse:function(e,t){const n=parseTextMark(e[1],t,"link")[0];const r=linkIndex(n.marks);n.marks[r].attrs={href:null};if(e[2]){n.marks[r].attrs.title=e[2]}parseRef(e,t,n.marks[r]);return n}});rules.set("refimage",{isLeaf:true,match:inlineRegex(/^!\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\]/),parse:function(e,t){return parseRef(e,t,{type:"image",attrs:{alt:e[1]}})}});rules.set("code",{isLeaf:true,match:inlineRegex(/^(`+)([\s\S]*?[^`])\1(?!`)/),parse:function(e,t){const n=e[2].trim();return[{type:"text",text:n,marks:[{type:"code"}]}]}});rules.set("em",{isLeaf:true,match:inlineRegex(/^_((?:\\[\s\S]|[^\\])+?)_/),parse:function(e,t){return parseTextMark(e[1],t,"em")}});rules.set("strong",{isLeaf:true,match:inlineRegex(/^\*\*(?=\S)((?:\\[\s\S]|\*(?!\*)|[^\s*\\]|\s(?!\*\*))+?)\*\*/),parse:function(e,t){return parseTextMark(e[1],t,"strong")}});rules.set("strikethru",{isLeaf:true,match:inlineRegex(/^~~(?=\S)((?:\\[\s\S]|~(?!~)|[^\s~\\]|\s(?!~~))+?)~~/),parse:function(e,t){return parseTextMark(e[1],t,"strikethru")}});rules.set("superscript",{isLeaf:true,match:inlineRegex(/^<sup>([\s\S]*?)<\/sup>/),parse:function(e,t){return parseTextMark(e[1],t,"superscript")}});rules.set("subscript",{isLeaf:true,match:inlineRegex(/^~((?:\\[\s\S]|[^\\])+?)~/),parse:function(e,t){return parseTextMark(e[1],t,"subscript")}});rules.set("underline",{isLeaf:true,match:inlineRegex(/^<u>([\s\S]*?)<\/u>/),parse:function(e,t){return parseTextMark(e[1],t,"underline")}});rules.set("highlight",{isLeaf:true,match:inlineRegex(/^<mark>([\s\S]*?)<\/mark>/),parse:function(e,t){return parseTextMark(e[1],t,"highlight")}});rules.set("hard_break",{isLeaf:true,match:anyScopeRegex(/^\\\n/),parse:function(){return{text:"\n"}}});rules.set("inline_break",{isLeaf:true,match:anyScopeRegex(/^<br>/),parse:function(){return{type:"hard_break",text:"\n"}}});rules.set("span",{isLeaf:true,match:inlineRegex(/^<span [a-z =":]+>[^<]+<\/span>/),parse:function(e,t){return!t.inHtml?null:{type:"html",text:e[0]}}});rules.set("text",{isLeaf:true,match:anyScopeRegex(/^[\s\S]+?(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|$)/),parse:function(e,t){return{text:e[0].replace(/\n/g," ")}}});const doNotEscape=["calculation","code","tex"];const textModeRegEx=/\\(ce|text|hbox|raisebox|fbox)\{/;const identifyTeX=e=>{let t="$";let n=0;for(let r=1;r<e.length;r++){const l=e.charAt(r);if(l==="{"&&t!=="\\"){n+=1}if(l==="}"&&t!=="\\"){n-=1}if(l==="$"&&t!=="\\"&&n===0){return[e.slice(0,r+1),null,e.slice(1,r)]}t=l}return[e,null,e.slice(1,-1)]};const parse$1=(e,t)=>{if(!t.inline){e+="\n\n"}e=preprocess(e);const n=[];while(e){let r=null;let l=null;let a=null;for(const[n,s]of rules){if(t.inCode&&doNotEscape.includes(n)){continue}r=s.match(e,t);if(r){a=s;l=n;break}}if(l==="tex"&&r[2]&&textModeRegEx.test(r[2])){r=identifyTeX(e)}const s=a.parse(r,t);if(Array.isArray(s)){Array.prototype.push.apply(n,s)}else{if(s.type==null){s.type=l}n.push(s)}e=e.substring(r[0].length)}return n};const parseInline=function(e,t){const n=t.inline||false;t.inline=true;const r=parse$1(e,t);t.inline=n;return r};const LIST_BULLET="(?:[*+-]|\\d+\\.)";const LIST_ITEM_PREFIX="( *)("+LIST_BULLET+") +";const LIST_ITEM_PREFIX_R=new RegExp("^"+LIST_ITEM_PREFIX);const LIST_ITEM_R=new RegExp(LIST_ITEM_PREFIX+"[^\\n]*(?:\\n"+"(?!\\1"+LIST_BULLET+" )[^\\n]*)*(\n|$)","gm");const BLOCK_END_R=/\n{2,}$/;const LIST_BLOCK_END_R=BLOCK_END_R;const LIST_ITEM_END_R=/ *\n+$/;const ignore=["def","newline","null"];const consolidate=e=>{if(Array.isArray(e)&&e.length>0){for(let t=e.length-1;t>0;t--){const n=e[t];const r=e[t-1];if(n.type==="text"&&r.type==="text"&&!n.marks&&!r.marks){r.text+=n.text;e.splice(t,1)}else if(ignore.includes(n.type)){e.splice(t,1)}else if(!rules.has(n.type)||!rules.get(n.type).isLeaf){consolidate(n.content)}}if(!rules.has(e[0].type)||!rules.get(e[0].type).isLeaf){consolidate(e[0].content)}}};const populateTOC=e=>{let t;for(const n of e){if(n.type==="toc"){t=n;break}}if(!t){return}const n=t.attrs.start;const r=t.attrs.end;for(const l of e){if(l.type==="heading"){const e=l.attrs.level;if(n<=e&&e<=r){const n=[];let r="";for(const e of l.content){r+=e.text}n.push(r);n.push(e);n.push(0);n.push(0);t.attrs.body.push(n)}}}};const md2ast=(e,t=false)=>{const n=parse$1(e,{inline:false,inHtml:t});if(Array.isArray(n)&&n.length>0&&n[0].type==="null"){n.shift()}consolidate(n);populateTOC(n);return n};const startSvg=e=>({tag:"svg",children:[],attrs:{xmlns:"http://www.w3.org/2000/svg",width:250,height:250,style:"display: inline;"},temp:{width:250,height:250,xmin:0,xmax:5,ymin:0,ymax:5,xunitlength:20,yunitlength:20,origin:[0,0],stroke:"black",strokewidth:1,strokedasharray:null,fill:"none",fontstyle:"normal",fontfamily:"sans-serif",fontsize:13.33,fontweight:"normal",markerstrokewidth:1,markerstroke:"black",markerfill:"yellow",markersize:4,marker:"none",dotradius:4,axesstroke:"black",gridstroke:"grey",isDim:false}});const setStrokeAndFill=(e,t)=>{e.attrs["stroke-width"]=t.strokewidth;e.attrs.stroke=t.stroke;e.attrs.fill=t.fill;if(t.strokedasharray!=null&&t.strokedasharray!=="none"){e.attrs["stroke-dasharray"]=t.strokedasharray}};const pointZeroRegEx=/\.0+$/;const chopZ=e=>{const t=e.indexOf(".");if(t===-1){return e}if(pointZeroRegEx.test(e)){return e.replace(pointZeroRegEx,"")}let n;for(n=e.length-1;n>t&&e.charAt(n)==="0";n--){if(n===t){n--}}return e.slice(0,n+1)};const markerDot=(e,t,n,r)=>{if(n==null){n=t.stroke}if(r==null){r=t.fill}const l={tag:"circle",attrs:{}};l.attrs.cx=e[0]*t.xunitlength+t.origin[0];l.attrs.cy=t.height-e[1]*t.yunitlength-t.origin[1];l.attrs.r=t.markersize;l.attrs["stroke-width"]=t.strokewidth;l.attrs.stroke=n;l.attrs.fill=r;return l};const arrowhead=(e,t,n)=>{const r=e.temp;const l=[t[0]*r.xunitlength+r.origin[0],r.height-t[1]*r.yunitlength-r.origin[1]];const a=[n[0]*r.xunitlength+r.origin[0],r.height-n[1]*r.yunitlength-r.origin[1]];let s=[a[0]-l[0],a[1]-l[1]];const o=Math.sqrt(s[0]*s[0]+s[1]*s[1]);if(o>1e-8){s=[s[0]/o,s[1]/o];const t=r.marker==="markerdot"?3:r.isDim?0:1;const n=[-s[1],s[0]];const l={tag:"path",attrs:{}};l.attrs.d="M "+(a[0]-12.5*s[0]-3*n[0])+","+(a[1]-12.5*s[1]-3*n[1])+" L "+(a[0]-t*s[0])+","+(a[1]-t*s[1])+" L "+(a[0]-12.5*s[0]+3*n[0])+","+(a[1]-12.5*s[1]+3*n[1])+" z";if(r.isDim){l.attrs.stroke="none"}else{l.attrs["stroke-width"]=r.markerstrokewidth;l.attrs.stroke=r.stroke}l.attrs.fill=r.stroke;e.children.push(l)}};const markAttribute={em:["font-style","italic"],strong:["font-weight","bold"],code:["font-family","monospace"],strikethru:["text-decoration","line-through"],subscript:["font-size","0.8em"]};const textLocal=(e,t,n,r)=>{const l=e.temp;let a="middle";let s=0;let o=l.fontsize/3;if(r!=null){if(r.slice(0,5)==="above"){o=-l.fontsize/2}if(r.slice(0,5)==="below"){o=1.25*l.fontsize}if(r.slice(0,5)==="right"||r.slice(5,10)==="right"){a="start";s=l.fontsize/2}if(r.slice(0,4)==="left"||r.slice(5,9)==="left"){a="end";s=-l.fontsize/2}}const i={tag:"text",children:[],attrs:{}};i.attrs["text"]=n;i.attrs.x=t[0]*l.xunitlength+l.origin[0]+s;i.attrs.y=l.height-t[1]*l.yunitlength-l.origin[1]+o;i.attrs["font-family"]=l.fontfamily;i.attrs["font-size"]=l.fontsize;i.attrs["text-anchor"]=a;const u=md2ast(n)[0].content;if(Array.isArray(u)){let e=false;for(const t of u){const n={tag:"tspan",text:t.text};let r=false;if(t.marks){n.attrs={};for(const e of t.marks){const t=markAttribute[e.type];n.attrs[t[0]]=t[1];if(e.type==="subscript"){r=true}}}if(r){if(!e){n.attrs.dy="2"}}else if(e){if(!t.marks){n.attrs={}}n.attrs.dy="-2"}e=r;i.children.push(n)}}e.children.push(i);return e};const functions={stroke(e,t){e.value.temp.stroke=t.value;return e},strokewidth(e,t){e.value.temp.strokewidth=Rnl.toNumber(t.value);return e},strokedasharray(e,t){e.value.temp.strokedasharray=t.value;return e},fill(e,t){e.value.temp.fill=t.value;return e},fontsize(e,t){e.value.temp.fontsize=Rnl.toNumber(t.value);return e},fontfamily(e,t){e.value.temp.fontfamily=t.value;return e},marker(e,t){e.value.temp.marker=t.value;return e},title(e,t){e.value.children.push({tag:"title",attrs:{text:t.value}});return e},frame(e,t=250,n=250,r="inline"){const l=e.value;const a=l.temp;a.width=typeof t==="number"?t:Rnl.toNumber(t.value);l.attrs.width=a.width;a.height=typeof n==="number"?n:Rnl.toNumber(n.value);l.attrs.height=a.height;if(typeof r!=="string"){r=r.value}l.attrs.style=`float: ${r}`;a.xunitlength=a.width/(a.xmax-a.xmin);a.yunitlength=a.height/(a.ymax-a.ymin);a.origin=[-a.xmin*a.xunitlength,-a.ymin*a.yunitlength];return{value:l,unit:null,dtype:dt.DRAWING}},view(e,t=0,n=5,r,l){const a=e.value;const s=a.temp;s.xmin=typeof t==="number"?t:Rnl.toNumber(t.value);s.xmax=typeof n==="number"?n:Rnl.toNumber(n.value);s.xunitlength=s.width/(s.xmax-s.xmin);s.yunitlength=s.xunitlength;if(r==null){s.origin=[-s.xmin*s.xunitlength,s.height/2];s.ymin=-s.height/(2*s.yunitlength);s.ymax=-s.ymin}else{s.ymin=Rnl.toNumber(r.value);if(l!=null){s.ymax=Rnl.toNumber(l.value);s.yunitlength=s.height/(s.ymax-s.ymin)}else{s.ymax=s.height/s.yunitlength+s.ymin}s.origin=[-s.xmin*s.xunitlength,-s.ymin*s.yunitlength]}return{value:a,unit:null,dtype:dt.DRAWING}},grid(e,t,n,r){const l=e.value;const a=l.temp;t=t==null?a.xunitlength:Rnl.toNumber(t.value)*a.xunitlength;n=n==null?t:Rnl.toNumber(n.value)*a.yunitlength;const s={tag:"path",attrs:{}};let o="";for(let e=a.origin[0];e<a.width;e+=t){o+=" M"+e+",0 "+e+","+a.height}for(let e=a.origin[0]-t;e>0;e-=t){o+=" M"+e+",0 "+e+","+a.height}for(let e=a.height-a.origin[1];e<a.height;e+=n){o+=" M0,"+e+" "+a.width+","+e}for(let e=a.height-a.origin[1]-n;e>0;e-=n){o+=" M0,"+e+" "+a.width+","+e}s.attrs.d=o;s.attrs["stroke-width"]=.5;s.attrs.stroke=a.gridstroke;s.attrs.fill=a.fill;l.children.push(s);if(!r){return{value:l,unit:null,dtype:dt.DRAWING}}},axes(e,t,n,r,l,a){let s=e.value;const o=s.temp;t=t==null?o.xunitlength:Rnl.toNumber(t.value)*o.xunitlength;n=n==null?t:Rnl.toNumber(n.value)*o.yunitlength;const i=o.fontsize;o.fontsize=Math.min(t/2,n/2,10);const u=o.fontsize/4;if(l!=null){this.grid(e,l,a,true)}const c={tag:"path",attrs:{}};let p="M0,"+(o.height-o.origin[1])+" "+o.width+","+(o.height-o.origin[1])+" M"+o.origin[0]+",0 "+o.origin[0]+","+o.height;for(let e=o.origin[0]+t;e<o.width;e+=t){p+=" M"+e+" "+(o.height-o.origin[1]+u)+" "+e+","+(o.height-o.origin[1]-u)}for(let e=o.origin[0]-t;e>0;e-=t){p+=" M"+e+","+(o.height-o.origin[1]+u)+" "+e+","+(o.height-o.origin[1]-u)}for(let e=o.height-o.origin[1]+n;e<o.height;e+=n){p+=" M"+(o.origin[0]+u)+","+e+" "+(o.origin[0]-u)+","+e}for(let e=o.height-o.origin[1]-n;e>0;e-=n){p+=" M"+(o.origin[0]+u)+","+e+" "+(o.origin[0]-u)+","+e}if(r!=null){const e=t/o.xunitlength;const r=n/o.yunitlength;const l=o.xmin>0||o.xmax<0?o.xmin:0;const a=o.ymin>0||o.ymax<0?o.ymin:0;const i=a===0?"below":"above";const u=l===0?"left":"right";const c=Math.floor(1.1-Math.log(e)/Math.log(10))+1;const p=Math.floor(1.1-Math.log(r)/Math.log(10))+1;for(let t=e;t<=o.xmax;t+=e){s=textLocal(s,[t,a],chopZ(t.toFixed(c)),i)}for(let t=-e;o.xmin<=t;t-=e){s=textLocal(s,[t,a],chopZ(t.toFixed(c)),i)}for(let e=r;e<=o.ymax;e+=r){s=textLocal(s,[l,e],chopZ(e.toFixed(p)),u)}for(let e=-r;o.ymin<=e;e-=r){s=textLocal(s,[l,e],chopZ(e.toFixed(p)),u)}}c.attrs.d=p;c.attrs["stroke-width"]=.5;c.attrs.stroke=o.axesstroke;c.attrs.fill=o.fill;s.temp.fontsize=i;s.children.push(c);return{value:s,unit:null,dtype:dt.DRAWING}},line(e,t){const n=e.value;const r=n.temp;const l={tag:"path",attrs:{}};const a=[Rnl.toNumber(t.value[0][0]),Rnl.toNumber(t.value[0][1])];const s=[Rnl.toNumber(t.value[1][0]),Rnl.toNumber(t.value[1][1])];l.attrs.d="M"+(a[0]*r.xunitlength+r.origin[0])+","+(r.height-a[1]*r.yunitlength-r.origin[1])+" "+(s[0]*r.xunitlength+r.origin[0])+","+(r.height-s[1]*r.yunitlength-r.origin[1]);setStrokeAndFill(l,r);n.children.push(l);if(r.marker==="dot"||r.marker==="arrowdot"){n.children.push(markerDot(a,r,r.markerstroke,r.markerfill));if(r.marker==="arrowdot"){arrowhead(n,a,s)}n.children.push(markerDot(s,r,r.markerstroke,r.markerfill))}else if(r.marker==="arrow"){arrowhead(n,a,s)}return{value:n,unit:null,dtype:dt.DRAWING}},path(e,t,n){const r=e.value;const l=r.temp;const a={tag:"path",attrs:{}};let s="";let o;if(typeof t==="string"){s=t.value}else{o=t.value.map((e=>e.map((e=>Rnl.toNumber(e)))));if(n==null){n=new Array(o.length).fill("L");n[0]="M"}else if(n.dtype===dt.STRING){n=new Array(o.length).fill(n.value);n[0]="M"}else if(typeof n==="string"){n=new Array(o.length).fill(n);n[0]="M"}else if(n.dtype&dt.ROWVECTOR||n.dtype&dt.COLUMNVECTOR){n=n.value.map((e=>{if(Rnl.isZero(e)){return"L"}const t=Rnl.toNumber(e)*l.xunitlength;return`A${t} ${t} 0 0 0 `}));n.unshift("M")}else{n=new Array(o.length).fill("L");n[0]="M"}for(let e=0;e<o.length;e++){s+=n[e]+(o[e][0]*l.xunitlength+l.origin[0])+","+(l.height-o[e][1]*l.yunitlength-l.origin[1])+" "}}a.attrs.d=s;a.attrs["stroke-width"]=l.strokewidth;if(l.strokedasharray!=null){a.attrs["stroke-dasharray"]=l.strokedasharray}a.attrs.stroke=l.stroke;a.attrs.fill=l.fill;if(l.marker==="dot"||l.marker==="arrowdot"){for(let e=0;e<o.length;e++){if(n!=="C"&&n!=="T"||e!==1&&e!==2){r.children.push(markerDot(o[e],l,l.markerstroke,l.markerfill))}}}else if(l.marker==="arrow"){arrowhead(r,o[o.length-2],o[o.length-1])}r.children.push(a);return{value:r,unit:null,dtype:dt.DRAWING}},curve(e,t){return functions.path(e,t,"T")},rect(e,t,n){const r=e.value;const l=r.temp;const a={tag:"rect",attrs:{}};const s=[Rnl.toNumber(t.value[0][0]),Rnl.toNumber(t.value[0][1])];const o=[Rnl.toNumber(t.value[1][0]),Rnl.toNumber(t.value[1][1])];a.attrs.x=s[0]*l.xunitlength+l.origin[0];a.attrs.y=l.height-o[1]*l.yunitlength-l.origin[1];a.attrs.width=(o[0]-s[0])*l.xunitlength;a.attrs.height=(o[1]-s[1])*l.yunitlength;if(n!=null){const e=Rnl.toNumber(n.value)*l.xunitlength;a.attrs.rx=e;a.attrs.ry=e}setStrokeAndFill(a,l);r.children.push(a);return{value:r,unit:null,dtype:dt.DRAWING}},circle(e,t,n){const r=e.value;const l=r.temp;const a={tag:"circle",attrs:{}};a.attrs.cx=Rnl.toNumber(t.value[0])*l.xunitlength+l.origin[0];a.attrs.cy=l.height-Rnl.toNumber(t.value[1])*l.yunitlength-l.origin[1];a.attrs.r=Rnl.toNumber(n.value)*l.xunitlength;setStrokeAndFill(a,l);r.children.push(a);return{value:r,unit:null,dtype:dt.DRAWING}},ellipse(e,t,n,r){const l=e.value;const a=l.temp;const s={tag:"ellipse",attrs:{}};s.attrs.cx=Rnl.toNumber(t.value[0])*a.xunitlength+a.origin[0];s.attrs.cy=a.height-Rnl.toNumber(t.value[1])*a.yunitlength-a.origin[1];s.attrs.rx=Rnl.toNumber(n.value)*a.xunitlength;s.attrs.ry=Rnl.toNumber(r.value)*a.yunitlength;setStrokeAndFill(s,a);l.children.push(s);return{value:l,unit:null,dtype:dt.DRAWING}},arc(e,t,n){const r=e.value;const l=r.temp;const a={tag:"path",attrs:{}};const s=[Rnl.toNumber(t.value[0][0]),Rnl.toNumber(t.value[0][1])];const o=[Rnl.toNumber(t.value[1][0]),Rnl.toNumber(t.value[1][1])];if(n==null){const e=[o[0]-s[0],o[1]-s[1]];n=Math.sqrt(e[0]*e[0]+e[1]*e[1])*l.yunitlength}else if(isVector(n)){n=n.value.map((e=>Rnl.toNumber(e)*l.yunitlength))}else{n=Rnl.toNumber(n.value)*l.yunitlength}let i="M"+(s[0]*l.xunitlength+l.origin[0])+","+(l.height-s[1]*l.yunitlength-l.origin[1])+" A";i+=Array.isArray(n)?n[0]+","+n[1]:n+","+n;i+=" 0 0,0 "+(o[0]*l.xunitlength+l.origin[0])+","+(l.height-o[1]*l.yunitlength-l.origin[1]);a.attrs.d=i;setStrokeAndFill(a,l);let u=0;if(l.marker==="arrow"||l.marker==="arrowdot"){const e=[(o[1]-s[1])/4,(s[0]-o[0])/4];u=[(o[0]-s[0])/2,(o[1]-s[1])/2];u=[s[0]+u[0]+e[0],s[1]+u[1]+e[1]]}else{u=[s[0],s[1]]}if(l.marker==="dot"||l.marker==="arrowdot"){r.children.push(markerDot(s,l,l.markerstroke,l.markerfill));if(l.marker==="arrowdot"){arrowhead(r,u,o)}r.children.push(markerDot(o,l,l.markerstroke,l.markerfill))}else if(l.marker==="arrow"){arrowhead(r,u,o)}r.children.push(a);return{value:r,unit:null,dtype:dt.DRAWING}},text(e,t,n,r){const l=textLocal(e.value,[Rnl.toNumber(t.value[0]),Rnl.toNumber(t.value[1])],n.value,r==null?null:r.value);return{value:l,unit:null,dtype:dt.DRAWING}},dot(e,t,n,r,l){let a=e.value;const s=a.temp;let o;const i=Rnl.toNumber(t.value[0])*s.xunitlength+s.origin[0];const u=s.height-Rnl.toNumber(t.value[1])*s.yunitlength-s.origin[1];if(n.value==="+"||n.value==="-"||n.value==="|"){o={tag:"path",attrs:{}};if(n.value==="+"){o.attrs.d=" M "+(i-s.ticklength)+","+u+" L "+(i+s.ticklength)+","+u+" M "+i+","+(u-s.ticklength)+" L "+i+","+(u+s.ticklength);o.attrs["stroke-width"]=.5;o.attrs.stroke=s.axesstroke}else{if(n.value==="-"){o.attrs.d=" M "+(i-s.ticklength)+","+u+" L "+(i+s.ticklength)+","+u}else{o.attrs.d=" M "+i+","+(u-s.ticklength)+" L "+i+","+(u+s.ticklength)}o.attrs["stroke-width"]=s.strokewidth;o.attrs["stroke"]=s.stroke}}else{o={tag:"circle",attrs:{}};o.attrs.cx=i;o.attrs.cy=u;o.attrs.r=s.dotradius;o.attrs["stroke-width"]=s.strokewidth;o.attrs.stroke=s.stroke;o.attrs.fill=n.value==="open"?"white":s.stroke}a.children.push(o);if(r!=null){a=textLocal(a,[Rnl.toNumber(t.value[0]),Rnl.toNumber(t.value[1])],r.value,l==null?"below":l.value)}return{value:a,unit:null,dtype:dt.DRAWING}},leader(e,t,n){const r=e.value.temp.marker;e.value.temp.marker="arrow";e.value.temp.isDim=true;const l=clone(t);l.value.reverse();e=this.path(e,l,"L");const a=l.value[0].map((e=>Rnl.toNumber(e)));const s=l.value[1].map((e=>Rnl.toNumber(e)));let o="right";if(Math.abs(a[0]-s[0])>=Math.abs(a[1]-s[1])){o=a[0]>=s[0]?"right":"left"}else{o=a[1]<s[1]?"below":"above"}const i=textLocal(e.value,a,n.value,o);i.temp.marker=r;i.temp.isDim=false;return{value:i,unit:null,dtype:dt.DRAWING}},dimension(e,t,n){const r=clone(t.value);const l=r.pop();const a=e.value.temp.strokewidth;e.value.temp.strokewidth=.5;e.value.temp.isDim=true;let s=Rnl.fromNumber(6/e.value.temp.xunitlength);const o=r[r.length-1];let i;if(Rnl.lessThan(r[0][1],l[1])&&Rnl.lessThan(l[1],o[1])||Rnl.lessThan(o[1],l[1])&&Rnl.lessThan(l[1],r[0][1])){if(!Rnl.lessThan(o[0],l[0])){s=Rnl.negate(s)}r.forEach((t=>{e=this.line(e,{value:[[Rnl.add(t[0],s),t[1]],[Rnl.add(l[0],s),t[1]]]})}));e.value.temp.marker="arrow";const t=Rnl.lessThanOrEqualTo(o[0],l[0])?"right":"left";for(let a=0;a<r.length-1;a++){e=this.line(e,{value:[[l[0],r[a][1]],[l[0],r[a+1][1]]],unit:null,dtype:dt.MATRIX});e=this.line(e,{value:[[l[0],r[a+1][1]],[l[0],r[a][1]]],unit:null,dtype:dt.MATRIX});const s=[Rnl.toNumber(l[0]),(Rnl.toNumber(r[a][1])+Rnl.toNumber(r[a+1][1]))/2];const o=r.length===2?n.value:n.value[a];i=textLocal(e.value,s,o,t)}}else{if(!Rnl.lessThan(o[1],l[1])){s=Rnl.negate(s)}r.forEach((t=>{e=this.line(e,{value:[[t[0],Rnl.add(t[1],s)],[t[0],Rnl.add(l[1],s)]]})}));e.value.temp.marker="arrow";const t=Rnl.lessThanOrEqualTo(o[1],l[1])?"above":"below";for(let a=0;a<r.length-1;a++){e=this.line(e,{value:[[r[a][0],l[1]],[r[a+1][0],l[1]]],unit:null,dtype:dt.MATRIX});e=this.line(e,{value:[[r[a+1][0],l[1]],[r[a][0],l[1]]],unit:null,dtype:dt.MATRIX});const s=[(Rnl.toNumber(r[a][0])+Rnl.toNumber(r[a+1][0]))/2,Rnl.toNumber(l[1])];const o=r.length===2?n.value:n.value[a];i=textLocal(e.value,s,o,t)}}i.temp.strokewidth=a;i.temp.marker="none";i.temp.isDim=false;return{value:i,unit:null,dtype:dt.DRAWING}}};const renderSVG=e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","svg");Object.keys(e.attrs).forEach((n=>{t.setAttribute(n,e.attrs[n])}));e.children.forEach((e=>{const n=document.createElementNS("http://www.w3.org/2000/svg",e.tag);Object.keys(e.attrs).forEach((t=>{n.setAttribute(t,e.attrs[t]);if(t==="title"){n.appendChild(document.createTextNode(e.attrs["text"]))}else{n.setAttribute(t,e.attrs[t])}}));if(e.tag==="text"){e.children.forEach((e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","tspan");if(e.attrs){Object.keys(e.attrs).forEach((n=>{t.setAttribute(n,e.attrs[n])}))}t.appendChild(document.createTextNode(e.text));n.appendChild(t)}))}t.appendChild(n)}));return t};const draw=Object.freeze({startSvg:startSvg,functions:functions,renderSVG:renderSVG});const needsMap=(...e)=>{for(let t=0;t<e.length;t++){if(e[t].dtype&dt.MAP&&e[t].dtype&dt.RATIONAL){return true}}return false};const shapeOf=e=>e.dtype===dt.COMPLEX?"complex":e.dtype<128?"scalar":Matrix.isVector(e)?"vector":e.dtype&dt.MATRIX?"matrix":e.dtype===dt.DATAFRAME?"dataFrame":e.dtype&dt.MAP&&(e.dtype&dt.ROWVECTOR||e.dtype&dt.COLUMNVECTOR)?"mapWithVectorValues":e.dtype&dt.MAP?"map":"other";const binaryShapesOf=(e,t)=>{let n=shapeOf(e);let r=shapeOf(t);let l=false;if(isMatrix(e)&&isMatrix(t)){l=true;if(n==="vector"){n=e.dtype&dt.ROWVECTOR?"rowVector":"columnVector"}if(r==="vector"){r=t.dtype&dt.ROWVECTOR?"rowVector":"columnVector"}}return[n,r,l]};const nextToken=(e,t)=>{if(e.length<t+2){return undefined}return e[t+1]};const arfn=["abs","argument","Im","Re","Γ"];const stringFromOperand=(e,t)=>e.dtype===dt.STRING?e.value:e.dtype===dt.RATIONAL?format(e.value,"h15",t):isMatrix(e.dtype)?Matrix.displayAlt(e,"h15",t):e.dtype&dt.MAP?map.displayAlt(e.value,"h15",t):e.value;const evalRpn=(e,t,n,r,l)=>{const a=e.split(" ");const s=[];let o;for(let e=0;e<a.length;e++){const i=a[e];const u=i.charAt(0);if(u==="®"){const e=new Array(2);const t=i.indexOf("/");e[0]=BigInt(i.slice(1,t));e[1]=BigInt(i.slice(t+1));const n=Object.create(null);n.value=e;n.unit=Object.create(null);n.unit.expos=allZeros;n.dtype=dt.RATIONAL;s.push(Object.freeze(n))}else if(u==="©"){const e=i.slice(1).split(",");const t=new Array(2);t[0]=[BigInt(e[0]),BigInt(e[1])];t[1]=[BigInt(e[2]),BigInt(e[3])];const n=Object.create(null);n.value=t;n.unit=Object.create(null);n.unit.expos=allZeros;n.dtype=dt.COMPLEX;s.push(Object.freeze(n))}else if(u==="¿"){const n=i.substring(1);let l=Object.create(null);if(n==="undefined"){l.value=undefined;l.unit=null;l.dtype=0}else if(n==="T"&&nextToken(a,e)==="^"&&s.length>0&&isMatrix(s[s.length-1])){l.value="T";l.unit=null;l.dtype=dt.RATIONAL}else{const e=t[n];if(!e){return errorOprnd("V_NAME",n)}l=fromAssignment(e,r);if(l.dtype===dt.ERROR){return l}}s.push(Object.freeze(l))}else if(u==='"'){const e=i.charAt(i.length-1);const t=u==='"'&&e==='"'?i.slice(1,-1).trim():i.trim();s.push(Object.freeze({value:t,unit:null,dtype:dt.STRING}))}else if(/^``/.test(i)){s.push(DataFrame.dataFrameFromCSV(tablessTrim(i.slice(2,-2)),{}))}else if(u==="`"){const e=i.charAt(i.length-1);const t=u==="`"&&e==="`"?i.slice(1,-1).trim():i.trim();s.push(Object.freeze({value:t,unit:null,dtype:dt.RICHTEXT}))}else{switch(i){case"true":case"false":{const e=Object.create(null);e.value=i==="true";e.unit=null;e.dtype=dt.BOOLEAN;s.push(Object.freeze(e));break}case"π":{const e=Object.create(null);e.value=Rnl.pi;e.dtype=dt.RATIONAL;e.unit=Object.create(null);e.unit.expos=allZeros;s.push(Object.freeze(e));break}case"e":{const e=Object.create(null);e.value="e";e.dtype=dt.RATIONAL;e.unit=Object.create(null);e.unit.expos=allZeros;s.push(Object.freeze(e));break}case"j":{const e=Object.create(null);e.value=[Rnl.zero,Rnl.one];e.unit=Object.create(null);e.unit.expos=allZeros;e.dtype=dt.COMPLEX;s.push(Object.freeze(e));break}case"ℏ":{const e=Object.create(null);e.value=Rnl.hbar;e.dtype=dt.RATIONAL;e.unit=Object.create(null);e.unit.expos=Object.freeze(r?[2,1,-1,0,0,0,0,0]:allZeros);s.push(Object.freeze(e));break}case"∠":{const e=s.pop();const t=s.pop();if(t.dtype!==dt.RATIONAL||e.dtype!==dt.RATIONAL){return errorOprnd("NAN_OP")}const n=Rnl.toNumber(e.value);const r=Object.create(null);r.value=[Rnl.multiply(t.value,Rnl.fromNumber(Math.cos(n))),Rnl.multiply(t.value,Rnl.fromNumber(Math.sin(n)))];r.unit=Object.create(null);r.unit.expos=allZeros;r.dtype=dt.COMPLEX;s.push(Object.freeze(r));break}case"+":case"-":{const e=s.pop();const t=s.pop();const n=i==="+"?"add":"subtract";if(!((t.dtype&dt.RATIONAL||t.dtype&dt.COMPLEX)&&(e.dtype&dt.RATIONAL||e.dtype&dt.COMPLEX))){return errorOprnd("NAN_OP")}if(r){if(!unitsAreCompatible(t.unit.expos,e.unit.expos)){return errorOprnd("UNIT_ADD")}}const[l,a,o]=binaryShapesOf(t,e);const u=Object.create(null);u.value=Operators.binary[l][a][n](t.value,e.value);if(u.value.dtype&&u.value.dtype===dt.ERROR){return u.value}u.unit=t.unit;u.dtype=Operators.dtype[l][a](t.dtype,e.dtype,i);s.push(Object.freeze(u));break}case"~":{const e=s.pop();if(!(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX)){return errorOprnd("NAN_OP")}const t=Object.create(null);t.value=Operators.unary[shapeOf(e)]["negate"](e.value);if(t.value.dtype&&t.value.dtype===dt.ERROR){return t.value}t.unit=e.unit;t.dtype=e.dtype;s.push(Object.freeze(t));break}case"×":case"·":case"*":case"⌧":{const e=s.pop();const t=e.dtype===dt.DATAFRAME?clone(e):e;const n=s.pop();if(!((n.dtype&dt.RATIONAL||n.dtype&dt.COMPLEX)&&(t.dtype&dt.RATIONAL||t.dtype&dt.COMPLEX||t.dtype===dt.DATAFRAME))){return errorOprnd("NAN_OP")}const l=Object.create(null);let a=Object.create(null);if(r){if(n.dtype===dt.DATAFRAME&&t.dtype===dt.RATIONAL||n.dtype===dt.RATIONAL&&t.dtype===dt.DATAFRAME){a=n.dtype===dt.DATAFRAME?n.unit:t.unit}else{a.expos=n.unit.expos.map(((e,n)=>e+t.unit.expos[n]))}}else{a.expos=allZeros}l.unit=t.dtype===dt.DATAFRAME?clone(t.unit):Object.freeze(a);const[o,u,c]=binaryShapesOf(n,t);const p=c?{"×":"cross","·":"dot","*":"asterisk","⌧":"multiply"}[i]:"multiply";l.dtype=i==="*"||o==="scalar"||o==="map"||o==="complex"||u==="scalar"||u==="map"||u==="complex"?Operators.dtype[o][u](n.dtype,t.dtype,p):i==="·"?dt.RATIONAL:i==="×"?dt.COLUMNVECTOR:Matrix.multResultType(n,t);l.value=Operators.binary[o][u][p](n.value,t.value);if(l.value.dtype&&l.value.dtype===dt.ERROR){return l.value}s.push(Object.freeze(l));break}case"/":case"//":case"÷":case"///":case"∕":{const e=s.pop();const t=s.pop();if(!((t.dtype&dt.RATIONAL||t.dtype===dt.COMPLEX)&&(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX))){return errorOprnd("NAN_OP")}const n=Object.create(null);const l=Object.create(null);l.expos=r?t.unit.expos.map(((t,n)=>t-e.unit.expos[n])):allZeros;n.unit=Object.freeze(l);const[a,o,i]=binaryShapesOf(t,e);n.value=Operators.binary[a][o]["divide"](t.value,e.value);n.dtype=Operators.dtype[a][o](t.dtype,e.dtype,"divide");if(isDivByZero(n.value,shapeOf(n))){return errorOprnd("DIV")}s.push(Object.freeze(n));break}case"^":{const e=s.pop();const t=s.pop();if(Matrix.isVector(t)&&e.value==="T"){const e=clone(t);e.dtype=t.dtype+(t.dtype&dt.ROWVECTOR?dt.COLUMNVECTOR-dt.ROWVECTOR:dt.ROWVECTOR-dt.COLUMNVECTOR);s.push(Object.freeze(e));break}if(!((t.dtype&dt.RATIONAL||t.dtype===dt.COMPLEX)&&(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX)||isMatrix(t)&&e.value==="T")){return errorOprnd("NAN_OP")}const n=Object.create(null);const l=Object.create(null);l.expos=allZeros;if(r){const n=typeof e.unit==="number"?e.unit:Rnl.toNumber(e.value);l.expos=t.unit.expos.map((e=>e*n))}n.unit=Object.freeze(l);const[a,o,u]=binaryShapesOf(t,e);n.value=Operators.binary[a][o]["power"](t.value,e.value);if(n.value.dtype){return n.value}n.dtype=Cpx.isComplex(n.value)?dt.COMPLEX:Operators.dtype[a][o](t.dtype,e.dtype,i);s.push(Object.freeze(n));break}case"^*":{const e=s.pop();if(!(e.dtype&dt.COMPLEX)){return errorOprnd("NA_REAL"),"conjugate"}const t={value:Cpx.conjugate(e.value),unit:e.unit,dtype:e.dtype};s.push(Object.freeze(t));break}case"&":case"&_":{const e=s.pop();const l=s.pop();const a=i==="&"?"concat":"unshift";const[o,u,c]=binaryShapesOf(l,e);let p=Object.create(null);if(l.dtype===dt.STRING&&l.dtype===dt.STRING){const t=stringFromOperand(l,n);const r=stringFromOperand(e,n);p.value=t+r;p.unit=null;p.dtype=dt.STRING}else if(l.dtype&dt.DATAFRAME&&Matrix.isVector(e)&&i==="&"){p=DataFrame.append(l,e,t,r);if(p.dtype===dt.ERROR){return p}}else if(l.dtype&dt.MAP||e.dtype&dt.MAP){p=map.append(l,e,o,u,t);if(p.dtype===dt.ERROR){return p}}else{if(r){if(!unitsAreCompatible(l.unit.expos,e.unit.expos)){return errorOprnd("UNIT_ADD")}}p.value=Operators.binary[o][u][a](l.value,e.value);if(p.value.dtype){return p.value}p.dtype=Operators.dtype[o][u](l.dtype,e.dtype,i);p.unit=l.unit}s.push(Object.freeze(p));break}case"√":case"∛":case"∜":{const e=i.charCodeAt(0)-8728;const t=[BigInt(1),BigInt(e)];const n=s.pop();if(!(n.dtype&dt.RATIONAL||n.dtype&dt.COMPLEX)){return errorOprnd("NAN_OP")}const l=Object.create(null);const a=Object.create(null);a.expos=allZeros;if(r){a.expos=n.unit.expos.map((t=>t/e))}l.unit=Object.freeze(a);const o=shapeOf(n);l.value=Operators.binary[o]["scalar"]["power"](n.value,t);if(l.value.dtype&&l.value.dtype===dt.ERROR){return l.value}l.dtype=Cpx.isComplex(l.value)?dt.COMPLEX:Operators.dtype[o]["scalar"](n.dtype,dt.RATIONAL,i);s.push(Object.freeze(l));break}case"root":{const e=s.pop();const t=s.pop();if(!(t.dtype&dt.RATIONAL&(e.dtype&dt.RATIONAL))){return errorOprnd("NAN_OP")}const n=Object.create(null);const l=Object.create(null);l.expos=allZeros;if(r){l.expos=e.unit.expos.map((e=>e/Number(t.value[0])))}n.unit=Object.freeze(l);const a=Rnl.reciprocal(t.value);const o=shapeOf(t);n.value=Operators.binary[o]["scalar"]["power"](e.value,a);if(n.value.dtype&&n.value.dtype===dt.ERROR){return n.value}n.dtype=Operators.dtype[o]["scalar"](t.dtype,dt.RATIONAL,i);s.push(Object.freeze(n));break}case".":{const e=s.pop();const n=s.pop();const l=propertyFromDotAccessor(n,e,t,r);if(l.dtype===dt.ERROR){return l}s.push(Object.freeze(l));break}case"[]":{const n=Number(a[e+1]);e+=1;const l=[];for(let e=0;e<n;e++){l.unshift(s.pop())}const o=s.pop();let i;if(o.dtype&dt.DATAFRAME){i=DataFrame.range(o,l,t,r)}else if(o.dtype&dt.MAP){i=map.valueFromMap(o,l,r)}else if(o.dtype===dt.STRING){i=textRange(o.value,l[0])}else if(o.dtype===dt.MODULE){if(n===1){i=fromAssignment(o.value[l[0].value],r)}else{i={value:new Map,unit:null,dtype:dt.TUPLE};for(let e=0;e<l.length;e++){const t=l[e].value;i.value.set(t,fromAssignment(o.value[t],r))}}}else{const e=l[0];const a=n===2?l[1]:isVector(o)?null:{value:Rnl.zero,unit:allZeros,dtype:dt.RATIONAL};i=o.dtype&dt.DATAFRAME?DataFrame.range(o,e,a,t,r):Matrix.submatrix(o,e,a)}if(i.dtype===dt.ERROR){return i}s.push(Object.freeze(i));break}case"..":{const e=s.pop();const t=s.pop();if(!(t.dtype===dt.RATIONAL||t.dtype===dt.RANGE)){return errorOprnd("NAN_OP")}const n=Object.create(null);n.unit=null;n.dtype=dt.RANGE;const r=t.dtype!==dt.RATIONAL?t.value[2]:e.value==="∞"||Rnl.lessThan(t.value,e.value)?Rnl.one:Rnl.negate(Rnl.one);n.value=t.dtype===dt.RATIONAL?[t.value,r,e.value]:[t.value[0],t.value[2],e.value];s.push(Object.freeze(n));break}case":":{const e=s.pop();const t=s.pop();if(t.dtype!==dt.STRING){return errorOprnd("BAD_KEYSTR")}s.push(Object.freeze({name:t.value,value:e.value,unit:e.unit,dtype:e.dtype}));break}case"normal":case"uniform":case"lognormal":{const e=s.pop();const t=s.pop();break}case"!":{const e=s.pop();if(!(e.dtype&dt.RATIONAL)){return errorOprnd("NAN_OP")}if(r){if(!unitsAreCompatible(e.unit.expos,allZeros)){return errorOprnd("FACT")}}const t=e.value;if(!Rnl.isInteger(t)||Rnl.isNegative(t)){return errorOprnd("FACT")}const n=Object.create(null);n.unit=allZeros;n.dtype=dt.RATIONAL;n.value=Operators.unary[shapeOf(e)]["factorial"](t);if(n.value.dtype){return n.value}s.push(Object.freeze(n));break}case"%":{const e=s.pop();if(!(e.dtype&dt.RATIONAL)){return errorOprnd("NAN_OP")}const t=Object.create(null);t.unit=e.unit;t.dtype=e.dtype;t.value=Operators.unary[shapeOf(e)]["percent"](e.value);if(t.value){return t.value}s.push(Object.freeze(t));break}case"|":case"‖":{const e=s.pop();if(!(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX)){return errorOprnd("NAN_OP")}const t=i==="|"?"abs":"norm";const n=Object.create(null);n.unit=e.unit;n.dtype=dt.RATIONAL;n.value=Operators.unary[shapeOf(e)][t](e.value);if(n.value.dtype&&n.value.dtype===dt.ERROR){return n.value}s.push(Object.freeze(n));break}case"matrix":{const t=Number(a[e+1]);const n=Number(a[e+2]);e+=2;if(s[s.length-1].dtype===dt.RANGE){s.push(Matrix.operandFromRange(s.pop().value))}else{s.push(Matrix.operandFromTokenStack(s,t,n))}break}case"startSvg":s.push({value:draw.startSvg(),unit:null,dtype:dt.DRAWING});break;case"abs":case"cos":case"sin":case"tan":case"acos":case"asin":case"atan":case"sec":case"csc":case"cot":case"asec":case"acsc":case"acot":case"exp":case"log":case"ln":case"log10":case"log2":case"cosh":case"sinh":case"tanh":case"sech":case"csch":case"coth":case"acosh":case"asinh":case"atanh":case"asech":case"acsch":case"acoth":case"Gamma":case"Γ":case"logGamma":case"logΓ":case"logFactorial":case"cosd":case"sind":case"tand":case"acosd":case"asind":case"atand":case"secd":case"cscd":case"cotd":case"asecd":case"acscd":case"acotd":case"Re":case"Im":case"argument":case"chr":case"round":case"sqrt":case"sign":{const e=s.pop();if(!(e.dtype&dt.RATIONAL||e.dtype&dt.COMPLEX)){return errorOprnd("UNREAL",i)}const t=Object.create(null);const n=Object.create(null);n.expos=r?Functions.functionExpos(i,[e]):allZeros;if(n.expos.dtype&&n.expos.dtype===dt.ERROR){return n.expos}t.unit=Object.freeze(n);const l=e.dtype&dt.RATIONAL?"scalar":"complex";const a=e.dtype&dt.MAP&&Matrix.isVector(e)?mapMap(e.value,(e=>e.map((e=>Functions.unary[l][i](e))))):Matrix.isVector(e)?e.value.map((e=>Functions.unary[l][i](e))):isMatrix(e)?e.value.map((e=>e.map((e=>Functions.unary[l][i](e))))):needsMap(e)?mapMap(e.value,(e=>Functions.unary[l][i](e))):Functions.unary[l][i](e.value);if(a.dtype&&a.dtype===dt.ERROR){return a}t.value=Object.freeze(a);t.dtype=i==="chr"?e.dtype-dt.RATIONAL+dt.STRING:e.dtype&dt.COMPLEX&&arfn.includes(i)?e.dtype-dt.COMPLEX+dt.RATIONAL:e.dtype;s.push(Object.freeze(t));break}case"logn":case"atan2":case"hypot":case"gcd":case"rms":case"binomial":case"zeros":{const e=[];e.push(s.pop());e.unshift(s.pop());if(!(e[0].dtype&dt.RATIONAL)){return errorOprnd("")}const t=Object.create(null);const n=Object.create(null);n.expos=r?Functions.functionExpos(i,e):allZeros;if(n.dtype&&n.dtype===dt.ERROR){return n}t.unit=Object.freeze(n);const[l,a]=multivarFunction("binary",i,e);t.value=Object.freeze(l);t.dtype=a;s.push(Object.freeze(t));break}case"roundn":case"string":{const e=s.pop();const t=s.pop();if(!(t.dtype&dt.RATIONAL)){return errorOprnd("")}if(!(e.dtype&dt.STRING)){return errorOprnd("")}if(!/(?:f-?|r)\d+/.test(e.value)){return errorOprnd("")}let n="";const r=Object.create(null);if(i==="string"){n=e.value.charAt()==="f"?"stringFixed":"stringSignificant";r.unit=null;r.dtype=t.dtype-dt.RATIONAL+dt.STRING}else{n=e.value.charAt()==="f"?"roundFixed":"roundSignificant";r.unit=t.unit;r.dtype=t.dtype}const l=Number(e.value.slice(1));const a=t.dtype&dt.MAP&&Matrix.isVector(t)?mapMap(t.value,(e=>e.map((e=>Functions.binary[n]([e,l]))))):Matrix.isVector(t)?t.value.map((e=>Functions.binary[n]([e,l]))):isMatrix(t)?t.value.map((e=>e.map((e=>Functions.binary[n]([e,l]))))):needsMap(t)?mapMap(t.value,(e=>Functions.binary[n]([e,l]))):Functions.binary[n]([t.value,l]);if(a.dtype&&a.dtype===dt.ERROR){return a}r.value=Object.freeze(a);if(t.name){r.name=t.name}s.push(Object.freeze(r));break}case"dataframe":case"max":case"min":case"sum":case"product":case"range":case"mean":case"median":case"variance":case"stddev":case"accumulate":{const n=Number(a[e+1]);e+=1;const l=[];for(let e=0;e<n;e++){const e=s.pop();if(i!=="dataframe"&&!(e.dtype&dt.RATIONAL)){return errorOprnd("NANARG",i)}l.unshift(e)}if(i==="dataframe"){const e=DataFrame.dataFrameFromVectors(l,t);if(e.dtype&&e.dtype===dt.ERROR){return e}s.push(e);break}const o=Object.create(null);const u=Object.create(null);u.expos=r?Functions.functionExpos(i,l):allZeros;if(u.dtype&&u.dtype===dt.ERROR){return errorOprnd("")}o.unit=Object.freeze(u);const[c,p]=multivarFunction("reduce",i,l);o.value=Object.freeze(c);o.dtype=p;s.push(Object.freeze(o));break}case"random":{const e=Object.create(null);e.value=Rnl.fromNumber(Math.random());e.unit=Object.create(null);e.unit.expos=allZeros;e.dtype=dt.RATIONAL;s.push(Object.freeze(e));break}case"isNaN":{const e=s.pop();const t=Object.create(null);t.value=!(e.dtype&dt.RATIONAL);t.unit=null;t.dtype=dt.BOOLEAN;s.push(Object.freeze(t));break}case"length":{const e=s.pop();const t=e.value;const n=Matrix.isVector(e)?t.length:e.dtype&dt.MATRIX?t.length*t[0].length:e.dtype===dt.STRING?t.length-arrayOfRegExMatches(/[\uD800-\uD8FF\uFE00\uFE01]/g,t).length:e.dtype&dt.MAP?e.keys().value.length:0;const r=Object.create(null);r.value=Object.freeze(Rnl.fromNumber(n));r.unit=Object.create(null);r.unit.expos=allZeros;r.dtype=dt.RATIONAL;s.push(Object.freeze(r));break}case"count":{const e=s.pop();const t=s.pop();if(e.dtype!==dt.STRING||t.dtype!==dt.STRING){return errorOprnd("COUNT")}const n=Object.create(null);n.value=Object.freeze(Rnl.fromNumber(t.value.split(e.value).length-1));n.unit=Object.create(null);n.unit.expos=allZeros;n.dtype=dt.RATIONAL;s.push(Object.freeze(n));break}case"format":{const e=s.pop().value;const t=format(s.pop().value,e);s.push({value:t,unit:null,dtype:dt.STRING});break}case"lerp":{const e=new Array(3);e[2]=s.pop();e[1]=s.pop();e[0]=s.pop();const t=Functions.lerp(e,r);if(t.dtype===dt.ERROR){return t}s.push(t);break}case"matrix2table":{const e=s.pop();const n=s.pop();const r=s.pop();const l=DataFrame.matrix2table(r,n,e,t);if(l.dtype===dt.ERROR){return l}s.push(l);break}case"transpose":s.push(Matrix.transpose(s.pop()));break;case"trace":s.push(Matrix.trace(s.pop()));break;case"fetch":return errorOprnd("FETCH");case"function":{const o=a[e+1];const i=Number(a[e+2]);e+=2;const u=new Array(i);for(let e=i-1;e>=0;e--){u[e]=s.pop()}let c;if(t.svg&&(o==="plot"||draw.functions[o])){if(o==="plot"){u.splice(1,0,n);c=plot(...u)}else{c=draw.functions[o](...u)}}else if(nextToken(a,e)==="."){let t=s.pop().value;if(t.value){t=t.value}const l=t[o];if(l===undefined){return errorOprnd("F_NAME",o)}if(l.dtype===dt.ERROR){return l}if(l.isPrivate){return errorOprnd("PRIVATE",o)}c=evalCustomFunction(l,u,n,r,t);e+=1}else if(l&&l[o]){const e=l[o];c=evalCustomFunction(e,u,n,r,l)}else if(t[o]&&t[o].dtype===dt.MODULE){const e=t[o]["value"];c=evalCustomFunction(e,u,n,r)}else{return errorOprnd("BAD_FUN_NM",o)}if(c.dtype===dt.ERROR){return c}s.push(c);break}case"=":case"==":case"<":case">":case"<=":case"≤":case">=":case"≥":case"≠":case"!=":case"∈":case"∉":case"⋐":{const e=s.pop();const t=s.pop();if(r&&!(t.dtype&dt.STRING||e.dtype&dt.STRING||t.dtype===dt.NULL||e.dtype===dt.NULL)){if(!unitsAreCompatible(t.unit.expos,e.unit.expos)){return errorOprnd("UNIT_COMP")}}const n=Object.create(null);n.unit=null;const l=t.dtype&dt.BOOLEANFROMCOMPARISON?o.value:undefined;if(isIn(i,["∈","∉","⋐"])){n.value=compare(i,t.value,e.value,l)}else{const[r,a,s]=binaryShapesOf(t,e);n.value=Operators.relations[r][a].relate(i,t.value,e.value,l)}if(n.value.dtype&&n.value.dtype===dt.ERROR){return n.value}n.dtype=t.dtype+dt.BOOLEANFROMCOMPARISON;if(n.dtype&dt.RATIONAL){n.dtype-=dt.RATIONAL}if(n.dtype&dt.COMPLEX){n.dtype-=dt.COMPLEX}if(n.dtype&dt.STRING){n.dtype-=dt.STRING}o=e;s.push(Object.freeze(n));break}case"and":case"or":case"∧":case"∨":case"⊻":{const t=s.pop();const n=s.pop();if(!(n.dtype&dt.BOOLEAN)||!(t.dtype&dt.BOOLEAN)){return errorOprnd("LOGIC",a[e])}const r={and:"and",or:"or","∧":"and","∨":"or","⊻":"xor"}[i];const[l,o,u]=binaryShapesOf(n,t);const c=Object.create(null);c.unit=null;c.value=Operators.binary[l][o][r](n.value,t.value);if(c.value.dtype&&c.value.dtype===dt.ERROR){return c.value}c.dtype=Operators.dtype[l][o](n.dtype,t.dtype,i);s.push(Object.freeze(c));break}case"not":case"¬":{const e=s.pop();if(!(e.dtype&dt.BOOLEAN)){return errorOprnd("LOGIC",i)}const t=Object.create(null);t.unit=null;t.value=Operators.unary[shapeOf(e)]["not"](e.value);if(t.value.dtype&&t.value.dtype===dt.ERROR){return t.value}t.dtype=dt.BOOLEAN;s.push(Object.freeze(t));break}case"cases":{const o=Number(a[e+1]);e+=1;const i=new Array(o);for(let e=o-1;e>=0;e--){i[e]=s.pop()}for(let u=0;u<o;u++){if((i[u].dtype&dt.BOOLEAN)===0){return errorOprnd("LOGIC","if")}const o=Operators.condition[shapeOf(i[u])](i[u].value);if(o){const o=a[e+u+1].replace(/§/g," ");const i=evalRpn(o,t,n,r,l);if(i.dtype===dt.ERROR){return i}s.push(i);break}}e+=o;break}case"applyUnit":{if(!r){return errorOprnd("UNIT_AWARE",a[e+1])}const n=s.pop();if(!(n.dtype&dt.RATIONAL)){return errorOprnd("QUANT_NUM")}const l=a[e+1];e+=1;const o=Object.create(null);o.unit=Object.create(null);o.dtype=n.dtype;if(!r){o.value=n.value;if(n.dtype&dt.MAP){o.unit=unitFromUnitName(l,t)}else{o.unit.name=l}}else{const e=unitFromUnitName(l,t);if(e.dtype&&e.dtype===dt.ERROR){return e}if(isMatrix(n)){o.unit.expos=n.unit.expos.map(((t,n)=>t+e.expos[n]));o.value=Matrix.convertToBaseUnits(n,e.gauge,e.factor)}else if(n.dtype&dt.MAP){o.unit=unitFromUnitName(n.unit);o.value=n.value}else{o.unit.expos=n.unit.expos.map(((t,n)=>t+e.expos[n]));o.value=Rnl.multiply(Rnl.add(n.value,e.gauge),e.factor)}}s.push(Object.freeze(o));break}case"modulo":{const e=s.pop();const t=s.pop();if(!(t.dtype&dt.RATIONAL&(e.dtype&dt.RATIONAL))){return errorOprnd("NAN_OP")}const[n,r,l]=binaryShapesOf(t,e);const a=Object.create(null);a.unit=Object.create(null);a.unit.expos=allZeros;a.value=Operators.binary[n][r]["modulo"](t.value,e.value);if(a.value.dtype&&a.value.dtype===dt.ERROR){return a.value}a.dtype=Operators.dtype[n][r](t.dtype,e.dtype,i);s.push(Object.freeze(a));break}case"⎾⏋":case"⎿⏌":{const e=s.pop();if(!(e.dtype&dt.RATIONAL)){return errorOprnd("NAN_OP")}if(r){if(!unitsAreCompatible(e.unit.expos,allZeros)){{return errorOprnd("")}}}const t=i==="⎾⏋"?"ceil":"floor";const n=Object.create(null);n.value=Operators.unary[shapeOf(e)][t](e.value);if(n.value.dtype&&n.value.dtype===dt.ERROR){return n.value}n.unit=e.unit;n.dtype=e.dtype;s.push(Object.freeze(n));break}case"()":{const e=[];e.unshift(s.pop());e.unshift(s.pop());if(r){if(!unitsAreCompatible(e[0].unit.expos,allZeros)||!unitsAreCompatible(e[1].unit.expos,allZeros)){return errorOprnd("BINOM")}}const t=Object.create(null);t.unit=Object.create(null);t.unit.expos=allZeros;const[n,l]=multivarFunction("binary","binomial",e);t.value=n;t.dtype=l;s.push(Object.freeze(t));break}case"raise":return{value:s.pop().value,unit:null,dtype:dt.ERROR};case"\\blue":case"\\gray":case"\\green":case"\\orange":case"\\pink":case"\\purple":case"\\red":{const e=clone(s.pop());if(e.dtype===dt.STRING){e.unit=i.slice(1)}s.push(e);break}}}}const i=s.pop();if(s.length>0){return errorOprnd("ERROR")}return i};const plot=(e,t,n,r,l,a)=>{const s=e.value.temp;r=r==null?Rnl.fromNumber(250):r.value;const o=l==null?Rnl.fromNumber(s.xmin):l.value;const i=a==null?Rnl.fromNumber(s.xmax):a.value;const u=Rnl.divide(Rnl.subtract(i,o),r);const c=Matrix.operandFromRange([o,u,i]);const p={value:c.value,unit:null,dtype:dt.COLUMNVECTOR+dt.RATIONAL};let d;let f;if(n.value.dtype&&n.value.dtype===dt.MODULE){d=evalCustomFunction(n.value,[p],t,false);f=p.value.map(((e,t)=>[e,d.value[t]]))}else if(n.dtype===dt.STRING){if(/§matrix§1§2$/.test(n.value)){p.name="t";f=evalRpn(n.value.replace(/§/g," "),{t:p},t,false).value}else{p.name="x";d=evalRpn(n.value.replace(/§/g," "),{x:p},t,false);f=p.value.map(((e,t)=>[e,d.value[t]]))}}const m={value:f,unit:null,dtype:dt.MATRIX+dt.RATIONAL};return draw.functions.path(e,m,"L")};const elementFromIterable=(e,t,n)=>{let r;let l=Rnl.increment(t);let a=0;if(e.dtype===dt.RANGE){r=t;l=Rnl.add(t,n);a=dt.RATIONAL}else if(e.dtype===dt.STRING&&e.value[Rnl.fromNumber(t)]==="\ud835"){r=Rnl.fromNumber(e.value[t]+e.value[t+1]);l=Rnl.add(t,2);a=dt.STRING}else{r=e.value[Rnl.toNumber(t)];a=e.dtype&dt.STRING?dt.STRING:e.dtype&dt.ROWVECTOR?e.dtype-dt.ROWVECTOR:e.dtype&dt.COLUMNVECTOR?e.dtype-dt.COLUMNVECTOR:e.dtype-dt.MATRIX}const s={value:r,unit:e.unit,dtype:a};return[s,l]};const loopTypes=["while","for"];const evalCustomFunction=(e,t,n,r,l)=>{if(e.dtype===dt.ERROR){return e}if(t.length>e.parameters.length){return errorOprnd("NUMARGS",e.name)}const a=Object.create(null);for(let n=0;n<t.length;n++){a[e.parameters[n]]=t[n]}if(e.parameters.length>t.length){for(let n=t.length;n<e.parameters.length;n++){a[e.parameters[n]]={value:undefined,unit:null,dtype:0}}}if(e.dtype===dt.DRAWING){a["svg"]={value:draw.startSvg(),unit:null,dtype:dt.DRAWING}}const s=[{type:"if",condition:true,endOfBlock:e.statements.length-1}];for(let t=0;t<e.statements.length;t++){const o=e.statements[t];const i=o.stype;const u=s.length-1;switch(i){case"statement":{if(s[u].condition){const e=evalRpn(o.rpn,a,n,r,l);if(e.dtype===dt.ERROR){return e}if(o.name){o.resultdisplay=r?"!!":"!";const[t,l]=conditionResult(o,e,r);insertOneHurmetVar(a,t,n)}}break}case"if":{if(s[u].condition){const e=evalRpn(o.rpn,a,n,r,l);if(e.dtype===dt.ERROR){return e}const t=Operators.condition[shapeOf(e)](e.value);s.push({type:"if",condition:t,endOfBlock:o.endOfBlock})}else{t=o.endOfBlock}break}case"else if":{if(s[u].type==="if"&&s[u].condition){t=s[u].endOfBlock;s.pop()}else{const e=evalRpn(o.rpn,a,n,r,l);if(e.dtype===dt.ERROR){return e}const t=Operators.condition[shapeOf(e)](e.value);s[s.length-1].condition=t}break}case"else":if(s[u].type==="if"&&s[u].condition){t=s[u].endOfBlock;s.pop()}else{s[u].condition=true}break;case"while":{if(s[u].condition){const e={type:"while",startStatement:t,rpn:o.rpn,endOfBlock:o.endOfBlock};const i=evalRpn(o.rpn,a,n,r,l);if(i.dtype===dt.ERROR){return i}const u=Operators.condition[shapeOf(i)](i.value);e.condition=u;if(e.condition===true){s.push(e)}else{t=o.endOfBlock}}else{t=o.endOfBlock}break}case"for":{const e={type:"for",condition:true,startStatement:t,endOfBlock:o.endOfBlock};const i=o.rpn.split(" ");i.pop();e.dummyVariable=i.shift().slice(1);const u=evalRpn(i.join(" "),a,n,r,l);e.index=u.dtype&dt.RANGE?u.value[0]:Rnl.fromNumber(0);e.step=u.dtype&dt.RANGE?u.value[1]:Rnl.fromNumber(0);e.endIndex=u.dtype&dt.RANGE?u.value[2]:Rnl.fromNumber(u.value.length-1);const[c,p]=elementFromIterable(u,e.index,e.step);e.nextIndex=p;e.iterable=u;s.push(e);a[e.dummyVariable]=c;break}case"break":{if(s[u].condition){for(let e=s.length-1;e>0;e--){if(loopTypes.includes(s[e].type)||e===0){t=s[e].endOfBlock;s.pop();break}else{s.pop()}}}break}case"end":{if(s[u].type==="if"&&t>=s[u].endOfBlock){s.pop()}else if(s[u].type==="if"&&s[u].condition){if(t<s[u].endOfBlock){t=s[u].endOfBlock}s.pop()}else if(s[u].type==="while"){const e=evalRpn(s[u].rpn,a,n,r,l);if(e.dtype===dt.ERROR){return e}s[u].condition=e.value;if(s[u].condition){t=s[u].startStatement}else{s.pop()}}else if(s[u].type==="for"){s[u].index=s[u].nextIndex;const e=Rnl.isRational(s[u].index)&&Rnl.isPositive(s[u].step)?Rnl.lessThanOrEqualTo(s[u].index,s[u].endIndex):Rnl.isRational(s[u].index)?Rnl.greaterThanOrEqualTo(s[u].index,s[u].endIndex):s[u].index<=s[u].endIndex;if(e){const[e,n]=elementFromIterable(s[u].iterable,s[u].index,s[u].step);a[s[u].dummyVariable]=e;s[u].nextIndex=n;t=s[u].startStatement}else{s.pop()}}break}case"return":if(s[u].condition){if(o.rpn){const e=evalRpn(o.rpn,a,n,r,l);return e}else{return{value:Rnl.zero,unit:allZeros,dtype:dt.RATIONAL}}}break;case"echo":if(s[u].condition){if(o.rpn){const e=evalRpn(o.rpn,a,n,r,l);if(e.dtype===dt.ERROR){return e}const t=e.dtype===dt.RATIONAL?Rnl.toNumber(e.value):e.dtype===dt.STRING?e.value:isVector(e)&&e.dtype&dt.RATIONAL?e.value.map((e=>Rnl.toNumber(e))):e.dtype===dt.MATRIX+dt.RATIONAL?e.value.map((e=>e.map((e=>Rnl.toNumber(e))))):e.value;console.log(t)}}break;case"raise":if(s[u].condition){if(o.rpn){const e=evalRpn(o.rpn,a,n,r,l);return{value:e.value,unit:null,dtype:dt.ERROR}}else{return{value:o.rpn,unit:null,dtype:dt.ERROR}}}break}}};const errorResult=(e,t)=>{e.value=null;e.resultDisplay="\\color{firebrick}\\text{"+t.value+"}";e.altResultDisplay=t.value;e.error=true;if(e.resulttemplate.indexOf("!")>-1){e.tex+="= "+e.resultDisplay;e.alt+=t.value}else if(e.resulttemplate.indexOf("@")>-1){e.tex=e.resulttemplate.replace(/@@?/,e.resultDisplay);e.alt=e.altresulttemplate.replace(/@@?/,e.altResultDisplay)}else{e.tex=e.tex.replace(/[?%] *[?%]|[?%]/,e.resultDisplay);e.alt=e.alt.replace(/[?%] *[?%]|[?%]/,e.altResultDisplay)}return[e,t]};const conditionResult=(e,t,n)=>{let r=Object.create(null);r.value=clone(t.value);r.unit=clone(t.unit);r.dtype=t.dtype;if(r.dtype===dt.COMPLEX&&Rnl.isZero(Cpx.im(r.value))){r.value=Cpx.re(r.value);r.dtype=1}if(r.dtype!==dt.ERROR&&n&&e.resultdisplay.indexOf("!")===-1&&(e.expos||r.unit&&r.unit.expos&&Array.isArray(r.unit.expos))){const t=e.expos?e.expos:allZeros;if(!unitsAreCompatible(r.unit.expos,t)){const t=e.expos?"UNIT_RES":"UNIT_MISS";r=errorOprnd(t)}}if(r.dtype===dt.ERROR){return errorResult(e,r)}if(e.resulttemplate&&e.resulttemplate.indexOf("!")>-1&&!(r.dtype===dt.DATAFRAME||r.dtype&dt.MAP||isMatrix(r)||r.dtype&dt.TUPLE)){return errorResult(e,errorOprnd("BAD_DISPLAY"))}if(r.dtype&dt.RATIONAL){r.value=isVector(r)?r.value.map((e=>Rnl.normalize(e))):isMatrix(r)?r.value.map((e=>e.map((e=>Rnl.normalize(e))))):r.dtype===dt.RATIONAL?Rnl.normalize(r.value):r.value}else if(r.dtype===dt.COMPLEX){r.value=[Rnl.normalize(r.value[0]),Rnl.normalize(r.value[1])]}e.dtype=r.dtype;const l=e.factor&&(e.factor!==1||e.gauge);if(r.dtype&dt.DATAFRAME||typeof e.resultdisplay==="string"&&e.resultdisplay.indexOf("!")>-1){e.unit=r.unit}else if(n&&r.dtype&dt.RATIONAL){if(!l&unitsAreCompatible(r.unit.expos,allZeros)){e.factor=Rnl.one;e.gauge=Rnl.zero;e.expos=allZeros}r.value={plain:isMatrix(r)?Matrix.convertFromBaseUnits({value:r.value,dtype:r.dtype},e.gauge,e.factor):r.dtype&dt.MAP?map.convertFromBaseUnits(r.value,e.gauge,e.factor):Rnl.subtract(Rnl.divide(r.value,e.factor),e.gauge),inBaseUnits:r.value};e.dtype+=dt.QUANTITY;e.expos=r.unit.expos}else if(l){r.value={plain:r.value,inBaseUnits:isMatrix(r)&&r.dtype&dt.MAP?mapMap(r.value,(t=>t.map((t=>Rnl.multiply(Rnl.add(t,e.gauge),e.factor))))):isMatrix(r)?Matrix.convertToBaseUnits({value:r.value,dtype:r.dtype},e.gauge,e.factor):r.dtype&dt.MAP?mapMap(r.value,(t=>Rnl.multiply(Rnl.add(t,e.gauge),e.factor))):Rnl.multiply(Rnl.add(r.value,e.gauge),e.factor)};e.dtype+=dt.QUANTITY}else if(r.dtype&dt.RATIONAL||r.dtype&dt.COMPLEX){e.expos=allZeros}if(r.value){e.value=r.value}return[e,r]};const evaluateDrawing=(e,t,n="1,000,000.")=>{const r=e.value;const l=[];for(let e=0;e<r.parameters.length;e++){const a=r.parameters[e];l.push(evalRpn("¿"+a,t,n,false,{}))}const a=evalCustomFunction(r,l,n,false,{});if(a.dtype===dt.ERROR){e.error=true;e.tex="\\color{firebrick}\\text{"+a.value+"}";e.value=null;e.dtype=dt.ERROR}else{e.resultdisplay=a.value;delete e.resultdisplay.temp}return e};const evaluate=(e,t,n="1,000,000.")=>{e.tex=e.template;e.alt=e.altTemplate;const r=/\?\?|!!|%%|@@|¡¡/.test(e.resulttemplate);const l=t.format?t.format.value:"h15";if(e.tex.indexOf("〖")>-1){const a=plugValsIntoEcho(e.tex,t,r,l,n);if(a.dtype&&a.dtype===dt.ERROR){const[t,n]=errorResult(e,a);return t}else{e.tex=a}}if(e.rpn){let a=evalRpn(e.rpn,t,n,r);if(a.dtype===dt.ERROR){[e,a]=errorResult(e,a);return e}let s;[e,s]=conditionResult(e,a,r);if(e.error){return e}e=formatResult(e,s,l,n,r)}return e};const numberRegEx$3=new RegExp(Rnl.numberPattern);const unitRegEx$1=/('[^']+'|[°ΩÅK])$/;const numStr="(-?(?:0x[0-9A-Fa-f]+|[0-9]+(?: [0-9]+\\/[0-9]+|(?:\\.[0-9]+)?(?:e[+-]?[0-9]+|%)?)))";const nonNegNumStr="(0x[0-9A-Fa-f]+|[0-9]+(?: [0-9]+\\/[0-9]+|(?:\\.[0-9]+)?(?:e[+-]?[0-9]+|%)?))";const complexRegEx=new RegExp("^"+numStr+"(?: *([+-]) *j +"+nonNegNumStr+"|∠"+numStr+"(°)?)");const valueFromLiteral=(e,t,n)=>{let r="";let l="";const a=unitRegEx$1.exec(e);if(a){r=a[0].replace(/'/g,"").trim();e=e.slice(0,-a[0].length).trim();l=unitTeXFromString(r)}if(/^[({[].* to /.test(e)){return[0,null,dt.ERROR,""]}else if(e==="true"||e==="false"){return[Boolean(e),null,dt.BOOLEAN,`\\mathord{\\text{${e}}}`]}else if(/^\x22.+\x22/.test(e)){if(t==="format"){return parseFormatSpec(e.slice(1,-1).trim())}else{const t=parse(e,n);return[e,undefined,dt.STRING,t]}}else if(/^[([]/.test(e)){const[t,a]=parse(e,n,true);const s=evalRpn(a,{},n,false,{});let o=s.dtype&dt.RATIONAL?allZeros:null;let i=s.dtype;if(r){o=r;i+=dt.QUANTITY;return[s.value,o,i,t+"\\,"+l]}else{return[s.value,o,i,t]}}else if(/^``/.test(e)){e=tablessTrim(e.slice(2,-2));const t=DataFrame.dataFrameFromCSV(e,{});if(t.dtype===dt.DATAFRAME){return[t.value,t.unit,dt.DATAFRAME,DataFrame.display(t.value,"h3",n)]}else{if(r){t.unit=r;t.dtype=dt.MAP+dt.RATIONAL+dt.QUANTITY}return[t.value,t.unit,t.dtype,map.display(t,"h3",n)+"\\;"+l]}}else if(complexRegEx.test(e)){const t=parse(e,n);const r=e.match(complexRegEx);let l;let a;if(r[3]){l=Rnl.fromString(r[1]);a=Rnl.fromString(r[3]);if(r[2]==="-"){a=Rnl.negate(a)}}else{const e=Rnl.fromString(r[1]);let t=Rnl.fromString(r[4]);if(r[5]){t=Rnl.divide(Rnl.multiply(t,Rnl.pi),Rnl.fromNumber(180))}l=Rnl.multiply(e,Rnl.fromNumber(Math.cos(Rnl.toNumber(t))));a=Rnl.multiply(e,Rnl.fromNumber(Math.sin(Rnl.toNumber(t))))}return[[l,a],allZeros,dt.COMPLEX,t]}else if(e.match(numberRegEx$3)){const t=parse(e,n);if(r){return[Rnl.fromString(e),r,dt.RATIONAL+dt.QUANTITY,t+"\\;"+l]}else{return[Rnl.fromString(e),allZeros,dt.RATIONAL,t]}}else{return[0,null,dt.ERROR,""]}};const improveQuantities=(e,t)=>{if(e.name&&e.value&&e.dtype&dt.QUANTITY){const n=e.unit===undefined?{name:"",factor:Rnl.one,gauge:Rnl.zero,log:"",expos:allZeros}:typeof e.unit==="string"?unitFromUnitName(e.unit,t):e.unit;if(n.dtype&&n.dtype===dt.ERROR){e.tex+=" \\color{firebrick}{\\text{"+n.value+"}}";e.alt+=n.value;return e}e.expos=n.expos;if(Rnl.isRational(e.value)){e.value={plain:e.value,inBaseUnits:Rnl.multiply(Rnl.add(e.value,n.gauge),n.factor)}}else if(isMatrix(e)){e.value={plain:e.value,inBaseUnits:Matrix.convertToBaseUnits(e,n.gauge,n.factor)}}else if(e.dtype&dt.MAP){const t=clone(e.value);const r=map.convertToBaseUnits(t,n.gauge,n.factor);e.value={plain:t,inBaseUnits:r};e.unit={expos:n.expos}}}if(e.rpn&&!e.value){if(e.unit){const n=e.unit?unitFromUnitName(e.unit,t):{factor:1,gauge:0,expos:allZeros};e.factor=n.factor;e.gauge=n.gauge;e.expos=n.expos}}};const isValidIdentifier$1=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;const keywordRegEx=/^(if|else if|else|return|raise|while|for|break|echo|end)\b/;const drawCommandRegEx=/^(title|frame|view|axes|grid|stroke|strokewidth|strokedasharray|fill|fontsize|fontweight|fontstyle|fontfamily|marker|line|path|plot|curve|rect|circle|ellipse|arc|text|dot|leader|dimension)\b/;const functionRegEx=/^(?:private +)?function (?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*\(/;const drawRegEx=/^draw\(/;const startSvgRegEx=/^startSvg\(\)/;const lexRegEx=/"[^"]*"|``.*|`[^`]*`|'[^']*'|#|[^"`'#]+/g;const testForStatement=e=>{const t=e.indexOf("=");if(t===-1){return false}const n=e.slice(0,t).trim();if(isValidIdentifier$1.test(n)){return true}if(n.indexOf(",")===-1){return false}let r=true;const l=n.split(",");l.forEach((e=>{if(!isValidIdentifier$1.test(e.trim())){r=false}}));return r};const stripComment=e=>{const t=arrayOfRegExMatches(lexRegEx,e);for(let n=0;n<t.length;n++){if(t[n].value==="#"){e=e.slice(0,t[n].index);break}}return e.trim()};const scanModule=(e,t)=>{const n=Object.create(null);const r=e.split(/\r?\n/g);for(let e=0;e<r.length;e++){const l=stripComment(r[e]);if(l.length===0){continue}if(functionRegEx.test(l)||drawRegEx.test(l)){const[l,a]=scanFunction(r,t,e);if(l.dtype&&l.dtype===dt.ERROR){return l}n[l.name]=l;e=a}else if(testForStatement(l)){const[l,a]=scanAssignment(r,t,e);n[l.name]=l;e=a}}return{value:n,unit:null,dtype:dt.MODULE}};const handleCSV=(e,t,n)=>{for(let r=n+1;r<t.length;r++){const n=t[r].trim();if(n.length===0){continue}e+="\n"+n;if(n.slice(-2)==="``"){return[e,r]}}};const scanFunction=(e,t,n)=>{const r=stripComment(e[n]);let l=r.charAt(0)==="d";const a=r.indexOf("(");let s="";if(l){s="draw"}else{const e=r.indexOf("function");s=r.slice(e+8,a).trim()}const o=/^private /.test(r);const i=r.slice(a+1,-1).trim();const u=i.length===0?[]:i.split(/, */g);const c={name:s,dtype:l?dt.DRAWING:dt.MODULE,isPrivate:o,parameters:u,statements:[]};const p=[];let d="";let f=false;let m="";let R="";let h=false;for(let r=n+1;r<e.length;r++){let n=stripComment(e[r]);if(n.length===0){continue}if(f){const e=m.slice(-1);n=e===";"&&"})]".indexOf(n.charAt(0))>-1?m.slice(0,-1).trim()+n:e===";"||e===","?m+" "+n:m+n}if(/[{([,;]$/.test(n)){f=true;m=n;continue}else if(e.length>r+1&&/^\s*[+\-)\]}]/.test(e[r+1])){f=true;m=n;continue}const a=keywordRegEx.exec(n);if(a){R=a[0];d=n.slice(R.length).trim();if(d.length>0&&/^``/.test(d)){[d,r]=handleCSV(d,e,r)}}else if(l&&drawCommandRegEx.test(n)){R="svg";d=n.indexOf(" ")===-1?n+"(svg)":n.replace(" ","(svg, ")+")";h=true}else{if(testForStatement(n)){const t=n.indexOf("=");R=n.slice(0,t-1).trim();d=n.slice(t+1).trim();if(/^``/.test(d)){[d,r]=handleCSV(d,e,r)}if(startSvgRegEx.test(d)){l=true}h=true}else{return[errorOprnd("FUNC_LINE",s+", line "+(r+1)),r]}}let o="";if(d){[,o]=parse(d,t,true)}const i=h?"statement":R;if(h&&/[,;]/.test(R)){R=R.split(/[,;]/).map((e=>e.trim()))}c.statements.push({name:R,rpn:o,stype:i});if(i==="if"||i==="while"||i==="for"){p.push({type:i,statementNum:c.statements.length-1});if(i==="for"&&o.indexOf("j ")===0){return[errorOprnd("BAD_J")]}}else if(i==="end"){if(p.length===0){if(l){c.statements.splice(-1,0,{name:"return",rpn:"¿svg",stype:"return"})}return[c,r]}const e=p[p.length-1];c.statements[e.statementNum].endOfBlock=c.statements.length-1;p.pop()}h=false;f=false;m="";R="";d=""}return[errorOprnd("END_MISS",s),0]};const scanAssignment=(e,t,n)=>{let r=false;let l="";let a=n;for(let t=n;t<e.length;t++){const n=stripComment(e[t]);if(n.length===0){continue}if(r){l=l.slice(-1)===";"&&"})]".indexOf(n.charAt(0))>-1?l.slice(0,-1).trim()+n:l+n}else{l=n}if(/[{([,;]$/.test(l)){r=true}else if(e.length>t+1&&/^\s*[+\-)\]}]/.test(e[t+1])){r=true}else{a=t;break}}const s=l.indexOf("=");let o=l.slice(0,s).trim();if(/[,;]/.test(o)){o=o.split(/[,;]/).map((e=>e.trim()))}const i=l.slice(s+1).trim();const[u,c,p,d]=valueFromLiteral(i,o,t);const f={name:o,value:u,unit:c,dtype:p,resultDisplay:d};improveQuantities(f,{});return[f,a]};const containsOperator=/[+\-×·*∘⌧/^%‰&√!¡|‖&=<>≟≠≤≥∈∉⋐∧∨⊻¬]|\xa0(function|modulo|\\atop|root|sum|abs|cos|sin|tan|acos|asin|atan|sec|csc|cot|asec|acsc|acot|exp|log|ln|log10|log2|cosh|sinh|tanh|sech|csch|coth|acosh|asinh|atanh|asech|acsch|acoth|Gamma|Γ|logGamma|logΓ|logFactorial|cosd|sind|tand|acosd|asind|atand|secd|cscd|cotd|asecd|acscd|acotd|Re|Im|argument|chr|round|sqrt|sign|\?{}|%|⎾⏋|⎿⏌|\[\]|\(\))\xa0/;const mustDoCalculation=/^(``.+``|[$$£¥\u20A0-\u20CF]?(\?{1,2}|@{1,2}|%{1,2}|!{1,2})[^=!(?@%!{})]*)$/;const assignDataFrameRegEx=/^[^=]+=\s*``/;const currencyRegEx=/^[$£¥\u20A0-\u20CF]/;const isValidIdentifier$2=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;const matrixOfNames=/^[([](?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*[,;].+[)\]]$/;const isKeyWord=/^(π|true|false|root|if|else|and|or|otherwise|modulo|for|while|break|return|raise)$/;const shortcut=(e,t)=>{const n=parse(e,t);return{entry:e,tex:n,alt:e}};const prepareStatement=(e,t="1,000,000.")=>{let n="";let r="";let l="";let a=false;let s=false;let o=false;let i=false;let u=false;let c=0;let p="";let d="";let f="";let m="";let R="";let h=false;let g;let y;let b;let O="";const x=drawRegEx.test(e);if(functionRegEx.test(e)||x){let n="";if(x){n="draw"}else{const t=e.indexOf("function");const r=e.indexOf("(");n=e.slice(t+8,r).trim()}const r=scanModule(e,t);const l=r.dtype&&r.dtype===dt.ERROR;if(l){window.alert(r.value)}const a={entry:e,name:n,value:l?r.value:r.value[n],dtype:l?dt.ERROR:n==="draw"?dt.DRAWING:dt.MODULE,error:l};return a}O=e;const v=assignDataFrameRegEx.test(O);const A=v?O.indexOf("=")+1:O.lastIndexOf("=")+1;if(A>1){r=O.substring(0,A-1).replace(/ +$/,"");if(r.length>0&&/;\s*$/.test(r)){u=true;r=r.replace(/;\s*$/,"")}r=r.trim();l=O.substring(A).trim();if(mustDoCalculation.test(l)){a=true;s=l.indexOf("!")>-1;o=l.indexOf("@")>-1;i=l.indexOf("%")>-1;c=r.indexOf("=")+1;if(c){n=r.slice(0,c-1).trim();p=r.substring(c).trim();if(matrixOfNames.test(n)){n=n.slice(1,-1).trim()}if(/[,;]/.test(n)){const e=n.split(/[,;]/);for(let n=0;n<e.length;n++){const r=e[n].trim();if(isKeyWord.test(r)||!isValidIdentifier$2.test(r)){return shortcut(O,t)}}R=e.map((e=>e.trim()))}else{if(isValidIdentifier$2.test(n)&&!isKeyWord.test(n)){R=n}else{p=r}}}else{p=r}}else if(v){R=r;p=l}else if(isValidIdentifier$2.test(r)&&!isKeyWord.test(r)){R=r;if(l===""){const e=parse(O,t);return{entry:O,tex:e,alt:O}}}else{return shortcut(O,t)}}else{return shortcut(O,t)}if(p.length>0){if(/^\s*fetch\(/.test(p)){d=""}else{[d,f]=parse(p,t,true);if(s||o||d.indexOf("〖")===-1||/\u00a0for\u00a0/.test(f)){d=""}else if(i){d=""}else{if(containsOperator.test(" "+f+" ")){d="{\\color{#0000ff}"+d+"}"}else{d=""}}}}if(currencyRegEx.test(l)){h=true;y=l.charAt(0)}if(a){g=null;if(!h){y=l.replace(/[?@%!']/g,"").trim()}if(s){m=l}else{if(y){m=l.trim().replace(/([^ ?!@%]+)$/,"'"+"$1"+"'");m=parse(m,t).replace(/\\%/g,"%").replace("@ @","@@")}else{m=parse(l,t).replace(/\\%/g,"%").replace("@ @","@@")}m=m.replace(/\\text\{(\?\??|%%?)\}/,"$1");m=m.replace(/([?%]) ([?%])/,"$1"+"$2")}}else{[g,y,b,m]=valueFromLiteral(l,R,t);if(b===dt.ERROR){return shortcut(O,t)}f=""}let N="";let E="";if(!o){N=parse(r,t);if(u){N="\\begin{aligned}"+N;const e=N.indexOf("=");N=N.slice(0,e)+"&"+N.slice(e)}const e=u?"\\\\ &":"";E=r;if(d.length>0&&!i){N+=` ${e}= `+d}if(!s){N+=" "+(u?"\\\\&":"")+"= "+m;E+=" = "+l}if(u){N+="\\end{aligned}"}}const T={entry:O,template:N,altTemplate:E,resultdisplay:m,dtype:b,error:false};if(R){T.name=R}if(a){T.resulttemplate=m;T.altresulttemplate=l}else{T.tex=N;T.alt=E}if(f){T.rpn=f}if(g){T.value=g}if(y){if(Array.isArray(y)){T.expos=y}else{T.unit=y}}return T};const fetchRegEx=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′* *= *(?:fetch|import)\(/;const importRegEx=/^[^=]+= *import/;const fileErrorRegEx=/^Error while reading file. Status Code: \d*$/;const textRegEx=/\\text{[^}]+}/;const urlFromEntry=e=>{const t=e.replace(/^[^()]+\("?/,"");return t.replace(/"?\).*$/,"").trim()};const processFetchedString=(e,t,n,r)=>{const l=Object.create(null);l.entry=e;l.name=e.replace(/=.+$/,"").trim();let a=parse(e.replace(/\s*=\s*[$$£¥\u20A0-\u20CF]?(?:!{1,2}).*$/,""),r);const s=urlFromEntry(e);if(/\.(?:csv|txt)$/.test(s)){const e=s.replace(/.+\//,"");const t=textRegEx.exec(a);a=a.slice(0,t.index)+"\\text{"+addTextEscapes(e)+"})"}l.tex=a;l.alt=e;if(t==="File not found."||fileErrorRegEx.test(t)){l.dtype=dt.ERROR;l.tex+=` = \\red{\\text{${t}}}`;l.alt=" = "+t;l.value=null;return l}const o=importRegEx.test(e)?scanModule(t,r):DataFrame.dataFrameFromCSV(t,n);l.value=o.value;l.dtype=o.dtype;l.unit=o.unit;l.isFetch=true;if(o.dtype===dt.MODULE&&/^importedParameters *=/.test(e)){let e="\\begin{matrix}";let t=0;Object.entries(o.value).forEach((([r,l])=>{n[r]=l;e+=parse(l.name)+" & ";t+=1;if(t===5){e=e.slice(0,-1)+"\\\\ ";t=0}}));e=e.slice(0,t===0?-2:-1)+"\\end{matrix}";l.tex=l.tex.replace("\\mathrm{importedParameters}",e)}return l};const workAsync=(e,t,n,r,l,a,s,o)=>{const i=e.state.doc;const u=i.attrs.inDraftMode;const c=i.attrs.decimalFormat;Promise.all(s.map((e=>fetch(e,{method:"GET",headers:{"Content-Type":"text/plain;charset=UTF-8"},mode:"cors"})))).then((e=>Promise.all(e.map((e=>{if(e.status!==200&&e.status!==0){return e.status===404?"File not found.":"Error while reading file. Status Code: "+e.status}return e.text()}))))).then((s=>{const p=e.state;if(p.selection.to===l+1){p.selection=p.selection.constructor.near(p.doc.resolve(l+1))}const d=p.tr;for(let e=0;e<s.length;e++){const l=o[e];const p=n?i.nodeAt(l).attrs.entry:r.entry;const f=processFetchedString(p,s[e],a,c);f.inDraftMode=u;d.replaceWith(l,l+1,t.createAndFill(f));if(f.name){insertOneHurmetVar(a,f,c)}}try{proceedAfterFetch(e,t,n,r,l,a,d)}catch(n){console.log(n);const a=r.template.indexOf(r.resultdisplay);r.tex=r.template.slice(0,a)+"\\text{"+n+"}";d.replaceWith(l,l+1,t.createAndFill(r));d.setSelection(e.state.selection.constructor.near(d.doc.resolve(l+1)));e.dispatch(d);e.focus()}}))};const proceedAfterFetch=(e,t,n,r,l,a,s)=>{const o=e.state.doc;const i=o.attrs.decimalFormat;if(!n&&(r.name||r.rpn||r.dtype&&r.dtype===dt.DRAWING)){o.nodesBetween(0,l,(function(e){if(e.type.name==="calculation"){const t=e.attrs;if(t.name){if(t.name==="importedParameters"){Object.entries(t.value).forEach((([e,t])=>{a[e]=t}))}else{insertOneHurmetVar(a,t,i)}}}}));o.nodesBetween(l+1,o.content.size,(function(e,t){if(e.type.name==="calculation"&&e.attrs.dtype===dt.MODULE){insertOneHurmetVar(a,e.attrs,i)}}));if(!fetchRegEx.test(r.entry)){let e=clone(r);improveQuantities(e,a);if(e.rpn||r.dtype&&r.dtype===dt.DRAWING){e=e.dtype&&e.dtype===dt.DRAWING?evaluateDrawing(e,a,i):evaluate(e,a,i)}if(e.name){insertOneHurmetVar(a,e,i)}e.displayMode=r.displayMode;s.replaceWith(l,l+1,t.createAndFill(e))}}const u=n?0:l+1;o.nodesBetween(u,o.content.size,(function(e,r){if(e.type.name==="calculation"){const l=n?!fetchRegEx.test(e.attrs.entry):!e.attrs.isFetch;if(l){const l=e.attrs.entry;let o=n?prepareStatement(l,i):clone(e.attrs);o.displayMode=e.attrs.displayMode;const u=o.dtype&&o.dtype===dt.DRAWING&&(o.rpn||(o.value.parameters.length>0||n));if(n||o.rpn||u||o.name&&!(a[o.name]&&a[o.name].isFetch)){if(n){improveQuantities(o,a)}if(o.rpn||u){o=o.rpn?evaluate(o,a,i):evaluateDrawing(o,a,i)}if(o.name){insertOneHurmetVar(a,o,i)}if(n||o.rpn||u){s.replaceWith(r,r+1,t.createAndFill(o))}}}else if(e.attrs.name&&!(n&&e.attrs.isFetch)){if(e.attrs.name){if(e.attrs.name==="importedParameters"){Object.entries(e.attrs.value).forEach((([e,t])=>{a[e]=t}))}else{insertOneHurmetVar(a,e.attrs,i)}}}}}));if(!n){s.setSelection(e.state.selection.constructor.near(s.doc.resolve(l+1)))}e.dispatch(s);e.focus()};function updateCalculations(e,t,n=false,r,l){const a=e.state.doc;if(!(n||r.name||r.rpn||r.dtype&&r.dtype===dt.DRAWING)){const n=e.state;if(n.selection.to===l+1){n.selection=n.selection.constructor.near(n.doc.resolve(l+1))}const a=n.tr;try{a.replaceWith(l,l+1,t.createAndFill(r))}catch(e){}finally{e.dispatch(a);e.focus()}return}const s=Object.create(null);s.format={value:"h15"};const o=[];const i=[];if(!n){const e=r.entry;if(fetchRegEx.test(e)){o.push(urlFromEntry(e));i.push(l)}}else{a.nodesBetween(0,a.content.size,(function(e,t){if(e.type.name==="calculation"&&!e.attrs.value){const n=e.attrs.entry;if(fetchRegEx.test(n)){o.push(urlFromEntry(n));i.push(t)}else if(/^function /.test(n)){e.attrs=prepareStatement(n,a.attrs.decimalFormat);insertOneHurmetVar(s,e.attrs,a.attrs.decimalFormat)}}else if(e.attrs.isFetch||e.attrs.dtype&&e.attrs.dtype===dt.MODULE){insertOneHurmetVar(s,e.attrs,a.attrs.decimalFormat)}}))}if(o.length>0){workAsync(e,t,n,r,l,s,o,i)}else{const a=e.state;if(a.selection.to===l+1){a.selection=a.selection.constructor.near(a.doc.resolve(l+1))}const o=a.tr;try{proceedAfterFetch(e,t,n,r,l,s,o)}catch(n){console.log(n);const a=r.template.indexOf(r.resultdisplay);r.tex=r.template.slice(0,a)+"\\text{"+n+"}";o.replaceWith(l,l+1,t.createAndFill(r));o.setSelection(e.state.selection.constructor.near(o.doc.resolve(l+1)));e.dispatch(o);e.focus()}}}const calculate=(e,t={},n=false,r="1,000,000.")=>{let l=prepareStatement(e,r);improveQuantities(l,t);if(l.rpn){l=evaluate(clone(l),t,r)}else if(l.dtype&&l.dtype===dt.DRAWING){l=evaluateDrawing(l,t,r)}if(l.name){insertOneHurmetVar(t,l)}return l.dtype&&l.dtype===dt.DRAWING?l:n?l.alt:l.tex};const tagName={em:"em",strong:"strong",code:"code",strikethru:"del",subscript:"sub",superscript:"sup",underline:"u",highlight:"mark"};const nodes={calculation(e){const t=parse(e.attrs.entry);const n=document.createElement("span");const r="MozAppearance"in document.documentElement.style;if(r){temml.render(t,n)}else{katex.render(t,n,{output:"html",strict:false,throwOnError:false,minRuleThickness:.06})}return n},tex(e){const t=document.createElement("span");t.classList="hurmet-tex";katex.render(e.attrs.tex,t,{strict:false,throwOnError:false,minRuleThickness:.06});return t},text(e){let t=document.createTextNode(e.text);if(!e.marks){return document.createElement("span").appendChild(t)}else{for(const n of e.marks){const e=t.cloneNode(true);t=document.createElement(tagName[n.type]);t.appendChild(e)}return t}}};const output=e=>{const t=document.createElement("span");if(Array.isArray(e)){for(let n=0;n<e.length;n++){t.appendChild(output(e[n]))}}else if(e.type!=="null"){t.appendChild(nodes[e.type](e))}return t};const renderMD=e=>{const t=md2ast(e)[0].content;return output(t)};const hurmet={dt:dt,parse:parse,calculate:calculate,autoCorrect:autoCorrect,prepareStatement:prepareStatement,improveQuantities:improveQuantities,draw:draw,evaluate:evaluate,md2ast:md2ast,renderMD:renderMD,scanModule:scanModule,updateCalculations:updateCalculations};export{hurmet};