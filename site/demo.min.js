const codeJar=(e,t)=>{const r={tab:"\t",indentOn:/{$/,catchTab:true,preserveIdent:true,addClosing:true};const n=window.document;const a=[];let o;e.setAttribute("contenteditable","plaintext-only");e.setAttribute("spellcheck","false");e.style.outline="none";e.style.overflowWrap="break-word";e.style.overflowY="auto";e.style.whiteSpace="pre-wrap";let i=false;if(e.contentEditable!=="plaintext-only")i=true;if(i)e.setAttribute("contenteditable","true");const s=(t,r)=>{a.push([t,r]);e.addEventListener(t,r)};s("keydown",(n=>{if(t&&n.keyCode===13&&!n.shiftKey)return;if(n.keyCode===65&&n.ctrlKey){window.getSelection().selectAllChildren(e);n.preventDefault()}if(n.defaultPrevented)return;if(r.preserveIdent)m(n);else p(n);if(r.catchTab)h(n);if(r.addClosing)f(n);if(i)u(l())}));s("keyup",(e=>{if(e.defaultPrevented)return;if(e.isComposing)return;if(o)o(R())}));s("paste",(e=>{g(e);if(o)o(R())}));function l(){const t=S();const r={start:0,end:0,dir:undefined};let{anchorNode:a,anchorOffset:o,focusNode:i,focusOffset:s}=t;if(!a||!i)throw"error1";if(a.nodeType===Node.ELEMENT_NODE){const e=n.createTextNode("");a.insertBefore(e,a.childNodes[o]);a=e;o=0}if(i.nodeType===Node.ELEMENT_NODE){const e=n.createTextNode("");i.insertBefore(e,i.childNodes[s]);i=e;s=0}b(e,(e=>{if(e===a&&e===i){r.start+=o;r.end+=s;r.dir=o<=s?"->":"<-";return"stop"}if(e===a){r.start+=o;if(!r.dir){r.dir="->"}else{return"stop"}}else if(e===i){r.end+=s;if(!r.dir){r.dir="<-"}else{return"stop"}}if(e.nodeType===Node.TEXT_NODE){if(r.dir!="->")r.start+=e.nodeValue.length;if(r.dir!="<-")r.end+=e.nodeValue.length}}));e.normalize();return r}function u(t){const r=S();let n,a=0;let o,i=0;if(!t.dir)t.dir="->";if(t.start<0)t.start=0;if(t.end<0)t.end=0;if(t.dir=="<-"){const{start:e,end:r}=t;t.start=r;t.end=e}let s=0;b(e,(e=>{if(e.nodeType!==Node.TEXT_NODE)return;const r=(e.nodeValue||"").length;if(s+r>t.start){if(!n){n=e;a=t.start-s}if(s+r>t.end){o=e;i=t.end-s;return"stop"}}s+=r}));if(!n)n=e,a=e.childNodes.length;if(!o)o=e,i=e.childNodes.length;if(t.dir=="<-"){[n,a,o,i]=[o,i,n,a]}r.setBaseAndExtent(n,a,o,i)}function c(){const t=S();const r=t.getRangeAt(0);const a=n.createRange();a.selectNodeContents(e);a.setEnd(r.startContainer,r.startOffset);return a.toString()}function d(){const t=S();const r=t.getRangeAt(0);const a=n.createRange();a.selectNodeContents(e);a.setStart(r.endContainer,r.endOffset);return a.toString()}function m(e){if(e.key==="Enter"){const t=c();const n=d();let[a]=x(t);let o=a;if(r.indentOn.test(t)){o+=r.tab}if(o.length>0){v(e);e.stopPropagation();y("\n"+o)}else{p(e)}if(o!==a&&n[0]==="}"){const e=l();y("\n"+a);u(e)}}}function p(e){if(i&&e.key==="Enter"){v(e);e.stopPropagation();if(d()==""){y("\n ");const e=l();e.start=--e.end;u(e)}else{y("\n")}}}function f(e){const t=`([{'"`;const r=`)]}'"`;const n=d();const a=c();const o=a.substr(a.length-1)==="\\";const i=n.substr(0,1);if(r.includes(e.key)&&!o&&i===e.key){const t=l();v(e);t.start=++t.end;u(t)}else if(t.includes(e.key)&&!o&&(`"'`.includes(e.key)||[""," ","\n"].includes(i))){v(e);const n=l();const a=n.start==n.end?"":S().toString();const o=e.key+a+r[t.indexOf(e.key)];y(o);n.start++;n.end++;u(n)}}function h(e){if(e.key==="Tab"){v(e);if(e.shiftKey){const e=c();let[t,a]=x(e);if(t.length>0){const e=l();const o=Math.min(r.tab.length,t.length);u({start:a,end:a+o});n.execCommand("delete");e.start-=o;e.end-=o;u(e)}}else{y(r.tab)}}}function g(e){v(e);const t=(e.originalEvent||e).clipboardData.getData("text/plain").replace(/\r/g,"");const r=l();y(t);u({start:r.start+t.length,end:r.start+t.length})}function b(e,t){const r=[];if(e.firstChild)r.push(e.firstChild);let n=r.pop();while(n){if(t(n)==="stop")break;if(n.nextSibling)r.push(n.nextSibling);if(n.firstChild)r.push(n.firstChild);n=r.pop()}}function y(e){e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;");n.execCommand("insertHTML",false,e)}function x(e){let t=e.length-1;while(t>=0&&e[t]!=="\n")t--;t++;let r=t;while(r<e.length&&/[ \t]/.test(e[r]))r++;return[e.substring(t,r)||"",t,r]}function R(){return e.textContent||""}function v(e){e.preventDefault()}function S(){if(e.parentNode&&e.parentNode.nodeType==Node.DOCUMENT_FRAGMENT_NODE){return e.parentNode.getSelection()}return window.getSelection()}return{updateOptions(e){Object.assign(r,e)},updateCode(t){e.textContent=t},onUpdate(e){o=e},toString:R,save:l,restore:u,destroy(){for(let[t,r]of a){e.removeEventListener(t,r)}}}};function selectedText(){const e=window.getSelection();if(e.rangeCount===0)return"";return e.getRangeAt(0).toString()}function textBeforeCursor(e){const t=window.getSelection();if(t.rangeCount===0)return"";const r=t.getRangeAt(0);const n=document.createRange();n.selectNodeContents(e);n.setEnd(r.startContainer,r.startOffset);return n.toString()}function textAfterCursor(e){const t=window.getSelection();if(t.rangeCount===0)return"";const r=t.getRangeAt(0);const n=document.createRange();n.selectNodeContents(e);n.setStart(r.endContainer,r.endOffset);return n.toString()}const autoCorrectRegEx=/([?:<>\-~/_]=| \.|~~|\+-|-\+|<-->|<->|<>|<--|<-|-->|->|-:|\^\^|\\\||\/\/\/|\b(bar|hat|vec|tilde|dot|ddot|ul)|\b(bb|bbb|cc|ff|ss) [A-Za-z]|\\?[A-Za-z]{2,}|\\c|\\ |\\o|root [234]|<<|>>|\^-?[0-9]+|\|\|\||\/_|''|""|00)\s$/;const accents={acute:"́",bar:"̅",breve:"̆",check:"̌",dot:"̇",ddot:"̈",grave:"̀",hat:"̂",harpoon:"⃑",leftharpoon:"⃐",leftrightvec:"⃡",leftvec:"⃖",ring:"̊",tilde:"̃",vec:"⃗",ul:"̲"};const autoCorrections={alpha:"α",beta:"β",chi:"χ",delta:"δ",Delta:"Δ",epsilon:"ε",varepsilon:"ɛ",eta:"η",gamma:"γ",Gamma:"Γ",iota:"ι",kappa:"κ",lambda:"λ",Lambda:"Λ",mu:"μ",nu:"ν",omega:"ω",Omega:"Ω",phi:"ϕ",varphi:"φ",Phi:"Φ",pi:"π",Pi:"Π",psi:"ψ",Psi:"Ψ",rho:"ρ",sigma:"σ",Sigma:"Σ",tau:"τ",theta:"θ",vartheta:"ϑ",Theta:"Θ",upsilon:"υ",xi:"ξ",Xi:"Ξ",zeta:"ζ",prime:"ʹ",ee:"ε",ll:"λ",sqrt:"√","root 2":"√","root 3":"∛","root 4":"∜",AA:"∀",CC:"ℂ",EE:"∃",HH:"ℍ",NN:"ℕ",QQ:"ℚ",RR:"ℝ",ZZ:"ℤ",OO:"𝒪",ii:"√(-1)",oo:"∞",ooo:"°",not:"¬","-:":"÷","\\ ":"˽","\\c":"¢","\\cdots":"⋯","\\vdots":"⋮","\\ddots":"⋱","\\floor":"⎿⏌","\\ceil":"⎾⏋",xx:"×","\\int":"∫","\\iint":"∬","\\oint":"∮","\\sum":"∑",nn:"∩",nnn:"⋂",uu:"∪",uuu:"⋃","\\del":"∂","\\grad":"∇","\\hbar":"ℏ","\\ell":"ℓ","\\nabla":"∇","\\alef":"ℵ","\\subset":"⊂","\\supset":"⊃",contains:"⊆",owns:"∋","\\subseteq":"⊆","\\nsubset":"⊄","\\nsubseteq":"⊈","\\forall":"∀","\\therefore":"∴","\\mapsto":"↦","\\checkmark":"✓",bar:"ˉ",dot:"˙",ddot:"¨",hat:"ˆ",tilde:"˜",vec:" ⃗","\\land":"∧","\\lor":"∨","\\not":"¬","\\notin":"∉","\\euro":"€","\\pound":"£","\\yen":"¥","\\o":"ø","^^":"∧",vv:"∨",vvv:"⋁","\\xor":"⊻","\\in":"∈","<>":"≠",":=":"≔","?=":"≟","<=":"≤",">=":"≥","-=":"≡","~=":"≅","_=":"≡","~~":"≈","+-":"±","-+":"∓","<<":"⟨",">>":"⟩","///":"∕","<->":"↔","<-":"←","<--":"⟵","--\x3e":"⟶","->":"→","<--\x3e":"\\xrightleftarrows","\\circ":"∘","\\otimes":"⊗","|||":"¦","\\|":"‖","/_":"∠"," .":"·","''":"′",'""':"″"};const supCharFromNum={"^":"","-":"⁻",2:"²",3:"³",1:"¹",0:"⁰",4:"⁴",5:"⁵",6:"⁶",7:"⁷",8:"⁸",9:"⁹","(":"",")":""};const superscript=e=>{let t="";for(const r of e){t+=supCharFromNum[r]}return t};const lowSurrogateDiff={bb:[56255,56249],bbb:[56567,56561],cc:[56411,56405],ff:[56671,56665]};const wideExceptions=[56634,56639,56645,56647,56648,56649,56657,56477,56480,56481,56483,56484,56487,56488,56493,56506,56508,56513,56516];const bbb={C:"ℂ",H:"ℍ",N:"ℕ",P:"ℙ",Q:"ℚ",R:"ℝ",Z:"ℤ"};const calligraphic={B:"ℬ",E:"ℰ",F:"ℱ",H:"ℋ",I:"ℐ",L:"ℒ",M:"ℳ",R:"ℛ",e:"ℯ",g:"ℊ",l:"ℓ",o:"ℴ"};const accentedChar=e=>{const t=e.indexOf(" ");const r=e.substring(t+1);const n=e.substring(0,t);switch(n){case"bb":case"bbb":case"cc":case"ff":{const e=r.charCodeAt(0);let t="";if(e<65||e>122){return null}const a=e<91?0:1;if(n==="cc"&&a&&e!==108){return null}if(e>90&&n==="bbb"){return null}const o=e+lowSurrogateDiff[n][a];if(wideExceptions.includes(o)){t=n==="bbb"?bbb[r]:calligraphic[r]}else{t="\ud835"+String.fromCharCode(o)}return t}default:return null}};const autoCorrect=(e,t,r)=>{if(t.length>0&&t.slice(-1)===" "){const n=autoCorrectRegEx.exec(t);if(n){const a=n[0].slice(0,-1);let o;const i=accents[a];if(i){const a=t.slice(0,-(n[0].length+1))+i;e.updateCode(a+r);const o=a.length;e.restore({start:o,end:o,dir:undefined})}else{o=autoCorrections[a];if(!o){if(a.charAt(0)==="^"){o=superscript(a)}else{if(a.indexOf(" ")>0){o=accentedChar(a)}}}}if(o){const a=t.slice(0,-n[0].length)+o;e.updateCode(a+r);const i=a.length;e.restore({start:i,end:i,dir:undefined})}}}};const allZeros=Object.freeze([0,0,0,0,0,0,0,0]);const dt=Object.freeze({NULL:0,RATIONAL:1,COMPLEX:2,BOOLEAN:4,FROMCOMPARISON:8,BOOLEANFROMCOMPARISON:12,STRING:16,QUANTITY:32,DATE:64,RANGE:128,TUPLE:256,MAP:512,ROWVECTOR:1024,COLUMNVECTOR:2048,MATRIX:4096,DATAFRAME:8192,MODULE:16384,ERROR:32768,UNIT:65536,DRAWING:131072,RICHTEXT:262144,DICTIONARY:524288});const isIn=(e,t)=>{if(t.length===0){return false}let r=0;let n=0;let a=t.length-1;while(n<a){r=Math.floor((n+a)/2);if(e>t[r]){n=r+1}else{a=r}}return e===t[n]};const clone=e=>{if(null==e||"object"!=typeof e){return e}if(e instanceof Date){return(new Date).setTime(e.valueOf())}if(Array.isArray(e)){const t=[];for(let r=0,n=e.length;r<n;r++){t[r]=clone(e[r])}return t}if(e instanceof Map){const t=new Map;for(const[r,n]of e.entries()){t.set(r,clone(n))}return t}if(typeof e==="object"){const t=Object.create(null);Object.entries(e).forEach((([e,r])=>{t[e]=clone(r)}));return t}throw new Error("Unable to clone obj! Its type isn't supported.")};const mapMap=(e,t)=>{const r=new Map;for(const[n,a]of e.entries()){r.set(n,t(a))}return r};const arrayOfRegExMatches=(e,t)=>{if(e.constructor!==RegExp){throw new Error("not RegExp")}const r=[];let n=null;if(e.global){while(n=e.exec(t)){r.push({value:n[0],index:n.index,length:n[0].length})}}else if(n=e.exec(t)){r.push({value:n[0],index:n.index,length:n[0].length})}return r};const textAccent={"̀":"`","́":"'","̂":"^","̃":"~","̄":"=","̅":"=","̆":"u","̇":".","̈":'"',"̊":"r","̌":"v"};const escapeRegEx=/[#$&%_~^]/g;const accentRegEx=/[\u0300-\u0308\u030A\u030c]/g;const addTextEscapes=e=>{if(e.length>1){let t=arrayOfRegExMatches(escapeRegEx,e);let r=t.length;if(r>0){for(let n=r-1;n>=0;n--){const r=t[n];const a=r.index;if(r.value==="~"){e=e.slice(0,a)+"\\textasciitilde "+e.slice(a+1)}else if(r.value==="^"){e=e.slice(0,a)+"\\textasciicircum "+e.slice(a+1)}else if(a===0){e="\\"+e}else{const t=e.substr(a-1,1);if(t!=="\\"){e=e.slice(0,a)+"\\"+e.slice(a)}}}}t=arrayOfRegExMatches(accentRegEx,e);r=t.length;if(r>0){for(let n=r-1;n>=0;n--){const r=t[n];const a=r.index;if(a>0){e=e.slice(0,a-1)+"\\"+textAccent[r.value]+e.slice(a-1,a)+e.slice(a+1)}}}}return e};const numeralFromSuperScript=e=>{switch(e){case"²":return"2";case"³":return"3";case"⁻":return"-";case"¹":return"1";case"⁰":return"0";default:return String.fromCharCode(e.charCodeAt(0)-8256)}};const leadingSpaceRegEx=/^[ \r\n\f]+/;const trailingSpaceRegEx=/[ \r\n\f]+$/;const tablessTrim=e=>e.replace(leadingSpaceRegEx,"").replace(trailingSpaceRegEx,"");const midDotRegEx=/^(\*|·|\.|-[A-Za-z])/;const exponentRegEx=/[⁰¹²³\u2074-\u2079⁻]/;const unitTeXFromString=e=>{let t=" {\\text{";let r=false;for(let n=0;n<e.length;n++){let a=e.charAt(n);if(exponentRegEx.test(a)){a=numeralFromSuperScript(a)}if(midDotRegEx.test(e.slice(n))){t+="}\\mkern1mu{\\cdot}\\mkern1mu\\text{"}else if(/[0-9-]/.test(a)){a=a==="-"?"\\text{-}":a;if(r){t+=a}else{t+="}^{"+a;r=true}}else if(a==="^"){t+="}^{";r=true}else if(r){t+="}\\text{"+a;r=false}else if(a==="$"){t+="\\$"}else{t+=a}}return t+"}}"};const errorMessages=Object.freeze({EN:{ERROR:"Error. Hurmet does not understand the expression.",ERR_FUNC:"@",BAD_FUN_NM:'Error. Unrecognized function name "@".',DIV:"Error. Divide by zero.",NAN:"Error. Value of $@$ is not a numeric.",NANARG:"Error. Argument to function $@$ must be numeric.",NULL:"Error. Missing value for $@$.",BAD_EQ:'Error. Use "==" instead of "=" to check for equality.',V_NAME:"Error. Variable $@$ not found.",F_NAME:"Error. Function @ not found.",NAN_OP:"Error. Arithmetic operation on a non-numeric value.",UNIT_ADD:"Error. Adding incompatible units.",UNIT_COMP:"Error. Comparing incompatible units.",UNIT_APEND:"Error. Apppending incompatible units.",UNIT_RES:"Error. Calculated units are not compatible with the desired result unit:",UNIT_MISS:"Error. No units specified for the result.",UNIT_IN:"Error. Incorrect unit for input to function @.",UNIT_ARG:"Error. Unit mis-match between arguments to function @.",UNIT_COL:"Error. Data frame column @ has no units. Do not make a unit-aware call to it.",UNIT_AWARE:"Error. Calculation must be unit-aware in order to apply unit @",DATE:"Error. Date required.",LOGIC:"Error. Logic operation “@” on a non-boolean value.",FACT:"Error. Factorial may be applied only to a unit-less non-negative integer.",PER:"Error. Percentage may be applied only to a unit-less number.",BINOM:"Error. Binomial may be applied only to unit-less numbers.",LOGF:"Error. Argument to log!() must be a non-negative integer.","Γ0":"Error. Γ(0) is infinite.","ΓPOLE":"Error. Γ() of a negative integer is infinite.","LOGΓ":"Error. Argument to Hurmet lgamma() must be a positive number.",TAN90:"Error. tan($@$) is infinite.",ATRIG:"Error. Input to @ must be between -1 and 1.",COT:"Error. Input to @ must not be zero.",ASEC:"Error. Absolute value of input to @ must be ≥ 1",STRING:"Error. Text operand required.",NUMARGS:"Error. Wrong number of arguments passed to function @.",NONSQUARE:"Error. Only a square matrix can be inverted.",SINGULAR:"Error. Matrix is singular and cannot be inverted.",BAD_ROW_NAME:"Error. Data frame does not have a row named @.",BAD_COLUMN_NAME:"Error. Data frame does not have a column named @.",SINGLE_ARG:"Error. A call to a data frame must have two arguments in the brackets.",BAD_TYPE:"Error. Unrecognized data type for $@$.",CONCAT:'Error. Cannot add strings. Use "&" if concatenation is desired.',MATRIX_DIV:"Error. Cannot divide one matrix by another.",MATRIX_MOD:"Error. Cannot take the modulo of one matrix by another.",BAD_INDEX:"Error. Index to a matrix must be numeric.",FUNC_LINE:"Error in function @.",BAD_BREAK:"Error in function @. break called outside of a loop",FETCH:"Error. A fetch() function must be the only item in its expression.",STR_INDEX:"Error. The index to text may be only a real number or a range.",UNIT_NAME:"Error. Unrecognized unit name: @",INT_NUM:'Error. Number display type "@" must be an integer.',TWO_MAPS:"Error. Both operands are maps. Hurmet accepts only one.",BAD_FORMAT:"Error. Invalid format @.",BAD_PREC:"Error. Significant digit specification must be between 1 and 15.",ZERO_ROOT:"Error. Zeroth root.",BAD_ROOT:"Error while taking root.",UNREAL:'Error. Argument to function "@" must be a real number.',BIGINDEX:"Error. Index too large.",MIS_ELNUM:"Error. Mis-matched number of elements",CROSS:"Error. Cross product can be performed only on three-vectors. Use * if you want element-wise multiplication.",QUANT_NUM:"Error. A Quantity must include a numeric magnitude.",CURRENCY:"Error. Currency exchange rates must be defined before using a monetary unit.",DF_UNIT:'Invalid unit "&" in data frame.',FORM_FRAC:"Error. Hurmet can do binary or hexadecimal format only on integers.",PRIVATE:"Error. Function @ is not private.",INT_ARG:"Error. The @ function can take only integers as arguments.",BAD_KEY:'Error. Data structure does not contain key "@".',NUM_KEY:"Error. A key must be a string, not a number.",IMMUT_UDF:`Error. Variable @ already contains a user-defined function.\n                Hurmet cannot assign a different value to @.`,NO_PROP:`Error. Cannot call a property from variable "@" because it has no properties.`,NOT_ARRAY:`Error. Cannot The second operand is not an array.`,MULT_MIS:"Error. Mismatch in number of multiple assignment.",COUNT:"Error. The count() function works only on strings.",NOT_VECTOR:"Error. Arguments to dataframe() must be vectors.",BAD_DISPLAY:"Error. Result may not be suppressed. Use '?' display selector.",NA_COMPL_OP:'Error. "@" cannot be performed on a complex number.',NA_REAL:'Error. "@" can be performed only a complex number.',ORIGIN:'Error. Function "@" is undefined at the origin.',LOG_ZERO:"Error. Logarithm of zero is negative infinity.",END_MISS:"Error. Too few END statments in function @.",BAD_CONCAT:"Error. Unmatched dimensions.",BAD_KEYSTR:"Error. The key in a key:value pair must be a string.",BAD_APPEND:"Error. Can not append a @",MAP_APPEND:"Error. Can not append. Wrong data type.",BAD_TRANS:"Error. Only a matrix can be transposed.",BAD_ARGS:"Error. Wrong number of arguments to function @"}});const errorOprnd=(e,t)=>{if(e===""){return{value:"Error",unit:null,dtype:dt.ERROR}}let r=errorMessages["EN"][e];if(r===undefined){return{value:"Error",unit:null,dtype:dt.ERROR}}if(t){t=addTextEscapes(t);r=r.replace(/@/g,t)}else{r=r.replace(/@ ?/,"")}return{value:r,unit:null,dtype:dt.ERROR}};const iZero=BigInt(0);const iOne=BigInt(1);const iTwo=BigInt(2);const zero=[iZero,iOne];const one=[iOne,iOne];const two=[iTwo,iOne];const pi$1=[BigInt(3141592653589793e34),BigInt(1e49)];const e$1=[BigInt(2718281828459045e42),BigInt(1e57)];const hbar=[BigInt(1054571817),BigInt(1e43)];const intAbs=e=>e>=iZero?e:BigInt(-1)*e;const numberPattern="^(-?)(?:(0x[0-9A-Fa-f]+)|([0-9]+)(?: ([0-9]+)\\/([0-9]+)|(?:\\.([0-9]+))?(?:e([+-]?[0-9]+)|(%))?))";const numberRegEx=new RegExp(numberPattern);const fromNumber=e=>{if(Number.isInteger(e)){return[BigInt(e),iOne]}else{const t=e.toExponential().match(numberRegEx);const r=t[6]||"";const n=BigInt(t[7])-BigInt(r.length);if(n<0){return[BigInt(t[1]+t[3]+r),BigInt(10)**-n]}else if(t[5]){const e=BigInt(t[5]);return normalize([BigInt(t[1]+t[3])*e+BigInt(t[4])])}else{return normalize([BigInt(t[1]+t[3]+r)*BigInt(10)**n,iOne])}}};const fromString=e=>{const t=e.match(numberRegEx);let r;if(t[5]){const e=BigInt(t[5]);const n=BigInt(t[1]+t[3])*e+BigInt(t[4]);r=normalize([n,e])}else if(t[2]){r=[BigInt(t[2]),iOne]}else{const e=t[6]||"";const n=BigInt(t[3]+e);const a=t[7]?BigInt(t[7])-BigInt(e.length):t[8]?BigInt(-2)-BigInt(e.length):BigInt(0)-BigInt(e.length);r=a<0?[n,BigInt(10)**-a]:normalize([n*BigInt(10)**a,iOne])}if(t[1]){r=negate(r)}return r};const gcdi=(e,t)=>{e=intAbs(e);t=intAbs(t);while(t!==iZero){const r=e%t;e=t;t=r}return e};const gcd=(e,t)=>{if(!Rnl.isInteger(e)||!Rnl.isInteger(t)){return errorOprnd("INT_ARG","gcd")}return[gcdi(e[0]/e[1],t[0]/t[1]),iOne]};const normalize=e=>{const[t,r]=e;if(r===iOne){return e}const n=gcdi(t,r);return n===iOne?e:[t/n,r/n]};const isRational=e=>Array.isArray(e)&&e.length===2&&typeof e[0]==="bigint"&&typeof e[1]==="bigint";const isInteger=e=>e[1]===iOne||e[0]%e[1]===iZero;const isZero=e=>e[0]===iZero;const isNegative=e=>e[0]<iZero;const isPositive=e=>e[0]>iZero;const negate=e=>[BigInt(-1)*e[0],e[1]];const abs=e=>{const t=e[0]<iZero?BigInt(-1)*e[0]:e[0];return[t,e[1]]};const increment=e=>[e[0]+e[1],e[1]];const decrement=e=>[e[0]-e[1],e[1]];const floor=e=>{if(e[0]%e[1]===iZero){return[e[0]/e[1],iOne]}return e[0]>=iZero?[e[0]/e[1],iOne]:[e[0]/e[1]-iOne,iOne]};const ceil=e=>{if(e[0]%e[1]===iZero){return[e[0]/e[1],iOne]}return e[0]>=iZero?[e[0]/e[1]+iOne,iOne]:[e[0]/e[1],iOne]};const add=(e,t)=>e[1]===t[1]?[e[0]+t[0],e[1]]:normalize([e[0]*t[1]+t[0]*e[1],e[1]*t[1]]);const subtract=(e,t)=>e[1]===t[1]?[e[0]-t[0],e[1]]:normalize([e[0]*t[1]-t[0]*e[1],e[1]*t[1]]);const multiply=(e,t)=>[e[0]*t[0],e[1]*t[1]];const divide=(e,t)=>{let r=e[0]*t[1];let n=e[1]*t[0];if(n<0){r*=BigInt(-1);n*=BigInt(-1)}return[r,n]};const power=(e,t)=>{if(t[0]===iZero){return[iOne,iOne]}else{t=normalize(t);let r;try{r=isInteger(t)&&isNegative(t)?[e[1]**(BigInt(-1)*t[0]),e[0]**(BigInt(-1)*t[0])]:isInteger(t)?[e[0]**t[0],e[1]**t[0]]:isPositive(e)||greaterThan(t,one)||lessThan(t,negate(one))?fromNumber(toNumber(e)**toNumber(t)):areEqual(mod(t,two),one)?fromNumber(-1*(-1*toNumber(e))**toNumber(t)):errorOprnd("BAD_ROOT")}catch(n){r=fromNumber(toNumber(e)**toNumber(t))}return r}};const sqrt=e=>fromNumber(Math.sqrt(toNumber(e)));const exp=e=>fromNumber(Math.exp(toNumber(e)));const reciprocal=e=>{let t=e[1];let r=e[0];if(r<0){t*=BigInt(-1);r*=BigInt(-1)}return[t,r]};const hypot=(e,t)=>{const r=abs(e);const n=abs(t);const a=max(r,n);const o=min(r,n);const i=Rnl.divide(o,a);return Rnl.multiply(a,sqrt(Rnl.increment(Rnl.multiply(i,i))))};const mod=(e,t)=>{const r=divide(normalize(e),normalize(t));return[intAbs(r[0]%r[1]),iOne]};const rem=(e,t)=>{const r=divide(normalize(e),normalize(t));return[r[0]%r[1],iOne]};const areEqual=(e,t)=>e[1]===t[1]?e[0]===t[0]:e[0]*t[1]===e[1]*t[0];const lessThan=(e,t)=>isNegative(e)!==isNegative(t)?isNegative(e):isNegative(subtract(e,t));const greaterThan=(e,t)=>isPositive(e)!==isPositive(t)?isPositive(e):isPositive(subtract(e,t));const lessThanOrEqualTo=(e,t)=>lessThan(e,t)||areEqual(e,t);const greaterThanOrEqualTo=(e,t)=>greaterThan(e,t)||areEqual(e,t);const max=(e,t)=>greaterThan(e,t)?[e[0],e[1]]:[t[0],t[1]];const min=(e,t)=>lessThan(e,t)?[e[0],e[1]]:[t[0],t[1]];const cos=e=>areEqual(e,divide(pi$1,two))?zero:fromNumber(Math.cos(toNumber(e)));const sin=e=>fromNumber(Math.sin(toNumber(e)));const tan=e=>{if(areEqual(e,divide(pi$1,two))){return errorOprnd("TAN90","π/2")}return fromNumber(Math.tan(toNumber(e)))};const cosh=e=>{const t=toNumber(e);return fromNumber((Math.exp(t)+Math.exp(-t))/2)};const sinh=e=>{const t=toNumber(e);return fromNumber((Math.exp(t)-Math.exp(-t))/2)};const tanh=e=>{const t=toNumber(e);return fromNumber((Math.exp(t)-Math.exp(-t))/(Math.exp(t)+Math.exp(-t)))};const toNumber=e=>{const t=Number(e[0])/Number(e[1]);if(!isNaN(t)&&t!==Infinity){return t}const r=toStringSignificant(e,20);return Number(r)};const toStringSignificant=(e,t)=>{if(isZero(e)){return"0"}else{const r=intAbs(e[0]/e[1]);if(r>0){return toString(e,t-String(r).length)}else{const r=String(intAbs(e[1]/e[0])).length;return toString(e,r+t-1)}}};const toString=(e,t)=>{if(isZero(e)){return"0"}else if(t<0){const r=-t;const n=toString(divide(e,[BigInt(10)**BigInt(r),iOne]),0);return n+"0".repeat(r)}else{const[r,n]=normalize(e);const a=r/n;let o=r%n;let i=String(a);if(o===iZero&&t>0){i+="."+"0".repeat(t)}else if(o!==iZero){o=intAbs(o);const e=o*BigInt(10)**BigInt(t);let r=e/n;const s=e%n;if(t===0){return intAbs(iTwo*s)>=intAbs(n)?String(a+iOne):i}if(intAbs(iTwo*s)>=intAbs(n)){r=r+iOne}i+="."+String(r).padStart(t,"0")}return i}};const preComputedFactorials=["1","1","2","6","24","120","720","5040","40320","362880","3628800","39916800","479001600","6227020800","87178291200","1307674368000","20922789888000","355687428096000","6402373705728000","121645100408832000","2432902008176640000","51090942171709440000","1124000727777607680000","25852016738884976640000","620448401733239439360000","15511210043330985984000000","403291461126605635584000000","10888869450418352160768000000","304888344611713860501504000000","8841761993739701954543616000000","265252859812191058636308480000000","8222838654177922817725562880000000","263130836933693530167218012160000000","8683317618811886495518194401280000000","295232799039604140847618609643520000000","10333147966386144929666651337523200000000","371993326789901217467999448150835200000000","13763753091226345046315979581580902400000000","523022617466601111760007224100074291200000000","20397882081197443358640281739902897356800000000","815915283247897734345611269596115894272000000000","33452526613163807108170062053440751665152000000000","1405006117752879898543142606244511569936384000000000","60415263063373835637355132068513997507264512000000000","2658271574788448768043625811014615890319638528000000000","119622220865480194561963161495657715064383733760000000000","5502622159812088949850305428800254892961651752960000000000","258623241511168180642964355153611979969197632389120000000000","12413915592536072670862289047373375038521486354677760000000000","608281864034267560872252163321295376887552831379210240000000000","30414093201713378043612608166064768844377641568960512000000000000","1551118753287382280224243016469303211063259720016986112000000000000","80658175170943878571660636856403766975289505440883277824000000000000","4274883284060025564298013753389399649690343788366813724672000000000000","230843697339241380472092742683027581083278564571807941132288000000000000","12696403353658275925965100847566516959580321051449436762275840000000000000","710998587804863451854045647463724949736497978881168458687447040000000000000","40526919504877216755680601905432322134980384796226602145184481280000000000000","2350561331282878571829474910515074683828862318181142924420699914240000000000000","138683118545689835737939019720389406345902876772687432540821294940160000000000000","8320987112741390144276341183223364380754172606361245952449277696409600000000000000","507580213877224798800856812176625227226004528988036003099405939480985600000000000000","31469973260387937525653122354950764088012280797258232192163168247821107200000000000000","1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000","126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000","8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000","544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000","36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000","2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000","171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000","11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000","850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000","61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000","4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000","330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000","24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000","1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000","145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000","11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000","894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000","71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000","5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000","475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000","39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000","3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000","281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000","24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000","2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000","185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000","16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000","1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000","135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000","12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000","1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000","108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000","10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000","991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000","96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000","9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000","933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000","93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"];const factorial=e=>{if(lessThan(e,[BigInt(101),iOne])){return fromString(preComputedFactorials[toNumber(e)])}else{return lanczos(increment(e))}};const lanczos=e=>{const t=subtract(e,one);const r=multiply(two,sqrt(divide(e$1,pi$1)));const n=power(divide(add(t,fromNumber(11.400511)),e$1),add(t,[iOne,iTwo]));const a=["2.48574089138753565546e-5","1.05142378581721974210","-3.45687097222016235469","4.51227709466894823700","-2.98285225323576655721","1.05639711577126713077","-0.195428773191645869583","0.0170970543404441224307","-0.000571926117404305781283","0.00000463399473359905636708","-0.00000000271994908488607703910"];let o=fromString(a[0]);for(let e=1;e<=10;e++){o=add(o,divide(fromString(a[e]),add(t,fromNumber(e))))}return multiply(multiply(r,n),o)};const Rnl=Object.freeze({fromNumber:fromNumber,fromString:fromString,normalize:normalize,isRational:isRational,isInteger:isInteger,isZero:isZero,isNegative:isNegative,isPositive:isPositive,negate:negate,abs:abs,increment:increment,decrement:decrement,exp:exp,floor:floor,ceil:ceil,add:add,subtract:subtract,multiply:multiply,divide:divide,reciprocal:reciprocal,gcd:gcd,hbar:hbar,mod:mod,rem:rem,hypot:hypot,one:one,pi:pi$1,power:power,sqrt:sqrt,two:two,cos:cos,sin:sin,tan:tan,cosh:cosh,sinh:sinh,tanh:tanh,areEqual:areEqual,lessThan:lessThan,greaterThan:greaterThan,lessThanOrEqualTo:lessThanOrEqualTo,greaterThanOrEqualTo:greaterThanOrEqualTo,factorial:factorial,lanczos:lanczos,max:max,min:min,numberPattern:numberPattern,toNumber:toNumber,toString:toString,toStringSignificant:toStringSignificant,zero:zero});const siPrefixes=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];const groupByThreeRegEx=/\B(?=(\d{3})+$)/g;const groupByFourRegEx=/\B(?=(\d{4})+$)/g;const groupByLakhCroreRegEx=/(\d)(?=(\d\d)+\d$)/g;const formatRegEx=/^([beEfhkmprsStx%])?(-?[\d]+)?([i∠°])?$/;const superscript$1=e=>{let t="";for(let r=0;r<e.length;r++){const n=e.charCodeAt(r);t+=n===49?"¹":n===50?"²":n===51?"³":String.fromCharCode(n+8256)}return t};const subscript=e=>{let t="";for(let r=0;r<e.length;r++){t+=String.fromCharCode(e.charCodeAt(r)+8272)}return t};const texFromMixedFraction=e=>(e[1]?"-":"")+e[3]+"\\,\\class{special-fraction}{\\text{"+superscript$1(e[4])+"⁄"+subscript(e[5])+"}}";const intAbs$1=e=>e>=BigInt(0)?e:BigInt(-1)*e;const roundedString=(e,t)=>{const r=t.numDigits;switch(t.ftype){case"h":{const t=String(Rnl.toString(e,0));if(t.replace("-","").length>=r){return t}if(r<1||r>15){return errorOprnd("BAD_PREC")}return Rnl.toNumber(e).toPrecision(r)}case"f":case"%":return Rnl.toString(e,r);case"r":case"p":{if(r<1||r>15){return errorOprnd("BAD_PREC")}const t=Rnl.toNumber(e).toPrecision(r);return t.indexOf("e")>-1?Number(t).toPrecision():t}case"s":case"S":case"e":case"E":case"n":case"N":case"k":if(r<1||r>15){return errorOprnd("BAD_PREC")}return Rnl.toNumber(e).toExponential(r-1).replace("+","");default:{e=Rnl.normalize(e);const r=Rnl.isNegative(e)?"-":"";const n=intAbs$1(e[0]);const a=e[1];switch(t.ftype){case"m":{const e=String(n/a);const t=n%a;return r+e+" "+superscript$1(t)+"⁄"+subscript(a)}case"t":return r+String(n/a);case"b":case"x":case"X":if(a!==BigInt(1)){return errorOprnd("INT_NUM",t.ftype)}if(n<=Number.MAX_SAFE_INTEGER){return t.ftype==="b"?r+"0b"+Number(n).toString(2):t.ftype==="x"?r+"0x"+Number(n).toString(16):r+"0x"+Number(n).toString(16).toUpperCase()}else{return""}}}}};const formattedInteger=(e,t)=>{const r=t.charAt(1);if(r==="0"){return e}else if(t==="1,00,000."){return e.replace(groupByLakhCroreRegEx,"$1{,}")}else if(t==="1,0000,0000."){return e.replace(groupByFourRegEx,"$1{,}")}else{return e.replace(groupByThreeRegEx,r===","?"{,}":r===" "?"\\:":r==="’"?"’":".")}};const formattedDecimal=(e,t,r)=>{const n=e.indexOf(".");if(n===-1){return formattedInteger(e,t)}else{const a=e.slice(0,n);const o=t.slice(-1);let i=(o==="."?".":"{,}")+e.slice(n+1);if(r){i=i.replace(/(\.|{,})?0+$/,"")}return formattedInteger(a,t)+i}};const parseFormatSpec=e=>{const t=formatRegEx.exec(e);if(!t){const t=errorOprnd("BAD_FORMAT",e).value;return[e,undefined,dt.ERROR,"\\text{"+t+"}"]}let r=t[1]||"h";let n=Number(t[2]||"15");const a=t[3]||"";switch(r){case"b":case"x":case"X":return[e,undefined,dt.STRING,"\\text{"+r+a+"}"];case"t":n=0;break;case"f":case"%":break;default:if(n<1||n>15){const t="\\text{"+errorOprnd("BAD_PREC").value+"}";return[e,undefined,dt.ERROR,t]}}if(r==="%"){r="\\%"}return[e,undefined,dt.STRING,"\\text{"+r+String(n)+a+"}"]};const format=(e,t="h3",r="1,000,000.")=>{if(Rnl.isZero(e)){return"0"}const n={ftype:t.charAt(0)};if(/[i∠°]$/.test(t)){t=t.slice(0,-1)}if(t.length>1){n.numDigits=Number(t.slice(1))}if(n.ftype==="%"||n.ftype==="p"){e[0]=e[0]*BigInt(100)}if((n.ftype==="b"||n.ftype==="x")&&!Rnl.isInteger(e)){return errorOprnd("FORM_FRAC")}const a=roundedString(e,n);switch(n.ftype){case"f":case"r":case"h":return formattedDecimal(a,r,n.ftype==="h");case"t":return formattedInteger(a,r);case"%":case"p":return formattedDecimal(a,r)+"\\%";case"m":case"b":case"x":case"X":return a;default:{const e=a.indexOf("e");let t=a.slice(0,e);if(r.slice(-1)===","){t=t.replace(".","{,}")}switch(n.ftype){case"e":case"E":{const r=t+"\\text{"+n.ftype;if(a.charAt(e+1)==="-"){return r+"-}"+a.slice(e+2)}else{return r+"}"+a.slice(e+1)}}case"s":case"S":case"n":case"N":{const r=n.ftype==="S"?"×":"\\mkern2mu{\\cdot}\\mkern1mu";return t+r+"10^{"+a.slice(e+1)+"}"}case"k":{const r=Number(a.slice(e+1));const n=r/3;const o=n>=0?Math.floor(n):Math.ceil(n);const i=r%3;if(i!==0){t=String(Number(t)*Math.pow(10,i))}return t+siPrefixes[8+o]}}}}};const unitsAreCompatible=(e,t)=>{if(e==null&&t==null){return true}if(e==null||t==null){return false}if(!Array.isArray(e)||!Array.isArray(t)){return false}if(e.length!==t.length){return false}for(let r=0;r<e.length;++r){if(e[r]!==t[r]){return false}}return true};const prefixFactor=JSON.parse('{"Y":1e24,"yotta":1e24,"Z":1e21,"zetta":1e21,"E":1e18,"exa":1e18,"P":1e15,"peta":1e15,"T":1e12,"tera":1e12,"G":1e9,"giga":1e9,"M":1e6,"mega":1e6,"k":1000,"kilo":1000,"h":100,"hecto":100,"deka":10,"d":0.1,"deci":0.1,"c":0.01,"centi":0.01,"m":0.001,"milli":0.001,"µ":1e-6,"µ":1e-6,"micro":1e-6,"n":1e-9,"nano":1e-9,"p":1e-12,"pico":1e-12,"f":1e-15,"femto":1e-15,"a":1e-18,"atto":1e-18,"z":1e-21,"zepto":1e-21,"y":1e-24,"yocto":1e-24,"Ki":1024,"kibi":1024,"Mi":1048576,"mebi":1048576,"Gi":1073741824,"gibi":1073741824,"Ti":1099511627776,"tebi":1099511627776}');const unitTable=Object.freeze(JSON.parse(`{\n"#":["0.45359237", "1","0","0",[0,1,0,0,0,0,0,0]],\n"$":["1","1","0","USD",[0,0,0,0,0,0,0,1]],\n"£":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"'":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"A":["1","1","0","siSymbol",[0,0,0,1,0,0,0,0]],\n"AUD":["1.6664","1","0","AUD",[0,0,0,0,0,0,0,1]],\n"Adobe point":["0.0254","72","0","0",[1,0,0,0,0,0,0,0]],\n"At":["1","1","0","siSymbol",[0,0,0,0,1,0,1,0]],\n"Australian dollar":["1","1","0","AUD",[0,0,0,0,0,0,0,1]],\n"BRL":["5.4872","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"BTU":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],\n"BThU":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],\n"Bq":["1","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],\n"Brazilian Real":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"British Pound":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"Btu":["1055.056","1","0","0",[2,1,-2,0,0,0,0,0]],\n"C":["1","1","0","siSymbol",[0,0,1,1,0,0,0,0]],\n"C$":["1","1","0","CAD",[0,0,0,0,0,0,0,1]],\n"CAD":["1.4981","1","0","CAD",[0,0,0,0,0,0,0,1]],\n"CCF":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"CHF":["0.9839","1","0","CHF",[0,0,0,0,0,0,0,1]],\n"CNY":["7.5979","1","0","CNY",[0,0,0,0,0,0,0,1]],\n"CY":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],\n"Calorie":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],\n"Canadian dollar":["1","1","0","CAD",[0,0,0,0,0,0,0,1]],\n"Celsius":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],\n"Chinese Yuan":["1","1","0","CNY",[0,0,0,0,0,0,0,1]],\n"Ci":["37000000000","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],\n"Ckm":["100000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"Da":["1.66053872e-24","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"Dalton":["1.66053872e-24","1","0","0",[0,1,0,0,0,0,0,0]],\n"Didot point":["15.625","41559","0","0",[1,0,0,0,0,0,0,0]],\n"EB":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"EMU":["0.01","360000","0","0",[1,0,0,0,0,0,0,0]],\n"EUR":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"EiB":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"Euro":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"F":["1","1","0","siSymbol",[-2,-1,4,2,0,0,0,0]],\n"Fahrenheit":["5","9","459","0",[0,0,0,0,1,0,0,0]],\n"G":["0.0001","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"GB":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],\n"GBP":["0.88050","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"Gal":["0.01","1","0","siSymbol",[1,0,-2,0,0,0,0,0]],\n"Gi":["10","12.5663706143592","0","siWord",[0,0,0,0,1,0,1,0]],\n"GiB":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],\n"Gregorian year":["31556952","1","0","0",[0,0,1,0,0,0,0,0]],\n"Gy":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"H":["1","1","0","siSymbol",[2,1,-2,-2,0,0,0,0]],\n"HK$":["1","1","0","HKD",[0,0,0,0,0,0,0,1]],\n"HKD":["8.6199","1","0","HKD",[0,0,0,0,0,0,0,1]],\n"HP":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"Hong Kong dollar":["1","1","0","HKD",[0,0,0,0,0,0,0,1]],\n"Hz":["1","1","0","siSymbol",[0,0,-1,0,0,0,0,0]],\n"ILS":["3.9939","1","0","ILS",[0,0,0,0,0,0,0,1]],\n"INR":["89.8555","1","0","INR",[0,0,0,0,0,0,0,1]],\n"Indian Rupee":["1","1","0","INR",[0,0,0,0,0,0,0,1]],\n"Israeli New Shekel":["1","1","0","ILS",[0,0,0,0,0,0,0,1]],\n"J":["1","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],\n"JPY":["149.35","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"Japanese Yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"Joule":["1","1","0","0",[2,1,-2,0,0,0,0,0]],\n"Julian year":["31557600","1","0","0",[0,0,1,0,0,0,0,0]],\n"Jy":["1e-26","1","0","siSymbol",[0,1,-2,0,0,0,0,0]],\n"K":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"KiB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"KRW":["1470.89","1","0","KRW",[0,0,0,0,0,0,0,1]],\n"L":["0.001","1","0","siSymbol",[3,0,0,0,0,0,0,0]],\n"Lego stud":["0.008","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"MB":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],\n"MCM":["5.06707479097497e-07","1","0","0",[2,0,0,0,0,0,0,0]],\n"MMBtu":["1055056000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"MMbbl":["158987.294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"MMbblpd":["158987.294928","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"MMscf":["28316.846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"MMscfd":["0.32774128","1","0","0",[3,0,0,0,0,0,0,0]],\n"MT":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"MXN":["19.8182","1","0","MXN",[0,0,0,0,0,0,0,1]],\n"Mach":["331.6","1","0","0",[1,0,-1,0,0,0,0,0]],\n"Mbbl":["158.987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"Mexican Peso":["1","1","0","MXN",[0,0,0,0,0,0,0,1]],\n"MiB":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],\n"Mscfd":["0.00032774128","1","0","0",[3,0,0,0,0,0,0,0]],\n"Mscfh":["0.00786579072","1","0","0",[3,0,0,0,0,0,0,0]],\n"N":["1","1","0","siSymbol",[1,1,-2,0,0,0,0,0]],\n"NM":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"PB":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"PS":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"Pa":["1","1","0","siSymbol",[-1,1,-2,0,0,0,0,0]],\n"Pascal":["1","1","0","siWord",[-1,1,-2,0,0,0,0,0]],\n"Pferdestärke":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"PiB":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"R":["0.000258","1","0","siSymbol",[0,-1,1,1,0,0,0,0]],\n"R$":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"RT":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],\n"RUB":["1","1","0","RUB",[0,0,0,0,0,0,0,1]],\n"S":["1","1","0","siSymbol",[-2,-1,3,2,0,0,0,0]],\n"SF":["0.09290304","1","0","0",[2,0,0,0,0,0,0,0]],\n"SY":["0.83612736","1","0","0",[2,0,0,0,0,0,0,0]],\n"Sv":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"Swiss Franc":["1","1","0","CHF",[0,0,0,0,0,0,0,1]],\n"T":["1","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"TB":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"TWD":["1","1","0","TWD",[0,0,0,0,0,0,0,1]],\n"TeX point":["0.0003515","1","0","0",[1,0,0,0,0,0,0,0]],\n"TiB":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"US$":["1","1","0","USD",[0,0,0,0,0,0,0,1]],\n"USD":["1.0981","1","0","USD",[0,0,0,0,0,0,0,1]],\n"V":["1","1","0","siSymbol",[2,1,-3,-1,0,0,0,0]],\n"VA":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],\n"W":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],\n"Wb":["1","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],\n"Wh":["3600","1","0","siSymbol",[2,1,-2,0,0,0,0,0]],\n"Won":["1","1","0","KRW",[0,0,0,0,0,0,0,1]],\n"Yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"a":["31556925.9747","1","0","siSymbol",[0,0,1,0,0,0,0,0]],\n"ac":["4046.8564224","1","0","0",[2,0,0,0,0,0,0,0]],\n"acre":["4046.8564224","1","0","0",[2,0,0,0,0,0,0,0]],\n"admiralty mile":["1853.188","1","0","0",[1,0,0,0,0,0,0,0]],\n"af":["1233.48183754752","1","0","0",[3,0,0,0,0,0,0,0]],\n"amp":["1","1","0","0",[0,0,0,1,0,0,0,0]],\n"ampere":["1","1","0","siWord",[0,0,0,1,0,0,0,0]],\n"ampere turn":["1","1","0","siWord",[0,0,0,0,1,0,1,0]],\n"amu":["1.66053872e-24","1","0","0",[0,1,0,0,0,0,0,0]],\n"angstrom":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0]],\n"angstrom star":["0.00000000010000015","1","0","0",[1,0,0,0,0,0,0,0]],\n"apostilb":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"arcminute":["3.14159265358979","10800","0","0",[0,0,0,0,0,0,0,0]],\n"arcsecond":["3.14159265358979","648000","0","0",[0,0,0,0,0,0,0,0]],\n"are":["100","1","0","0",[2,0,0,0,0,0,0,0]],\n"as":["4.3.14159265358979","648000","0","0",[0,0,0,0,0,0,0,0]],\n"asb":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"assay ton":["0.0875","3","0","0",[0,1,0,0,0,0,0,0]],\n"astronomical unit":["149597870691","1","0","0",[1,0,0,0,0,0,0,0]],\n"atmosphere":["101325","1","0","siSymbol",[-1,1,-2,0,0,0,0,0]],\n"au":["149597870691","1","0","0",[1,0,0,0,0,0,0,0]],\n"bar":["100000","1","0","siWord",[-1,1,-2,0,0,0,0,0]],\n"barg":["100000","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"barleycorn":["0.0254","3","0","0",[1,0,0,0,0,0,0,0]],\n"barrel":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"barrel bulk":["0.14158423296","1","0","0",[3,0,0,0,0,0,0,0]],\n"basis point":["0.0001","1","0","0",[0,0,0,0,0,0,0,0]],\n"baud":["1","1","0","siSymbol",[0,0,-1,0,0,1,0,0]],\n"bbl":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"becquerel":["1","1","0","siWord",[0,0,-1,0,0,0,0,0]],\n"beer barrel":["0.119240471196","1","0","0",[3,0,0,0,0,0,0,0]],\n"bit":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"blink":["0.864","1","0","0",[0,0,1,0,0,0,0,0]],\n"bo":["0.158987294928","1","0","0",[3,0,0,0,0,0,0,0]],\n"boe":["6119000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"boiler horsepower":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],\n"bpd":["0.158987294928","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"bph":["0.158987294928","3600","0","0",[3,0,-1,0,0,0,0,0]],\n"breadth":["0.2286","1","0","0",[1,0,0,0,0,0,0,0]],\n"bushel":["0.03523907016688","1","0","0",[3,0,0,0,0,0,0,0]],\n"byte":["8","1","0","0",[0,0,0,0,0,1,0,0]],\n"caballo de vapor":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"cal":["4.1868","1","0","0",[2,1,-2,0,0,0,0,0]],\n"calorie":["4.1868","1","0","siWord",[2,1,-2,0,0,0,0,0]],\n"candela":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"candlepower":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"carat":["0.00002","1","0","0",[0,1,0,0,0,0,0,0]],\n"cc":["0.000001","1","0","0",[3,0,0,0,0,0,0,0]],\n"cd":["1","1","0","siSymbol",[0,0,0,0,0,0,1,0]],\n"centipoise":["0.001","1","0","0",[-1,1,-1,0,0,0,0,0]],\n"centistoke":["0.000001","1","0","0",[2,0,-1,0,0,0,0,0]],\n"cfm":["0.0004719474432","1","0","0",[3,0,-1,0,0,0,0,0]],\n"cfs":["0.028316846592","1","0","0",[3,0,-1,0,0,0,0,0]],\n"ch":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"chain":["20.116","1","0","0",[1,0,0,0,0,0,0,0]],\n"cheval vapeur":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"cmil":["5.06707479097497e-10","1","0","0",[2,0,0,0,0,0,0,0]],\n"cmm":["0.00001","1","0","0",[1,0,0,0,0,0,0,0]],\n"constant":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"coulomb":["1","1","0","siWord",[0,0,1,1,0,0,0,0]],\n"cp":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"cps":["1","1","0","0",[0,0,-1,0,0,0,0,0]],\n"cu ft":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"cu in":["0.000016387064","1","0","0",[3,0,0,0,0,0,0,0]],\n"cu yd":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],\n"cubic meter":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"cubic metre":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"cup":["0.0002365882365","1","0","0",[3,0,0,0,0,0,0,0]],\n"curie":["37000000000","1","0","siWord",[0,0,-1,0,0,0,0,0]],\n"cv":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"cy":["0.764554857984","1","0","0",[3,0,0,0,0,0,0,0]],\n"d":["86400","1","0","0",[0,0,1,0,0,0,0,0]],\n"daN":["10","1","0","0",[1,1,-2,0,0,0,0,0]],\n"darcy":["0.0000000000009869233","1","0","0",[2,0,0,0,0,0,0,0]],\n"day":["86400","1","0","0",[0,0,1,0,0,0,0,0]],\n"deg":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"degree":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"dekan":["31.4159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"diopter":["1","1","0","0",[-1,0,0,0,0,0,0,0]],\n"dioptre":["1","1","0","0",[-1,0,0,0,0,0,0,0]],\n"dollar":["1","1","0","USD",[0,0,0,0,0,0,0,1]],\n"drum":["0.20819764812","1","0","0",[3,0,0,0,0,0,0,0]],\n"dscf":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"dyn":["0.00001","1","0","0",[1,1,-2,0,0,0,0,0]],\n"dyne":["0.00001","1","0","0",[1,1,-2,0,0,0,0,0]],\n"eV":["1.602176462e-19","1","0","0",[2,1,-2,0,0,0,0,0]],\n"electric horsepower":["746","1","0","0",[2,1,-3,0,0,0,0,0]],\n"electrical horsepower":["746","1","0","0",[2,1,-3,0,0,0,0,0]],\n"electron volt":["1.602176462e-19","1","0","0",[2,1,-2,0,0,0,0,0]],\n"erg":["0.0000001","1","0","0",[2,1,-2,0,0,0,0,0]],\n"euro":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"exabyte":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"exbibyte":["9223372036854770000","1","0","0",[0,0,0,0,0,1,0,0]],\n"farad":["1","1","0","siWord",[-2,-1,4,2,0,0,0,0]],\n"faraday":["96485.339924","1","0","0",[0,0,1,1,0,0,0,0]],\n"fathom":["1.8288","1","0","0",[1,0,0,0,0,0,0,0]],\n"fc":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],\n"feet":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"fermi":["0.000000000000001","1","0","siWord",[1,0,0,0,0,0,0,0]],\n"fl oz":["0.003785411784","128","0","0",[3,0,0,0,0,0,0,0]],\n"flop":["1","1","0","0",[0,0,-1,0,0,0,0,0]],\n"fluid ounce":["0.003785411784","128","0","0",[3,0,0,0,0,0,0,0]],\n"food calorie":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],\n"foot":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"footcandle":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],\n"footlambert":["1","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"fortnight":["1209600","1","0","0",[0,0,1,0,0,0,0,0]],\n"fps":["0.3048","1","0","0",[1,0,-1,0,0,0,0,0]],\n"franklin":["0.00000000033356","1","0","siWord",[0,0,1,1,0,0,0,0]],\n"ft":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"ft water":["2988.874","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"ftc":["10.7639104167097","1","0","0",[-2,0,0,0,0,0,1,0]],\n"ftl":["3.426259","1","0","0",[-2,0,0,0,0,0,1,0]],\n"furlong":["201.168","1","0","0",[1,0,0,0,0,0,0,0]],\n"g":["0.001","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"gal":["0.003785411784","1","0","0",[3,0,0,0,0,0,0,0]],\n"galileo":["0.01","1","0","siWord",[1,0,-2,0,0,0,0,0]],\n"gallon":["0.003785411784","1","0","0",[3,0,0,0,0,0,0,0]],\n"gauss":["0.0001","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"gigabyte":["8589934592","1","0","0",[0,0,0,0,0,1,0,0]],\n"gilbert":["10","12.5663706143592","0","siWord",[0,0,0,0,1,0,1,0]],\n"gill":["0.003785411784","32","0","0",[3,0,0,0,0,0,0,0]],\n"gon":["3.14159265358979","200","0","0",[0,0,0,0,0,0,0,0]],\n"gongjin":["1","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"gongli":["1000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"gpd":["0.003785411784","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"gph":["0.003785411784","3600","0","0",[3,0,-1,0,0,0,0,0]],\n"gpm":["0.003785411784","60","0","0",[3,0,-1,0,0,0,0,0]],\n"gps":["0.003785411784","1","0","0",[3,0,-1,0,0,0,0,0]],\n"gr":["0.00006479891","1","0","0",[0,1,0,0,0,0,0,0]],\n"grad":["3.14159265358979","200","0","0",[0,0,0,0,0,0,0,0]],\n"grain":["0.00006479891","1","0","0",[0,1,0,0,0,0,0,0]],\n"gram":["0.001","1","0","0",[0,1,0,0,0,0,0,0]],\n"gramme":["0.001","1","0","0",[0,1,0,0,0,0,0,0]],\n"gray":["1","1","0","0",[2,0,-2,0,0,0,0,0]],\n"great year":["814000000000","1","0","0",[0,0,1,0,0,0,0,0]],\n"gsm":["0.001","1","0","0",[-2,1,0,0,0,0,0,0]],\n"gutenberg":["0.0254","7200","0","0",[1,0,0,0,0,0,0,0]],\n"gōngjin":["1","1","0","siSymbol",[0,1,0,0,0,0,0,0]],\n"gōngli":["1000","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"h":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"ha":["10000","1","0","siSymbol",[2,0,0,0,0,0,0,0]],\n"hand":["0.1016","1","0","0",[1,0,0,0,0,0,0,0]],\n"hectare":["10000","1","0","siWord",[2,0,0,0,0,0,0,0]],\n"helek":["10","3","0","0",[0,0,1,0,0,0,0,0]],\n"hemisphere":["6.28318530717959","1","0","0",[0,0,0,0,0,0,0,0]],\n"henrie":["1","1","0","siWord",[2,1,-2,-2,0,0,0,0]],\n"henry":["1","1","0","siWord",[2,1,-2,-2,0,0,0,0]],\n"hertz":["1","1","0","siWord",[0,0,-1,0,0,0,0,0]],\n"hk":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"horsepower":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hour":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"hp":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpE":["746","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpI":["745.69987158227","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpM":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hpS":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],\n"hr":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"in":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"in Hg":["3863.8","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"inch":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"inche":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"jansky":["1e-26","1","0","0",[0,1,-2,0,0,0,0,0]],\n"jar":["1","900000000","0","0",[-2,-1,4,2,0,0,0,0]],\n"joule":["1","1","0","0",[2,1,-2,0,0,0,0,0]],\n"k":["4448.2216152605","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"kB":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"kairi":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"kanal":["505.8570528","1","0","0",[2,0,0,0,0,0,0,0]],\n"katal":["6.02214179e+23","1","0","siWord",[0,0,-1,0,0,1,0,0]],\n"kcal":["4186.8","1","0","0",[2,1,-2,0,0,0,0,0]],\n"kcmil":["5.06707479097497e-07","1","0","0",[2,0,0,0,0,0,0,0]],\n"keg":["0.058673882652","1","0","0",[3,0,0,0,0,0,0,0]],\n"kelvin":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"kgf":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kilo":["1","1","0","0",[0,1,0,0,0,0,0,0]],\n"kilobyte":["8192","1","0","0",[0,0,0,0,0,1,0,0]],\n"kilogram":["1","1","0","0",[0,1,0,0,0,0,0,0]],\n"kilogramme":["1","1","0","0",[0,1,0,0,0,0,0,0]],\n"kilopond":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kip":["4448.2216152605","1","0","0",[1,1,-2,0,0,0,0,0]],\n"klf":["4448.2216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],\n"kn":["1852","3600","0","0",[1,0,-1,0,0,0,0,0]],\n"knot":["1852","3600","0","0",[1,0,-1,0,0,0,0,0]],\n"kp":["9.80665","1","0","0",[1,1,-2,0,0,0,0,0]],\n"kpf":["4448.2216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],\n"kph":["1000/3600","1","0","0",[1,0,-1,0,0,0,0,0]],\n"kpph":["1000/3600","1","0","0",[-1,1,-3,0,0,0,0,0]],\n"ks":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"ksf":["47880.2589803358","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"ksi":["6894757.29316836","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"kwh":["3600000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"l":["0.001","1","0","siSymbol",[3,0,0,0,0,0,0,0]],\n"lambert":["10000","3.14159265358979","0","0",[-2,0,0,0,0,0,1,0]],\n"lb":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],\n"lbf":["4.4482216152605","1","0","0",[1,1,-2,0,0,0,0,0]],\n"lbm":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],\n"league":["5556","1","0","0",[1,0,0,0,0,0,0,0]],\n"lf":["0.3048","1","0","0",[1,0,0,0,0,0,0,0]],\n"li":["500","1","0","0",[1,0,0,0,0,0,0,0]],\n"light year":["9460730472580800","1","0","0",[1,0,0,0,0,0,0,0]],\n"link":["0.201168","1","0","0",[1,0,0,0,0,0,0,0]],\n"liter":["0.001","1","0","siWord",[3,0,0,0,0,0,0,0]],\n"litre":["0.001","1","0","siWord",[3,0,0,0,0,0,0,0]],\n"lm":["1","1","0","siSymbol",[0,0,0,0,0,0,1,0]],\n"long ton":["1016.0469088","1","0","0",[0,1,0,0,0,0,0,0]],\n"lt":["1016.0469088","1","0","0",[0,1,0,0,0,0,0,0]],\n"ltpd":["0.0117598021851852","1","0","0",[0,1,-1,0,0,0,0,0]],\n"lumen":["1","1","0","siWord",[0,0,0,0,0,0,1,0]],\n"lunar day":["89416.32","1","0","0",[0,0,1,0,0,0,0,0]],\n"lunar month":["2551442.976","1","0","0",[0,0,1,0,0,0,0,0]],\n"lux":["1","1","0","siWord",[-2,0,0,0,0,0,1,0]],\n"lx":["1","1","0","siSymbol",[-2,0,0,0,0,0,1,0]],\n"m":["1","1","0","siSymbol",[1,0,0,0,0,0,0,0]],\n"mD":["9.869233e-16","1","0","0",[2,0,0,0,0,0,0,0]],\n"marathon":["42195","1","0","0",[1,0,0,0,0,0,0,0]],\n"marla":["25.29285264","1","0","0",[2,0,0,0,0,0,0,0]],\n"mas":["3.14159265358979","648000000","0","0",[0,0,0,0,0,0,0,0]],\n"maxwell":["0.00000001","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],\n"mb":["100","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"megabyte":["8388608","1","0","0",[0,0,0,0,0,1,0,0]],\n"megaton TNT":["4184000000000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"megatons TNT":["4184000000000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"megohm":["1000000","1","0","0",[2,1,-3,-2,0,0,0,0]],\n"meter":["1","1","0","siWord",[1,0,0,0,0,0,0,0]],\n"metre":["1","1","0","siWord",[1,0,0,0,0,0,0,0]],\n"metric horsepower":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"metric ton":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"mgd":["3785.411784","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"mho":["1","1","0","0",[-2,-1,3,2,0,0,0,0]],\n"mi":["1609.344","1","0","0",[1,0,0,0,0,0,0,0]],\n"mil":["0.0000254","1","0","0",[1,0,0,0,0,0,0,0]],\n"mile":["1609.344","1","0","0",[1,0,0,0,0,0,0,0]],\n"min":["60","1","0","0",[0,0,1,0,0,0,0,0]],\n"minute":["60","1","0","0",[0,0,1,0,0,0,0,0]],\n"moa":["3.14159265358979","10800","0","0",[0,0,0,0,0,0,0,0]],\n"mol":["6.02214179e+23","1","0","0",[0,0,0,0,0,1,0,0]],\n"mole":["6.02214179e+23","1","0","0",[0,0,0,0,0,1,0,0]],\n"mpg":["1609.344","0.003785411784","0","0",[-2,0,0,0,0,0,0,0]],\n"mph":["0.44704","1","0","0",[1,0,-1,0,0,0,0,0]],\n"mt":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"nautical mile":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"newton":["1","1","0","0",[1,1,-2,0,0,0,0,0]],\n"nit":["1","1","0","0",[-2,0,0,0,0,0,1,0]],\n"ohm":["1","1","0","siWord",[2,1,-3,-2,0,0,0,0]],\n"ounce":["0.45359237","16","0","0",[0,1,0,0,0,0,0,0]],\n"oz":["0.45359237","16","0","0",[0,1,0,0,0,0,0,0]],\n"oz t":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],\n"parsec":["30856780000000000","1","0","0",[1,0,0,0,0,0,0,0]],\n"pc":["0.0254","6","0","0",[1,0,0,0,0,0,0,0]],\n"pcf":["4.4482216152605","0.028316846592","0","0",[-2,1,-2,0,0,0,0,0]],\n"pci":["4.4482216152605","0.000016387064","0","0",[-2,1,-2,0,0,0,0,0]],\n"pebibyte":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"peck":["0.00880976754172","1","0","0",[3,0,0,0,0,0,0,0]],\n"perfect ream":["516","1","0","0",[0,0,0,0,0,1,0,0]],\n"person":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"petabyte":["9007199254740990","1","0","0",[0,0,0,0,0,1,0,0]],\n"pfd":["0.5","1","0","0",[0,1,0,0,0,0,0,0]],\n"pferdestärke":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"pfund":["0.5","1","0","0",[0,1,0,0,0,0,0,0]],\n"phot":["10000","1","0","0",[-2,0,0,0,0,0,1,0]],\n"pica":["0.0254","6","0","0",[1,0,0,0,0,0,0,0]],\n"pied du roi":["9000","27706","0","0",[1,0,0,0,0,0,0,0]],\n"pieze":["1000","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"pint":["0.000473176473","1","0","0",[3,0,0,0,0,0,0,0]],\n"pk":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"platonic year":["814000000000","1","0","0",[0,0,1,0,0,0,0,0]],\n"plf":["4.4482216152605","0.3048","0","0",[0,1,-2,0,0,0,0,0]],\n"point":["0.0254","72","0","0",[1,0,0,0,0,0,0,0]],\n"poise":["0.1","1","0","siWord",[-1,1,-1,0,0,0,0,0]],\n"pound":["0.45359237","1","0","0",[0,1,0,0,0,0,0,0]],\n"poundal":["4.4482216152605","32.174","0","0",[1,1,-2,0,0,0,0,0]],\n"ppm":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"ppmdv":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"ppmv":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"ppmw":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"printer's point":["0.0003515","1","0","0",[1,0,0,0,0,0,0,0]],\n"printer's ream":["516","1","0","0",[0,0,0,0,0,1,0,0]],\n"ps":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"psf":["4.4482216152605","0.09290304","0","0",[-1,1,-2,0,0,0,0,0]],\n"psi":["4.4482216152605","0.00064516","0","0",[-1,1,-2,0,0,0,0,0]],\n"psia":["6894.75729316836","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"psig":["6894.75729316836","1","14.6959","0",[-1,1,-2,0,0,0,0,0]],\n"px":["0.0254","96","0","0",[1,0,0,0,0,0,0,0]],\n"pz":["1000","1","0","0",[-1,1,-2,0,0,0,0,0]],\n"quart":["0.003785411784","4","0","0",[3,0,0,0,0,0,0,0]],\n"quire":["25","1","0","0",[0,0,0,0,0,1,0,0]],\n"rad":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"radian":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"rankin":["5","9","0","0",[0,0,0,0,1,0,0,0]],\n"rd":["0.01","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"real":["1","1","0","BRL",[0,0,0,0,0,0,0,1]],\n"ream":["500","1","0","0",[0,0,0,0,0,1,0,0]],\n"rem":["0.01","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"rev":["6.28318530717959","1","0","0",[0,0,0,0,0,0,0,0]],\n"rod":["5.0292","1","0","0",[1,0,0,0,0,0,0,0]],\n"roentgen":["0.000258","1","0","siWord",[0,-1,1,1,0,0,0,0]],\n"rpm":["6.28318530717959","3600","0","0",[0,0,-1,0,0,0,0,0]],\n"ruble":["1","1","0","RUB",[0,0,0,0,0,0,0,1]],\n"röntgen":["0.000258","1","0","siWord",[0,-1,1,1,0,0,0,0]],\n"s":["1","1","0","siSymbol",[0,0,1,0,0,0,0,0]],\n"saltspoon":["0.003785411784","3072","0","0",[3,0,0,0,0,0,0,0]],\n"scf":["0.028316846592","1","0","0",[3,0,0,0,0,0,0,0]],\n"scfd":["0.028316846592","86400","0","0",[3,0,-1,0,0,0,0,0]],\n"scfh":["0.028316846592","3600","0","0",[3,0,-1,0,0,0,0,0]],\n"scfm":["0.028316846592","60","0","0",[3,0,-1,0,0,0,0,0]],\n"sea mile":["1852","1","0","0",[1,0,0,0,0,0,0,0]],\n"sec":["1","1","0","0",[0,0,1,0,0,0,0,0]],\n"second":["1","1","0","0",[0,0,1,0,0,0,0,0]],\n"section":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],\n"sennight":["604800","1","0","0",[0,0,1,0,0,0,0,0]],\n"sheet":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"short ream":["480","1","0","0",[0,0,0,0,0,1,0,0]],\n"short ton":["907.18474","1","0","0",[0,1,0,0,0,0,0,0]],\n"siemen":["1","1","0","siWord",[-2,-1,3,2,0,0,0,0]],\n"sievert":["1","1","0","siWord",[2,0,-2,0,0,0,0,0]],\n"slinch":["175.126835246477","1","0","0",[0,1,0,0,0,0,0,0]],\n"slug":["14.5939029372064","1","0","0",[0,1,0,0,0,0,0,0]],\n"smoot":["1.7018","1","0","0",[0,1,0,0,0,0,0,0]],\n"span":["0.2286","1","0","0",[1,0,0,0,0,0,0,0]],\n"sphere":["12.5663706143592","1","0","0",[0,0,0,0,0,0,0,0]],\n"sq ft":["0.09290304","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq in":["0.00064516","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq km":["1000000","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq mi":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],\n"sq yd":["0.83612736","1","0","0",[2,0,0,0,0,0,0,0]],\n"square degree":["0.000304617419786709","1","0","0",[0,0,0,0,0,0,0,0]],\n"square meter":["1","1","0","0",[2,0,0,0,0,0,0,0]],\n"square metre":["1","1","0","0",[2,0,0,0,0,0,0,0]],\n"square mi":["2589988.110336","1","0","0",[2,0,0,0,0,0,0,0]],\n"sr":["1","1","0","siSymbol",[0,0,0,0,0,0,0,0]],\n"ssp":["0.003785411784","3072","0","0",[3,0,0,0,0,0,0,0]],\n"standard volume":["22.414","1","0","0",[3,0,0,0,0,0,0,0]],\n"statampere":["0.00000000033356","1","0","0",[0,0,0,1,0,0,0,0]],\n"statcoulomb":["0.00000000033356","1","0","0",[0,0,1,1,0,0,0,0]],\n"statfarad":["0.0000000000011126","1","0","0",[-2,-1,4,2,0,0,0,0]],\n"stathenrie":["898760000000","1","0","0",[2,1,-2,-2,0,0,0,0]],\n"stathenry":["898760000000","1","0","0",[2,1,-2,-2,0,0,0,0]],\n"statohm":["898760000000","1","0","0",[2,1,-3,-2,0,0,0,0]],\n"statvolt":["299.79","1","0","0",[2,1,-3,-1,0,0,0,0]],\n"statwatt":["0.0000001","1","0","0",[2,1,-3,0,0,0,0,0]],\n"steam horsepower":["9812.5","1","0","0",[2,1,-3,0,0,0,0,0]],\n"steradian":["1","1","0","0",[0,0,0,0,0,0,0,0]],\n"stere":["1","1","0","0",[3,0,0,0,0,0,0,0]],\n"stoke":["0.0001","1","0","0",[2,0,-1,0,0,0,0,0]],\n"stone":["6.35029318","1","0","0",[0,1,0,0,0,0,0,0]],\n"stpd":["0.0104998233796296","1","0","0",[0,1,-1,0,0,0,0,0]],\n"stunde":["3600","1","0","0",[0,0,1,0,0,0,0,0]],\n"survey feet":["1200","3937","0","0",[1,0,0,0,0,0,0,0]],\n"survey foot":["1200","3937","0","0",[1,0,0,0,0,0,0,0]],\n"Sv":["1","1","0","siSymbol",[2,0,-2,0,0,0,0,0]],\n"sverdrup":["1000000","1","0","0",[3,0,-1,0,0,0,0,0]],\n"sym":["1","1","0","siSymbol",[0,0,0,0,0,1,0,0]],\n"tablespoon":["0.003785411784","256","0","0",[3,0,0,0,0,0,0,0]],\n"tbsp":["0.003785411784","256","0","0",[3,0,0,0,0,0,0,0]],\n"teaspoon":["0.003785411784","768","0","0",[3,0,0,0,0,0,0,0]],\n"tebibyte":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"terabyte":["8796093022208","1","0","0",[0,0,0,0,0,1,0,0]],\n"tesla":["1","1","0","siSymbol",[-2,-2,-2,-1,0,0,0,0]],\n"therm":["105480400","1","0","0",[2,1,-2,0,0,0,0,0]],\n"tidal day":["89416.32","1","0","0",[0,0,1,0,0,0,0,0]],\n"ton":["907.18474","1","0","0",[0,1,0,0,0,0,0,0]],\n"tonf":["8896.443230521","1","0","0",[1,1,-2,0,0,0,0,0]],\n"ton TNT":["4184000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"ton refrigeration":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],\n"tonne":["1000","1","0","0",[0,1,0,0,0,0,0,0]],\n"tons TNT":["4184000000","1","0","0",[2,1,-2,0,0,0,0,0]],\n"tons refrigeration":["3516.8532","1","0","0",[2,1,-3,0,0,0,0,0]],\n"township":["93239571.972096","1","0","0",[2,0,0,0,0,0,0,0]],\n"toz":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],\n"tpy":["0.0000287475400032297","1","0","0",[0,1,-1,0,0,0,0,0]],\n"tropical year":["31556925.9747","1","0","0",[0,0,1,0,0,0,0,0]],\n"troy ounce":["0.0311034768","1","0","0",[0,1,0,0,0,0,0,0]],\n"tsp":["0.003785411784","768","0","0",[3,0,0,0,0,0,0,0]],\n"turn":["6.28318530717958","1","0","0",[0,0,0,0,0,0,0,0]],\n"twip":["0.0254","1440","0","0",[1,0,0,0,0,0,0,0]],\n"unit":["1","1","0","0",[0,0,0,0,0,1,0,0]],\n"vapeur":["735.49875","1","0","0",[2,1,-3,0,0,0,0,0]],\n"var":["1","1","0","siSymbol",[2,1,-3,0,0,0,0,0]],\n"varistor":["1","1","0","siWord",[2,1,-3,0,0,0,0,0]],\n"volt":["1","1","0","siWord",[2,1,-3,-1,0,0,0,0]],\n"watt":["1","1","0","siWord",[2,1,-3,0,0,0,0,0]],\n"weber":["1","1","0","siSymbol",[2,1,-2,-1,0,0,0,0]],\n"week":["604800","1","0","0",[0,0,1,0,0,0,0,0]],\n"won":["1","1","0","KRW",[0,0,0,0,0,0,0,1]],\n"wppm":["0.000001","1","0","0",[0,0,0,0,0,0,0,0]],\n"yard":["0.9144","1","0","0",[1,0,0,0,0,0,0,0]],\n"yd":["0.9144","1","0","0",[1,0,0,0,0,0,0,0]],\n"year":["31556952","1","0","0",[0,0,1,0,0,0,0,0]],\n"yen":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"£":["1","1","0","GBP",[0,0,0,0,0,0,0,1]],\n"¥":["1","1","0","JPY",[0,0,0,0,0,0,0,1]],\n"°":["3.14159265358979","180","0","0",[0,0,0,0,0,0,0,0]],\n"°C":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],\n"°F":["5","9","459","0",[0,0,0,0,1,0,0,0]],\n"°K":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"°R":["5","9","0","0",[0,0,0,0,1,0,0,0]],\n"°R":["5","9","0","0",[0,0,0,0,1,0,0,0]],\n"Å":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0]],\n"Ω":["1","1","0","siSymbol",[2,1,-3,-2,0,0,0,0]],\n"”":["0.0254","1","0","0",[1,0,0,0,0,0,0,0]],\n"₨":["1","1","0","INR",[0,0,0,0,0,0,0,1]],\n"₪":["1","1","0","ILS",[0,0,0,0,0,0,0,1]],\n"€":["1","1","0","EUR",[0,0,0,0,0,0,0,1]],\n"℃":["1","1","273.15","0",[0,0,0,0,1,0,0,0]],\n"℉":["5","9","459","0",[0,0,0,0,1,0,0,0]],\n"Ω":["1","1","0","siSymbol",[2,1,-3,-2,0,0,0,0]],\n"K":["1","1","0","0",[0,0,0,0,1,0,0,0]],\n"Å":["0.0000000001","1","0","0",[1,0,0,0,0,0,0,0,0]]\n}`));const synonyms=Object.freeze({$:"USD",US$:"USD",dollar:"USD",A$:"AUD","Australian dollar":"AUD","Brazilian Real":"BRL",real:"BRL",R$:"BRL","British Pound":"GBP","£":"GBP",C$:"CAD","Canadian dollar":"CAD","Chinese Yuan":"CNY","€":"EUR",Euro:"EUR",euro:"EUR",HK$:"HKD","Hong Kong dollar":"HKD","Indian Rupee":"IDR","₨":"IDR","Israeli New Shekel":"ILS","₪":"ILS","Mexican Peso":"MXN","Swiss Franc":"CHF",Won:"KRW",won:"KRW",yen:"JPY",Yen:"JPY","Japanese Yen":"JPY","¥":"JPY"});const unitFromWord=(e,t,r)=>{const n=e.trim();const a=n.length;const o={name:n,factor:Rnl.one,gauge:Rnl.zero,log:"",expos:[0,0,0,0,0,0,0,0]};if(e===""){return o}let i="";let s;let l=false;let u="";let c=false;let d=false;for(let e=1;e<3;e++){if(e===1){l=true;i=n;if(a>2){if(i.charAt(i.length-1)==="s"){if(!(i==="cfs"||a===3&i.charAt(1)==="p")){i=i.slice(0,-1)}}}let e="";if(a>3){const t=/^(yotta|zetta|exa|peta|tera|giga|mega|kilo|hecto|deka|deci|centi|milli|micro|nano|pico|femto|atto|zepto|yocto)/.exec(i);if(t){e=t[0].value;l=true;i=i.slice(e.length)}}}else{l=false;u=i.charAt(0);if("YZEPTGMkhdcmnpfazyµμ".indexOf(u)>-1){l=true;i=i.substring(1)}}if(r&&Object.hasOwnProperty.call(r.value.columnMap,i)){const e=r.value.columnMap[i];const t=r.unit[r.value.units[e]];o.factor=Rnl.multiply(Rnl.fromString(r.value.data[e][0]),t.factor);o.expos=t.expos;return o}if(l){s=unitTable[i];if(s){d=true}if(e===1&&d&&u===""){break}else if(d){if(e===1){d=s[3]==="siWord";c=true;break}else{d=s[3]==="siSymbol";c=true}}}}if(d){o.gauge=Rnl.fromString(s[2]);o.expos=Object.freeze(s[4]);if(o.expos[7]===1){const e=synonyms[i]?synonyms[i]:i;if(t&&t.value.has(e)){o.factor=Rnl.reciprocal(t.value.get(e))}else{s=unitTable[e];if(s[0]==="0"){return errorOprnd("CURRENCY")}else{o.factor=Rnl.reciprocal(Rnl.fromString(s[0]))}}}else{o.factor=Rnl.divide(Rnl.fromString(s[0]),Rnl.fromString(s[1]))}if(c){o.factor=Rnl.multiply(o.factor,Rnl.fromNumber(prefixFactor[u]))}}else{return errorOprnd("UNIT_NAME",n)}return Object.freeze(o)};const opOrNumRegEx=/[0-9·\-⁰¹²³\u2074-\u2079⁻/^()]/;const numeralRegEx=/[0-9-]/;const unitFromUnitName=(e,t)=>{if(!e){return{name:null,factor:null,gauge:null,log:"",expos:null}}const r=t.currencies;const n=t.units?t.units:null;let a=e.trim();a=a.replace(/[*.•×\-−](?![0-9.])/g,"·");const o={name:a,factor:Rnl.one,gauge:Rnl.zero,log:"",expos:allZeros};if(a===""){return o}else if(a==="°"||a==="°ʹ"||a==="degMinSec"){o.factor=Rnl.fromString("0.0174532925199433");return o}else if(a==="feetInch"){o.unitExpos=[1,0,0,0,0,0,0,0];o.factor=Rnl.fromString("0.3048");return o}else if(a==="″"||a==="ʹʹ"){o.unitExpos=[1,0,0,0,0,0,0,0];o.factor=Rnl.fromString("0.0254");return o}const i=";";let s=false;let l="";let u="";let c="";let d="";const m=[];let p=0;const f=[{symbol:"",prec:-1}];let h="";for(let e=0;e<a.length;e++){l=a.charAt(e);if(numeralRegEx.test(l)){if(!s){c+=i;d+=i;f.push({symbol:"^",prec:3});s=true}c+=l;d+=l}else if(exponentRegEx.test(l)){if(!s){c+=i;d+=i;f.push({symbol:"^",prec:3});s=true}const e=numeralFromSuperScript(l);c+=e;d+=e}else if(l==="^"){c+=i;d+=i;f.push({symbol:"^",prec:3});s=true}else if(l==="·"||l==="/"){s=false;c+=i;d+=i;while(f[f.length-1].prec>=1){const e=f.pop().symbol;c+=e+i;d+=e+i}f.push({symbol:l,prec:1})}else if(l==="("){f.push({symbol:"(",prec:0})}else if(l===")"){while(f[f.length-1].prec>0){const e=f.pop().symbol;c+=e+i;d+=e+i}f.pop();s=false}else if(l==="-"){s=true;f.push({symbol:"^",prec:3});f.push({symbol:"-",prec:2});c+=i;d+=i}else{s=false;let t;for(t=e+1;t<a.length;t++){if(opOrNumRegEx.test(a.charAt(t))){break}}u=a.substring(e,t);h=unitFromWord(u,r,n);if(h.dtype&&h.dtype===dt.ERROR){return h}if(h.factor===0){o.name="";return o}c+=String(h.factor[0])+","+String(h.factor[1]);d+="¿"+p;m.push(h.expos);p+=1;e=t-1}}if(u===o.name){return Object.freeze(h)}while(f.length>1){const e=f.pop().symbol;c+=i+e;d+=i+e}const g=[];const b=[];const y=c.split(i);const x=d.split(i);let R=1;let v;p=0;for(let e=0;e<y.length;e++){if(/[·/\-^]/.test(y[e])){R=g.pop();v=b.pop()}switch(y[e]){case"·":g[g.length-1]=Rnl.multiply(g[g.length-1],R);b[b.length-1]=b[b.length-1].map(((e,t)=>e+v[t]));break;case"/":if(Rnl.isZero(R)){return errorOprnd("DIV")}g[g.length-1]=Rnl.divide(g[g.length-1],R);b[b.length-1]=b[b.length-1].map(((e,t)=>e-v[t]));break;case"^":g[g.length-1]=Rnl.power(g[g.length-1],R);b[b.length-1]=b[b.length-1].map((e=>e*v));break;case"-":g[g.length-1]=Rnl.negate(g[g.length-1]);break;default:if(y[e].indexOf(",")>-1){const t=y[e].split(",");g.push([BigInt(t[0]),BigInt(t[1])])}else{g.push([BigInt(y[e]),BigInt(1)])}if(x[e].charAt(0)==="¿"){b.push(m[p]);p+=1}else{b.push(x[e])}}}o.factor=Object.freeze(g.pop());o.expos=Object.freeze(b.pop());return Object.freeze(o)};const im=[Rnl.zero,Rnl.one];const isComplex=e=>Array.isArray(e)&&e.length===2&&Rnl.isRational(e[0])&&Rnl.isRational(e[1]);const real=e=>e[0];const imag=e=>e[1];const abs$1=e=>Rnl.hypot(e[0],e[1]);const negate$1=e=>[Rnl.negate(e[0]),Rnl.negate(e[1])];const conjugate=e=>[e[0],Rnl.negate(e[1])];const angle=e=>{if(Rnl.isZero(e[0])&&Rnl.isZero(e[1])){return errorOprnd("ORIGIN","angle")}else if(Rnl.isZero(e[1])){return Rnl.isPositive(e[0])?Rnl.zero:Rnl.pi}else if(Rnl.isZero(e[0])){return Rnl.isPositive(e[1])?Rnl.divide(Rnl.pi,Rnl.two):Rnl.negate(Rnl.divide(Rnl.pi,Rnl.two))}else{return Rnl.fromNumber(Math.atan2(Rnl.toNumber(e[1]),Rnl.toNumber(e[0])))}};const add$1=(e,t)=>[Rnl.add(e[0],t[0]),Rnl.add(e[1],t[1])];const subtract$1=(e,t)=>[Rnl.subtract(e[0],t[0]),Rnl.subtract(e[1],t[1])];const multiply$1=(e,t)=>[Rnl.subtract(Rnl.multiply(e[0],t[0]),Rnl.multiply(e[1],t[1])),Rnl.add(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]))];const divide$1=(e,t)=>{if(!Rnl.isZero(e[1])&&!Rnl.isZero(t[1])){if(Rnl.lessThan(Rnl.abs(t[1]),Rnl.abs(t[0]))){const r=Rnl.divide(t[1],t[0]);const n=Rnl.add(t[0],Rnl.multiply(t[1],r));return[Rnl.divide(Rnl.add(e[0],Rnl.multiply(e[1],r)),n),Rnl.divide(Rnl.subtract(e[1],Rnl.multiply(e[0],r)),n)]}else{const r=Rnl.divide(t[0],t[1]);const n=Rnl.add(t[1],Rnl.multiply(t[0],r));return[Rnl.divide(Rnl.add(e[1],Rnl.multiply(e[0],r)),n),Rnl.divide(Rnl.add(Rnl.negate(e[0]),Rnl.multiply(e[1],r)),n)]}}else if(Rnl.isZero(e[1])){if(Rnl.lessThan(Rnl.abs(t[1]),Rnl.abs(t[0]))){const r=Rnl.divide(t[1],t[0]);const n=Rnl.add(t[0],Rnl.multiply(t[1],r));return[Rnl.divide(e[0],n),Rnl.negate(Rnl.multiply(e[0],Rnl.divide(r,n)))]}else{const r=Rnl.divide(t[0],t[1]);const n=Rnl.add(t[1],Rnl.multiply(t[0],r));return[Rnl.divide(Rnl.multiply(e[0],r),n),Rnl.negate(Rnl.divide(e[0],n))]}}else if(Rnl.isZero(t[1])){if(Rnl.isZero(t[0]));else{return[Rnl.divide(e[0],t[0]),Rnl.divide(e[1],t[0])]}}else{if(Rnl.isZero(t[0])){return errorOprnd("DIV")}else{return[Rnl.divide(e[0],t[0]),Rnl.zero]}}};const increment$1=e=>[Rnl.increment(e[0]),e[1]];const decrement$1=e=>[Rnl.decrement(e[0]),e[1]];const inverse=e=>{if(Rnl.isZero(e[1])){if(Rnl.isZero(e[0])){return errorOprnd("DIV")}return[Rnl.inverse(e[0]),0]}else{return divide$1([Rnl.one,Rnl.zero],e)}};const cos$1=e=>{const t=Rnl.multiply(Rnl.cos(e[0]),Rnl.cosh(e[1]));const r=Rnl.multiply(Rnl.negate(Rnl.sin(e[0])),Rnl.sinh(e[1]));return[t,r]};const sin$1=e=>{const t=Rnl.multiply(Rnl.sin(e[0]),Rnl.cosh(e[1]));const r=Rnl.multiply(Rnl.cos(e[0]),Rnl.sinh(e[1]));return[t,r]};const log=e=>{let t=[Rnl.zero,Rnl.zero];if(Rnl.isZero(e[0])&&Rnl.isZero(e[1])){return errorOprnd("ORIGIN","log")}else{t[0]=Rnl.fromNumber(Math.log(Rnl.toNumber(Rnl.hypot(e[0],e[1]))));t[1]=angle(e)}return t};const isSmall=e=>Rnl.lessThan(Rnl.abs(e),[BigInt(1),BigInt(1e14)]);const exp$1=e=>{let t=[Rnl.zero,Rnl.zero];if(isSmall(e[1])){t[1]=Rnl.zero;t[0]=Rnl.exp(e[0])}else{if(Rnl.isZero(e[0])){t[0]=Rnl.cos(e[1]);if(isSmall(t[0])){t[0]=Rnl.zero}t[1]=Rnl.sin(e[1]);if(isSmall(t[1])){t[1]=Rnl.zero}}else{const r=Rnl.exp(e[0]);t[0]=Rnl.multiply(r,Rnl.cos(e[1]));t[1]=Rnl.multiply(r,Rnl.sin(e[1]))}}return t};const power$1=(e,t)=>{let r=[Rnl.zero,Rnl.zero];if(!isComplex(t)){r=log(e);r[0]=Rnl.multiply(r[0],t);r[1]=Rnl.multiply(r[1],t)}else if(Rnl.isZero(t[1])){r=log(e);r[0]=Rnl.multiply(r[0],t[0]);r[1]=Rnl.multiply(r[1],t[0])}else if(Rnl.isZero(e[1])&&!Rnl.isNegative(e[0])){e[0]=Rnl.fromNumber(Math.log(Rnl.toNumber(e[0])));r[0]=Rnl.multiply(e[0],t[0]);r[1]=Rnl.multiply(e[0],t[1])}else{e=log(e);r[0]=Rnl.subtract(Rnl.multiply(e[0],t[0]),Rnl.multiply(e[1],t[1]));r[1]=Rnl.add(Rnl.multiply(e[1],t[0]),Rnl.multiply(e[0],t[1]))}r=exp$1(r);if(isSmall(r[1])){r[1]=Rnl.zero}if(isSmall(r[0])){r[0]=Rnl.zero}return r};const acosh=e=>log(add$1(e,multiply$1(sqrt$1(decrement$1(e)),sqrt$1(increment$1(e)))));const asinh=e=>{const t=sqrt$1(add$1(multiply$1(e,e),[Rnl.one,Rnl.zero]));return log(add$1(e,t))};const atanh=e=>divide$1(subtract$1(log(increment$1(e)),log(subtract$1([Rnl.one,Rnl.zero],e))),[Rnl.two,Rnl.zero]);const asin=e=>divide$1(asinh(multiply$1(im,e)),im);const atan=e=>{const t=log(increment$1(multiply$1(im,e)));const r=log(subtract$1([Rnl.one,Rnl.zero],multiply$1(im,e)));return divide$1(subtract$1(t,r),[Rnl.zero,Rnl.two])};const sqrt$1=e=>{const t=log(e);t[0]=Rnl.divide(t[0],Rnl.two);t[1]=Rnl.divide(t[1],Rnl.two);return exp$1(t)};const lanczos$1=t=>{const r=subtract$1(t,[Rnl.one,Rnl.zero]);const n=Rnl.sqrt(Rnl.divide(e,pi));const a=multiply$1([Rnl.two,Rnl.zero],[n,Rnl.zero]);const o=Rnl.fromNumber(11.400511);const i=[[BigInt(1),BigInt(2)],Rnl.zero];const s=power$1(divide$1(add$1(r,[o,Rnl.zero]),[e,Rnl.zero]),add$1(r,i));const l=["2.48574089138753565546e-5","1.05142378581721974210","-3.45687097222016235469","4.51227709466894823700","-2.98285225323576655721","1.05639711577126713077","-0.195428773191645869583","0.0170970543404441224307","-0.000571926117404305781283","0.00000463399473359905636708","-0.00000000271994908488607703910"];let u=[Rnl.fromString(l[0]),Rnl.zero];for(let e=1;e<=10;e++){const t=[Rnl.fromString(t[e]),Rnl.zero];const n=[Rnl.fromNumber(e),Rnl.zero];u=add$1(u,divide$1(t,add$1(r,n)))}return multiply$1(multiply$1(a,s),u)};const display=(e,t,r)=>{const n=/[i∠°]/.test(t)?t.slice(-1):"i";let a="";let o="";if(n==="i"){const n=format(e[0],t,r);let i=format(e[1],t,r);if(i.charAt(0)==="-"){a=n+" - "+-i+"\\,\\mathord{\\mathrm{im}}";o=n+" - "+-i+" im"}else{a=n+" + "+i+" \\,\\mathord{\\mathrm{im}}";o=n+" + "+i+" im"}}else{const i=Rnl.hypot(e[0],e[1]);let s=Cpx.angle(result.value);if(n==="°"){s=Rnl.divide(Rnl.multiply(s,Rnl.fromNumber(180)),Rnl.pi)}a=format(i,t,r)+"∠"+format(s,t,r)+(n==="°"?"°":"");o=a}return[a,o]};const Cpx=Object.freeze({im:im,real:real,imag:imag,abs:abs$1,conjugate:conjugate,angle:angle,inverse:inverse,increment:increment$1,decrement:decrement$1,isComplex:isComplex,add:add$1,subtract:subtract$1,divide:divide$1,multiply:multiply$1,negate:negate$1,power:power$1,exp:exp$1,log:log,sqrt:sqrt$1,sin:sin$1,cos:cos$1,asin:asin,atan:atan,acosh:acosh,asinh:asinh,atanh:atanh,lanczos:lanczos$1,display:display});const isMatrix=e=>e.dtype&dt.ROWVECTOR||e.dtype&dt.COLUMNVECTOR||e.dtype&dt.MATRIX;const isVector=e=>(e.dtype&dt.ROWVECTOR||e.dtype&dt.COLUMNVECTOR)>0;const transpose=e=>{const t={unit:e.unit};if(isVector(e)){t.value=e.value;const r=(e.dtype&dt.ROWVECTOR?1:-1)*(dt.COLUMNVECTOR-dt.ROWVECTOR);t.dtype=e.dtype+r}else if(e.dtype&dt.MATRIX){t.value=e.value[0].map(((t,r)=>e.value.map((e=>e[r]))));t.dtype=e.dtype}else{return errorOprnd("BAD_TRANS")}return t};const convertFromBaseUnits=(e,t,r)=>{let n=isVector(e)?e.value.map((e=>Rnl.divide(e,r))):e.value.map((e=>e.map((e=>Rnl.divide(e,r)))));if(!Rnl.isZero(t)){n=isVector(e)?e.value.map((e=>Rnl.subtract(e,t))):e.value.map((e=>e.map((e=>Rnl.subtract(e,t)))))}return Object.freeze(n)};const convertToBaseUnits=(e,t,r)=>{let n=clone(e.value);if(!Rnl.isZero(t)){n=isVector(e)?e.value.map((e=>Rnl.add(e,t))):e.value.map((e=>e.map((e=>Rnl.add(e,t)))))}n=isVector(e)?n.map((e=>Rnl.multiply(e,r))):n.map((e=>e.map((e=>Rnl.multiply(e,r)))));return Object.freeze(n)};const display$1=(e,t,r)=>{let n="\\begin";if(e.dtype&dt.MATRIX){n+="{pmatrix}";const a=e.value.length;const o=e.value[0].length;for(let i=0;i<a;i++){for(let a=0;a<o;a++){n+=format(e.value[i][a],t,r)+" &"}n=n.slice(0,-1)+" \\\\ "}n=n.slice(0,-3).trim();n+="\\end{pmatrix}"}else{n+="{bmatrix}";const a=e.dtype&dt.ROWVECTOR?" & ":" \\\\ ";if(e.value.plain){const o=e.value.plain.length;for(let i=0;i<o;i++){n+=format(e.value.plain[i],t,r)+(i<o-1?a:"")}}else{const o=e.value.length;for(let i=0;i<o;i++){const s=e.value[i]===undefined?"":e.dtype&dt.RATIONAL?format(e.value[i],t,r):e.dtype&dt.COMPLEX?Cpx.display(e.value[i],t,r)[0]:e.dtype&dt.BOOLEAN||e.dtype&dt.STRING?"\\text{"+e.value[i]+"}":e.value[i];n+=s+(i<o-1?a:"")}}n+="\\end{bmatrix}"}return n};const displayAlt=(e,t,r)=>{let n="";if(e.dtype&dt.MATRIX){n+="(";const a=e.value.length;const o=e.value[0].length;for(let i=0;i<a;i++){for(let a=0;a<o;a++){n+=format(e.value[i][a],t,r).replace(/{,}/g,",")+", "}n=n.slice(0,-2)+"; "}n=n.slice(0,-2).trim();n+=")"}else{n+="[";const a=e.dtype&dt.ROWVECTOR?", ":"; ";if(e.value.plain){const o=e.value.plain.length;for(let i=0;i<o;i++){n+=format(e.value.plain[i],t,r).replace(/{,}/g,",")+(i<o-1?a:"")}}else{const o=e.value.length;for(let i=0;i<o;i++){const s=e.value[i]===undefined?"":e.dtype&dt.RATIONAL?format(e.value[i],t,r).replace(/{,}/g,","):e.dtype&dt.COMPLEX?Cpx.display(e.value[i],t,r)[1].replace(/{,}/g,","):e.value[i];n+=s+(i<o-1?a:"")}}n+="]"}return n};const displayMapOfVectors=(e,t,r)=>{let n="\\begin{Bmatrix}";Object.keys(e).forEach((a=>{const o=e[a];n+="\\text{"+a+"}: \\begin{bmatrix}";const i=o.plain.length;if(o.plain){for(let e=0;e<i;e++){n+=format(o.plain[e],t,r)+(e<i-1?", ":"")}}else{for(let e=0;e<i;e++){const a=Rnl.isRational(o[e])?format(o[e],t,r):typeof o[e]==="boolean"||typeof o[e]==="string"?"\\text{"+o[e]+"}":o[e];n+=a+(e<i-1?" & ":"")}}n+="\\end{bmatrix} \\\\"}));n=n.slice(0,-2)+"\\end{Bmatrix}";return n};const displayAltMapOfVectors=(e,t,r)=>{let n="{";Object.keys(e).forEach((a=>{const o=e[a];n+=a+": [";const i=o.plain.length;if(o.plain){for(let e=0;e<i;e++){n+=format(o.plain[e],t,r)+(e<i-1?", ":"").replace(/{,}/g,",")+" "}}else{for(let e=0;e<i;e++){const a=Rnl.isRational(o[e])?format(o[e],t,r).replace(/{,}/g,",")+" ":String(o[e])+"}";n+=a+(e<i-1?" ":"")}}n+="];"}));return n.slice(0,-1)+"}"};const identity=(e,t)=>{const r=Rnl.isRational(e)?Rnl.toNumber(e):e;if(r===1){return[Rnl.one]}else{const e=[];for(let t=0;t<r;t++){e.push(new Array(r).fill(Rnl.zero));e[t][t]=Rnl.one}return t?e:Object.freeze(e)}};const invert=(e,t)=>{if(e.length!==e[0].length){return errorOprnd("NONSQUARE")}const r=e.length;let n=0;let a=0;let o=0;let i=Rnl.zero;let s=Rnl.one;const l=clone(e);const u=identity(r,true);for(n=0;n<r;n+=1){i=l[n][n];if(Rnl.isZero(i)){for(a=n+1;a<r;a++){if(!Rnl.isZero(l[a][n])){for(o=0;o<r;o++){i=l[n][o];l[n][o]=l[a][o];l[a][o]=i;i=u[n][o];u[n][o]=u[a][o];u[a][o]=i}break}}i=l[n][n];if(Rnl.isZero(i)){return errorOprnd("SINGULAR")}}if(t){s=Rnl.divide(s,i);if(n===r-1){return s}}for(o=0;o<r;o++){l[n][o]=Rnl.divide(l[n][o],i);u[n][o]=Rnl.divide(u[n][o],i)}for(a=0;a<r;a++){if(a===n){continue}i=l[a][n];for(o=0;o<r;o++){l[a][o]=Rnl.subtract(l[a][o],Rnl.multiply(i,l[n][o]));u[a][o]=Rnl.subtract(u[a][o],Rnl.multiply(i,u[n][o]))}}}return Object.freeze(u)};const submatrix=(e,t,r)=>{if(!(t.dtype&dt.RATIONAL||t.dtype&dt.RANGE)){return errorOprnd("BAD_INDEX")}let n=[];let a=e.dtype;let o=0;let i=1;let s=0;if(t.dtype&dt.RANGE){o=Rnl.toNumber(t.value[0]);i=Rnl.toNumber(t.value[1]);s=t.value[2]==="∞"?e.value.length:Rnl.toNumber(t.value[2])}else if(Rnl.areEqual(t.value,Rnl.zero)){o=1;s=e.value.length}else{o=Rnl.toNumber(t.value);s=o}if(isVector(e)){if(o===s){n=e.value[o-1];a=e.dtype-(e.dtype&dt.ROWVECTOR)-(e.dtype&dt.COLUMNVECTOR)}else if(i===1){n=e.value.slice(o-1,s)}else{for(let t=o-1;t<s;t+=i){n.push(e.value[t])}}Object.freeze(n);return Object.freeze({value:n,unit:e.unit,dtype:a})}let l=0;let u=1;let c=0;if(r){if(r.dtype&dt.RANGE){l=Rnl.toNumber(r.value[0]);u=Rnl.toNumber(r.value[1]);c=r.value[2]==="∞"?e.value[0].length:Rnl.toNumber(r.value[2])}else if(Rnl.areEqual(r.value,Rnl.zero)){l=1;c=e.value[0].length}else{l=Rnl.toNumber(r.value);c=l}}if(o===s&&l===c){n=e.value[o-1][l-1];a-=dt.MATRIX}else if(o===s){if(u===1){n=e.value[o-1].slice(l-1,c)}else{for(let t=l-1;t<c;t+=u){n.push(e.value[o-1][t])}}a=a-dt.MATRIX+dt.ROWVECTOR}else if(l===c){for(let t=o-1;t<s;t+=i){n.push(e.value[t][l-1])}a=a-dt.MATRIX+dt.COLUMNVECTOR}else if(u===1){for(let t=o-1;t<s;t+=i){n.push([]);n[n.length-1]=e.value[t].slice(l-1,c)}}else{for(let t=o-1;t<s;t+=i){n.push([]);for(let r=l-1;r<c;r+=u){n[n.length-1].push(e[t][r])}}}Object.freeze(n);return Object.freeze({value:n,unit:e.unit,dtype:a})};const multResultType=(e,t)=>{if(e.dtype&dt.ROWVECTOR&&t.dtype&dt.COLUMNVECTOR){return dt.RATIONAL}else if(e.dtype&dt.MATRIX&&t.dtype&dt.COLUMNVECTOR){return t.dtype}else if(e.dtype&dt.ROWVECTOR&&t.dtype&dt.MATRIX){return e.dtype}else{return dt.MATRIX+dt.RATIONAL}};const operandFromRange=e=>{const t=[];if(Rnl.greaterThan(e[2],e[0])){for(let r=e[0];Rnl.lessThan(r,e[2]);r=Rnl.add(r,e[1])){t.push(r)}}else{for(let r=e[0];Rnl.greaterThanOrEqualTo(r,e[2]);r=Rnl.add(r,e[1])){t.push(r)}}if(!Rnl.areEqual(t[t.length-1],e[2])){t.push(e[2])}Object.freeze(t);return Object.freeze({value:t,unit:{expos:allZeros},dtype:dt.RATIONAL+dt.COLUMNVECTOR})};const operandFromTokenStack=(e,t,r)=>{if(t===0&&r===0){return Object.freeze({value:new Array(0),unit:null,dtype:dt.ROWVECTOR})}else if(t===1&&r===1){return e.pop()}else if(t===1||r===1){const n=Math.max(t,r);let a;let o=e[e.length-1].dtype;if(t===1&&o&dt.COLUMNVECTOR){o=o-dt.COLUMNVECTOR+dt.MATRIX;a=new Array(e[0].value.length);for(let t=0;t<e[0].value.length;t++){a[t]=[];for(let r=0;r<n;r++){a[t][r]=e[r].value[t]}}for(let t=0;t<n;t++){e.pop()}}else{a=new Array(n);o+=t===1?dt.ROWVECTOR:dt.COLUMNVECTOR;for(let t=n-1;t>=0;t--){a[t]=e.pop().value}}Object.freeze(a);return Object.freeze({value:a,unit:o&dt.RATIONAL?{expos:allZeros}:null,dtype:o})}else{const n=new Array(t);const a=e[e.length-1].dtype+dt.MATRIX;for(let e=0;e<t;e++){n[e]=new Array(r)}for(let a=t-1;a>=0;a--){for(let t=r-1;t>=0;t--){n[a][t]=e.pop().value}}Object.freeze(n);return Object.freeze({value:n,unit:a&dt.RATIONAL?{expos:allZeros}:null,dtype:a})}};const zeros=(e,t)=>{if(e===1||t===1){return{value:new Array(t).fill(Rnl.zero),unit:allZeros,dtype:dt.RATIONAL+(e===1?dt.ROWVECTOR:dt.COLUMNVECTOR)}}else{const r=[];for(let n=0;n<e;n++){r.push(new Array(t).fill(Rnl.zero))}Object.freeze(r);return Object.freeze({value:r,unit:{expos:allZeros},dtype:dt.RATIONAL+dt.MATRIX})}};const Matrix=Object.freeze({convertFromBaseUnits:convertFromBaseUnits,convertToBaseUnits:convertToBaseUnits,display:display$1,displayAlt:displayAlt,displayMapOfVectors:displayMapOfVectors,displayAltMapOfVectors:displayAltMapOfVectors,identity:identity,invert:invert,multResultType:multResultType,operandFromRange:operandFromRange,operandFromTokenStack:operandFromTokenStack,submatrix:submatrix,transpose:transpose,zeros:zeros});const columnListFromRange=(e,t)=>{const r=[];for(let n=e;n<=t;n++){r.push(n)}return r};const valueFromDatum=e=>e==="true"?true:e==="false"?false:numberRegEx$1.test(e)?Rnl.fromString(e):e===""?undefined:e;const datumFromValue=(e,t)=>e===true?"true":e===false?"false":e=t===dt.RATIONAL?"0 "+String(e[0])+"/"+String(e[1]):e;const range=(e,t,r,n)=>{let a;let o;const i=[];let s=[];let l=Object.create(null);if(e.value.data[0].length===1){a=0;o=0;for(let r=0;r<t.length;r++){if(t[r].dtype===dt.STRING){s.push(e.value.columnMap[t[r].value])}else if(t[r].dtype===dt.RATIONAL){s.push(Rnl.toNumber(t[r].value))}else if(t[r].dtype===dt.RANGE){const e=Rnl.toNumber(t[r].value[0]);const n=Rnl.toNumber(t[r].value[1]);for(let t=e;t<=n;t++){s.push(t)}}}}else if(t.length===1&&t[0].dtype===dt.RATIONAL){a=Rnl.toNumber(t[0].value)-1;o=a;s=columnListFromRange(0,e.value.data.length-1)}else if(t.length===1&&t[0].dtype===dt.RANGE){a=Rnl.toNumber(t[0].value[0])-1;o=Rnl.toNumber(t[0].value[1])-1;s=columnListFromRange(0,e.value.data.length-1)}else if(t.length===1&&t[0].dtype===dt.STRING){if(e.value.rowMap&&t[0].value in e.value.rowMap){a=e.value.rowMap[t[0].value];o=a;s=columnListFromRange(0,e.value.data.length-1)}else if(e.value.columnMap&&t[0].value in e.value.columnMap){a=0;o=e.value.data[0].length-1;s.push(e.value.columnMap[t[0].value])}else{return errorOprnd("BAD_ROW_NAME",t[0].value)}}else if(t.length===1&&t[0].dtype===dt.STRING+dt.COLUMNVECTOR){for(const e of t[0].value){i.push(e)}s=columnListFromRange(0,e.value.data.length-1)}else if(t.length===1&&t[0].dtype===dt.STRING+dt.ROWVECTOR){a=0;o=e.value.data[0].length;for(const r of t[0].value){s.push(e.columnIndicator[r])}}else if(t.length===2&&t[0].dtype===dt.STRING&&e.value.rowMap&&t[0].value in e.value.rowMap&&t[1].dtype===dt.STRING&&e.value.columnMap&&t[0].value in e.value.columnMap){a=e.value.rowMap[t[0].value];o=a;s.push(e.value.columnMap[t[0].value])}else{a=0;o=t.length;for(const r of t){s.push(e.value.columnMap[r.value])}}if(i.length===0&&a===o&&s.length===1){let t=e.value.dtype[s[0]];if(t&dt.QUANTITY){t-=dt.QUANTITY}const o=s[0];let i=valueFromDatum(e.value.data[o][a]);l.expos=t&dt.RATIONAL?allZeros:null;if(n&&e.value.units[o]){const t=e.value.units[o]?e.value.units[o]:undefined;const n=unitFromUnitName(t,r);i=Rnl.multiply(Rnl.add(i,n.gauge),n.factor);l.expos=n.expos}return{value:i,unit:l,dtype:t}}else if(s.length===1){const t=s[0];const r=e.value.units[t]?e.value.units[t]:{};l=e.unit&&e.unit[r]?e.unit[r]:{expos:null};const i=e.value.data[t].slice(a,o+1).map((e=>valueFromDatum(e)));const u=e.value.dtype[t]+dt.COLUMNVECTOR;const c={value:i,name:e.value.headings[t],unit:l,dtype:u};if(n&&l.gauge){return{value:Matrix.convertToBaseUnits(c,l.gauge,l.factor),name:e.value.headings[t],unit:{expos:clone(l.expos)},dtype:dt.RATIONAL+dt.COLUMNVECTOR}}else{return c}}else{const t=[];const r=[];const n=[];const l=[];const u=Object.create(null);const c=Object.create(null);const d=i.length===0?false:Object.create(null);for(let m=0;m<s.length;m++){t.push(e.value.headings[s[m]]);const p=e.value.units[s[m]];r.push(p);if(p&&!c[p]){c[p]=e.unit[p]}n.push(e.value.dtype[s[m]]);u[e.value.headings[m]]=m;if(i.length>0){const t=[];for(let r=0;r<i.length;r++){const n=i[r];t.push(e.value.data[s[m]][e.value.rowMap[n]]);d[n]=r}l.push(t)}else{l.push(e.value.data[s[m]].slice(a,o+1))}}return{value:{data:l,headings:t,columnMap:u,rowMap:false,units:r,dtype:n},unit:clone(c),dtype:dt.DATAFRAME}}};const numberRegEx$1=new RegExp("^(?:=|"+Rnl.numberPattern.slice(1)+"$)");const mixedFractionRegEx=/^-?(?:[0-9]+(?: [0-9]+\/[0-9]+))$/;const dataFrameFromTSV=(e,t)=>{const r=[];const n=[];const a=Object.create(null);let o=false;const i=[];const s=[];const l=Object.create(null);let u=false;if(e.charAt(0)==="`"){e=e.slice(1)}let c=0;let d=0;const m=e=>{let n=false;for(let e=0;e<r.length;e++){if(numberRegEx$1.test(r[e][0])){n=true;break}}if(!n){for(let e=0;e<r.length;e++){if(numberRegEx$1.test(r[e][1])){u=true;break}}}if(u){for(let e=0;e<r.length;e++){const n=r[e].shift();i.push(n);if(n.length>0){if(!l[n]){const e=unitFromUnitName(n,t);if(e){l[n]=e}else{return errorOprnd("DF_UNIT",n)}}}}if(o){Object.entries(o).forEach((([e,t])=>{o[e]=t-1}))}}};const p=e=>{e=e.trim();if(c===3&&d===0){m()}if(c===0){if(d===0&&(e.length>0&&e.charAt(0)==="#")){o=Object.create(null);e=e.slice(1)}n.push(e);a[e]=d}else{if(c===1){r.push([])}if(e==="sumAbove()"){let t=Rnl.zero;for(const e of r[d]){if(!isNaN(e)){t=Rnl.add(t,Rnl.fromString(e))}}e=String(Rnl.toNumber(t))}r[d].push(e);if(o&&d===0){o[e]=c-1-(u?1:0)}}};const f=e.split(/\r?\n/g);for(const e of f){if(e.length>0){d=0;const t=e.split("\t");for(const e of t){p(e.trim());d++}c+=1}}if(c===3){m()}for(let e=0;e<r.length;e++){for(let t=0;t<r[0].length;t++){const n=r[e][t];if(n===""){continue}s.push(numberRegEx$1.test(n)?dt.RATIONAL+(i.length>0&&i[e].length>0?dt.QUANTITY:0):n==="true"||n==="false"?dt.BOOLEAN:dt.STRING);break}}let h=false;if(r[0].length===1&&Object.keys(l).length===0){h=true;for(let e=1;e<s.length;e++){if(s[e]!==s[0]){h=false;break}}}if(h){const t=new Map;const n=Object.keys(a);if(e.charAt(0)==="#"){n[0]="#"+n[0]}for(let e=0;e<n.length;e++){t.set(n[e],valueFromDatum(r[e][0]))}return{value:t,unit:s[0]===dt.RATIONAL?allZeros:null,dtype:dt.MAP+s[0]}}else{return{value:{data:r,headings:n,columnMap:a,rowMap:o,units:i,dtype:s},unit:l,dtype:dt.DATAFRAME}}};const dataFrameFromVectors=(e,t)=>{const r=[];const n=[];const a=Object.create(null);const o=[];const i=[];const s=Object.create(null);const l=e[0].name&&e[0].name==="name"?Object.create(null):false;for(let u=0;u<e.length;u++){const c=e[u];const d=c.dtype&dt.ROWVECTOR?dt.ROWVECTOR:c.dtype&dt.COLUMNVECTOR?dt.COLUMNVECTOR:dt.ERROR;if(d===dt.ERROR){return errorOprnd("NOT_VECTOR")}n.push(c.name);a[c.name]=u;const m=c.dtype-d;r.push(c.value.map((e=>datumFromValue(e,m))));i.push(m);if(c.unit.name){o.push(c.unit.name);if(!s[c.unit.name]){const e=unitFromUnitName(c.unit.name,t);s[c.unit.name]=e}}else{o.push(null)}if(l){const t=e[0].value;for(let e=0;e<t.length;e++){l[t[e]]=e}}}return{value:{data:r,headings:n,columnMap:a,rowMap:l,units:o,dtype:i},unit:s,dtype:dt.DATAFRAME}};const matrix2table=(e,t,r,n)=>{const a=[];for(let t=0;t<=e.value[0].length;t++){a.push([])}const o=r.value;o.unshift("");const i=Object.create(null);for(let e=1;e<r.value[0].length;e++){i[o[e]]=e}const s=dt.RATIONAL+(e.unit?dt.QUANTITY:0);const l=Array(e.value[0].length).fill(s);l.unshift(null);let u=[];const c=Object.create(null);if(e.unit.name){u=Array(e.value[0].length).fill(e.unit.name);u.unshift("");c[e.unit.name]=unitFromUnitName(e.unit.name,n)}const d=Object.create(null);a[0]=t.value;const m=n.format?n.format.value:"h15";for(let e=0;e<t.value.length;e++){d[a[0][e]]=e}for(let t=0;t<e.value.length;t++){for(let r=0;r<e.value[0].length;r++){const n=e.value[t][r];a[r+1].push(format(n,m,"1000000."))}}return{value:{data:a,headings:o,columnMap:i,rowMap:d,units:u,dtype:l},unit:c,dtype:dt.DATAFRAME}};const append=(e,t,r,n)=>{const a=clone(e);const o=e.value.data[0].length;if(o!==t.value.length){return errorOprnd("BAD_CONCAT")}a.value.headings.push(t.name);a.value.columnMap[t.name]=e.value.headings.length-1;const i=t.dtype&dt.COLUMNVECTOR?t.dtype-dt.COLUMNVECTOR:t.dtype-dt.ROWVECTOR;if(t.unit.name&&t.unit.name.length>0){a.value.units.push(t.unit.name);const e=unitFromUnitName(t.unit.name,r);if(!a.unit[t.unit.name]){a.unit[t.unit.name]=e}if(n){const r=Matrix.convertFromBaseUnits(t,e.gauge,e.factor);a.value.data.push(r.map((e=>datumFromValue(e,i))))}else{a.value.data.push(t.value.map((e=>datumFromValue(e,i))))}}else{a.value.units.push(null)}a.value.dtype.push(i);return a};const quickDisplay=e=>{if(e===""){return""}e=e.trim();let t="";if(e.charAt(0)==="#"){e=e.slice(1).trim();t="l|cccccccccccccccccccccccc"}else{t="c"}e=addTextEscapes(e);const r=/ *\t */g;const n=e.split(/\r?\n/g);let a="";if(n.length<3){a="\\begin{matrix}\\text{";for(let e=0;e<n.length;e++){a+=tablessTrim(n[e]).replace(r,"} & \\text{")+"} \\\\ \\text{"}a=a.slice(0,-10)+"\\end{matrix}"}else{a=`\\begin{array}{${t}}\\text{`;const e=new Array(n.length);for(let t=0;t<n.length;t++){e[t]=tablessTrim(n[t]).split(r)}let o=false;let i=false;for(let t=0;t<e[1].length;t++){if(numberRegEx$1.test(e[1][t])){i=true;break}}if(!i){for(let t=0;t<e[2].length;t++){if(numberRegEx$1.test(e[2][t])){o=true;break}}}for(let e=0;e<n.length;e++){a+=tablessTrim(n[e]).replace(r,"} & \\text{");a+=o&&e===1||!o&&e===0?"} \\\\ \\hline \\text{":"} \\\\ \\text{"}a=a.slice(0,-10)+"\\end{array}"}a=a.replace(/·/g,"$·$");return a};const isValidIdentifier=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;const accentRegEx$1=/^([^\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]+)([\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1])(.+)?/;const subscriptRegEx=/([^_]+)(_[^']+)?(.*)?/;const accentFromChar=Object.freeze({"̀":"\\grave","́":"\\acute","̂":"\\hat","̃":"\\tilde","̄":"\\bar","̅":"\\bar","̇":"\\dot","̈":"\\ddot","̊":"\\mathring","̌":"\\check","̲":"\\underline","⃐":"\\overleftharpoon","⃑":"\\overrightharpoon","⃖":"\\overleftarrow","⃗":"\\vec","⃡":"\\overleftrightarrow"});const formatColumnName=e=>{if(!isValidIdentifier.test(e)){return"\\text{"+addTextEscapes(e)+"}"}else{e=e.replace(/′/g,"'");let t=e.match(accentRegEx$1);if(t){e=accentFromChar[t[2]]+"{"+t[1]+"}";return e+(t[3]?t[3]:"")}else{t=e.match(subscriptRegEx);let r=t[1].length>1?`\\text{${t[1]}}`:t[1];if(t[2]){r+="_"+`\\text{${t[2].slice(1)}}`}return r+(t[3]?t[3]:"")}}};const isNotEmpty=e=>{for(let t=0;t<e.length;t++){if(e[t]!==""&&e[t]!==null){return true}}return false};const getNumInfo=e=>{const t=e.data.length;const r=new Array(t);const n=new Array(t);for(let a=0;a<t;a++){if(e.dtype[a]&dt.RATIONAL){r[a]={hasAlignChar:false,maxLenAfterAlignChar:0};n[a]=[];for(let t=0;t<e.data[0].length;t++){const o=e.data[a][t];const i=o.indexOf(".");const s=i>-1;const l=s?o.length-i-1:0;n[a].push({hasAlignChar:s,lenAfterAlignChar:l});if(s){r[a].hasAlignChar=true;if(l>r[a].maxLenAfterAlignChar){r[a].maxLenAfterAlignChar=l}}}}}return[r,n]};const displayNum=(e,t,r,n)=>{let a=formattedDecimal(e,n);const o=t.maxLenAfterAlignChar-r.lenAfterAlignChar;if(t.hasAlignChar&&(o>0||!r.hasAlignChar)){a+="\\phantom{";if(t.hasAlignChar&&!r.hasAlignChar){a+=n.slice(-1)==="."?".":"{,}"}if(o>0){a+="0".repeat(o)}a+="}"}return a};const totalRegEx=/^(?:total|sum)/i;const display$2=(e,t="h3",r="1,000,000.",n=false)=>{if(e.data.length===0){return""}const a=e.data[0].length;const o=e.data.length;const i=a>5&&!e.rowMap;const s=o+(i?1:0);let l="\\begin{array}{";l+=e.rowMap?"l|":i?"r|":"";for(let t=1;t<s;t++){l+=e.dtype[t]&dt.RATIONAL?"r ":"l "}l=l.slice(0,-1)+"}";if(!n){if(i){l+="&"}for(let t=0;t<o;t++){l+="{"+formatColumnName(e.headings[t])+"}&"}l=l.slice(0,-1)+" \\\\ "}if(isNotEmpty(e.units)){if(i){l+="&"}for(let t=0;t<o;t++){let r="";if(e.units[t]&&e.units[t].length>0){const n=unitTeXFromString(e.units[t]);r=n.replace("\\;\\, ","")}else{r=""}l+=r+"&"}l=l.slice(0,-1)+" \\\\ "}l+="\\hline ";const[u,c]=getNumInfo(e);for(let n=0;n<a;n++){if(n===a-1&&totalRegEx.test(e.data[0][n])){l+="\\hline "}if(i){l+=String(n+1)+" & "}for(let a=0;a<o;a++){const o=e.data[a][n];l+=mixedFractionRegEx.test(o)?format(Rnl.fromString(o),t,r)+"&":numberRegEx$1.test(o)?displayNum(o,u[a],c[a][n],r)+"&":o===""?"&":"\\text{"+addTextEscapes(o)+"}&"}l=l.slice(0,-1)+" \\\\ "}l=l.slice(0,-3).trim();l+="\\end{array}";return l};const displayAlt$1=(e,t="h3",r=false)=>{if(e.data.length===0){return""}const n=e.data[0].length;const a=e.data.length;const o=n>5&&!e.rowMap;let i="``";if(!r){if(o){i+="\t"}i+=(e.headings[0]==="name"||e.headings[0]==="item"?"":e.headings[0])+"\t";for(let t=1;t<a;t++){i+=e.headings[t]+"\t"}i=i.slice(0,-1)+"\n"}if(isNotEmpty(e.units)){if(o){i+="\t"}for(let t=0;t<a;t++){i+=e.units[t]+"\t"}i=i.slice(0,-1)+"\n"}for(let r=0;r<n;r++){if(o){i+=String(r+1)+"\t"}for(let n=0;n<a;n++){const a=e.data[n][r];if(mixedFractionRegEx.test(a)){i+=format(Rnl.fromString(a),t,"100000.")+"\t"}else{i+=a+"\t"}}i=i.slice(0,-1)+"\n"}i=i.slice(0,-1).trim();i+="``";return i};const DataFrame=Object.freeze({append:append,dataFrameFromTSV:dataFrameFromTSV,dataFrameFromVectors:dataFrameFromVectors,matrix2table:matrix2table,display:display$2,displayAlt:displayAlt$1,quickDisplay:quickDisplay,range:range});const checkUnitEquality=(e,t)=>{let r;let n;if(e.expos&&t.expos){r=e.expos;n=t.expos}else{r=e;n=t}if(Array.isArray(r)){if(Array.isArray(n)){if(r.length!==n.length){return false}r.forEach(((e,t)=>{if(e!==n[t]){return false}}));return true}else{return false}}else{return r===n}};const append$1=(e,t,r,n)=>{let a;let o;if(e.dtype&dt.MAP){if(n!=="scalar"){return errorOprnd("BAD_APPEND",n)}a=e;o=t}else{if(r!=="scalar"){return errorOprnd("BAD_APPEND",r)}a=t;o=e}if(!(a.dtype&o.dtype)){errorOprnd("MAP_APPEND")}if(!checkUnitEquality(a.unit,o.unit)){errorOprnd("UNIT_APEND")}a.value.set(o.name,o.value);return a};const convertFromBaseUnits$1=(e,t,r)=>{e=mapMap(e,(e=>Rnl.divide(e,r)));if(!Rnl.isZero(t)){e=mapMap(e,(e=>Rnl.subtract(e,t)))}return e};const convertToBaseUnits$1=(e,t,r)=>{if(!Rnl.isZero(t)){e=mapMap(e,(e=>Rnl.add(e,t)))}return mapMap(e,(e=>Rnl.multiply(e,r)))};const display$3=(e,t,r,n=false)=>{const a=e.value.plain?e.value.plain:e.value;let o="";let i="";for(const[e,n]of a.entries()){o+=formatColumnName(e)+" & ";i+=format(n,t,r)+" & "}o=o.slice(0,-3);i=i.slice(0,-3);let s="\\begin{array}{c}";if(!n){s+=o+" \\\\ \\hline "}s+=i+"\\end{array}";if(e.unit&&e.unit.name){s+="\\;"+unitTeXFromString(e.unit.name)}return s};const displayAlt$2=(e,t,r,n=false)=>{const a=e.value.plain?e.value.plain:e.value;let o="";let i="";for(const[e,n]of a.entries()){o+=e+"\t";i+=format(n,t,r)+"\t"}o=o.slice(0,-1);i=i.slice(0,-1);let s="``";if(!n){s+=o+"\n"}s+=i+"``";if(e.unit&&e.unit.name){s=`${s} '${e.unit.name}'`}return s};const singleValueFromMap=(e,t,r,n)=>{if(!e.value.has(t)){return errorOprnd("BAD_KEY",t)}const a=clone(e.value.get(t));if(!r){return{value:a,unit:e.unit,dtype:e.dtype-dt.MAP}}else if(n){return{value:a,unit:{expos:e.unit.expos},dtype:e.dtype-dt.MAP}}else{return{value:a,unit:allZeros,dtype:e.dtype-dt.MAP}}};const valueFromMap=(e,t,r)=>{for(let e=0;e<t.length;e++){if(t[e].dtype===dt.RATIONAL){return errorOprnd("NUM_KEY")}t[e]=t[e].value}if(t.length===1){const n=e.dtype&dt.RATIONAL;const a=t.length>1||r;return singleValueFromMap(e,t[0],n,a)}else{const r=new Map;for(let n=0;n<t.length;n++){r.set(t[n],e.value.get(t[n]))}return{value:r,unit:e.unit,dtype:e.dtype}}};const map=Object.freeze({append:append$1,convertFromBaseUnits:convertFromBaseUnits$1,convertToBaseUnits:convertToBaseUnits$1,display:display$3,displayAlt:displayAlt$2,valueFromMap:valueFromMap});const tt=Object.freeze({UNARY:0,BINARY:1,SUB:2,SUP:3,ACCENT:4,UNARYMINUS:5,DIV:6,PRIME:7,CURRENCY:8,ORD:9,VAR:10,NUM:11,SPACE:12,LONGVAR:13,LEFTBRACKET:14,RIGHTBRACKET:15,UNDEROVER:16,LEFTRIGHT:17,STRING:18,UNIT:19,BIN:20,ADD:21,MULT:22,REL:23,LOGIC:24,SEP:25,FUNCTION:26,ACCESSOR:28,ENVIRONMENT:29,FACTORIAL:30,SUPCHAR:31,ANGLE:32,RANGE:33,KEYWORD:34,PROPERTY:36,COMMENT:37,RETURN:38,TO:39,DATAFRAME:40,RICHTEXT:41});const minusRegEx=/^-(?![-=<>:])/;const numberRegEx$2=new RegExp(Rnl.numberPattern);const unitRegEx=/^(?:'[^']+'|[°ΩÅK])/;const texFromNumStr=(e,t)=>{let r="";if(e[2]){r="\\mathrm{"+e[2]+"}"}else if(e[5]){return texFromMixedFraction(e)}else{r=e[3];if(e[6]){r+="."+e[6]}r=formattedDecimal(r,t);if(e[8]){r+="\\%"}else if(e[7]){if(e[7].charAt(0)==="-"){r+="\\text{e-}"+e[7].slice(1)}else{r+="\\text{e}"+e[7]}}}if(e[1]){r="\\text{-}"+r}return r};const isUnary=e=>{switch(e.ttype){case tt.NUM:case tt.ORD:case tt.VAR:case tt.RIGHTBRACKET:case tt.LONGVAR:case tt.CURRENCY:case tt.SUPCHAR:case tt.PRIME:case tt.FACTORIAL:return false;default:return true}};const wordRegEx=/^(?:(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u212C\u2130\u2131\u210B\u2110\u2112\u2133\u211B\u212F\u210A\u2113\u2134]|(?:\uD835[\uDC00-\udc33\udc9c-\udccf\udd38-\udd50]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*|!in|-->|->|left\.|right\.|log10|log2)/;const words=Object.freeze({true:["true","\\mathord{\\text{true}}",tt.ORD,""],false:["false","\\mathord{\\text{false}}",tt.ORD,""],im:["im","im",tt.LONGVAR,""],cos:["cos","\\cos",tt.FUNCTION,""],cosd:["cosd","\\operatorname{\\cos_d}",tt.FUNCTION,""],if:["if","\\mathrel{\\mathrm{if}}",tt.LOGIC,""],else:["else","\\mathrel{\\mathrm{else}}",tt.LOGIC,""],elseif:["elseif","\\mathrel{\\mathrm{elseif}}",tt.LOGIC,""],and:["and","\\mathrel{\\mathrm{and}}",tt.LOGIC,""],or:["or","\\mathrel{\\mathrm{or}}",tt.LOGIC,""],for:["for","\\mathrel{\\mathrm{for}}",tt.KEYWORD,""],while:["while","\\mathrel{\\mathrm{while}}",tt.KEYWORD,""],in:["in","\\mathrel{\\mathrm{in}}",tt.REL,""],"!in":["!in","\\mathrel{\\mathrm{!in}}",tt.REL,""],break:["break","\\mathrel{\\mathrm{break}}",tt.KEYWORD,""],to:["to","\\mathbin{\\mathrm{to}}",tt.TO,""],throw:["throw","\\mathrel{\\mathrm{throw}}",tt.UNARY,""],echo:["echo","\\mathrel{\\mathrm{echo}}",tt.UNARY,""],return:["return","\\mathrel{\\mathrm{return}}",tt.RETURN,""],sqrt:["sqrt","\\sqrt",tt.UNARY,""],otherwise:["otherwise","\\mathrel{\\mathrm{otherwise}}",tt.LOGIC,""],root:["root","\\sqrt",tt.BINARY,""],sin:["sin","\\sin",tt.FUNCTION,""],sind:["sind","\\operatorname{\\sin_d}",tt.FUNCTION,""],tan:["tan","\\tan",tt.FUNCTION,""],tand:["tand","\\operatorname{\\tan_d}",tt.FUNCTION,""],cotd:["cotd","\\operatorname{\\cot_d}",tt.FUNCTION,""],secd:["secd","\\operatorname{\\sec_d}",tt.FUNCTION,""],cscd:["cscd","\\operatorname{\\csc_d}",tt.FUNCTION,""],log:["log","\\log",tt.FUNCTION,""],ln:["ln","\\ln",tt.FUNCTION,""],log10:["log10","\\log_{10}",tt.FUNCTION,""],log2:["log2","\\log_{2}",tt.FUNCTION,""],"log!":["log!","\\operatorname{log!}",tt.FUNCTION,""],pi:["pi","\\mathrm{pi}",tt.ORD,""],"π":["π","π",tt.ORD,""],"ℓ":["ℓ","ℓ",tt.VAR,""],"->":["->","→",tt.REL,""],"--\x3e":["--\x3e","\\xrightarrow",tt.UNARY,""],"<--\x3e":["<--\x3e","\\xrightleftarrows",tt.UNARY,""]});const miscRegEx=/^([/÷\u2215_:,;\t^+\\\-–−*×∘⊗⦼⊙√∛∜·.%|╏‖¦><=≈≟≠≡≤≥≅∈∉∋∌⊂⊄⊆⊈⊇⊉!¡‼¬∧∨⊻~#?⇒⟶⟵→←&@′″∀∃∫∬∮∑([{⟨⌊⎿⌈⎾〖〗⏋⌉⏌⌋⟩}\])˽∣ℂℕℚℝℤℓℏ∠¨ˆˉ˙˜▪✓\u00A0\u20D7$£¥€₨₩₪]+)/;const miscSymbols=Object.freeze({"#":["#","#",tt.COMMENT,""],"/":["/","\\dfrac{",tt.DIV,""],"//":["//","\\tfrac{",tt.DIV,""],"///":["///","/",tt.MULT,""],"∕":["∕","∕",tt.MULT,""],"÷":["÷","÷",tt.MULT,""],"./":["./","\\mathbin{.'}",tt.MULT,""],_:["_","_",tt.SUB,""],"^":["^","^",tt.SUP,""],".^":[".^","\\mathbin{.^}",tt.SUP,""],"+":["+","+",tt.ADD,""],"-":["-","-",tt.ADD,""],"–":["-","-",tt.ADD,""],"−":["-","-",tt.ADD,""],".+":[".+","\\mathbin{.+}",tt.ADD,""],".-":[".-","\\mathbin{.-}",tt.ADD,""],"*":["*","*",tt.MULT,""],"×":["×","×",tt.MULT,""],"∘":["∘","∘",tt.MULT,""],"⊗":["⊗","⊗",tt.MULT,""],".*":[".*","\\mathbin{.*}",tt.MULT,""],"√":["√","\\sqrt",tt.UNARY,""],"∛":["∛","\\sqrt[3]",tt.UNARY,""],"∜":["∜","\\sqrt[4]",tt.UNARY,""],"+-":["+-","±",tt.BIN,""],"**":["**","\\star",tt.BIN,""],"·":["·","⋅",tt.MULT,""],"...":["...","\\dots",tt.RANGE,""],"%":["%","\\%",tt.FACTORIAL,""],"-:":["-:","÷",tt.MULT,""],"=":["=","=",tt.REL,""],"≈":["≈","≈",tt.REL,""],"==":["==","⩵",tt.REL,""],"≡":["≡","≡",tt.REL,""],">":[">","\\gt",tt.REL,""],"<":["<","\\lt",tt.REL,""],"?=":["?=","≟",tt.REL,""],"≟":["≟","≟",tt.REL,""],"≠":["≠","≠",tt.REL,""],"!=":["!=","≠",tt.REL,""],"<>":["<>","≠",tt.REL,""],":=":[":=","≔",tt.REL,""],"<=":["<=","≤",tt.REL,""],"≤":["≤","≤",tt.REL,""],">=":[">=","≥",tt.REL,""],"≥":["≥","≥",tt.REL,""],"-=":["-=","≡",tt.REL,""],"~=":["~=","≅",tt.REL,""],"≅":["≅","≅",tt.REL,""],"~~":["~~","≈",tt.REL,""],"~":["~","\\sim",tt.REL,""],"=>":["=>","⇒",tt.REL,""],"⟶":["⟶","\\xrightarrow",tt.UNARY,""],"⟵":["⟵","\\xleftarrow",tt.UNARY,""],"⇒":["⇒","⇒",tt.REL,""],"<=>":["<=>","⇔",tt.REL,""],"-<":["-<","≺",tt.REL,""],">-":[">-","≻",tt.REL,""],"-<=":["-<=","⪯",tt.REL,""],">-=":[">-=","⪰",tt.REL,""],"_|_":["_|_","\\bot",tt.REL,""],"|--":["|--","⊢",tt.REL,""],"|==":["|==","\\models",tt.REL,""],"∈":["∈","∈",tt.REL,""],"∉":["∉","∉",tt.REL,""],"∋":["∋","∋",tt.REL,""],"∌":["∌","∌",tt.REL,""],"⊆":["⊆","⊆",tt.REL,""],"⊈":["⊈","⊈",tt.REL,""],"⊇":["⊇","⊇",tt.REL,""],"⊉":["⊉","⊉",tt.REL,""],"▪":["▪","\\mathrel{▪}",tt.REL,""],"!":["!","!",tt.FACTORIAL,""],"‼":["‼","!!",tt.FACTORIAL,""],"!!":["!!","!!",tt.FACTORIAL,""],"¡":["¡","¡",tt.FACTORIAL,""],"&":["&","\\mathbin{\\&}",tt.ADD,""],"&_":["&_","\\mathbin{\\underline{\\&}}",tt.ADD,""],"′":["′","'",tt.PRIME,""],"″":["″","''",tt.PRIME,""],"′′":["′′","''",tt.PRIME,""],"′′′":["′′′","'''",tt.PRIME,""],"∀":["∀","∀",tt.LOGIC,""],"∃":["∃","∃",tt.LOGIC,""],"∧":["∧","∧",tt.LOGIC,""],"∨":["∨","∨",tt.LOGIC,""],"⊻":["⊻","⊻",tt.LOGIC,""],"¬":["¬","¬",tt.UNARY,""],"&&":["&&","{\\;\\&\\&\\;}",tt.LOGIC,""],"∫":["∫","∫",tt.UNDEROVER,""],"∬":["∬","∬",tt.UNDEROVER,""],"∮":["∮","∮",tt.UNDEROVER,""],"∑":["∑","∑",tt.UNDEROVER,""],"(":["(","(",tt.LEFTBRACKET,")"],"[":["[","[",tt.LEFTBRACKET,"]"],"{":["{","\\{",tt.LEFTBRACKET,"\\}"],"{:":["{:","{",tt.LEFTBRACKET,"}"],"⟨":["⟨","⟨",tt.LEFTBRACKET,"⟩"],")":[")",")",tt.RIGHTBRACKET,""],"]":["]","]",tt.RIGHTBRACKET,""],"}":["}","\\}",tt.RIGHTBRACKET,""],"⟩":["⟩","⟩",tt.RIGHTBRACKET,""],":}":[":}","}",tt.RIGHTBRACKET,""],"|":["|","|",tt.LEFTRIGHT,""],"||":["||","\\mathbin{||}",tt.BIN,""],"\\|":["\\|","‖",tt.LEFTRIGHT,""],"‖":["‖","‖",tt.LEFTRIGHT,""],"<<":["<<","⟨",tt.LEFTBRACKET,"⟩"],">>":[">>","⟩",tt.RIGHTBRACKET,""],"⎿":["⎿","\\lfloor ",tt.LEFTBRACKET,"\\rfloor "],"⌋":["⌋","\\rfloor ",tt.RIGHTBRACKET,""],"⏌":["⏌","\\rfloor ",tt.RIGHTBRACKET,""],"⌈":["⌈","\\lceil ",tt.LEFTBRACKET,"\\rceil "],"⎾":["⎾","\\lceil ",tt.LEFTBRACKET,"\\rceil "],"⌉":["⌉","\\rceil ",tt.RIGHTBRACKET,""],"⏋":["⏋","\\rceil ",tt.RIGHTBRACKET,""],"〖":["〖","{",tt.LEFTBRACKET,"}"],"〗":["〗","}",tt.RIGHTBRACKET,""],"¦":["¦","\\mid ",tt.REL,""],"ℂ":["ℂ","ℂ",tt.ORD,""],"ℕ":["ℕ","ℕ",tt.ORD,""],"ℚ":["ℚ","ℚ",tt.ORD,""],"ℝ":["ℝ","ℝ",tt.ORD,""],"ℤ":["ℤ","ℤ",tt.ORD,""],"ℏ":["ℏ","ℏ",tt.ORD,""],"→":["→","→",tt.REL,""],"←":["←","←",tt.REL,""],">->":[">->","↣",tt.REL,""],"->>":["->>","↠",tt.REL,""],"|->":["|->","↦",tt.REL,""],"<--":["<--","\\xleftarrow",tt.UNARY,""],"==>":["==>","\\xRightarrow",tt.UNARY,""],"<==":["<==","\\xLeftarrow",tt.UNARY,""],"<--\x3e":["<--\x3e","\\xleftrightarrow",tt.UNARY,""],"<==>":["<==>","\\xLeftrightarrow",tt.UNARY,""],"∠":["∠","∠",tt.ANGLE,""],"✓":["✓","✓",tt.ORD,""],"˽":["˽","~",tt.SPACE,""],"\\;":["\\;",";\\:",tt.SEP,""],"…":["…","…",tt.ORD,""],":":[":","{:}",tt.RANGE,""],",":[",",",\\:",tt.SEP,""],"\t":["\t"," & ",tt.SEP,""],";":[";"," \\\\ ",tt.SEP,""],$:["$","\\$",tt.CURRENCY,""],"£":["£","£",tt.CURRENCY,""],"¥":["¥","¥",tt.CURRENCY,""],"€":["€","€",tt.CURRENCY,""],"₨":["₨","₨",tt.CURRENCY,""],"₩":["₩","₩",tt.CURRENCY,""],"₪":["₪","₪",tt.CURRENCY,""]});const texFunctionRegEx=/^(\\[A-Za-z]+\.?|\\([:.!\u0020]|'+))/;const texFunctions=Object.freeze({"\\aleph":["\\aleph","ℵ",tt.VAR,""],"\\beth":["\\beth","ℶ",tt.VAR,""],"\\gimel":["gimel","ℷ",tt.VAR,""],"\\daleth":["daleth","ℸ",tt.VAR,""],"\\atop":["\\atop","\\atop{",tt.DIV,""],"\\cdots":["\\cdots","⋯",tt.BIN,""],"\\vdots":["\\vdots","⋮",tt.BIN,""],"\\ddots":["\\ddots","⋱",tt.BIN,""],"\\iff":["\\iff","\\iff",tt.LOGIC,""],"\\land":["\\land","\\land",tt.BIN,""],"\\lor":["\\lor","\\lor",tt.BIN,""],"\\in":["\\in","∈",tt.REL,""],"\\notin":["\\notin","∉",tt.REL,""],"\\subset":["\\subset","⊂",tt.REL,""],"\\subseteq":["\\subseteq","⊆",tt.REL,""],"\\nsubset":["\\nsubset","⊄",tt.REL,""],"\\nsubseteq":["\\nsubseteq","⊈",tt.REL,""],"\\left.":["\\left.","\\left.",tt.LEFTBRACKET,"\\right."],"\\right.":["\\right.","\\right.",tt.RIGHTBRACKET,""],"\\mod":["\\mod","\\mod",tt.BIN,""],"\\diamond":["\\diamond","\\diamond",tt.ORD,""],"\\square":["\\square","\\square",tt.ORD,""],"\\int":["\\int","\\int",tt.UNDEROVER,""],"\\iint":["\\iint","\\iint",tt.UNDEROVER,""],"\\iiint":["\\iiint","\\iiint",tt.UNDEROVER,""],"\\oint":["\\oint","\\oint",tt.UNDEROVER,""],"\\oiint":["\\oiint","\\oiint",tt.UNDEROVER,""],"\\oiiint":["\\oiiint","\\oiiint",tt.UNDEROVER,""],"\\over":["\\over","\\dfrac{",tt.DIV],"\\sum":["\\sum","\\sum",tt.UNDEROVER,""],"\\prod":["\\prod","\\prod",tt.UNDEROVER,""],"\\quad":["\\quad","\\quad",tt.SPACE,""],"\\qquad":["\\qquad","\\qquad",tt.SPACE,""]});const accents$1=Object.freeze(["Bbb","Overrightarrow","acute","bar","bm","bold","boldsymbol","breve","check","ddot","dot","frak","grave","hat","mathbb","mathbf","mathcal","mathfrak","mathit","mathnormal","mathring","mathrm","mathscr","mathsf","mathtt","overbrace","overgroup","overleftarrow","overleftharpoon","overleftrightarrow","overline","overrightarrow","overrightharpoon","tilde","underbrace","undergroup","underleftarrow","underleftrightarrow","underline","underrightarrow","utilde","vec","widecheck","widehat","widetilde"]);const mathOperators=Object.freeze(["arccos","arcsin","arctan","arctg","arcctg","cos","cosec","cosh","cot","cotg","coth","csc","ctg","cth","det","dim","exp","gcd","lg","lim","ln","log","max","min","sec","sin","sinh","sh","sqrt","sup","tan","tanh","tg","th"]);const colors=Object.freeze(["blue","gray","green","orange","pink","purple","red"]);const unaries=Object.freeze(["bcancel","boxed","cancel","clap","color","llap","mathclap","not","operatorname","phantom","pu","rlap","sout","sqrt","tag","textbf","textit","textmd","textnormal","textrm","textsc","textsf","texttt","textup","xLeftarrow","xLeftrightarrow","xRightarrow","xcancel","xleftarrow","xleftrightarrow","xleftharpoondown","xleftharpoons","xleftharpoonup","xlongequal","xmapsto","xrightarrow","xrightharpoondown","xrightharpoonup","xrightleftarrows","xrightleftharpoons","xtofrom","xtwoheadleftarrow","xtwoheadrightarrow"]);const binaries=Object.freeze(["dfrac","frac","lower","overset","raisebox","stackrel","tag","tfrac","underset"]);const texREL=Object.freeze(["Bumpeq","Colonapprox","Coloneq","Coloneqq","Colonsim","Darr","Doteq","Downarrow","Eqcolon","Eqqcolon","Harr","Larr","Leftarrow","Leftrightarrow","Lleftarrow","Longleftarrow","Longleftrightarrow","Longrightarrow","Lrarr","Lsh","Rarr","Rightarrow","Rrightarrow","Rsh","Supset","Subset","Uarr","Uparrow","Updownarrow","Vdash","Vvdash","approx","approxeq","asymp","backepsilon","backsim","backsimeq","between","bowtie","bumpeq","circeq","circlearrowleft","circlearrowright","colonapprox","coloneq","coloneqq","colonsim","cong","curlyeqprec","curlyeqsucc","curvearrowleft","curvearrowright","dArr","darr","dashleftarrow","dashrightarrow","dashv","dblcolon","doteq","doteqdot","downarrow","downdownarrows","downharpoonleft","downharpoonright","eqcirc","eqcolon","eqqcolon","eqsim","eqslantgtr","eqslantless","equiv","fallingdotseq","frown","ge","geq","geqq","geqslant","gets","gg","ggg","gggtr","gnapprox","gneq","gneqq","gnsim","gt","gtrapprox","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","hArr","harr","hookleftarrow","hookrightarrow","iff","impliedby","implies","in","isin","Join","gets","impliedby","implies","in","lArr","larr","le","leadsto","leftarrow","leftarrowtail","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","leq","leqq","leqslant","lessapprox","lesseqgtr","lesseqqgtr","lessgtr","lesssim","ll","lll","llless","lnapprox","lneq","lneqq","lnsim","longleftarrow","longleftrightarrow","longmapsto","longrightarrow","looparrowleft","looparrowright","lrArr","lrarr","lt","lvertneqq","mapsto","mid","models","multimap","nLeftarrow","nLeftrightarrow","nRightarrow","nVDash","nVdash","ncong","ne","nearrow","neq","nexists","ngeq","ngeqq","ngeqslant","ngtr","ni","nleftarrow","nleftrightarrow","nleq","nleqq","nleqslant","nless","nmid","notin","notni","nparallel","nprec","npreceq","nrightarrow","nshortmid","nshortparallel","nsim","nsubseteq","nsubseteqq","nsucc","nsucceq","nsupseteq","nsupseteqq","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","nvDash","nvdash","nwarrow","owns","parallel","perp","pitchfork","prec","precapprox","preccurlyeq","preceq","precnapprox","precneqq","precnsim","precsim","propto","rArr","rarr","restriction","rightarrow","rightarrowtail","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","risingdotseq","searrow","shortmid","shortparallel","sim","simeq","smallfrown","smallsmile","smile","sqsubset","sqsubseteq","sqsupset","sqsupseteq","sub","sube","subseteqq","subsetneq","subsetneqq","succ","succapprox","succcurlyeq","succeq","succnapprox","succneqq","succnsim","succsim","supe","supset","supseteq","supseteqq","supsetneq","supsetneqq","swarrow","thickapprox","thicksim","to","trianglelefteq","triangleq","trianglerighteq","twoheadleftarrow","twoheadrightarrow","uArr","uarr","uparrow","updownarrow","upharpoonleft","upharpoonright","upuparrows","varpropto","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartriangle","vartriangleleft","vartriangleright","vcentcolon","vdash","vDash"]);const superRegEx=/^⁻?[²³¹⁰⁴⁵⁶⁷⁸⁹]+/;const cloneToken=e=>[e[0],e[1],e[2],e[3]];const accentFromChar$1=Object.freeze({"̀":"\\grave","́":"\\acute","̂":"\\hat","̃":"\\tilde","̄":"\\bar","̅":"\\bar","̇":"\\dot","̈":"\\ddot","̊":"\\mathring","̌":"\\check","̲":"\\underline","⃐":"\\overleftharpoon","⃑":"\\overrightharpoon","⃖":"\\overleftarrow","⃗":"\\vec","⃡":"\\overleftrightarrow"});const wideAccentFromChar=Object.freeze({"̀":"\\grave","́":"\\acute","̂":"\\widehat","̃":"\\widetilde","̄":"\\overline","̅":"\\overline","̇":"\\dot","̈":"\\ddot","̊":"\\mathring","̌":"\\check","̲":"\\underline","⃐":"\\overleftharpoon","⃑":"\\overrightharpoon","⃖":"\\overleftarrow","⃗":"\\overrightarrow","⃡":"\\overleftrightarrow"});const groupSubscript=e=>{const t=e.indexOf("_");return t===-1?e:e.slice(0,t+1)+"{"+e.slice(t+1)+"}"};const checkForTrailingAccent=e=>{const t=e.slice(-1);if(/[\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]/.test(t)){e=e.slice(0,-1);return e==="i"?accentFromChar$1[t]+"{ı}":e==="j"?accentFromChar$1[t]+"{ȷ}":e.length===1?accentFromChar$1[t]+"{"+e+"}":wideAccentFromChar[t]+"{"+e+"}"}else{return e}};const lexOneWord=(e,t)=>{const r=wordRegEx.exec(e);if(r){let n=r[0].replace(/_*$/,"");const a=e.charAt(n.length);const o=words[n];if(o&&a!=="′"){return o}else if(/^\(/.test(a)){return t.ttype===tt.ACCENT?[n,n+"}{",tt.FUNCTION,""]:n==="sqrt"?[n,"\\sqrt",tt.UNARY,""]:n==="f"?[n,n,tt.FUNCTION,""]:isIn(n,mathOperators)?[n,"\\"+n,tt.FUNCTION,""]:[n,"\\operatorname{"+groupSubscript(n)+"}",tt.FUNCTION,""]}else if(t.ttype===tt.ACCESSOR){return[n,n,tt.PROPERTY,""]}else if(/[_\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]/.test(n)){let t="";if(n.indexOf("_")===-1){t=checkForTrailingAccent(n);return[n,t,n.length>2?tt.LONGVAR:tt.VAR,""]}else{const r=n.split("_");for(let e=r.length-1;e>=0;e--){r[e]=checkForTrailingAccent(r[e]);if(e>0){r[e]="_\\text{"+r[e]+"}"}}t=r.join("");const a=/^′*/.exec(e.slice(n.length));if(a){n+=a[0];t+="'".repeat(a[0].length)}const o=t.indexOf("_");if(o>-1){t=t.slice(0,o)+"{"+t.slice(o)+"}"}return[n,t,r[0].length>1?tt.LONGVAR:tt.VAR,""]}}else if(n.length===2&n.charAt(0)==="\ud835"){return[n,n,tt.VAR,""]}else if(n.length>1){return[n,n,tt.LONGVAR,""]}else{if(n.charAt(0)==="\ud835"){return[n.substring(0,2),n.substring(0,2),tt.VAR,""]}else{return[n.charAt(0),n.charAt(0),tt.VAR,""]}}}};const lex=(e,t,r,n=false)=>{let a=0;let o="";let i;if(e.charAt(0)==='"'){a=e.indexOf('"',1);if(a>0){o=e.substring(1,a).replace(/\r?\n.*/,"");return['"'+o+'"',o,tt.STRING,""]}else{return[e,e.replace(/\r?\n.*/,""),tt.STRING,""]}}if(/^#/.test(e)){o=e.slice(2);a=o.indexOf("\n");if(a>-1){const e=o.indexOf("\n");if(e>-1&&e<a){a=e}}if(a>-1){o=o.slice(0,a)}return[`#${o}`,`\\text{\\texttt{ \\#${o}}}`,tt.COMMENT,""]}if(/^``/.test(e)){a=e.indexOf("`",e.charAt(2)==="`"?3:2);const r=a>0?e.slice(2,a):e.slice(2);const o=tablessTrim(r);let i="";if(n){i=DataFrame.quickDisplay(o)}else{const e=DataFrame.dataFrameFromTSV(o,{});if(e.dtype===dt.DATAFRAME){i=DataFrame.display(e.value,"h3",t)}else{i=map.display(e,"h3",t)}}return["``"+r+"``",i,tt.DATAFRAME,""]}if(e.charAt(0)==="`"){a=e.indexOf("`",1);if(a>0){o=e.substring(1,a).replace(/\r?\n.*/,"");return["`"+o+"`",o,tt.RICHTEXT,""]}else{return[e,e.replace(/\r?\n.*/,""),tt.RICHTEXT,""]}}if(unitRegEx.test(e)){a=e.indexOf("'",1);if(a>0){o=e.substring(1,a);return["'"+o+"'",unitTeXFromString(o),tt.UNIT,""]}else{return[e.charAt(0),e.charAt(0),tt.UNIT,""]}}i=texFunctionRegEx.exec(e);if(i){const e=i[0];o=e.substring(1);if(isIn(o,accents$1)){return[e,e,tt.ACCENT,""]}if(isIn(o,unaries)){return[e,e,tt.UNARY,""]}if(isIn(o,colors)){return[e,"\\textcolor{"+o+"}",tt.UNARY,""]}if(isIn(o,binaries)){return[e,e,tt.BINARY,""]}if(isIn(o,texREL)){return[e,e,tt.REL,""]}const t=texFunctions[e];if(t){return cloneToken(t)}return[e,e,tt.ORD,""]}if(minusRegEx.test(e)){if(isUnary(r)){const r=e.match(numberRegEx$2);if(r){o=texFromNumStr(r,t);return[r[0],o,tt.NUM,""]}}return["-","-",tt.ADD,""]}const s=e.match(numberRegEx$2);if(s){o=texFromNumStr(s,t);return[s[0],o,tt.NUM,""]}if(/^_[([{]/.test(e)){return["_","_",tt.SUB,""]}const l=lexOneWord(e,r);if(l){return cloneToken(l)}const u=superRegEx.exec(e);if(u){return[u[0],u[0],tt.SUPCHAR,""]}i=miscRegEx.exec(e);if(i){const e=i[0];for(let t=e.length;t>=1;t--){o=e.substr(0,t);if(miscSymbols[o]){return cloneToken(miscSymbols[o])}}}const c=e.charAt(0);if(c==="."&&(r.ttype===tt.VAR||r.ttype===tt.LONGVAR||r.ttype===tt.STRING||r.input==="]"||r.ttype===tt.PROPERTY)){return[".","{.}",tt.ACCESSOR,""]}return[c,addTextEscapes(c),tt.VAR,""]};const builtInFunctions=["Char","abs","acos","acosd","acosh","acot","acotd","acoth","acsc","acscd","acsch","angle","asec","asecd","asech","asin","asind","asinh","atan","atan2","atand","atanh","binomial","ceil","conj","cos","cosd","cosh","cosh","cot","cotd","coth","coth","count","csc","cscd","csch","csch","exp","factorial","fetch","floor","format","gamma","gcd","hcat","hypot","imag","isnan","length","lerp","ln","log","log10","log2","lfact","lgamma","logn","matrix2table","mod","real","rem","rms","round","roundSig","roundn","sec","secd","sech","sech","sign","sin","sind","sinh","startSvg","string","tan","tand","tanh","tanh","trace","transpose","vcat","zeros","Γ"];const builtInReducerFunctions=["accumulate","dataframe","max","mean","median","min","product","rand","range","stddev","sum","variance"];const trigFunctions=["cos","cosd","cot","cotd","csc","cscd","sec","secd","sin","sind","tand","tan"];const rationalRPN=e=>{const t=Rnl.fromString(e);return"®"+String(t[0])+"/"+String(t[1])};const checkForUnaryMinus=(e,t)=>{switch(t.ttype){case tt.NUM:case tt.ORD:case tt.VAR:case tt.RIGHTBRACKET:case tt.LONGVAR:case tt.PROPERTY:case tt.UNIT:case tt.SUPCHAR:case tt.PRIME:case tt.FACTORIAL:return e}if(e.output==="-"){return{input:"~",output:"\\text{-}",ttype:tt.UNARYMINUS}}else{return{input:"+",output:"~+",ttype:tt.UNARYMINUS}}};const numFromSuperChar={"⁻":"-","²":"2","³":"3","¹":"1","⁰":"0","⁴":"4","⁵":"5","⁶":"6","⁷":"7","⁸":"8","⁹":"9"};const numFromSupChars=e=>{let t="";for(const r of e){t+=numFromSuperChar[r]}return t};const colorSpecRegEx=/^(#([a-f0-9]{6}|[a-f0-9]{3})|[a-z]+|\([^)]+\))/i;const factors=/^[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133\uD835[({√∛∜]/;const setUpIf=(e,t,r,n)=>{const a=e.replace(/^.*\xa0/,"").replace(/§$/," ");r.push(a);e=e.length===a.length?"":e.slice(0,e.length-a.length);n.numArgs+=1;if(t==="otherwise"){e+="true"}return e};const functionExpoRegEx=/^[\^⁻⁰¹²³\u2074-\u2079]/;const openParenRegEx=/^ *\(/;const exponentOfFunction=(e,t,r)=>{let n="";if(e.charAt(0)!=="^"){n=/^⁻?[⁰¹²³\u2074-\u2079⁻]+/.exec(e)[0];n=n.split("").map((e=>numeralFromSuperScript(e))).join("")}else if(!openParenRegEx.test(e.slice(1))){n=lex(e.slice(1),t,{input:"",output:"",ttype:50})[0]}else{n="(";let t=1;for(let r=2;r<e.length;r++){const a=e.charAt(r);n+=a;if("\"'`".indexOf(a)>-1){const t=e.indexOf(a,r+1);n+=e.slice(r+1,t+1);r=t}else if("([{⟨⌈⎿⎾〖".indexOf(a)>-1){t+=1}else if(")]}⟩⌉⌋⏌〗".indexOf(a)>-1){t-=1}if(t===0){break}}}const a=n.charAt(0)==="("?n.slice(1,-1).trim():n;if(r){const e=parse(a,t,true);return[n,"{"+e[0]+"}",e[1]]}else{const e=parse(a,t,false);return[n,"{"+e+"}",""]}};const testForImplicitMult=(e,t,r)=>{if(t.length>0){const e=t[t.length-1].ttype;if(e===tt.UNARY||e===tt.BINARY){return false}if(e===tt.SUB||e===tt.SUP){if(t[t.length-1].isOnFunction){return false}}}let n=false;if(e.output){const t=e.output.charAt(e.length-1);if(")]}".indexOf(t)>-1){if((t===")"||t==="]")&&/^[([]/.test(r)){return false}else{n=true}}else{switch(e.ttype){case tt.ORD:case tt.NUM:case tt.VAR:case tt.LONGVAR:case tt.PRIME:case tt.SUP:case tt.SUPCHAR:case tt.SUB:case tt.PROPERTY:case tt.UNIT:case tt.RIGHTBRACKET:case tt.FACTORIAL:n=true;break;default:n=false}}}if(n&&nextCharIsFactor(r,e.ttype)){return true}return false};const nextCharIsFactor=(e,t)=>{const r=e.replace(leadingLaTeXSpaceRegEx,"");const n=r.charAt(0);let a=false;if(r.length>0){if(n==="|"||n==="‖");else if(/^[({[√∛∜0-9]/.test(r)&&isIn(t,[tt.ORD,tt.VAR,tt.NUM,tt.LONGVAR,tt.RIGHTBRACKET,tt.CURRENCY,tt.SUPCHAR])){return true}else{if(factors.test(n)){a=!/^(if|and|atop|or|else|elseif|otherwise|not|for|in|while|end)\b/.test(r)}}}return a};const cloneToken$1=e=>({input:e.input,output:e.output,ttype:e.ttype,closeDelim:e.closeDelim});const leadingSpaceRegEx$1=/^[ \f\r\v\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;const leadingLaTeXSpaceRegEx=/^(˽|\\quad|\\qquad)+/;const rpnPrecFromType=[12,12,15,13,16,10,7,10,12,-1,-1,-1,1,-1,0,0,-1,0,-1,14,0,6,7,5,4,1,-1,16,15,-1,14,13,9,3,2,10,-1,-1,4,3,-1,-1];const texPrecFromType=[12,12,15,13,16,10,2,10,12,2,2,2,1,2,2,0,1,1,2,14,1,2,2,1,1,1,2,-1,15,2,14,13,9,-1,1,-1,15,-1,1,-1,2,2];const dNOTHING=0;const dPAREN=1;const dFUNCTION=2;const dACCESSOR=3;const dMATRIX=4;const dVECTORFROMRANGE=5;const dDICTIONARY=6;const dCASES=7;const dBINOMIAL=8;const dSUBSCRIPT=9;const dDISTRIB=10;const parse=(e,t="1,000,000.",r=false,n=false)=>{let a="";let o="";let i={};let s={input:"",output:"",ttype:50};let l=true;let u=false;let c=0;let d=false;let m=false;let p=false;let f=false;let h=false;let g;const b=[];const y=[];const x=[{delimType:dNOTHING,isTall:false}];let R=true;let v="";let S="";let A=" ";let w=-1;const O=[];const M=e=>{if(r&&e>=0){while(y.length>0){const t=y[y.length-1].prec;if(t<e||t===13&&e===13){break}o+=y.pop().symbol+A}}};const T=(t,n)=>{if(!n){return}if(b.length===0){if(s.ttype!==tt.RIGHTBRACKET&&s.ttype!==tt.LEFTRIGHT){g={pos:c,ttype:s.ttype,closeDelim:""}}return}const l=b[b.length-1];if((t===2||t===12||t===14||t===15)&&(s.ttype!==tt.RIGHTBRACKET&&s.ttype!==tt.LEFTRIGHT)&&l.prec<t){g={pos:c,ttype:s.ttype,closeDelim:""};return}let u={};while(b[b.length-1].prec>=t&&!(b[b.length-1].prec===13&&t===13)){g=b.pop();if(g.prec===0){u=x[x.length-1];if((g.ttype===tt.LEFTBRACKET||g.ttype===tt.LEFTRIGHT)&&g.closeDelim.length>0){if(b.length>0){if(g.ttype===tt.LEFTRIGHT&&i.output===")"&&b[b.length-1].closeDelim===")"){if(u.isTall){a=a.substring(0,g.pos)+"\\middle"+a.substring(g.pos);x[x.length-1].isTall=true}g=b.pop();x.pop();u=x[x.length-1]}}if(u.delimType===dDICTIONARY&&u.open.length>3){a=a.slice(0,g.pos)+u.open+a.slice(g.pos+2);g.closeDelim=u.close}else if(u.delimType===dMATRIX){const e=a.slice(g.pos,g.pos+1)==="\\"?2:1;a=a.slice(0,g.pos)+u.open+a.slice(g.pos+e);g.closeDelim=u.close}else if(u.delimType===dCASES){a=a.slice(0,g.pos)+u.open+a.slice(g.pos+2);g.closeDelim=u.close}else if(u.delimType===dPAREN&&u.name==="("&&/^(\/|\\atop\s)/.test(e)){a=a.substring(0,g.pos)+a.substring(g.pos+1);g.closeDelim=""}else if(u.isPrecededByDiv&&u.delimType===dPAREN&&u.name==="("&&(/^[^^_!%°⁻²³¹⁰⁴⁵⁶⁷⁸⁹]/.test(e)||e.length===0)){a=a.substring(0,g.pos)+a.substring(g.pos+1);g.closeDelim=""}else if(u.isTall){if(/^\\left/.test(a.substring(g.pos))===false){a=a.substring(0,g.pos)+"\\left"+a.substring(g.pos)}if(/\\right/.test(g.closeDelim)===false){g.closeDelim="\\right"+i.output}}}}a=a.replace(/\\, *$/,"");a+=g.closeDelim;if(g.closeDelim.slice(-1)==="{"){if(g.ttype===tt.BINARY){b.push({prec:12,pos:g.pos,ttype:tt.UNARY,closeDelim:"}"});if(r){o+=A;if(y[y.length-1].symbol==="\\sqrt"){y[y.length-1].symbol="root"}}}g.ttype=tt.UNARY;s={input:"",output:"",ttype:tt.UNARY};return}if(b.length===0||g.prec===0){return}}};e=e.replace(leadingSpaceRegEx$1,"");e=e.replace(/\s+$/,"");while(e.length>0){if(e.charAt(0)==="\n"){e=e.slice(1);const t=s?s.input.slice(-1):"0";if(s.ttype===tt.COMMENT||"{[(,;+-".indexOf(t)===-1&&!/^ *[)}\]]/.test(e)){T(0,true);a+="\\\\ ";const t=/^ +/.exec(e);e=e.replace(/^ */,"");if(e.length>0&&e.charAt(0)==="="&a.indexOf("=")>-1){u=true;a+="&"}else if(t){a+="\\quad ".repeat(t[0].length-1)}}e=e.trim()}l=true;f=d&&R&&testForImplicitMult(s,b,e);if(f){const e=s.ttype;i={input:"⌧",output:[tt.LONGVAR,tt.NUM,tt.UNIT].includes(e)?"\\,":"",ttype:tt.MULT};m=false;p=false;l=false}if(l){const r=lex(e,t,s,n);i={input:r[0],output:r[1],ttype:r[2],closeDelim:r[3]};e=e.substring(i.input.length);m=leadingSpaceRegEx$1.test(e)||/^(˽|\\quad|\\qquad)+/.test(e);p=/^[ \n]/.test(e);e=e.replace(leadingSpaceRegEx$1,"");h=nextCharIsFactor(e,i.ttype)}if(i.input==="!"&&(d||!isIn(s.ttype,[tt.ORD,tt.VAR,tt.NUM,tt.LONGVAR,tt.RIGHTBRACKET,tt.SUPCHAR]))){i.ttype=tt.UNARY;i.input="¬"}switch(i.ttype){case tt.SPACE:case tt.BIN:case tt.ADD:case tt.MULT:case tt.REL:case tt.UNDEROVER:{if(i.output.length>0&&"- +".indexOf(i.output)>-1){i=checkForUnaryMinus(i,s)}if(r&&i.ttype!==tt.SPACE){if(i.output!=="\\text{-}"){o+=A}w=rpnPrecFromType[i.ttype];M(w)}const e=texPrecFromType[i.ttype];T(e,R);a+=i.output+" ";c=a.length;if(i.ttype===tt.UNDEROVER&&x.length>1){x[x.length-1].isTall=true}else if(r){y.push({prec:w,symbol:i.input})}R=true;break}case tt.ACCESSOR:case tt.ANGLE:i=checkForUnaryMinus(i,s);if(r){o+=A;w=rpnPrecFromType[i.ttype];M(w);y.push({prec:w,symbol:i.input})}T(texPrecFromType[i.ttype],R);a+=r?i.input:i.output+" ";R=true;break;case tt.NUM:case tt.ORD:T(2,R);if(r){M(-1);o+=i.ttype===tt.NUM?rationalRPN(i.input):i.input}if(d){c=a.length}if(r&&(s.ttype===tt.MULT||h&&s.ttype!==tt.DIV)){i.output="("+i.output+")"}a+=i.output+" ";R=true;if(!m&&h){T(2,R);if(r){o+=A;M(7);y.push({prec:rpnPrecFromType[tt.MULT],symbol:"⌧"})}}break;case tt.STRING:{T(2,R);const e=i.input.charAt(0);if(r){o+=e+i.output+e}if(d){c=a.length}i.output=addTextEscapes(i.output);i.output=i.output.replace(/ +$/,"\\,");a+="\\text{"+i.output+"}";R=true;break}case tt.RICHTEXT:{T(2,R);const e=i.input.charAt(0);if(r){o+=e+i.output+e}if(d){c=a.length}i.output=i.output==="`"?"`":parse(i.output,t,false);a+="{"+i.output+"}";R=true;break}case tt.DATAFRAME:T(2,R);c=a.length;a+=i.output;R=true;break;case tt.VAR:case tt.LONGVAR:{if(i.ttype===tt.LONGVAR&&s.input==="⌧"){a+="\\,"}T(7,R);if(d){c=a.length}if(!r){if(i.ttype===tt.LONGVAR){i.output="\\mathrm{"+i.output+"}"}}else if(s.input==="for"){o+='"'+i.input+'"'}else{if(/^(\.[^.]|\[)/.test(e)||i.input==="im"){i.output=i.ttype===tt.LONGVAR?"\\mathrm{"+i.output+"}":i.output}else{i.output=i.input;i.output="〖"+i.output}o+=i.input==="im"?"im":"¿"+i.input}a+=i.output+(e.charAt(0)==="."?"":" ");if(r){x[x.length-1].isTall=true}R=true;break}case tt.UNIT:{T(14,true);b.push({prec:14,pos:g.pos,ttype:tt.UNIT,closeDelim:""});if(r){M(14);o+=A+"applyUnit"+A+i.input.replace(/'/g,"")}if(!/^'?°'?$/.test(i.input)){a+="\\;"}a+=i.output;R=true;break}case tt.PROPERTY:{T(15,R);const t=i.input.indexOf("_");if(r){o+='"'+i.output+'"';a+=`\\mathrm{${i.output}}`;if(e.charAt(0)!=="."){a+=" "}}else if(t>-1){a+=i.input.substring(0,t)+"_\\mathrm{"+i.input.substring(t+1)+"}"}else{i.output=addTextEscapes(i.output);i.output=i.output.replace(/ +$/,"\\,");a+="\\text{"+i.output+"}"}R=true;break}case tt.TO:{x[x.length-1].delimType=dDISTRIB;T(1,R);c=a.length;a+=i.output;if(r){o+=A;M(3);const e=x[x.length-1].symbol;const t=e==="("?"normal":e==="["?"uniform":"lognormal";y.push({prec:3,symbol:t})}break}case tt.RANGE:{T(1,R);c=a.length;if(r&&i.input!=="..."){o+=A;M(3);y.push({prec:3,symbol:":"});if(["[",","].includes(s.input)&&/^[,\]]/.test(e)){o+=`®1/1${A}"∞"`}else if(/^end[,\]]/.test(e)){o+='"∞"';e=e.slice(3)}}const t=x[x.length-1];a+=t.delimType===dPAREN&&t.symbol==="{"?"\\colon":i.output;break}case tt.DIV:if(r){o+=A}T(2,true);M(7);if(i.input==="//"){b.push({prec:2,pos:g.pos,ttype:tt.DIV,closeDelim:"}"});a=a.substring(0,g.pos)+"\\tfrac{"+a.substring(g.pos)+"}{"}else if(i.input==="/"||i.input==="\\over"){b.push({prec:2,pos:g.pos,ttype:tt.DIV,closeDelim:"}"});a=a.substring(0,g.pos)+"\\dfrac{"+a.substring(g.pos)+"}{"}else{b.push({prec:2,pos:g.pos,ttype:tt.DIV,closeDelim:"}}"});a=a.substring(0,g.pos)+"{{"+a.substring(g.pos)+"}\\atop{";if(x[x.length-1].name==="("){x[x.length-1].delimType=dBINOMIAL}}if(r){if(i.input==="\\atop"){if(x[x.length-1].delimType===dBINOMIAL){y.push({prec:7,symbol:"()"})}}else{y.push({prec:7,symbol:i.input})}}x[x.length-1].isTall=true;c=a.length;R=false;break;case tt.SUB:{T(15,true);const e=s.ttype===tt.FUNCTION?"}{":"}";b.push({prec:15,pos:g.pos,ttype:tt.SUB,closeDelim:e});a+="_{";if(r){o+="_"}R=false;break}case tt.SUP:if(r){if(/¿e$/.test(o)){o=o.slice(0,-2)+"®27182818284590452353602874713527/10000000000000000000000000000000"}o+=A;M(13)}T(13,true);if(s.ttype===tt.RIGHTBRACKET){b.push({prec:13,pos:g.pos,ttype:tt.SUP,closeDelim:"}"})}else{b.push({prec:13,pos:c,ttype:tt.SUP,closeDelim:"}"})}if(r){y.push({prec:13,symbol:"^"})}a+="^{";R=false;break;case tt.SUPCHAR:{if(r){if(/¿e$/.test(o)){o=o.slice(0,-2)+"®27182818284590452353602874713527/10000000000000000000000000000000"}o+=A;M(13)}T(13,true);const e=numFromSupChars(i.output);if(s.ttype===tt.RIGHTBRACKET){b.push({prec:13,pos:g.pos,ttype:tt.SUP,closeDelim:"}"})}else{b.push({prec:13,pos:c,ttype:tt.SUP,closeDelim:"}"})}a+="^{"+e;if(r){y.push({prec:13,symbol:"^"});o+=rationalRPN(e)}R=true;break}case tt.FUNCTION:{T(2,R);c=a.length;if(functionExpoRegEx.test(e)){const[n,a,o]=exponentOfFunction(e,t,r);if(r&&o===`®-1/1`&&isIn(i.input,trigFunctions)){i.input="a"+i.input;i.output="\\a"+i.output.slice(1)}else{if(r){i.input+=A+o+A+"^"}i.output+="^"+a}const s=n.length+(e.charAt(0)==="^"?1:0);e=e.slice(s).trim()}if(r){y.push({prec:12,symbol:i.input});if(s.input==="⌧"){a+="×"}}v=e.charAt(0);b.push({prec:12,pos:a.length,ttype:tt.FUNCTION,closeDelim:v==="("?"":"}"});a+=i.output;a+=v==="("?"":"{";S=i.input;R=false;break}case tt.ACCENT:if(r){o+=A;M(16)}T(1,R);if(r){b.push({prec:16,pos:a.length,ttype:tt.ACCENT,closeDelim:"〗"});a+="〖"+i.input;o+="¿"+i.input}else{b.push({prec:16,pos:a.length,ttype:tt.ACCENT,closeDelim:"}"});a+=i.output+"{"}x[x.length-1].isTall=true;R=false;break;case tt.PRIME:T(15,true);if(r){o+=i.input}a=a.trim()+i.output+" ";R=true;break;case tt.BINARY:{T(1,R);c=a.length;const e=i.input==="root"?"]{":"}{";b.push({prec:12,pos:a.length,ttype:tt.BINARY,closeDelim:e});if(r){y.push({prec:12,symbol:i.output})}a+=i.output+(i.input==="root"?"[":"{");x[x.length-1].isTall=true;R=false;break}case tt.CURRENCY:{T(1,R);c=a.length;b.push({prec:12,pos:a.length,ttype:tt.CURRENCY,closeDelim:""});if(r){y.push({prec:12,symbol:"applyUnit"+A+i.input});if(s.input==="⌧"){a+="×"}}a+=i.output;R=false;break}case tt.UNARY:T(1,R);c=a.length;b.push({prec:12,pos:a.length,ttype:tt.UNARY,closeDelim:"}"});if(r){y.push({prec:12,symbol:i.input});if(s.input==="⌧"){a+="×"}}a+=i.output;if(/det|inf/.test(i.input)&&e.charAt(0)==="_"){b.push({prec:15,pos:a.length,ttype:tt.SUB,closeDelim:"}"});i={input:"_",output:"_",ttype:tt.SUB};a+="_{";e=e.substring(1);e=e.replace(/^\s+/,"")}else if(i.input==="\\color"){const t=colorSpecRegEx.exec(e);if(t){a+="{"+t[0].replace(/[()]/g,"")+"}";b.pop();e=e.slice(t[0].length).trim()}else{a+="{"}}else{a+="{"}x[x.length-1].isTall=true;R=false;break;case tt.FACTORIAL:T(14,true);b.push({prec:14,pos:g.pos,ttype:tt.FACTORIAL,closeDelim:""});if(r){M(14);o+=A+i.output}a+=i.output;R=true;break;case tt.RETURN:T(1,R);c=a.length;if(r){M(4);y.push({prec:4,symbol:"return"})}a+=i.output+" ";break;case tt.KEYWORD:T(1,true);c=a.length;if(r){M(2)}a+=i.output+" ";break;case tt.LOGIC:{T(1,R);if(r){o+=A}M(4);const e=x[x.length-1];if(i.input==="if"||i.input==="otherwise"){if(e.delimType===dPAREN&&e.name==="{"){e.delimType=dCASES;e.close="\\end{cases}";e.open="\\begin{cases}";if(r&&A===" "&&i.input==="if"){o=o.slice(0,e.rpnPos)+o.slice(e.rpnPos).replace(/\xa0/g,"§")}}}if(e.delimType===dCASES&&isIn(i.input,["if","otherwise"])){a+="&"}a+=i.output;if(r){if(e.delimType===dCASES&&(i.input==="if"||i.input==="otherwise")){o=setUpIf(o,i.input,O,e);A=" "}else{y.push({prec:4,symbol:i.input})}}c=a.length;R=true;break}case tt.LEFTBRACKET:{T(2,R);const t=s.ttype===tt.DIV;let n=false;const l={prec:0,pos:a.length,ttype:tt.LEFTBRACKET,closeDelim:i.closeDelim};if((i.input==="("||i.input==="[")&&s.ttype<5){l.closeDelim=""}else if(i.input==="("&&g.ttype===tt.BINARY){l.closeDelim=""}else{l.closeDelim=i.closeDelim;n=(i.input==="("||i.input==="[")&&s.ttype===tt.FUNCTION;a+=i.output}b.push(l);if(r){while(y.length>0&&y[y.length-1].symbol==="."){o+=A+y.pop().symbol}y.push({prec:0,symbol:i.output.trim()})}const u=/^\s*[)}\]]/.test(e)?0:1;const d={name:i.input,isTall:false,open:i.output,close:l.closeDelim,numArgs:u,numRows:u,rpnPos:o.length,isPrecededByDiv:t,isFuncParen:n,isControlWordParen:s.ttype<5};if(n){d.delimType=dFUNCTION;d.name=S}else if(s.ttype===tt.SUB){d.delimType=dSUBSCRIPT;d.name="("}else if(i.input==="{"){d.delimType=dPAREN;d.rpnLength=o.length}else if(i.input==="["&&(isIn(s.ttype,[tt.VAR,tt.LONGVAR,tt.STRING,tt.PROPERTY])||s.input==="]")){o+=A;d.delimType=dACCESSOR}else{d.delimType=dPAREN;d.name=i.input}x.push(d);S="";c=a.length;R=false;break}case tt.SEP:{T(1,R);c=a.length;const t=x[x.length-1];if(t.delimType===dPAREN&&([";","\t"].includes(i.input)||i.input===","&&p)){t.delimType=dMATRIX;const e=t.name==="["?"b":t.name==="("?"p":t.name==="{:"?"":"B";t.open=`\\begin{${e}matrix}`;t.close=`\\end{${e}matrix}`;t.isTall=true}if(r){if(s.ttype===tt.LEFTBRACKET&&t.delimType===dACCESSOR){o+="®0/1"}o+=A;M(1)}if(t.delimType===dMATRIX&&i.input===","){i.output=" & "}a+=i.output+" ";if(r){if(x.length===1){o+=i.output}else{if(i.input===";"){t.numRows+=1;if(x.length>0&&t.delimType===dCASES){A="§"}}if(t.numRows===1){if([",","\t"].includes(i.input)&&e.charAt(0)==="]"){o+="®0/1"}if(i.input===","&&t.delimType===dFUNCTION&&t.numArgs===2&&t.name==="plot"){o=o.slice(0,t.rpnPos+5)+'"'+o.slice(t.rpnPos+5,-1).replace(/\u00a0/g,"§")+'"'+A}}t.numArgs+=1}}R=true;break}case tt.RIGHTBRACKET:{T(0,true,i.output);const t=x.pop();if(t.delimType===dPAREN&&!t.isControlWordParen&&t.close!==i.output){a=a.slice(0,-1*t.close.length)+i.output}if(t.isTall&&x.length>1){x[x.length-1].isTall=true}if(r){while(y.length>0&&y[y.length-1].prec>0){o+=A+y.pop().symbol}if(t.delimType===dCASES&&s.input!=="otherwise"){o=setUpIf(o,"otherwise",O,t);A=" "}const r=y.pop();const n=t.numArgs;const a=t.numRows;const l=t.numArgs/t.numRows;const u=n===0?"":A;switch(t.delimType){case dFUNCTION:{let e=y.pop().symbol;const t=new RegExp(A+"!$");if(n===2){if(e==="log"){e="logn"}if(e==="round"){e="roundn"}if(e==="atan"){e="atan2"}if(e==="plot"){o=o.slice(0,6)+'"'+o.slice(6).replace(/\u00a0/g,"§")+'"'}}else if(e==="log"&&t.test(o)){o=o.slice(0,o.length-1)+"lfact";break}o+=e.slice(-1)==="^"?u+e:builtInFunctions.includes(e)?u+e:builtInReducerFunctions.includes(e)?u+e+A+n:u+"function"+A+e+A+n;break}case dACCESSOR:o+=u+"[]"+A+n;break;case dMATRIX:o+=u+"matrix"+A+a+A+l;break;case dCASES:A=" ";o+=A+"cases"+A+a+A;while(O.length>0){o+=O.shift()}o=o.slice(0,-1);break;case dVECTORFROMRANGE:o+=A+"matrix"+A+"1"+A+"1";break;case dDISTRIB:break;default:if(n===0&&t.open==="["){o+="matrix"+A+0+A+0}else if(n===1&&t.open==="["){o+=A+"matrix"+A+1+A+1}if(r.symbol==="\\lfloor"){o+=A+"⎿⏌"}if(r.symbol==="\\lceil"){o+=A+"⎾⏋"}}if(i.input===")"&&nextCharIsFactor(e,tt.RIGHTBRACKET)||(i.input==="]"&&/^\(/.test(e)||t.delimType===dMATRIX&&/^\[/.test(e))){o+=A;M(rpnPrecFromType[tt.MULT]);y.push({prec:rpnPrecFromType[tt.MULT],symbol:"⌧"});m=false;i={input:"⌧",output:"⌧",ttype:tt.MULT}}}c=a.length;R=g.ttype!==tt.BINARY;break}case tt.LEFTRIGHT:{T(1,R);const e=x[x.length-1];let t=false;if(b.length>0){t=b[b.length-1].ttype===tt.LEFTRIGHT||b[b.length-1].closeDelim==="⟩"||b[b.length-1].closeDelim==="\\right."||b[b.length-1].closeDelim==="\\end{vmatrix}"}if(t){e.close=i.input==="|"?"|":"‖";b[b.length-1].closeDelim=e.close;T(0,R);x.pop();if(r){while(y.length>0&&y[y.length-1].prec>0){o+=A+y.pop().symbol}o+=A+y.pop().symbol}R=g.ttype!==tt.BINARY}else if(e.delimType===dPAREN&&e.name==="{"){a+="\\mid ";c=a.length;R=true}else{b.push({prec:0,pos:a.length,ttype:tt.LEFTRIGHT,closeDelim:i.input==="|"?"|":"‖"});x.push({delimType:dPAREN,name:i.input,isTall:false,open:i.input==="|"?"|":"‖",close:i.input==="|"?"|":"‖",numArgs:1,numRows:1,rpnPos:o.length,isPrecededByDiv:s.ttype===tt.DIV});if(r){y.push({prec:0,symbol:i.output})}a+=i.input==="|"?"|":"‖";c=a.length;R=false}break}case tt.COMMENT:T(0,true);a+=i.output+" ";break;default:if(r){o+=A;M(12)}T(1,R);b.push({prec:1,pos:a.length,ttype:tt.ORD,closeDelim:""});if(r){y.push({prec:12,symbol:i.output})}a+=i.output+" ";c=a.length;R=true}s=cloneToken$1(i);d=m||i.input==="⌧"}T(0,true);if(r){while(y.length>0){o+=A+y.pop().symbol}const e=/〖[^ ().\\,;]+/g;let t;while((t=e.exec(a))!==null){if("¨ˆˉ˙˜".indexOf(t[0][1])===-1){const e=t.index+t[0].length;if(a.length>e&&a.charAt(e)==="("){a=a.slice(0,t.index)+a.slice(t.index+1)}else{a=a.substring(0,e)+"〗"+a.substring(e)}}}}a=a.replace(/ {2,}/g," ");a=a.replace(/\s+(?=[_^'!)}\]〗])/g,"");a=a.replace(/\s+$/,"");if(u){const e=a.indexOf("=");a="\\begin{aligned}"+a.slice(0,e)+"&"+a.slice(e)+"\\end{aligned}"}return r?[a,o]:a};const fromAssignment=(e,t)=>{if(e.value===null){const t=e.name?e.name:"?";return errorOprnd("NULL",t)}const r=Object.create(null);r.dtype=e.dtype;r.name=e.name;const n=e.dtype;if(n===dt.STRING||n===dt.BOOLEAN||n===dt.DRAWING||n===dt.MODULE||n===dt.NULL){r.unit=null}else if(n===dt.DATAFRAME||n&dt.MAP){r.unit=Object.freeze(clone(e.unit))}else if(e.unit&&e.unit.expos){r.unit=clone(e.unit)}else if(e.unit){r.unit=Object.create(null);if(e.unit){r.unit.name=e.unit}if(e.expos){r.unit.expos=clone(e.expos)}}else if(e.expos&&Array.isArray(e.expos)){r.unit={expos:clone(e.expos)}}else{r.unit=null}if(e.dtype&dt.QUANTITY){r.value=Object.freeze(t?clone(e.value.inBaseUnits):clone(e.value.plain));r.dtype=e.dtype-dt.QUANTITY}else if(e.dtype===dt.STRING){const t=e.value;const n=t.charAt(0);const a=t.charAt(t.length-1);r.value=n==='"'&&a==='"'?t.slice(1,-1).trim():t.trim()}else if(e.dtype===dt.DATAFRAME){r.value=e.value}else{r.value=clone(e.value)}return Object.freeze(r)};function propertyFromDotAccessor(e,t,r,n){const a=Object.create(null);if(e.dtype&dt.MAP){return map.valueFromMap(e,[t],n)}else if(e.dtype&dt.DATAFRAME){return DataFrame.range(e,[t],r,n)}else if((e.dtype===dt.STRING||e.dtype&dt.ARRAY)&&t.dtype===dt.RATIONAL){const r=Rnl.toNumber(t.value);a.value=e.value.slice(r-1,r);a.unit=e.unit;a.dtype=e.dtype;return a}else if((e.dtype===dt.STRING||e.dtype&dt.ARRAY)&&t.dtype===dt.RANGE){const r=t.value[0]-1;const n=t.value[1];const o=t.value[2]==="∞"?e.value.length:t.value[2];a.unit=e.unit;a.dtype=e.dtype;if(n===1){a.value=e.value.slice(r,o)}else{a.value=[];for(let t=r;t<o;t+=n){a.value.push(e.value[t])}}return a}else if(e.dtype===dt.MODULE){return fromAssignment(e.value[t.value],n)}else{return errorOprnd("NO_PROP",e.name)}}const display$4=(e,t="h3",r="1,000,000.")=>{if(e.size===0){return""}let n="\\begin{array}{c}";let a=false;for(const t of e.values()){if(t.unit&&t.unit.name){a=true;break}}if(a){let t="";for(const r of e.values()){if(r.unit&&r.unit.name){t+=unitTeXFromString(r.unit.name).replace("\\;\\, ","")}t+="&"}n+=t.slice(0,-1)+" \\\\ ";n+="\\hline "}let o="";for(const n of e.values()){o+=format(n.value,t,r)+" & "}n+=o.slice(0,-1);n+="\\end{array}";return n};const displayAlt$3=(e,t="h3")=>{if(e.size===0){return""}let r="``";let n=false;for(const t of e.values()){if(t.unit&&t.unit.name){n=true;break}}if(n){let t="";for(const r of e.values()){if(r.unit&&r.unit.name){t+=r.unit.name}t+=" | "}r+=t.slice(0,-3)+"\n"}let a="";for(const r of e.values()){a+=format(r.value,t,"100000.")+" | "}r=a.slice(0,-3);return r+"``"};const Tuple=Object.freeze({display:display$4,displayAlt:displayAlt$3});const numMisMatchError=e=>{const t="Error. Mismatch in number of multiple assignment.";return[`\\textcolor{firebrick}{\\text{${t}}}`,t]};const formatResult=(e,t,r,n,a)=>{if(!t){return e}if(t.dtype===dt.DRAWING){e.resultdisplay=t.value;delete e.resultdisplay.temp;return e}const o=!e.name?0:!Array.isArray(e.name)?1:e.name.length;if(e.resulttemplate.indexOf("?")>-1||e.resulttemplate.indexOf("!")>-1||e.resulttemplate.indexOf("@")>-1||e.resulttemplate.indexOf("%")>-1){e.value=t.value;let i="";let s="";if(e.resulttemplate.indexOf("!")>-1){i="";s="";return e}else if(isMatrix(t)&&t.dtype&dt.MAP){i=Matrix.displayMapOfVectors(t.value,r,n);s=Matrix.displayAltMapOfVectors(t.value,r,n)}else if(isMatrix(t)){i=Matrix.display(a||t.value.plain?{value:t.value.plain,dtype:t.dtype}:t,r,n);s=Matrix.displayAlt(a||t.value.plain?{value:t.value.plain,dtype:t.dtype}:t,r,n)}else if(t.dtype===dt.DATAFRAME){if(o>1&&o!==t.value.data.length){[i,s]=numMisMatchError()}else{const a=e.name&&Array.isArray(e.name)&&e.name.length>1;i=DataFrame.display(t.value,r,n,a);s=DataFrame.displayAlt(t.value,r,a)}}else if(t.dtype&dt.MAP){const a=e.dtype&dt.QUANTITY?t.value.plain.size:t.value.size;if(o>1&&o!==a){[i,s]=numMisMatchError()}else{const a=e.name&&Array.isArray(e.name)&&e.name.length>1;i=map.display(t,r,n,a);s=map.displayAlt(t,r,n,a)}}else if(t.dtype===dt.TUPLE){if(o>1&&o!==t.length){[i,s]=numMisMatchError()}else{i=Tuple.display(t.value,r,n);s=Tuple.displayAlt(t.value,r)}}else if(t.dtype&dt.STRING){i="\\text{"+addTextEscapes(t.value)+"}";if(t.unit){i=`\\textcolor{${t.unit}}{${i}}`}s=t.value}else if(t.dtype&dt.RICHTEXT){i=parse(t.value,n,false);s=t.value}else if(t.dtype&dt.BOOLEAN){i="\\text{"+t.value+"}";s=String(t.value)}else if(t.dtype===dt.COMPLEX){const e=t.value;[i,s]=Cpx.display(e,r,n)}else if(t.value.plain){i=format(t.value.plain,r,n);if(i.dtype&&i.dtype===dt.ERROR){i="\textcolor{firebrick}{\\text{"+i.value+"}}";s=i.value}else{s=i.replace(/{,}/g,",").replace("\\","")}}else if(Rnl.isRational(t.value)){i=format(t.value,r,n);if(i.dtype&&i.dtype===dt.ERROR){i="\\textcolor{firebrick}{\\text{"+i.value+"}}";s=i.value}else{s=i.replace(/{,}/g,",").replace("\\","")}}else if(t.dtype===dt.IMAGE){return e}else{i=t.value;s=i}e.resultdisplay=e.resulttemplate.replace(/(\? *\??|@ *@?|%%?)/,i);if(e.resulttemplate.indexOf("@")>-1){e.tex=e.resultdisplay;e.alt=e.altresulttemplate.replace(/@@?/,s)}else if(e.resulttemplate.indexOf("?")>-1){let t=e.tex.lastIndexOf("?");e.tex=e.tex.slice(0,t).replace(/\? *$/,"")+i+e.tex.slice(t+1);t=e.alt.lastIndexOf("?");e.alt=e.alt.slice(0,t).replace(/\? *$/,"")+s+e.alt.slice(t+1)}else if(e.resulttemplate.indexOf("%")>-1){let t=e.tex.lastIndexOf("%");e.tex=e.tex.slice(0,t).replace(/% *$/,"")+i+e.tex.slice(t+1);t=e.alt.lastIndexOf("%");e.alt=e.alt.slice(0,t).replace(/% *$/,"")+s+e.alt.slice(t+1)}}return e};const varRegEx=/〖[^〗]*〗/;const openParenRegEx$1=/(?:[([{|‖]|[^\\][,;:](?:\\:)?)$/;const plugValsIntoEcho=(e,t,r,n,a)=>{let o;while((o=varRegEx.exec(e))!==null){const i=o[0].replace(/[〖〗()]/g,"").trim().replace(/'/g,"′");const s=o[0].length;const l=o.index;let u;let c="";if(i.indexOf(".")>-1){const o=i.split(".");const d=o[0];if(!t[d]){return errorOprnd("V_NAME",d)}u=t[d];if(u.dtype===dt.DATAFRAME&&o.length===2){c="\\mathrm{"+t[o[0]].name+"{.}\\mathrm{"+o[1]+"}";return e.substring(0,l)+c+e.substring(l+s)}else{for(let e=1;e<o.length;e++){const i=o[e].replace("}","").replace("\\mathrm{","").trim();const s={value:i,unit:null,dtype:dt.STRING};u=propertyFromDotAccessor(u,s,t,r);if(!u){return errorOprnd("V_NAME",i)}const l={resulttemplate:"@",altresulttemplate:"@"};u.resultdisplay=formatResult(l,u,n,a).resultdisplay}}}else if(!t[i]&&i==="T"){u={dtype:dt.RATIONAL,resultdisplay:"\\text{T}"}}else if(i==="e"&&/^\^/.test(e.slice(l+3).trim())){e=e.substring(0,l)+"e"+e.substring(l+s);continue}else if(!t[i]){return errorOprnd("V_NAME",i)}else{u={dtype:t[i].dtype,resultdisplay:t[i].resultdisplay}}if(!u||!u.resultdisplay){const e=i?i:"?";return errorOprnd("NULL",e)}else if(u.error){return errorOprnd("NULL",i)}let d=true;if(isMatrix(u)||u.dtype&dt.DATAFRAME){d=false}if(r&&u.dtype&dt.QUANTITY){d=true}let m=false;if(l>0){const t=e.slice(0,l).trim();if(openParenRegEx$1.test(t)){const t=e.slice(l+i.length+2).trim();m=t.length>0&&/^([)|‖\]},;:]|\\right)/.test(t)}else if(/^\\begin{[bp]matrix}/.test(u.resultdisplay)){m=/\\end{[bp]matrix}$/.test(u.resultdisplay)}}d=d&&!m;if(u.dtype===dt.DATAFRAME||u.dtype&dt.MAP){c="\\mathrm{"+t[i].name+"}"}else{c=u.resultdisplay;if(!r){const e=c.lastIndexOf("{\\text{");if(e>-1){c=c.slice(0,e).trim().replace(/\\; *$/,"").trim()}}if(d){c=u.dtype>256?"\\left("+c+"\\right)":"("+c+")"}}e=e.substring(0,l)+c+e.substring(l+s)}return e};const negativeOne=Object.freeze(Rnl.negate(Rnl.one));const oneHalf=[BigInt(1),BigInt(2)];const thirty=[BigInt(30),BigInt(1)];const fortyFive=[BigInt(45),BigInt(1)];const sixty=[BigInt(60),BigInt(1)];const ninety=[BigInt(90),BigInt(1)];const halfPi=Object.freeze(Rnl.divide(Rnl.pi,Rnl.two));const functionExpos=(e,t)=>{const r=t.length;const n=r===1?t[0].unit.expos:null;switch(e){case"abs":case"round":case"roundn":case"sign":case"trace":case"fetch":return n;case"cos":case"sin":case"tan":case"sec":case"csc":case"cot":case"acos":case"arccos":case"asin":case"arcsin":case"atan":case"arctan":case"asec":case"arcsec":case"acsc":case"arccsc":case"acot":case"arccot":case"cosd":case"sind":case"tand":case"secd":case"cscd":case"cotd":case"acosd":case"asind":case"atand":case"asecd":case"acscd":case"acotd":case"gud":if(!unitsAreCompatible(n,allZeros)){return errorOprnd("UNIT_IN",e)}return allZeros;case"exp":case"log":case"ln":case"log10":case"log2":case"logn":case"cosh":case"sinh":case"tanh":case"sech":case"csch":case"coth":case"acosh":case"asinh":case"atanh":case"asech":case"acsch":case"acoth":case"binomial":case"gamma":case"Γ":case"lgamma":case"lfact":case"factorial":if(!unitsAreCompatible(n,allZeros)){return errorOprnd("UNIT_IN",e)}return allZeros;case"sqrt":return n.map((e=>e/2));case"gcd":case"mht":if(!unitsAreCompatible(n,allZeros)){return errorOprnd("UNIT_IN",e)}return e==="hmt"?[1,0,0,0,0,0,0,0]:allZeros;case"atan2":case"hypot":case"rms":case"ceil":case"floor":case"sum":case"mean":case"median":case"min":case"max":case"range":case"stddev":case"variance":{const r=t[0].unit.expos;for(let n=1;n<t.length;n++){const a=t[n].unit.expos;if(r.length!==a.length){return errorOprnd("UNIT_ARG",e)}for(let t=0;t<r.length;t++){if(r[t]!==a[t]){return errorOprnd("UNIT_ARG",e)}}}return e==="atan2"?allZeros:r}case"real":case"imag":case"angle":case"conj":return allZeros;case"product":{const e=clone(t[0].unit.expos);for(let r=1;r<t.length;r++){const n=t[r].unit.expos;e.map(((e,t)=>e+n[t]))}return e}default:return errorOprnd("F_NAME",e)}};const gamma=e=>{if(Rnl.isZero(e)){return errorOprnd("Γ0")}else if(Rnl.isPositive(e)&&Rnl.isInteger(e)&&Rnl.lessThan(e,Rnl.fromNumber(101))){return Rnl.factorial(Rnl.subtract(e,Rnl.one))}else if(Rnl.isNegative(e)&&Rnl.isInteger(e)){return errorOprnd("ΓPOLE")}else if(Rnl.lessThan(e,oneHalf)){return Rnl.fromNumber(Math.PI/Math.sin(Math.PI*Rnl.toNumber(e))*Rnl.toNumber(gamma(Rnl.subtract(Rnl.one,e))))}else{return Rnl.lanczos(e)}};const lgamma=e=>{if(Rnl.isZero(e)){return errorOprnd("Γ0")}if(Rnl.isNegative(e)){return errorOprnd("LOGΓ")}if(Rnl.areEqual(e,Rnl.one)||Rnl.areEqual(e,Rnl.two)){return Rnl.zero}if(Rnl.lessThanOrEqualTo(e,Rnl.fromNumber(14))){return Rnl.fromNumber(Math.log(Rnl.toNumber(gamma(e))))}else{const t=Rnl.toNumber(e);const r=(t-.5)*Math.log(t)-t+.5*Math.log(2*Math.PI)+1/(12*t)-1/(360*t**3)+1/(1260*t**5)-1/(1680*t**7)+5/(540*t**9);return Rnl.fromNumber(r)}};const binomial=(e,t)=>{if(Rnl.areEqual(e,t)){return Rnl.one}if(Rnl.isZero(e)){return Rnl.zero}if(Rnl.isNegative(t)){return Rnl.zero}if(Rnl.lessThan(e,t)){return Rnl.zero}if(Rnl.isInteger(e)&&Rnl.isInteger(t)&&Rnl.isPositive(e)&&Rnl.isPositive(t)){return Rnl.divide(Rnl.factorial(e),Rnl.multiply(Rnl.factorial(t),Rnl.factorial(Rnl.subtract(e,t))))}else if(Rnl.isInteger(e)&&Rnl.isInteger(t)&&Rnl.isPositive(t)){return Rnl.multiply(Rnl.power(negativeOne,t),multiset(Rnl.negate(e),t))}else{return Rnl.divide(gamma(Rnl.increment(e)),Rnl.multiply(gamma(Rnl.increment(t)),gamma(Rnl.increment(Rnl.subtract(e,t)))))}};const multiset=(e,t)=>binomial(Rnl.add(e,Rnl.decrement(t)),t);const piOver180=Rnl.divide(Rnl.pi,[BigInt(180),BigInt(1)]);const unary={scalar:{abs(e){return Rnl.abs(e)},angle(e){return errorOprnd("NA_REAL","angle")},real(e){return errorOprnd("NA_REAL","real")},imag(e){return errorOprnd("NA_REAL","imag")},conj(e){return errorOprnd("NA_REAL","conj")},cos(e){return Rnl.cos(e)},sin(e){return Rnl.sin(e)},tan(e){return Rnl.tan(e)},cosh(e){return Rnl.cosh(e)},sinh(e){return Rnl.sinh(e)},tanh(e){return Rnl.tanh(e)},acos(e){if(Rnl.greaterThan(Rnl.abs(e),Rnl.one)){return errorOprnd("ATRIG","acos")}return Rnl.fromNumber(Math.acos(Rnl.toNumber(e)))},asin(e){if(Rnl.greaterThan(Rnl.abs(e),Rnl.one)){return errorOprnd("ATRIG","asin")}return Rnl.fromNumber(Math.asin(Rnl.toNumber(e)))},atan(e){return Rnl.fromNumber(Math.atan(Rnl.toNumber(e)))},sec(e){return Rnl.fromNumber(1/Math.cos(Rnl.toNumber(e)))},csc(e){return Rnl.fromNumber(1/Math.sin(Rnl.toNumber(e)))},cot(e){if(Rnl.isZero(e)){return errorOprnd("COT","cotangent")}return Rnl.fromNumber(1/Math.tan(Rnl.toNumber(e)))},asec(e){if(Rnl.greaterThanOrEqualTo(Rnl.abs(e),Rnl.one)){return errorOprnd("ASEC","arcecant")}const t=Math.atn(Math.sqrt(Rnl.toNumber(Rnl.decrement(Rnl.multiply(e,e)))));return Rnl.isPositive(e)?Rnl.fromNumber(t):Rnl.fromNumber(t-Math.PI)},acot(e){if(Rnl.greaterThanOrEqualTo(Rnl.abs(e),Rnl.one)){return errorOprnd("ASEC","acot")}const t=Math.atn(1/Math.sqrt(Rnl.toNumber(Rnl.decrement(Rnl.multiply(e,e)))));return Rnl.isPositive(e)?Rnl.fromNumber(t):Rnl.fromNumber(t-Math.PI)},acsc(e){return Rnl.fromNumber(Math.atn(-Rnl.toNumber(e))+Math.PI)},exp(e){return Rnl.exp(e)},log(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log(Rnl.toNumber(e)))},ln(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log(Rnl.toNumber(e)))},log10(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log10(Rnl.toNumber(e)))},log2(e){return Rnl.isZero(e)?errorOprnd("LOG_ZERO"):Rnl.fromNumber(Math.log2(Rnl.toNumber(e)))},sech(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(2/(Math.exp(t)+Math.exp(-t)))},csch(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(2/(Math.exp(t)-Math.exp(-t)))},coth(e){const t=Rnl.toNumber(e);return Rnl.fromNumber((Math.exp(t)+Math.exp(-t))/(Math.exp(t)-Math.exp(-t)))},acosh(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log(t+Math.sqrt(t-1)*Math.sqrt(t+1)))},asinh(e){const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log(t+Math.sqrt(Math.pow(t,2)+1)))},atanh(e){const t=Rnl.toNumber(e);return Rnl.fromNumber((Math.log(1+t)-Math.log(1-t))/2)},asech(e){if(Rnl.isZero(e)){return errorOprnd("DIV")}const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log((Math.sqrt(-t*t+1)+1)/t))},ascsh(e){if(Rnl.isZero(e)){return errorOprnd("DIV")}const t=Rnl.toNumber(e);return Rnl.fromNumber(Math.log(Math.sqrt(1+1/Math.pow(t,2))+1/t))},acoth(e){if(Rnl.isZero(e)){return errorOprnd("DIV")}const t=Rnl.toNumber(e);return Rnl.fromNumber((Math.log(1+1/t)-Math.log(1-1/t))/2)},ceil(e){return Rnl.ceil(e)},floor(e){return Rnl.floor(e)},gamma(e){return gamma(e)},"Γ"(e){return gamma(e)},lgamma(e){if(Rnl.isNegative(e)||Rnl.isZero(e)){return errorOprnd("LOGΓ")}return lgamma(e)},lfact(e){if(Rnl.isNegative(e)||!Rnl.isInteger(e)){return errorOprnd("FACT")}return lgamma(Rnl.add(e,Rnl.one))},factorial(e){return Rnl.factorial(e)},sign(e){return Rnl.isPositive(e)?Rnl.one:Rnl.isZero(e)?Rnl.zero:negativeOne},cosd(e){if(Rnl.areEqual(e,ninety)){return Rnl.zero}if(Rnl.areEqual(e,sixty)){return oneHalf}return this.cos(Rnl.multiply(e,piOver180))},sind(e){if(Rnl.areEqual(e,thirty)){return oneHalf}return this.sin(Rnl.multiply(e,piOver180))},tand(e){if(Rnl.areEqual(e,fortyFive)){return Rnl.one}if(Rnl.areEqual(e,ninety)){return errorOprnd("TAN90","90°")}return this.tan(Rnl.multiply(e,piOver180))},cotd(e){return this.cot(Rnl.multiply(e,piOver180))},cscd(e){return this.csc(Rnl.multiply(e,piOver180))},secd(e){return this.sec(Rnl.multiply(e,piOver180))},acosd(e){const t=this.acos(e);return t.dtype?t:Rnl.divide(t,piOver180)},asind(e){const t=this.asin(e);return t.dtype?t:Rnl.divide(t,piOver180)},atand(e){return Rnl.divide(this.atan(e),piOver180)},acotd(e){const t=this.acot(e);return t.dtype?t:Rnl.divide(t,piOver180)},acscd(e){const t=this.acsc(e);return t.dtype?t:Rnl.divide(t,piOver180)},asecd(e){const t=this.asec(e);return t.dtype?t:Rnl.divide(t,piOver180)},Char(e){return String.fromCodePoint(Rnl.toNumber(e))},sqrt(e){const t=[BigInt(1),BigInt(2)];return Cpx.isComplex(e)||Rnl.isNegative(e)?Cpx.power([e,Rnl.zero],t):Rnl.power(e,t)},round(e){return Rnl.fromString(Rnl.toString(e,0))}},complex:{abs(e){return Cpx.abs(e)},angle(e){return Cpx.angle(e)},real(e){return e[0]},imag(e){return e[1]},conj(e){return Cpx.conjugate(e)},cos(e){return Cpx.cos(e)},sin(e){return Cpx.sin(e)},asin(e){return Cpx.asin(e)},atan(e){return Cpx.atan(e)},acos(e){return Cpx.subtract([halfPi,Rnl.zero],Cpx.asin(e))},tan(e){return Cpx.divide(Cpx.sin(e),Cpx.cos(e))},cot(e){return Cpx.divide(Cpx.cos(e),Cpx.sin(e))},sec(e){const t=Cpx.cos(e);return t.dtype?t:Cpx.inverse(t)},csc(e){const t=Cpx.sin(e);return t.dtype?t:Cpx.inverse(t)},asec(e){const t=Cpx.inverse(e);return Cpx.subtract([halfPi,Rnl.zero],Cpx.asin(t))},acot(e){return Cpx.atan(Cpx.inverse(e))},acsc(e){return Cpx.asin(Cpx.inverse(e))},exp(e){return Cpx.exp(e)},log(e){return Cpx.log(e)},ln(e){return Cpx.log(e)},log10(e){return Rnl.fromNumber(Math.log10(Rnl.toNumber(e)))},log2(e){return Rnl.fromNumber(Math.log2(Rnl.toNumber(e)))},cosh(e){return Cpx.divide(Cpx.add(Cpx.exp(e),Cpx.exp(Cpx.negate(e))),[Rnl.two,Rnl.zero])},sinh(e){return Cpx.divide(Cpx.subtract(Cpx.exp(e),Cpx.exp(Cpx.negate(e))),[Rnl.two,Rnl.zero])},tanh(e){const t=Cpx.exp(e);const r=Cpx.exp(Cpx.negate(e));return Cpx.divide(Cpx.subtract(t,r),Cpx.add(t,r))},sech(e){return Cpx.divide([Rnl.two,Rnl.zero],Cpx.add(Cpx.exp(e),Cpx.exp(Cpx.negate(e))))},csch(e){return Cpx.divide([Rnl.two,Rnl.zero],Cpx.subtract(Cpx.exp(e),Cpx.exp(Cpx.negate(e))))},coth(e){const t=Cpx.exp(e);const r=Cpx.exp(Cpx.negate(e));return Cpx.divide(Cpx.add(t,r),Cpx.subtract(t,r))},acosh(e){return Cpx.acosh(e)},asinh(e){return Cpx.asinh(e)},atanh(e){return Cpx.atanh(e)},asech(e){return Cpx.acosh(Cpx.inverse(e))},acsch(e){return Cpx.asinh(Cpx.inverse(e))},acoth(e){return Cpx.atanh(Cpx.inverse(e))},ceil(e){return errorOprnd("NA_COMPL_OP","ceil")},floor(e){return errorOprnd("NA_COMPL_OP","ceil")},gamma(e){return Cpx.gamma(e)},"Γ"(e){return Cpx.gamma(e)},lgamma(e){return errorOprnd("NA_COMPL_OP","lgamma")},factorial(e){return errorOprnd("NA_COMPL_OP","factorial")},sign(e){if(Rnl.isZero(e[1])&&Rnl.isPositive(e[0])){return Rnl.one}else if(Rnl.isZero(e[1])&&Rnl.isNegative(e[0])){return Rnl.negate(Rnl.one)}else{return Cpx.divide(e,[Cpx.abs(e),Rnl.zero])}},round(e){return errorOprnd("NA_COMPL_OP","round")}}};const binary={logn([e,t]){return Rnl.fromNumber(Math.log(Rnl.toNumber(t))/Math.log(Rnl.toNumber(e)))},roundFixed([e,t]){return Rnl.fromString(Rnl.toString(e,t))},roundSignificant([e,t]){return Rnl.fromString(Rnl.toStringSignificant(e,t))},stringFixed([e,t]){return Rnl.toString(e,t)},stringSignificant([e,t]){return Rnl.toStringSignificant(e,t)},atan2([e,t]){return Rnl.fromNumber(Math.atan2(Rnl.toNumber(t),Rnl.toNumber(e)))},hypot([e,t]){const r=Rnl.max(e,t);const n=Rnl.divide(Rnl.min(e,t),r);return Rnl.multiply(r,Rnl.sqrt(Rnl.increment(Rnl.multiply(n,n))))},gcd([e,t]){return Rnl.gcd(e,t)},rms([e,t]){return this.hypot(e,t)},binomial([e,t]){return binomial(e,t)},zeros([e,t]){return Matrix.zeros(Rnl.toNumber(e),Rnl.toNumber(t))},mod([e,t]){return Rnl.mod(e,t)},rem([e,t]){return Rnl.rem(e,t)}};const reduce={max(e){return e.reduce(((e,t)=>Rnl.max(e,t)))},min(e){return e.reduce(((e,t)=>Rnl.min(e,t)))},sum(e){return e.reduce(((e,t)=>Rnl.add(e,t)))},product(e){return e.reduce(((e,t)=>Rnl.multiply(e,t)))},mean(e){const t=this.sum(e);return Rnl.divide(t,Rnl.fromNumber(e.length))},median(e){const t=this.max(e);const r=this.min(e);return Rnl.divide(Rnl.add(t,r),Rnl.two)},range(e){return Rnl.subtract(this.max(e),this.min(e))},variance(e){const t=this.sum(e);const r=Rnl.divide(t,Rnl.fromNumber(e.length));const n=e.reduce(((e,t)=>Rnl.add(e,Rnl.pow(Rnl.subtract(t,r),Rnl.two))));return Rnl.divide(n,Rnl.subtract(Rnl.fromNumber(e.length),Rnl.one))},stddev(e){const t=this.variance(e);return Rnl.power(t,oneHalf)},accumulate(e){const t=new Array(e.length).fill(0);t[0]=e[0];for(let r=1;r<e.length;r++){t[r]=Rnl.add(t[r-1],e[r])}return t}};const lerp=(e,t)=>{for(let t=0;t<3;t++){if(!(e[t].dtype&dt.RATIONAL)){return errorOprnd("")}}let r=allZeros;if(t){if(e[0].expos!==e[1].expos){return errorOprnd("")}if(e[1].expos!==e[2].expos){return errorOprnd("")}r=e[0].expos}const n=Object.create(null);n.unit=Object.create(null);n.unit.expos=r;n.dtype=dt.RATIONAL;const a=e[0].value;const o=e[1].value;const i=e[2].value;for(let e=0;e<a.length-1;e++){if(Rnl.lessThanOrEqualTo(a[e],i)&Rnl.lessThanOrEqualTo(i,a[e+1])){const t=Rnl.divide(Rnl.subtract(o[e+1],o[e]),Rnl.subtract(a[e+1],a[e]));n.value=Rnl.add(o[e],Rnl.multiply(t,Rnl.subtract(i,a[e])));return Object.freeze(n)}}};const Functions=Object.freeze({functionExpos:functionExpos,unary:unary,binary:binary,reduce:reduce,lerp:lerp});const multivarFunction=(e,t,r)=>{if(r.length===1){const n=isVector(r[0])?r[0].value:r.dtype&dt.MATRIX?r[0].value.flat():r[0].value;const a=Functions[e][t](n);let o=r[0].dtype;if(e==="reduce"&&t!=="accumulate"){if(o&dt.MATRIX){o-=dt.MATRIX}if(o&dt.ROWVECTOR){o-=dt.ROWVECTOR}if(o&dt.COLUMNVECTOR){o-=dt.COLUMNVECTOR}}return[a,o]}else{let n=0;let a=false;let o=r[0].dtype;for(n=0;n<r.length;n++){if(isVector(r[n])){a=true;o=r[n].dtype;break}}const i=r.map((e=>e.value));if(!a){const n=Functions[e][t](i);return t==="zeros"?[n.value,n.dtype]:[n,r[0].dtype]}else{const r=clone(i);const a=[];for(let o=0;o<i[n].length;o++){r[n]=i[n][o];a.push(Functions[e][t](r))}return[a,o]}}};const equals=(e,t)=>{if(Rnl.isRational(e)&&Rnl.isRational(t)){return Rnl.areEqual(e,t)}else{return e===t}};const compare=(e,t,r,n)=>{if(t===false&&n){return false}if(t===true&&n){t=n}switch(e){case"=":return errorOprnd("BAD_EQ");case"==":case"⩵":return equals(t,r);case"≠":case"!=":case"/=":if(Rnl.isRational(t)&&Rnl.isRational(r)){return!Rnl.areEqual(t,r)}else{return t!==r}case">":if(Rnl.isRational(t)&&Rnl.isRational(r)){return Rnl.greaterThan(t,r)}else{return t>r}case"<":if(Rnl.isRational(t)&&Rnl.isRational(r)){return Rnl.lessThan(t,r)}else{return t<r}case"≥":case">=":if(Rnl.isRational(t)&&Rnl.isRational(r)){return Rnl.greaterThanOrEqualTo(t,r)}else{return t>=r}case"≤":case"<=":if(Rnl.isRational(t)&&Rnl.isRational(r)){return Rnl.lessThanOrEqualTo(t,r)}else{return t<=r}case"∈":case"in":if(typeof t==="string"&&typeof r==="string"){if(Array.from(t).length>1){return false}return r.indexOf(t)>-1}else if(Array.isArray(r)&&Rnl.isRational(r[0])&&Rnl.isRational(t)){for(let e=0;e<r.length;e++){if(Rnl.areEqual(t,r[e])){return true}}return false}else if(Array.isArray(r)&&!Array.isArray(t)){for(let e=0;e<r.length;e++){if(equals(t,r[e])){return true}}return false}else if(r instanceof Map){return r.has(t)}else if(typeof t==="string"&&typeof r==="object"&&Object.hasOwnProperty.call(r,"headings")){return Boolean(r.headings.includes(t)||r.rowMap&&Object.hasOwnProperty.call(r.rowMap,t))}else{return errorOprnd("NOT_ARRAY")}case"∋":if(typeof t==="string"&&typeof r==="string"){if(Array.from(t).length>1){return false}return r.indexOf(t)>-1}else if(t instanceof Map){return t.has(r)}else if(typeof t==="object"&&typeof r==="string"&&Object.hasOwnProperty.call(t,"headings")){return Boolean(t.headings.includes(r)||t.rowMap&&Object.hasOwnProperty.call(t.rowMap,r))}else{return errorOprnd("NO_PROP",t.name)}case"⊇":if(typeof t==="string"&&typeof r==="string"){return t.indexOf(r)>-1}else if(Array.isArray(t)&&Array.isArray(r)){for(let e=0;e<t.length;e++){if(equals(r[0],t[e])){if(e+r.length>t.length){return false}for(let n=1;n<r.length;n++){if(!equals(r[n],t[e+n])){return false}}return true}}return false}else{return errorOprnd("NOT_ARRAY")}case"∉":case"!in":if(typeof t==="string"&&typeof r==="string"){if(Array.from(t).length===1){return false}return r.indexOf(t)===-1}else if(Array.isArray(r)&&Rnl.isRational(r[0])&&Rnl.isRational(t)){for(let e=0;e<r.length;e++){if(Rnl.areEqual(t,r[e])){return false}}return true}else if(Array.isArray(r)){for(let e=0;e<r.length;e++){if(t===r[e]){return false}}return true}else if(r instanceof Map){return!r.has(t)}else if(typeof t==="string"&&typeof r==="object"&&Object.hasOwnProperty.call(r,"headings")){return!(r.headings.includes(t)||r.rowMap&&Object.hasOwnProperty.call(r.rowMap,t))}else{return errorOprnd("NOT_ARRAY")}case"∌":if(typeof t==="string"&&typeof r==="string"){if(Array.from(r).length===1){return false}return t.indexOf(r)===-1}else if(t instanceof Map){return!t.has(r)}else if(typeof t==="object"&&typeof r==="string"&&Object.hasOwnProperty.call(t,"headings")){return!(t.headings.includes(r)||t.rowMap&&Object.hasOwnProperty.call(t.rowMap,r))}else{return errorOprnd("NO_PROP",t.name)}case"⊈":if(typeof t==="string"&&typeof r==="string"){return r.indexOf(t)===-1}else if(Array.isArray(t)&&Array.isArray(r)){for(let e=0;e<r.length;e++){if(equals(t[0],r[e])){if(e+t.length>r.length){continue}let n=true;for(let a=1;a<t.length;a++){if(!equals(t[a],r[e+a])){n=false;continue}}if(!n){continue}return true}}return false}else{return errorOprnd("NOT_ARRAY")}case"⊉":if(typeof t==="string"&&typeof r==="string"){return t.indexOf(r)===-1}else if(Array.isArray(t)&&Array.isArray(r)){for(let e=0;e<t.length;e++){if(equals(r[0],t[e])){if(e+r.length>t.length){continue}let n=true;for(let a=1;a<r.length;a++){if(!equals(r[a],t[e+a])){n=false;continue}}if(!n){continue}return true}}return false}else{return errorOprnd("NOT_ARRAY")}}};const dotProduct=(e,t)=>e.map(((e,r)=>Rnl.multiply(e,t[r]))).reduce(((e,t)=>Rnl.add(e,t)));const sumOfSquares=e=>e.map((e=>Rnl.multiply(e,e))).reduce(((e,t)=>Rnl.add(e,t)));const oneTenth=[BigInt(1),BigInt(100)];const unary$1={scalar:{abs(e){return Rnl.abs(e)},norm(e){return Rnl.abs(e)},negate(e){return Rnl.negate(e)},exp(e){return Rnl.exp(e)},floor(e){return Rnl.floor(e)},ceil(e){return Rnl.ceil(e)},percent(e){return Rnl.multiply(oneTenth,e)},factorial(e){return Rnl.factorial(e)},not(e){return!e}},complex:{abs(e){return Cpx.abs(e)},norm(e){return Cpx.abs(e)},conjugate(e){return Cpx.conjugate(e)},negate(e){return Cpx.negate(e)},exp(e){return Cpx.exp(e)},floor(e){return errorOprnd("NA_COMPL_OP","floor")},ceil(e){return errorOprnd("NA_COMPL_OP","ceil")},percent(e){return errorOprnd("NA_COMPL_OP","percent")},factorial(e){return errorOprnd("NA_COMPL_OP","factorial")},not(e){return errorOprnd("NA_COMPL_OP","not")}},vector:{abs(e){return Rnl.sqrt(sumOfSquares(e))},norm(e){return Rnl.sqrt(sumOfSquares(e))},negate(e){return e.map((e=>Rnl.negate(e)))},exp(e){return e.map((e=>Rnl.exp(e)))},floor(e){return e.map((e=>Rnl.floor(e)))},ceil(e){return e.map((e=>Rnl.ceil(e)))},percent(e){return e.map((e=>Rnl.multiply(oneTenth,e)))},factorial(e){return e.map((e=>Rnl.factorial(e)))},not(e){return e.map((e=>!e))}},matrix:{abs(e){return Matrix.invert(e,true)},norm(e){if(e.length===e[0].length){let t=Rnl.zero;for(let r=0;r<e.length;r++){t=Rnl.add(t,sumOfSquares(e[r]))}return t.sqrt()}},negate(e){return e.map((e=>e.map((e=>Rnl.negate(e)))))},exp(e){return e.map((e=>e.map((e=>Rnl.exp(e)))))},floor(e){return e.map((e=>e.map((e=>Rnl.floor(e)))))},ceil(e){return e.map((e=>e.map((e=>Rnl.ceil(e)))))},percent(e){return e.map((e=>e.map((e=>Rnl.multiply(oneTenth,e)))))},factorial(e){return e.map((e=>e.map((e=>Rnl.factorial(e)))))},not(e){return e.map((e=>e.map((e=>!e))))}},map:{abs(e){return mapMap(e,(e=>Rnl.abs(e)))},negate(e){return mapMap(e,(e=>Rnl.negate(e)))},exp(e){return mapMap(e,(e=>Rnl.exp(e)))},floor(e){return mapMap(e,(e=>Rnl.floor(e)))},ceil(e){return mapMap(e,(e=>Rnl.ceil(e)))},percent(e){return mapMap(e,(e=>Rnl.multiply(oneTenth,e)))},factorial(e){return mapMap(e,(e=>Rnl.factorial(e)))},not(e){return mapMap(e,(e=>!e))}},mapWithVectorValues:{abs(e){return mapMap(e,(e=>e.map((e=>Rnl.abs(e)))))},negate(e){return mapMap(e,(e=>e.map((e=>Rnl.negate(e)))))},exp(e){return mapMap(e,(e=>e.map((e=>Rnl.exp(e)))))},floor(e){return mapMap(e,(e=>e.map((e=>Rnl.floor(e)))))},ceil(e){return mapMap(e,(e=>e.map((e=>Rnl.ceil(e)))))},percent(e){return mapMap(e,(e=>e.map((e=>Rnl.multiply(oneTenth,e)))))},factorial(e){return mapMap(e,(e=>e.map((e=>Rnl.factorial(e)))))},not(e){return mapMap(e,(e=>e.map((e=>!e))))}}};const condition={scalar(e){return e},vector(e){return e.reduce(((e,t)=>e&&t),true)},matrix(e){const t=new Array(e.length);for(let r=0;r<e.length;r++){t[r]=e[r].reduce(((e,t)=>e&&t),true)}return t.reduce(((e,t)=>e&&t),true)}};const dtype={scalar:{scalar(e,t,r){return r==="&"||r==="hcat"||r==="hcat"?e+(r==="&"||r==="hcat"?dt.ROWVECTOR:dt.COLUMNVECTOR):e},complex(e,t,r){return t},vector(e,t,r){return t},matrix(e,t,r){return t},dataFrame(e,t,r){return t},map(e,t,r){return t},mapWithVectorValues(e,t,r){return t}},complex:{scalar(e,t,r){return e},complex(e,t,r){return e}},vector:{scalar(e,t,r){return e},map(e,t,r){return t+(e&dt.ROWVECTOR)+(e&dt.COLUMNVECTOR)}},rowVector:{rowVector(e,t,r){return r==="vcat"?e-dt.ROWVECTOR+dt.MATRIX:e},columnVector(e,t,r){return e},matrix(e,t,r){return r==="multiply"?e:t}},columnVector:{rowVector(e,t,r){return r==="dot"?dt.RATIONAL:r==="cross"?e:e-dt.COLUMNVECTOR+dt.MATRIX},columnVector(e,t,r){return r==="&"?e-dt.COLUMNVECTOR+dt.MATRIX:e},matrix(e,t,r){return t}},matrix:{scalar(e,t,r){return e},rowVector(e,t,r){return e},columnVector(e,t,r){return r==="&"||r==="circ"?e:t},matrix(e,t,r){return e},map(e,t,r){return 0}},dataFrame:{scalar(e,t,r){return e}},map:{scalar(e,t,r){return e},vector(e,t,r){return e+(t&dt.ROWVECTOR)+(t&dt.COLUMNVECTOR)},matrix(e,t,r){return 0},map(e,t,r){return e}},mapWithVectorValues:{scalar(e,t,r){return e}}};const binary$1={scalar:{scalar:{add(e,t){return Rnl.add(e,t)},subtract(e,t){return Rnl.subtract(e,t)},multiply(e,t){return Rnl.multiply(e,t)},divide(e,t){return Rnl.divide(e,t)},power(e,t){return Cpx.isComplex(e)||Rnl.isNegative(e)&&Rnl.isPositive(t)&&Rnl.lessThan(t,Rnl.one)?Cpx.power([e,Rnl.zero],t):Rnl.power(e,t)},hypot(e,t){return Rnl.hypot(e,t)},rem(e,t){return Rnl.rem(e,t)},and(e,t){return e&&t},or(e,t){return e||t},xor(e,t){return e!==t},concat(e,t){return[e,t]},unshift(e,t){return[e,t]}},complex:{add(e,t){return[Rnl.add(e,t[0]),t[1]]},subtract(e,t){return[Rnl.subtract(e,t[0]),Rnl.negate(t[1])]},multiply(e,t){return[Rnl.multiply(e,t[0]),Rnl.multiply(e,t[1])]},divide(e,t){return Cpx.divide([e,Rnl.zero],t)},power(e,t){return Cpx.power([e,Rnl.zero],t)},rem(e,t){return errorOprnd("NA_COMPL_OP","rem")},and(e,t){return errorOprnd("NA_COMPL_OP","and")},or(e,t){return errorOprnd("NA_COMPL_OP","or")},xor(e,t){return errorOprnd("NA_COMPL_OP","xor")}},vector:{add(e,t){return t.map((t=>Rnl.add(e,t)))},subtract(e,t){return t.map((t=>Rnl.subtract(e,t)))},multiply(e,t){return t.map((t=>Rnl.multiply(e,t)))},divide(e,t){return t.map((t=>Rnl.divide(e,t)))},power(e,t){return t.map((t=>Rnl.power(e,t)))},rem(e,t){return t.map((t=>Rnl.rem(e,t)))},and(e,t){return t.map((t=>e&&t))},or(e,t){return t.map((t=>e||t))},xor(e,t){return t.map((t=>e!==t))},concat(e,t){return[e,...t]}},matrix:{add(e,t){return t.map((t=>t.map((t=>Rnl.add(e,t)))))},subtract(e,t){return t.map((t=>t.map((t=>Rnl.subtract(e,t)))))},multiply(e,t){return t.map((t=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return t.map((t=>t.map((t=>Rnl.divide(e,t)))))},power(e,t){return t.map((t=>t.map((t=>Rnl.power(e,t)))))},rem(e,t){return t.map((t=>t.map((t=>Rnl.rem(e,t)))))},and(e,t){return t.map((t=>t.map((t=>e&&t))))},or(e,t){return t.map((t=>t.map((t=>e||t))))},xor(e,t){return t.map((t=>t.map((t=>e!==t))))},concat(e,t){return errorOprnd("BAD_CONCAT")}},dataFrame:{multiply(e,t){t.data=t.data.map((t=>isNaN(t[0])?t:t.map((t=>{let r=t.length;if(t.indexOf(".")){r-=1}return Rnl.toStringSignificant(Rnl.multiply(e,Rnl.fromString(t)),r)}))));return t},divide(e,t){t.data=t.data.map((t=>isNaN(t[0])?t:t.map((t=>{let r=t.length;if(t.indexOf(".")){r-=1}return Rnl.toStringSignificant(Rnl.divide(e,Rnl.fromString(t)),r)}))));return t}},map:{add(e,t){return mapMap(t,(t=>Rnl.add(e,t)))},subtract(e,t){return mapMap(t,(t=>Rnl.subtract(e,t)))},multiply(e,t){return mapMap(t,(t=>Rnl.multiply(e,t)))},divide(e,t){return mapMap(t,(t=>Rnl.divide(e,t)))},power(e,t){return mapMap(t,(t=>Rnl.power(e,t)))},rem(e,t){return mapMap(t,(t=>Rnl.rem(e,t)))},and(e,t){return mapMap(t,(t=>e&&t))},or(e,t){return mapMap(t,(t=>e||t))},xor(e,t){return mapMap(t,(t=>e!==t))}},mapWithVectorValues:{add(e,t){return mapMap(t,(t=>t.map((t=>Rnl.add(e,t)))))},subtract(e,t){return mapMap(t,(t=>t.map((t=>Rnl.subtract(e,t)))))},multiply(e,t){return mapMap(t,(t=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return mapMap(t,(t=>t.map((t=>Rnl.divide(e,t)))))},power(e,t){return mapMap(t,(t=>t.map((t=>Rnl.power(e,t)))))},rem(e,t){return mapMap(t,(t=>t.map((t=>Rnl.rem(e,t)))))},and(e,t){return mapMap(t,(t=>t.map((t=>e&&t))))},or(e,t){return mapMap(t,(t=>t.map((t=>e||t))))},xor(e,t){return mapMap(t,(t=>t.map((t=>e!==t))))}}},complex:{scalar:{add(e,t){return[Rnl.add(e[0],t),e[1]]},subtract(e,t){return[Rnl.subtract(e[0],t),e[1]]},multiply(e,t){return[Rnl.multiply(e[0],t),Rnl.multiply(e[1],t)]},divide(e,t){return Cpx.divide(e,[t,Rnl.zero])},power(e,t){return Cpx.power(e,[t,Rnl.zero])},rem(e,t){return errorOprnd("NA_COMPL_OP","rem")},and(e,t){return errorOprnd("NA_COMPL_OP","and")},or(e,t){return errorOprnd("NA_COMPL_OP","or")},xor(e,t){return errorOprnd("NA_COMPL_OP","xor")}},complex:{add(e,t){return[Rnl.add(e[0],t[0]),Rnl.add(e[1],t[1])]},subtract(e,t){return[Rnl.subtract(e[0],t[0]),Rnl.subtract(e[1],t[1])]},multiply(e,t){return Cpx.multiply(e,t)},divide(e,t){return Cpx.divide(e,t)},power(e,t){return Cpx.power(e,t)},rem(e,t){return errorOprnd("NA_COMPL_OP","rem")},and(e,t){return errorOprnd("NA_COMPL_OP","and")},or(e,t){return errorOprnd("NA_COMPL_OP","or")},xor(e,t){return errorOprnd("NA_COMPL_OP","xor")}}},vector:{scalar:{add(e,t){return e.map((e=>Rnl.add(e,t)))},subtract(e,t){return e.map((e=>Rnl.subtract(e,t)))},multiply(e,t){return e.map((e=>Rnl.multiply(e,t)))},divide(e,t){return e.map((e=>Rnl.divide(e,t)))},power(e,t){return e.map((e=>Rnl.power(e,t)))},rem(e,t){return e.map((e=>Rnl.rem(e,t)))},and(e,t){return e.map((e=>e&&t))},or(e,t){return e.map((e=>e||t))},xor(e,t){return e.map((e=>e!==t))},concat(e,t){return[...e,t]}},map:{add(e,t){return mapMap(t,(t=>e.map((e=>Rnl.add(t,e)))))},subtract(e,t){return mapMap(t,(t=>e.map((e=>Rnl.subtract(t,e)))))},multiply(e,t){return mapMap(t,(t=>e.map((e=>Rnl.multiply(t,e)))))},divide(e,t){return mapMap(t,(t=>e.map((e=>Rnl.divide(t,e)))))},power(e,t){return mapMap(t,(t=>e.map((e=>Rnl.power(t,e)))))},rem(e,t){return mapMap(t,(t=>e.map((e=>Rnl.rem(t,e)))))},and(e,t){return mapMap(t,(t=>e.map((e=>t&&e))))},or(e,t){return mapMap(t,(t=>e.map((e=>t||e))))},xor(e,t){return mapMap(t,(t=>e.map((e=>t!==e))))}}},rowVector:{rowVector:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.add(e,t[r])))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.subtract(e,t[r])))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.divide(e,t[r])))},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const r=[Rnl.zero,Rnl.zero,Rnl.zero];r[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));r[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));r[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return r},multiply(e,t){if(e.length===1&&t.length===1){return[Rnl.multiply(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},circ(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.multiply(e,t[r])))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.power(e,t[r])))},modulo(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.modulo(e,t[r])))},and(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e&&t[r]))},or(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e||t[r]))},xor(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e!==t[r]))},concat(e,t){return e.concat(t)},unshift(e,t){return[e,t]}},columnVector:{add(e,t){if(e.length===1&&t.length===1){return[Rnl.add(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},subtract(e,t){if(e.length===1&&t.length===1){return[Rnl.subtract(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const r=[Rnl.zero,Rnl.zero,Rnl.zero];r[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));r[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));r[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return r},multiply(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},circ(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.multiply(e,t[r])))},power(e,t){if(e.length===1&&t.length===1){return[Rnl.power(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},modulo(e,t){if(e.length===1&&t.length===1){return[Rnl.modulo(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},and(e,t){if(e.length===1&&t.length===1){return[e[0]&&t[0]]}return errorOprnd("MIS_ELNUM")},or(e,t){if(e.length===1&&t.length===1){return[e[0]||t[0]]}return errorOprnd("MIS_ELNUM")},xor(e,t){if(e.length===1&&t.length===1){return[e[0]!==t[0]]}return errorOprnd("MIS_ELNUM")},concat(e,t){return"BAD_CONCAT"},unshift(e,t){return"BAD_CONCAT"}},matrix:{add(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,r)=>Rnl.add(e[r],t)))))},subtract(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,r)=>Rnl.subtract(e[r],t)))))},multiply(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}t=t[0].map(((e,r)=>t.map((e=>e[r]))));return t.map((t=>dotProduct(e,t)))},circ(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,r)=>Rnl.multiply(e[r],t)))))},divide(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,r)=>Rnl.divide(e[r],t)))))},power(e,t){if(e.length!==t[0].length){return errorOprnd("MIS_ELNUM")}return t.map((t=>t.map(((t,r)=>Rnl.power(e[r],t)))))},concat(e,t){if(e.length!==t[0].length){return errorOprnd("BAD_CONCAT")}return t.map(((t,r)=>[e[r],...t]))},unshift(e,t){if(e.length!==t[0].length){return errorOprnd("BAD_CONCAT")}return[e,...t]}}},columnVector:{rowVector:{add(e,t){if(e.length===1&&t.length===1){return[Rnl.add(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},subtract(e,t){if(e.length===1&&t.length===1){return[Rnl.subtract(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const r=[Rnl.zero,Rnl.zero,Rnl.zero];r[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));r[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));r[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return r},multiply(e,t){if(e[0].length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map((e=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return e.map((e=>t.map((t=>Rnl.divide(e,t)))))},circ(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.multiply(e,t[r])))},power(e,t){if(e.length===1&&t.length===1){return[Rnl.power(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},modulo(e,t){if(e.length===1&&t.length===1){return[Rnl.modulo(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},and(e,t){if(e.length===1&&t.length===1){return[e[0]&&t[0]]}return errorOprnd("MIS_ELNUM")},or(e,t){if(e.length===1&&t.length===1){return[e[0]||t[0]]}return errorOprnd("MIS_ELNUM")},xor(e,t){if(e.length===1&&t.length===1){return[e[0]!==t[0]]}return errorOprnd("MIS_ELNUM")},concat(e,t){return"BAD_CONCAT"},unshift(e,t){return"BAD_CONCAT"}},columnVector:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.add(e,t[r])))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.subtract(e,t[r])))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.divide(e,t[r])))},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return dotProduct(e,t)},cross(e,t){if(e.length!==3||t.length!==3){return errorOprnd("CROSS")}const r=[Rnl.zero,Rnl.zero,Rnl.zero];r[0]=Rnl.subtract(Rnl.multiply(e[1],t[2]),Rnl.multiply(e[2],t[1]));r[1]=Rnl.subtract(Rnl.multiply(e[2],t[0]),Rnl.multiply(e[0],t[2]));r[2]=Rnl.subtract(Rnl.multiply(e[0],t[1]),Rnl.multiply(e[1],t[0]));return r},multiply(e,t){if(e.length===1&&t.length===1){return[Rnl.multiply(e[0],t[0])]}return errorOprnd("MIS_ELNUM")},circ(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.multiply(e,t[r])))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.power(e,t[r])))},rem(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>Rnl.rem(e,t[r])))},and(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e&&t[r]))},or(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e||t[r]))},xor(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e!==t[r]))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>[e,t[r]]))},unshift(e,t){return e.concat(t)}},matrix:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>t.map((t=>Rnl.add(e[r],t)))))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>t.map((t=>Rnl.subtract(e[r],t)))))},multiply(e,t){if(t.length!==1){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>t.map((t=>Rnl.multiply(e[r],t)))))},circ(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>t.map((t=>Rnl.multiply(e[r],t)))))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>t.map((t=>Rnl.divide(e[r],t)))))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>t.map((t=>Rnl.power(e[r],t)))))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return t.map(((t,r)=>[e[r],...t]))},unshift(e,t){return"BAD_CONCAT"}}},matrix:{scalar:{add(e,t){return e.map((e=>e.map((e=>Rnl.add(e,t)))))},subtract(e,t){return e.map((e=>e.map((e=>Rnl.subtract(e,t)))))},multiply(e,t){return e.map((e=>e.map((e=>Rnl.multiply(e,t)))))},divide(e,t){return e.map((e=>e.map((e=>Rnl.divide(e,t)))))},power(e,t){if(e.length===e[0].length&&Rnl.areEqual(t,[BigInt(-1),BigInt(1)])){return Matrix.invert(e)}return e.map((e=>e.map((e=>Rnl.power(e,t)))))},rem(e,t){return e.map((e=>e.map((e=>Rnl.rem(e,t)))))}},rowVector:{add(e,t){return e.map((e=>e.map(((e,r)=>Rnl.add(e,t[r])))))},subtract(e,t){return e.map((e=>e.map(((e,r)=>Rnl.subtract(e,t[r])))))},multiply(e,t){return e.map((e=>e.map(((e,r)=>Rnl.multiply(e,t[r])))))},circ(e,t){return e.map((e=>e.map(((e,r)=>Rnl.multiply(e,t[r])))))},divide(e,t){return e.map((e=>e.map(((e,r)=>Rnl.divide(e,t[r])))))},power(e,t){return e.map((e=>e.map(((e,r)=>Rnl.power(e,t[r])))))},modulo(e,t){return e.map((e=>e.map(((e,r)=>Rnl.modulo(e,t[r])))))},unshift(e,t){if(e[0].length!==t.length){return errorOprnd("MIS_ELNUM")}return[...e,t]}},columnVector:{add(e,t){return e.map(((e,r)=>e.map((e=>Rnl.add(e,t[r])))))},subtract(e,t){return e.map(((e,r)=>e.map((e=>Rnl.subtract(e,t[r])))))},multiply(e,t){if(e[0].length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map((e=>dotProduct(e,t)))},circ(e,t){return e.map(((e,r)=>e.map((e=>Rnl.multiply(e,t[r])))))},divide(e,t){return e.map(((e,r)=>e.map((e=>Rnl.divide(e,t[r])))))},power(e,t){return e.map(((e,r)=>e.map((e=>Rnl.power(e,t[r])))))},rem(e,t){return e.map(((e,r)=>e.map((e=>Rnl.rem(e,t[r])))))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>[...e,t[r]]))}},matrix:{add(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>Rnl.add(e,t[r][n])))))},subtract(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>Rnl.subtract(e,t[r][n])))))},dot(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>dotProduct(e,t[r]))).reduce(((e,t)=>Rnl.add(e,t)))},cross(e,t){return errorOprnd("CROSS")},multiply(e,t){},circ(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>Rnl.multiply(e,t[r][n])))))},divide(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>Rnl.divide(e,t[r][n])))))},power(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>Rnl.power(e,t[r][n])))))},rem(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>Rnl.rem(e,t[r][n])))))},and(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>e&&t[r][n]))))},or(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>e||t[r][n]))))},xor(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.map(((e,n)=>e!==t[r][n]))))},concat(e,t){if(e.length!==t.length){return errorOprnd("MIS_ELNUM")}return e.map(((e,r)=>e.concat(t[r])))},unshift(e,t){if(e[0].length!==t[0].length){return errorOprnd("MIS_ELNUM")}return e.concat(t)}},map:{}},dataFrame:{multiply(e,t){e.data=e.data.map((e=>isNaN(e[0])?e:e.map((e=>{let r=e.length;if(e.indexOf(".")){r-=1}return Rnl.toStringSignificant(Rnl.multiply(t,Rnl.fromString(e)),r)}))));return e},divide(e,t){e.data=e.data.map((e=>isNaN(e[0])?e:e.map((e=>{let r=e.length;if(e.indexOf(".")){r-=1}return Rnl.toStringSignificant(Rnl.divide(t,Rnl.fromString(e)),r)}))));return e}},map:{scalar:{add(e,t){return mapMap(e,(e=>Rnl.add(e,t)))},subtract(e,t){return mapMap(e,(e=>Rnl.subtract(e,t)))},multiply(e,t){return mapMap(e,(e=>Rnl.multiply(e,t)))},divide(e,t){return mapMap(e,(e=>Rnl.divide(e,t)))},power(e,t){return mapMap(e,(e=>Rnl.power(e,t)))},rem(e,t){return mapMap(e,(e=>Rnl.rem(e,t)))},and(e,t){return mapMap(e,(e=>e&&t))},or(e,t){return mapMap(e,(e=>e||t))},xor(e,t){return mapMap(e,(e=>e!==t))}},vector:{add(e,t){return mapMap(e,(e=>t.map((t=>Rnl.add(e,t)))))},subtract(e,t){return mapMap(e,(e=>t.map((t=>Rnl.subtract(e,t)))))},multiply(e,t){return mapMap(e,(e=>t.map((t=>Rnl.multiply(e,t)))))},divide(e,t){return mapMap(e,(e=>t.map((t=>Rnl.divide(e,t)))))},power(e,t){return mapMap(e,(e=>t.map((t=>Rnl.power(e,t)))))},rem(e,t){return mapMap(e,(e=>t.map((t=>Rnl.rem(e,t)))))},and(e,t){return mapMap(e,(e=>t.map((t=>e&&t))))},or(e,t){return mapMap(e,(e=>t.map((t=>e||t))))},xor(e,t){return mapMap(e,(e=>t.map((t=>e!==t))))}},matrix:{},map:{}},mapWithVectorValues:{scalar:{add(e,t){return mapMap(e,(e=>e.map((e=>Rnl.add(e,t)))))},subtract(e,t){return mapMap(e,(e=>e.map((e=>Rnl.subtract(e,t)))))},multiply(e,t){return mapMap(e,(e=>e.map((e=>Rnl.multiply(e,t)))))},divide(e,t){return mapMap(e,(e=>e.map((e=>Rnl.divide(e,t)))))},power(e,t){return mapMap(e,(e=>e.map((e=>Rnl.power(e,t)))))},rem(e,t){return mapMap(e,(e=>e.map((e=>Rnl.rem(e,t)))))},and(e,t){return mapMap(e,(e=>e.map((e=>e&&t))))},or(e,t){return mapMap(e,(e=>e.map((e=>e||t))))},xor(e,t){return mapMap(e,(e=>e.map((e=>e!==t))))}},vector:{},matrix:{},map:{},mapWithVectorValues:{}}};const relations={scalar:{scalar:{relate(e,t,r,n){return compare(e,t,r,n)}},vector:{relate(e,t,r,n){if(n===undefined){return r.map((r=>compare(e,t,r,undefined)))}else if(typeof n!=="object"){return r.map((r=>compare(e,t,r,n)))}else if(Array.isArray(n)){return r.map(((r,a)=>compare(e,t,r,n[a])))}}},matrix:{relate(e,t,r,n){if(n===undefined){return r.map((r=>r.map((r=>compare(e,t,r,undefined)))))}else if(typeof n!=="object"){return r.map((r=>r.map((r=>compare(e,t,r,n)))))}else if(Array.isArray(n)){return r.map(((r,a)=>r.map(((r,o)=>compare(e,t,r,n[a][o])))))}}},map:{relate(e,t,r,n){if(n===undefined){return mapMap(r,(r=>compare(e,t,r,undefined)))}else if(typeof n!=="object"){return mapMap(r,(r=>compare(e,t,r,n)))}else{const a=new Map;for(const[o,i]of r.entries()){a.set(o,compare(e,t,i,n[o]))}return a}}}},vector:{scalar:{relate(e,t,r,n){if(n===undefined){return t.map((t=>compare(e,t,r,undefined)))}else if(typeof n!=="object"){return t.map((t=>compare(e,t,r,n)))}else if(Array.isArray(n)){return t.map(((t,a)=>compare(e,t,r,n[a])))}}}},rowVector:{rowVector:{relate(e,t,r,n){if(n===undefined){return t.map(((t,n)=>compare(e,t,r[n],undefined)))}}}},columnVector:{columnVector:{relate(e,t,r,n){if(n===undefined){return t.map(((t,n)=>compare(e,t,r[n],undefined)))}}}},matrix:{scalar:{relate(e,t,r,n){if(n===undefined){return t.map((t=>t.map((t=>compare(e,t,r,undefined)))))}else if(typeof n!=="object"){return t.map((t=>t.map((t=>compare(e,t,r,n)))))}else if(Array.isArray(n)){return t.map(((t,a)=>t.map(((t,o)=>compare(e,t,r,n[a][o])))))}}}}};const isDivByZero=(e,t)=>{switch(t){case"scalar":return e[1]===BigInt(0);case"vector":for(let t=0;t<e.length;t++){if(e[t][1]===BigInt(0)){return true}}return false;case"matrix":for(let t=0;t<e.length;t++){for(let r=0;r<e[0].length;r++){if(e[t][r][1]===BigInt(0)){return true}}}return false;case"map":for(const[t,r]of Object.entries(e)){if(r[1]===BigInt(0)){return true}}return false;case"mapWithVectorValues":for(const[t,r]of Object.entries(e)){for(let e=0;e<r.length;e++){if(r[e][1]===BigInt(0)){return true}}}return false;default:return false}};const Operators=Object.freeze({unary:unary$1,binary:binary$1,relations:relations,condition:condition,dtype:dtype});const wideCharRegEx=/[\uD800-\uDBFF][\uDC00-\uDFFF][\uFE00\uFE01]?/g;const textRange=(e,t)=>{if(t.dtype!==dt.RATIONAL&&t.dtype!==dt.RANGE){return errorOprnd("STR_INDEX")}const r=arrayOfRegExMatches(wideCharRegEx,e);let n="";if(r.length===0){if(t.dtype===dt.RATIONAL){n=e.charAt(Rnl.toNumber(t.value)-1)}else if(t.dtype===dt.RANGE){const r=Rnl.toNumber(t.value[0]);const a=Rnl.toNumber(t.value[1]);const o=t.value[2]==="∞"?e.length:Rnl.toNumber(t.value[2]);if(a===1){n=e.slice(r-1,o)}else{for(let t=r-1;t<o;t+=a){n+=e.charAt(t)}}}}else{let a=0;let o=0;let i="";let s=0;let l=0;let u=0;if(t.dtype===dt.RATIONAL){s=Rnl.toNumber(t.value);l=1;u=s}else{s=Rnl.toNumber(t.value[0]);l=Rnl.toNumber(t.value[1]);u=Rnl.toNumber(t.value[2])}let c=s;for(let t=0;t<r.length;t++){const s=r[t].index;i=e.slice(o,s);while(c<=u&&a+i.length>=c){n+=i[c-a-1];c+=l}if(c<=u&&a+i.length===c-1){n+=r[t].value;c+=l}if(c>u){return{value:n,unit:null,dtype:dt.STRING}}a+=i.length+1;o=s+r[t].length}if(c>=a&&c<=u){i=e.slice(o);while(c<=u&&a+i.length>=c){n+=i[c-a-1];c+=l}}else{return errorOprnd("BIGINDEX")}}return{value:n,unit:null,dtype:dt.STRING}};function insertOneHurmetVar(e,t,r){const n=e.format?e.format.value:"h15";if(!Array.isArray(t.name)){e[t.name]=t}else if(t.value===null){for(let r=0;r<t.name.length;r++){e[t.name[r]]={value:null}}}else if(isMatrix(t)){const r=Boolean(t.dtype&dt.QUANTITY);let n=t.resultdisplay;n=n.replace(/\\(begin|end){[bp]matrix}/g,"").trim();const a=n.split(/&|\\\\/);if(t.dtype&dt.MATRIX){const n=t.dtype-dt.MATRIX;const o=r?t.value.plain.length:t.value.length;const i=t.name.length/o;let s=0;for(let l=0;l<o;l++){for(let o=0;o<i;o++){const i=r?{plain:t.value.plain[l][o],inBaseUnits:t.value.inBaseUnits[l][o]}:t.value[l][o];e[t.name[l]]={name:t.name[s],value:i,resultdisplay:r?parse(a[s].trim()+" '"+t.unit+"'"):a[s].trim(),expos:t.expos,unit:r?t.unit:undefined,dtype:n};s+=1}}}else{const n=Boolean(t.dtype&dt.COLUMNVECTOR);const o=t.dtype-(n?dt.COLUMNVECTOR:dt.ROWVECTOR);for(let n=0;n<t.name.length;n++){const i=r?{plain:t.value.plain[n],inBaseUnits:t.value.inBaseUnits[n]}:t.value[n];e[t.name[n]]={name:t.name[n],value:i,resultdisplay:r?parse(a[n].trim()+" '"+t.unit+"'"):a[n].trim(),expos:t.expos,unit:r?t.unit:undefined,dtype:o}}}}else if(t.dtype&dt.MAP){const a=t.value.unit;const o=a&&a.name?a.name:undefined;const i=t.dtype-dt.MAP;let s=0;if(t.dtype&dt.QUANTITY){for(const a of t.value.plain.values()){const l={value:{plain:a},expos:t.expos,factor:t.factor,dtype:i};l.resultdisplay=format(a,n,r);if(o){l.resultdisplay+=" "+unitTeXFromString(o)}e[t.name[s]]=l;s+=1}s=0;for(const r of t.value.inBaseUnits.values()){e[t.name[s]].value.inBaseUnits=r;s+=1}}else{for(const a of t.value.values()){const l={value:a,expos:t.expos,factor:t.factor,dtype:i};l.resultdisplay=Rnl.isRational(a)?format(a,n,r):String(a);if(o){l.resultdisplay+=" "+unitTeXFromString(o)}e[t.name[s]]=l;s+=1}}}else if(t.dtype===dt.DATAFRAME){const a=t.value.data[0].length===1;for(let o=0;o<t.name.length;o++){let i=t.value.dtype[o];let s=a?undefined:[];for(let e=0;e<t.value.data[0].length;e++){const r=t.value.data[o][e];const n=i&dt.RATIONAL?Rnl.fromString(r):r;if(a){s=n}else{s.push(n)}}if(!a){i+=dt.COLUMNVECTOR}const l={value:s,unit:t.unit[t.value.units[o]],dtype:i};if(i&dt.RATIONAL&&a){l.resultdisplay=parse(format(s))}else if(i&dt.RATIONAL){l.resultdisplay=Matrix.display({value:s,dtype:i},n,r)+parse(`'${t.value.units[o]}'`)}else{l.resultdisplay=parse(s)}if(t.value.units[o]){l.value={plain:l.value};const e=t.unit[t.value.units[o]];l.value.inBaseUnits=a?Rnl.multiply(Rnl.add(l.value.plain,e.gauge),e.factor):l.value.plain.map((t=>Rnl.multiply(Rnl.add(t,e.gauge),e.factor)));l.expos=e.expos;l.resultdisplay+="\\;"+unitTeXFromString(l.unit.name)}e[t.name[o]]=l}}else if(t.dtype===dt.TUPLE){let r=0;for(const n of t.value.values()){e[t.name[r]]=n;r+=1}}else if(t.dtype===dt.MODULE){if(t.name.length!==t.value.length){return errorOprnd("MULT_MIS")}else{let r=0;for(const n of t.value.values()){const a=clone(n);e[t.name[r]]=a;r+=1}}}}const CR_NEWLINE_R=/\r\n?/g;const FORMFEED_R=/\f/g;const CLASS_R=/(?:^| )\.([a-z-]+)(?: |$)/;const WIDTH_R=/(?:^| )width="?([\d.a-z]+"?)(?: |$)/;const COL_WIDTHS_R=/(?:^| )colWidths="([^"]*)"/;const ID_R=/(?:^| )#([a-z-]+)(?: |$)/;const preprocess=function(e){return e.replace(CR_NEWLINE_R,"\n").replace(FORMFEED_R,"")};const inlineRegex=function(e){const t=function(t,r){return r.inline?e.exec(t):null};t.regex=e;return t};const blockRegex=function(e){const t=function(t,r){return r.inline?null:e.exec(t)};t.regex=e;return t};const anyScopeRegex=function(e){const t=function(t,r){return e.exec(t)};t.regex=e;return t};const UNESCAPE_URL_R=/\\([^0-9A-Za-z\s])/g;const unescapeUrl=function(e){return e.replace(UNESCAPE_URL_R,"$1")};const tightListRegEx=/(?:\n\n(?!$)|\n[ \t]+(?:\d{1,9}[.)]|[*+-]) )/;const parseList=(e,t)=>{const r=e.replace(LIST_BLOCK_END_R,"\n").match(LIST_ITEM_R);const n=!tightListRegEx.test(e);const a=r.map((function(e,r){const a=LIST_ITEM_PREFIX_R.exec(e);const o=a?a[0].length:0;const i=new RegExp("^ {1,"+o+"}","gm");const s=e.replace(i,"").replace(LIST_ITEM_PREFIX_R,"");const l=t.inline;const u=t._list;t._list=true;const c=t.isTight;t.isTight=n;t.inline=n;const d=s.replace(LIST_ITEM_END_R,"");const m=parse$1(d,t);const p=n?{type:"tight_list_item",content:[{type:"paragraph",content:m}]}:{type:"list_item",content:m};t.inline=l;t._list=u;t.isTight=c;return p}));return a};const TABLES=function(){const e=/^ *[|+] *| *[|+] *$/g;const t=/^[-=]+:$/;const r=/^:[-=]+:$/;const n=function(n){n=n.replace(e,"");const a=n.trim().split(/[|+]/);let o="";for(let e=0;e<a.length;e++){o+=r.test(a[e])?` c${String(e+1)}c`:t.test(a[e])?` c${String(e+1)}r`:""}return o.trim()};const a=(e,t)=>{if(!e&&t===""){return["","",null]}const r=CLASS_R.exec(e);let n=r?r[1]:"";if(t.length>0){n+=(n.length>0?" ":"")+t}const a=ID_R.exec(e);const o=a?a[1]:"";const i=COL_WIDTHS_R.exec(e);const s=i?i[1].split(" "):null;return[n,o,s]};const o=function(e,t,r,n,a){const o=r.inTable;r.inTable=true;const i=t(e.trim(),r);consolidate(i);r.inTable=o;const s={type:"table_row",content:[]};let l=-1;i.forEach((function(e,t){if(e.type==="text"){e.text=e.text.trim()}if(e.type==="tableSeparator"){if(t!==i.length-1){l+=1;s.content.push({type:a?"table_header":"table_cell",attrs:{colspan:1,rowspan:1,colwidth:n?[Number(n[l])]:null,background:null},content:r.inHtml?[]:[{type:"paragraph",content:[]}]})}}else if(r.inHtml){s.content[l].content.push(e)}else{s.content[l].content[0].content.push(e)}}));return s};const i=function(){return function(e,t){t.inline=true;const r=n(e[2]);const[i,s,l]=a(e[4],r);const u={type:"table",attrs:{},content:[]};if(s){u.attrs.id=s}if(i){u.attrs.class=i}if(!/^\|+$/.test(e[1])){u.content.push(o(e[1],parse$1,t,l,true))}const c=e[3].trim().split("\n");c.forEach((e=>{u.content.push(o(e,parse$1,t,l,false))}));t.inline=false;return u}};const s=/^\+:?=/;const l=/ *\n/g;const u=/^\+[-=:]+\+[+=:-]+\+$/g;const c=function(){return function(e,t){const r=e[2];const o=e[1].slice(0,-1).split(l);let i=false;let c=o.length+10;for(let e=0;e<o.length;e++){if(s.test(o[e])){i=true;c=e;break}}const d=i?o[c]:r.slice(1);const m=n(d);const[p,f,h]=a(e[3],m);const g=[0];for(let e=1;e<r.length;e++){if(r.charAt(e)==="+"){g.push(e)}}const b=[0];for(let e=1;e<o.length;e++){if(o[e].charAt(0)==="+"){b.push(e)}}let y=0;while(y<b.length){let e=0;const t=new Array(g.length).fill(true);for(let r=b[y]+1;r<o.length;r++){for(let n=0;n<g.length;n++){if(!t[n]){continue}if("+|".indexOf(o[r][g[n]])===-1){t[n]=false;continue}if(o[r][g[n]]==="+"){e=r;break}}if(e!==0){break}}if(!b.includes(e)){b.splice(y+1,0,e)}y+=1;const r=o[e];for(let e=0;e<g.length-1;e++){let t=r.slice(g[e],g[e+1]+1);if(u.test(t)){t=t.slice(1,-1);let r=t.indexOf("+")+1;let n=1;while(r>0){g.splice(e+n,0,g[e]+r);r=t.indexOf("+",r)+1;n+=1}}}}const x=g.length-1;const R=b.length-1;const v=[];for(let e=0;e<R;e++){const e=new Array(x);for(let t=0;t<x;t++){e[t]={rowspan:1}}v.push(e)}for(let e=0;e<R;e++){const t=v[e];for(let r=0;r<x;r++){const n=t[r];if(n.rowspan===0){continue}n.colspan=1;const a=o[b[e+1]-1];for(let e=r+1;e<g.length;e++){if(a.charAt(g[e])==="|"){break}n.colspan+=1;t[e].rowspan=0}for(let t=e+1;t<b.length;t++){const e=o[b[t]].charAt(g[r]+1);if("-=:".indexOf(e)>-1){break}n.rowspan+=1;for(let e=0;e<n.colspan;e++){v[t][r+e].rowspan=0}}const s=g[r]+2;const l=g[r+n.colspan]-1;const u=b[e]+1;const d=b[e+n.rowspan];let m="";for(let e=u;e<d;e++){m+=o[e].slice(s,l).replace(/ +$/,"")+"\n"}n.blob=m.slice(0,-1).replace(/^\n+/,"");n.inHeader=i&&u<c;if(h){const e=n.colspan===0?null:[];for(let t=0;t<n.colspan;t++){e.push(Number(h[r+t]))}n.width=e}}}const S={type:"table",attrs:{},content:[]};if(f){S.attrs.id=f}if(p){S.attrs.class=p}for(let e=0;e<R;e++){S.content.push({type:"table_row",content:[]});for(let r=0;r<x;r++){if(v[e][r].rowspan===0){continue}const n=v[e][r];t.inline=false;let a=parse$1(n.blob,t);if(t.inHtml&&a.length===1&&a[0].type==="paragraph"){a=a[0].content}if(a.length===1&&a[0].type==="null"){a=[]}S.content[e].content.push({type:n.inHeader?"table_header":"table_cell",attrs:{colspan:n.colspan,rowspan:n.rowspan,colwidth:h?n.width:null,background:null},content:a})}}t.inline=false;return S}};return{parsePipeTable:i(),PIPE_TABLE_REGEX:/^(\|.*)\n\|([-:]+[-| :]*)\n((?:\|.*(?:\n|$))*)(?:\{([^\n}]+)\}\n)?\n*/,parseGridTable:c(),GRID_TABLE_REGEX:/^((\+(?:[-:=]+\+)+)\n(?:[+|][^\n]+[+|] *\n)+)(?:\{([^\n}]+)\}\n)?\n*/}}();const LINK_INSIDE="(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*";const LINK_HREF_AND_TITLE="\\s*<?((?:\\([^)]*\\)|[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*";const linkIndex=e=>{for(let t=0;t<e.length;t++){if(e[t].type==="link"){return t}}};const parseRef=function(e,t,r){let n=e[2]?e[2]:e[1];n=n.replace(/\s+/g," ");if(t._defs&&t._defs[n]){const e=t._defs[n];if(r.type==="figure"){r={type:"figure",content:[{type:"figimg",attrs:e.attrs},{type:"figcaption",content:parseInline(r.attrs.alt,t)}]};r.content[0].attrs.src=e.target}else if(r.type==="image"){r.attrs=e.attrs;r.attrs.src=e.target}else{r.attrs.href=e.target}}return r};const parseTextMark=(e,t,r)=>{const n=parseInline(e,t);if(Array.isArray(n)&&n.length===0){return n}consolidate(n);for(const e of n){if(e.marks){e.marks.push({type:r})}else{e.marks=[{type:r}]}}return n};const BLOCK_HTML=/^ *(?:<(head|h[1-6]|p|pre|script|style|table)[\s>][\s\S]*?(?:<\/\1>[^\n]*\n)|<\/?(?:body|details|(div|input|label)(?: [^>]+)?|!DOCTYPE[a-z ]*|html[a-z ="]*|br|dl(?: class="[a-z-]+")?|li|main[a-z\- ="]*|nav|ol|ul(?: [^>]+)?)\/?>[^\n]*?(?:\n|$))/;const rules=new Map;rules.set("html",{isLeaf:true,match:blockRegex(BLOCK_HTML),parse:function(e,t){if(!t.inHtml){return null}return{type:"html",text:e[0]}}});rules.set("htmlComment",{isLeaf:true,match:blockRegex(/^ *<!--[^>]+-->[^\n]*\n/),parse:function(e,t){return{type:"null"}}}),rules.set("lheading",{isLeaf:false,match:blockRegex(/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/),parse:function(e,t){return{type:"heading",attrs:{level:e[2]==="="?1:2},content:parseInline(e[1].trim(),t)}}});rules.set("heading",{isLeaf:false,match:blockRegex(/^ *(#{1,6})([^\n]+?)#* *(?:\n *)+\n/),parse:function(e,t){return{attrs:{level:e[1].length},content:parseInline(e[2].trim(),t)}}});rules.set("dt",{isLeaf:false,match:blockRegex(/^(([^\n]*)\n)(?=<dd>|\n:)/),parse:function(e,t){return{content:parseInline(e[2].trim(),t)}}});rules.set("horizontal_rule",{isLeaf:true,match:blockRegex(/^( *[-*_]){3,} *(?:\n *)+\n/),parse:function(e,t,r){return{type:"horizontal_rule"}}});rules.set("codeBlock",{isLeaf:true,match:blockRegex(/^(?:(?:\t| {4})[^\n]+\n*)+(?:\n *)+\n/),parse:function(e,t){const r=e[0].replace(/^(\t| {4})/gm,"").replace(/\n+$/,"");return{type:"code_block",content:[{type:"text",text:r}]}}});rules.set("fence",{isLeaf:true,match:blockRegex(/^(```|~~~) *(?:(\S+) *)?\n([\s\S]+?)\n?\1 *(?:\n *)+\n/),parse:function(e,t){return{type:"code_block",content:[{type:"text",text:e[3]}]}}});rules.set("blockquote",{isLeaf:false,match:blockRegex(/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/),parse:function(e,t){const r=e[0].replace(/^ *> ?/gm,"");return{content:parse$1(r,t)}}});rules.set("ordered_list",{isLeaf:false,match:anyScopeRegex(/^( {0,3})(\d{1,9}[.)]) [\s\S]+?(?:\n{2,}(?! )(?!\1(?:\d{1,9}\.) )\n*|\s*$)/),parse:function(e,t){const r=Number(e[2].replace(/\) *$/,"").trim());return{attrs:{order:r},content:parseList(e[0],t,e[1])}}});rules.set("bullet_list",{isLeaf:false,match:anyScopeRegex(/^( {0,3})([*+-]) [\s\S]+?(?:\n{2,}(?! )(?!\1(?:[*+-]) )\n*|\s*$)/),parse:function(e,t){return{content:parseList(e[0],t,e[1])}}});rules.set("dd",{isLeaf:false,match:blockRegex(/^:( +)[\s\S]+?(?:\n{2,}(?! |:)(?!\1)\n*|\s*$)/),parse:function(e,t){let r=" "+e[0].slice(1);const n=1+e[1].length;const a=new RegExp("^ {"+n+","+n+"}","gm");r=r.replace(a,"");return{content:parse$1(r,t)}}});rules.set("special_div",{isLeaf:false,match:blockRegex(/^(?:{(centered|header|indented)} *\n)(> {2}[\s\S]+?(?:\n{2,}(?![> ] {2})\n*|\s*$))/),parse:function(e,t){let r=" "+e[2].slice(1);r=r.replace(/^ {3}/gm,"");return{type:e[1],content:parse$1(r,t)}}});rules.set("figure",{isLeaf:true,match:blockRegex(/^!!\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\] *(?:\n *)+\n/),parse:function(e,t){return parseRef(e,t,{type:"figure",attrs:{alt:e[1]}})}});rules.set("def",{isLeaf:true,match:blockRegex(/^\[([^\]\n]+)\]: *<?([^\n>]*)>? *\n(?:\{([^\n}]*)\}\n)?/),parse:function(e,t){return{type:"null"}}});rules.set("toc",{isLeaf:true,match:blockRegex(/^{\.toc start=(\d) end=(\d)}\n/),parse:function(e,t){return{attrs:{start:Number(e[1]),end:Number(e[2]),body:[]}}}});rules.set("pipeTable",{isLeaf:false,match:blockRegex(TABLES.PIPE_TABLE_REGEX),parse:TABLES.parsePipeTable});rules.set("gridTable",{isLeaf:false,match:blockRegex(TABLES.GRID_TABLE_REGEX),parse:TABLES.parseGridTable});rules.set("displayTeX",{isLeaf:true,match:blockRegex(/^\$\$\n?((?:\\[\s\S]|[^\\])+?)\n?\$\$ *\n/),parse:function(e,t){const r=e[1].trim();return{type:"tex",content:"",attrs:{tex:r,displayMode:true}}}});rules.set("newline",{isLeaf:true,match:blockRegex(/^(?:\n *)*\n/),parse:function(){return{type:"null"}}});rules.set("paragraph",{isLeaf:false,match:blockRegex(/^({comment}\n)?((?:[^\n]|\n(?! *\n))+)(?:\n *)+\n/),parse:function(e,t){const r=e[1]?"comment":"paragraph";return{type:r,content:parseInline(e[2],t)}}});rules.set("escape",{isLeaf:true,match:inlineRegex(/^\\([^0-9A-Za-z\s])/),parse:function(e,t){return{type:"text",text:e[1]}}});rules.set("tableSeparator",{isLeaf:true,match:function(e,t){if(!t.inTable){return null}return/^ *\| */.exec(e)},parse:function(){return{type:"tableSeparator"}}});rules.set("link",{isLeaf:true,match:inlineRegex(new RegExp("^\\[("+LINK_INSIDE+")\\]\\("+LINK_HREF_AND_TITLE+"\\)")),parse:function(e,t){const r=parseTextMark(e[1],t,"link")[0];const n=linkIndex(r.marks);r.marks[n].attrs={href:unescapeUrl(e[2])};return r}});rules.set("image",{isLeaf:true,match:inlineRegex(new RegExp("^!\\[("+LINK_INSIDE+")\\]\\("+LINK_HREF_AND_TITLE+"\\)")),parse:function(e,t){return{attrs:{alt:e[1],src:unescapeUrl(e[2])}}}});rules.set("reflink",{isLeaf:true,match:inlineRegex(/^\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\]/),parse:function(e,t){const r=e[2]?e[2]:e[1];const n=parseTextMark(e[1],t,"link")[0];const a=linkIndex(n.marks);n.marks[a].attrs={href:t._defs[r].target};return n}});rules.set("refimage",{isLeaf:true,match:inlineRegex(/^!\[((?:(?:\\[\s\S]|[^\\])+?)?)\]\[([^\]]*)\]/),parse:function(e,t){return parseRef(e,t,{type:"image",attrs:{alt:e[1]}})}});rules.set("autolink",{isLeaf:true,match:inlineRegex(/^<([^: >]+:\/[^ >]+)>/),parse:function(e,t){const r=parseTextMark(e[1],t,"link")[0];const n=linkIndex(r.marks);r.marks[n].attrs={href:unescapeUrl(e[1])};return r}});rules.set("code",{isLeaf:true,match:inlineRegex(/^(`+)([\s\S]*?[^`])\1(?!`)/),parse:function(e,t){const r=e[2].trim();return[{type:"text",text:r,marks:[{type:"code"}]}]}});rules.set("tex",{isLeaf:true,match:inlineRegex(/^\$((?:[^\s][\S\s]*?)?(?:[^\s\\]))\$(?![0-9])/),parse:function(e,t){const r=e[1].trim();return{type:"tex",content:"",attrs:{tex:r,displayMode:false}}}});rules.set("calculation",{isLeaf:true,match:anyScopeRegex(/^(?:¢(`+)([\s\S]*?[^`])\1(?!`)|¢¢\n?((?:\\[\s\S]|[^\\])+?)\n?¢¢)/),parse:function(e,t){if(e[2]){let t=e[2].trim();if(!/^(?:function|draw\()/.test(t)&&t.indexOf("``")===-1){t=t.replace(/\n/g," ")}return{content:"",attrs:{entry:t}}}else{const t=e[3].trim();return{content:"",attrs:{entry:t,displayMode:true}}}}});rules.set("em",{isLeaf:true,match:inlineRegex(/^([_*])(?!\s|\1)((?:\\[\s\S]|[^\\])+?)\1/),parse:function(e,t){return parseTextMark(e[2],t,"em")}});rules.set("strong",{isLeaf:true,match:inlineRegex(/^(\*\*|__)(?=\S)((?:\\[\s\S]|[^\\])+?)\1/),parse:function(e,t){return parseTextMark(e[2],t,"strong")}});rules.set("del",{isLeaf:true,match:inlineRegex(/^<del>([\s\S]*?)<\/del>/),parse:function(e,t){return parseTextMark(e[1],t,"strikethru")}});rules.set("strikethru",{isLeaf:true,match:inlineRegex(/^~~(?=\S)((?:\\[\s\S]|~(?!~)|[^\s~\\]|\s(?!~~))+?)~~/),parse:function(e,t){return parseTextMark(e[1],t,"strikethru")}});rules.set("superscript",{isLeaf:true,match:inlineRegex(/^<sup>([\s\S]*?)<\/sup>/),parse:function(e,t){return parseTextMark(e[1],t,"superscript")}});rules.set("subscript",{isLeaf:true,match:inlineRegex(/^<sub>([\s\S]*?)<\/sub>/),parse:function(e,t){return parseTextMark(e[1],t,"subscript")}});rules.set("tilde",{isLeaf:true,match:inlineRegex(/^~((?:\\[\s\S]|[^\\])+?)~/),parse:function(e,t){return parseTextMark(e[1],t,"subscript")}});rules.set("underline",{isLeaf:true,match:inlineRegex(/^<u>([\s\S]*?)<\/u>/),parse:function(e,t){return parseTextMark(e[1],t,"underline")}});rules.set("highlight",{isLeaf:true,match:inlineRegex(/^<mark>([\s\S]*?)<\/mark>/),parse:function(e,t){return parseTextMark(e[1],t,"highlight")}});rules.set("hard_break",{isLeaf:true,match:anyScopeRegex(/^(\\| {2})\n/),parse:function(){return{text:"\n"}}});rules.set("inline_break",{isLeaf:true,match:anyScopeRegex(/^<br>/),parse:function(){return{type:"hard_break",text:"\n"}}});rules.set("span",{isLeaf:true,match:inlineRegex(/^<span [a-z =":]+>[^<]+<\/span>/),parse:function(e,t){return!t.inHtml?null:{type:"html",text:e[0]}}});rules.set("text",{isLeaf:true,match:anyScopeRegex(/^[\s\S]+?(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|$)/),parse:function(e,t){return{text:e[0].replace(/\n/g," ")}}});const lists=["bullet_list","ordered_list"];const LIST_LOOKBEHIND_R=/(?:\n)( *)$/;const parse$1=(e,t)=>{if(!t.inline){e+="\n\n"}e=preprocess(e);const r=[];while(e){let n=null;let a=null;let o=null;for(const[i,s]of rules){n=s.match(e,t);if(n){o=s;a=i;if(lists.includes(a)){const e=t.prevCapture==null?"":t.prevCapture;const a=LIST_LOOKBEHIND_R.test(e);if(a){if(t.inline){t.remainder=n[0];return r}else{break}}}else{break}}}const i=o.parse(n,t);if(Array.isArray(i)){Array.prototype.push.apply(r,i)}else{if(i.type==null){i.type=a}r.push(i)}t.prevCapture=n[0];e=e.substring(n[0].length);if(t.remainder){e=t.remainder+"\n\n"+e;t.remainder=""}}return r};const parseInline=function(e,t){const r=t.inline||false;t.inline=true;const n=parse$1(e,t);t.inline=r;return n};const LIST_BULLET="(?:[*+-]|\\d+[\\.\\)])";const LIST_ITEM_PREFIX="( *)("+LIST_BULLET+") +";const LIST_ITEM_PREFIX_R=new RegExp("^"+LIST_ITEM_PREFIX);const LIST_ITEM_R=new RegExp(LIST_ITEM_PREFIX+"[^\\n]*(?:\\n"+"(?!\\1"+LIST_BULLET+" )[^\\n]*)*(\n|$)","gm");const BLOCK_END_R=/\n{2,}$/;const LIST_BLOCK_END_R=BLOCK_END_R;const LIST_ITEM_END_R=/ *\n+$/;const consolidate=e=>{if(Array.isArray(e)&&e.length>0){for(let t=e.length-1;t>0;t--){const r=e[t];const n=e[t-1];if(r.type==="text"&&n.type==="text"&&!r.marks&&!n.marks){n.text+=r.text;e.splice(t,1)}else if(r.type==="null"){e.splice(t,1)}else if(!rules.has(r.type)||!rules.get(r.type).isLeaf){consolidate(r.content)}}if(!rules.has(e[0].type)||!rules.get(e[0].type).isLeaf){consolidate(e[0].content)}}};const populateTOC=e=>{let t;for(const r of e){if(r.type==="toc"){t=r;break}}if(!t){return}const r=t.attrs.start;const n=t.attrs.end;for(const a of e){if(a.type==="heading"){const e=a.attrs.level;if(r<=e&&e<=n){const r=[];let n="";for(const e of a.content){n+=e.text}r.push(n);r.push(e);r.push(0);r.push(0);t.attrs.body.push(r)}}}};const metadataRegEx=/^---+\n((?:[A-Za-z0-9][A-Za-z0-9 _-]*:[^\n]+\n(?:[ \t]+[^\n]+\n)*)+)---+\n/;const metadataItemRegEx=/^[A-Za-z0-9][A-Za-z0-9 _-]*:[^\n]+\n(?:[ \t]+[^\n]+\n)*/;const hurmetMetadataNames=["decimalFormat","fontSize","pageSize"];const parseMetadata=e=>{const t={};let r=e.match(metadataItemRegEx);while(r){const n=r[0].split(":");const a=n[0].trim().replace(/ /g,"");if(hurmetMetadataNames.includes(a)){const e=n[1].slice(0,-1).trim().replace(/ *\n[ \t]*/g," ");t[a]=e}e=e.slice(r[0].length);r=e.match(metadataItemRegEx)}return t};const dateMessageRegEx=/^date:([^\n]+)\nmessage:([^\n]+)\n/;const md2ast=(e,t=false)=>{let r=false;if(metadataRegEx.test(e)){const t=metadataRegEx.exec(e);r=parseMetadata(t[1]);e=e.slice(t[0].length)}const n={inline:false,_defs:{},prevCapture:"",remainder:"",inHtml:t};const a=/\n *\[([^\]\n]+)\]: *<?([^\n>]*)>? *(?:\n\{([^\n}]*)\})?(?=\n)/gm;const o=[...e.matchAll(a)];for(const e of o){const t=e[1].replace(/\s+/g," ");const r=e[2];const a=e[3]||"";const o={alt:t};if(a){const e=CLASS_R.exec(a);const t=WIDTH_R.exec(a);const r=ID_R.exec(a);if(e){o.class=e[1]}if(t){o.width=t[1]}if(r){o.id=r[1]}}n._defs[t]={target:r,attrs:o}}let i=[];let s=false;if(r){i=e.split("\x3c!--SNAPSHOT--\x3e\n");if(i.length>1){s=true;e=i.shift()}}const l=parse$1(e,n);if(Array.isArray(l)&&l.length>0&&l[0].type==="null"){l.shift()}consolidate(l);populateTOC(l);if(r){if(s){const e=[];for(const t of i){const r=dateMessageRegEx.exec(t);e.push({date:r[1]?Date.parse(r[1].trim()):undefined,message:r[2]?r[2].trim():undefined,content:r?t.slice(r[0].length):t})}r.snapshots=e}return{type:"doc",attrs:r,content:l}}else{return l}};const startSvg=e=>({tag:"svg",children:[],attrs:{xmlns:"http://www.w3.org/2000/svg",width:250,height:250,style:"display: inline;"},temp:{width:250,height:250,xmin:0,xmax:5,ymin:0,ymax:5,xunitlength:20,yunitlength:20,origin:[0,0],stroke:"black",strokewidth:1,strokedasharray:null,fill:"none",fontstyle:"normal",fontfamily:"sans-serif",fontsize:13.33,fontweight:"normal",markerstrokewidth:1,markerstroke:"black",markerfill:"yellow",markersize:4,marker:"none",dotradius:4,axesstroke:"black",gridstroke:"grey",isDim:false}});const setStrokeAndFill=(e,t)=>{e.attrs["stroke-width"]=t.strokewidth;e.attrs.stroke=t.stroke;e.attrs.fill=t.fill;if(t.strokedasharray!=null&&t.strokedasharray!=="none"){e.attrs["stroke-dasharray"]=t.strokedasharray}};const pointZeroRegEx=/\.0+$/;const chopZ=e=>{const t=e.indexOf(".");if(t===-1){return e}if(pointZeroRegEx.test(e)){return e.replace(pointZeroRegEx,"")}let r;for(r=e.length-1;r>t&&e.charAt(r)==="0";r--){if(r===t){r--}}return e.slice(0,r+1)};const markerDot=(e,t,r,n)=>{if(r==null){r=t.stroke}if(n==null){n=t.fill}const a={tag:"circle",attrs:{}};a.attrs.cx=e[0]*t.xunitlength+t.origin[0];a.attrs.cy=t.height-e[1]*t.yunitlength-t.origin[1];a.attrs.r=t.markersize;a.attrs["stroke-width"]=t.strokewidth;a.attrs.stroke=r;a.attrs.fill=n;return a};const arrowhead=(e,t,r)=>{const n=e.temp;const a=[t[0]*n.xunitlength+n.origin[0],n.height-t[1]*n.yunitlength-n.origin[1]];const o=[r[0]*n.xunitlength+n.origin[0],n.height-r[1]*n.yunitlength-n.origin[1]];let i=[o[0]-a[0],o[1]-a[1]];const s=Math.sqrt(i[0]*i[0]+i[1]*i[1]);if(s>1e-8){i=[i[0]/s,i[1]/s];const t=n.marker==="markerdot"?3:n.isDim?0:1;const r=[-i[1],i[0]];const a={tag:"path",attrs:{}};a.attrs.d="M "+(o[0]-12.5*i[0]-3*r[0])+","+(o[1]-12.5*i[1]-3*r[1])+" L "+(o[0]-t*i[0])+","+(o[1]-t*i[1])+" L "+(o[0]-12.5*i[0]+3*r[0])+","+(o[1]-12.5*i[1]+3*r[1])+" z";if(n.isDim){a.attrs.stroke="none"}else{a.attrs["stroke-width"]=n.markerstrokewidth;a.attrs.stroke=n.stroke}a.attrs.fill=n.stroke;e.children.push(a)}};const markAttribute={em:["font-style","italic"],strong:["font-weight","bold"],code:["font-family","monospace"],strikethru:["text-decoration","line-through"],subscript:["font-size","0.8em"]};const textLocal=(e,t,r,n)=>{const a=e.temp;let o="middle";let i=0;let s=a.fontsize/3;if(n!=null){if(n.slice(0,5)==="above"){s=-a.fontsize/2}if(n.slice(0,5)==="below"){s=1.25*a.fontsize}if(n.slice(0,5)==="right"||n.slice(5,10)==="right"){o="start";i=a.fontsize/2}if(n.slice(0,4)==="left"||n.slice(5,9)==="left"){o="end";i=-a.fontsize/2}}const l={tag:"text",children:[],attrs:{}};l.attrs["text"]=r;l.attrs.x=t[0]*a.xunitlength+a.origin[0]+i;l.attrs.y=a.height-t[1]*a.yunitlength-a.origin[1]+s;l.attrs["font-family"]=a.fontfamily;l.attrs["font-size"]=a.fontsize;l.attrs["text-anchor"]=o;const u=md2ast(r)[0].content;if(Array.isArray(u)){let e=false;for(const t of u){const r={tag:"tspan",text:t.text};let n=false;if(t.marks){r.attrs={};for(const e of t.marks){const t=markAttribute[e.type];r.attrs[t[0]]=t[1];if(e.type==="subscript"){n=true}}}if(n){if(!e){r.attrs.dy="2"}}else if(e){if(!t.marks){r.attrs={}}r.attrs.dy="-2"}e=n;l.children.push(r)}}e.children.push(l);return e};const functions={stroke(e,t){e.value.temp.stroke=t.value;return e},strokewidth(e,t){e.value.temp.strokewidth=Rnl.toNumber(t.value);return e},strokedasharray(e,t){e.value.temp.strokedasharray=t.value;return e},fill(e,t){e.value.temp.fill=t.value;return e},fontsize(e,t){e.value.temp.fontsize=Rnl.toNumber(t.value);return e},fontfamily(e,t){e.value.temp.fontfamily=t.value;return e},marker(e,t){e.value.temp.marker=t.value;return e},title(e,t){e.value.children.push({tag:"title",attrs:{text:t.value}});return e},frame(e,t=250,r=250,n="inline"){const a=e.value;const o=a.temp;o.width=typeof t==="number"?t:Rnl.toNumber(t.value);a.attrs.width=o.width;o.height=typeof r==="number"?r:Rnl.toNumber(r.value);a.attrs.height=o.height;if(typeof n!=="string"){n=n.value}a.attrs.style=`float: ${n}`;o.xunitlength=o.width/(o.xmax-o.xmin);o.yunitlength=o.height/(o.ymax-o.ymin);o.origin=[-o.xmin*o.xunitlength,-o.ymin*o.yunitlength];return{value:a,unit:null,dtype:dt.DRAWING}},view(e,t=0,r=5,n,a){const o=e.value;const i=o.temp;i.xmin=typeof t==="number"?t:Rnl.toNumber(t.value);i.xmax=typeof r==="number"?r:Rnl.toNumber(r.value);i.xunitlength=i.width/(i.xmax-i.xmin);i.yunitlength=i.xunitlength;if(n==null){i.origin=[-i.xmin*i.xunitlength,i.height/2];i.ymin=-i.height/(2*i.yunitlength);i.ymax=-i.ymin}else{i.ymin=Rnl.toNumber(n.value);if(a!=null){i.ymax=Rnl.toNumber(a.value);i.yunitlength=i.height/(i.ymax-i.ymin)}else{i.ymax=i.height/i.yunitlength+i.ymin}i.origin=[-i.xmin*i.xunitlength,-i.ymin*i.yunitlength]}return{value:o,unit:null,dtype:dt.DRAWING}},grid(e,t,r,n){const a=e.value;const o=a.temp;t=t==null?o.xunitlength:Rnl.toNumber(t.value)*o.xunitlength;r=r==null?t:Rnl.toNumber(r.value)*o.yunitlength;const i={tag:"path",attrs:{}};let s="";for(let e=o.origin[0];e<o.width;e+=t){s+=" M"+e+",0 "+e+","+o.height}for(let e=o.origin[0]-t;e>0;e-=t){s+=" M"+e+",0 "+e+","+o.height}for(let e=o.height-o.origin[1];e<o.height;e+=r){s+=" M0,"+e+" "+o.width+","+e}for(let e=o.height-o.origin[1]-r;e>0;e-=r){s+=" M0,"+e+" "+o.width+","+e}i.attrs.d=s;i.attrs["stroke-width"]=.5;i.attrs.stroke=o.gridstroke;i.attrs.fill=o.fill;a.children.push(i);if(!n){return{value:a,unit:null,dtype:dt.DRAWING}}},axes(e,t,r,n,a,o){let i=e.value;const s=i.temp;t=t==null?s.xunitlength:Rnl.toNumber(t.value)*s.xunitlength;r=r==null?t:Rnl.toNumber(r.value)*s.yunitlength;const l=s.fontsize;s.fontsize=Math.min(t/2,r/2,10);const u=s.fontsize/4;if(a!=null){this.grid(e,a,o,true)}const c={tag:"path",attrs:{}};let d="M0,"+(s.height-s.origin[1])+" "+s.width+","+(s.height-s.origin[1])+" M"+s.origin[0]+",0 "+s.origin[0]+","+s.height;for(let e=s.origin[0]+t;e<s.width;e+=t){d+=" M"+e+" "+(s.height-s.origin[1]+u)+" "+e+","+(s.height-s.origin[1]-u)}for(let e=s.origin[0]-t;e>0;e-=t){d+=" M"+e+","+(s.height-s.origin[1]+u)+" "+e+","+(s.height-s.origin[1]-u)}for(let e=s.height-s.origin[1]+r;e<s.height;e+=r){d+=" M"+(s.origin[0]+u)+","+e+" "+(s.origin[0]-u)+","+e}for(let e=s.height-s.origin[1]-r;e>0;e-=r){d+=" M"+(s.origin[0]+u)+","+e+" "+(s.origin[0]-u)+","+e}if(n!=null){const e=t/s.xunitlength;const n=r/s.yunitlength;const a=s.xmin>0||s.xmax<0?s.xmin:0;const o=s.ymin>0||s.ymax<0?s.ymin:0;const l=o===0?"below":"above";const u=a===0?"left":"right";const c=Math.floor(1.1-Math.log(e)/Math.log(10))+1;const d=Math.floor(1.1-Math.log(n)/Math.log(10))+1;for(let t=e;t<=s.xmax;t+=e){i=textLocal(i,[t,o],chopZ(t.toFixed(c)),l)}for(let t=-e;s.xmin<=t;t-=e){i=textLocal(i,[t,o],chopZ(t.toFixed(c)),l)}for(let e=n;e<=s.ymax;e+=n){i=textLocal(i,[a,e],chopZ(e.toFixed(d)),u)}for(let e=-n;s.ymin<=e;e-=n){i=textLocal(i,[a,e],chopZ(e.toFixed(d)),u)}}c.attrs.d=d;c.attrs["stroke-width"]=.5;c.attrs.stroke=s.axesstroke;c.attrs.fill=s.fill;i.temp.fontsize=l;i.children.push(c);return{value:i,unit:null,dtype:dt.DRAWING}},line(e,t){const r=e.value;const n=r.temp;const a={tag:"path",attrs:{}};const o=[Rnl.toNumber(t.value[0][0]),Rnl.toNumber(t.value[0][1])];const i=[Rnl.toNumber(t.value[1][0]),Rnl.toNumber(t.value[1][1])];a.attrs.d="M"+(o[0]*n.xunitlength+n.origin[0])+","+(n.height-o[1]*n.yunitlength-n.origin[1])+" "+(i[0]*n.xunitlength+n.origin[0])+","+(n.height-i[1]*n.yunitlength-n.origin[1]);setStrokeAndFill(a,n);r.children.push(a);if(n.marker==="dot"||n.marker==="arrowdot"){r.children.push(markerDot(o,n,n.markerstroke,n.markerfill));if(n.marker==="arrowdot"){arrowhead(r,o,i)}r.children.push(markerDot(i,n,n.markerstroke,n.markerfill))}else if(n.marker==="arrow"){arrowhead(r,o,i)}return{value:r,unit:null,dtype:dt.DRAWING}},path(e,t,r){const n=e.value;const a=n.temp;const o={tag:"path",attrs:{}};let i="";let s;if(typeof t==="string"){i=t.value}else{s=t.value.map((e=>e.map((e=>Rnl.toNumber(e)))));if(r==null){r=new Array(s.length).fill("L");r[0]="M"}else if(r.dtype===dt.STRING){r=new Array(s.length).fill(r.value);r[0]="M"}else if(typeof r==="string"){r=new Array(s.length).fill(r);r[0]="M"}else if(r.dtype&dt.ROWVECTOR||r.dtype&dt.COLUMNVECTOR){r=r.value.map((e=>{if(Rnl.isZero(e)){return"L"}const t=Rnl.toNumber(e)*a.xunitlength;return`A${t} ${t} 0 0 0 `}));r.unshift("M")}else{r=new Array(s.length).fill("L");r[0]="M"}for(let e=0;e<s.length;e++){i+=r[e]+(s[e][0]*a.xunitlength+a.origin[0])+","+(a.height-s[e][1]*a.yunitlength-a.origin[1])+" "}}o.attrs.d=i;o.attrs["stroke-width"]=a.strokewidth;if(a.strokedasharray!=null){o.attrs["stroke-dasharray"]=a.strokedasharray}o.attrs.stroke=a.stroke;o.attrs.fill=a.fill;if(a.marker==="dot"||a.marker==="arrowdot"){for(let e=0;e<s.length;e++){if(r!=="C"&&r!=="T"||e!==1&&e!==2){n.children.push(markerDot(s[e],a,a.markerstroke,a.markerfill))}}}else if(a.marker==="arrow"){arrowhead(n,s[s.length-2],s[s.length-1])}n.children.push(o);return{value:n,unit:null,dtype:dt.DRAWING}},curve(e,t){return functions.path(e,t,"T")},rect(e,t,r){const n=e.value;const a=n.temp;const o={tag:"rect",attrs:{}};const i=[Rnl.toNumber(t.value[0][0]),Rnl.toNumber(t.value[0][1])];const s=[Rnl.toNumber(t.value[1][0]),Rnl.toNumber(t.value[1][1])];o.attrs.x=i[0]*a.xunitlength+a.origin[0];o.attrs.y=a.height-s[1]*a.yunitlength-a.origin[1];o.attrs.width=(s[0]-i[0])*a.xunitlength;o.attrs.height=(s[1]-i[1])*a.yunitlength;if(r!=null){const e=Rnl.toNumber(r.value)*a.xunitlength;o.attrs.rx=e;o.attrs.ry=e}setStrokeAndFill(o,a);n.children.push(o);return{value:n,unit:null,dtype:dt.DRAWING}},circle(e,t,r){const n=e.value;const a=n.temp;const o={tag:"circle",attrs:{}};o.attrs.cx=Rnl.toNumber(t.value[0])*a.xunitlength+a.origin[0];o.attrs.cy=a.height-Rnl.toNumber(t.value[1])*a.yunitlength-a.origin[1];o.attrs.r=Rnl.toNumber(r.value)*a.xunitlength;setStrokeAndFill(o,a);n.children.push(o);return{value:n,unit:null,dtype:dt.DRAWING}},ellipse(e,t,r,n){const a=e.value;const o=a.temp;const i={tag:"ellipse",attrs:{}};i.attrs.cx=Rnl.toNumber(t.value[0])*o.xunitlength+o.origin[0];i.attrs.cy=o.height-Rnl.toNumber(t.value[1])*o.yunitlength-o.origin[1];i.attrs.rx=Rnl.toNumber(r.value)*o.xunitlength;i.attrs.ry=Rnl.toNumber(n.value)*o.yunitlength;setStrokeAndFill(i,o);a.children.push(i);return{value:a,unit:null,dtype:dt.DRAWING}},arc(e,t,r){const n=e.value;const a=n.temp;const o={tag:"path",attrs:{}};const i=[Rnl.toNumber(t.value[0][0]),Rnl.toNumber(t.value[0][1])];const s=[Rnl.toNumber(t.value[1][0]),Rnl.toNumber(t.value[1][1])];if(r==null){const e=[s[0]-i[0],s[1]-i[1]];r=Math.sqrt(e[0]*e[0]+e[1]*e[1])*a.yunitlength}else if(isVector(r)){r=r.value.map((e=>Rnl.toNumber(e)*a.yunitlength))}else{r=Rnl.toNumber(r.value)*a.yunitlength}let l="M"+(i[0]*a.xunitlength+a.origin[0])+","+(a.height-i[1]*a.yunitlength-a.origin[1])+" A";l+=Array.isArray(r)?r[0]+","+r[1]:r+","+r;l+=" 0 0,0 "+(s[0]*a.xunitlength+a.origin[0])+","+(a.height-s[1]*a.yunitlength-a.origin[1]);o.attrs.d=l;setStrokeAndFill(o,a);let u=0;if(a.marker==="arrow"||a.marker==="arrowdot"){const e=[(s[1]-i[1])/4,(i[0]-s[0])/4];u=[(s[0]-i[0])/2,(s[1]-i[1])/2];u=[i[0]+u[0]+e[0],i[1]+u[1]+e[1]]}else{u=[i[0],i[1]]}if(a.marker==="dot"||a.marker==="arrowdot"){n.children.push(markerDot(i,a,a.markerstroke,a.markerfill));if(a.marker==="arrowdot"){arrowhead(n,u,s)}n.children.push(markerDot(s,a,a.markerstroke,a.markerfill))}else if(a.marker==="arrow"){arrowhead(n,u,s)}n.children.push(o);return{value:n,unit:null,dtype:dt.DRAWING}},text(e,t,r,n){const a=textLocal(e.value,[Rnl.toNumber(t.value[0]),Rnl.toNumber(t.value[1])],r.value,n==null?null:n.value);return{value:a,unit:null,dtype:dt.DRAWING}},dot(e,t,r,n,a){let o=e.value;const i=o.temp;let s;const l=Rnl.toNumber(t.value[0])*i.xunitlength+i.origin[0];const u=i.height-Rnl.toNumber(t.value[1])*i.yunitlength-i.origin[1];if(r.value==="+"||r.value==="-"||r.value==="|"){s={tag:"path",attrs:{}};if(r.value==="+"){s.attrs.d=" M "+(l-i.ticklength)+","+u+" L "+(l+i.ticklength)+","+u+" M "+l+","+(u-i.ticklength)+" L "+l+","+(u+i.ticklength);s.attrs["stroke-width"]=.5;s.attrs.stroke=i.axesstroke}else{if(r.value==="-"){s.attrs.d=" M "+(l-i.ticklength)+","+u+" L "+(l+i.ticklength)+","+u}else{s.attrs.d=" M "+l+","+(u-i.ticklength)+" L "+l+","+(u+i.ticklength)}s.attrs["stroke-width"]=i.strokewidth;s.attrs["stroke"]=i.stroke}}else{s={tag:"circle",attrs:{}};s.attrs.cx=l;s.attrs.cy=u;s.attrs.r=i.dotradius;s.attrs["stroke-width"]=i.strokewidth;s.attrs.stroke=i.stroke;s.attrs.fill=r.value==="open"?"white":i.stroke}o.children.push(s);if(n!=null){o=textLocal(o,[Rnl.toNumber(t.value[0]),Rnl.toNumber(t.value[1])],n.value,a==null?"below":a.value)}return{value:o,unit:null,dtype:dt.DRAWING}},leader(e,t,r){const n=e.value.temp.marker;e.value.temp.marker="arrow";e.value.temp.isDim=true;const a=clone(t);a.value.reverse();e=this.path(e,a,"L");const o=a.value[0].map((e=>Rnl.toNumber(e)));const i=a.value[1].map((e=>Rnl.toNumber(e)));let s="right";if(Math.abs(o[0]-i[0])>=Math.abs(o[1]-i[1])){s=o[0]>=i[0]?"right":"left"}else{s=o[1]<i[1]?"below":"above"}const l=textLocal(e.value,o,r.value,s);l.temp.marker=n;l.temp.isDim=false;return{value:l,unit:null,dtype:dt.DRAWING}},dimension(e,t,r){const n=clone(t.value);const a=n.pop();const o=e.value.temp.strokewidth;e.value.temp.strokewidth=.5;e.value.temp.isDim=true;let i=Rnl.fromNumber(6/e.value.temp.xunitlength);const s=n[n.length-1];let l;if(Rnl.lessThan(n[0][1],a[1])&&Rnl.lessThan(a[1],s[1])||Rnl.lessThan(s[1],a[1])&&Rnl.lessThan(a[1],n[0][1])){if(!Rnl.lessThan(s[0],a[0])){i=Rnl.negate(i)}n.forEach((t=>{e=this.line(e,{value:[[Rnl.add(t[0],i),t[1]],[Rnl.add(a[0],i),t[1]]]})}));e.value.temp.marker="arrow";const t=Rnl.lessThanOrEqualTo(s[0],a[0])?"right":"left";for(let o=0;o<n.length-1;o++){e=this.line(e,{value:[[a[0],n[o][1]],[a[0],n[o+1][1]]],unit:null,dtype:dt.MATRIX});e=this.line(e,{value:[[a[0],n[o+1][1]],[a[0],n[o][1]]],unit:null,dtype:dt.MATRIX});const i=[Rnl.toNumber(a[0]),(Rnl.toNumber(n[o][1])+Rnl.toNumber(n[o+1][1]))/2];const s=n.length===2?r.value:r.value[o];l=textLocal(e.value,i,s,t)}}else{if(!Rnl.lessThan(s[1],a[1])){i=Rnl.negate(i)}n.forEach((t=>{e=this.line(e,{value:[[t[0],Rnl.add(t[1],i)],[t[0],Rnl.add(a[1],i)]]})}));e.value.temp.marker="arrow";const t=Rnl.lessThanOrEqualTo(s[1],a[1])?"above":"below";for(let o=0;o<n.length-1;o++){e=this.line(e,{value:[[n[o][0],a[1]],[n[o+1][0],a[1]]],unit:null,dtype:dt.MATRIX});e=this.line(e,{value:[[n[o+1][0],a[1]],[n[o][0],a[1]]],unit:null,dtype:dt.MATRIX});const i=[(Rnl.toNumber(n[o][0])+Rnl.toNumber(n[o+1][0]))/2,Rnl.toNumber(a[1])];const s=n.length===2?r.value:r.value[o];l=textLocal(e.value,i,s,t)}}l.temp.strokewidth=o;l.temp.marker="none";l.temp.isDim=false;return{value:l,unit:null,dtype:dt.DRAWING}}};const renderSVG=e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","svg");Object.keys(e.attrs).forEach((r=>{t.setAttribute(r,e.attrs[r])}));e.children.forEach((e=>{const r=document.createElementNS("http://www.w3.org/2000/svg",e.tag);Object.keys(e.attrs).forEach((t=>{r.setAttribute(t,e.attrs[t]);if(t==="title"){r.appendChild(document.createTextNode(e.attrs["text"]))}else{r.setAttribute(t,e.attrs[t])}}));if(e.tag==="text"){e.children.forEach((e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","tspan");if(e.attrs){Object.keys(e.attrs).forEach((r=>{t.setAttribute(r,e.attrs[r])}))}t.appendChild(document.createTextNode(e.text));r.appendChild(t)}))}t.appendChild(r)}));return t};const draw=Object.freeze({startSvg:startSvg,functions:functions,renderSVG:renderSVG});const setComparisons=["in","!in","∈","∉","∋","∌","⊆","⊈","⊇","⊉"];const needsMap=(...e)=>{for(let t=0;t<e.length;t++){if(e[t].dtype&dt.MAP&&e[t].dtype&dt.RATIONAL){return true}}return false};const shapeOf=e=>e.dtype===dt.COMPLEX?"complex":e.dtype<128?"scalar":isVector(e)?"vector":e.dtype&dt.MATRIX?"matrix":e.dtype===dt.DATAFRAME?"dataFrame":e.dtype&dt.MAP&&isVector(e)?"mapWithVectorValues":e.dtype&dt.MAP?"map":"other";const binaryShapesOf=(e,t)=>{let r=shapeOf(e);let n=shapeOf(t);let a=false;if(isMatrix(e)&&isMatrix(t)){a=true;if(r==="vector"){r=e.dtype&dt.ROWVECTOR?"rowVector":"columnVector"}if(n==="vector"){n=t.dtype&dt.ROWVECTOR?"rowVector":"columnVector"}}return[r,n,a]};const matrixMults={"×":"cross","·":"dot","∘":"circ",".*":"circ","*":"multiply","⌧":"multiply"};const nextToken=(e,t)=>{if(e.length<t+2){return undefined}return e[t+1]};const arfn=["abs","angle","imag","real","Γ","gamma"];const stringFromOperand=(e,t)=>e.dtype===dt.STRING?e.value:e.dtype===dt.RATIONAL?format(e.value,"h15",t):isMatrix(e.dtype)?Matrix.displayAlt(e,"h15",t):e.dtype&dt.MAP?map.displayAlt(e.value,"h15",t):e.value;const evalRpn=(e,t,r,n,a)=>{const o=e.split(" ");const i=[];let s;for(let e=0;e<o.length;e++){const l=o[e];const u=l.charAt(0);if(u==="®"){const e=new Array(2);const t=l.indexOf("/");e[0]=BigInt(l.slice(1,t));e[1]=BigInt(l.slice(t+1));const r=Object.create(null);r.value=e;r.unit=Object.create(null);r.unit.expos=allZeros;r.dtype=dt.RATIONAL;i.push(Object.freeze(r))}else if(u==="©"){const e=l.slice(1).split(",");const t=new Array(2);t[0]=[BigInt(e[0]),BigInt(e[1])];t[1]=[BigInt(e[2]),BigInt(e[3])];const r=Object.create(null);r.value=t;r.unit=Object.create(null);r.unit.expos=allZeros;r.dtype=dt.COMPLEX;i.push(Object.freeze(r))}else if(u==="¿"){const r=l.substring(1);let a=Object.create(null);if(r==="undefined"){a.value=undefined;a.unit=null;a.dtype=0}else if(r==="T"&&nextToken(o,e)==="^"&&i.length>0&&isMatrix(i[i.length-1])){e+=1;a=Matrix.transpose(i.pop())}else{const e=t[r];if(!e){return errorOprnd("V_NAME",r)}a=fromAssignment(e,n);if(a.dtype===dt.ERROR){return a}}i.push(Object.freeze(a))}else if(u==='"'){const e=l.charAt(l.length-1);const t=u==='"'&&e==='"'?l.slice(1,-1).trim():l.trim();i.push(Object.freeze({value:t,unit:null,dtype:dt.STRING}))}else if(/^``/.test(l)){i.push(DataFrame.dataFrameFromCSV(tablessTrim(l.slice(2,-2)),{}))}else if(u==="`"){const e=l.charAt(l.length-1);const t=u==="`"&&e==="`"?l.slice(1,-1).trim():l.trim();i.push(Object.freeze({value:t,unit:null,dtype:dt.RICHTEXT}))}else{switch(l){case"true":case"false":{const e=Object.create(null);e.value=l==="true";e.unit=null;e.dtype=dt.BOOLEAN;i.push(Object.freeze(e));break}case"pi":case"π":{const e=Object.create(null);e.value=Rnl.pi;e.dtype=dt.RATIONAL;e.unit=Object.create(null);e.unit.expos=allZeros;i.push(Object.freeze(e));break}case"e":{const e=Object.create(null);e.value="e";e.dtype=dt.RATIONAL;e.unit=Object.create(null);e.unit.expos=allZeros;i.push(Object.freeze(e));break}case"im":{const e=Object.create(null);e.value=[Rnl.zero,Rnl.one];e.unit=Object.create(null);e.unit.expos=allZeros;e.dtype=dt.COMPLEX;i.push(Object.freeze(e));break}case"ℏ":{const e=Object.create(null);e.value=Rnl.hbar;e.dtype=dt.RATIONAL;e.unit=Object.create(null);e.unit.expos=Object.freeze(n?[2,1,-1,0,0,0,0,0]:allZeros);i.push(Object.freeze(e));break}case"∠":{const e=i.pop();const t=i.pop();if(t.dtype!==dt.RATIONAL||e.dtype!==dt.RATIONAL){return errorOprnd("NAN_OP")}const r=Rnl.toNumber(e.value);const n=Object.create(null);n.value=[Rnl.multiply(t.value,Rnl.fromNumber(Math.cos(r))),Rnl.multiply(t.value,Rnl.fromNumber(Math.sin(r)))];n.unit=Object.create(null);n.unit.expos=allZeros;n.dtype=dt.COMPLEX;i.push(Object.freeze(n));break}case"+":case".+":case"-":case".-":{const e=i.pop();const t=i.pop();const r=l==="+"||l===".+"?"add":"subtract";if(!((t.dtype&dt.RATIONAL||t.dtype&dt.COMPLEX)&&(e.dtype&dt.RATIONAL||e.dtype&dt.COMPLEX))){return errorOprnd("NAN_OP")}if(n){if(!unitsAreCompatible(t.unit.expos,e.unit.expos)){return errorOprnd("UNIT_ADD")}}const[a,o,s]=binaryShapesOf(t,e);const u=Object.create(null);u.value=Operators.binary[a][o][r](t.value,e.value);if(u.value.dtype&&u.value.dtype===dt.ERROR){return u.value}u.unit=t.unit;u.dtype=Operators.dtype[a][o](t.dtype,e.dtype,l);i.push(Object.freeze(u));break}case"~":{const e=i.pop();if(!(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX)){return errorOprnd("NAN_OP")}const t=Object.create(null);t.value=Operators.unary[shapeOf(e)]["negate"](e.value);if(t.value.dtype&&t.value.dtype===dt.ERROR){return t.value}t.unit=e.unit;t.dtype=e.dtype;i.push(Object.freeze(t));break}case"×":case"·":case"*":case"∘":case"⌧":{const e=i.pop();const t=e.dtype===dt.DATAFRAME?clone(e):e;const a=i.pop();if(l==="*"&&a.dtype===dt.STRING&&a.dtype===dt.STRING){const e=stringFromOperand(a,r);const n=stringFromOperand(t,r);return{value:e+n,unit:null,dtype:dt.STRING}}if(!((a.dtype&dt.RATIONAL||a.dtype&dt.COMPLEX)&&(t.dtype&dt.RATIONAL||t.dtype&dt.COMPLEX||t.dtype===dt.DATAFRAME))){return errorOprnd("NAN_OP")}const o=Object.create(null);let s=Object.create(null);if(n){if(a.dtype===dt.DATAFRAME&&t.dtype===dt.RATIONAL||a.dtype===dt.RATIONAL&&t.dtype===dt.DATAFRAME){s=a.dtype===dt.DATAFRAME?a.unit:t.unit}else{s.expos=a.unit.expos.map(((e,r)=>e+t.unit.expos[r]))}}else{s.expos=allZeros}o.unit=t.dtype===dt.DATAFRAME?clone(t.unit):Object.freeze(s);const[u,c,d]=binaryShapesOf(a,t);const m=d?matrixMults[l]:"multiply";o.dtype=l==="∘"||u==="scalar"||u==="map"||u==="complex"||c==="scalar"||c==="map"||c==="complex"?Operators.dtype[u][c](a.dtype,t.dtype,m):l==="·"?dt.RATIONAL:l==="×"?dt.COLUMNVECTOR:Matrix.multResultType(a,t);o.value=Operators.binary[u][c][m](a.value,t.value);if(o.value.dtype&&o.value.dtype===dt.ERROR){return o.value}i.push(Object.freeze(o));break}case"/":case"./":case"//":case"///":case"∕":{const e=i.pop();const t=i.pop();if(!((t.dtype&dt.RATIONAL||t.dtype===dt.COMPLEX)&&(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX))){return errorOprnd("NAN_OP")}const r=Object.create(null);const a=Object.create(null);a.expos=n?t.unit.expos.map(((t,r)=>t-e.unit.expos[r])):allZeros;r.unit=Object.freeze(a);const[o,s,l]=binaryShapesOf(t,e);r.value=Operators.binary[o][s]["divide"](t.value,e.value);if(r.value.dtype&&r.value.dtype===dt.ERROR){return r.value}r.dtype=Operators.dtype[o][s](t.dtype,e.dtype,"divide");if(isDivByZero(r.value,shapeOf(r))){return errorOprnd("DIV")}i.push(Object.freeze(r));break}case"^":case".^":{const e=i.pop();const t=i.pop();if(!((t.dtype&dt.RATIONAL||t.dtype===dt.COMPLEX)&&(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX)||isMatrix(t)&&e.value==="T")){return errorOprnd("NAN_OP")}const r=Object.create(null);const a=Object.create(null);a.expos=allZeros;if(n){const r=typeof e.unit==="number"?e.unit:Rnl.toNumber(e.value);a.expos=t.unit.expos.map((e=>e*r))}r.unit=Object.freeze(a);const[o,s,u]=binaryShapesOf(t,e);r.value=Operators.binary[o][s]["power"](t.value,e.value);if(r.value.dtype){return r.value}r.dtype=Cpx.isComplex(r.value)?dt.COMPLEX:Operators.dtype[o][s](t.dtype,e.dtype,l);i.push(Object.freeze(r));break}case"&":case"hcat":case"vcat":{const e=i.pop();const a=i.pop();const o=l==="vcat"?"unshift":"concat";const[s,u,c]=binaryShapesOf(a,e);let d=Object.create(null);if(a.dtype===dt.STRING&&a.dtype===dt.STRING){const t=stringFromOperand(a,r);const n=stringFromOperand(e,r);d.value=t+n;d.unit=null;d.dtype=dt.STRING}else if(a.dtype&dt.DATAFRAME&&isVector(e)&&l!=="vcat"){d=DataFrame.append(a,e,t,n);if(d.dtype===dt.ERROR){return d}}else if(a.dtype&dt.MAP||e.dtype&dt.MAP){d=map.append(a,e,s,u,t);if(d.dtype===dt.ERROR){return d}}else{if(n){if(!unitsAreCompatible(a.unit.expos,e.unit.expos)){return errorOprnd("UNIT_ADD")}}d.value=Operators.binary[s][u][o](a.value,e.value);if(d.value.dtype){return d.value}d.dtype=Operators.dtype[s][u](a.dtype,e.dtype,l);d.unit=a.unit}i.push(Object.freeze(d));break}case"√":case"∛":case"∜":{const e=l.charCodeAt(0)-8728;const t=[BigInt(1),BigInt(e)];const r=i.pop();if(!(r.dtype&dt.RATIONAL||r.dtype&dt.COMPLEX)){return errorOprnd("NAN_OP")}const a=Object.create(null);const o=Object.create(null);o.expos=allZeros;if(n){o.expos=r.unit.expos.map((t=>t/e))}a.unit=Object.freeze(o);const s=shapeOf(r);a.value=Operators.binary[s]["scalar"]["power"](r.value,t);if(a.value.dtype&&a.value.dtype===dt.ERROR){return a.value}a.dtype=Cpx.isComplex(a.value)?dt.COMPLEX:Operators.dtype[s]["scalar"](r.dtype,dt.RATIONAL,l);i.push(Object.freeze(a));break}case"root":{const e=i.pop();const t=i.pop();if(!(t.dtype&dt.RATIONAL&(e.dtype&dt.RATIONAL))){return errorOprnd("NAN_OP")}const r=Object.create(null);const a=Object.create(null);a.expos=allZeros;if(n){a.expos=e.unit.expos.map((e=>e/Number(t.value[0])))}r.unit=Object.freeze(a);const o=Rnl.reciprocal(t.value);const s=shapeOf(t);r.value=Operators.binary[s]["scalar"]["power"](e.value,o);if(r.value.dtype&&r.value.dtype===dt.ERROR){return r.value}r.dtype=Operators.dtype[s]["scalar"](t.dtype,dt.RATIONAL,l);i.push(Object.freeze(r));break}case".":{const e=i.pop();const r=i.pop();const a=propertyFromDotAccessor(r,e,t,n);if(a.dtype===dt.ERROR){return a}i.push(Object.freeze(a));break}case"[]":{const r=Number(o[e+1]);e+=1;const a=[];for(let e=0;e<r;e++){a.unshift(i.pop())}const s=i.pop();let l;if(s.dtype&dt.DATAFRAME){l=DataFrame.range(s,a,t,n)}else if(s.dtype&dt.MAP){l=map.valueFromMap(s,a,n)}else if(s.dtype===dt.STRING){l=textRange(s.value,a[0])}else if(s.dtype===dt.MODULE){if(r===1){l=fromAssignment(s.value[a[0].value],n)}else{l={value:new Map,unit:null,dtype:dt.TUPLE};for(let e=0;e<a.length;e++){const t=a[e].value;l.value.set(t,fromAssignment(s.value[t],n))}}}else{const e=a[0];const o=r===2?a[1]:isVector(s)?null:{value:Rnl.zero,unit:allZeros,dtype:dt.RATIONAL};l=s.dtype&dt.DATAFRAME?DataFrame.range(s,e,o,t,n):Matrix.submatrix(s,e,o)}if(l.dtype===dt.ERROR){return l}i.push(Object.freeze(l));break}case":":{const e=i.pop();const t=i.pop();if(!(t.dtype===dt.RATIONAL||t.dtype===dt.RANGE)){return errorOprnd("NAN_OP")}const r=Object.create(null);r.unit=null;r.dtype=dt.RANGE;const n=t.dtype!==dt.RATIONAL?t.value[2]:e.value==="∞"||Rnl.lessThan(t.value,e.value)?Rnl.one:Rnl.negate(Rnl.one);r.value=t.dtype===dt.RATIONAL?[t.value,n,e.value]:[t.value[0],t.value[2],e.value];i.push(Object.freeze(r));break}case"normal":case"uniform":case"lognormal":{const e=i.pop();const t=i.pop();break}case"!":{const e=i.pop();if(!(e.dtype&dt.RATIONAL)){return errorOprnd("NAN_OP")}if(n){if(!unitsAreCompatible(e.unit.expos,allZeros)){return errorOprnd("FACT")}}const t=e.value;if(!Rnl.isInteger(t)||Rnl.isNegative(t)){return errorOprnd("FACT")}const r=Object.create(null);r.unit=allZeros;r.dtype=dt.RATIONAL;r.value=Operators.unary[shapeOf(e)]["factorial"](t);if(r.value.dtype){return r.value}i.push(Object.freeze(r));break}case"%":{const e=i.pop();if(!(e.dtype&dt.RATIONAL)){return errorOprnd("NAN_OP")}const t=Object.create(null);t.unit=e.unit;t.dtype=e.dtype;t.value=Operators.unary[shapeOf(e)]["percent"](e.value);if(t.value){return t.value}i.push(Object.freeze(t));break}case"|":case"‖":{const e=i.pop();if(!(e.dtype&dt.RATIONAL||e.dtype===dt.COMPLEX)){return errorOprnd("NAN_OP")}const t=l==="|"?"abs":"norm";const r=Object.create(null);r.unit=e.unit;r.dtype=dt.RATIONAL;r.value=Operators.unary[shapeOf(e)][t](e.value);if(r.value.dtype&&r.value.dtype===dt.ERROR){return r.value}i.push(Object.freeze(r));break}case"matrix":{const t=Number(o[e+1]);const r=Number(o[e+2]);e+=2;if(i[i.length-1].dtype===dt.RANGE){i.push(Matrix.operandFromRange(i.pop().value))}else{i.push(Matrix.operandFromTokenStack(i,t,r))}break}case"startSvg":i.push({value:draw.startSvg(),unit:null,dtype:dt.DRAWING});break;case"abs":case"cos":case"sin":case"tan":case"acos":case"asin":case"atan":case"sec":case"csc":case"cot":case"asec":case"acsc":case"acot":case"exp":case"log":case"ln":case"log10":case"log2":case"cosh":case"sinh":case"tanh":case"sech":case"csch":case"coth":case"acosh":case"asinh":case"atanh":case"asech":case"acsch":case"acoth":case"gamma":case"Γ":case"lgamma":case"lfact":case"factorial":case"cosd":case"sind":case"tand":case"acosd":case"asind":case"atand":case"secd":case"cscd":case"cotd":case"asecd":case"acscd":case"acotd":case"real":case"imag":case"angle":case"conj":case"ceil":case"floor":case"Char":case"round":case"sqrt":case"sign":{const e=i.pop();if(!(e.dtype&dt.RATIONAL||e.dtype&dt.COMPLEX)){return errorOprnd("UNREAL",l)}const t=Object.create(null);const r=Object.create(null);r.expos=n?Functions.functionExpos(l,[e]):allZeros;if(r.expos.dtype&&r.expos.dtype===dt.ERROR){return r.expos}t.unit=l==="Char"?null:Object.freeze(r);const a=e.dtype&dt.RATIONAL?"scalar":"complex";const o=e.dtype&dt.MAP&&isVector(e)?mapMap(e.value,(e=>e.map((e=>Functions.unary[a][l](e))))):isVector(e)?e.value.map((e=>Functions.unary[a][l](e))):isMatrix(e)?e.value.map((e=>e.map((e=>Functions.unary[a][l](e))))):needsMap(e)?mapMap(e.value,(e=>Functions.unary[a][l](e))):Functions.unary[a][l](e.value);if(o.dtype&&o.dtype===dt.ERROR){return o}t.value=Object.freeze(o);t.dtype=l==="Char"?e.dtype-dt.RATIONAL+dt.STRING:e.dtype&dt.COMPLEX&&arfn.includes(l)?e.dtype-dt.COMPLEX+dt.RATIONAL:e.dtype;i.push(Object.freeze(t));break}case"logn":case"atan2":case"hypot":case"gcd":case"rms":case"binomial":case"zeros":case"mod":case"rem":{const e=[];e.push(i.pop());e.unshift(i.pop());if(!(e[0].dtype&dt.RATIONAL)){return errorOprnd("")}const t=Object.create(null);const r=Object.create(null);r.expos=n?Functions.functionExpos(l,e):allZeros;if(r.dtype&&r.dtype===dt.ERROR){return r}t.unit=Object.freeze(r);const[a,o]=multivarFunction("binary",l,e);t.value=Object.freeze(a);t.dtype=o;i.push(Object.freeze(t));break}case"roundn":case"string":{const e=i.pop();const t=i.pop();if(!(t.dtype&dt.RATIONAL)){return errorOprnd("")}if(!(e.dtype&dt.STRING)){return errorOprnd("")}if(!/(?:f-?|r)\d+/.test(e.value)){return errorOprnd("")}let r="";const n=Object.create(null);if(l==="string"){r=e.value.charAt()==="f"?"stringFixed":"stringSignificant";n.unit=null;n.dtype=t.dtype-dt.RATIONAL+dt.STRING}else{r=e.value.charAt()==="f"?"roundFixed":"roundSignificant";n.unit=t.unit;n.dtype=t.dtype}const a=Number(e.value.slice(1));const o=t.dtype&dt.MAP&&isVector(t)?mapMap(t.value,(e=>e.map((e=>Functions.binary[r]([e,a]))))):isVector(t)?t.value.map((e=>Functions.binary[r]([e,a]))):isMatrix(t)?t.value.map((e=>e.map((e=>Functions.binary[r]([e,a]))))):needsMap(t)?mapMap(t.value,(e=>Functions.binary[r]([e,a]))):Functions.binary[r]([t.value,a]);if(o.dtype&&o.dtype===dt.ERROR){return o}n.value=Object.freeze(o);if(t.name){n.name=t.name}i.push(Object.freeze(n));break}case"dataframe":case"max":case"min":case"sum":case"product":case"range":case"mean":case"median":case"variance":case"stddev":case"accumulate":{const r=Number(o[e+1]);e+=1;const a=[];for(let e=0;e<r;e++){const e=i.pop();if(l!=="dataframe"&&!(e.dtype&dt.RATIONAL)){return errorOprnd("NANARG",l)}a.unshift(e)}if(l==="dataframe"){const e=DataFrame.dataFrameFromVectors(a,t);if(e.dtype&&e.dtype===dt.ERROR){return e}i.push(e);break}const s=Object.create(null);const u=Object.create(null);u.expos=n?Functions.functionExpos(l,a):allZeros;if(u.dtype&&u.dtype===dt.ERROR){return errorOprnd("")}s.unit=Object.freeze(u);const[c,d]=multivarFunction("reduce",l,a);s.value=Object.freeze(c);s.dtype=d;i.push(Object.freeze(s));break}case"rand":{const t=Number(o[e+1]);e+=1;if(t===0){const e=Rnl.fromNumber(Math.random());i.push({value:e,unit:allZeros,dtype:dt.RATIONAL})}else if(t===1){const e=Rnl.toNumber(i.pop().value);if(!Number.isInteger(e)){return errorOprnd("INT_ARG","rand")}const t=new Array(e).fill(0).map((e=>Rnl.fromNumber(Math.random())));i.push({value:t,unit:allZeros,dtype:dt.RATIONAL+dt.COLUMNVECTOR})}else if(t===2){const e=Rnl.toNumber(i.pop().value);if(!Number.isInteger(e)){return errorOprnd("INT_ARG","rand")}const t=Rnl.toNumber(i.pop().value);if(!Number.isInteger(t)){return errorOprnd("INT_ARG","rand")}let r=new Array(t).fill(new Array(e).fill(0));r=r.map((e=>e.map((e=>Rnl.fromNumber(Math.random())))));i.push({value:r,unit:allZeros,dtype:dt.RATIONAL+dt.MATRIX})}else{return errorOprnd("BAD_ARGS","rand")}break}case"isnan":{const e=i.pop();const t=Object.create(null);t.value=!(e.dtype&dt.RATIONAL);t.unit=null;t.dtype=dt.BOOLEAN;i.push(Object.freeze(t));break}case"length":{const e=i.pop();const t=e.value;const r=isVector(e)?t.length:e.dtype&dt.MATRIX?t.length*t[0].length:e.dtype===dt.STRING?Array.from(t).length:e.dtype&dt.MAP?e.keys().value.length:0;const n=Object.create(null);n.value=Object.freeze(Rnl.fromNumber(r));n.unit=Object.create(null);n.unit.expos=allZeros;n.dtype=dt.RATIONAL;i.push(Object.freeze(n));break}case"count":{const e=i.pop();const t=i.pop();if(e.dtype!==dt.STRING||t.dtype!==dt.STRING){return errorOprnd("COUNT")}const r=Object.create(null);r.value=Object.freeze(Rnl.fromNumber(t.value.split(e.value).length-1));r.unit=Object.create(null);r.unit.expos=allZeros;r.dtype=dt.RATIONAL;i.push(Object.freeze(r));break}case"format":{const e=i.pop().value;const t=format(i.pop().value,e);i.push({value:t,unit:null,dtype:dt.STRING});break}case"lerp":{const e=new Array(3);e[2]=i.pop();e[1]=i.pop();e[0]=i.pop();const t=Functions.lerp(e,n);if(t.dtype===dt.ERROR){return t}i.push(t);break}case"matrix2table":{const e=i.pop();const r=i.pop();const n=i.pop();const a=DataFrame.matrix2table(n,r,e,t);if(a.dtype===dt.ERROR){return a}i.push(a);break}case"transpose":i.push(Matrix.transpose(i.pop()));break;case"trace":i.push(Matrix.trace(i.pop()));break;case"fetch":return errorOprnd("FETCH");case"function":{const s=o[e+1];const l=Number(o[e+2]);e+=2;const u=new Array(l);for(let e=l-1;e>=0;e--){u[e]=i.pop()}let c;if(t.svg&&(s==="plot"||draw.functions[s])){if(s==="plot"){u.splice(1,0,r);c=plot(...u)}else{c=draw.functions[s](...u)}}else if(nextToken(o,e)==="."){let t=i.pop().value;if(t.value){t=t.value}const a=t[s];if(a===undefined){return errorOprnd("F_NAME",s)}if(a.dtype===dt.ERROR){return a}c=evalCustomFunction(a,u,r,n,t);e+=1}else if(a&&a[s]){const e=a[s];c=evalCustomFunction(e,u,r,n,a)}else if(t[s]&&t[s].dtype===dt.MODULE){const e=t[s]["value"];c=evalCustomFunction(e,u,r,n)}else{return errorOprnd("BAD_FUN_NM",s)}if(c.dtype===dt.ERROR){return c}i.push(c);break}case"=":case"==":case"⩵":case"<":case">":case"<=":case"≤":case">=":case"≥":case"≠":case"!=":case"∈":case"in":case"∉":case"!in":case"∋":case"∌":case"⊆":case"⊈":case"⊇":case"⊉":{const e=i.pop();const t=i.pop();if(n&&!(t.dtype&dt.STRING||e.dtype&dt.STRING||t.dtype===dt.NULL||e.dtype===dt.NULL)){if(!unitsAreCompatible(t.unit.expos,e.unit.expos)){return errorOprnd("UNIT_COMP")}}const r=Object.create(null);r.unit=null;const a=t.dtype===dt.BOOLEANFROMCOMPARISON?s.value:undefined;if(setComparisons.includes(l)){r.value=compare(l,t.value,e.value,a)}else{const[n,o,i]=binaryShapesOf(t,e);r.value=Operators.relations[n][o].relate(l,t.value,e.value,a)}if(r.value.dtype&&r.value.dtype===dt.ERROR){return r.value}r.dtype=t.dtype+dt.BOOLEANFROMCOMPARISON;if(r.dtype&dt.RATIONAL){r.dtype-=dt.RATIONAL}if(r.dtype&dt.COMPLEX){r.dtype-=dt.COMPLEX}if(r.dtype&dt.STRING){r.dtype-=dt.STRING}s=e;i.push(Object.freeze(r));break}case"and":case"&&":case"or":case"||":case"∧":case"∨":case"⊻":{const t=i.pop();const r=i.pop();if(!(r.dtype&dt.BOOLEAN)||!(t.dtype&dt.BOOLEAN)){return errorOprnd("LOGIC",o[e])}const n={and:"and","&&":"and",or:"or","∧":"and","||":"or","∨":"or","⊻":"xor"}[l];const[a,s,u]=binaryShapesOf(r,t);const c=Object.create(null);c.unit=null;c.value=Operators.binary[a][s][n](r.value,t.value);if(c.value.dtype&&c.value.dtype===dt.ERROR){return c.value}c.dtype=Operators.dtype[a][s](r.dtype,t.dtype,l);i.push(Object.freeze(c));break}case"not":case"¬":{const e=i.pop();if(!(e.dtype&dt.BOOLEAN)){return errorOprnd("LOGIC",l)}const t=Object.create(null);t.unit=null;t.value=Operators.unary[shapeOf(e)]["not"](e.value);if(t.value.dtype&&t.value.dtype===dt.ERROR){return t.value}t.dtype=dt.BOOLEAN;i.push(Object.freeze(t));break}case"cases":{const s=Number(o[e+1]);e+=1;const l=new Array(s);for(let e=s-1;e>=0;e--){l[e]=i.pop()}for(let u=0;u<s;u++){if((l[u].dtype&dt.BOOLEAN)===0){return errorOprnd("LOGIC","if")}const s=Operators.condition[shapeOf(l[u])](l[u].value);if(s){const s=o[e+u+1].replace(/§/g," ");const l=evalRpn(s,t,r,n,a);if(l.dtype===dt.ERROR){return l}i.push(l);break}}e+=s;break}case"applyUnit":{if(!n){return errorOprnd("UNIT_AWARE",o[e+1])}const r=i.pop();if(!(r.dtype&dt.RATIONAL)){return errorOprnd("QUANT_NUM")}const a=o[e+1];e+=1;const s=Object.create(null);s.unit=Object.create(null);s.dtype=r.dtype;if(!n){s.value=r.value;if(r.dtype&dt.MAP){s.unit=unitFromUnitName(a,t)}else{s.unit.name=a}}else{const e=unitFromUnitName(a,t);if(e.dtype&&e.dtype===dt.ERROR){return e}if(isMatrix(r)){s.unit.expos=r.unit.expos.map(((t,r)=>t+e.expos[r]));s.value=Matrix.convertToBaseUnits(r,e.gauge,e.factor)}else if(r.dtype&dt.MAP){s.unit=unitFromUnitName(r.unit);s.value=r.value}else{s.unit.expos=r.unit.expos.map(((t,r)=>t+e.expos[r]));s.value=Rnl.multiply(Rnl.add(r.value,e.gauge),e.factor)}}i.push(Object.freeze(s));break}case"rem%":{const e=i.pop();const t=i.pop();if(!(t.dtype&dt.RATIONAL&(e.dtype&dt.RATIONAL))){return errorOprnd("NAN_OP")}const[r,n,a]=binaryShapesOf(t,e);const o=Object.create(null);o.unit=Object.create(null);o.unit.expos=allZeros;o.value=Operators.binary[r][n]["rem"](t.value,e.value);if(o.value.dtype&&o.value.dtype===dt.ERROR){return o.value}o.dtype=Operators.dtype[r][n](t.dtype,e.dtype,l);i.push(Object.freeze(o));break}case"⎾⏋":case"⎿⏌":{const e=i.pop();if(!(e.dtype&dt.RATIONAL)){return errorOprnd("NAN_OP")}if(n){if(!unitsAreCompatible(e.unit.expos,allZeros)){{return errorOprnd("")}}}const t=l==="⎾⏋"?"ceil":"floor";const r=Object.create(null);r.value=Operators.unary[shapeOf(e)][t](e.value);if(r.value.dtype&&r.value.dtype===dt.ERROR){return r.value}r.unit=e.unit;r.dtype=e.dtype;i.push(Object.freeze(r));break}case"()":{const e=[];e.unshift(i.pop());e.unshift(i.pop());if(n){if(!unitsAreCompatible(e[0].unit.expos,allZeros)||!unitsAreCompatible(e[1].unit.expos,allZeros)){return errorOprnd("BINOM")}}const t=Object.create(null);t.unit=Object.create(null);t.unit.expos=allZeros;const[r,a]=multivarFunction("binary","binomial",e);t.value=r;t.dtype=a;i.push(Object.freeze(t));break}case"throw":return{value:i.pop().value,unit:null,dtype:dt.ERROR};case"\\blue":case"\\gray":case"\\green":case"\\orange":case"\\pink":case"\\purple":case"\\red":{const e=clone(i.pop());if(e.dtype===dt.STRING){e.unit=l.slice(1)}i.push(e);break}}}}const l=i.pop();if(i.length>0){return errorOprnd("ERROR")}return l};const plot=(e,t,r,n,a,o)=>{const i=e.value.temp;n=n==null?Rnl.fromNumber(250):n.value;const s=a==null?Rnl.fromNumber(i.xmin):a.value;const l=o==null?Rnl.fromNumber(i.xmax):o.value;const u=Rnl.divide(Rnl.subtract(l,s),n);const c=Matrix.operandFromRange([s,u,l]);const d={value:c.value,unit:null,dtype:dt.COLUMNVECTOR+dt.RATIONAL};let m;let p;if(r.value.dtype&&r.value.dtype===dt.MODULE){m=evalCustomFunction(r.value,[d],t,false);p=d.value.map(((e,t)=>[e,m.value[t]]))}else if(r.dtype===dt.STRING){if(/§matrix§1§2$/.test(r.value)){d.name="t";p=evalRpn(r.value.replace(/§/g," "),{t:d},t,false).value}else{d.name="x";m=evalRpn(r.value.replace(/§/g," "),{x:d},t,false);p=d.value.map(((e,t)=>[e,m.value[t]]))}}const f={value:p,unit:null,dtype:dt.MATRIX+dt.RATIONAL};return draw.functions.path(e,f,"L")};const elementFromIterable=(e,t,r)=>{let n;let a=Rnl.increment(t);let o=0;if(e.dtype===dt.RANGE){n=t;a=Rnl.add(t,r);o=dt.RATIONAL}else if(e.dtype===dt.STRING&&e.value[Rnl.fromNumber(t)]==="\ud835"){n=Rnl.fromNumber(e.value[t]+e.value[t+1]);a=Rnl.add(t,2);o=dt.STRING}else{n=e.value[Rnl.toNumber(t)];o=e.dtype&dt.STRING?dt.STRING:e.dtype&dt.ROWVECTOR?e.dtype-dt.ROWVECTOR:e.dtype&dt.COLUMNVECTOR?e.dtype-dt.COLUMNVECTOR:e.dtype-dt.MATRIX}const i={value:n,unit:e.unit,dtype:o};return[i,a]};const loopTypes=["while","for"];const evalCustomFunction=(e,t,r,n,a)=>{if(e.dtype===dt.ERROR){return e}if(t.length>e.parameters.length){return errorOprnd("NUMARGS",e.name)}const o=Object.create(null);for(let r=0;r<t.length;r++){o[e.parameters[r].name]=t[r]}if(e.parameters.length>t.length){for(let r=t.length;r<e.parameters.length;r++){o[e.parameters[r].name]=e.parameters[r].default}}if(e.dtype===dt.DRAWING){o["svg"]={value:draw.startSvg(),unit:null,dtype:dt.DRAWING}}const i=[{type:"if",condition:true,endOfBlock:e.statements.length-1}];for(let t=0;t<e.statements.length;t++){const s=e.statements[t];const l=s.stype;const u=i.length-1;switch(l){case"statement":{if(i[u].condition){const e=evalRpn(s.rpn,o,r,n,a);if(e.dtype===dt.ERROR){console.log(s.rpn);return e}if(s.name){s.resultdisplay=n?"!!":"!";const[t,a]=conditionResult(s,e,n);insertOneHurmetVar(o,t,r)}}break}case"if":{if(i[u].condition){const e=evalRpn(s.rpn,o,r,n,a);if(e.dtype===dt.ERROR){return e}const t=Operators.condition[shapeOf(e)](e.value);i.push({type:"if",condition:t,endOfBlock:s.endOfBlock})}else{t=s.endOfBlock}break}case"elseif":{if(i[u].type==="if"&&i[u].condition){t=i[u].endOfBlock;i.pop()}else{const e=evalRpn(s.rpn,o,r,n,a);if(e.dtype===dt.ERROR){return e}const t=Operators.condition[shapeOf(e)](e.value);i[i.length-1].condition=t}break}case"else":if(i[u].type==="if"&&i[u].condition){t=i[u].endOfBlock;i.pop()}else{i[u].condition=true}break;case"while":{if(i[u].condition){const e={type:"while",startStatement:t,rpn:s.rpn,endOfBlock:s.endOfBlock};const l=evalRpn(s.rpn,o,r,n,a);if(l.dtype===dt.ERROR){return l}const u=Operators.condition[shapeOf(l)](l.value);e.condition=u;if(e.condition===true){i.push(e)}else{t=s.endOfBlock}}else{t=s.endOfBlock}break}case"for":{const e={type:"for",condition:true,startStatement:t,endOfBlock:s.endOfBlock};const l=s.rpn.split(" ");e.dummyVariable=l.shift().slice(1);const u=evalRpn(l.join(" "),o,r,n,a);e.index=u.dtype&dt.RANGE?u.value[0]:Rnl.fromNumber(0);e.step=u.dtype&dt.RANGE?u.value[1]:Rnl.fromNumber(0);e.endIndex=u.dtype&dt.RANGE?u.value[2]:Rnl.fromNumber(u.value.length-1);const[c,d]=elementFromIterable(u,e.index,e.step);e.nextIndex=d;e.iterable=u;i.push(e);o[e.dummyVariable]=c;break}case"break":{if(i[u].condition){for(let e=i.length-1;e>0;e--){if(loopTypes.includes(i[e].type)||e===0){t=i[e].endOfBlock;i.pop();break}else{i.pop()}}}break}case"end":{if(i[u].type==="if"&&t>=i[u].endOfBlock){i.pop()}else if(i[u].type==="if"&&i[u].condition){if(t<i[u].endOfBlock){t=i[u].endOfBlock}i.pop()}else if(i[u].type==="while"){const e=evalRpn(i[u].rpn,o,r,n,a);if(e.dtype===dt.ERROR){return e}i[u].condition=e.value;if(i[u].condition){t=i[u].startStatement}else{i.pop()}}else if(i[u].type==="for"){i[u].index=i[u].nextIndex;const e=Rnl.isRational(i[u].index)&&Rnl.isPositive(i[u].step)?Rnl.lessThanOrEqualTo(i[u].index,i[u].endIndex):Rnl.isRational(i[u].index)?Rnl.greaterThanOrEqualTo(i[u].index,i[u].endIndex):i[u].index<=i[u].endIndex;if(e){const[e,r]=elementFromIterable(i[u].iterable,i[u].index,i[u].step);o[i[u].dummyVariable]=e;i[u].nextIndex=r;t=i[u].startStatement}else{i.pop()}}break}case"return":if(i[u].condition){if(s.rpn){const e=evalRpn(s.rpn,o,r,n,a);return e}else{return{value:Rnl.zero,unit:allZeros,dtype:dt.RATIONAL}}}break;case"print":if(i[u].condition){if(s.rpn){const e=evalRpn(s.rpn,o,r,n,a);if(e.dtype===dt.ERROR){return e}const t=e.dtype===dt.RATIONAL?Rnl.toNumber(e.value):e.dtype===dt.STRING?e.value:isVector(e)&&e.dtype&dt.RATIONAL?e.value.map((e=>Rnl.toNumber(e))):e.dtype===dt.MATRIX+dt.RATIONAL?e.value.map((e=>e.map((e=>Rnl.toNumber(e))))):e.value;console.log(t)}}break;case"throw":if(i[u].condition){if(s.rpn){const e=evalRpn(s.rpn,o,r,n,a);return{value:e.value,unit:null,dtype:dt.ERROR}}else{return{value:s.rpn,unit:null,dtype:dt.ERROR}}}break}}};const errorResult=(e,t)=>{e.value=null;e.resultDisplay="\\textcolor{firebrick}{\\text{"+t.value+"}}";e.altResultDisplay=t.value;e.error=true;if(e.resulttemplate.indexOf("!")>-1){e.tex+="= "+e.resultDisplay;e.alt+=t.value}else if(e.resulttemplate.indexOf("@")>-1){e.tex=e.resulttemplate.replace(/@@?/,e.resultDisplay);e.alt=e.altresulttemplate.replace(/@@?/,e.altResultDisplay)}else{e.tex=e.tex.replace(/[?%] *[?%]|[?%]/,e.resultDisplay);e.alt=e.alt.replace(/[?%] *[?%]|[?%]/,e.altResultDisplay)}return[e,t]};const conditionResult=(e,t,r)=>{let n=Object.create(null);n.value=clone(t.value);n.unit=clone(t.unit);n.dtype=t.dtype;if(n.dtype===dt.COMPLEX&&Rnl.isZero(Cpx.imag(n.value))){n.value=Cpx.re(n.value);n.dtype=1}if(n.dtype!==dt.ERROR&&r&&e.resultdisplay.indexOf("!")===-1&&(e.expos||n.unit&&n.unit.expos&&Array.isArray(n.unit.expos))){const t=e.expos?e.expos:allZeros;if(!unitsAreCompatible(n.unit.expos,t)){const t=e.expos?"UNIT_RES":"UNIT_MISS";n=errorOprnd(t)}}if(n.dtype===dt.ERROR){return errorResult(e,n)}if(e.resulttemplate&&e.resulttemplate.indexOf("!")>-1&&!(n.dtype===dt.DATAFRAME||n.dtype&dt.MAP||isMatrix(n)||n.dtype&dt.TUPLE)){return errorResult(e,errorOprnd("BAD_DISPLAY"))}if(n.dtype&dt.RATIONAL){n.value=isVector(n)?n.value.map((e=>Rnl.normalize(e))):isMatrix(n)?n.value.map((e=>e.map((e=>Rnl.normalize(e))))):n.dtype===dt.RATIONAL?Rnl.normalize(n.value):n.value}else if(n.dtype===dt.COMPLEX){n.value=[Rnl.normalize(n.value[0]),Rnl.normalize(n.value[1])]}e.dtype=n.dtype;const a=e.factor&&(e.factor!==1||e.gauge);if(n.dtype&dt.DATAFRAME||typeof e.resultdisplay==="string"&&e.resultdisplay.indexOf("!")>-1){e.unit=n.unit}else if(r&&n.dtype&dt.RATIONAL){if(!a&unitsAreCompatible(n.unit.expos,allZeros)){e.factor=Rnl.one;e.gauge=Rnl.zero;e.expos=allZeros}n.value={plain:isMatrix(n)?Matrix.convertFromBaseUnits({value:n.value,dtype:n.dtype},e.gauge,e.factor):n.dtype&dt.MAP?map.convertFromBaseUnits(n.value,e.gauge,e.factor):Rnl.subtract(Rnl.divide(n.value,e.factor),e.gauge),inBaseUnits:n.value};e.dtype+=dt.QUANTITY;e.expos=n.unit.expos}else if(a){n.value={plain:n.value,inBaseUnits:isMatrix(n)&&n.dtype&dt.MAP?mapMap(n.value,(t=>t.map((t=>Rnl.multiply(Rnl.add(t,e.gauge),e.factor))))):isMatrix(n)?Matrix.convertToBaseUnits({value:n.value,dtype:n.dtype},e.gauge,e.factor):n.dtype&dt.MAP?mapMap(n.value,(t=>Rnl.multiply(Rnl.add(t,e.gauge),e.factor))):Rnl.multiply(Rnl.add(n.value,e.gauge),e.factor)};e.dtype+=dt.QUANTITY}else if(n.dtype&dt.RATIONAL||n.dtype&dt.COMPLEX){e.expos=allZeros}if(n.value){e.value=n.value}return[e,n]};const evaluateDrawing=(e,t,r="1,000,000.")=>{const n=e.value;const a=[];for(let e=0;e<n.parameters.length;e++){const o=n.parameters[e];a.push(evalRpn("¿"+o,t,r,false,{}))}const o=evalCustomFunction(n,a,r,false,{});if(o.dtype===dt.ERROR){e.error=true;e.tex="\\textcolor{firebrick}{\\text{"+o.value+"}}";e.value=null;e.dtype=dt.ERROR}else{e.resultdisplay=o.value;delete e.resultdisplay.temp}return e};const evaluate=(e,t,r="1,000,000.")=>{e.tex=e.template;e.alt=e.altTemplate;const n=/\?\?|!!|%%|@@|¡¡/.test(e.resulttemplate);const a=t.format?t.format.value:"h15";if(e.tex.indexOf("〖")>-1){const o=plugValsIntoEcho(e.tex,t,n,a,r);if(o.dtype&&o.dtype===dt.ERROR){const[t,r]=errorResult(e,o);return t}else{e.tex=o}}if(e.rpn){let o=evalRpn(e.rpn,t,r,n);if(o.dtype===dt.ERROR){[e,o]=errorResult(e,o);return e}let i;[e,i]=conditionResult(e,o,n);if(e.error){return e}e=formatResult(e,i,a,r,n)}return e};const numberRegEx$3=new RegExp(Rnl.numberPattern);const unitRegEx$1=/('[^']+'|[°ΩÅK])$/;const numStr="(-?(?:0x[0-9A-Fa-f]+|[0-9]+(?: [0-9]+\\/[0-9]+|(?:\\.[0-9]+)?(?:e[+-]?[0-9]+|%)?)))";const nonNegNumStr="(0x[0-9A-Fa-f]+|[0-9]+(?: [0-9]+\\/[0-9]+|(?:\\.[0-9]+)?(?:e[+-]?[0-9]+|%)?))";const complexRegEx=new RegExp("^"+numStr+"(?: *([+-]) *("+nonNegNumStr+") *im|∠"+numStr+"(°)?)");const valueFromLiteral=(e,t,r)=>{let n="";let a="";const o=unitRegEx$1.exec(e);if(o){n=o[0].replace(/'/g,"").trim();e=e.slice(0,-o[0].length).trim();a=unitTeXFromString(n)}if(/^[({[].* to /.test(e)){return[0,null,dt.ERROR,""]}else if(e==="true"||e==="false"){return[Boolean(e),null,dt.BOOLEAN,`\\mathord{\\text{${e}}}`]}else if(/^\x22.+\x22/.test(e)){if(t==="format"){return parseFormatSpec(e.slice(1,-1).trim())}else{const t=parse(e,r);return[e,undefined,dt.STRING,t]}}else if(/^[([]/.test(e)){const[t,o]=parse(e,r,true);const i=evalRpn(o,{},r,false,{});let s=i.dtype&dt.RATIONAL?allZeros:null;let l=i.dtype;if(n){s=n;l+=dt.QUANTITY;return[i.value,s,l,t+"\\,"+a]}else{return[i.value,s,l,t]}}else if(/^``/.test(e)){e=tablessTrim(e.slice(2,-2));const t=DataFrame.dataFrameFromTSV(e,{});if(t.dtype===dt.DATAFRAME){return[t.value,t.unit,dt.DATAFRAME,DataFrame.display(t.value,"h3",r)]}else{if(n){t.unit=n;t.dtype=dt.MAP+dt.RATIONAL+dt.QUANTITY}return[t.value,t.unit,t.dtype,map.display(t,"h3",r)+"\\;"+a]}}else if(complexRegEx.test(e)){const t=parse(e,r);const n=e.match(complexRegEx);let a;let o;if(n[3]){a=Rnl.fromString(n[1]);o=Rnl.fromString(n[3]);if(n[2]==="-"){o=Rnl.negate(o)}}else{const e=Rnl.fromString(n[1]);let t=Rnl.fromString(n[4]);if(n[5]){t=Rnl.divide(Rnl.multiply(t,Rnl.pi),Rnl.fromNumber(180))}a=Rnl.multiply(e,Rnl.fromNumber(Math.cos(Rnl.toNumber(t))));o=Rnl.multiply(e,Rnl.fromNumber(Math.sin(Rnl.toNumber(t))))}return[[a,o],allZeros,dt.COMPLEX,t]}else if(e.match(numberRegEx$3)){const t=parse(e,r);if(n){return[Rnl.fromString(e),n,dt.RATIONAL+dt.QUANTITY,t+"\\;"+a]}else{return[Rnl.fromString(e),{expos:allZeros},dt.RATIONAL,t]}}else{return[0,null,dt.ERROR,""]}};const improveQuantities=(e,t)=>{if(e.name&&e.value&&e.dtype&dt.QUANTITY){const r=e.unit===undefined?{name:"",factor:Rnl.one,gauge:Rnl.zero,log:"",expos:allZeros}:typeof e.unit==="string"?unitFromUnitName(e.unit,t):e.unit;if(r.dtype&&r.dtype===dt.ERROR){e.tex+=" \\color{firebrick}{\\text{"+r.value+"}}";e.alt+=r.value;return e}e.expos=r.expos;if(Rnl.isRational(e.value)){e.value={plain:e.value,inBaseUnits:Rnl.multiply(Rnl.add(e.value,r.gauge),r.factor)}}else if(isMatrix(e)){e.value={plain:e.value,inBaseUnits:Matrix.convertToBaseUnits(e,r.gauge,r.factor)}}else if(e.dtype&dt.MAP){const t=clone(e.value);const n=map.convertToBaseUnits(t,r.gauge,r.factor);e.value={plain:t,inBaseUnits:n};e.unit={expos:r.expos}}}if(e.rpn&&!e.value){if(e.unit){const r=e.unit?unitFromUnitName(e.unit,t):{factor:1,gauge:0,expos:allZeros};e.factor=r.factor;e.gauge=r.gauge;e.expos=r.expos}}};const isValidIdentifier$1=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;const keywordRegEx=/^(if|elseif|else|return|throw|while|for|break|print|end)\b/;const drawCommandRegEx=/^(title|frame|view|axes|grid|stroke|strokewidth|strokedasharray|fill|fontsize|fontweight|fontstyle|fontfamily|marker|line|path|plot|curve|rect|circle|ellipse|arc|text|dot|leader|dimension)\b/;const leadingSpaceRegEx$2=/^[\t ]+/;const functionRegEx=/^function (?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*\(/;const drawRegEx=/^draw\(/;const startSvgRegEx=/^startSvg\(\)/;const lexRegEx=/"[^"]*"|``.*|`[^`]*`|'[^']*'|#|[^"`'#]+/g;const testForStatement=e=>{const t=e.indexOf("=");if(t===-1){return false}const r=e.slice(0,t).replace(leadingSpaceRegEx$2,"").trim();if(isValidIdentifier$1.test(r)){return true}if(r.indexOf(",")===-1){return false}let n=true;const a=r.split(",");a.forEach((e=>{if(!isValidIdentifier$1.test(e.trim())){n=false}}));return n};const stripComment=e=>{const t=arrayOfRegExMatches(lexRegEx,e);for(let r=0;r<t.length;r++){if(t[r].value==="#"){e=e.slice(0,t[r].index);break}}return e.trim()};const scanModule=(e,t)=>{const r=Object.create(null);const n=e.split(/\r?\n/g);for(let e=0;e<n.length;e++){const a=stripComment(n[e]);if(a.length===0){continue}if(functionRegEx.test(a)||drawRegEx.test(a)){const[a,o]=scanFunction(n,t,e);if(a.dtype&&a.dtype===dt.ERROR){return a}r[a.name]=a;e=o}else if(testForStatement(a)){const[a,o]=scanAssignment(n,t,e);r[a.name]=a;e=o}}return{value:r,unit:null,dtype:dt.MODULE}};const handleTSV=(e,t,r)=>{for(let n=r+1;n<t.length;n++){const r=t[n].trim();if(r.length===0){continue}e+="\n"+r;if(r.slice(-2)==="``"){return[e,n]}}};const scanFunction=(e,t,r)=>{const n=stripComment(e[r]);let a=n.charAt(0)==="d";const o=n.indexOf("(");let i="";if(a){i="draw"}else{const e=n.indexOf("function");i=n.slice(e+8,o).trim()}const s=n.slice(o+1,-1).trim();const l=s.length===0?[]:s.split(/ *[,;] */g);const u=[];for(const e of l){const r=e.split(/ *= */);const n=r[0];let a={name:n,value:null,dtype:null};if(r[1]){const[e,o,i,s]=valueFromLiteral(r[1],"",t);a={name:n,value:e,unit:o,dtype:i,resultDisplay:s}}u.push({name:n,default:a})}const c={name:i,dtype:a?dt.DRAWING:dt.MODULE,parameters:u,statements:[]};const d=[];let m="";let p=false;let f="";let h="";let g=false;for(let n=r+1;n<e.length;n++){let r=stripComment(e[n]);if(r.length===0){continue}if(p){const e=f.slice(-1);r=e===";"&&"})]".indexOf(r.charAt(0))>-1?f.slice(0,-1).trim()+r:e===";"||e===","?f+" "+r:f+r}if(/[{([,;]$/.test(r)){p=true;f=r;continue}else if(e.length>n+1&&/^\s*[+\-)\]}]/.test(e[n+1])){p=true;f=r;continue}const o=keywordRegEx.exec(r);if(o){h=o[0];m=r.slice(h.length).trim();if(m.length>0&&/^``/.test(m)){[m,n]=handleTSV(m,e,n)}}else if(a&&drawCommandRegEx.test(r)){h="svg";m=r.indexOf(" ")===-1?r+"(svg)":r.replace(" ","(svg, ")+")";g=true}else{if(testForStatement(r)){const t=r.indexOf("=");h=r.slice(0,t-1).trim();m=r.slice(t+1).trim();if(/^``/.test(m)){[m,n]=handleTSV(m,e,n)}if(startSvgRegEx.test(m)){a=true}g=true}else{return[errorOprnd("FUNC_LINE",i+", line "+(n+1)),n]}}let s="";if(m){[,s]=parse(m,t,true);if(h==="for"){s=s.replace(/\u00a0in\u00a0/," ")}}const l=g?"statement":h;if(g&&/[,;]/.test(h)){h=h.split(/[,;]/).map((e=>e.trim()))}c.statements.push({name:h,rpn:s,stype:l});if(l==="if"||l==="while"||l==="for"){d.push({type:l,statementNum:c.statements.length-1})}else if(l==="end"){if(d.length===0){if(a){c.statements.splice(-1,0,{name:"return",rpn:"¿svg",stype:"return"})}return[c,n]}const e=d[d.length-1];c.statements[e.statementNum].endOfBlock=c.statements.length-1;d.pop()}g=false;p=false;f="";h="";m=""}return[errorOprnd("END_MISS",i),0]};const scanAssignment=(e,t,r)=>{let n=false;let a="";let o=r;for(let t=r;t<e.length;t++){const r=stripComment(e[t]);if(r.length===0){continue}if(n){a=a.slice(-1)===";"&&"})]".indexOf(r.charAt(0))>-1?a.slice(0,-1).trim()+r:a+r}else{a=r}if(/[{([,;]$/.test(a)){n=true}else if(e.length>t+1&&/^\s*[+\-)\]}]/.test(e[t+1])){n=true}else{o=t;break}}const i=a.indexOf("=");let s=a.slice(0,i).trim();if(/[,;]/.test(s)){s=s.split(/[,;]/).map((e=>e.trim()))}const l=a.slice(i+1).trim();const[u,c,d,m]=valueFromLiteral(l,s,t);const p={name:s,value:u,unit:c,dtype:d,resultDisplay:m};improveQuantities(p,{});return[p,o]};const containsOperator=/[+\-×·*∘⌧/^%‰&√!¡|‖&=<>≟≠≤≥∈∉⋐∧∨⊻¬]|\xa0(function|mod|\\atop|root|sum|abs|cos|sin|tan|acos|asin|atan|sec|csc|cot|asec|acsc|acot|exp|log|ln|log10|log2|cosh|sinh|tanh|sech|csch|coth|acosh|asinh|atanh|asech|acsch|acoth|gamma|Γ|lgamma|logΓ|lfact|cosd|sind|tand|acosd|asind|atand|secd|cscd|cotd|asecd|acscd|acotd|real|imag|angle|Char|round|sqrt|sign|\?{}|%|⎾⏋|⎿⏌|\[\]|\(\))\xa0/;const mustDoCalculation=/^(``.+``|[$$£¥\u20A0-\u20CF]?(\?{1,2}|@{1,2}|%{1,2}|!{1,2})[^=!(?@%!{})]*)$/;const assignDataFrameRegEx=/^[^=]+=\s*``/;const currencyRegEx=/^[$£¥\u20A0-\u20CF]/;const isValidIdentifier$2=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*$/;const matrixOfNames=/^[([](?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′*[,;].+[)\]]$/;const isKeyWord=/^(π|true|false|root|if|else|elseif|and|or|otherwise|mod|for|while|break|return|throw)$/;const shortcut=(e,t)=>{const r=parse(e,t);return{entry:e,tex:r,alt:e}};const prepareStatement=(e,t="1,000,000.")=>{let r="";let n="";let a="";let o=false;let i=false;let s=false;let l=false;let u=false;let c=0;let d="";let m="";let p="";let f="";let h="";let g=false;let b;let y;let x;let R="";const v=drawRegEx.test(e);if(functionRegEx.test(e)||v){let r="";if(v){r="draw"}else{const t=e.indexOf("function");const n=e.indexOf("(");r=e.slice(t+8,n).trim()}const n=scanModule(e,t);const a=n.dtype&&n.dtype===dt.ERROR;if(a){window.alert(n.value)}const o={entry:e,name:r,value:a?n.value:n.value[r],dtype:a?dt.ERROR:r==="draw"?dt.DRAWING:dt.MODULE,error:a};return o}R=e;const S=assignDataFrameRegEx.test(R);const A=S?R.indexOf("=")+1:R.lastIndexOf("=")+1;if(A>1){n=R.substring(0,A-1).replace(/ +$/,"");if(n.length>0&&/;\s*$/.test(n)){u=true;n=n.replace(/;\s*$/,"")}n=n.trim();a=R.substring(A).trim();if(mustDoCalculation.test(a)){o=true;i=a.indexOf("!")>-1;s=a.indexOf("@")>-1;l=a.indexOf("%")>-1;c=n.indexOf("=")+1;if(c){r=n.slice(0,c-1).trim();d=n.substring(c).trim();if(matrixOfNames.test(r)){r=r.slice(1,-1).trim()}if(/[,;]/.test(r)){const e=r.split(/[,;]/);for(let r=0;r<e.length;r++){const n=e[r].trim();if(isKeyWord.test(n)||!isValidIdentifier$2.test(n)){return shortcut(R,t)}}h=e.map((e=>e.trim()))}else{if(isValidIdentifier$2.test(r)&&!isKeyWord.test(r)){h=r}else{d=n}}}else{d=n}}else if(S){h=n;d=a}else if(isValidIdentifier$2.test(n)&&!isKeyWord.test(n)){h=n;if(a===""){const e=parse(R,t);return{entry:R,tex:e,alt:R}}}else{return shortcut(R,t)}}else{return shortcut(R,t)}if(d.length>0){if(/^\s*fetch\(/.test(d)){m=""}else{[m,p]=parse(d,t,true);if(i||s||m.indexOf("〖")===-1||/\u00a0for\u00a0/.test(p)){m=""}else if(l){m=""}else{if(containsOperator.test(" "+p+" ")){m="\\textcolor{#0000ff}{"+m+"}"}else{m=""}}}}if(currencyRegEx.test(a)){g=true;y=a.charAt(0)}if(o){b=null;if(!g){y=a.replace(/[?@%!']/g,"").trim()}if(i){f=a}else{if(y){f=a.trim().replace(/([^ ?!@%]+)$/,"'"+"$1"+"'");f=parse(f,t).replace(/\\%/g,"%").replace("@ @","@@")}else{f=parse(a,t).replace(/\\%/g,"%").replace("@ @","@@")}f=f.replace(/\\text\{(\?\??|%%?)\}/,"$1");f=f.replace(/([?%]) ([?%])/,"$1"+"$2")}}else{[b,y,x,f]=valueFromLiteral(a,h,t);if(x===dt.ERROR){return shortcut(R,t)}p=""}let w="";let O="";if(!s){w=parse(n,t);if(u){w="\\begin{aligned}"+w;const e=w.indexOf("=");w=w.slice(0,e)+"&"+w.slice(e)}const e=u?"\\\\ &":"";O=n;if(m.length>0&&!l){w+=` ${e}= `+m}if(!i){w+=" "+(u?"\\\\&":"")+"= "+f;O+=" = "+a}if(u){w+="\\end{aligned}"}}const M={entry:R,template:w,altTemplate:O,resultdisplay:f,dtype:x,error:false};if(h){M.name=h}if(o){M.resulttemplate=f;M.altresulttemplate=a}else{M.tex=w;M.alt=O}if(p){M.rpn=p}if(b){M.value=b}if(y){if(Array.isArray(y)){M.expos=y}else{M.unit=y}}return M};const fetchRegEx=/^(?:[A-Za-zıȷ\u0391-\u03C9\u03D5\u210B\u210F\u2110\u2112\u2113\u211B\u212C\u2130\u2131\u2133]|(?:\uD835[\uDC00-\udc33\udc9c-\udcb5]))[A-Za-z0-9_\u0391-\u03C9\u03D5\u0300-\u0308\u030A\u030C\u0332\u20d0\u20d1\u20d6\u20d7\u20e1]*′* *= *(?:fetch|import)\(/;const importRegEx=/^[^=]+= *import/;const fileErrorRegEx=/^Error while reading file. Status Code: \d*$/;const textRegEx=/\\text{[^}]+}/;const urlFromEntry=e=>{const t=e.replace(/^[^()]+\("?/,"");return t.replace(/"?\).*$/,"").trim()};const processFetchedString=(e,t,r,n)=>{const a=Object.create(null);a.entry=e;a.name=e.replace(/=.+$/,"").trim();let o=parse(e.replace(/\s*=\s*[$$£¥\u20A0-\u20CF]?(?:!{1,2}).*$/,""),n);const i=urlFromEntry(e);if(/\.(?:tsv|txt)$/.test(i)){const e=i.replace(/.+\//,"");const t=textRegEx.exec(o);o=o.slice(0,t.index)+"\\text{"+addTextEscapes(e)+"})"}a.tex=o;a.alt=e;if(t==="File not found."||fileErrorRegEx.test(t)){a.dtype=dt.ERROR;a.tex+=` = \\red{\\text{${t}}}`;a.alt=" = "+t;a.value=null;return a}const s=importRegEx.test(e)?scanModule(t,n):DataFrame.dataFrameFromTSV(t,r);a.value=s.value;a.dtype=s.dtype;a.unit=s.unit;a.isFetch=true;if(s.dtype===dt.MODULE&&/^importedParameters *=/.test(e)){let e="\\begin{matrix}";let t=0;Object.entries(s.value).forEach((([n,a])=>{r[n]=a;e+=parse(a.name)+" & ";t+=1;if(t===5){e=e.slice(0,-1)+"\\\\ ";t=0}}));e=e.slice(0,t===0?-2:-1)+"\\end{matrix}";a.tex=a.tex.replace("\\mathrm{importedParameters}",e)}return a};const workAsync=(e,t,r,n,a,o,i,s)=>{const l=e.state.doc;const u=l.attrs.inDraftMode;const c=l.attrs.decimalFormat;Promise.all(i.map((e=>fetch(e,{method:"GET",headers:{"Content-Type":"text/plain;charset=UTF-8"},mode:"cors"})))).then((e=>Promise.all(e.map((e=>{if(e.status!==200&&e.status!==0){return e.status===404?"File not found.":"Error while reading file. Status Code: "+e.status}return e.text()}))))).then((i=>{const d=e.state;if(d.selection.to===a+1){d.selection=d.selection.constructor.near(d.doc.resolve(a+1))}const m=d.tr;for(let e=0;e<i.length;e++){const a=s[e];const d=r?l.nodeAt(a).attrs.entry:n.entry;const p=processFetchedString(d,i[e],o,c);p.inDraftMode=u;m.replaceWith(a,a+1,t.createAndFill(p));if(p.name){insertOneHurmetVar(o,p,c)}}try{proceedAfterFetch(e,t,r,n,a,o,m)}catch(r){console.log(r);const o=n.template.indexOf(n.resultdisplay);n.tex=n.template.slice(0,o)+"\\text{"+r+"}";m.replaceWith(a,a+1,t.createAndFill(n));m.setSelection(e.state.selection.constructor.near(m.doc.resolve(a+1)));e.dispatch(m);e.focus()}}))};const proceedAfterFetch=(e,t,r,n,a,o,i)=>{const s=e.state.doc;const l=s.attrs.decimalFormat;if(!r&&(n.name||n.rpn||n.dtype&&n.dtype===dt.DRAWING)){s.nodesBetween(0,a,(function(e){if(e.type.name==="calculation"){const t=e.attrs;if(t.name){if(t.name==="importedParameters"){Object.entries(t.value).forEach((([e,t])=>{o[e]=t}))}else{insertOneHurmetVar(o,t,l)}}}}));s.nodesBetween(a+1,s.content.size,(function(e,t){if(e.type.name==="calculation"&&e.attrs.dtype===dt.MODULE){insertOneHurmetVar(o,e.attrs,l)}}));if(!fetchRegEx.test(n.entry)){let e=clone(n);improveQuantities(e,o);if(e.rpn||n.dtype&&n.dtype===dt.DRAWING){e=e.dtype&&e.dtype===dt.DRAWING?evaluateDrawing(e,o,l):evaluate(e,o,l)}if(e.name){insertOneHurmetVar(o,e,l)}e.displayMode=n.displayMode;i.replaceWith(a,a+1,t.createAndFill(e))}}const u=r?0:a+1;s.nodesBetween(u,s.content.size,(function(e,n){if(e.type.name==="calculation"){const a=r?!fetchRegEx.test(e.attrs.entry):!e.attrs.isFetch;if(a){const a=e.attrs.entry;let s=r?prepareStatement(a,l):clone(e.attrs);s.displayMode=e.attrs.displayMode;const u=s.dtype&&s.dtype===dt.DRAWING&&(s.rpn||(s.value.parameters.length>0||r));if(r||s.rpn||u||s.name&&!(o[s.name]&&o[s.name].isFetch)){if(r){improveQuantities(s,o)}if(s.rpn||u){s=s.rpn?evaluate(s,o,l):evaluateDrawing(s,o,l)}if(s.name){insertOneHurmetVar(o,s,l)}if(r||s.rpn||u){i.replaceWith(n,n+1,t.createAndFill(s))}}}else if(e.attrs.name&&!(r&&e.attrs.isFetch)){if(e.attrs.name){if(e.attrs.name==="importedParameters"){Object.entries(e.attrs.value).forEach((([e,t])=>{o[e]=t}))}else{insertOneHurmetVar(o,e.attrs,l)}}}}}));if(!r){i.setSelection(e.state.selection.constructor.near(i.doc.resolve(a+1)))}e.dispatch(i);e.focus()};function updateCalculations(e,t,r=false,n,a){const o=e.state.doc;if(!(r||n.name||n.rpn||n.dtype&&n.dtype===dt.DRAWING)){const r=e.state;if(r.selection.to===a+1){r.selection=r.selection.constructor.near(r.doc.resolve(a+1))}const o=r.tr;try{o.replaceWith(a,a+1,t.createAndFill(n))}catch(e){}finally{e.dispatch(o);e.focus()}return}const i=Object.create(null);i.format={value:"h15"};const s=[];const l=[];if(!r){const e=n.entry;if(fetchRegEx.test(e)){s.push(urlFromEntry(e));l.push(a)}}else{o.nodesBetween(0,o.content.size,(function(e,t){if(e.type.name==="calculation"&&!e.attrs.value){const r=e.attrs.entry;if(fetchRegEx.test(r)){s.push(urlFromEntry(r));l.push(t)}else if(/^function /.test(r)){e.attrs=prepareStatement(r,o.attrs.decimalFormat);insertOneHurmetVar(i,e.attrs,o.attrs.decimalFormat)}}else if(e.attrs.isFetch||e.attrs.dtype&&e.attrs.dtype===dt.MODULE){insertOneHurmetVar(i,e.attrs,o.attrs.decimalFormat)}}))}if(s.length>0){workAsync(e,t,r,n,a,i,s,l)}else{const o=e.state;if(o.selection.to===a+1){o.selection=o.selection.constructor.near(o.doc.resolve(a+1))}const s=o.tr;try{proceedAfterFetch(e,t,r,n,a,i,s)}catch(r){console.log(r);const o=n.template.indexOf(n.resultdisplay);n.tex=n.template.slice(0,o)+"\\text{"+r+"}";s.replaceWith(a,a+1,t.createAndFill(n));s.setSelection(e.state.selection.constructor.near(s.doc.resolve(a+1)));e.dispatch(s);e.focus()}}}const calculate=(e,t={},r=false,n="1,000,000.")=>{let a=prepareStatement(e,n);improveQuantities(a,t);if(a.rpn){a=evaluate(clone(a),t,n)}else if(a.dtype&&a.dtype===dt.DRAWING){a=evaluateDrawing(a,t,n)}if(a.name){insertOneHurmetVar(t,a)}return a.dtype&&a.dtype===dt.DRAWING?a:r?a.alt:a.tex};class ParseError{constructor(e,t){let r=" "+e;let n;const a=t&&t.loc;if(a&&a.start<=a.end){const e=a.lexer.input;n=a.start;const t=a.end;if(n===e.length){r+=" at end of input: "}else{r+=" at position "+(n+1)+": "}const o=e.slice(n,t).replace(/[^]/g,"$&̲");let i;if(n>15){i="…"+e.slice(n-15,n)}else{i=e.slice(0,n)}let s;if(t+15<e.length){s=e.slice(t,t+15)+"…"}else{s=e.slice(t)}r+=i+o+s}const o=new Error(r);o.name="ParseError";o.__proto__=ParseError.prototype;o.position=n;return o}}ParseError.prototype.__proto__=Error.prototype;const deflt=function(e,t){return e===undefined?t:e};const uppercase=/([A-Z])/g;const hyphenate=function(e){return e.replace(uppercase,"-$1").toLowerCase()};const ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"};const ESCAPE_REGEX=/[&><"']/g;function escape(e){return String(e).replace(ESCAPE_REGEX,(e=>ESCAPE_LOOKUP[e]))}const getBaseElem=function(e){if(e.type==="ordgroup"){if(e.body.length===1){return getBaseElem(e.body[0])}else{return e}}else if(e.type==="color"){if(e.body.length===1){return getBaseElem(e.body[0])}else{return e}}else if(e.type==="font"){return getBaseElem(e.body)}else{return e}};const isCharacterBox=function(e){const t=getBaseElem(e);return t.type==="mathord"||t.type==="textord"||t.type==="atom"};const assert=function(e){if(!e){throw new Error("Expected non-null, but got "+String(e))}return e};const protocolFromUrl=function(e){const t=/^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(e);return t!=null?t[1]:"_relative"};const round=function(e){return+e.toFixed(4)};var utils={deflt:deflt,escape:escape,hyphenate:hyphenate,getBaseElem:getBaseElem,isCharacterBox:isCharacterBox,protocolFromUrl:protocolFromUrl,round:round};class Settings{constructor(e){e=e||{};this.displayMode=utils.deflt(e.displayMode,false);this.annotate=utils.deflt(e.annotate,false);this.leqno=utils.deflt(e.leqno,false);this.throwOnError=utils.deflt(e.throwOnError,false);this.errorColor=utils.deflt(e.errorColor,"#b22222");this.macros=e.macros||{};this.wrap=utils.deflt(e.wrap,"tex");this.xml=utils.deflt(e.xml,false);this.colorIsTextColor=utils.deflt(e.colorIsTextColor,false);this.strict=utils.deflt(e.strict,false);this.trust=utils.deflt(e.trust,false);this.maxSize=e.maxSize===undefined?[Infinity,Infinity]:Array.isArray(e.maxSize)?e.maxSize:[Infinity,Infinity];this.maxExpand=Math.max(0,utils.deflt(e.maxExpand,1e3))}isTrusted(e){if(e.url&&!e.protocol){e.protocol=utils.protocolFromUrl(e.url)}const t=typeof this.trust==="function"?this.trust(e):this.trust;return Boolean(t)}}const _functions={};const _mathmlGroupBuilders={};function defineFunction({type:e,names:t,props:r,handler:n,mathmlBuilder:a}){const o={type:e,numArgs:r.numArgs,argTypes:r.argTypes,allowedInArgument:!!r.allowedInArgument,allowedInText:!!r.allowedInText,allowedInMath:r.allowedInMath===undefined?true:r.allowedInMath,numOptionalArgs:r.numOptionalArgs||0,infix:!!r.infix,primitive:!!r.primitive,handler:n};for(let e=0;e<t.length;++e){_functions[t[e]]=o}if(e){if(a){_mathmlGroupBuilders[e]=a}}}function defineFunctionBuilders({type:e,mathmlBuilder:t}){defineFunction({type:e,names:[],props:{numArgs:0},handler(){throw new Error("Should never be called.")},mathmlBuilder:t})}const normalizeArgument=function(e){return e.type==="ordgroup"&&e.body.length===1?e.body[0]:e};const ordargument=function(e){return e.type==="ordgroup"?e.body:[e]};class DocumentFragment{constructor(e){this.children=e;this.classes=[];this.style={}}hasClass(e){return this.classes.includes(e)}toNode(){const e=document.createDocumentFragment();for(let t=0;t<this.children.length;t++){e.appendChild(this.children[t].toNode())}return e}toMarkup(){let e="";for(let t=0;t<this.children.length;t++){e+=this.children[t].toMarkup()}return e}toText(){const e=e=>e.toText();return this.children.map(e).join("")}}const createClass=function(e){return e.filter((e=>e)).join(" ")};const initNode=function(e,t){this.classes=e||[];this.attributes={};this.style=t||{}};const toNode=function(e){const t=document.createElement(e);t.className=createClass(this.classes);for(const e in this.style){if(Object.prototype.hasOwnProperty.call(this.style,e)){t.style[e]=this.style[e]}}for(const e in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,e)){t.setAttribute(e,this.attributes[e])}}for(let e=0;e<this.children.length;e++){t.appendChild(this.children[e].toNode())}return t};const toMarkup=function(e){let t=`<${e}`;if(this.classes.length){t+=` class="${utils.escape(createClass(this.classes))}"`}let r="";for(const e in this.style){if(Object.prototype.hasOwnProperty.call(this.style,e)){r+=`${utils.hyphenate(e)}:${this.style[e]};`}}if(r){t+=` style="${r}"`}for(const e in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,e)){t+=` ${e}="${utils.escape(this.attributes[e])}"`}}t+=">";for(let e=0;e<this.children.length;e++){t+=this.children[e].toMarkup()}t+=`</${e}>`;return t};class Span{constructor(e,t,r){initNode.call(this,e,r);this.children=t||[]}setAttribute(e,t){this.attributes[e]=t}toNode(){return toNode.call(this,"span")}toMarkup(){return toMarkup.call(this,"span")}}class TextNode$1{constructor(e){this.text=e}toNode(){return document.createTextNode(this.text)}toMarkup(){return utils.escape(this.text)}}class Img{constructor(e,t,r){this.alt=t;this.src=e;this.classes=["mord"];this.style=r}hasClass(e){return this.classes.includes(e)}toNode(){const e=document.createElement("img");e.src=this.src;e.alt=this.alt;e.className="mord";for(const t in this.style){if(Object.prototype.hasOwnProperty.call(this.style,t)){e.style[t]=this.style[t]}}return e}toMarkup(){let e=`<img src='${this.src}' alt='${this.alt}'`;let t="";for(const e in this.style){if(Object.prototype.hasOwnProperty.call(this.style,e)){t+=`${utils.hyphenate(e)}:${this.style[e]};`}}if(t){e+=` style="${utils.escape(t)}"`}e+="/>";return e}}function newDocumentFragment(e){return new DocumentFragment(e)}class MathNode{constructor(e,t,r,n){this.type=e;this.attributes={};this.children=t||[];this.classes=r||[];this.style=n||{}}setAttribute(e,t){this.attributes[e]=t}getAttribute(e){return this.attributes[e]}toNode(){const e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(const t in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,t)){e.setAttribute(t,this.attributes[t])}}if(this.classes.length>0){e.className=createClass(this.classes)}for(const t in this.style){if(Object.prototype.hasOwnProperty.call(this.style,t)){e.style[t]=this.style[t]}}for(let t=0;t<this.children.length;t++){e.appendChild(this.children[t].toNode())}return e}toMarkup(){let e="<"+this.type;for(const t in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,t)){e+=" "+t+'="';e+=utils.escape(this.attributes[t]);e+='"'}}if(this.classes.length>0){e+=` class="${utils.escape(createClass(this.classes))}"`}let t="";for(const e in this.style){if(Object.prototype.hasOwnProperty.call(this.style,e)){t+=`${utils.hyphenate(e)}:${this.style[e]};`}}if(t){e+=` style="${t}"`}e+=">";for(let t=0;t<this.children.length;t++){e+=this.children[t].toMarkup()}e+="</"+this.type+">";return e}toText(){return this.children.map((e=>e.toText())).join("")}}class TextNode{constructor(e){this.text=e}toNode(){return document.createTextNode(this.text)}toMarkup(){return utils.escape(this.toText())}toText(){return this.text}}const wrapWithMstyle=e=>{let t;if(e.length===1&&e[0].type==="mrow"){t=e.pop();t.type="mstyle"}else{t=new MathNode("mstyle",e)}return t};var mathMLTree={MathNode:MathNode,TextNode:TextNode,newDocumentFragment:newDocumentFragment};const stretchyCodePoint={widehat:"^",widecheck:"ˇ",widetilde:"~",wideparen:"⏜",utilde:"~",overleftarrow:"←",underleftarrow:"←",xleftarrow:"←",overrightarrow:"→",underrightarrow:"→",xrightarrow:"→",underbrace:"⏟",overbrace:"⏞",overgroup:"⏠",overparen:"⏜",undergroup:"⏡",underparen:"⏝",overleftrightarrow:"↔",underleftrightarrow:"↔",xleftrightarrow:"↔",Overrightarrow:"⇒",xRightarrow:"⇒",overleftharpoon:"↼",xleftharpoonup:"↼",overrightharpoon:"⇀",xrightharpoonup:"⇀",xLeftarrow:"⇐",xLeftrightarrow:"⇔",xhookleftarrow:"↩",xhookrightarrow:"↪",xmapsto:"↦",xrightharpoondown:"⇁",xleftharpoondown:"↽",xtwoheadleftarrow:"↞",xtwoheadrightarrow:"↠",xlongequal:"=",xrightleftarrows:"⇄",yields:"→",yieldsLeft:"←",mesomerism:"↔",longrightharpoonup:"⇀",longleftharpoondown:"↽",eqrightharpoonup:"⇀",eqleftharpoondown:"↽","\\cdrightarrow":"→","\\cdleftarrow":"←","\\cdlongequal":"="};const mathMLnode=function(e){const t=new mathMLTree.TextNode(stretchyCodePoint[e.slice(1)]);const r=new mathMLTree.MathNode("mo",[t]);r.setAttribute("stretchy","true");return r};var stretchy={mathMLnode:mathMLnode};const ATOMS={bin:1,close:1,inner:1,open:1,punct:1,rel:1};const NON_ATOMS={"accent-token":1,mathord:1,"op-token":1,spacing:1,textord:1};const symbols={math:{},text:{}};function defineSymbol(e,t,r,n,a){symbols[e][n]={group:t,replace:r};if(a&&r){symbols[e][r]=symbols[e][n]}}const math="math";const text="text";const accent="accent-token";const bin="bin";const close="close";const inner="inner";const mathord="mathord";const op="op-token";const open="open";const punct="punct";const rel="rel";const spacing="spacing";const textord="textord";defineSymbol(math,rel,"≡","\\equiv",true);defineSymbol(math,rel,"≺","\\prec",true);defineSymbol(math,rel,"≻","\\succ",true);defineSymbol(math,rel,"∼","\\sim",true);defineSymbol(math,rel,"⟂","\\perp",true);defineSymbol(math,rel,"⪯","\\preceq",true);defineSymbol(math,rel,"⪰","\\succeq",true);defineSymbol(math,rel,"≃","\\simeq",true);defineSymbol(math,rel,"≌","\\backcong",true);defineSymbol(math,rel,"|","\\mid",true);defineSymbol(math,rel,"≪","\\ll",true);defineSymbol(math,rel,"≫","\\gg",true);defineSymbol(math,rel,"≍","\\asymp",true);defineSymbol(math,rel,"∥","\\parallel");defineSymbol(math,rel,"⌣","\\smile",true);defineSymbol(math,rel,"⊑","\\sqsubseteq",true);defineSymbol(math,rel,"⊒","\\sqsupseteq",true);defineSymbol(math,rel,"≐","\\doteq",true);defineSymbol(math,rel,"⌢","\\frown",true);defineSymbol(math,rel,"∋","\\ni",true);defineSymbol(math,rel,"∌","\\notni",true);defineSymbol(math,rel,"∝","\\propto",true);defineSymbol(math,rel,"⊢","\\vdash",true);defineSymbol(math,rel,"⊣","\\dashv",true);defineSymbol(math,rel,"∋","\\owns");defineSymbol(math,rel,"≘","\\arceq",true);defineSymbol(math,rel,"≙","\\wedgeq",true);defineSymbol(math,rel,"≚","\\veeeq",true);defineSymbol(math,rel,"≛","\\stareq",true);defineSymbol(math,rel,"≝","\\eqdef",true);defineSymbol(math,rel,"≞","\\measeq",true);defineSymbol(math,rel,"≟","\\questeq",true);defineSymbol(math,rel,"≠","\\ne",true);defineSymbol(math,rel,"≠","\\neq");defineSymbol(math,rel,"⩵","\\eqeq",true);defineSymbol(math,rel,"⩶","\\eqeqeq",true);defineSymbol(math,rel,"∷","\\dblcolon",true);defineSymbol(math,rel,"≔","\\coloneqq",true);defineSymbol(math,rel,"≕","\\eqqcolon",true);defineSymbol(math,rel,"∹","\\eqcolon",true);defineSymbol(math,rel,"⩴","\\Coloneqq",true);defineSymbol(math,punct,".","\\ldotp");defineSymbol(math,punct,"·","\\cdotp");defineSymbol(math,textord,"#","\\#");defineSymbol(text,textord,"#","\\#");defineSymbol(math,textord,"&","\\&");defineSymbol(text,textord,"&","\\&");defineSymbol(math,textord,"ℵ","\\aleph",true);defineSymbol(math,textord,"∀","\\forall",true);defineSymbol(math,textord,"ℏ","\\hbar",true);defineSymbol(math,textord,"∃","\\exists",true);defineSymbol(math,textord,"∇","\\nabla",true);defineSymbol(math,textord,"♭","\\flat",true);defineSymbol(math,textord,"ℓ","\\ell",true);defineSymbol(math,textord,"♮","\\natural",true);defineSymbol(math,textord,"Å","\\AA",true);defineSymbol(text,textord,"Å","\\AA",true);defineSymbol(math,textord,"♣","\\clubsuit",true);defineSymbol(math,textord,"♧","\\varclubsuit",true);defineSymbol(math,textord,"℘","\\wp",true);defineSymbol(math,textord,"♯","\\sharp",true);defineSymbol(math,textord,"♢","\\diamondsuit",true);defineSymbol(math,textord,"♦","\\vardiamondsuit",true);defineSymbol(math,textord,"ℜ","\\Re",true);defineSymbol(math,textord,"♡","\\heartsuit",true);defineSymbol(math,textord,"♥","\\varheartsuit",true);defineSymbol(math,textord,"ℑ","\\Im",true);defineSymbol(math,textord,"♠","\\spadesuit",true);defineSymbol(math,textord,"♤","\\varspadesuit",true);defineSymbol(math,textord,"♀","\\female",true);defineSymbol(math,textord,"♂","\\male",true);defineSymbol(math,textord,"§","\\S",true);defineSymbol(text,textord,"§","\\S");defineSymbol(math,textord,"¶","\\P",true);defineSymbol(text,textord,"¶","\\P");defineSymbol(text,textord,"☺","\\smiley",true);defineSymbol(math,textord,"☺","\\smiley",true);defineSymbol(math,textord,"†","\\dag");defineSymbol(text,textord,"†","\\dag");defineSymbol(text,textord,"†","\\textdagger");defineSymbol(math,textord,"‡","\\ddag");defineSymbol(text,textord,"‡","\\ddag");defineSymbol(text,textord,"‡","\\textdaggerdbl");defineSymbol(math,close,"⎱","\\rmoustache",true);defineSymbol(math,open,"⎰","\\lmoustache",true);defineSymbol(math,close,"⟯","\\rgroup",true);defineSymbol(math,open,"⟮","\\lgroup",true);defineSymbol(math,bin,"∓","\\mp",true);defineSymbol(math,bin,"⊖","\\ominus",true);defineSymbol(math,bin,"⊎","\\uplus",true);defineSymbol(math,bin,"⊓","\\sqcap",true);defineSymbol(math,bin,"∗","\\ast");defineSymbol(math,bin,"⊔","\\sqcup",true);defineSymbol(math,bin,"◯","\\bigcirc",true);defineSymbol(math,bin,"∙","\\bullet",true);defineSymbol(math,bin,"‡","\\ddagger");defineSymbol(math,bin,"≀","\\wr",true);defineSymbol(math,bin,"⨿","\\amalg");defineSymbol(math,bin,"&","\\And");defineSymbol(math,rel,"⟵","\\longleftarrow",true);defineSymbol(math,rel,"⇐","\\Leftarrow",true);defineSymbol(math,rel,"⟸","\\Longleftarrow",true);defineSymbol(math,rel,"⟶","\\longrightarrow",true);defineSymbol(math,rel,"⇒","\\Rightarrow",true);defineSymbol(math,rel,"⟹","\\Longrightarrow",true);defineSymbol(math,rel,"↔","\\leftrightarrow",true);defineSymbol(math,rel,"⟷","\\longleftrightarrow",true);defineSymbol(math,rel,"⇔","\\Leftrightarrow",true);defineSymbol(math,rel,"⟺","\\Longleftrightarrow",true);defineSymbol(math,rel,"↤","\\mapsfrom",true);defineSymbol(math,rel,"↦","\\mapsto",true);defineSymbol(math,rel,"⟼","\\longmapsto",true);defineSymbol(math,rel,"↗","\\nearrow",true);defineSymbol(math,rel,"↩","\\hookleftarrow",true);defineSymbol(math,rel,"↪","\\hookrightarrow",true);defineSymbol(math,rel,"↘","\\searrow",true);defineSymbol(math,rel,"↼","\\leftharpoonup",true);defineSymbol(math,rel,"⇀","\\rightharpoonup",true);defineSymbol(math,rel,"↙","\\swarrow",true);defineSymbol(math,rel,"↽","\\leftharpoondown",true);defineSymbol(math,rel,"⇁","\\rightharpoondown",true);defineSymbol(math,rel,"↖","\\nwarrow",true);defineSymbol(math,rel,"⇌","\\rightleftharpoons",true);defineSymbol(math,mathord,"↯","\\lightning",true);defineSymbol(math,mathord,"‰","\\permil",true);defineSymbol(text,textord,"‰","\\permil");defineSymbol(math,rel,"≮","\\nless",true);defineSymbol(math,rel,"⪇","\\lneq",true);defineSymbol(math,rel,"≨","\\lneqq",true);defineSymbol(math,rel,"≨︀","\\lvertneqq");defineSymbol(math,rel,"⋦","\\lnsim",true);defineSymbol(math,rel,"⪉","\\lnapprox",true);defineSymbol(math,rel,"⊀","\\nprec",true);defineSymbol(math,rel,"⋠","\\npreceq",true);defineSymbol(math,rel,"⋨","\\precnsim",true);defineSymbol(math,rel,"⪹","\\precnapprox",true);defineSymbol(math,rel,"≁","\\nsim",true);defineSymbol(math,rel,"∤","\\nmid",true);defineSymbol(math,rel,"∤","\\nshortmid");defineSymbol(math,rel,"⊬","\\nvdash",true);defineSymbol(math,rel,"⊭","\\nvDash",true);defineSymbol(math,rel,"⋪","\\ntriangleleft");defineSymbol(math,rel,"⋬","\\ntrianglelefteq",true);defineSymbol(math,rel,"⊄","\\nsubset",true);defineSymbol(math,rel,"⊅","\\nsupset",true);defineSymbol(math,rel,"⊊","\\subsetneq",true);defineSymbol(math,rel,"⊊︀","\\varsubsetneq");defineSymbol(math,rel,"⫋","\\subsetneqq",true);defineSymbol(math,rel,"⫋︀","\\varsubsetneqq");defineSymbol(math,rel,"≯","\\ngtr",true);defineSymbol(math,rel,"⪈","\\gneq",true);defineSymbol(math,rel,"≩","\\gneqq",true);defineSymbol(math,rel,"≩︀","\\gvertneqq");defineSymbol(math,rel,"⋧","\\gnsim",true);defineSymbol(math,rel,"⪊","\\gnapprox",true);defineSymbol(math,rel,"⊁","\\nsucc",true);defineSymbol(math,rel,"⋡","\\nsucceq",true);defineSymbol(math,rel,"⋩","\\succnsim",true);defineSymbol(math,rel,"⪺","\\succnapprox",true);defineSymbol(math,rel,"≆","\\ncong",true);defineSymbol(math,rel,"∦","\\nparallel",true);defineSymbol(math,rel,"∦","\\nshortparallel");defineSymbol(math,rel,"⊯","\\nVDash",true);defineSymbol(math,rel,"⋫","\\ntriangleright");defineSymbol(math,rel,"⋭","\\ntrianglerighteq",true);defineSymbol(math,rel,"⊋","\\supsetneq",true);defineSymbol(math,rel,"⊋","\\varsupsetneq");defineSymbol(math,rel,"⫌","\\supsetneqq",true);defineSymbol(math,rel,"⫌︀","\\varsupsetneqq");defineSymbol(math,rel,"⊮","\\nVdash",true);defineSymbol(math,rel,"⪵","\\precneqq",true);defineSymbol(math,rel,"⪶","\\succneqq",true);defineSymbol(math,bin,"⊴","\\unlhd");defineSymbol(math,bin,"⊵","\\unrhd");defineSymbol(math,rel,"↚","\\nleftarrow",true);defineSymbol(math,rel,"↛","\\nrightarrow",true);defineSymbol(math,rel,"⇍","\\nLeftarrow",true);defineSymbol(math,rel,"⇏","\\nRightarrow",true);defineSymbol(math,rel,"↮","\\nleftrightarrow",true);defineSymbol(math,rel,"⇎","\\nLeftrightarrow",true);defineSymbol(math,rel,"△","\\vartriangle");defineSymbol(math,textord,"ℏ","\\hslash");defineSymbol(math,textord,"▽","\\triangledown");defineSymbol(math,textord,"◊","\\lozenge");defineSymbol(math,textord,"Ⓢ","\\circledS");defineSymbol(math,textord,"®","\\circledR",true);defineSymbol(text,textord,"®","\\circledR");defineSymbol(text,textord,"®","\\textregistered");defineSymbol(math,textord,"∡","\\measuredangle",true);defineSymbol(math,textord,"∄","\\nexists");defineSymbol(math,textord,"℧","\\mho");defineSymbol(math,textord,"Ⅎ","\\Finv",true);defineSymbol(math,textord,"⅁","\\Game",true);defineSymbol(math,textord,"‵","\\backprime");defineSymbol(math,textord,"▲","\\blacktriangle");defineSymbol(math,textord,"▼","\\blacktriangledown");defineSymbol(math,textord,"■","\\blacksquare");defineSymbol(math,textord,"⧫","\\blacklozenge");defineSymbol(math,textord,"★","\\bigstar");defineSymbol(math,textord,"∢","\\sphericalangle",true);defineSymbol(math,textord,"∁","\\complement",true);defineSymbol(math,textord,"ð","\\eth",true);defineSymbol(text,textord,"ð","ð");defineSymbol(math,textord,"╱","\\diagup");defineSymbol(math,textord,"╲","\\diagdown");defineSymbol(math,textord,"□","\\square");defineSymbol(math,textord,"□","\\Box");defineSymbol(math,textord,"◊","\\Diamond");defineSymbol(math,textord,"¥","\\yen",true);defineSymbol(text,textord,"¥","\\yen",true);defineSymbol(math,textord,"✓","\\checkmark",true);defineSymbol(text,textord,"✓","\\checkmark");defineSymbol(math,textord,"✗","\\ballotx",true);defineSymbol(text,textord,"✗","\\ballotx");defineSymbol(text,textord,"•","\\textbullet");defineSymbol(math,textord,"ℶ","\\beth",true);defineSymbol(math,textord,"ℸ","\\daleth",true);defineSymbol(math,textord,"ℷ","\\gimel",true);defineSymbol(math,textord,"ϝ","\\digamma",true);defineSymbol(math,textord,"ϰ","\\varkappa");defineSymbol(math,open,"⌜","\\ulcorner",true);defineSymbol(math,close,"⌝","\\urcorner",true);defineSymbol(math,open,"⌞","\\llcorner",true);defineSymbol(math,close,"⌟","\\lrcorner",true);defineSymbol(math,rel,"≦","\\leqq",true);defineSymbol(math,rel,"⩽","\\leqslant",true);defineSymbol(math,rel,"⪕","\\eqslantless",true);defineSymbol(math,rel,"≲","\\lesssim",true);defineSymbol(math,rel,"⪅","\\lessapprox",true);defineSymbol(math,rel,"≊","\\approxeq",true);defineSymbol(math,bin,"⋖","\\lessdot");defineSymbol(math,rel,"⋘","\\lll",true);defineSymbol(math,rel,"≶","\\lessgtr",true);defineSymbol(math,rel,"⋚","\\lesseqgtr",true);defineSymbol(math,rel,"⪋","\\lesseqqgtr",true);defineSymbol(math,rel,"≑","\\doteqdot");defineSymbol(math,rel,"≓","\\risingdotseq",true);defineSymbol(math,rel,"≒","\\fallingdotseq",true);defineSymbol(math,rel,"∽","\\backsim",true);defineSymbol(math,rel,"⋍","\\backsimeq",true);defineSymbol(math,rel,"⫅","\\subseteqq",true);defineSymbol(math,rel,"⋐","\\Subset",true);defineSymbol(math,rel,"⊏","\\sqsubset",true);defineSymbol(math,rel,"≼","\\preccurlyeq",true);defineSymbol(math,rel,"⋞","\\curlyeqprec",true);defineSymbol(math,rel,"≾","\\precsim",true);defineSymbol(math,rel,"⪷","\\precapprox",true);defineSymbol(math,rel,"⊲","\\vartriangleleft");defineSymbol(math,rel,"⊴","\\trianglelefteq");defineSymbol(math,rel,"⊨","\\vDash",true);defineSymbol(math,rel,"⊪","\\Vvdash",true);defineSymbol(math,rel,"⌣","\\smallsmile");defineSymbol(math,rel,"⌢","\\smallfrown");defineSymbol(math,rel,"≏","\\bumpeq",true);defineSymbol(math,rel,"≎","\\Bumpeq",true);defineSymbol(math,rel,"≧","\\geqq",true);defineSymbol(math,rel,"⩾","\\geqslant",true);defineSymbol(math,rel,"⪖","\\eqslantgtr",true);defineSymbol(math,rel,"≳","\\gtrsim",true);defineSymbol(math,rel,"⪆","\\gtrapprox",true);defineSymbol(math,bin,"⋗","\\gtrdot");defineSymbol(math,rel,"⋙","\\ggg",true);defineSymbol(math,rel,"≷","\\gtrless",true);defineSymbol(math,rel,"⋛","\\gtreqless",true);defineSymbol(math,rel,"⪌","\\gtreqqless",true);defineSymbol(math,rel,"≖","\\eqcirc",true);defineSymbol(math,rel,"≗","\\circeq",true);defineSymbol(math,rel,"≜","\\triangleq",true);defineSymbol(math,rel,"∼","\\thicksim");defineSymbol(math,rel,"≈","\\thickapprox");defineSymbol(math,rel,"⫆","\\supseteqq",true);defineSymbol(math,rel,"⋑","\\Supset",true);defineSymbol(math,rel,"⊐","\\sqsupset",true);defineSymbol(math,rel,"≽","\\succcurlyeq",true);defineSymbol(math,rel,"⋟","\\curlyeqsucc",true);defineSymbol(math,rel,"≿","\\succsim",true);defineSymbol(math,rel,"⪸","\\succapprox",true);defineSymbol(math,rel,"⊳","\\vartriangleright");defineSymbol(math,rel,"⊵","\\trianglerighteq");defineSymbol(math,rel,"⊩","\\Vdash",true);defineSymbol(math,rel,"∣","\\shortmid");defineSymbol(math,rel,"∥","\\shortparallel");defineSymbol(math,rel,"≬","\\between",true);defineSymbol(math,rel,"⋔","\\pitchfork",true);defineSymbol(math,rel,"∝","\\varpropto");defineSymbol(math,rel,"◀","\\blacktriangleleft");defineSymbol(math,rel,"∴","\\therefore",true);defineSymbol(math,rel,"∍","\\backepsilon");defineSymbol(math,rel,"▶","\\blacktriangleright");defineSymbol(math,rel,"∵","\\because",true);defineSymbol(math,rel,"⋘","\\llless");defineSymbol(math,rel,"⋙","\\gggtr");defineSymbol(math,bin,"⊲","\\lhd");defineSymbol(math,bin,"⊳","\\rhd");defineSymbol(math,rel,"≂","\\eqsim",true);defineSymbol(math,rel,"≑","\\Doteq",true);defineSymbol(math,rel,"⥽","\\strictif",true);defineSymbol(math,rel,"⥼","\\strictfi",true);defineSymbol(math,bin,"∔","\\dotplus",true);defineSymbol(math,bin,"∖","\\smallsetminus");defineSymbol(math,bin,"⋒","\\Cap",true);defineSymbol(math,bin,"⋓","\\Cup",true);defineSymbol(math,bin,"⩞","\\doublebarwedge",true);defineSymbol(math,bin,"⊟","\\boxminus",true);defineSymbol(math,bin,"⊞","\\boxplus",true);defineSymbol(math,bin,"⋇","\\divideontimes",true);defineSymbol(math,bin,"⋉","\\ltimes",true);defineSymbol(math,bin,"⋊","\\rtimes",true);defineSymbol(math,bin,"⋋","\\leftthreetimes",true);defineSymbol(math,bin,"⋌","\\rightthreetimes",true);defineSymbol(math,bin,"⋏","\\curlywedge",true);defineSymbol(math,bin,"⋎","\\curlyvee",true);defineSymbol(math,bin,"⊝","\\circleddash",true);defineSymbol(math,bin,"⊛","\\circledast",true);defineSymbol(math,bin,"⊺","\\intercal",true);defineSymbol(math,bin,"⋒","\\doublecap");defineSymbol(math,bin,"⋓","\\doublecup");defineSymbol(math,bin,"⊠","\\boxtimes",true);defineSymbol(math,bin,"⋈","\\bowtie",true);defineSymbol(math,bin,"⋈","\\Join");defineSymbol(math,bin,"⟕","\\leftouterjoin",true);defineSymbol(math,bin,"⟖","\\rightouterjoin",true);defineSymbol(math,bin,"⟗","\\fullouterjoin",true);defineSymbol(math,rel,"⇢","\\dashrightarrow",true);defineSymbol(math,rel,"⇠","\\dashleftarrow",true);defineSymbol(math,rel,"⇇","\\leftleftarrows",true);defineSymbol(math,rel,"⇆","\\leftrightarrows",true);defineSymbol(math,rel,"⇚","\\Lleftarrow",true);defineSymbol(math,rel,"↞","\\twoheadleftarrow",true);defineSymbol(math,rel,"↢","\\leftarrowtail",true);defineSymbol(math,rel,"↫","\\looparrowleft",true);defineSymbol(math,rel,"⇋","\\leftrightharpoons",true);defineSymbol(math,rel,"↶","\\curvearrowleft",true);defineSymbol(math,rel,"↺","\\circlearrowleft",true);defineSymbol(math,rel,"↰","\\Lsh",true);defineSymbol(math,rel,"⇈","\\upuparrows",true);defineSymbol(math,rel,"↿","\\upharpoonleft",true);defineSymbol(math,rel,"⇃","\\downharpoonleft",true);defineSymbol(math,rel,"⊶","\\origof",true);defineSymbol(math,rel,"⊷","\\imageof",true);defineSymbol(math,rel,"⊸","\\multimap",true);defineSymbol(math,rel,"↭","\\leftrightsquigarrow",true);defineSymbol(math,rel,"⇉","\\rightrightarrows",true);defineSymbol(math,rel,"⇄","\\rightleftarrows",true);defineSymbol(math,rel,"↠","\\twoheadrightarrow",true);defineSymbol(math,rel,"↣","\\rightarrowtail",true);defineSymbol(math,rel,"↬","\\looparrowright",true);defineSymbol(math,rel,"↷","\\curvearrowright",true);defineSymbol(math,rel,"↻","\\circlearrowright",true);defineSymbol(math,rel,"↱","\\Rsh",true);defineSymbol(math,rel,"⇊","\\downdownarrows",true);defineSymbol(math,rel,"↾","\\upharpoonright",true);defineSymbol(math,rel,"⇂","\\downharpoonright",true);defineSymbol(math,rel,"⇝","\\rightsquigarrow",true);defineSymbol(math,rel,"⇝","\\leadsto");defineSymbol(math,rel,"⇛","\\Rrightarrow",true);defineSymbol(math,rel,"↾","\\restriction");defineSymbol(math,textord,"‘","`");defineSymbol(math,textord,"$","\\$");defineSymbol(text,textord,"$","\\$");defineSymbol(text,textord,"$","\\textdollar");defineSymbol(math,textord,"¢","\\cent");defineSymbol(text,textord,"¢","\\cent");defineSymbol(math,textord,"%","\\%");defineSymbol(text,textord,"%","\\%");defineSymbol(math,textord,"_","\\_");defineSymbol(text,textord,"_","\\_");defineSymbol(text,textord,"_","\\textunderscore");defineSymbol(text,textord,"␣","\\textvisiblespace",true);defineSymbol(math,textord,"∠","\\angle",true);defineSymbol(math,textord,"∞","\\infty",true);defineSymbol(math,textord,"′","\\prime");defineSymbol(math,textord,"△","\\triangle");defineSymbol(text,textord,"Α","\\Alpha",true);defineSymbol(text,textord,"Β","\\Beta",true);defineSymbol(text,textord,"Γ","\\Gamma",true);defineSymbol(text,textord,"Δ","\\Delta",true);defineSymbol(text,textord,"Ε","\\Epsilon",true);defineSymbol(text,textord,"Ζ","\\Zeta",true);defineSymbol(text,textord,"Η","\\Eta",true);defineSymbol(text,textord,"Θ","\\Theta",true);defineSymbol(text,textord,"Ι","\\Iota",true);defineSymbol(text,textord,"Κ","\\Kappa",true);defineSymbol(text,textord,"Λ","\\Lambda",true);defineSymbol(text,textord,"Μ","\\Mu",true);defineSymbol(text,textord,"Ν","\\Nu",true);defineSymbol(text,textord,"Ξ","\\Xi",true);defineSymbol(text,textord,"Ο","\\Omicron",true);defineSymbol(text,textord,"Π","\\Pi",true);defineSymbol(text,textord,"Ρ","\\Rho",true);defineSymbol(text,textord,"Σ","\\Sigma",true);defineSymbol(text,textord,"Τ","\\Tau",true);defineSymbol(text,textord,"Υ","\\Upsilon",true);defineSymbol(text,textord,"Φ","\\Phi",true);defineSymbol(text,textord,"Χ","\\Chi",true);defineSymbol(text,textord,"Ψ","\\Psi",true);defineSymbol(text,textord,"Ω","\\Omega",true);defineSymbol(math,mathord,"Α","\\Alpha",true);defineSymbol(math,mathord,"Β","\\Beta",true);defineSymbol(math,mathord,"Γ","\\Gamma",true);defineSymbol(math,mathord,"Δ","\\Delta",true);defineSymbol(math,mathord,"Ε","\\Epsilon",true);defineSymbol(math,mathord,"Ζ","\\Zeta",true);defineSymbol(math,mathord,"Η","\\Eta",true);defineSymbol(math,mathord,"Θ","\\Theta",true);defineSymbol(math,mathord,"Ι","\\Iota",true);defineSymbol(math,mathord,"Κ","\\Kappa",true);defineSymbol(math,mathord,"Λ","\\Lambda",true);defineSymbol(math,mathord,"Μ","\\Mu",true);defineSymbol(math,mathord,"Ν","\\Nu",true);defineSymbol(math,mathord,"Ξ","\\Xi",true);defineSymbol(math,mathord,"Ο","\\Omicron",true);defineSymbol(math,mathord,"Π","\\Pi",true);defineSymbol(math,mathord,"Ρ","\\Rho",true);defineSymbol(math,mathord,"Σ","\\Sigma",true);defineSymbol(math,mathord,"Τ","\\Tau",true);defineSymbol(math,mathord,"Υ","\\Upsilon",true);defineSymbol(math,mathord,"Φ","\\Phi",true);defineSymbol(math,mathord,"Χ","\\Chi",true);defineSymbol(math,mathord,"Ψ","\\Psi",true);defineSymbol(math,mathord,"Ω","\\Omega",true);defineSymbol(math,open,"¬","\\neg",true);defineSymbol(math,open,"¬","\\lnot");defineSymbol(math,textord,"⊤","\\top");defineSymbol(math,textord,"⊥","\\bot");defineSymbol(math,textord,"∅","\\emptyset");defineSymbol(math,textord,"ø","\\varnothing");defineSymbol(math,mathord,"α","\\alpha",true);defineSymbol(math,mathord,"β","\\beta",true);defineSymbol(math,mathord,"γ","\\gamma",true);defineSymbol(math,mathord,"δ","\\delta",true);defineSymbol(math,mathord,"ϵ","\\epsilon",true);defineSymbol(math,mathord,"ζ","\\zeta",true);defineSymbol(math,mathord,"η","\\eta",true);defineSymbol(math,mathord,"θ","\\theta",true);defineSymbol(math,mathord,"ι","\\iota",true);defineSymbol(math,mathord,"κ","\\kappa",true);defineSymbol(math,mathord,"λ","\\lambda",true);defineSymbol(math,mathord,"μ","\\mu",true);defineSymbol(math,mathord,"ν","\\nu",true);defineSymbol(math,mathord,"ξ","\\xi",true);defineSymbol(math,mathord,"ο","\\omicron",true);defineSymbol(math,mathord,"π","\\pi",true);defineSymbol(math,mathord,"ρ","\\rho",true);defineSymbol(math,mathord,"σ","\\sigma",true);defineSymbol(math,mathord,"τ","\\tau",true);defineSymbol(math,mathord,"υ","\\upsilon",true);defineSymbol(math,mathord,"ϕ","\\phi",true);defineSymbol(math,mathord,"χ","\\chi",true);defineSymbol(math,mathord,"ψ","\\psi",true);defineSymbol(math,mathord,"ω","\\omega",true);defineSymbol(math,mathord,"ε","\\varepsilon",true);defineSymbol(math,mathord,"ϑ","\\vartheta",true);defineSymbol(math,mathord,"ϖ","\\varpi",true);defineSymbol(math,mathord,"ϱ","\\varrho",true);defineSymbol(math,mathord,"ς","\\varsigma",true);defineSymbol(math,mathord,"φ","\\varphi",true);defineSymbol(math,mathord,"Ϙ","\\Coppa",true);defineSymbol(math,mathord,"ϙ","\\coppa",true);defineSymbol(math,mathord,"ϙ","\\varcoppa",true);defineSymbol(math,mathord,"Ϟ","\\Koppa",true);defineSymbol(math,mathord,"ϟ","\\koppa",true);defineSymbol(math,mathord,"Ϡ","\\Sampi",true);defineSymbol(math,mathord,"ϡ","\\sampi",true);defineSymbol(math,mathord,"Ϛ","\\Stigma",true);defineSymbol(math,mathord,"ϛ","\\stigma",true);defineSymbol(math,mathord,"⫫","\\Bot");defineSymbol(math,bin,"∗","∗",true);defineSymbol(math,bin,"+","+");defineSymbol(math,bin,"*","*");defineSymbol(math,bin,"⁄","⁄");defineSymbol(math,bin,"−","-",true);defineSymbol(math,bin,"⋅","\\cdot",true);defineSymbol(math,bin,"∘","\\circ",true);defineSymbol(math,bin,"÷","\\div",true);defineSymbol(math,bin,"±","\\pm",true);defineSymbol(math,bin,"×","\\times",true);defineSymbol(math,bin,"∩","\\cap",true);defineSymbol(math,bin,"∪","\\cup",true);defineSymbol(math,bin,"∖","\\setminus",true);defineSymbol(math,bin,"∧","\\land");defineSymbol(math,bin,"∨","\\lor");defineSymbol(math,bin,"∧","\\wedge",true);defineSymbol(math,bin,"∨","\\vee",true);defineSymbol(math,open,"⟦","\\llbracket",true);defineSymbol(math,close,"⟧","\\rrbracket",true);defineSymbol(math,open,"⟨","\\langle",true);defineSymbol(math,open,"|","\\lvert");defineSymbol(math,open,"‖","\\lVert");defineSymbol(math,textord,"!","\\oc");defineSymbol(math,textord,"?","\\wn");defineSymbol(math,textord,"↓","\\shpos");defineSymbol(math,textord,"↕","\\shift");defineSymbol(math,textord,"↑","\\shneg");defineSymbol(math,close,"?","?");defineSymbol(math,close,"!","!");defineSymbol(math,close,"‼","‼");defineSymbol(math,close,"⟩","\\rangle",true);defineSymbol(math,close,"|","\\rvert");defineSymbol(math,close,"‖","\\rVert");defineSymbol(math,open,"⦃","\\lBrace",true);defineSymbol(math,close,"⦄","\\rBrace",true);defineSymbol(math,rel,"=","\\equal",true);defineSymbol(math,rel,":",":");defineSymbol(math,rel,"≈","\\approx",true);defineSymbol(math,rel,"≅","\\cong",true);defineSymbol(math,rel,"≥","\\ge");defineSymbol(math,rel,"≥","\\geq",true);defineSymbol(math,rel,"←","\\gets");defineSymbol(math,rel,">","\\gt",true);defineSymbol(math,rel,"∈","\\in",true);defineSymbol(math,rel,"∉","\\notin",true);defineSymbol(math,rel,"","\\@not");defineSymbol(math,rel,"⊂","\\subset",true);defineSymbol(math,rel,"⊃","\\supset",true);defineSymbol(math,rel,"⊆","\\subseteq",true);defineSymbol(math,rel,"⊇","\\supseteq",true);defineSymbol(math,rel,"⊈","\\nsubseteq",true);defineSymbol(math,rel,"⊈","\\nsubseteqq");defineSymbol(math,rel,"⊉","\\nsupseteq",true);defineSymbol(math,rel,"⊉","\\nsupseteqq");defineSymbol(math,rel,"⊨","\\models");defineSymbol(math,rel,"←","\\leftarrow",true);defineSymbol(math,rel,"≤","\\le");defineSymbol(math,rel,"≤","\\leq",true);defineSymbol(math,rel,"<","\\lt",true);defineSymbol(math,rel,"→","\\rightarrow",true);defineSymbol(math,rel,"→","\\to");defineSymbol(math,rel,"≱","\\ngeq",true);defineSymbol(math,rel,"≱","\\ngeqq");defineSymbol(math,rel,"≱","\\ngeqslant");defineSymbol(math,rel,"≰","\\nleq",true);defineSymbol(math,rel,"≰","\\nleqq");defineSymbol(math,rel,"≰","\\nleqslant");defineSymbol(math,rel,"⫫","\\Perp",true);defineSymbol(math,spacing," ","\\ ");defineSymbol(math,spacing," ","\\space");defineSymbol(math,spacing," ","\\nobreakspace");defineSymbol(text,spacing," ","\\ ");defineSymbol(text,spacing," "," ");defineSymbol(text,spacing," ","\\space");defineSymbol(text,spacing," ","\\nobreakspace");defineSymbol(math,spacing,null,"\\nobreak");defineSymbol(math,spacing,null,"\\allowbreak");defineSymbol(math,punct,",",",");defineSymbol(text,punct,":",":");defineSymbol(math,punct,";",";");defineSymbol(math,bin,"⊼","\\barwedge",true);defineSymbol(math,bin,"⊻","\\veebar",true);defineSymbol(math,bin,"⊙","\\odot",true);defineSymbol(math,bin,"⊕","\\oplus",true);defineSymbol(math,bin,"⊗","\\otimes",true);defineSymbol(math,textord,"∂","\\partial",true);defineSymbol(math,bin,"⊘","\\oslash",true);defineSymbol(math,bin,"⊚","\\circledcirc",true);defineSymbol(math,bin,"⊡","\\boxdot",true);defineSymbol(math,bin,"△","\\bigtriangleup");defineSymbol(math,bin,"▽","\\bigtriangledown");defineSymbol(math,bin,"†","\\dagger");defineSymbol(math,bin,"⋄","\\diamond");defineSymbol(math,bin,"⋆","\\star");defineSymbol(math,bin,"◃","\\triangleleft");defineSymbol(math,bin,"▹","\\triangleright");defineSymbol(math,open,"{","\\{");defineSymbol(text,textord,"{","\\{");defineSymbol(text,textord,"{","\\textbraceleft");defineSymbol(math,close,"}","\\}");defineSymbol(text,textord,"}","\\}");defineSymbol(text,textord,"}","\\textbraceright");defineSymbol(math,open,"{","\\lbrace");defineSymbol(math,close,"}","\\rbrace");defineSymbol(math,open,"[","\\lbrack",true);defineSymbol(text,textord,"[","\\lbrack",true);defineSymbol(math,close,"]","\\rbrack",true);defineSymbol(text,textord,"]","\\rbrack",true);defineSymbol(math,open,"(","\\lparen",true);defineSymbol(math,close,")","\\rparen",true);defineSymbol(text,textord,"<","\\textless",true);defineSymbol(text,textord,">","\\textgreater",true);defineSymbol(math,open,"⌊","\\lfloor",true);defineSymbol(math,close,"⌋","\\rfloor",true);defineSymbol(math,open,"⌈","\\lceil",true);defineSymbol(math,close,"⌉","\\rceil",true);defineSymbol(math,textord,"\\","\\backslash");defineSymbol(math,textord,"|","|");defineSymbol(math,textord,"|","\\vert");defineSymbol(text,textord,"|","\\textbar",true);defineSymbol(math,textord,"‖","\\|");defineSymbol(math,textord,"‖","\\Vert");defineSymbol(text,textord,"‖","\\textbardbl");defineSymbol(text,textord,"~","\\textasciitilde");defineSymbol(text,textord,"\\","\\textbackslash");defineSymbol(text,textord,"^","\\textasciicircum");defineSymbol(math,rel,"↑","\\uparrow",true);defineSymbol(math,rel,"⇑","\\Uparrow",true);defineSymbol(math,rel,"↓","\\downarrow",true);defineSymbol(math,rel,"⇓","\\Downarrow",true);defineSymbol(math,rel,"↕","\\updownarrow",true);defineSymbol(math,rel,"⇕","\\Updownarrow",true);defineSymbol(math,op,"∐","\\coprod");defineSymbol(math,op,"⋁","\\bigvee");defineSymbol(math,op,"⋀","\\bigwedge");defineSymbol(math,op,"⨄","\\biguplus");defineSymbol(math,op,"⋂","\\bigcap");defineSymbol(math,op,"⋃","\\bigcup");defineSymbol(math,op,"∫","\\int");defineSymbol(math,op,"∫","\\intop");defineSymbol(math,op,"∬","\\iint");defineSymbol(math,op,"∭","\\iiint");defineSymbol(math,op,"∏","\\prod");defineSymbol(math,op,"∑","\\sum");defineSymbol(math,op,"⨂","\\bigotimes");defineSymbol(math,op,"⨁","\\bigoplus");defineSymbol(math,op,"⨀","\\bigodot");defineSymbol(math,op,"∮","\\oint");defineSymbol(math,op,"∯","\\oiint");defineSymbol(math,op,"∰","\\oiiint");defineSymbol(math,op,"∱","\\intclockwise");defineSymbol(math,op,"∲","\\varointclockwise");defineSymbol(math,op,"⨌","\\iiiint");defineSymbol(math,op,"⨍","\\intbar");defineSymbol(math,op,"⨎","\\intBar");defineSymbol(math,op,"⨏","\\fint");defineSymbol(math,op,"⨒","\\rppolint");defineSymbol(math,op,"⨓","\\scpolint");defineSymbol(math,op,"⨕","\\pointint");defineSymbol(math,op,"⨖","\\sqint");defineSymbol(math,op,"⨗","\\intlarhk");defineSymbol(math,op,"⨘","\\intx");defineSymbol(math,op,"⨙","\\intcap");defineSymbol(math,op,"⨚","\\intcup");defineSymbol(math,op,"⨅","\\bigsqcap");defineSymbol(math,op,"⨆","\\bigsqcup");defineSymbol(math,op,"∫","\\smallint");defineSymbol(text,inner,"…","\\textellipsis");defineSymbol(math,inner,"…","\\mathellipsis");defineSymbol(text,inner,"…","\\ldots",true);defineSymbol(math,inner,"…","\\ldots",true);defineSymbol(math,inner,"⋰","\\iddots",true);defineSymbol(math,inner,"⋯","\\@cdots",true);defineSymbol(math,inner,"⋱","\\ddots",true);defineSymbol(math,textord,"⋮","\\varvdots");defineSymbol(math,accent,"ˊ","\\acute");defineSymbol(math,accent,"`","\\grave");defineSymbol(math,accent,"¨","\\ddot");defineSymbol(math,accent,"…","\\dddot");defineSymbol(math,accent,"….","\\ddddot");defineSymbol(math,accent,"~","\\tilde");defineSymbol(math,accent,"‾","\\bar");defineSymbol(math,accent,"˘","\\breve");defineSymbol(math,accent,"ˇ","\\check");defineSymbol(math,accent,"^","\\hat");defineSymbol(math,accent,"→","\\vec");defineSymbol(math,accent,"˙","\\dot");defineSymbol(math,accent,"˚","\\mathring");defineSymbol(math,mathord,"ı","\\imath",true);defineSymbol(math,mathord,"ȷ","\\jmath",true);defineSymbol(math,textord,"ı","ı");defineSymbol(math,textord,"ȷ","ȷ");defineSymbol(text,textord,"ı","\\i",true);defineSymbol(text,textord,"ȷ","\\j",true);defineSymbol(text,textord,"ß","\\ss",true);defineSymbol(text,textord,"æ","\\ae",true);defineSymbol(text,textord,"œ","\\oe",true);defineSymbol(text,textord,"ø","\\o",true);defineSymbol(math,mathord,"ø","\\o",true);defineSymbol(text,textord,"Æ","\\AE",true);defineSymbol(text,textord,"Œ","\\OE",true);defineSymbol(text,textord,"Ø","\\O",true);defineSymbol(math,mathord,"Ø","\\O",true);defineSymbol(text,accent,"ˊ","\\'");defineSymbol(text,accent,"ˋ","\\`");defineSymbol(text,accent,"ˆ","\\^");defineSymbol(text,accent,"˜","\\~");defineSymbol(text,accent,"ˉ","\\=");defineSymbol(text,accent,"˘","\\u");defineSymbol(text,accent,"˙","\\.");defineSymbol(text,accent,"¸","\\c");defineSymbol(text,accent,"˚","\\r");defineSymbol(text,accent,"ˇ","\\v");defineSymbol(text,accent,"¨",'\\"');defineSymbol(text,accent,"˝","\\H");defineSymbol(math,accent,"ˊ","\\'");defineSymbol(math,accent,"ˋ","\\`");defineSymbol(math,accent,"ˆ","\\^");defineSymbol(math,accent,"˜","\\~");defineSymbol(math,accent,"ˉ","\\=");defineSymbol(math,accent,"˘","\\u");defineSymbol(math,accent,"˙","\\.");defineSymbol(math,accent,"¸","\\c");defineSymbol(math,accent,"˚","\\r");defineSymbol(math,accent,"ˇ","\\v");defineSymbol(math,accent,"¨",'\\"');defineSymbol(math,accent,"˝","\\H");const ligatures={"--":true,"---":true,"``":true,"''":true};defineSymbol(text,textord,"–","--",true);defineSymbol(text,textord,"–","\\textendash");defineSymbol(text,textord,"—","---",true);defineSymbol(text,textord,"—","\\textemdash");defineSymbol(text,textord,"‘","`",true);defineSymbol(text,textord,"‘","\\textquoteleft");defineSymbol(text,textord,"’","'",true);defineSymbol(text,textord,"’","\\textquoteright");defineSymbol(text,textord,"“","``",true);defineSymbol(text,textord,"“","\\textquotedblleft");defineSymbol(text,textord,"”","''",true);defineSymbol(text,textord,"”","\\textquotedblright");defineSymbol(math,textord,"°","\\degree",true);defineSymbol(text,textord,"°","\\degree");defineSymbol(text,textord,"°","\\textdegree",true);defineSymbol(math,textord,"£","\\pounds");defineSymbol(math,textord,"£","\\mathsterling",true);defineSymbol(text,textord,"£","\\pounds");defineSymbol(text,textord,"£","\\textsterling",true);defineSymbol(math,textord,"✠","\\maltese");defineSymbol(text,textord,"✠","\\maltese");defineSymbol(math,textord,"€","\\euro",true);defineSymbol(text,textord,"€","\\euro",true);defineSymbol(text,textord,"€","\\texteuro");defineSymbol(math,textord,"©","\\copyright",true);defineSymbol(text,textord,"©","\\textcopyright");defineSymbol(math,textord,"𝛤","\\varGamma");defineSymbol(math,textord,"𝛥","\\varDelta");defineSymbol(math,textord,"𝛩","\\varTheta");defineSymbol(math,textord,"𝛬","\\varLambda");defineSymbol(math,textord,"𝛯","\\varXi");defineSymbol(math,textord,"𝛱","\\varPi");defineSymbol(math,textord,"𝛴","\\varSigma");defineSymbol(math,textord,"𝛶","\\varUpsilon");defineSymbol(math,textord,"𝛷","\\varPhi");defineSymbol(math,textord,"𝛹","\\varPsi");defineSymbol(math,textord,"𝛺","\\varOmega");defineSymbol(text,textord,"𝛤","\\varGamma");defineSymbol(text,textord,"𝛥","\\varDelta");defineSymbol(text,textord,"𝛩","\\varTheta");defineSymbol(text,textord,"𝛬","\\varLambda");defineSymbol(text,textord,"𝛯","\\varXi");defineSymbol(text,textord,"𝛱","\\varPi");defineSymbol(text,textord,"𝛴","\\varSigma");defineSymbol(text,textord,"𝛶","\\varUpsilon");defineSymbol(text,textord,"𝛷","\\varPhi");defineSymbol(text,textord,"𝛹","\\varPsi");defineSymbol(text,textord,"𝛺","\\varOmega");const mathTextSymbols='0123456789/@."';for(let e=0;e<mathTextSymbols.length;e++){const t=mathTextSymbols.charAt(e);defineSymbol(math,textord,t,t)}const textSymbols='0123456789!@*()-=+";:?/.,';for(let e=0;e<textSymbols.length;e++){const t=textSymbols.charAt(e);defineSymbol(text,textord,t,t)}const letters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";for(let e=0;e<letters.length;e++){const t=letters.charAt(e);defineSymbol(math,mathord,t,t);defineSymbol(text,textord,t,t)}const narrow="ÇÐÞçþℂℍℕℙℚℝℤℎℏℊℋℌℐℑℒℓ℘ℛℜℬℰℱℳℭℨ";for(let e=0;e<narrow.length;e++){const t=narrow.charAt(e);defineSymbol(math,mathord,t,t);defineSymbol(text,textord,t,t)}let wideChar="";for(let e=0;e<letters.length;e++){wideChar=String.fromCharCode(55349,56320+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56372+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56424+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56580+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56736+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56788+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56840+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56944+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,56632+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);const t=letters.charAt(e);wideChar=String.fromCharCode(55349,56476+e);defineSymbol(math,mathord,t,wideChar);defineSymbol(text,textord,t,wideChar)}for(let e=0;e<10;e++){wideChar=String.fromCharCode(55349,57294+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,57314+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,57324+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar);wideChar=String.fromCharCode(55349,57334+e);defineSymbol(math,mathord,wideChar,wideChar);defineSymbol(text,textord,wideChar,wideChar)}function setLineBreaks(e,t,r){const n=[];let a=[];let o=[];let i=0;let s=false;let l=0;while(l<e.length){while(e[l]instanceof DocumentFragment){e.splice(l,1,...e[l].children)}const r=e[l];if(r.attributes&&r.attributes.linebreak&&r.attributes.linebreak==="newline"){if(o.length>0){a.push(new mathMLTree.MathNode("mrow",o))}a.push(r);o=[];const e=new mathMLTree.MathNode("mtd",a);e.style.textAlign="left";n.push(new mathMLTree.MathNode("mtr",[e]));a=[];l+=1;continue}o.push(r);if(r.type&&r.type==="mo"&&r.children.length===1){if(t==="="&&r.children[0].text==="="){i+=1;if(i>1){o.pop();const e=new mathMLTree.MathNode("mrow",o);a.push(e);o=[r]}}else if(t==="tex"){if(s&&!r.attributes.form){const t=l<e.length-1?e[l+1]:null;let r=true;if(!(t&&t.type==="mtext"&&t.attributes.linebreak&&t.attributes.linebreak==="nobreak")){for(let t=l+1;t<e.length;t++){const n=e[t];if(n.type&&n.type==="mspace"&&!(n.attributes.linebreak&&n.attributes.linebreak==="newline")){o.push(n);l+=1;if(n.attributes&&n.attributes.linebreak&&n.attributes.linebreak==="nobreak"){r=false}}else{break}}}if(r){const e=new mathMLTree.MathNode("mrow",o);a.push(e);o=[]}s=false}const t=r.attributes.form&&r.attributes.form==="prefix";s=!(r.attributes.separator||t)}else{s=true}}else{s=true}l+=1}if(o.length>0){const e=new mathMLTree.MathNode("mrow",o);a.push(e)}if(n.length>0){const e=new mathMLTree.MathNode("mtd",a);e.style.textAlign="left";const t=new mathMLTree.MathNode("mtr",[e]);n.push(t);const o=new mathMLTree.MathNode("mtable",n);if(!r){o.setAttribute("columnalign","left");o.setAttribute("rowspacing","0em")}return o}return mathMLTree.newDocumentFragment(a)}const makeText=function(e,t,r){if(symbols[t][e]&&symbols[t][e].replace&&e.charCodeAt(0)!==55349&&!(Object.prototype.hasOwnProperty.call(ligatures,e)&&r&&(r.fontFamily&&r.fontFamily.slice(4,6)==="tt"||r.font&&r.font.slice(4,6)==="tt"))){e=symbols[t][e].replace}return new mathMLTree.TextNode(e)};const consolidateText=e=>{if(e.type!=="mrow"){return e}if(e.children.length===0){return e}if(!e.children[0].attributes||e.children[0].type!=="mtext"){return e}const t=e.children[0].attributes.mathvariant||"";const r=new mathMLTree.MathNode("mtext",[new mathMLTree.TextNode(e.children[0].children[0].text)]);for(let n=1;n<e.children.length;n++){const a=e.children[n].attributes.mathvariant||"";if(e.children[n].type==="mrow"){const a=e.children[n];for(let n=0;n<a.children.length;n++){const o=a.children[n].attributes.mathvariant||"";if(o!==t||a.children[n].type!=="mtext"){return e}else{r.children[0].text+=a.children[n].children[0].text}}}else if(a!==t||e.children[n].type!=="mtext"){return e}else{r.children[0].text+=e.children[n].children[0].text}}if(r.children[0].text.charAt(0)===" "){r.children[0].text=" "+r.children[0].text.slice(1)}const n=r.children[0].text.length;if(n>0&&r.children[0].text.charAt(n-1)===" "){r.children[0].text=r.children[0].text.slice(0,-1)+" "}return r};const numberRegEx$1$1=/^[0-9]$/;const isCommaOrDot=e=>e.type==="atom"&&e.text===","||e.type==="textord"&&e.text===".";const consolidateNumbers=e=>{if(e.length<2){return}const t=[];let r=false;for(let n=0;n<e.length;n++){const a=e[n];if(a.type==="textord"&&numberRegEx$1$1.test(a.text)){if(!r){t.push({start:n})}r=true}else{if(r){t[t.length-1].end=n-1}r=false}}if(r){t[t.length-1].end=e.length-1}for(let r=t.length-1;r>0;r--){if(t[r-1].end===t[r].start-2&&isCommaOrDot(e[t[r].start-1])){t[r-1].end=t[r].end;t.splice(r,1)}}for(let r=t.length-1;r>=0;r--){for(let n=t[r].start+1;n<=t[r].end;n++){e[t[r].start].text+=e[n].text}e.splice(t[r].start+1,t[r].end-t[r].start)}};const makeRow=function(e){if(e.length===1&&!(e[0]instanceof DocumentFragment)){return e[0]}else{return new mathMLTree.MathNode("mrow",e)}};const isRel=e=>e.type==="atom"&&e.family==="rel"||e.type==="mclass"&&e.mclass==="mrel";const buildExpression=function(e,t,r){if(e.length===1){const n=buildGroup$1(e[0],t);if(r&&n instanceof MathNode&&n.type==="mo"){n.setAttribute("lspace","0em");n.setAttribute("rspace","0em")}return[n]}consolidateNumbers(e);const n=[];for(let r=0;r<e.length;r++){const a=buildGroup$1(e[r],t);if(r<e.length-1&&isRel(e[r])&&isRel(e[r+1])){a.setAttribute("rspace","0em")}if(r>0&&isRel(e[r])&&isRel(e[r-1])){a.setAttribute("lspace","0em")}n.push(a)}return n};const buildExpressionRow=function(e,t,r){return makeRow(buildExpression(e,t,r))};const buildGroup$1=function(e,t){if(!e){return new mathMLTree.MathNode("mrow")}if(_mathmlGroupBuilders[e.type]){const r=_mathmlGroupBuilders[e.type](e,t);return r}else{throw new ParseError("Got group of unknown type: '"+e.type+"'")}};const glue$1=e=>new mathMLTree.MathNode("mtd",[],[],{padding:"0",width:"50%"});const taggedExpression=(e,t,r,n)=>{t=buildExpressionRow(t[0].body,r);t=consolidateText(t);t.classes.push("tml-tag");e=new mathMLTree.MathNode("mtd",[e]);const a=[glue$1(),e,glue$1()];if(n){a[0].children.push(t);a[0].style.textAlign="-webkit-left"}else{a[2].children.push(t);a[2].style.textAlign="-webkit-right"}const o=new mathMLTree.MathNode("mtr",a,["tml-tageqn"]);const i=new mathMLTree.MathNode("mtable",[o]);i.style.width="100%";i.setAttribute("displaystyle","true");return i};function buildMathML(e,t,r,n){let a=null;if(e.length===1&&e[0].type==="tag"){a=e[0].tag;e=e[0].body}const o=buildExpression(e,r);const i=n.displayMode||n.annotate?"none":n.wrap;const s=o.length===0?null:o[0];let l=o.length===1&&a===null&&s instanceof MathNode?o[0]:setLineBreaks(o,i,n.displayMode);if(a){l=taggedExpression(l,a,r,n.leqno)}if(n.annotate){const e=new mathMLTree.MathNode("annotation",[new mathMLTree.TextNode(t)]);e.setAttribute("encoding","application/x-tex");l=new mathMLTree.MathNode("semantics",[l,e])}const u=new mathMLTree.MathNode("math",[l]);if(n.xml){u.setAttribute("xmlns","http://www.w3.org/1998/Math/MathML")}if(n.displayMode){u.setAttribute("display","block");u.style.display=u.children.length===1&&u.children[0].type==="mtable"?"inline":"block math"}return u}const mathmlBuilder$a=(e,t)=>{const r=e.isStretchy?stretchy.mathMLnode(e.label):new mathMLTree.MathNode("mo",[makeText(e.label,e.mode)]);if(e.label==="\\vec"){r.style.transform="scale(0.75) translate(10%, 30%)"}else{r.style.mathStyle="normal";r.style.mathDepth="0"}if(!e.isStretchy){r.setAttribute("stretchy","false")}const n=new mathMLTree.MathNode(e.label==="\\c"?"munder":"mover",[buildGroup$1(e.base,t),r]);return n};const NON_STRETCHY_ACCENT_REGEX=new RegExp(["\\acute","\\grave","\\ddot","\\dddot","\\ddddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map((e=>`\\${e}`)).join("|"));defineFunction({type:"accent",names:["\\acute","\\grave","\\ddot","\\dddot","\\ddddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\overparen","\\widecheck","\\widehat","\\wideparen","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:(e,t)=>{const r=normalizeArgument(t[0]);const n=!NON_STRETCHY_ACCENT_REGEX.test(e.funcName);return{type:"accent",mode:e.parser.mode,label:e.funcName,isStretchy:n,base:r}},mathmlBuilder:mathmlBuilder$a});defineFunction({type:"accent",names:["\\'","\\`","\\^","\\~","\\=","\\c","\\u","\\.",'\\"',"\\r","\\H","\\v"],props:{numArgs:1,allowedInText:true,allowedInMath:true,argTypes:["primitive"]},handler:(e,t)=>{const r=normalizeArgument(t[0]);const n=e.parser.mode;if(n==="math"&&e.parser.settings.strict){console.log(`Temml parse error: Command ${e.funcName} is invalid in math mode.`)}return{type:"accent",mode:n,label:e.funcName,isStretchy:false,isShifty:true,base:r}},mathmlBuilder:mathmlBuilder$a});defineFunction({type:"accentUnder",names:["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underparen","\\utilde"],props:{numArgs:1},handler:({parser:e,funcName:t},r)=>{const n=r[0];return{type:"accentUnder",mode:e.mode,label:t,base:n}},mathmlBuilder:(e,t)=>{const r=stretchy.mathMLnode(e.label);r.style["math-depth"]=0;const n=new mathMLTree.MathNode("munder",[buildGroup$1(e.base,t),r]);return n}});const ptPerUnit={pt:800/803,pc:12*800/803,dd:1238/1157*800/803,cc:14856/1157*800/803,nd:685/642*800/803,nc:1370/107*800/803,sp:1/65536*800/803,mm:25.4/72,cm:2.54/72,in:1/72,px:96/72};const validUnits=["em","ex","mu","pt","mm","cm","in","px","bp","pc","dd","cc","nd","nc","sp"];const validUnit=function(e){if(typeof e!=="string"){e=e.unit}return validUnits.indexOf(e)>-1};const emScale=e=>{const t=Math.max(e-1,0);return[1,.7,.5][t]};const calculateSize=function(e,t){let r=e.number;if(t.maxSize[0]<0&&r>0){return{number:0,unit:"em"}}const n=e.unit;switch(n){case"mm":case"cm":case"in":case"px":{const e=r*ptPerUnit[n];if(e>t.maxSize[1]){return{number:t.maxSize[1],unit:"pt"}}return{number:r,unit:n}}case"em":case"ex":{if(n==="ex"){r*=.431}r=Math.min(r/emScale(t.level),t.maxSize[0]);return{number:utils.round(r),unit:"em"}}case"bp":{if(r>t.maxSize[1]){r=t.maxSize[1]}return{number:r,unit:"pt"}}case"pt":case"pc":case"dd":case"cc":case"nd":case"nc":case"sp":{r=Math.min(r*ptPerUnit[n],t.maxSize[1]);return{number:utils.round(r),unit:"pt"}}case"mu":{r=Math.min(r/18,t.maxSize[0]);return{number:utils.round(r),unit:"em"}}default:throw new ParseError("Invalid unit: '"+n+"'")}};const padding$2=e=>{const t=new mathMLTree.MathNode("mspace");t.setAttribute("width",e+"em");return t};const paddedNode=(e,t=.3,r=0)=>{if(e==null&&r===0){return padding$2(t)}const n=e?[e]:[];if(t!==0){n.unshift(padding$2(t))}if(r>0){n.push(padding$2(r))}return new mathMLTree.MathNode("mrow",n)};const labelSize=(e,t)=>(e/emScale(t)).toFixed(4);const munderoverNode=(e,t,r,n)=>{const a=stretchy.mathMLnode(e);const o=e.slice(1,3)==="eq";const i=e.charAt(1)==="x"?"1.75":e.slice(2,4)==="cd"?"3.0":o?"1.0":"2.0";a.setAttribute("minsize",String(i)+"em");a.setAttribute("lspace","0");a.setAttribute("rspace",o?"0.5em":"0");const s=n.withLevel(n.level<2?2:3);const l=labelSize(i,s.level);const u=labelSize(o?0:.3,s.level);const c=labelSize(o?0:.3,s.level);const d=t&&t.body&&(t.body.body||t.body.length>0)?paddedNode(buildGroup$1(t,s),u,c):paddedNode(null,l,0);const m=r&&r.body&&(r.body.body||r.body.length>0)?paddedNode(buildGroup$1(r,s),u,c):paddedNode(null,l,0);const p=new mathMLTree.MathNode("munderover",[a,m,d]);if(i==="3.0"){p.style.height="1em"}return p};defineFunction({type:"xArrow",names:["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\yields","\\yieldsLeft","\\mesomerism","\\longrightharpoonup","\\longleftharpoondown","\\\\cdrightarrow","\\\\cdleftarrow","\\\\cdlongequal"],props:{numArgs:1,numOptionalArgs:1},handler({parser:e,funcName:t},r,n){return{type:"xArrow",mode:e.mode,name:t,body:r[0],below:n[0]}},mathmlBuilder(e,t){const r=munderoverNode(e.name,e.body,e.below,t);const n=[r];n.unshift(padding$2(.2778));n.push(padding$2(.2778));return new mathMLTree.MathNode("mrow",n)}});const arrowComponent={"\\xtofrom":["\\xrightarrow","\\xleftarrow"],"\\xleftrightharpoons":["\\xleftharpoonup","\\xrightharpoondown"],"\\xrightleftharpoons":["\\xrightharpoonup","\\xleftharpoondown"],"\\yieldsLeftRight":["\\yields","\\yieldsLeft"],"\\equilibrium":["\\longrightharpoonup","\\longleftharpoondown"],"\\equilibriumRight":["\\longrightharpoonup","\\eqleftharpoondown"],"\\equilibriumLeft":["\\eqrightharpoonup","\\longleftharpoondown"]};defineFunction({type:"stackedArrow",names:["\\xtofrom","\\xleftrightharpoons","\\xrightleftharpoons","\\yieldsLeftRight","\\equilibrium","\\equilibriumRight","\\equilibriumLeft"],props:{numArgs:1,numOptionalArgs:1},handler({parser:e,funcName:t},r,n){const a=r[0]?{type:"hphantom",mode:e.mode,body:r[0]}:null;const o=n[0]?{type:"hphantom",mode:e.mode,body:n[0]}:null;return{type:"stackedArrow",mode:e.mode,name:t,body:r[0],upperArrowBelow:o,lowerArrowBody:a,below:n[0]}},mathmlBuilder(e,t){const r=arrowComponent[e.name][0];const n=arrowComponent[e.name][1];const a=munderoverNode(r,e.body,e.upperArrowBelow,t);const o=munderoverNode(n,e.lowerArrowBody,e.below,t);let i;const s=new mathMLTree.MathNode("mpadded",[a]);s.setAttribute("voffset","0.3em");s.setAttribute("height","+0.3em");s.setAttribute("depth","-0.3em");if(e.name==="\\equilibriumLeft"){const e=new mathMLTree.MathNode("mpadded",[o]);e.setAttribute("width","0.5em");i=new mathMLTree.MathNode("mpadded",[padding$2(.2778),e,s,padding$2(.2778)])}else{s.setAttribute("width",e.name==="\\equilibriumRight"?"0.5em":"0");i=new mathMLTree.MathNode("mpadded",[padding$2(.2778),s,o,padding$2(.2778)])}i.setAttribute("voffset","-0.18em");i.setAttribute("height","-0.18em");i.setAttribute("depth","+0.18em");return i}});function assertNodeType(e,t){if(!e||e.type!==t){throw new Error(`Expected node of type ${t}, but got `+(e?`node of type ${e.type}`:String(e)))}return e}function assertSymbolNodeType(e){const t=checkSymbolNodeType(e);if(!t){throw new Error(`Expected node of symbol group type, but got `+(e?`node of type ${e.type}`:String(e)))}return t}function checkSymbolNodeType(e){if(e&&(e.type==="atom"||Object.prototype.hasOwnProperty.call(NON_ATOMS,e.type))){return e}return null}const cdArrowFunctionName={">":"\\\\cdrightarrow","<":"\\\\cdleftarrow","=":"\\\\cdlongequal",A:"\\uparrow",V:"\\downarrow","|":"\\Vert",".":"no arrow"};const newCell=()=>({type:"styling",body:[],mode:"math",scriptLevel:"display"});const isStartOfArrow=e=>e.type==="textord"&&e.text==="@";const isLabelEnd=(e,t)=>(e.type==="mathord"||e.type==="atom")&&e.text===t;function cdArrow(e,t,r){const n=cdArrowFunctionName[e];switch(n){case"\\\\cdrightarrow":case"\\\\cdleftarrow":return r.callFunction(n,[t[0]],[t[1]]);case"\\uparrow":case"\\downarrow":{const e=r.callFunction("\\\\cdleft",[t[0]],[]);const a={type:"atom",text:n,mode:"math",family:"rel"};const o=r.callFunction("\\Big",[a],[]);const i=r.callFunction("\\\\cdright",[t[1]],[]);const s={type:"ordgroup",mode:"math",body:[e,o,i]};return r.callFunction("\\\\cdparent",[s],[])}case"\\\\cdlongequal":return r.callFunction("\\\\cdlongequal",[],[]);case"\\Vert":{const e={type:"textord",text:"\\Vert",mode:"math"};return r.callFunction("\\Big",[e],[])}default:return{type:"textord",text:" ",mode:"math"}}}function parseCD(e){const t=[];e.gullet.beginGroup();e.gullet.macros.set("\\cr","\\\\\\relax");e.gullet.beginGroup();while(true){t.push(e.parseExpression(false,"\\\\"));e.gullet.endGroup();e.gullet.beginGroup();const r=e.fetch().text;if(r==="&"||r==="\\\\"){e.consume()}else if(r==="\\end"){if(t[t.length-1].length===0){t.pop()}break}else{throw new ParseError("Expected \\\\ or \\cr or \\end",e.nextToken)}}let r=[];const n=[r];for(let a=0;a<t.length;a++){const o=t[a];let i=newCell();for(let t=0;t<o.length;t++){if(!isStartOfArrow(o[t])){i.body.push(o[t])}else{r.push(i);t+=1;const n=assertSymbolNodeType(o[t]).text;const a=new Array(2);a[0]={type:"ordgroup",mode:"math",body:[]};a[1]={type:"ordgroup",mode:"math",body:[]};if("=|.".indexOf(n)>-1);else if("<>AV".indexOf(n)>-1){for(let e=0;e<2;e++){let r=true;for(let i=t+1;i<o.length;i++){if(isLabelEnd(o[i],n)){r=false;t=i;break}if(isStartOfArrow(o[i])){throw new ParseError("Missing a "+n+" character to complete a CD arrow.",o[i])}a[e].body.push(o[i])}if(r){throw new ParseError("Missing a "+n+" character to complete a CD arrow.",o[t])}}}else{throw new ParseError(`Expected one of "<>AV=|." after @.`)}const s=cdArrow(n,a,e);r.push(s);i=newCell()}}if(a%2===0){r.push(i)}else{r.shift()}r=[];n.push(r)}n.pop();e.gullet.endGroup();e.gullet.endGroup();return{type:"array",mode:"math",body:n,envClasses:["jot","cd"],cols:[],hLinesBeforeRow:new Array(n.length+1).fill([])}}defineFunction({type:"cdlabel",names:["\\\\cdleft","\\\\cdright"],props:{numArgs:1},handler({parser:e,funcName:t},r){return{type:"cdlabel",mode:e.mode,side:t.slice(4),label:r[0]}},mathmlBuilder(e,t){let r=new mathMLTree.MathNode("mrow",[buildGroup$1(e.label,t)]);r=new mathMLTree.MathNode("mpadded",[r]);r.setAttribute("width","0");if(e.side==="left"){r.setAttribute("lspace","-1width")}r.setAttribute("voffset","0.7em");r=new mathMLTree.MathNode("mstyle",[r]);r.setAttribute("displaystyle","false");r.setAttribute("scriptlevel","1");return r}});defineFunction({type:"cdlabelparent",names:["\\\\cdparent"],props:{numArgs:1},handler({parser:e},t){return{type:"cdlabelparent",mode:e.mode,fragment:t[0]}},mathmlBuilder(e,t){return new mathMLTree.MathNode("mrow",[buildGroup$1(e.fragment,t)])}});defineFunction({type:"textord",names:["\\@char"],props:{numArgs:1,allowedInText:true},handler({parser:e,token:t},r){const n=assertNodeType(r[0],"ordgroup");const a=n.body;let o="";for(let e=0;e<a.length;e++){const t=assertNodeType(a[e],"textord");o+=t.text}const i=parseInt(o);if(isNaN(i)){throw new ParseError(`\\@char has non-numeric argument ${o}`,t)}return{type:"textord",mode:e.mode,text:String.fromCodePoint(i)}}});const htmlRegEx=/^(#[a-f0-9]{3}|#?[a-f0-9]{6})$/i;const htmlOrNameRegEx=/^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i;const RGBregEx=/^ *\d{1,3} *(?:, *\d{1,3} *){2}$/;const rgbRegEx=/^ *[10](?:\.\d*)? *(?:, *[10](?:\.\d*)? *){2}$/;const xcolorHtmlRegEx=/^[a-f0-9]{6}$/i;const toHex=e=>{let t=e.toString(16);if(t.length===1){t="0"+t}return t};const xcolors=JSON.parse(`{\n  "Apricot": "#ffb484",\n  "Aquamarine": "#08b4bc",\n  "Bittersweet": "#c84c14",\n  "blue": "#0000FF",\n  "Blue": "#303494",\n  "BlueGreen": "#08b4bc",\n  "BlueViolet": "#503c94",\n  "BrickRed": "#b8341c",\n  "brown": "#BF8040",\n  "Brown": "#802404",\n  "BurntOrange": "#f8941c",\n  "CadetBlue": "#78749c",\n  "CarnationPink": "#f884b4",\n  "Cerulean": "#08a4e4",\n  "CornflowerBlue": "#40ace4",\n  "cyan": "#00FFFF",\n  "Cyan": "#08acec",\n  "Dandelion": "#ffbc44",\n  "darkgray": "#404040",\n  "DarkOrchid": "#a8548c",\n  "Emerald": "#08ac9c",\n  "ForestGreen": "#089c54",\n  "Fuchsia": "#90348c",\n  "Goldenrod": "#ffdc44",\n  "gray": "#808080",\n  "Gray": "#98949c",\n  "green": "#00FF00",\n  "Green": "#08a44c",\n  "GreenYellow": "#e0e474",\n  "JungleGreen": "#08ac9c",\n  "Lavender": "#f89cc4",\n  "lightgray": "#c0c0c0",\n  "lime": "#BFFF00",\n  "LimeGreen": "#90c43c",\n  "magenta": "#FF00FF",\n  "Magenta": "#f0048c",\n  "Mahogany": "#b0341c",\n  "Maroon": "#b03434",\n  "Melon": "#f89c7c",\n  "MidnightBlue": "#086494",\n  "Mulberry": "#b03c94",\n  "NavyBlue": "#086cbc",\n  "olive": "#7F7F00",\n  "OliveGreen": "#407c34",\n  "orange": "#FF8000",\n  "Orange": "#f8843c",\n  "OrangeRed": "#f0145c",\n  "Orchid": "#b074ac",\n  "Peach": "#f8945c",\n  "Periwinkle": "#8074bc",\n  "PineGreen": "#088c74",\n  "pink": "#ff7f7f",\n  "Plum": "#98248c",\n  "ProcessBlue": "#08b4ec",\n  "purple": "#BF0040",\n  "Purple": "#a0449c",\n  "RawSienna": "#983c04",\n  "red": "#ff0000",\n  "Red": "#f01c24",\n  "RedOrange": "#f86434",\n  "RedViolet": "#a0246c",\n  "Rhodamine": "#f0549c",\n  "Royallue": "#0874bc",\n  "RoyalPurple": "#683c9c",\n  "RubineRed": "#f0047c",\n  "Salmon": "#f8948c",\n  "SeaGreen": "#30bc9c",\n  "Sepia": "#701404",\n  "SkyBlue": "#48c4dc",\n  "SpringGreen": "#c8dc64",\n  "Tan": "#e09c74",\n  "teal": "#007F7F",\n  "TealBlue": "#08acb4",\n  "Thistle": "#d884b4",\n  "Turquoise": "#08b4cc",\n  "violet": "#800080",\n  "Violet": "#60449c",\n  "VioletRed": "#f054a4",\n  "WildStrawberry": "#f0246c",\n  "yellow": "#FFFF00",\n  "Yellow": "#fff404",\n  "YellowGreen": "#98cc6c",\n  "YellowOrange": "#ffa41c"\n}`);const colorFromSpec=(e,t)=>{let r="";if(e==="HTML"){if(!htmlRegEx.test(t)){throw new ParseError("Invalid HTML input.")}r=t}else if(e==="RGB"){if(!RGBregEx.test(t)){throw new ParseError("Invalid RGB input.")}t.split(",").map((e=>{r+=toHex(Number(e.trim()))}))}else{if(!rgbRegEx.test(t)){throw new ParseError("Invalid rbg input.")}t.split(",").map((e=>{const t=Number(e.trim());if(t>1){throw new ParseError("Color rgb input must be < 1.")}r+=toHex(Number((t*255).toFixed(0)))}))}if(r.charAt(0)!=="#"){r="#"+r}return r};const validateColor=(e,t,r)=>{const n=`\\\\color@${e}`;const a=htmlOrNameRegEx.exec(e);if(!a){throw new ParseError("Invalid color: '"+e+"'",r)}if(xcolorHtmlRegEx.test(e)){return"#"+e}else if(e.charAt(0)==="#"){return e}else if(t.has(n)){e=t.get(n).tokens[0].text}else if(xcolors[e]){e=xcolors[e]}return e};const mathmlBuilder$9=(e,t)=>{let r=buildExpression(e.body,t.withColor(e.color));r=r.map((t=>{t.style.color=e.color;return t}));return mathMLTree.newDocumentFragment(r)};defineFunction({type:"color",names:["\\textcolor"],props:{numArgs:2,numOptionalArgs:1,allowedInText:true,argTypes:["raw","raw","original"]},handler({parser:e,token:t},r,n){const a=n[0]&&assertNodeType(n[0],"raw").string;let o="";if(a){const e=assertNodeType(r[0],"raw").string;o=colorFromSpec(a,e)}else{o=validateColor(assertNodeType(r[0],"raw").string,e.gullet.macros,t)}const i=r[1];return{type:"color",mode:e.mode,color:o,body:ordargument(i)}},mathmlBuilder:mathmlBuilder$9});defineFunction({type:"color",names:["\\color"],props:{numArgs:1,numOptionalArgs:1,allowedInText:true,argTypes:["raw","raw"]},handler({parser:e,token:t},r,n){const a=n[0]&&assertNodeType(n[0],"raw").string;let o="";if(a){const e=assertNodeType(r[0],"raw").string;o=colorFromSpec(a,e)}else{o=validateColor(assertNodeType(r[0],"raw").string,e.gullet.macros,t)}e.gullet.macros.set("\\current@color",o);const i=e.parseExpression(true,"\\color");return{type:"color",mode:e.mode,color:o,body:i}},mathmlBuilder:mathmlBuilder$9});defineFunction({type:"color",names:["\\definecolor"],props:{numArgs:3,allowedInText:true,argTypes:["raw","raw","raw"]},handler({parser:e,funcName:t,token:r},n){const a=assertNodeType(n[0],"raw").string;if(!/^[A-Za-z]+$/.test(a)){throw new ParseError("Color name must be latin letters.",r)}const o=assertNodeType(n[1],"raw").string;if(!["HTML","RGB","rgb"].includes(o)){throw new ParseError("Color model must be HTML, RGB, or rgb.",r)}const i=assertNodeType(n[2],"raw").string;const s=colorFromSpec(o,i);e.gullet.macros.set(`\\\\color@${a}`,{tokens:[{text:s}],numArgs:0});return{type:"internal",mode:e.mode}}});defineFunction({type:"cr",names:["\\\\"],props:{numArgs:0,numOptionalArgs:0,allowedInText:true},handler({parser:e},t,r){const n=e.gullet.future().text==="["?e.parseSizeGroup(true):null;const a=!e.settings.displayMode;return{type:"cr",mode:e.mode,newLine:a,size:n&&assertNodeType(n,"size").value}},mathmlBuilder(e,t){const r=new mathMLTree.MathNode("mo");if(e.newLine){r.setAttribute("linebreak","newline");if(e.size){const n=calculateSize(e.size,t);r.setAttribute("height",n.number+n.unit)}}return r}});const globalMap={"\\global":"\\global","\\long":"\\\\globallong","\\\\globallong":"\\\\globallong","\\def":"\\gdef","\\gdef":"\\gdef","\\edef":"\\xdef","\\xdef":"\\xdef","\\let":"\\\\globallet","\\futurelet":"\\\\globalfuture"};const checkControlSequence=e=>{const t=e.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(t)){throw new ParseError("Expected a control sequence",e)}return t};const getRHS=e=>{let t=e.gullet.popToken();if(t.text==="="){t=e.gullet.popToken();if(t.text===" "){t=e.gullet.popToken()}}return t};const letCommand=(e,t,r,n)=>{let a=e.gullet.macros.get(r.text);if(a==null){r.noexpand=true;a={tokens:[r],numArgs:0,unexpandable:!e.gullet.isExpandable(r.text)}}e.gullet.macros.set(t,a,n)};defineFunction({type:"internal",names:["\\global","\\long","\\\\globallong"],props:{numArgs:0,allowedInText:true},handler({parser:e,funcName:t}){e.consumeSpaces();const r=e.fetch();if(globalMap[r.text]){if(t==="\\global"||t==="\\\\globallong"){r.text=globalMap[r.text]}return assertNodeType(e.parseFunction(),"internal")}throw new ParseError(`Invalid token after macro prefix`,r)}});defineFunction({type:"internal",names:["\\def","\\gdef","\\edef","\\xdef"],props:{numArgs:0,allowedInText:true,primitive:true},handler({parser:e,funcName:t}){let r=e.gullet.popToken();const n=r.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(n)){throw new ParseError("Expected a control sequence",r)}let a=0;let o;const i=[[]];while(e.gullet.future().text!=="{"){r=e.gullet.popToken();if(r.text==="#"){if(e.gullet.future().text==="{"){o=e.gullet.future();i[a].push("{");break}r=e.gullet.popToken();if(!/^[1-9]$/.test(r.text)){throw new ParseError(`Invalid argument number "${r.text}"`)}if(parseInt(r.text)!==a+1){throw new ParseError(`Argument number "${r.text}" out of order`)}a++;i.push([])}else if(r.text==="EOF"){throw new ParseError("Expected a macro definition")}else{i[a].push(r.text)}}let{tokens:s}=e.gullet.consumeArg();if(o){s.unshift(o)}if(t==="\\edef"||t==="\\xdef"){s=e.gullet.expandTokens(s);s.reverse()}e.gullet.macros.set(n,{tokens:s,numArgs:a,delimiters:i},t===globalMap[t]);return{type:"internal",mode:e.mode}}});defineFunction({type:"internal",names:["\\let","\\\\globallet"],props:{numArgs:0,allowedInText:true,primitive:true},handler({parser:e,funcName:t}){const r=checkControlSequence(e.gullet.popToken());e.gullet.consumeSpaces();const n=getRHS(e);letCommand(e,r,n,t==="\\\\globallet");return{type:"internal",mode:e.mode}}});defineFunction({type:"internal",names:["\\futurelet","\\\\globalfuture"],props:{numArgs:0,allowedInText:true,primitive:true},handler({parser:e,funcName:t}){const r=checkControlSequence(e.gullet.popToken());const n=e.gullet.popToken();const a=e.gullet.popToken();letCommand(e,r,a,t==="\\\\globalfuture");e.gullet.pushToken(a);e.gullet.pushToken(n);return{type:"internal",mode:e.mode}}});defineFunction({type:"internal",names:["\\newcommand","\\renewcommand","\\providecommand"],props:{numArgs:0,allowedInText:true,primitive:true},handler({parser:e,funcName:t}){let r="";const n=e.gullet.popToken();if(n.text==="{"){r=checkControlSequence(e.gullet.popToken());e.gullet.popToken()}else{r=checkControlSequence(n)}const a=e.gullet.isDefined(r);if(a&&t==="\\newcommand"){throw new ParseError(`\\newcommand{${r}} attempting to redefine ${r}; use \\renewcommand`)}if(!a&&t==="\\renewcommand"){throw new ParseError(`\\renewcommand{${r}} when command ${r} does not yet exist; use \\newcommand`)}let o=0;if(e.gullet.future().text==="["){let t=e.gullet.popToken();t=e.gullet.popToken();if(!/^[0-9]$/.test(t.text)){throw new ParseError(`Invalid number of arguments: "${t.text}"`)}o=parseInt(t.text);t=e.gullet.popToken();if(t.text!=="]"){throw new ParseError(`Invalid argument "${t.text}"`)}}const{tokens:i}=e.gullet.consumeArg();e.gullet.macros.set(r,{tokens:i,numArgs:o},!e.settings.strict);return{type:"internal",mode:e.mode}}});const delimiterSizes={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}};const delimiters=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","<",">","\\langle","⟨","\\rangle","⟩","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱","\\llbracket","\\rrbracket","⟦","⟦","\\lBrace","\\rBrace","⦃","⦄","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];const dels=["}","\\left","\\middle","\\right"];const isDelimiter=e=>e.length>0&&(delimiters.includes(e)||delimiterSizes[e]||dels.includes(e));const sizeToMaxHeight=[0,1.2,1.8,2.4,3];function checkDelimiter(e,t){if(e.type==="ordgroup"&&e.body.length===1&&e.body[0].text==="⁄"){e={type:"textord",text:"/",mode:"math"}}const r=checkSymbolNodeType(e);if(r&&delimiters.includes(r.text)){if(["<","\\lt"].includes(r.text)){r.text="⟨"}if([">","\\gt"].includes(r.text)){r.text="⟩"}if(r.text==="/"){r.text="∕"}if(r.text==="\\backslash"){r.text="∖"}return r}else if(r){throw new ParseError(`Invalid delimiter '${r.text}' after '${t.funcName}'`,e)}else{throw new ParseError(`Invalid delimiter type '${e.type}'`,e)}}defineFunction({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1,argTypes:["primitive"]},handler:(e,t)=>{const r=checkDelimiter(t[0],e);return{type:"delimsizing",mode:e.parser.mode,size:delimiterSizes[e.funcName].size,mclass:delimiterSizes[e.funcName].mclass,delim:r.text}},mathmlBuilder:e=>{const t=[];if(e.delim==="."){e.delim=""}t.push(makeText(e.delim,e.mode));const r=new mathMLTree.MathNode("mo",t);if(e.mclass==="mopen"||e.mclass==="mclose"){r.setAttribute("fence","true")}else{r.setAttribute("fence","false")}if(e.delim==="∖"||e.delim.indexOf("arrow")>-1){r.setAttribute("stretchy","true")}r.setAttribute("symmetric","true");r.setAttribute("minsize",sizeToMaxHeight[e.size]+"em");return r}});function assertParsed(e){if(!e.body){throw new Error("Bug: The leftright ParseNode wasn't fully parsed.")}}defineFunction({type:"leftright-right",names:["\\right"],props:{numArgs:1,argTypes:["primitive"]},handler:(e,t)=>{const r=e.parser.gullet.macros.get("\\current@color");if(r&&typeof r!=="string"){throw new ParseError("\\current@color set to non-string in \\right")}return{type:"leftright-right",mode:e.parser.mode,delim:checkDelimiter(t[0],e).text,color:r}}});defineFunction({type:"leftright",names:["\\left"],props:{numArgs:1,argTypes:["primitive"]},handler:(e,t)=>{const r=checkDelimiter(t[0],e);const n=e.parser;++n.leftrightDepth;const a=n.parseExpression(false);--n.leftrightDepth;n.expect("\\right",false);const o=assertNodeType(n.parseFunction(),"leftright-right");return{type:"leftright",mode:n.mode,body:a,left:r.text,right:o.delim,rightColor:o.color}},mathmlBuilder:(e,t)=>{assertParsed(e);const r=buildExpression(e.body,t);if(e.left==="."){e.left=""}const n=new mathMLTree.MathNode("mo",[makeText(e.left,e.mode)]);n.setAttribute("fence","true");n.setAttribute("form","prefix");if(e.left==="∖"||e.left.indexOf("arrow")>-1){n.setAttribute("stretchy","true")}r.unshift(n);if(e.right==="."){e.right=""}const a=new mathMLTree.MathNode("mo",[makeText(e.right,e.mode)]);a.setAttribute("fence","true");a.setAttribute("form","postfix");if(e.right==="∖"||e.right.indexOf("arrow")>-1){a.setAttribute("stretchy","true")}if(e.rightColor){a.style.color=e.rightColor}r.push(a);return makeRow(r)}});defineFunction({type:"middle",names:["\\middle"],props:{numArgs:1,argTypes:["primitive"]},handler:(e,t)=>{const r=checkDelimiter(t[0],e);if(!e.parser.leftrightDepth){throw new ParseError("\\middle without preceding \\left",r)}return{type:"middle",mode:e.parser.mode,delim:r.text}},mathmlBuilder:(e,t)=>{const r=makeText(e.delim,e.mode);const n=new mathMLTree.MathNode("mo",[r]);n.setAttribute("fence","true");if(e.delim.indexOf("arrow")>-1){n.setAttribute("stretchy","true")}n.setAttribute("form","prefix");n.setAttribute("lspace","0.05em");n.setAttribute("rspace","0.05em");return n}});const padding$1=e=>{const t=new mathMLTree.MathNode("mspace");t.setAttribute("width","3pt");return t};const mathmlBuilder$8=(e,t)=>{let r;if(e.label.indexOf("colorbox")>-1){r=new mathMLTree.MathNode("mpadded",[padding$1(),buildGroup$1(e.body,t),padding$1()])}else{r=new mathMLTree.MathNode("menclose",[buildGroup$1(e.body,t)])}switch(e.label){case"\\overline":r.setAttribute("notation","top");r.style.padding="0.1em 0 0 0";r.style.borderTop="0.065em solid";break;case"\\underline":r.setAttribute("notation","bottom");r.style.padding="0 0 0.1em 0";r.style.borderBottom="0.065em solid";break;case"\\cancel":r.setAttribute("notation","updiagonalstrike");r.classes.push("cancel");break;case"\\bcancel":r.setAttribute("notation","downdiagonalstrike");r.classes.push("bcancel");break;case"\\angl":r.setAttribute("notation","actuarial");r.style.padding="0.03889em 0.03889em 0 0.03889em";r.style.borderTop="0.049em solid";r.style.borderRight="0.049em solid";r.style.marginRight="0.03889em";break;case"\\sout":r.setAttribute("notation","horizontalstrike");r.style["text-decoration"]="line-through 0.08em solid";break;case"\\fbox":r.setAttribute("notation","box");r.style={padding:"3pt",border:"1px solid"};break;case"\\fcolorbox":case"\\colorbox":{const t={padding:"3pt 0 3pt 0"};if(e.label==="\\fcolorbox"){t.border="0.06em solid "+String(e.borderColor)}r.style=t;break}case"\\xcancel":r.setAttribute("notation","updiagonalstrike downdiagonalstrike");r.classes.push("xcancel");break}if(e.backgroundColor){r.setAttribute("mathbackground",e.backgroundColor)}return r};defineFunction({type:"enclose",names:["\\colorbox"],props:{numArgs:2,numOptionalArgs:1,allowedInText:true,argTypes:["raw","raw","text"]},handler({parser:e,funcName:t},r,n){const a=n[0]&&assertNodeType(n[0],"raw").string;let o="";if(a){const e=assertNodeType(r[0],"raw").string;o=colorFromSpec(a,e)}else{o=validateColor(assertNodeType(r[0],"raw").string,e.gullet.macros)}const i=r[1];return{type:"enclose",mode:e.mode,label:t,backgroundColor:o,body:i}},mathmlBuilder:mathmlBuilder$8});defineFunction({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,numOptionalArgs:1,allowedInText:true,argTypes:["raw","raw","raw","text"]},handler({parser:e,funcName:t},r,n){const a=n[0]&&assertNodeType(n[0],"raw").string;let o="";let i;if(a){const e=assertNodeType(r[0],"raw").string;const t=assertNodeType(r[0],"raw").string;o=colorFromSpec(a,e);i=colorFromSpec(a,t)}else{o=validateColor(assertNodeType(r[0],"raw").string,e.gullet.macros);i=validateColor(assertNodeType(r[1],"raw").string,e.gullet.macros)}const s=r[2];return{type:"enclose",mode:e.mode,label:t,backgroundColor:i,borderColor:o,body:s}},mathmlBuilder:mathmlBuilder$8});defineFunction({type:"enclose",names:["\\fbox"],props:{numArgs:1,argTypes:["hbox"],allowedInText:true},handler({parser:e},t){return{type:"enclose",mode:e.mode,label:"\\fbox",body:t[0]}}});defineFunction({type:"enclose",names:["\\angl","\\cancel","\\bcancel","\\xcancel","\\sout","\\overline"],props:{numArgs:1},handler({parser:e,funcName:t},r){const n=r[0];return{type:"enclose",mode:e.mode,label:t,body:n}},mathmlBuilder:mathmlBuilder$8});defineFunction({type:"enclose",names:["\\underline"],props:{numArgs:1,allowedInText:true},handler({parser:e,funcName:t},r){const n=r[0];return{type:"enclose",mode:e.mode,label:t,body:n}},mathmlBuilder:mathmlBuilder$8});const _environments={};function defineEnvironment({type:e,names:t,props:r,handler:n,mathmlBuilder:a}){const o={type:e,numArgs:r.numArgs||0,allowedInText:false,numOptionalArgs:0,handler:n};for(let e=0;e<t.length;++e){_environments[t[e]]=o}if(a){_mathmlGroupBuilders[e]=a}}const StyleLevel={DISPLAY:0,TEXT:1,SCRIPT:2,SCRIPTSCRIPT:3};function getHLines(e){const t=[];e.consumeSpaces();let r=e.fetch().text;if(r==="\\relax"){e.consume();e.consumeSpaces();r=e.fetch().text}while(r==="\\hline"||r==="\\hdashline"){e.consume();t.push(r==="\\hdashline");e.consumeSpaces();r=e.fetch().text}return t}const validateAmsEnvironmentContext=e=>{const t=e.parser.settings;if(!t.displayMode){throw new ParseError(`{${e.envName}} can be used only in display mode.`)}};const getTag=(e,t,r)=>{let n;const a=e.tags.shift();if(a){if(a.body){n=buildExpressionRow(a.body,t);n.classes=["tml-tag"]}else{n=new mathMLTree.MathNode("mtext",[],[]);return n}}else if(e.envClasses.includes("multline")&&(e.leqno&&r!==0||!e.leqno&&r!==e.body.length-1)){n=new mathMLTree.MathNode("mtext",[],[]);return n}else{n=new mathMLTree.MathNode("mtext",[],["tml-eqn"])}return n};function parseArray(e,{cols:t,envClasses:r,addEqnNum:n,singleRow:a,emptySingleRow:o,maxNumCols:i,leqno:s},l){e.gullet.beginGroup();if(!a){e.gullet.macros.set("\\cr","\\\\\\relax")}if(n){e.gullet.macros.set("\\tag","\\env@tag{\\text{#1}}");e.gullet.macros.set("\\notag","\\env@notag");e.gullet.macros.set("\\nonumber","\\env@notag")}e.gullet.beginGroup();let u=[];const c=[u];const d=[];const m=[];let p;const f=[];f.push(getHLines(e));while(true){let t=e.parseExpression(false,a?"\\end":"\\\\");if(n&&!p){for(let e=0;e<t.length;e++){if(t[e].type==="envTag"||t[e].type==="noTag"){p=t[e].type==="envTag"?t.splice(e,1)[0].body.body[0]:{body:null};break}}}e.gullet.endGroup();e.gullet.beginGroup();t={type:"ordgroup",mode:e.mode,body:t};u.push(t);const s=e.fetch().text;if(s==="&"){if(i&&u.length===i){if(r.includes("array")){if(e.settings.strict){throw new ParseError("Too few columns "+"specified in the {array} column argument.",e.nextToken)}}else if(i===2){throw new ParseError("The split environment accepts no more than two columns",e.nextToken)}else{throw new ParseError("The equation environment accepts only one column",e.nextToken)}}e.consume()}else if(s==="\\end"){if(u.length===1&&t.body.length===0&&(c.length>1||!o)){c.pop()}if(f.length<c.length+1){f.push([])}break}else if(s==="\\\\"){e.consume();let t;if(e.gullet.future().text!==" "){t=e.parseSizeGroup(true)}d.push(t?t.value:null);m.push(p);f.push(getHLines(e));u=[];p=null;c.push(u)}else{throw new ParseError("Expected & or \\\\ or \\cr or \\end",e.nextToken)}}e.gullet.endGroup();e.gullet.endGroup();m.push(p);return{type:"array",mode:e.mode,body:c,cols:t,rowGaps:d,hLinesBeforeRow:f,envClasses:r,addEqnNum:n,scriptLevel:l,tags:m,leqno:s}}function dCellStyle(e){return e.slice(0,1)==="d"?"display":"text"}const alignMap={c:"center ",l:"left ",r:"right "};const glue=e=>{const t=new mathMLTree.MathNode("mtd",[]);t.style={padding:"0",width:"50%"};if(e.envClasses.includes("multline")){t.style.width="7.5%"}return t};const mathmlBuilder$7=function(e,t){const r=[];const n=e.body.length;const a=e.hLinesBeforeRow;for(let o=0;o<n;o++){const i=e.body[o];const s=[];const l=e.scriptLevel==="text"?StyleLevel.TEXT:e.scriptLevel==="script"?StyleLevel.SCRIPT:StyleLevel.DISPLAY;for(let r=0;r<i.length;r++){const a=new mathMLTree.MathNode("mtd",[buildGroup$1(i[r],t.withLevel(l))]);if(e.envClasses.includes("multline")){const e=o===0?"left":o===n-1?"right":"center";a.setAttribute("columnalign",e);if(e!=="center"){a.style.textAlign="-webkit-"+e}}s.push(a)}if(e.addEqnNum){s.unshift(glue(e));s.push(glue(e));const r=getTag(e,t.withLevel(l),o);if(e.leqno){s[0].children.push(r);s[0].style.textAlign="-webkit-left"}else{s[s.length-1].children.push(r);s[s.length-1].style.textAlign="-webkit-right"}}const u=new mathMLTree.MathNode("mtr",s,[]);if(o===0&&a[0].length>0){if(a[0].length===2){u.classes.push("tml-top-double")}else{u.classes.push(a[0][0]?"tml-top-dashed":"tml-top-solid")}}if(a[o+1].length>0){if(a[o+1].length===2){u.classes.push("tml-hline-double")}else{u.classes.push(a[o+1][0]?"tml-hline-dashed":"tml-hline-solid")}}r.push(u)}let o=new mathMLTree.MathNode("mtable",r);if(e.envClasses.length>0){o.classes=e.envClasses.map((e=>"tml-"+e))}if(e.scriptLevel==="display"){o.setAttribute("displaystyle","true")}if(e.addEqnNum||e.envClasses.includes("multline")){o.style.width="100%"}let i="";if(e.cols&&e.cols.length>0){const t=e.cols;let r=false;let n=0;let a=t.length;while(t[n].type==="separator"){n+=1}while(t[a-1].type==="separator"){a-=1}if(t[0].type==="separator"){const e=t[1].type==="separator"?"0.15em double":t[0].separator==="|"?"0.06em solid ":"0.06em dashed ";for(const t of o.children){t.children[0].style.borderLeft=e}}let s=e.addEqnNum?0:-1;for(let e=n;e<a;e++){if(t[e].type==="align"){const n=alignMap[t[e].align];i+=n;s+=1;for(const e of o.children){if(n.trim()!=="center"&&s<e.children.length){e.children[s].style.textAlign="-webkit-"+n.trim()}}r=true}else if(t[e].type==="separator"){if(r){const r=t[e+1].type==="separator"?"0.15em double":t[e].separator==="|"?"0.06em solid":"0.06em dashed";for(const e of o.children){if(s<e.children.length){e.children[s].style.borderRight=r}}}r=false}}if(t[t.length-1].type==="separator"){const e=t[t.length-2].type==="separator"?"0.15em double":t[t.length-1].separator==="|"?"0.06em solid":"0.06em dashed";for(const t of o.children){t.children[t.children.length-1].style.borderRight=e;t.children[t.children.length-1].style.paddingRight="0.4em"}}}if(e.addEqnNum){i="left "+(i.length>0?i:"center ")+"right "}if(i){o.setAttribute("columnalign",i.trim())}if(e.envClasses.includes("small")){o=new mathMLTree.MathNode("mstyle",[o]);o.setAttribute("scriptlevel","1")}return o};const alignedHandler=function(e,t){if(e.envName.indexOf("ed")===-1){validateAmsEnvironmentContext(e)}const r=[];const n=parseArray(e.parser,{cols:r,addEqnNum:e.envName==="align"||e.envName==="alignat",emptySingleRow:true,envClasses:["jot","abut"],maxNumCols:e.envName==="split"?2:undefined,leqno:e.parser.settings.leqno},"display");let a;let o=0;if(t[0]&&t[0].type==="ordgroup"){let e="";for(let r=0;r<t[0].body.length;r++){const n=assertNodeType(t[0].body[r],"textord");e+=n.text}a=Number(e);o=a*2}const i=!o;n.body.forEach((function(e){if(!i){const t=e.length/2;if(a<t){throw new ParseError("Too many math in a row: "+`expected ${a}, but got ${t}`,e[0])}}else if(o<e.length){o=e.length}}));for(let e=0;e<o;++e){let t="r";if(e%2===1){t="l"}r[e]={type:"align",align:t}}if(e.envName==="split");else if(e.envName.indexOf("ed")>-1){n.envClasses.push("aligned")}else if(i){n.envClasses[1]=e.envName==="align*"?"align-star":"align"}else{n.envClasses.push("aligned")}return n};defineEnvironment({type:"array",names:["array","darray"],props:{numArgs:1},handler(e,t){const r=checkSymbolNodeType(t[0]);const n=r?[t[0]]:assertNodeType(t[0],"ordgroup").body;const a=n.map((function(e){const t=assertSymbolNodeType(e);const r=t.text;if("lcr".indexOf(r)!==-1){return{type:"align",align:r}}else if(r==="|"){return{type:"separator",separator:"|"}}else if(r===":"){return{type:"separator",separator:":"}}throw new ParseError("Unknown column alignment: "+r,e)}));const o={cols:a,envClasses:["array"],maxNumCols:a.length};return parseArray(e.parser,o,dCellStyle(e.envName))},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix","matrix*","pmatrix*","bmatrix*","Bmatrix*","vmatrix*","Vmatrix*"],props:{numArgs:0},handler(e){const t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName.replace("*","")];let r="c";const n={envClasses:[],cols:[]};if(e.envName.charAt(e.envName.length-1)==="*"){const t=e.parser;t.consumeSpaces();if(t.fetch().text==="["){t.consume();t.consumeSpaces();r=t.fetch().text;if("lcr".indexOf(r)===-1){throw new ParseError("Expected l or c or r",t.nextToken)}t.consume();t.consumeSpaces();t.expect("]");t.consume();n.cols=[]}}const a=parseArray(e.parser,n,"text");a.cols=new Array(a.body[0].length).fill({type:"align",align:r});return t?{type:"leftright",mode:e.mode,body:[a],left:t[0],right:t[1],rightColor:undefined}:a},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["smallmatrix"],props:{numArgs:0},handler(e){const t={type:"small"};const r=parseArray(e.parser,t,"script");r.envClasses=["small"];return r},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["subarray"],props:{numArgs:1},handler(e,t){const r=checkSymbolNodeType(t[0]);const n=r?[t[0]]:assertNodeType(t[0],"ordgroup").body;const a=n.map((function(e){const t=assertSymbolNodeType(e);const r=t.text;if("lc".indexOf(r)!==-1){return{type:"align",align:r}}throw new ParseError("Unknown column alignment: "+r,e)}));if(a.length>1){throw new ParseError("{subarray} can contain only one column")}let o={cols:a,envClasses:["small"]};o=parseArray(e.parser,o,"script");if(o.body.length>0&&o.body[0].length>1){throw new ParseError("{subarray} can contain only one column")}return o},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["cases","dcases","rcases","drcases"],props:{numArgs:0},handler(e){const t={cols:[],envClasses:["cases"]};const r=parseArray(e.parser,t,dCellStyle(e.envName));return{type:"leftright",mode:e.mode,body:[r],left:e.envName.indexOf("r")>-1?".":"\\{",right:e.envName.indexOf("r")>-1?"\\}":".",rightColor:undefined}},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["align","align*","aligned","split"],props:{numArgs:0},handler:alignedHandler,mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["alignat","alignat*","alignedat"],props:{numArgs:1},handler:alignedHandler,mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["gathered","gather","gather*"],props:{numArgs:0},handler(e){if(e.envName!=="gathered"){validateAmsEnvironmentContext(e)}const t={cols:[],envClasses:["jot","abut"],addEqnNum:e.envName==="gather",emptySingleRow:true,leqno:e.parser.settings.leqno};return parseArray(e.parser,t,"display")},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["equation","equation*"],props:{numArgs:0},handler(e){validateAmsEnvironmentContext(e);const t={addEqnNum:e.envName==="equation",emptySingleRow:true,singleRow:true,maxNumCols:1,envClasses:["align"],leqno:e.parser.settings.leqno};return parseArray(e.parser,t,"display")},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["multline","multline*"],props:{numArgs:0},handler(e){validateAmsEnvironmentContext(e);const t={addEqnNum:e.envName==="multline",maxNumCols:1,envClasses:["jot","multline"],leqno:e.parser.settings.leqno};return parseArray(e.parser,t,"display")},mathmlBuilder:mathmlBuilder$7});defineEnvironment({type:"array",names:["CD"],props:{numArgs:0},handler(e){validateAmsEnvironmentContext(e);return parseCD(e.parser)},mathmlBuilder:mathmlBuilder$7});defineFunction({type:"text",names:["\\hline","\\hdashline"],props:{numArgs:0,allowedInText:true,allowedInMath:true},handler(e,t){throw new ParseError(`${e.funcName} valid only within array environment`)}});const environments=_environments;defineFunction({type:"environment",names:["\\begin","\\end"],props:{numArgs:1,argTypes:["text"]},handler({parser:e,funcName:t},r){const n=r[0];if(n.type!=="ordgroup"){throw new ParseError("Invalid environment name",n)}let a="";for(let e=0;e<n.body.length;++e){a+=assertNodeType(n.body[e],"textord").text}if(t==="\\begin"){if(!Object.prototype.hasOwnProperty.call(environments,a)){throw new ParseError("No such environment: "+a,n)}const t=environments[a];const{args:r,optArgs:o}=e.parseArguments("\\begin{"+a+"}",t);const i={mode:e.mode,envName:a,parser:e};const s=t.handler(i,r,o);e.expect("\\end",false);const l=e.nextToken;const u=assertNodeType(e.parseFunction(),"environment");if(u.name!==a){throw new ParseError(`Mismatch: \\begin{${a}} matched by \\end{${u.name}}`,l)}return s}return{type:"environment",mode:e.mode,name:a,nameGroup:n}}});defineFunction({type:"envTag",names:["\\env@tag"],props:{numArgs:1,argTypes:["math"]},handler({parser:e},t){return{type:"envTag",mode:e.mode,body:t[0]}},mathmlBuilder(e,t){return new mathMLTree.MathNode("mrow")}});defineFunction({type:"noTag",names:["\\env@notag"],props:{numArgs:0},handler({parser:e}){return{type:"noTag",mode:e.mode}},mathmlBuilder(e,t){return new mathMLTree.MathNode("mrow")}});const mathmlBuilder$6=(e,t)=>{const r=e.font;const n=t.withFont(r);const a=buildGroup$1(e.body,n);if(a.children.length===0){return a}if(r==="boldsymbol"&&["mo","mpadded"].includes(a.type)){a.style.fontWeight="bold";return a}let o=a.children[0].type==="mo";for(let e=1;e<a.children.length;e++){if(a.children[e].type==="mo"&&r==="boldsymbol"){a.children[e].style.fontWeight="bold"}if(a.children[e].type!=="mi"){o=false}const t=a.children[e].attributes&&a.children[e].attributes.mathvariant||"";if(t!=="normal"){o=false}}if(!o){return a}const i=a.children[0];for(let e=1;e<a.children.length;e++){i.children.push(a.children[e].children[0])}if(i.attributes.mathvariant&&i.attributes.mathvariant==="normal"){const e=new mathMLTree.MathNode("mtext",new mathMLTree.TextNode("​"));return new mathMLTree.MathNode("mrow",[e,i])}return i};const fontAliases={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};defineFunction({type:"font",names:["\\mathrm","\\mathit","\\mathbf","\\mathnormal","\\up@greek","\\boldsymbol","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bm","\\bold","\\frak"],props:{numArgs:1,allowedInArgument:true},handler:({parser:e,funcName:t},r)=>{const n=normalizeArgument(r[0]);let a=t;if(a in fontAliases){a=fontAliases[a]}return{type:"font",mode:e.mode,font:a.slice(1),body:n}},mathmlBuilder:mathmlBuilder$6});defineFunction({type:"font",names:["\\rm","\\sf","\\tt","\\bf","\\it","\\cal"],props:{numArgs:0,allowedInText:true},handler:({parser:e,funcName:t,breakOnTokenText:r},n)=>{const{mode:a}=e;const o=e.parseExpression(true,r);const i=`math${t.slice(1)}`;return{type:"font",mode:a,font:i,body:{type:"ordgroup",mode:e.mode,body:o}}},mathmlBuilder:mathmlBuilder$6});const stylArray=["display","text","script","scriptscript"];const scriptLevel={auto:-1,display:0,text:0,script:1,scriptscript:2};const mathmlBuilder$5=(e,t)=>{const r=e.scriptLevel==="auto"?t.incrementLevel():e.scriptLevel==="display"?t.withLevel(StyleLevel.TEXT):e.scriptLevel==="text"?t.withLevel(StyleLevel.SCRIPT):t.withLevel(StyleLevel.SCRIPTSCRIPT);let n=new mathMLTree.MathNode("mfrac",[buildGroup$1(e.numer,r),buildGroup$1(e.denom,r)]);if(!e.hasBarLine){n.setAttribute("linethickness","0px")}else if(e.barSize){const r=calculateSize(e.barSize,t);n.setAttribute("linethickness",r.number+r.unit)}if(e.leftDelim!=null||e.rightDelim!=null){const t=[];if(e.leftDelim!=null){const r=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode(e.leftDelim.replace("\\",""))]);r.setAttribute("fence","true");t.push(r)}t.push(n);if(e.rightDelim!=null){const r=new mathMLTree.MathNode("mo",[new mathMLTree.TextNode(e.rightDelim.replace("\\",""))]);r.setAttribute("fence","true");t.push(r)}n=makeRow(t)}if(e.scriptLevel!=="auto"){n=new mathMLTree.MathNode("mstyle",[n]);n.setAttribute("displaystyle",String(e.scriptLevel==="display"));n.setAttribute("scriptlevel",scriptLevel[e.scriptLevel])}return n};defineFunction({type:"genfrac",names:["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac","\\\\bracefrac","\\\\brackfrac"],props:{numArgs:2,allowedInArgument:true},handler:({parser:e,funcName:t},r)=>{const n=r[0];const a=r[1];let o=false;let i=null;let s=null;let l="auto";switch(t){case"\\dfrac":case"\\frac":case"\\tfrac":o=true;break;case"\\\\atopfrac":o=false;break;case"\\dbinom":case"\\binom":case"\\tbinom":i="(";s=")";break;case"\\\\bracefrac":i="\\{";s="\\}";break;case"\\\\brackfrac":i="[";s="]";break;default:throw new Error("Unrecognized genfrac command")}switch(t){case"\\dfrac":case"\\dbinom":l="display";break;case"\\tfrac":case"\\tbinom":l="text";break}return{type:"genfrac",mode:e.mode,continued:false,numer:n,denom:a,hasBarLine:o,leftDelim:i,rightDelim:s,scriptLevel:l,barSize:null}},mathmlBuilder:mathmlBuilder$5});defineFunction({type:"genfrac",names:["\\cfrac"],props:{numArgs:2},handler:({parser:e,funcName:t},r)=>{const n=r[0];const a=r[1];return{type:"genfrac",mode:e.mode,continued:true,numer:n,denom:a,hasBarLine:true,leftDelim:null,rightDelim:null,scriptLevel:"display",barSize:null}}});defineFunction({type:"infix",names:["\\over","\\choose","\\atop","\\brace","\\brack"],props:{numArgs:0,infix:true},handler({parser:e,funcName:t,token:r}){let n;switch(t){case"\\over":n="\\frac";break;case"\\choose":n="\\binom";break;case"\\atop":n="\\\\atopfrac";break;case"\\brace":n="\\\\bracefrac";break;case"\\brack":n="\\\\brackfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",mode:e.mode,replaceWith:n,token:r}}});const delimFromValue=function(e){let t=null;if(e.length>0){t=e;t=t==="."?null:t}return t};defineFunction({type:"genfrac",names:["\\genfrac"],props:{numArgs:6,allowedInArgument:true,argTypes:["math","math","size","text","math","math"]},handler({parser:e},t){const r=t[4];const n=t[5];const a=normalizeArgument(t[0]);const o=a.type==="atom"&&a.family==="open"?delimFromValue(a.text):null;const i=normalizeArgument(t[1]);const s=i.type==="atom"&&i.family==="close"?delimFromValue(i.text):null;const l=assertNodeType(t[2],"size");let u;let c=null;if(l.isBlank){u=true}else{c=l.value;u=c.number>0}let d="auto";let m=t[3];if(m.type==="ordgroup"){if(m.body.length>0){const e=assertNodeType(m.body[0],"textord");d=stylArray[Number(e.text)]}}else{m=assertNodeType(m,"textord");d=stylArray[Number(m.text)]}return{type:"genfrac",mode:e.mode,numer:r,denom:n,continued:false,hasBarLine:u,barSize:c,leftDelim:o,rightDelim:s,scriptLevel:d}},mathmlBuilder:mathmlBuilder$5});defineFunction({type:"infix",names:["\\above"],props:{numArgs:1,argTypes:["size"],infix:true},handler({parser:e,funcName:t,token:r},n){return{type:"infix",mode:e.mode,replaceWith:"\\\\abovefrac",barSize:assertNodeType(n[0],"size").value,token:r}}});defineFunction({type:"genfrac",names:["\\\\abovefrac"],props:{numArgs:3,argTypes:["math","size","math"]},handler:({parser:e,funcName:t},r)=>{const n=r[0];const a=assert(assertNodeType(r[1],"infix").barSize);const o=r[2];const i=a.number>0;return{type:"genfrac",mode:e.mode,numer:n,denom:o,continued:false,hasBarLine:i,barSize:a,leftDelim:null,rightDelim:null,scriptLevel:"auto"}},mathmlBuilder:mathmlBuilder$5});const mathmlBuilder$4=(e,t)=>{const r=stretchy.mathMLnode(e.label);r.style["math-depth"]=0;return new mathMLTree.MathNode(e.isOver?"mover":"munder",[buildGroup$1(e.base,t),r])};defineFunction({type:"horizBrace",names:["\\overbrace","\\underbrace"],props:{numArgs:1},handler({parser:e,funcName:t},r){return{type:"horizBrace",mode:e.mode,label:t,isOver:/^\\over/.test(t),base:r[0]}},mathmlBuilder:mathmlBuilder$4});defineFunction({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"],allowedInText:true},handler:({parser:e,token:t},r)=>{const n=r[1];const a=assertNodeType(r[0],"url").url;if(!e.settings.isTrusted({command:"\\href",url:a})){throw new ParseError(`Function "\\href" is not trusted`,t)}return{type:"href",mode:e.mode,href:a,body:ordargument(n)}},mathmlBuilder:(e,t)=>{let r=buildExpressionRow(e.body,t);if(!(r instanceof MathNode)){r=new MathNode("mrow",[r])}r.setAttribute("href",e.href);return r}});defineFunction({type:"href",names:["\\url"],props:{numArgs:1,argTypes:["url"],allowedInText:true},handler:({parser:e,token:t},r)=>{const n=assertNodeType(r[0],"url").url;if(!e.settings.isTrusted({command:"\\url",url:n})){throw new ParseError(`Function "\\url" is not trusted`,t)}const a=[];for(let e=0;e<n.length;e++){let t=n[e];if(t==="~"){t="\\textasciitilde"}a.push({type:"textord",mode:"text",text:t})}const o={type:"text",mode:e.mode,font:"\\texttt",body:a};return{type:"href",mode:e.mode,href:n,body:ordargument(o)}}});defineFunction({type:"html",names:["\\class","\\id","\\style","\\data"],props:{numArgs:2,argTypes:["raw","original"],allowedInText:true},handler:({parser:e,funcName:t,token:r},n)=>{const a=assertNodeType(n[0],"raw").string;const o=n[1];if(e.settings.strict){throw new ParseError(`Function "${t}" is disabled in strict mode`,r)}let i;const s={};switch(t){case"\\class":s.class=a;i={command:"\\class",class:a};break;case"\\id":s.id=a;i={command:"\\id",id:a};break;case"\\style":s.style=a;i={command:"\\style",style:a};break;case"\\data":{const e=a.split(",");for(let t=0;t<e.length;t++){const r=e[t].split("=");if(r.length!==2){throw new ParseError("Error parsing key-value for \\data")}s["data-"+r[0].trim()]=r[1].trim()}i={command:"\\data",attributes:s};break}default:throw new Error("Unrecognized html command")}if(!e.settings.isTrusted(i)){throw new ParseError(`Function "${t}" is not trusted`,r)}return{type:"html",mode:e.mode,attributes:s,body:ordargument(o)}},mathmlBuilder:(e,t)=>{const r=buildExpressionRow(e.body,t);const n=[];if(e.attributes.class){n.push(...e.attributes.class.trim().split(/\s+/))}r.classes=n;for(const t in e.attributes){if(t!=="class"&&Object.prototype.hasOwnProperty.call(e.attributes,t)){r.setAttribute(t,e.attributes[t])}}return r}});const sizeData=function(e){if(/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e)){return{number:+e,unit:"bp"}}else{const t=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);if(!t){throw new ParseError("Invalid size: '"+e+"' in \\includegraphics")}const r={number:+(t[1]+t[2]),unit:t[3]};if(!validUnit(r)){throw new ParseError("Invalid unit: '"+r.unit+"' in \\includegraphics.")}return r}};defineFunction({type:"includegraphics",names:["\\includegraphics"],props:{numArgs:1,numOptionalArgs:1,argTypes:["raw","url"],allowedInText:false},handler:({parser:e,token:t},r,n)=>{let a={number:0,unit:"em"};let o={number:.9,unit:"em"};let i={number:0,unit:"em"};let s="";if(n[0]){const e=assertNodeType(n[0],"raw").string;const t=e.split(",");for(let e=0;e<t.length;e++){const r=t[e].split("=");if(r.length===2){const e=r[1].trim();switch(r[0].trim()){case"alt":s=e;break;case"width":a=sizeData(e);break;case"height":o=sizeData(e);break;case"totalheight":i=sizeData(e);break;default:throw new ParseError("Invalid key: '"+r[0]+"' in \\includegraphics.")}}}}const l=assertNodeType(r[0],"url").url;if(s===""){s=l;s=s.replace(/^.*[\\/]/,"");s=s.substring(0,s.lastIndexOf("."))}if(!e.settings.isTrusted({command:"\\includegraphics",url:l})){throw new ParseError(`Function "\\includegraphics" is not trusted`,t)}return{type:"includegraphics",mode:e.mode,alt:s,width:a,height:o,totalheight:i,src:l}},mathmlBuilder:(e,t)=>{const r=calculateSize(e.height,t);const n={number:0,unit:"em"};if(e.totalheight.number>0){if(e.totalheight.unit===r.unit&&e.totalheight.number>r.number){n.number=e.totalheight.number-r.number;n.unit=r.unit}}let a=0;if(e.width.number>0){a=calculateSize(e.width,t)}const o={height:r.number+n.number+"em"};if(a.number>0){o.width=a.number+a.unit}if(n.number>0){o.verticalAlign=-n.number+n.unit}const i=new Img(e.src,e.alt,o);i.height=r;i.depth=n;return new mathMLTree.MathNode("mtext",[i])}});defineFunction({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],primitive:true,allowedInText:true},handler({parser:e,funcName:t,token:r},n){const a=assertNodeType(n[0],"size");if(e.settings.strict){const n=t[1]==="m";const o=a.value.unit==="mu";if(n){if(!o){throw new ParseError(`LaTeX's ${t} supports only mu units, `+`not ${a.value.unit} units`,r)}if(e.mode!=="math"){throw new ParseError(`LaTeX's ${t} works only in math mode`,r)}}else{if(o){throw new ParseError(`LaTeX's ${t} doesn't support mu units`,r)}}}return{type:"kern",mode:e.mode,dimension:a.value}},mathmlBuilder(e,t){const r=calculateSize(e.dimension,t);const n=r.unit==="em"?spaceCharacter(r.number):"";if(e.mode==="text"&&n.length>0){const e=new mathMLTree.TextNode(n);return new mathMLTree.MathNode("mtext",[e])}else{const e=new mathMLTree.MathNode("mspace");e.setAttribute("width",r.number+r.unit);if(r.number<0){e.style.marginLeft=r.number+r.unit}return e}}});const spaceCharacter=function(e){if(e>=.05555&&e<=.05556){return" "}else if(e>=.1666&&e<=.1667){return" "}else if(e>=.2222&&e<=.2223){return" "}else if(e>=.2777&&e<=.2778){return"  "}else{return""}};const invalidIdRegEx=/[^A-Za-z_0-9-]/g;defineFunction({type:"label",names:["\\label"],props:{numArgs:1,argTypes:["raw"]},handler({parser:e},t){return{type:"label",mode:e.mode,string:t[0].string.replace(invalidIdRegEx,"")}},mathmlBuilder(e,t){const r=new mathMLTree.MathNode("mrow",[],["tml-label"]);if(e.string.length>0){r.setAttribute("id",e.string)}return r}});const textModeLap=["\\clap","\\llap","\\rlap"];defineFunction({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap","\\clap","\\llap","\\rlap"],props:{numArgs:1,allowedInText:true},handler:({parser:e,funcName:t,token:r},n)=>{if(textModeLap.includes(t)){if(e.settings.strict&&e.mode!=="text"){throw new ParseError(`{${t}} can be used only in text mode.\n Try \\math${t.slice(1)}`,r)}t=t.slice(1)}else{t=t.slice(5)}const a=n[0];return{type:"lap",mode:e.mode,alignment:t,body:a}},mathmlBuilder:(e,t)=>{let r;if(e.alignment==="llap"){const n=buildExpression(ordargument(e.body),t);const a=new mathMLTree.MathNode("mphantom",n);r=new mathMLTree.MathNode("mpadded",[a]);r.setAttribute("width","0px")}const n=buildGroup$1(e.body,t);let a;if(e.alignment==="llap"){n.style.position="absolute";n.style.right="0";n.style.bottom=`0`;a=new mathMLTree.MathNode("mpadded",[r,n])}else{a=new mathMLTree.MathNode("mpadded",[n])}if(e.alignment==="rlap"){if(e.body.body.length>0&&e.body.body[0].type==="genfrac"){a.setAttribute("lspace","0.16667em")}}else{const t=e.alignment==="llap"?"-1":"-0.5";a.setAttribute("lspace",t+"width");if(e.alignment==="llap"){a.style.position="relative"}else{a.style.display="flex";a.style.justifyContent="center"}}a.setAttribute("width","0px");return a}});defineFunction({type:"ordgroup",names:["\\(","$"],props:{numArgs:0,allowedInText:true,allowedInMath:false},handler({funcName:e,parser:t},r){const n=t.mode;t.switchMode("math");const a=e==="\\("?"\\)":"$";const o=t.parseExpression(false,a);t.expect(a);t.switchMode(n);return{type:"ordgroup",mode:t.mode,body:o}}});defineFunction({type:"text",names:["\\)","\\]"],props:{numArgs:0,allowedInText:true,allowedInMath:false},handler(e,t){throw new ParseError(`Mismatched ${e.funcName}`,t)}});const chooseStyle=(e,t)=>{switch(t.level){case StyleLevel.DISPLAY:return e.display;case StyleLevel.TEXT:return e.text;case StyleLevel.SCRIPT:return e.script;case StyleLevel.SCRIPTSCRIPT:return e.scriptscript;default:return e.text}};defineFunction({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4,primitive:true},handler:({parser:e},t)=>({type:"mathchoice",mode:e.mode,display:ordargument(t[0]),text:ordargument(t[1]),script:ordargument(t[2]),scriptscript:ordargument(t[3])}),mathmlBuilder:(e,t)=>{const r=chooseStyle(e,t);return buildExpressionRow(r,t)}});const textAtomTypes=["text","textord","mathord","atom"];const padding=e=>{const t=new mathMLTree.MathNode("mspace");t.setAttribute("width",e+"em");return t};function mathmlBuilder$3(e,t){let r;const n=buildExpression(e.body,t);if(e.mclass==="minner"){r=new mathMLTree.MathNode("mpadded",n)}else if(e.mclass==="mord"){if(e.isCharacterBox||n[0].type==="mathord"){r=n[0];r.type="mi"}else{r=new mathMLTree.MathNode("mi",n)}}else{r=new mathMLTree.MathNode("mrow",n);if(e.mustPromote){r=n[0];r.type="mo";if(e.isCharacterBox&&e.body[0].text&&/[A-Za-z]/.test(e.body[0].text)){r.setAttribute("mathvariant","italic")}}else{r=new mathMLTree.MathNode("mrow",n)}const a=t.level<2;if(r.type==="mrow"){if(a){if(e.mclass==="mbin"){r.children.unshift(padding(.2222));r.children.push(padding(.2222))}else if(e.mclass==="mrel"){r.children.unshift(padding(.2778));r.children.push(padding(.2778))}else if(e.mclass==="mpunct"){r.children.push(padding(.1667))}else if(e.mclass==="minner"){r.children.unshift(padding(.0556));r.children.push(padding(.0556))}}}else{if(e.mclass==="mbin"){r.attributes.lspace=a?"0.2222em":"0";r.attributes.rspace=a?"0.2222em":"0"}else if(e.mclass==="mrel"){r.attributes.lspace=a?"0.2778em":"0";r.attributes.rspace=a?"0.2778em":"0"}else if(e.mclass==="mpunct"){r.attributes.lspace="0em";r.attributes.rspace=a?"0.1667em":"0"}else if(e.mclass==="mopen"||e.mclass==="mclose"){r.attributes.lspace="0em";r.attributes.rspace="0em"}else if(e.mclass==="minner"&&a){r.attributes.lspace="0.0556em";r.attributes.width="+0.1111em"}}if(!(e.mclass==="mopen"||e.mclass==="mclose")){delete r.attributes.stretchy;delete r.attributes.form}}return r}defineFunction({type:"mclass",names:["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],props:{numArgs:1,primitive:true},handler({parser:e,funcName:t},r){const n=r[0];const a=utils.isCharacterBox(n);let o=true;const i={type:"mathord",text:"",mode:e.mode};const s=n.body?n.body:[n];for(const t of s){if(textAtomTypes.includes(t.type)){if(symbols[e.mode][t.text]){i.text+=symbols[e.mode][t.text].replace}else if(t.text){i.text+=t.text}else if(t.body){t.body.map((e=>{i.text+=e.text}))}}else{o=false;break}}return{type:"mclass",mode:e.mode,mclass:"m"+t.slice(5),body:ordargument(o?i:n),isCharacterBox:a,mustPromote:o}},mathmlBuilder:mathmlBuilder$3});const binrelClass=e=>{const t=e.type==="ordgroup"&&e.body.length?e.body[0]:e;if(t.type==="atom"&&(t.family==="bin"||t.family==="rel")){return"m"+t.family}else{return"mord"}};defineFunction({type:"mclass",names:["\\@binrel"],props:{numArgs:2},handler({parser:e},t){return{type:"mclass",mode:e.mode,mclass:binrelClass(t[0]),body:ordargument(t[1]),isCharacterBox:utils.isCharacterBox(t[1])}}});defineFunction({type:"mclass",names:["\\stackrel","\\overset","\\underset"],props:{numArgs:2},handler({parser:e,funcName:t},r){const n=r[1];const a=r[0];const o={type:"op",mode:n.mode,limits:true,alwaysHandleSupSub:true,parentIsSupSub:false,symbol:false,stack:true,suppressBaseShift:t!=="\\stackrel",body:ordargument(n)};return{type:"supsub",mode:a.mode,base:o,sup:t==="\\underset"?null:a,sub:t==="\\underset"?a:null}},mathmlBuilder:mathmlBuilder$3});const buildGroup=(e,t,r)=>{if(!e){return r}const n=buildGroup$1(e,t);if(n.type==="mrow"&&n.children.length===0){return r}return n};defineFunction({type:"multiscript",names:["\\sideset","\\pres@cript"],props:{numArgs:3},handler({parser:e,funcName:t,token:r},n){if(n[2].body.length===0){throw new ParseError(t+`cannot parse an empty base.`)}const a=n[2].body[0];if(e.settings.strict&&t==="\\sideset"&&!a.symbol){throw new ParseError(`The base of \\sideset must be a big operator. Try \\prescript.`)}if(n[0].body.length>0&&n[0].body[0].type!=="supsub"||n[1].body.length>0&&n[1].body[0].type!=="supsub"){throw new ParseError("\\sideset can parse only subscripts and "+"superscripts in its first two arguments",r)}const o=n[0].body.length>0?n[0].body[0]:null;const i=n[1].body.length>0?n[1].body[0]:null;if(!o&&!i){return a}else if(!o){return{type:"styling",mode:e.mode,scriptLevel:"text",body:[{type:"supsub",mode:e.mode,base:a,sup:i.sup,sub:i.sub}]}}else{return{type:"multiscript",mode:e.mode,isSideset:t==="\\sideset",prescripts:o,postscripts:i,base:a}}},mathmlBuilder(e,t){const r=buildGroup$1(e.base,t);const n=new mathMLTree.MathNode("mprescripts");const a=new mathMLTree.MathNode("none");let o=[];const i=buildGroup(e.prescripts.sub,t,a);const s=buildGroup(e.prescripts.sup,t,a);if(e.isSideset){i.setAttribute("style","text-align: left;");s.setAttribute("style","text-align: left;")}if(e.postscripts){const l=buildGroup(e.postscripts.sub,t,a);const u=buildGroup(e.postscripts.sup,t,a);o=[r,l,u,n,i,s]}else{o=[r,n,i,s]}return new mathMLTree.MathNode("mmultiscripts",o)}});defineFunction({type:"not",names:["\\not"],props:{numArgs:1,primitive:true,allowedInText:false},handler({parser:e},t){const r=utils.isCharacterBox(t[0]);let n;if(r){n=ordargument(t[0]);if(n[0].text.charAt(0)==="\\"){n[0].text=symbols.math[n[0].text].replace}n[0].text=n[0].text.slice(0,1)+"̸"+n[0].text.slice(1)}else{const e={type:"textord",mode:"math",text:"̸"};const r={type:"kern",mode:"math",dimension:{number:-.6,unit:"em"}};n=[e,r,t[0]]}return{type:"not",mode:e.mode,body:n,isCharacterBox:r}},mathmlBuilder(e,t){if(e.isCharacterBox){const r=buildExpression(e.body,t);return r[0]}else{return buildExpressionRow(e.body,t,true)}}});const ordAtomTypes=["textord","mathord","atom"];const noSuccessor=["\\smallint"];const ordTypes=["textord","mathord","ordgroup","close","leftright"];const mathmlBuilder$2=(e,t)=>{let r;if(e.symbol){r=new MathNode("mo",[makeText(e.name,e.mode)]);if(noSuccessor.includes(e.name)){r.setAttribute("largeop","false")}else{r.setAttribute("movablelimits","false")}}else if(e.body){r=new MathNode("mo",buildExpression(e.body,t))}else{r=new MathNode("mi",[new TextNode(e.name.slice(1))]);if(!e.parentIsSupSub){const t=new MathNode("mo",[makeText("⁡","text")]);const n=[r,t];if(e.needsLeadingSpace){const e=new MathNode("mspace");e.setAttribute("width","0.1667em");n.unshift(e)}if(!e.isFollowedByDelimiter){const e=new MathNode("mspace");e.setAttribute("width","0.1667em");n.push(e)}r=new MathNode("mrow",n)}}return r};const singleCharBigOps={"∏":"\\prod","∐":"\\coprod","∑":"\\sum","⋀":"\\bigwedge","⋁":"\\bigvee","⋂":"\\bigcap","⋃":"\\bigcup","⨀":"\\bigodot","⨁":"\\bigoplus","⨂":"\\bigotimes","⨄":"\\biguplus","⨅":"\\bigsqcap","⨆":"\\bigsqcup"};defineFunction({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcap","\\bigsqcup","\\smallint","∏","∐","∑","⋀","⋁","⋂","⋃","⨀","⨁","⨂","⨄","⨆"],props:{numArgs:0},handler:({parser:e,funcName:t},r)=>{let n=t;if(n.length===1){n=singleCharBigOps[n]}return{type:"op",mode:e.mode,limits:true,parentIsSupSub:false,symbol:true,stack:false,name:n}},mathmlBuilder:mathmlBuilder$2});defineFunction({type:"op",names:["\\mathop"],props:{numArgs:1,primitive:true},handler:({parser:e},t)=>{const r=t[0];const n=r.body?r.body:[r];const a=n.length===1&&ordAtomTypes.includes(n[0].type);return{type:"op",mode:e.mode,limits:true,parentIsSupSub:false,symbol:a,stack:false,name:a?n[0].text:null,body:a?null:ordargument(r)}},mathmlBuilder:mathmlBuilder$2});const singleCharIntegrals={"∫":"\\int","∬":"\\iint","∭":"\\iiint","∮":"\\oint","∯":"\\oiint","∰":"\\oiiint","∱":"\\intclockwise","∲":"\\varointclockwise","⨌":"\\iiiint","⨍":"\\intbar","⨎":"\\intBar","⨏":"\\fint","⨒":"\\rppolint","⨓":"\\scpolint","⨕":"\\pointint","⨖":"\\sqint","⨗":"\\intlarhk","⨘":"\\intx","⨙":"\\intcap","⨚":"\\intcup"};defineFunction({type:"op",names:["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\sgn","\\tan","\\tanh","\\tg","\\th"],props:{numArgs:0},handler({parser:e,funcName:t}){const r=e.prevAtomType;const n=e.gullet.future().text;return{type:"op",mode:e.mode,limits:false,parentIsSupSub:false,symbol:false,stack:false,isFollowedByDelimiter:isDelimiter(n),needsLeadingSpace:r.length>0&&ordTypes.includes(r),name:t}},mathmlBuilder:mathmlBuilder$2});defineFunction({type:"op",names:["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],props:{numArgs:0},handler({parser:e,funcName:t}){const r=e.prevAtomType;const n=e.gullet.future().text;return{type:"op",mode:e.mode,limits:true,parentIsSupSub:false,symbol:false,stack:false,isFollowedByDelimiter:isDelimiter(n),needsLeadingSpace:r.length>0&&ordTypes.includes(r),name:t}},mathmlBuilder:mathmlBuilder$2});defineFunction({type:"op",names:["\\int","\\iint","\\iiint","\\iiiint","\\oint","\\oiint","\\oiiint","\\intclockwise","\\varointclockwise","\\intbar","\\intBar","\\fint","\\rppolint","\\scpolint","\\pointint","\\sqint","\\intlarhk","\\intx","\\intcap","\\intcup","∫","∬","∭","∮","∯","∰","∱","∲","⨌","⨍","⨎","⨏","⨒","⨓","⨕","⨖","⨗","⨘","⨙","⨚"],props:{numArgs:0},handler({parser:e,funcName:t}){let r=t;if(r.length===1){r=singleCharIntegrals[r]}return{type:"op",mode:e.mode,limits:false,parentIsSupSub:false,symbol:true,stack:false,name:r}},mathmlBuilder:mathmlBuilder$2});const _macros={};function defineMacro(e,t){_macros[e]=t}const mathmlBuilder$1=(e,t)=>{let r=buildExpression(e.body,t.withFont("mathrm"));let n=true;for(let e=0;e<r.length;e++){let t=r[e];if(t instanceof mathMLTree.MathNode){if(t.type==="mrow"&&t.children.length===1&&t.children[0]instanceof mathMLTree.MathNode){t=t.children[0]}switch(t.type){case"mi":case"mn":case"ms":case"mtext":break;case"mspace":{if(t.attributes.width){const a=t.attributes.width.replace("em","");const o=spaceCharacter(Number(a));if(o===""){n=false}else{r[e]=new mathMLTree.MathNode("mtext",[new mathMLTree.TextNode(o)])}}}break;case"mo":{const e=t.children[0];if(t.children.length===1&&e instanceof mathMLTree.TextNode){e.text=e.text.replace(/\u2212/,"-").replace(/\u2217/,"*")}else{n=false}break}default:n=false}}else{n=false}}if(n){const e=r.map((e=>e.toText())).join("");r=[new mathMLTree.TextNode(e)]}else if(r.length===1&&["mover","munder"].includes(r[0].type)&&(r[0].children[0].type==="mi"||r[0].children[0].type==="mtext")){r[0].children[0].type="mi";if(e.parentIsSupSub){return new mathMLTree.MathNode("mrow",r)}else{const e=new mathMLTree.MathNode("mo",[makeText("⁡","text")]);return mathMLTree.newDocumentFragment([r[0],e])}}let a;if(n){a=new mathMLTree.MathNode("mi",r);if(r[0].text.length===1){a.setAttribute("mathvariant","normal")}}else{a=new mathMLTree.MathNode("mrow",r)}if(!e.parentIsSupSub){const t=new mathMLTree.MathNode("mo",[makeText("⁡","text")]);const r=[a,t];if(e.needsLeadingSpace){const e=new mathMLTree.MathNode("mspace");e.setAttribute("width","0.1667em");r.unshift(e)}if(!e.isFollowedByDelimiter){const e=new mathMLTree.MathNode("mspace");e.setAttribute("width","0.1667em");r.push(e)}return mathMLTree.newDocumentFragment(r)}return a};defineFunction({type:"operatorname",names:["\\operatorname@","\\operatornamewithlimits"],props:{numArgs:1,allowedInArgument:true},handler:({parser:e,funcName:t},r)=>{const n=r[0];const a=e.prevAtomType;const o=e.gullet.future().text;return{type:"operatorname",mode:e.mode,body:ordargument(n),alwaysHandleSupSub:t==="\\operatornamewithlimits",limits:false,parentIsSupSub:false,isFollowedByDelimiter:isDelimiter(o),needsLeadingSpace:a.length>0&&ordTypes.includes(a)}},mathmlBuilder:mathmlBuilder$1});defineMacro("\\operatorname","\\@ifstar\\operatornamewithlimits\\operatorname@");defineFunctionBuilders({type:"ordgroup",mathmlBuilder(e,t){return buildExpressionRow(e.body,t,true)}});defineFunction({type:"phantom",names:["\\phantom"],props:{numArgs:1,allowedInText:true},handler:({parser:e},t)=>{const r=t[0];return{type:"phantom",mode:e.mode,body:ordargument(r)}},mathmlBuilder:(e,t)=>{const r=buildExpression(e.body,t);return new mathMLTree.MathNode("mphantom",r)}});defineFunction({type:"hphantom",names:["\\hphantom"],props:{numArgs:1,allowedInText:true},handler:({parser:e},t)=>{const r=t[0];return{type:"hphantom",mode:e.mode,body:r}},mathmlBuilder:(e,t)=>{const r=buildExpression(ordargument(e.body),t);const n=new mathMLTree.MathNode("mphantom",r);const a=new mathMLTree.MathNode("mpadded",[n]);a.setAttribute("height","0px");a.setAttribute("depth","0px");return a}});defineFunction({type:"vphantom",names:["\\vphantom"],props:{numArgs:1,allowedInText:true},handler:({parser:e},t)=>{const r=t[0];return{type:"vphantom",mode:e.mode,body:r}},mathmlBuilder:(e,t)=>{const r=buildExpression(ordargument(e.body),t);const n=new mathMLTree.MathNode("mphantom",r);const a=new mathMLTree.MathNode("mpadded",[n]);a.setAttribute("width","0px");return a}});defineFunction({type:"pmb",names:["\\pmb"],props:{numArgs:1,allowedInText:true},handler({parser:e},t){return{type:"pmb",mode:e.mode,body:ordargument(t[0])}},mathmlBuilder(e,t){const r=buildExpression(e.body,t);const n=wrapWithMstyle(r);n.setAttribute("style","font-weight:bold");return n}});const sign=e=>e>=0?"+":"-";const mathmlBuilder=(e,t)=>{const r=t.withLevel(StyleLevel.TEXT);const n=new mathMLTree.MathNode("mpadded",[buildGroup$1(e.body,r)]);const a=calculateSize(e.dy,t);n.setAttribute("voffset",a.number+a.unit);const o=Math.abs(a.number);n.setAttribute("height",sign(a.number)+o+a.unit);n.setAttribute("depth",sign(-a.number)+o+a.unit);return n};defineFunction({type:"raise",names:["\\raise","\\lower"],props:{numArgs:2,argTypes:["size","primitive"],primitive:true},handler({parser:e,funcName:t},r){const n=assertNodeType(r[0],"size").value;if(t==="\\lower"){n.number*=-1}const a=r[1];return{type:"raise",mode:e.mode,dy:n,body:a}},mathmlBuilder:mathmlBuilder});defineFunction({type:"raise",names:["\\raisebox"],props:{numArgs:2,argTypes:["size","hbox"],allowedInText:true},handler({parser:e,funcName:t},r){const n=assertNodeType(r[0],"size").value;const a=r[1];return{type:"raise",mode:e.mode,dy:n,body:a}},mathmlBuilder:mathmlBuilder});defineFunction({type:"ref",names:["\\ref","\\eqref"],props:{numArgs:1,argTypes:["raw"]},handler({parser:e,funcName:t},r){return{type:"ref",mode:e.mode,funcName:t,string:r[0].string.replace(invalidIdRegEx,"")}},mathmlBuilder(e,t){const r=e.funcName==="\\ref"?["tml-ref"]:["tml-ref","tml-eqref"];const n=new mathMLTree.MathNode("mtext",[new mathMLTree.TextNode("")],r);n.setAttribute("href","#"+e.string);return n}});defineFunction({type:"internal",names:["\\relax"],props:{numArgs:0,allowedInText:true},handler({parser:e}){return{type:"internal",mode:e.mode}}});defineFunction({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler({parser:e},t,r){const n=r[0];const a=assertNodeType(t[0],"size");const o=assertNodeType(t[1],"size");return{type:"rule",mode:e.mode,shift:n&&assertNodeType(n,"size").value,width:a.value,height:o.value}},mathmlBuilder(e,t){const r=calculateSize(e.width,t);const n=calculateSize(e.height,t);const a=e.shift?calculateSize(e.shift,t):{number:0,unit:"em"};const o=t.color&&t.getColor()||"black";const i=new mathMLTree.MathNode("mspace");if(r.number>0&&n.number>0){i.setAttribute("mathbackground",o)}i.setAttribute("width",r.number+r.unit);i.setAttribute("height",n.number+n.unit);if(a.number===0){return i}const s=new mathMLTree.MathNode("mpadded",[i]);if(a.number>=0){s.setAttribute("height","+"+a.number+a.unit)}else{s.setAttribute("height",a.number+a.unit);s.setAttribute("depth","+"+-a.number+a.unit)}s.setAttribute("voffset",a.number+a.unit);return s}});const sizeMap={"\\tiny":.5,"\\sixptsize":.6,"\\Tiny":.6,"\\scriptsize":.7,"\\footnotesize":.8,"\\small":.9,"\\normalsize":1,"\\large":1.2,"\\Large":1.44,"\\LARGE":1.728,"\\huge":2.074,"\\Huge":2.488};defineFunction({type:"sizing",names:["\\tiny","\\sixptsize","\\Tiny","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"],props:{numArgs:0,allowedInText:true},handler:({breakOnTokenText:e,funcName:t,parser:r},n)=>{if(r.settings.strict&&r.mode==="math"){console.log(`Temml strict-mode warning: Command ${t} is invalid in math mode.`)}const a=r.parseExpression(false,e);return{type:"sizing",mode:r.mode,funcName:t,body:a}},mathmlBuilder:(e,t)=>{const r=t.withFontSize(sizeMap[e.funcName]);const n=buildExpression(e.body,r);const a=wrapWithMstyle(n);const o=(sizeMap[e.funcName]/t.fontSize).toFixed(4);a.setAttribute("mathsize",o+"em");return a}});defineFunction({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:true},handler:({parser:e},t,r)=>{let n=false;let a=false;const o=r[0]&&assertNodeType(r[0],"ordgroup");if(o){let e="";for(let t=0;t<o.body.length;++t){const r=o.body[t];e=r.text;if(e==="t"){n=true}else if(e==="b"){a=true}else{n=false;a=false;break}}}else{n=true;a=true}const i=t[0];return{type:"smash",mode:e.mode,body:i,smashHeight:n,smashDepth:a}},mathmlBuilder:(e,t)=>{const r=new mathMLTree.MathNode("mpadded",[buildGroup$1(e.body,t)]);if(e.smashHeight){r.setAttribute("height","0px")}if(e.smashDepth){r.setAttribute("depth","0px")}return r}});defineFunction({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler({parser:e},t,r){const n=r[0];const a=t[0];return{type:"sqrt",mode:e.mode,body:a,index:n}},mathmlBuilder(e,t){const{body:r,index:n}=e;return n?new mathMLTree.MathNode("mroot",[buildGroup$1(r,t),buildGroup$1(n,t.incrementLevel())]):new mathMLTree.MathNode("msqrt",[buildGroup$1(r,t)])}});const styleMap={display:0,text:1,script:2,scriptscript:3};const styleAttributes={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]};defineFunction({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:true,primitive:true},handler({breakOnTokenText:e,funcName:t,parser:r},n){const a=r.parseExpression(true,e);const o=t.slice(1,t.length-5);return{type:"styling",mode:r.mode,scriptLevel:o,body:a}},mathmlBuilder(e,t){const r=t.withLevel(styleMap[e.scriptLevel]);const n=buildExpression(e.body,r);const a=wrapWithMstyle(n);const o=styleAttributes[e.scriptLevel];a.setAttribute("scriptlevel",o[0]);a.setAttribute("displaystyle",o[1]);return a}});const symbolRegEx=/^m(over|under|underover)$/;defineFunctionBuilders({type:"supsub",mathmlBuilder(e,t){let r=false;let n;let a;let o=false;let i=false;let s=false;if(e.base&&e.base.type==="horizBrace"){a=!!e.sup;if(a===e.base.isOver){r=true;n=e.base.isOver}}if(e.base&&!e.base.stack&&(e.base.type==="op"||e.base.type==="operatorname")){e.base.parentIsSupSub=true;o=!e.base.symbol;i=o&&!e.isFollowedByDelimiter;s=e.base.needsLeadingSpace}const l=e.base&&e.base.stack?[buildGroup$1(e.base.body[0],t)]:[buildGroup$1(e.base,t)];const u=t.inSubOrSup();if(e.sub){l.push(buildGroup$1(e.sub,u))}if(e.sup){l.push(buildGroup$1(e.sup,u))}let c;if(r){c=n?"mover":"munder"}else if(!e.sub){const r=e.base;if(r&&r.type==="op"&&r.limits&&(t.level===StyleLevel.DISPLAY||r.alwaysHandleSupSub)){c="mover"}else if(r&&r.type==="operatorname"&&r.alwaysHandleSupSub&&(r.limits||t.level===StyleLevel.DISPLAY)){c="mover"}else{c="msup"}}else if(!e.sup){const r=e.base;if(r&&r.type==="op"&&r.limits&&(t.level===StyleLevel.DISPLAY||r.alwaysHandleSupSub)){c="munder"}else if(r&&r.type==="operatorname"&&r.alwaysHandleSupSub&&(r.limits||t.level===StyleLevel.DISPLAY)){c="munder"}else{c="msub"}}else{const r=e.base;if(r&&(r.type==="op"&&r.limits||r.type==="multiscript")&&(t.level===StyleLevel.DISPLAY||r.alwaysHandleSupSub)){c="munderover"}else if(r&&r.type==="operatorname"&&r.alwaysHandleSupSub&&(t.level===StyleLevel.DISPLAY||r.limits)){c="munderover"}else{c="msubsup"}}let d=new mathMLTree.MathNode(c,l);if(o){const e=new mathMLTree.MathNode("mo",[makeText("⁡","text")]);if(s){const t=new mathMLTree.MathNode("mspace");t.setAttribute("width","0.1667em");d=mathMLTree.newDocumentFragment([t,d,e])}else{d=mathMLTree.newDocumentFragment([d,e])}if(i){const e=new mathMLTree.MathNode("mspace");e.setAttribute("width","0.1667em");d.children.push(e)}}else if(symbolRegEx.test(c)){d=new mathMLTree.MathNode("mrow",[d])}return d}});const short=["\\shortmid","\\nshortmid","\\shortparallel","\\nshortparallel","\\smallsetminus"];const arrows=["\\Rsh","\\Lsh","\\restriction"];const isArrow=e=>{if(e.length===1){const t=e.codePointAt(0);return 8591<t&&t<8704}return e.indexOf("arrow")>-1||e.indexOf("harpoon")>-1||arrows.includes(e)};defineFunctionBuilders({type:"atom",mathmlBuilder(e,t){const r=new mathMLTree.MathNode("mo",[makeText(e.text,e.mode)]);if(e.family==="punct"){r.setAttribute("separator","true")}else if(e.family==="open"||e.family==="close"){if(e.family==="open"){r.setAttribute("form","prefix");r.setAttribute("stretchy","false")}else if(e.family==="close"){r.setAttribute("form","postfix");r.setAttribute("stretchy","false")}}else if(e.text==="\\mid"){r.setAttribute("lspace","0.22em");r.setAttribute("rspace","0.22em");r.setAttribute("stretchy","false")}else if(e.family==="rel"&&isArrow(e.text)){r.setAttribute("stretchy","false")}else if(short.includes(e.text)){r.setAttribute("mathsize","70%")}else if(e.text===":"){r.attributes.lspace="0.2222em";r.attributes.rspace="0.2222em"}return r}});const fontMap={mathbf:"bold",mathrm:"normal",textit:"italic",mathit:"italic",mathnormal:"italic",mathbb:"double-struck",mathcal:"script",mathfrak:"fraktur",mathscr:"script",mathsf:"sans-serif",mathtt:"monospace"};const getVariant=function(e,t){if(t.fontFamily==="texttt"){return"monospace"}else if(t.fontFamily==="textsc"){return"normal"}else if(t.fontFamily==="textsf"){if(t.fontShape==="textit"&&t.fontWeight==="textbf"){return"sans-serif-bold-italic"}else if(t.fontShape==="textit"){return"sans-serif-italic"}else if(t.fontWeight==="textbf"){return"sans-serif-bold"}else{return"sans-serif"}}else if(t.fontShape==="textit"&&t.fontWeight==="textbf"){return"bold-italic"}else if(t.fontShape==="textit"){return"italic"}else if(t.fontWeight==="textbf"){return"bold"}const r=t.font;if(!r||r==="mathnormal"){return null}const n=e.mode;switch(r){case"mathit":return"italic";case"mathrm":{const t=e.text.codePointAt(0);return 939<t&&t<975?"italic":"normal"}case"greekItalic":return"italic";case"up@greek":return"normal";case"boldsymbol":case"mathboldsymbol":return"bold-italic";case"mathbf":return"bold";case"mathbb":return"double-struck";case"mathfrak":return"fraktur";case"mathscr":case"mathcal":return"script";case"mathsf":return"sans-serif";case"mathtt":return"monospace"}let a=e.text;if(symbols[n][a]&&symbols[n][a].replace){a=symbols[n][a].replace}return Object.prototype.hasOwnProperty.call(fontMap,r)?fontMap[r]:null};const script=Object.freeze({B:8426,E:8427,F:8427,H:8387,I:8391,L:8390,M:8422,R:8393,e:8394,g:8355,o:8389});const frak=Object.freeze({C:8426,H:8388,I:8392,R:8394,Z:8398});const bbb$1=Object.freeze({C:8383,H:8389,N:8391,P:8393,Q:8393,R:8395,Z:8394});const bold=Object.freeze({"ϵ":119527,"ϑ":119564,"ϰ":119534,"φ":119577,"ϱ":119535,"ϖ":119563});const boldItalic=Object.freeze({"ϵ":119643,"ϑ":119680,"ϰ":119650,"φ":119693,"ϱ":119651,"ϖ":119679});const boldsf=Object.freeze({"ϵ":119701,"ϑ":119738,"ϰ":119708,"φ":119751,"ϱ":119709,"ϖ":119737});const bisf=Object.freeze({"ϵ":119759,"ϑ":119796,"ϰ":119766,"φ":119809,"ϱ":119767,"ϖ":119795});const offset=Object.freeze({upperCaseLatin:{normal:e=>0,bold:e=>119743,italic:e=>119795,"bold-italic":e=>119847,script:e=>script[e]||119899,"script-bold":e=>119951,fraktur:e=>frak[e]||120003,"fraktur-bold":e=>120107,"double-struck":e=>bbb$1[e]||120055,"sans-serif":e=>120159,"sans-serif-bold":e=>120211,"sans-serif-italic":e=>120263,"sans-serif-bold-italic":e=>120380,monospace:e=>120367},lowerCaseLatin:{normal:e=>0,bold:e=>119737,italic:e=>e==="h"?8358:119789,"bold-italic":e=>119841,script:e=>script[e]||119893,"script-bold":e=>119945,fraktur:e=>119997,"fraktur-bold":e=>120101,"double-struck":e=>120049,"sans-serif":e=>120153,"sans-serif-bold":e=>120205,"sans-serif-italic":e=>120257,"sans-serif-bold-italic":e=>120309,monospace:e=>120361},upperCaseGreek:{normal:e=>0,bold:e=>e==="∇"?111802:119575,italic:e=>e==="∇"?111860:119633,"bold-italic":e=>e==="∇"?111802:119575,script:e=>0,"script-bold":e=>0,fraktur:e=>0,"fraktur-bold":e=>0,"double-struck":e=>0,"sans-serif":e=>e==="∇"?111976:119749,"sans-serif-bold":e=>e==="∇"?111976:119749,"sans-serif-italic":e=>0,"sans-serif-bold-italic":e=>e==="∇"?112034:119807,monospace:e=>0},lowerCaseGreek:{normal:e=>0,bold:e=>119569,italic:e=>119627,"bold-italic":e=>e==="ϕ"?119678:119685,script:e=>0,"script-bold":e=>0,fraktur:e=>0,"fraktur-bold":e=>0,"double-struck":e=>0,"sans-serif":e=>119743,"sans-serif-bold":e=>119743,"sans-serif-italic":e=>0,"sans-serif-bold-italic":e=>119801,monospace:e=>0},varGreek:{normal:e=>0,bold:e=>bold[e]||-51,italic:e=>0,"bold-italic":e=>boldItalic[e]||58,script:e=>0,"script-bold":e=>0,fraktur:e=>0,"fraktur-bold":e=>0,"double-struck":e=>0,"sans-serif":e=>boldsf[e]||116,"sans-serif-bold":e=>boldsf[e]||116,"sans-serif-italic":e=>0,"sans-serif-bold-italic":e=>bisf[e]||174,monospace:e=>0},numeral:{normal:e=>0,bold:e=>120734,italic:e=>0,"bold-italic":e=>0,script:e=>0,"script-bold":e=>0,fraktur:e=>0,"fraktur-bold":e=>0,"double-struck":e=>120744,"sans-serif":e=>120754,"sans-serif-bold":e=>120764,"sans-serif-italic":e=>0,"sans-serif-bold-italic":e=>0,monospace:e=>120774}});const variantChar=(e,t)=>{const r=e.codePointAt(0);const n=64<r&&r<91?"upperCaseLatin":96<r&&r<123?"lowerCaseLatin":912<r&&r<938||e==="∇"?"upperCaseGreek":944<r&&r<970||e==="ϕ"?"lowerCaseGreek":120545<r&&r<120572||bold[e]?"varGreek":47<r&&r<58?"numeral":"other";return n==="other"?e:String.fromCodePoint(r+offset[n][t](e))};const smallCaps=Object.freeze({a:"ᴀ",b:"ʙ",c:"ᴄ",d:"ᴅ",e:"ᴇ",f:"ꜰ",g:"ɢ",h:"ʜ",i:"ɪ",j:"ᴊ",k:"ᴋ",l:"ʟ",m:"ᴍ",n:"ɴ",o:"ᴏ",p:"ᴘ",q:"ǫ",r:"ʀ",s:"s",t:"ᴛ",u:"ᴜ",v:"ᴠ",w:"ᴡ",x:"x",y:"ʏ",z:"ᴢ"});const numberRegEx$4=/^\d(?:[\d,.]*\d)?$/;const latinRegEx=/[A-Ba-z]/;const italicNumber=(e,t,r)=>{const n=new mathMLTree.MathNode(r,[e]);const a=new mathMLTree.MathNode("mstyle",[n]);a.style["font-style"]="italic";a.style["font-family"]="Cambria, 'Times New Roman', serif";if(t==="bold-italic"){a.style["font-weight"]="bold"}return a};defineFunctionBuilders({type:"mathord",mathmlBuilder(e,t){const r=makeText(e.text,e.mode,t);const n=r.text.codePointAt(0);const a=912<n&&n<938?"normal":"italic";const o=getVariant(e,t)||a;if(o==="script"){r.text=variantChar(r.text,o);return new mathMLTree.MathNode("mi",[r],[t.font])}else if(o!=="italic"){r.text=variantChar(r.text,o)}let i=new mathMLTree.MathNode("mi",[r]);if(o==="normal"){i.setAttribute("mathvariant","normal");if(r.text.length===1){i=new mathMLTree.MathNode("mrow",[i])}}return i}});defineFunctionBuilders({type:"textord",mathmlBuilder(e,t){let r=e.text;const n=r.codePointAt(0);if(t.fontFamily==="textsc"){if(96<n&&n<123){r=smallCaps[r]}}const a=makeText(r,e.mode,t);const o=getVariant(e,t)||"normal";let i;if(numberRegEx$4.test(e.text)){const t=e.mode==="text"?"mtext":"mn";if(o==="italic"||o==="bold-italic"){return italicNumber(a,o,t)}else{if(o!=="normal"){a.text=a.text.split("").map((e=>variantChar(e,o))).join("")}i=new mathMLTree.MathNode(t,[a])}}else if(e.mode==="text"){if(o!=="normal"){a.text=variantChar(a.text,o)}i=new mathMLTree.MathNode("mtext",[a])}else if(e.text==="\\prime"){i=new mathMLTree.MathNode("mo",[a]);i.classes.push("tml-prime")}else{const e=a.text;if(o!=="italic"){a.text=variantChar(a.text,o)}i=new mathMLTree.MathNode("mi",[a]);if(a.text===e&&latinRegEx.test(e)){i.setAttribute("mathvariant","italic")}}return i}});const cssSpace={"\\nobreak":"nobreak","\\allowbreak":"allowbreak"};const regularSpace={" ":{},"\\ ":{},"~":{className:"nobreak"},"\\space":{},"\\nobreakspace":{className:"nobreak"}};defineFunctionBuilders({type:"spacing",mathmlBuilder(e,t){let r;if(Object.prototype.hasOwnProperty.call(regularSpace,e.text)){r=new mathMLTree.MathNode("mtext",[new mathMLTree.TextNode(" ")])}else if(Object.prototype.hasOwnProperty.call(cssSpace,e.text)){r=new mathMLTree.MathNode("mo");if(e.text==="\\nobreak"){r.setAttribute("linebreak","nobreak")}}else{throw new ParseError(`Unknown type of space "${e.text}"`)}return r}});defineFunctionBuilders({type:"tag"});const textFontFamilies={"\\text":undefined,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm","\\textsc":"textsc"};const textFontWeights={"\\textbf":"textbf","\\textmd":"textmd"};const textFontShapes={"\\textit":"textit","\\textup":"textup"};const styleWithFont=(e,t)=>{const r=e.font;if(!r){return t}else if(textFontFamilies[r]){return t.withTextFontFamily(textFontFamilies[r])}else if(textFontWeights[r]){return t.withTextFontWeight(textFontWeights[r])}else{return t.withTextFontShape(textFontShapes[r])}};defineFunction({type:"text",names:["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textsc","\\textbf","\\textmd","\\textit","\\textup"],props:{numArgs:1,argTypes:["text"],allowedInArgument:true,allowedInText:true},handler({parser:e,funcName:t},r){const n=r[0];return{type:"text",mode:e.mode,body:ordargument(n),font:t}},mathmlBuilder(e,t){const r=styleWithFont(e,t);const n=buildExpressionRow(e.body,r);return consolidateText(n)}});defineFunction({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:true},handler(e,t,r){throw new ParseError("\\verb ended by end of line instead of matching delimiter")},mathmlBuilder(e,t){const r=new mathMLTree.TextNode(makeVerb(e));const n=new mathMLTree.MathNode("mtext",[r]);n.setAttribute("mathvariant","monospace");return n}});const makeVerb=e=>e.body.replace(/ /g,e.star?"␣":" ");const functions$1=_functions;class SourceLocation{constructor(e,t,r){this.lexer=e;this.start=t;this.end=r}static range(e,t){if(!t){return e&&e.loc}else if(!e||!e.loc||!t.loc||e.loc.lexer!==t.loc.lexer){return null}else{return new SourceLocation(e.loc.lexer,e.loc.start,t.loc.end)}}}class Token{constructor(e,t){this.text=e;this.loc=t}range(e,t){return new Token(t,SourceLocation.range(this,e))}}const spaceRegexString="[ \r\n\t]";const controlWordRegexString="\\\\[a-zA-Z@]+";const controlSymbolRegexString="\\\\[^\ud800-\udfff]";const controlWordWhitespaceRegexString=`(${controlWordRegexString})${spaceRegexString}*`;const controlSpaceRegexString="\\\\(\n|[ \r\t]+\n?)[ \r\t]*";const combiningDiacriticalMarkString="[̀-ͯ]";const combiningDiacriticalMarksEndRegex=new RegExp(`${combiningDiacriticalMarkString}+$`);const tokenRegexString=`(${spaceRegexString}+)|`+`${controlSpaceRegexString}|`+"([!-\\[\\]-‧‪-퟿豈-￿]"+`${combiningDiacriticalMarkString}*`+"|[\ud800-\udbff][\udc00-\udfff]"+`${combiningDiacriticalMarkString}*`+"|\\\\verb\\*([^]).*?\\4"+"|\\\\verb([^*a-zA-Z]).*?\\5"+`|${controlWordWhitespaceRegexString}`+`|${controlSymbolRegexString})`;class Lexer{constructor(e,t){this.input=e;this.settings=t;this.tokenRegex=new RegExp(tokenRegexString,"g");this.catcodes={"%":14,"~":13}}setCatcode(e,t){this.catcodes[e]=t}lex(){const e=this.input;const t=this.tokenRegex.lastIndex;if(t===e.length){return new Token("EOF",new SourceLocation(this,t,t))}const r=this.tokenRegex.exec(e);if(r===null||r.index!==t){throw new ParseError(`Unexpected character: '${e[t]}'`,new Token(e[t],new SourceLocation(this,t,t+1)))}const n=r[6]||r[3]||(r[2]?"\\ ":" ");if(this.catcodes[n]===14){const t=e.indexOf("\n",this.tokenRegex.lastIndex);if(t===-1){this.tokenRegex.lastIndex=e.length;if(this.settings.strict){throw new ParseError("% comment has no terminating newline; LaTeX would "+"fail because of commenting the end of math mode")}}else{this.tokenRegex.lastIndex=t+1}return this.lex()}return new Token(n,new SourceLocation(this,t,this.tokenRegex.lastIndex))}}class Namespace{constructor(e={},t={}){this.current=t;this.builtins=e;this.undefStack=[]}beginGroup(){this.undefStack.push({})}endGroup(){if(this.undefStack.length===0){throw new ParseError("Unbalanced namespace destruction: attempt "+"to pop global namespace; please report this as a bug")}const e=this.undefStack.pop();for(const t in e){if(Object.prototype.hasOwnProperty.call(e,t)){if(e[t]===undefined){delete this.current[t]}else{this.current[t]=e[t]}}}}has(e){return Object.prototype.hasOwnProperty.call(this.current,e)||Object.prototype.hasOwnProperty.call(this.builtins,e)}get(e){if(Object.prototype.hasOwnProperty.call(this.current,e)){return this.current[e]}else{return this.builtins[e]}}set(e,t,r=false){if(r){for(let t=0;t<this.undefStack.length;t++){delete this.undefStack[t][e]}if(this.undefStack.length>0){this.undefStack[this.undefStack.length-1][e]=t}}else{const t=this.undefStack[this.undefStack.length-1];if(t&&!Object.prototype.hasOwnProperty.call(t,e)){t[e]=this.current[e]}}this.current[e]=t}}const macros=_macros;defineMacro("\\noexpand",(function(e){const t=e.popToken();if(e.isExpandable(t.text)){t.noexpand=true;t.treatAsRelax=true}return{tokens:[t],numArgs:0}}));defineMacro("\\expandafter",(function(e){const t=e.popToken();e.expandOnce(true);return{tokens:[t],numArgs:0}}));defineMacro("\\@firstoftwo",(function(e){const t=e.consumeArgs(2);return{tokens:t[0],numArgs:0}}));defineMacro("\\@secondoftwo",(function(e){const t=e.consumeArgs(2);return{tokens:t[1],numArgs:0}}));defineMacro("\\@ifnextchar",(function(e){const t=e.consumeArgs(3);e.consumeSpaces();const r=e.future();if(t[0].length===1&&t[0][0].text===r.text){return{tokens:t[1],numArgs:0}}else{return{tokens:t[2],numArgs:0}}}));defineMacro("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}");defineMacro("\\TextOrMath",(function(e){const t=e.consumeArgs(2);if(e.mode==="text"){return{tokens:t[0],numArgs:0}}else{return{tokens:t[1],numArgs:0}}}));const stringFromArg=e=>{let t="";for(let r=e.length-1;r>-1;r--){t+=e[r].text}return t};const digitToNumber={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15};const nextCharNumber=e=>{const t=e.future().text;if(t==="EOF"){return[null,""]}return[digitToNumber[t.charAt(0)],t]};const appendCharNumbers=(e,t,r)=>{for(let n=1;n<t.length;n++){const a=digitToNumber[t.charAt(n)];e*=r;e+=a}return e};defineMacro("\\char",(function(e){let t=e.popToken();let r;let n="";if(t.text==="'"){r=8;t=e.popToken()}else if(t.text==='"'){r=16;t=e.popToken()}else if(t.text==="`"){t=e.popToken();if(t.text[0]==="\\"){n=t.text.charCodeAt(1)}else if(t.text==="EOF"){throw new ParseError("\\char` missing argument")}else{n=t.text.charCodeAt(0)}}else{r=10}if(r){let a=t.text;n=digitToNumber[a.charAt(0)];if(n==null||n>=r){throw new ParseError(`Invalid base-${r} digit ${t.text}`)}n=appendCharNumbers(n,a,r);let o;[o,a]=nextCharNumber(e);while(o!=null&&o<r){n*=r;n+=o;n=appendCharNumbers(n,a,r);e.popToken();[o,a]=nextCharNumber(e)}}return`\\@char{${n}}`}));defineMacro("\\surd","\\sqrt{\\vphantom{|}}");defineMacro("\\hbox","\\text{#1}");defineMacro("/","{⁄}");defineMacro("\\long","");defineMacro("\\bgroup","{");defineMacro("\\egroup","}");defineMacro("~","\\nobreakspace");defineMacro("\\lq","`");defineMacro("\\rq","'");defineMacro("\\aa","\\r a");defineMacro("\\Bbbk","\\Bbb{k}");defineMacro("\\mathstrut","\\vphantom{(}");defineMacro("\\underbar","\\underline{\\text{#1}}");defineMacro("\\vdots","{\\varvdots\\rule{0pt}{15pt}}");defineMacro("⋮","\\vdots");defineMacro("\\substack","\\begin{subarray}{c}#1\\end{subarray}");defineMacro("\\boxed","\\fbox{$\\displaystyle{#1}$}");defineMacro("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;");defineMacro("\\implies","\\DOTSB\\;\\Longrightarrow\\;");defineMacro("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");const dotsByToken={",":"\\dotsc","\\not":"\\dotsb","+":"\\dotsb","=":"\\dotsb","<":"\\dotsb",">":"\\dotsb","-":"\\dotsb","*":"\\dotsb",":":"\\dotsb","\\DOTSB":"\\dotsb","\\coprod":"\\dotsb","\\bigvee":"\\dotsb","\\bigwedge":"\\dotsb","\\biguplus":"\\dotsb","\\bigcap":"\\dotsb","\\bigcup":"\\dotsb","\\prod":"\\dotsb","\\sum":"\\dotsb","\\bigotimes":"\\dotsb","\\bigoplus":"\\dotsb","\\bigodot":"\\dotsb","\\bigsqcap":"\\dotsb","\\bigsqcup":"\\dotsb","\\And":"\\dotsb","\\longrightarrow":"\\dotsb","\\Longrightarrow":"\\dotsb","\\longleftarrow":"\\dotsb","\\Longleftarrow":"\\dotsb","\\longleftrightarrow":"\\dotsb","\\Longleftrightarrow":"\\dotsb","\\mapsto":"\\dotsb","\\longmapsto":"\\dotsb","\\hookrightarrow":"\\dotsb","\\doteq":"\\dotsb","\\mathbin":"\\dotsb","\\mathrel":"\\dotsb","\\relbar":"\\dotsb","\\Relbar":"\\dotsb","\\xrightarrow":"\\dotsb","\\xleftarrow":"\\dotsb","\\DOTSI":"\\dotsi","\\int":"\\dotsi","\\oint":"\\dotsi","\\iint":"\\dotsi","\\iiint":"\\dotsi","\\iiiint":"\\dotsi","\\idotsint":"\\dotsi","\\DOTSX":"\\dotsx"};defineMacro("\\dots",(function(e){let t="\\dotso";const r=e.expandAfterFuture().text;if(r in dotsByToken){t=dotsByToken[r]}else if(r.slice(0,4)==="\\not"){t="\\dotsb"}else if(r in symbols.math){if(["bin","rel"].includes(symbols.math[r].group)){t="\\dotsb"}}return t}));const spaceAfterDots={")":true,"]":true,"\\rbrack":true,"\\}":true,"\\rbrace":true,"\\rangle":true,"\\rceil":true,"\\rfloor":true,"\\rgroup":true,"\\rmoustache":true,"\\right":true,"\\bigr":true,"\\biggr":true,"\\Bigr":true,"\\Biggr":true,$:true,";":true,".":true,",":true};defineMacro("\\dotso",(function(e){const t=e.future().text;if(t in spaceAfterDots){return"\\ldots\\,"}else{return"\\ldots"}}));defineMacro("\\dotsc",(function(e){const t=e.future().text;if(t in spaceAfterDots&&t!==","){return"\\ldots\\,"}else{return"\\ldots"}}));defineMacro("\\cdots",(function(e){const t=e.future().text;if(t in spaceAfterDots){return"\\@cdots\\,"}else{return"\\@cdots"}}));defineMacro("\\dotsb","\\cdots");defineMacro("\\dotsm","\\cdots");defineMacro("\\dotsi","\\!\\cdots");defineMacro("\\idotsint","\\dotsi");defineMacro("\\dotsx","\\ldots\\,");defineMacro("\\DOTSI","\\relax");defineMacro("\\DOTSB","\\relax");defineMacro("\\DOTSX","\\relax");defineMacro("\\tmspace","\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");defineMacro("\\,","{\\tmspace+{3mu}{.1667em}}");defineMacro("\\thinspace","\\,");defineMacro("\\>","\\mskip{4mu}");defineMacro("\\:","{\\tmspace+{4mu}{.2222em}}");defineMacro("\\medspace","\\:");defineMacro("\\;","{\\tmspace+{5mu}{.2777em}}");defineMacro("\\thickspace","\\;");defineMacro("\\!","{\\tmspace-{3mu}{.1667em}}");defineMacro("\\negthinspace","\\!");defineMacro("\\negmedspace","{\\tmspace-{4mu}{.2222em}}");defineMacro("\\negthickspace","{\\tmspace-{5mu}{.277em}}");defineMacro("\\enspace","\\kern.5em ");defineMacro("\\enskip","\\hskip.5em\\relax");defineMacro("\\quad","\\hskip1em\\relax");defineMacro("\\qquad","\\hskip2em\\relax");defineMacro("\\tag","\\@ifstar\\tag@literal\\tag@paren");defineMacro("\\tag@paren","\\tag@literal{({#1})}");defineMacro("\\tag@literal",(e=>{if(e.macros.get("\\df@tag")){throw new ParseError("Multiple \\tag")}return"\\def\\df@tag{\\text{#1}}"}));defineMacro("\\bmod","\\mathbin{\\text{mod}}");defineMacro("\\pod","\\allowbreak"+"\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");defineMacro("\\pmod","\\pod{{\\rm mod}\\mkern6mu#1}");defineMacro("\\mod","\\allowbreak"+"\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}"+"{\\rm mod}\\,\\,#1");defineMacro("\\newline","\\\\\\relax");defineMacro("\\TeX","\\textrm{T}\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125em\\textrm{X}");defineMacro("\\LaTeX","\\textrm{L}\\kern-.35em\\raisebox{0.2em}{\\scriptstyle A}\\kern-.15em\\TeX");defineMacro("\\Temml","\\textrm{T}\\kern-0.2em\\lower{0.2em}\\textrm{E}\\kern-0.08em{\\textrm{M}\\kern-0.08em\\raise{0.2em}\\textrm{M}\\kern-0.08em\\textrm{L}}");defineMacro("\\hspace","\\@ifstar\\@hspacer\\@hspace");defineMacro("\\@hspace","\\hskip #1\\relax");defineMacro("\\@hspacer","\\rule{0pt}{0pt}\\hskip #1\\relax");defineMacro("\\colon",`\\mathpunct{\\char"3a}`);defineMacro("\\prescript","\\pres@cript{_{#1}^{#2}}{}{#3}");defineMacro("\\ordinarycolon",`\\char"3a`);defineMacro("\\vcentcolon","\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}}");defineMacro("\\coloneq",'\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"2212}');defineMacro("\\Coloneq",'\\mathrel{\\char"2237\\char"2212}');defineMacro("\\Eqqcolon",'\\mathrel{\\char"3d\\char"2237}');defineMacro("\\Eqcolon",'\\mathrel{\\char"2212\\char"2237}');defineMacro("\\colonapprox",'\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"2248}');defineMacro("\\Colonapprox",'\\mathrel{\\char"2237\\char"2248}');defineMacro("\\colonsim",'\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"223c}');defineMacro("\\Colonsim",'\\mathrel{\\raisebox{0.035em}{\\ordinarycolon}\\char"223c}');defineMacro("\\ratio","\\vcentcolon");defineMacro("\\coloncolon","\\dblcolon");defineMacro("\\colonequals","\\coloneqq");defineMacro("\\coloncolonequals","\\Coloneqq");defineMacro("\\equalscolon","\\eqqcolon");defineMacro("\\equalscoloncolon","\\Eqqcolon");defineMacro("\\colonminus","\\coloneq");defineMacro("\\coloncolonminus","\\Coloneq");defineMacro("\\minuscolon","\\eqcolon");defineMacro("\\minuscoloncolon","\\Eqcolon");defineMacro("\\coloncolonapprox","\\Colonapprox");defineMacro("\\coloncolonsim","\\Colonsim");defineMacro("\\notni","\\mathrel{\\char`∌}");defineMacro("\\limsup","\\DOTSB\\operatorname*{lim\\,sup}");defineMacro("\\liminf","\\DOTSB\\operatorname*{lim\\,inf}");defineMacro("\\injlim","\\DOTSB\\operatorname*{inj\\,lim}");defineMacro("\\projlim","\\DOTSB\\operatorname*{proj\\,lim}");defineMacro("\\varlimsup","\\DOTSB\\operatorname*{\\overline{\\text{lim}}}");defineMacro("\\varliminf","\\DOTSB\\operatorname*{\\underline{\\text{lim}}}");defineMacro("\\varinjlim","\\DOTSB\\operatorname*{\\underrightarrow{\\text{lim}}}");defineMacro("\\varprojlim","\\DOTSB\\operatorname*{\\underleftarrow{\\text{lim}}}");defineMacro("\\centerdot","{\\medspace\\rule{0.167em}{0.189em}\\medspace}");defineMacro("\\argmin","\\DOTSB\\operatorname*{arg\\,min}");defineMacro("\\argmax","\\DOTSB\\operatorname*{arg\\,max}");defineMacro("\\plim","\\DOTSB\\operatorname*{plim}");defineMacro("\\bra","\\mathinner{\\langle{#1}|}");defineMacro("\\ket","\\mathinner{|{#1}\\rangle}");defineMacro("\\braket","\\mathinner{\\langle{#1}\\rangle}");defineMacro("\\Bra","\\left\\langle#1\\right|");defineMacro("\\Ket","\\left|#1\\right\\rangle");const braketHelper=e=>t=>{const r=t.consumeArg().tokens;const n=t.consumeArg().tokens;const a=t.consumeArg().tokens;const o=t.consumeArg().tokens;const i=t.macros.get("|");const s=t.macros.get("\\|");t.macros.beginGroup();const l=t=>r=>{if(e){r.macros.set("|",i);if(a.length){r.macros.set("\\|",s)}}let o=t;if(!t&&a.length){const e=r.future();if(e.text==="|"){r.popToken();o=true}}return{tokens:o?a:n,numArgs:0}};t.macros.set("|",l(false));if(a.length){t.macros.set("\\|",l(true))}const u=t.consumeArg().tokens;const c=t.expandTokens([...o,...u,...r]);t.macros.endGroup();return{tokens:c.reverse(),numArgs:0}};defineMacro("\\bra@ket",braketHelper(false));defineMacro("\\bra@set",braketHelper(true));defineMacro("\\Braket","\\bra@ket{\\left\\langle}"+"{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");defineMacro("\\Set","\\bra@set{\\left\\{\\:}"+"{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");defineMacro("\\set","\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");defineMacro("\\angln","{\\angl n}");defineMacro("\\odv","\\@ifstar\\odv@next\\odv@numerator");defineMacro("\\odv@numerator","\\frac{\\mathrm{d}#1}{\\mathrm{d}#2}");defineMacro("\\odv@next","\\frac{\\mathrm{d}}{\\mathrm{d}#2}#1");defineMacro("\\pdv","\\@ifstar\\pdv@next\\pdv@numerator");const pdvHelper=e=>{const t=e[0][0].text;const r=stringFromArg(e[1]).split(",");const n=String(r.length);const a=n==="1"?"\\partial":`\\partial^${n}`;let o="";r.map((e=>{o+="\\partial "+e.trim()+"\\,"}));return[t,a,o.replace(/\\,$/,"")]};defineMacro("\\pdv@numerator",(function(e){const[t,r,n]=pdvHelper(e.consumeArgs(2));return`\\frac{${r} ${t}}{${n}}`}));defineMacro("\\pdv@next",(function(e){const[t,r,n]=pdvHelper(e.consumeArgs(2));return`\\frac{${r}}{${n}} ${t}`}));defineMacro("\\upalpha","\\up@greek{\\alpha}");defineMacro("\\upbeta","\\up@greek{\\beta}");defineMacro("\\upgamma","\\up@greek{\\gamma}");defineMacro("\\updelta","\\up@greek{\\delta}");defineMacro("\\upepsilon","\\up@greek{\\epsilon}");defineMacro("\\upzeta","\\up@greek{\\zeta}");defineMacro("\\upeta","\\up@greek{\\eta}");defineMacro("\\uptheta","\\up@greek{\\theta}");defineMacro("\\upiota","\\up@greek{\\iota}");defineMacro("\\upkappa","\\up@greek{\\kappa}");defineMacro("\\uplambda","\\up@greek{\\lambda}");defineMacro("\\upmu","\\up@greek{\\mu}");defineMacro("\\upnu","\\up@greek{\\nu}");defineMacro("\\upxi","\\up@greek{\\xi}");defineMacro("\\upomicron","\\up@greek{\\omicron}");defineMacro("\\uppi","\\up@greek{\\pi}");defineMacro("\\upalpha","\\up@greek{\\alpha}");defineMacro("\\uprho","\\up@greek{\\rho}");defineMacro("\\upsigma","\\up@greek{\\sigma}");defineMacro("\\uptau","\\up@greek{\\tau}");defineMacro("\\upupsilon","\\up@greek{\\upsilon}");defineMacro("\\upphi","\\up@greek{\\phi}");defineMacro("\\upchi","\\up@greek{\\chi}");defineMacro("\\uppsi","\\up@greek{\\psi}");defineMacro("\\upomega","\\up@greek{\\omega}");defineMacro("\\invamp",'\\mathbin{\\char"214b}');defineMacro("\\parr",'\\mathbin{\\char"214b}');defineMacro("\\with",'\\mathbin{\\char"26}');defineMacro("\\multimapinv",'\\mathrel{\\char"27dc}');defineMacro("\\multimapboth",'\\mathrel{\\char"29df}');defineMacro("\\scoh",'{\\mkern5mu\\char"2322\\mkern5mu}');defineMacro("\\sincoh",'{\\mkern5mu\\char"2323\\mkern5mu}');defineMacro("\\coh",`{\\mkern5mu\\rule{}{0.7em}\\mathrlap{\\smash{\\raise2mu{\\char"2322}}}\n{\\smash{\\lower4mu{\\char"2323}}}\\mkern5mu}`);defineMacro("\\incoh",`{\\mkern5mu\\rule{}{0.7em}\\mathrlap{\\smash{\\raise2mu{\\char"2323}}}\n{\\smash{\\lower4mu{\\char"2322}}}\\mkern5mu}`);defineMacro("\\standardstate","\\text{\\tiny\\char`⦵}");defineMacro("\\ce",(function(e){return chemParse(e.consumeArgs(1)[0],"ce")}));defineMacro("\\pu",(function(e){return chemParse(e.consumeArgs(1)[0],"pu")}));defineMacro("\\uniDash",`{\\rule{0.672em}{0.06em}}`);defineMacro("\\triDash",`{\\rule{0.15em}{0.06em}\\kern2mu\\rule{0.15em}{0.06em}\\kern2mu\\rule{0.15em}{0.06em}}`);defineMacro("\\tripleDash",`\\kern0.075em\\raise0.25em{\\triDash}\\kern0.075em`);defineMacro("\\tripleDashOverLine",`\\kern0.075em\\mathrlap{\\raise0.125em{\\uniDash}}\\raise0.34em{\\triDash}\\kern0.075em`);defineMacro("\\tripleDashOverDoubleLine",`\\kern0.075em\\mathrlap{\\mathrlap{\\raise0.48em{\\triDash}}\\raise0.27em{\\uniDash}}{\\raise0.05em{\\uniDash}}\\kern0.075em`);defineMacro("\\tripleDashBetweenDoubleLine",`\\kern0.075em\\mathrlap{\\mathrlap{\\raise0.48em{\\uniDash}}\\raise0.27em{\\triDash}}{\\raise0.05em{\\uniDash}}\\kern0.075em`);var chemParse=function(e,t){var r="";var n=e.length&&e[e.length-1].loc.start;for(var a=e.length-1;a>=0;a--){if(e[a].loc.start>n){r+=" ";n=e[a].loc.start}r+=e[a].text;n+=e[a].text.length}var o=texify.go(mhchemParser.go(r,t));return o};var mhchemParser={go:function(e,t){if(!e){return[]}if(t===undefined){t="ce"}var r="0";var n={};n["parenthesisLevel"]=0;e=e.replace(/\n/g," ");e=e.replace(/[\u2212\u2013\u2014\u2010]/g,"-");e=e.replace(/[\u2026]/g,"...");var a;var o=10;var i=[];while(true){if(a!==e){o=10;a=e}else{o--}var s=mhchemParser.stateMachines[t];var l=s.transitions[r]||s.transitions["*"];e:for(var u=0;u<l.length;u++){var c=mhchemParser.patterns.match_(l[u].pattern,e);if(c){var d=l[u].task;for(var m=0;m<d.action_.length;m++){var p;if(s.actions[d.action_[m].type_]){p=s.actions[d.action_[m].type_](n,c.match_,d.action_[m].option)}else if(mhchemParser.actions[d.action_[m].type_]){p=mhchemParser.actions[d.action_[m].type_](n,c.match_,d.action_[m].option)}else{throw["MhchemBugA","mhchem bug A. Please report. ("+d.action_[m].type_+")"]}mhchemParser.concatArray(i,p)}r=d.nextState||r;if(e.length>0){if(!d.revisit){e=c.remainder}if(!d.toContinue){break e}}else{return i}}}if(o<=0){throw["MhchemBugU","mhchem bug U. Please report."]}}},concatArray:function(e,t){if(t){if(Array.isArray(t)){for(var r=0;r<t.length;r++){e.push(t[r])}}else{e.push(t)}}},patterns:{patterns:{empty:/^$/,else:/^./,else2:/^./,space:/^\s/,"space A":/^\s(?=[A-Z\\$])/,space$:/^\s$/,"a-z":/^[a-z]/,x:/^x/,x$:/^x$/,i$:/^i$/,letters:/^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,"\\greek":/^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,"one lowercase latin letter $":/^(?:([a-z])(?:$|[^a-zA-Z]))$/,"$one lowercase latin letter$ $":/^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,"one lowercase greek letter $":/^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,digits:/^[0-9]+/,"-9.,9":/^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,"-9.,9 no missing 0":/^[+\-]?[0-9]+(?:[.,][0-9]+)?/,"(-)(9.,9)(e)(99)":function(e){var t=e.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);if(t&&t[0]){return{match_:t.splice(1),remainder:e.substr(t[0].length)}}return null},"(-)(9)^(-9)":function(e){var t=e.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);if(t&&t[0]){return{match_:t.splice(1),remainder:e.substr(t[0].length)}}return null},"state of aggregation $":function(e){var t=mhchemParser.patterns.findObserveGroups(e,"",/^\([a-z]{1,3}(?=[\),])/,")","");if(t&&t.remainder.match(/^($|[\s,;\)\]\}])/)){return t}var r=e.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/);if(r){return{match_:r[0],remainder:e.substr(r[0].length)}}return null},"_{(state of aggregation)}$":/^_\{(\([a-z]{1,3}\))\}/,"{[(":/^(?:\\\{|\[|\()/,")]}":/^(?:\)|\]|\\\})/,", ":/^[,;]\s*/,",":/^[,;]/,".":/^[.]/,". ":/^([.\u22C5\u00B7\u2022])\s*/,"...":/^\.\.\.(?=$|[^.])/,"* ":/^([*])\s*/,"^{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"^{","","","}")},"^($...$)":function(e){return mhchemParser.patterns.findObserveGroups(e,"^","$","$","")},"^a":/^\^([0-9]+|[^\\_])/,"^\\x{}{}":function(e){return mhchemParser.patterns.findObserveGroups(e,"^",/^\\[a-zA-Z]+\{/,"}","","","{","}","",true)},"^\\x{}":function(e){return mhchemParser.patterns.findObserveGroups(e,"^",/^\\[a-zA-Z]+\{/,"}","")},"^\\x":/^\^(\\[a-zA-Z]+)\s*/,"^(-1)":/^\^(-?\d+)/,"'":/^'/,"_{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"_{","","","}")},"_($...$)":function(e){return mhchemParser.patterns.findObserveGroups(e,"_","$","$","")},_9:/^_([+\-]?[0-9]+|[^\\])/,"_\\x{}{}":function(e){return mhchemParser.patterns.findObserveGroups(e,"_",/^\\[a-zA-Z]+\{/,"}","","","{","}","",true)},"_\\x{}":function(e){return mhchemParser.patterns.findObserveGroups(e,"_",/^\\[a-zA-Z]+\{/,"}","")},"_\\x":/^_(\\[a-zA-Z]+)\s*/,"^_":/^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,"{}":/^\{\}/,"{...}":function(e){return mhchemParser.patterns.findObserveGroups(e,"","{","}","")},"{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"{","","","}")},"$...$":function(e){return mhchemParser.patterns.findObserveGroups(e,"","$","$","")},"${(...)}$":function(e){return mhchemParser.patterns.findObserveGroups(e,"${","","","}$")},"$(...)$":function(e){return mhchemParser.patterns.findObserveGroups(e,"$","","","$")},"=<>":/^[=<>]/,"#":/^[#\u2261]/,"+":/^\+/,"-$":/^-(?=[\s_},;\]/]|$|\([a-z]+\))/,"-9":/^-(?=[0-9])/,"- orbital overlap":/^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,"-":/^-/,"pm-operator":/^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,operator:/^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,arrowUpDown:/^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,"\\bond{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\bond{","","","}")},"->":/^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,CMT:/^[CMT](?=\[)/,"[(...)]":function(e){return mhchemParser.patterns.findObserveGroups(e,"[","","","]")},"1st-level escape":/^(&|\\\\|\\hline)\s*/,"\\,":/^(?:\\[,\ ;:])/,"\\x{}{}":function(e){return mhchemParser.patterns.findObserveGroups(e,"",/^\\[a-zA-Z]+\{/,"}","","","{","}","",true)},"\\x{}":function(e){return mhchemParser.patterns.findObserveGroups(e,"",/^\\[a-zA-Z]+\{/,"}","")},"\\ca":/^\\ca(?:\s+|(?![a-zA-Z]))/,"\\x":/^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,orbital:/^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,others:/^[\/~|]/,"\\frac{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\frac{","","","}","{","","","}")},"\\overset{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\overset{","","","}","{","","","}")},"\\underset{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\underset{","","","}","{","","","}")},"\\underbrace{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\underbrace{","","","}_","{","","","}")},"\\color{(...)}0":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\color{","","","}")},"\\color{(...)}{(...)}1":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\color{","","","}","{","","","}")},"\\color(...){(...)}2":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\color","\\","",/^(?=\{)/,"{","","","}")},"\\ce{(...)}":function(e){return mhchemParser.patterns.findObserveGroups(e,"\\ce{","","","}")},oxidation$:/^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,"d-oxidation$":/^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,"roman numeral":/^[IVX]+/,"1/2$":/^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,amount:function(e){var t;t=e.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/);if(t){return{match_:t[0],remainder:e.substr(t[0].length)}}var r=mhchemParser.patterns.findObserveGroups(e,"","$","$","");if(r){t=r.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/);if(t){return{match_:t[0],remainder:e.substr(t[0].length)}}}return null},amount2:function(e){return this["amount"](e)},"(KV letters),":/^(?:[A-Z][a-z]{0,2}|i)(?=,)/,formula$:function(e){if(e.match(/^\([a-z]+\)$/)){return null}var t=e.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);if(t){return{match_:t[0],remainder:e.substr(t[0].length)}}return null},uprightEntities:/^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,"/":/^\s*(\/)\s*/,"//":/^\s*(\/\/)\s*/,"*":/^\s*[*.]\s*/},findObserveGroups:function(e,t,r,n,a,o,i,s,l,u){var c=function(e,t){if(typeof t==="string"){if(e.indexOf(t)!==0){return null}return t}else{var r=e.match(t);if(!r){return null}return r[0]}};var d=function(e,t,r){var n=0;while(t<e.length){var a=e.charAt(t);var o=c(e.substr(t),r);if(o!==null&&n===0){return{endMatchBegin:t,endMatchEnd:t+o.length}}else if(a==="{"){n++}else if(a==="}"){if(n===0){throw["ExtraCloseMissingOpen","Extra close brace or missing open brace"]}else{n--}}t++}if(n>0){return null}return null};var m=c(e,t);if(m===null){return null}e=e.substr(m.length);m=c(e,r);if(m===null){return null}var p=d(e,m.length,n||a);if(p===null){return null}var f=e.substring(0,n?p.endMatchEnd:p.endMatchBegin);if(!(o||i)){return{match_:f,remainder:e.substr(p.endMatchEnd)}}else{var h=this.findObserveGroups(e.substr(p.endMatchEnd),o,i,s,l);if(h===null){return null}var g=[f,h.match_];return{match_:u?g.join(""):g,remainder:h.remainder}}},match_:function(e,t){var r=mhchemParser.patterns.patterns[e];if(r===undefined){throw["MhchemBugP","mhchem bug P. Please report. ("+e+")"]}else if(typeof r==="function"){return mhchemParser.patterns.patterns[e](t)}else{var n=t.match(r);if(n){var a;if(n[2]){a=[n[1],n[2]]}else if(n[1]){a=n[1]}else{a=n[0]}return{match_:a,remainder:t.substr(n[0].length)}}return null}}},actions:{"a=":function(e,t){e.a=(e.a||"")+t},"b=":function(e,t){e.b=(e.b||"")+t},"p=":function(e,t){e.p=(e.p||"")+t},"o=":function(e,t){e.o=(e.o||"")+t},"q=":function(e,t){e.q=(e.q||"")+t},"d=":function(e,t){e.d=(e.d||"")+t},"rm=":function(e,t){e.rm=(e.rm||"")+t},"text=":function(e,t){e.text_=(e.text_||"")+t},insert:function(e,t,r){return{type_:r}},"insert+p1":function(e,t,r){return{type_:r,p1:t}},"insert+p1+p2":function(e,t,r){return{type_:r,p1:t[0],p2:t[1]}},copy:function(e,t){return t},rm:function(e,t){return{type_:"rm",p1:t||""}},text:function(e,t){return mhchemParser.go(t,"text")},"{text}":function(e,t){var r=["{"];mhchemParser.concatArray(r,mhchemParser.go(t,"text"));r.push("}");return r},"tex-math":function(e,t){return mhchemParser.go(t,"tex-math")},"tex-math tight":function(e,t){return mhchemParser.go(t,"tex-math tight")},bond:function(e,t,r){return{type_:"bond",kind_:r||t}},"color0-output":function(e,t){return{type_:"color0",color:t[0]}},ce:function(e,t){return mhchemParser.go(t)},"1/2":function(e,t){var r=[];if(t.match(/^[+\-]/)){r.push(t.substr(0,1));t=t.substr(1)}var n=t.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);n[1]=n[1].replace(/\$/g,"");r.push({type_:"frac",p1:n[1],p2:n[2]});if(n[3]){n[3]=n[3].replace(/\$/g,"");r.push({type_:"tex-math",p1:n[3]})}return r},"9,9":function(e,t){return mhchemParser.go(t,"9,9")}},createTransitions:function(e){var t,r;var n;var a;var o={};for(t in e){for(r in e[t]){n=r.split("|");e[t][r].stateArray=n;for(a=0;a<n.length;a++){o[n[a]]=[]}}}for(t in e){for(r in e[t]){n=e[t][r].stateArray||[];for(a=0;a<n.length;a++){var i=e[t][r];if(i.action_){i.action_=[].concat(i.action_);for(var s=0;s<i.action_.length;s++){if(typeof i.action_[s]==="string"){i.action_[s]={type_:i.action_[s]}}}}else{i.action_=[]}var l=t.split("|");for(var u=0;u<l.length;u++){if(n[a]==="*"){for(var c in o){o[c].push({pattern:l[u],task:i})}}else{o[n[a]].push({pattern:l[u],task:i})}}}}}return o},stateMachines:{}};mhchemParser.stateMachines={ce:{transitions:mhchemParser.createTransitions({empty:{"*":{action_:"output"}},else:{"0|1|2":{action_:"beginsWithBond=false",revisit:true,toContinue:true}},oxidation$:{0:{action_:"oxidation-output"}},CMT:{r:{action_:"rdt=",nextState:"rt"},rd:{action_:"rqt=",nextState:"rdt"}},arrowUpDown:{"0|1|2|as":{action_:["sb=false","output","operator"],nextState:"1"}},uprightEntities:{"0|1|2":{action_:["o=","output"],nextState:"1"}},orbital:{"0|1|2|3":{action_:"o=",nextState:"o"}},"->":{"0|1|2|3":{action_:"r=",nextState:"r"},"a|as":{action_:["output","r="],nextState:"r"},"*":{action_:["output","r="],nextState:"r"}},"+":{o:{action_:"d= kv",nextState:"d"},"d|D":{action_:"d=",nextState:"d"},q:{action_:"d=",nextState:"qd"},"qd|qD":{action_:"d=",nextState:"qd"},dq:{action_:["output","d="],nextState:"d"},3:{action_:["sb=false","output","operator"],nextState:"0"}},amount:{"0|2":{action_:"a=",nextState:"a"}},"pm-operator":{"0|1|2|a|as":{action_:["sb=false","output",{type_:"operator",option:"\\pm"}],nextState:"0"}},operator:{"0|1|2|a|as":{action_:["sb=false","output","operator"],nextState:"0"}},"-$":{"o|q":{action_:["charge or bond","output"],nextState:"qd"},d:{action_:"d=",nextState:"d"},D:{action_:["output",{type_:"bond",option:"-"}],nextState:"3"},q:{action_:"d=",nextState:"qd"},qd:{action_:"d=",nextState:"qd"},"qD|dq":{action_:["output",{type_:"bond",option:"-"}],nextState:"3"}},"-9":{"3|o":{action_:["output",{type_:"insert",option:"hyphen"}],nextState:"3"}},"- orbital overlap":{o:{action_:["output",{type_:"insert",option:"hyphen"}],nextState:"2"},d:{action_:["output",{type_:"insert",option:"hyphen"}],nextState:"2"}},"-":{"0|1|2":{action_:[{type_:"output",option:1},"beginsWithBond=true",{type_:"bond",option:"-"}],nextState:"3"},3:{action_:{type_:"bond",option:"-"}},a:{action_:["output",{type_:"insert",option:"hyphen"}],nextState:"2"},as:{action_:[{type_:"output",option:2},{type_:"bond",option:"-"}],nextState:"3"},b:{action_:"b="},o:{action_:{type_:"- after o/d",option:false},nextState:"2"},q:{action_:{type_:"- after o/d",option:false},nextState:"2"},"d|qd|dq":{action_:{type_:"- after o/d",option:true},nextState:"2"},"D|qD|p":{action_:["output",{type_:"bond",option:"-"}],nextState:"3"}},amount2:{"1|3":{action_:"a=",nextState:"a"}},letters:{"0|1|2|3|a|as|b|p|bp|o":{action_:"o=",nextState:"o"},"q|dq":{action_:["output","o="],nextState:"o"},"d|D|qd|qD":{action_:"o after d",nextState:"o"}},digits:{o:{action_:"q=",nextState:"q"},"d|D":{action_:"q=",nextState:"dq"},q:{action_:["output","o="],nextState:"o"},a:{action_:"o=",nextState:"o"}},"space A":{"b|p|bp":{}},space:{a:{nextState:"as"},0:{action_:"sb=false"},"1|2":{action_:"sb=true"},"r|rt|rd|rdt|rdq":{action_:"output",nextState:"0"},"*":{action_:["output","sb=true"],nextState:"1"}},"1st-level escape":{"1|2":{action_:["output",{type_:"insert+p1",option:"1st-level escape"}]},"*":{action_:["output",{type_:"insert+p1",option:"1st-level escape"}],nextState:"0"}},"[(...)]":{"r|rt":{action_:"rd=",nextState:"rd"},"rd|rdt":{action_:"rq=",nextState:"rdq"}},"...":{"o|d|D|dq|qd|qD":{action_:["output",{type_:"bond",option:"..."}],nextState:"3"},"*":{action_:[{type_:"output",option:1},{type_:"insert",option:"ellipsis"}],nextState:"1"}},". |* ":{"*":{action_:["output",{type_:"insert",option:"addition compound"}],nextState:"1"}},"state of aggregation $":{"*":{action_:["output","state of aggregation"],nextState:"1"}},"{[(":{"a|as|o":{action_:["o=","output","parenthesisLevel++"],nextState:"2"},"0|1|2|3":{action_:["o=","output","parenthesisLevel++"],nextState:"2"},"*":{action_:["output","o=","output","parenthesisLevel++"],nextState:"2"}},")]}":{"0|1|2|3|b|p|bp|o":{action_:["o=","parenthesisLevel--"],nextState:"o"},"a|as|d|D|q|qd|qD|dq":{action_:["output","o=","parenthesisLevel--"],nextState:"o"}},", ":{"*":{action_:["output","comma"],nextState:"0"}},"^_":{"*":{}},"^{(...)}|^($...$)":{"0|1|2|as":{action_:"b=",nextState:"b"},p:{action_:"b=",nextState:"bp"},"3|o":{action_:"d= kv",nextState:"D"},q:{action_:"d=",nextState:"qD"},"d|D|qd|qD|dq":{action_:["output","d="],nextState:"D"}},"^a|^\\x{}{}|^\\x{}|^\\x|'":{"0|1|2|as":{action_:"b=",nextState:"b"},p:{action_:"b=",nextState:"bp"},"3|o":{action_:"d= kv",nextState:"d"},q:{action_:"d=",nextState:"qd"},"d|qd|D|qD":{action_:"d="},dq:{action_:["output","d="],nextState:"d"}},"_{(state of aggregation)}$":{"d|D|q|qd|qD|dq":{action_:["output","q="],nextState:"q"}},"_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x":{"0|1|2|as":{action_:"p=",nextState:"p"},b:{action_:"p=",nextState:"bp"},"3|o":{action_:"q=",nextState:"q"},"d|D":{action_:"q=",nextState:"dq"},"q|qd|qD|dq":{action_:["output","q="],nextState:"q"}},"=<>":{"0|1|2|3|a|as|o|q|d|D|qd|qD|dq":{action_:[{type_:"output",option:2},"bond"],nextState:"3"}},"#":{"0|1|2|3|a|as|o":{action_:[{type_:"output",option:2},{type_:"bond",option:"#"}],nextState:"3"}},"{}":{"*":{action_:{type_:"output",option:1},nextState:"1"}},"{...}":{"0|1|2|3|a|as|b|p|bp":{action_:"o=",nextState:"o"},"o|d|D|q|qd|qD|dq":{action_:["output","o="],nextState:"o"}},"$...$":{a:{action_:"a="},"0|1|2|3|as|b|p|bp|o":{action_:"o=",nextState:"o"},"as|o":{action_:"o="},"q|d|D|qd|qD|dq":{action_:["output","o="],nextState:"o"}},"\\bond{(...)}":{"*":{action_:[{type_:"output",option:2},"bond"],nextState:"3"}},"\\frac{(...)}":{"*":{action_:[{type_:"output",option:1},"frac-output"],nextState:"3"}},"\\overset{(...)}":{"*":{action_:[{type_:"output",option:2},"overset-output"],nextState:"3"}},"\\underset{(...)}":{"*":{action_:[{type_:"output",option:2},"underset-output"],nextState:"3"}},"\\underbrace{(...)}":{"*":{action_:[{type_:"output",option:2},"underbrace-output"],nextState:"3"}},"\\color{(...)}{(...)}1|\\color(...){(...)}2":{"*":{action_:[{type_:"output",option:2},"color-output"],nextState:"3"}},"\\color{(...)}0":{"*":{action_:[{type_:"output",option:2},"color0-output"]}},"\\ce{(...)}":{"*":{action_:[{type_:"output",option:2},"ce"],nextState:"3"}},"\\,":{"*":{action_:[{type_:"output",option:1},"copy"],nextState:"1"}},"\\x{}{}|\\x{}|\\x":{"0|1|2|3|a|as|b|p|bp|o|c0":{action_:["o=","output"],nextState:"3"},"*":{action_:["output","o=","output"],nextState:"3"}},others:{"*":{action_:[{type_:"output",option:1},"copy"],nextState:"3"}},else2:{a:{action_:"a to o",nextState:"o",revisit:true},as:{action_:["output","sb=true"],nextState:"1",revisit:true},"r|rt|rd|rdt|rdq":{action_:["output"],nextState:"0",revisit:true},"*":{action_:["output","copy"],nextState:"3"}}}),actions:{"o after d":function(e,t){var r;if((e.d||"").match(/^[0-9]+$/)){var n=e.d;e.d=undefined;r=this["output"](e);e.b=n}else{r=this["output"](e)}mhchemParser.actions["o="](e,t);return r},"d= kv":function(e,t){e.d=t;e.dType="kv"},"charge or bond":function(e,t){if(e["beginsWithBond"]){var r=[];mhchemParser.concatArray(r,this["output"](e));mhchemParser.concatArray(r,mhchemParser.actions["bond"](e,t,"-"));return r}else{e.d=t}},"- after o/d":function(e,t,r){var n=mhchemParser.patterns.match_("orbital",e.o||"");var a=mhchemParser.patterns.match_("one lowercase greek letter $",e.o||"");var o=mhchemParser.patterns.match_("one lowercase latin letter $",e.o||"");var i=mhchemParser.patterns.match_("$one lowercase latin letter$ $",e.o||"");var s=t==="-"&&(n&&n.remainder===""||a||o||i);if(s&&!e.a&&!e.b&&!e.p&&!e.d&&!e.q&&!n&&o){e.o="$"+e.o+"$"}var l=[];if(s){mhchemParser.concatArray(l,this["output"](e));l.push({type_:"hyphen"})}else{n=mhchemParser.patterns.match_("digits",e.d||"");if(r&&n&&n.remainder===""){mhchemParser.concatArray(l,mhchemParser.actions["d="](e,t));mhchemParser.concatArray(l,this["output"](e))}else{mhchemParser.concatArray(l,this["output"](e));mhchemParser.concatArray(l,mhchemParser.actions["bond"](e,t,"-"))}}return l},"a to o":function(e){e.o=e.a;e.a=undefined},"sb=true":function(e){e.sb=true},"sb=false":function(e){e.sb=false},"beginsWithBond=true":function(e){e["beginsWithBond"]=true},"beginsWithBond=false":function(e){e["beginsWithBond"]=false},"parenthesisLevel++":function(e){e["parenthesisLevel"]++},"parenthesisLevel--":function(e){e["parenthesisLevel"]--},"state of aggregation":function(e,t){return{type_:"state of aggregation",p1:mhchemParser.go(t,"o")}},comma:function(e,t){var r=t.replace(/\s*$/,"");var n=r!==t;if(n&&e["parenthesisLevel"]===0){return{type_:"comma enumeration L",p1:r}}else{return{type_:"comma enumeration M",p1:r}}},output:function(e,t,r){var n;if(!e.r){n=[];if(!e.a&&!e.b&&!e.p&&!e.o&&!e.q&&!e.d&&!r);else{if(e.sb){n.push({type_:"entitySkip"})}if(!e.o&&!e.q&&!e.d&&!e.b&&!e.p&&r!==2){e.o=e.a;e.a=undefined}else if(!e.o&&!e.q&&!e.d&&(e.b||e.p)){e.o=e.a;e.d=e.b;e.q=e.p;e.a=e.b=e.p=undefined}else{if(e.o&&e.dType==="kv"&&mhchemParser.patterns.match_("d-oxidation$",e.d||"")){e.dType="oxidation"}else if(e.o&&e.dType==="kv"&&!e.q){e.dType=undefined}}n.push({type_:"chemfive",a:mhchemParser.go(e.a,"a"),b:mhchemParser.go(e.b,"bd"),p:mhchemParser.go(e.p,"pq"),o:mhchemParser.go(e.o,"o"),q:mhchemParser.go(e.q,"pq"),d:mhchemParser.go(e.d,e.dType==="oxidation"?"oxidation":"bd"),dType:e.dType})}}else{var a;if(e.rdt==="M"){a=mhchemParser.go(e.rd,"tex-math")}else if(e.rdt==="T"){a=[{type_:"text",p1:e.rd||""}]}else{a=mhchemParser.go(e.rd)}var o;if(e.rqt==="M"){o=mhchemParser.go(e.rq,"tex-math")}else if(e.rqt==="T"){o=[{type_:"text",p1:e.rq||""}]}else{o=mhchemParser.go(e.rq)}n={type_:"arrow",r:e.r,rd:a,rq:o}}for(var i in e){if(i!=="parenthesisLevel"&&i!=="beginsWithBond"){delete e[i]}}return n},"oxidation-output":function(e,t){var r=["{"];mhchemParser.concatArray(r,mhchemParser.go(t,"oxidation"));r.push("}");return r},"frac-output":function(e,t){return{type_:"frac-ce",p1:mhchemParser.go(t[0]),p2:mhchemParser.go(t[1])}},"overset-output":function(e,t){return{type_:"overset",p1:mhchemParser.go(t[0]),p2:mhchemParser.go(t[1])}},"underset-output":function(e,t){return{type_:"underset",p1:mhchemParser.go(t[0]),p2:mhchemParser.go(t[1])}},"underbrace-output":function(e,t){return{type_:"underbrace",p1:mhchemParser.go(t[0]),p2:mhchemParser.go(t[1])}},"color-output":function(e,t){return{type_:"color",color1:t[0],color2:mhchemParser.go(t[1])}},"r=":function(e,t){e.r=t},"rdt=":function(e,t){e.rdt=t},"rd=":function(e,t){e.rd=t},"rqt=":function(e,t){e.rqt=t},"rq=":function(e,t){e.rq=t},operator:function(e,t,r){return{type_:"operator",kind_:r||t}}}},a:{transitions:mhchemParser.createTransitions({empty:{"*":{}},"1/2$":{0:{action_:"1/2"}},else:{0:{nextState:"1",revisit:true}},"$(...)$":{"*":{action_:"tex-math tight",nextState:"1"}},",":{"*":{action_:{type_:"insert",option:"commaDecimal"}}},else2:{"*":{action_:"copy"}}}),actions:{}},o:{transitions:mhchemParser.createTransitions({empty:{"*":{}},"1/2$":{0:{action_:"1/2"}},else:{0:{nextState:"1",revisit:true}},letters:{"*":{action_:"rm"}},"\\ca":{"*":{action_:{type_:"insert",option:"circa"}}},"\\x{}{}|\\x{}|\\x":{"*":{action_:"copy"}},"${(...)}$|$(...)$":{"*":{action_:"tex-math"}},"{(...)}":{"*":{action_:"{text}"}},else2:{"*":{action_:"copy"}}}),actions:{}},text:{transitions:mhchemParser.createTransitions({empty:{"*":{action_:"output"}},"{...}":{"*":{action_:"text="}},"${(...)}$|$(...)$":{"*":{action_:"tex-math"}},"\\greek":{"*":{action_:["output","rm"]}},"\\,|\\x{}{}|\\x{}|\\x":{"*":{action_:["output","copy"]}},else:{"*":{action_:"text="}}}),actions:{output:function(e){if(e.text_){var t={type_:"text",p1:e.text_};for(var r in e){delete e[r]}return t}}}},pq:{transitions:mhchemParser.createTransitions({empty:{"*":{}},"state of aggregation $":{"*":{action_:"state of aggregation"}},i$:{0:{nextState:"!f",revisit:true}},"(KV letters),":{0:{action_:"rm",nextState:"0"}},formula$:{0:{nextState:"f",revisit:true}},"1/2$":{0:{action_:"1/2"}},else:{0:{nextState:"!f",revisit:true}},"${(...)}$|$(...)$":{"*":{action_:"tex-math"}},"{(...)}":{"*":{action_:"text"}},"a-z":{f:{action_:"tex-math"}},letters:{"*":{action_:"rm"}},"-9.,9":{"*":{action_:"9,9"}},",":{"*":{action_:{type_:"insert+p1",option:"comma enumeration S"}}},"\\color{(...)}{(...)}1|\\color(...){(...)}2":{"*":{action_:"color-output"}},"\\color{(...)}0":{"*":{action_:"color0-output"}},"\\ce{(...)}":{"*":{action_:"ce"}},"\\,|\\x{}{}|\\x{}|\\x":{"*":{action_:"copy"}},else2:{"*":{action_:"copy"}}}),actions:{"state of aggregation":function(e,t){return{type_:"state of aggregation subscript",p1:mhchemParser.go(t,"o")}},"color-output":function(e,t){return{type_:"color",color1:t[0],color2:mhchemParser.go(t[1],"pq")}}}},bd:{transitions:mhchemParser.createTransitions({empty:{"*":{}},x$:{0:{nextState:"!f",revisit:true}},formula$:{0:{nextState:"f",revisit:true}},else:{0:{nextState:"!f",revisit:true}},"-9.,9 no missing 0":{"*":{action_:"9,9"}},".":{"*":{action_:{type_:"insert",option:"electron dot"}}},"a-z":{f:{action_:"tex-math"}},x:{"*":{action_:{type_:"insert",option:"KV x"}}},letters:{"*":{action_:"rm"}},"'":{"*":{action_:{type_:"insert",option:"prime"}}},"${(...)}$|$(...)$":{"*":{action_:"tex-math"}},"{(...)}":{"*":{action_:"text"}},"\\color{(...)}{(...)}1|\\color(...){(...)}2":{"*":{action_:"color-output"}},"\\color{(...)}0":{"*":{action_:"color0-output"}},"\\ce{(...)}":{"*":{action_:"ce"}},"\\,|\\x{}{}|\\x{}|\\x":{"*":{action_:"copy"}},else2:{"*":{action_:"copy"}}}),actions:{"color-output":function(e,t){return{type_:"color",color1:t[0],color2:mhchemParser.go(t[1],"bd")}}}},oxidation:{transitions:mhchemParser.createTransitions({empty:{"*":{}},"roman numeral":{"*":{action_:"roman-numeral"}},"${(...)}$|$(...)$":{"*":{action_:"tex-math"}},else:{"*":{action_:"copy"}}}),actions:{"roman-numeral":function(e,t){return{type_:"roman numeral",p1:t||""}}}},"tex-math":{transitions:mhchemParser.createTransitions({empty:{"*":{action_:"output"}},"\\ce{(...)}":{"*":{action_:["output","ce"]}},"{...}|\\,|\\x{}{}|\\x{}|\\x":{"*":{action_:"o="}},else:{"*":{action_:"o="}}}),actions:{output:function(e){if(e.o){var t={type_:"tex-math",p1:e.o};for(var r in e){delete e[r]}return t}}}},"tex-math tight":{transitions:mhchemParser.createTransitions({empty:{"*":{action_:"output"}},"\\ce{(...)}":{"*":{action_:["output","ce"]}},"{...}|\\,|\\x{}{}|\\x{}|\\x":{"*":{action_:"o="}},"-|+":{"*":{action_:"tight operator"}},else:{"*":{action_:"o="}}}),actions:{"tight operator":function(e,t){e.o=(e.o||"")+"{"+t+"}"},output:function(e){if(e.o){var t={type_:"tex-math",p1:e.o};for(var r in e){delete e[r]}return t}}}},"9,9":{transitions:mhchemParser.createTransitions({empty:{"*":{}},",":{"*":{action_:"comma"}},else:{"*":{action_:"copy"}}}),actions:{comma:function(){return{type_:"commaDecimal"}}}},pu:{transitions:mhchemParser.createTransitions({empty:{"*":{action_:"output"}},space$:{"*":{action_:["output","space"]}},"{[(|)]}":{"0|a":{action_:"copy"}},"(-)(9)^(-9)":{0:{action_:"number^",nextState:"a"}},"(-)(9.,9)(e)(99)":{0:{action_:"enumber",nextState:"a"}},space:{"0|a":{}},"pm-operator":{"0|a":{action_:{type_:"operator",option:"\\pm"},nextState:"0"}},operator:{"0|a":{action_:"copy",nextState:"0"}},"//":{d:{action_:"o=",nextState:"/"}},"/":{d:{action_:"o=",nextState:"/"}},"{...}|else":{"0|d":{action_:"d=",nextState:"d"},a:{action_:["space","d="],nextState:"d"},"/|q":{action_:"q=",nextState:"q"}}}),actions:{enumber:function(e,t){var r=[];if(t[0]==="+-"||t[0]==="+/-"){r.push("\\pm ")}else if(t[0]){r.push(t[0])}if(t[1]){mhchemParser.concatArray(r,mhchemParser.go(t[1],"pu-9,9"));if(t[2]){if(t[2].match(/[,.]/)){mhchemParser.concatArray(r,mhchemParser.go(t[2],"pu-9,9"))}else{r.push(t[2])}}t[3]=t[4]||t[3];if(t[3]){t[3]=t[3].trim();if(t[3]==="e"||t[3].substr(0,1)==="*"){r.push({type_:"cdot"})}else{r.push({type_:"times"})}}}if(t[3]){r.push("10^{"+t[5]+"}")}return r},"number^":function(e,t){var r=[];if(t[0]==="+-"||t[0]==="+/-"){r.push("\\pm ")}else if(t[0]){r.push(t[0])}mhchemParser.concatArray(r,mhchemParser.go(t[1],"pu-9,9"));r.push("^{"+t[2]+"}");return r},operator:function(e,t,r){return{type_:"operator",kind_:r||t}},space:function(){return{type_:"pu-space-1"}},output:function(e){var t;var r=mhchemParser.patterns.match_("{(...)}",e.d||"");if(r&&r.remainder===""){e.d=r.match_}var n=mhchemParser.patterns.match_("{(...)}",e.q||"");if(n&&n.remainder===""){e.q=n.match_}if(e.d){e.d=e.d.replace(/\u00B0C|\^oC|\^{o}C/g,"{}^{\\circ}C");e.d=e.d.replace(/\u00B0F|\^oF|\^{o}F/g,"{}^{\\circ}F")}if(e.q){e.q=e.q.replace(/\u00B0C|\^oC|\^{o}C/g,"{}^{\\circ}C");e.q=e.q.replace(/\u00B0F|\^oF|\^{o}F/g,"{}^{\\circ}F");var a={d:mhchemParser.go(e.d,"pu"),q:mhchemParser.go(e.q,"pu")};if(e.o==="//"){t={type_:"pu-frac",p1:a.d,p2:a.q}}else{t=a.d;if(a.d.length>1||a.q.length>1){t.push({type_:" / "})}else{t.push({type_:"/"})}mhchemParser.concatArray(t,a.q)}}else{t=mhchemParser.go(e.d,"pu-2")}for(var o in e){delete e[o]}return t}}},"pu-2":{transitions:mhchemParser.createTransitions({empty:{"*":{action_:"output"}},"*":{"*":{action_:["output","cdot"],nextState:"0"}},"\\x":{"*":{action_:"rm="}},space:{"*":{action_:["output","space"],nextState:"0"}},"^{(...)}|^(-1)":{1:{action_:"^(-1)"}},"-9.,9":{0:{action_:"rm=",nextState:"0"},1:{action_:"^(-1)",nextState:"0"}},"{...}|else":{"*":{action_:"rm=",nextState:"1"}}}),actions:{cdot:function(){return{type_:"tight cdot"}},"^(-1)":function(e,t){e.rm+="^{"+t+"}"},space:function(){return{type_:"pu-space-2"}},output:function(e){var t=[];if(e.rm){var r=mhchemParser.patterns.match_("{(...)}",e.rm||"");if(r&&r.remainder===""){t=mhchemParser.go(r.match_,"pu")}else{t={type_:"rm",p1:e.rm}}}for(var n in e){delete e[n]}return t}}},"pu-9,9":{transitions:mhchemParser.createTransitions({empty:{0:{action_:"output-0"},o:{action_:"output-o"}},",":{0:{action_:["output-0","comma"],nextState:"o"}},".":{0:{action_:["output-0","copy"],nextState:"o"}},else:{"*":{action_:"text="}}}),actions:{comma:function(){return{type_:"commaDecimal"}},"output-0":function(e){var t=[];e.text_=e.text_||"";if(e.text_.length>4){var r=e.text_.length%3;if(r===0){r=3}for(var n=e.text_.length-3;n>0;n-=3){t.push(e.text_.substr(n,3));t.push({type_:"1000 separator"})}t.push(e.text_.substr(0,r));t.reverse()}else{t.push(e.text_)}for(var a in e){delete e[a]}return t},"output-o":function(e){var t=[];e.text_=e.text_||"";if(e.text_.length>4){var r=e.text_.length-3;for(var n=0;n<r;n+=3){t.push(e.text_.substr(n,3));t.push({type_:"1000 separator"})}t.push(e.text_.substr(n))}else{t.push(e.text_)}for(var a in e){delete e[a]}return t}}}};var texify={go:function(e,t){if(!e){return""}var r="";var n=false;for(var a=0;a<e.length;a++){var o=e[a];if(typeof o==="string"){r+=o}else{r+=texify._go2(o);if(o.type_==="1st-level escape"){n=true}}}if(!t&&!n&&r){r="{"+r+"}"}return r},_goInner:function(e){if(!e){return e}return texify.go(e,true)},_go2:function(e){var t;switch(e.type_){case"chemfive":t="";var r={a:texify._goInner(e.a),b:texify._goInner(e.b),p:texify._goInner(e.p),o:texify._goInner(e.o),q:texify._goInner(e.q),d:texify._goInner(e.d)};if(r.a){if(r.a.match(/^[+\-]/)){r.a="{"+r.a+"}"}t+=r.a+"\\,"}if(r.b||r.p){t+="{\\vphantom{X}}";t+="^{\\hphantom{"+(r.b||"")+"}}_{\\hphantom{"+(r.p||"")+"}}";t+="{\\vphantom{X}}";t+="^{\\smash[t]{\\vphantom{2}}\\mathllap{"+(r.b||"")+"}}";t+="_{\\vphantom{2}\\mathllap{\\smash[t]{"+(r.p||"")+"}}}"}if(r.o){if(r.o.match(/^[+\-]/)){r.o="{"+r.o+"}"}t+=r.o}if(e.dType==="kv"){if(r.d||r.q){t+="{\\vphantom{X}}"}if(r.d){t+="^{"+r.d+"}"}if(r.q){t+="_{\\smash[t]{"+r.q+"}}"}}else if(e.dType==="oxidation"){if(r.d){t+="{\\vphantom{X}}";t+="^{"+r.d+"}"}if(r.q){t+="{{}}";t+="_{\\smash[t]{"+r.q+"}}"}}else{if(r.q){t+="{{}}";t+="_{\\smash[t]{"+r.q+"}}"}if(r.d){t+="{{}}";t+="^{"+r.d+"}"}}break;case"rm":t="\\mathrm{"+e.p1+"}";break;case"text":if(e.p1.match(/[\^_]/)){e.p1=e.p1.replace(" ","~").replace("-","\\text{-}");t="\\mathrm{"+e.p1+"}"}else{t="\\text{"+e.p1+"}"}break;case"roman numeral":t="\\mathrm{"+e.p1+"}";break;case"state of aggregation":t="\\mskip2mu "+texify._goInner(e.p1);break;case"state of aggregation subscript":t="\\mskip1mu "+texify._goInner(e.p1);break;case"bond":t=texify._getBond(e.kind_);if(!t){throw["MhchemErrorBond","mhchem Error. Unknown bond type ("+e.kind_+")"]}break;case"frac":var n="\\frac{"+e.p1+"}{"+e.p2+"}";t="\\mathchoice{\\textstyle"+n+"}{"+n+"}{"+n+"}{"+n+"}";break;case"pu-frac":var a="\\frac{"+texify._goInner(e.p1)+"}{"+texify._goInner(e.p2)+"}";t="\\mathchoice{\\textstyle"+a+"}{"+a+"}{"+a+"}{"+a+"}";break;case"tex-math":t=e.p1+" ";break;case"frac-ce":t="\\frac{"+texify._goInner(e.p1)+"}{"+texify._goInner(e.p2)+"}";break;case"overset":t="\\overset{"+texify._goInner(e.p1)+"}{"+texify._goInner(e.p2)+"}";break;case"underset":t="\\underset{"+texify._goInner(e.p1)+"}{"+texify._goInner(e.p2)+"}";break;case"underbrace":t="\\underbrace{"+texify._goInner(e.p1)+"}_{"+texify._goInner(e.p2)+"}";break;case"color":t="{\\color{"+e.color1+"}{"+texify._goInner(e.color2)+"}}";break;case"color0":t="\\color{"+e.color+"}";break;case"arrow":var o={rd:texify._goInner(e.rd),rq:texify._goInner(e.rq)};var i=texify._getArrow(e.r);if(o.rq){i+="[{\\rm "+o.rq+"}]"}if(o.rd){i+="{\\rm "+o.rd+"}"}else{i+="{}"}t=i;break;case"operator":t=texify._getOperator(e.kind_);break;case"1st-level escape":t=e.p1+" ";break;case"space":t=" ";break;case"entitySkip":t="~";break;case"pu-space-1":t="~";break;case"pu-space-2":t="\\mkern3mu ";break;case"1000 separator":t="\\mkern2mu ";break;case"commaDecimal":t="{,}";break;case"comma enumeration L":t="{"+e.p1+"}\\mkern6mu ";break;case"comma enumeration M":t="{"+e.p1+"}\\mkern3mu ";break;case"comma enumeration S":t="{"+e.p1+"}\\mkern1mu ";break;case"hyphen":t="\\text{-}";break;case"addition compound":t="\\,{\\cdot}\\,";break;case"electron dot":t="\\mkern1mu \\text{\\textbullet}\\mkern1mu ";break;case"KV x":t="{\\times}";break;case"prime":t="\\prime ";break;case"cdot":t="\\cdot ";break;case"tight cdot":t="\\mkern1mu{\\cdot}\\mkern1mu ";break;case"times":t="\\times ";break;case"circa":t="{\\sim}";break;case"^":t="uparrow";break;case"v":t="downarrow";break;case"ellipsis":t="\\ldots ";break;case"/":t="/";break;case" / ":t="\\,/\\,";break;default:throw["MhchemBugT","mhchem bug T. Please report."]}return t},_getArrow:function(e){switch(e){case"->":return"\\yields";case"→":return"\\yields";case"⟶":return"\\yields";case"<-":return"\\yieldsLeft";case"<->":return"\\mesomerism";case"<--\x3e":return"\\yieldsLeftRight";case"<=>":return"\\equilibrium";case"⇌":return"\\equilibrium";case"<=>>":return"\\equilibriumRight";case"<<=>":return"\\equilibriumLeft";default:throw["MhchemBugT","mhchem bug T. Please report."]}},_getBond:function(e){switch(e){case"-":return"{-}";case"1":return"{-}";case"=":return"{=}";case"2":return"{=}";case"#":return"{\\equiv}";case"3":return"{\\equiv}";case"~":return"{\\tripleDash}";case"~-":return"{\\tripleDashOverLine}";case"~=":return"{\\tripleDashOverDoubleLine}";case"~--":return"{\\tripleDashOverDoubleLine}";case"-~-":return"{\\tripleDashBetweenDoubleLine}";case"...":return"{{\\cdot}{\\cdot}{\\cdot}}";case"....":return"{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}";case"->":return"{\\rightarrow}";case"<-":return"{\\leftarrow}";case"<":return"{<}";case">":return"{>}";default:throw["MhchemBugT","mhchem bug T. Please report."]}},_getOperator:function(e){switch(e){case"+":return" {}+{} ";case"-":return" {}-{} ";case"=":return" {}={} ";case"<":return" {}<{} ";case">":return" {}>{} ";case"<<":return" {}\\ll{} ";case">>":return" {}\\gg{} ";case"\\pm":return" {}\\pm{} ";case"\\approx":return" {}\\approx{} ";case"$\\approx$":return" {}\\approx{} ";case"v":return" \\downarrow{} ";case"(v)":return" \\downarrow{} ";case"^":return" \\uparrow{} ";case"(^)":return" \\uparrow{} ";default:throw["MhchemBugT","mhchem bug T. Please report."]}}};defineMacro("\\darr","\\downarrow");defineMacro("\\dArr","\\Downarrow");defineMacro("\\Darr","\\Downarrow");defineMacro("\\lang","\\langle");defineMacro("\\rang","\\rangle");defineMacro("\\uarr","\\uparrow");defineMacro("\\uArr","\\Uparrow");defineMacro("\\Uarr","\\Uparrow");defineMacro("\\N","\\mathbb{N}");defineMacro("\\R","\\mathbb{R}");defineMacro("\\Z","\\mathbb{Z}");defineMacro("\\alef","\\aleph");defineMacro("\\alefsym","\\aleph");defineMacro("\\bull","\\bullet");defineMacro("\\clubs","\\clubsuit");defineMacro("\\cnums","\\mathbb{C}");defineMacro("\\Complex","\\mathbb{C}");defineMacro("\\Dagger","\\ddagger");defineMacro("\\diamonds","\\diamondsuit");defineMacro("\\empty","\\emptyset");defineMacro("\\exist","\\exists");defineMacro("\\harr","\\leftrightarrow");defineMacro("\\hArr","\\Leftrightarrow");defineMacro("\\Harr","\\Leftrightarrow");defineMacro("\\hearts","\\heartsuit");defineMacro("\\image","\\Im");defineMacro("\\infin","\\infty");defineMacro("\\isin","\\in");defineMacro("\\larr","\\leftarrow");defineMacro("\\lArr","\\Leftarrow");defineMacro("\\Larr","\\Leftarrow");defineMacro("\\lrarr","\\leftrightarrow");defineMacro("\\lrArr","\\Leftrightarrow");defineMacro("\\Lrarr","\\Leftrightarrow");defineMacro("\\natnums","\\mathbb{N}");defineMacro("\\plusmn","\\pm");defineMacro("\\rarr","\\rightarrow");defineMacro("\\rArr","\\Rightarrow");defineMacro("\\Rarr","\\Rightarrow");defineMacro("\\real","\\Re");defineMacro("\\reals","\\mathbb{R}");defineMacro("\\Reals","\\mathbb{R}");defineMacro("\\sdot","\\cdot");defineMacro("\\sect","\\S");defineMacro("\\spades","\\spadesuit");defineMacro("\\sub","\\subset");defineMacro("\\sube","\\subseteq");defineMacro("\\supe","\\supseteq");defineMacro("\\thetasym","\\vartheta");defineMacro("\\weierp","\\wp");defineMacro("\\quantity","{\\left\\{ #1 \\right\\}}");defineMacro("\\qty","{\\left\\{ #1 \\right\\}}");defineMacro("\\pqty","{\\left( #1 \\right)}");defineMacro("\\bqty","{\\left[ #1 \\right]}");defineMacro("\\vqty","{\\left\\vert #1 \\right\\vert}");defineMacro("\\Bqty","{\\left\\{ #1 \\right\\}}");defineMacro("\\absolutevalue","{\\left\\vert #1 \\right\\vert}");defineMacro("\\abs","{\\left\\vert #1 \\right\\vert}");defineMacro("\\norm","{\\left\\Vert #1 \\right\\Vert}");defineMacro("\\evaluated","{\\left.#1 \\right\\vert}");defineMacro("\\eval","{\\left.#1 \\right\\vert}");defineMacro("\\order","{\\mathcal{O} \\left( #1 \\right)}");defineMacro("\\commutator","{\\left[ #1 , #2 \\right]}");defineMacro("\\comm","{\\left[ #1 , #2 \\right]}");defineMacro("\\anticommutator","{\\left\\{ #1 , #2 \\right\\}}");defineMacro("\\acomm","{\\left\\{ #1 , #2 \\right\\}}");defineMacro("\\poissonbracket","{\\left\\{ #1 , #2 \\right\\}}");defineMacro("\\pb","{\\left\\{ #1 , #2 \\right\\}}");defineMacro("\\vectorbold","{\\boldsymbol{ #1 }}");defineMacro("\\vb","{\\boldsymbol{ #1 }}");defineMacro("\\vectorarrow","{\\vec{\\boldsymbol{ #1 }}}");defineMacro("\\va","{\\vec{\\boldsymbol{ #1 }}}");defineMacro("\\vectorunit","{{\\boldsymbol{\\hat{ #1 }}}}");defineMacro("\\vu","{{\\boldsymbol{\\hat{ #1 }}}}");defineMacro("\\dotproduct","\\mathbin{\\boldsymbol\\cdot}");defineMacro("\\vdot","{\\boldsymbol\\cdot}");defineMacro("\\crossproduct","\\mathbin{\\boldsymbol\\times}");defineMacro("\\cross","\\mathbin{\\boldsymbol\\times}");defineMacro("\\cp","\\mathbin{\\boldsymbol\\times}");defineMacro("\\gradient","{\\boldsymbol\\nabla}");defineMacro("\\grad","{\\boldsymbol\\nabla}");defineMacro("\\divergence","{\\grad\\vdot}");defineMacro("\\curl","{\\grad\\cross}");defineMacro("\\laplacian","\\nabla^2");defineMacro("\\tr","{\\operatorname{tr}}");defineMacro("\\Tr","{\\operatorname{Tr}}");defineMacro("\\rank","{\\operatorname{rank}}");defineMacro("\\erf","{\\operatorname{erf}}");defineMacro("\\Res","{\\operatorname{Res}}");defineMacro("\\principalvalue","{\\mathcal{P}}");defineMacro("\\pv","{\\mathcal{P}}");defineMacro("\\PV","{\\operatorname{P.V.}}");defineMacro("\\qqtext","{\\quad\\text{ #1 }\\quad}");defineMacro("\\qq","{\\quad\\text{ #1 }\\quad}");defineMacro("\\qcomma","{\\text{,}\\quad}");defineMacro("\\qc","{\\text{,}\\quad}");defineMacro("\\qcc","{\\quad\\text{c.c.}\\quad}");defineMacro("\\qif","{\\quad\\text{if}\\quad}");defineMacro("\\qthen","{\\quad\\text{then}\\quad}");defineMacro("\\qelse","{\\quad\\text{else}\\quad}");defineMacro("\\qotherwise","{\\quad\\text{otherwise}\\quad}");defineMacro("\\qunless","{\\quad\\text{unless}\\quad}");defineMacro("\\qgiven","{\\quad\\text{given}\\quad}");defineMacro("\\qusing","{\\quad\\text{using}\\quad}");defineMacro("\\qassume","{\\quad\\text{assume}\\quad}");defineMacro("\\qsince","{\\quad\\text{since}\\quad}");defineMacro("\\qlet","{\\quad\\text{let}\\quad}");defineMacro("\\qfor","{\\quad\\text{for}\\quad}");defineMacro("\\qall","{\\quad\\text{all}\\quad}");defineMacro("\\qeven","{\\quad\\text{even}\\quad}");defineMacro("\\qodd","{\\quad\\text{odd}\\quad}");defineMacro("\\qinteger","{\\quad\\text{integer}\\quad}");defineMacro("\\qand","{\\quad\\text{and}\\quad}");defineMacro("\\qor","{\\quad\\text{or}\\quad}");defineMacro("\\qas","{\\quad\\text{as}\\quad}");defineMacro("\\qin","{\\quad\\text{in}\\quad}");defineMacro("\\differential","{\\text{d}}");defineMacro("\\dd","{\\text{d}}");defineMacro("\\derivative","{\\frac{\\text{d}{ #1 }}{\\text{d}{ #2 }}}");defineMacro("\\dv","{\\frac{\\text{d}{ #1 }}{\\text{d}{ #2 }}}");defineMacro("\\partialderivative","{\\frac{\\partial{ #1 }}{\\partial{ #2 }}}");defineMacro("\\variation","{\\delta}");defineMacro("\\var","{\\delta}");defineMacro("\\functionalderivative","{\\frac{\\delta{ #1 }}{\\delta{ #2 }}}");defineMacro("\\fdv","{\\frac{\\delta{ #1 }}{\\delta{ #2 }}}");defineMacro("\\innerproduct","{\\left\\langle {#1} \\mid { #2} \\right\\rangle}");defineMacro("\\outerproduct","{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");defineMacro("\\dyad","{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");defineMacro("\\ketbra","{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");defineMacro("\\op","{\\left\\vert { #1 } \\right\\rangle\\left\\langle { #2} \\right\\vert}");defineMacro("\\expectationvalue","{\\left\\langle {#1 } \\right\\rangle}");defineMacro("\\expval","{\\left\\langle {#1 } \\right\\rangle}");defineMacro("\\ev","{\\left\\langle {#1 } \\right\\rangle}");defineMacro("\\matrixelement","{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}");defineMacro("\\matrixel","{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}");defineMacro("\\mel","{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}");const implicitCommands={"^":true,_:true,"\\limits":true,"\\nolimits":true};class MacroExpander{constructor(e,t,r){this.settings=t;this.expansionCount=0;this.feed(e);this.macros=new Namespace(macros,t.macros);this.mode=r;this.stack=[]}feed(e){this.lexer=new Lexer(e,this.settings)}switchMode(e){this.mode=e}beginGroup(){this.macros.beginGroup()}endGroup(){this.macros.endGroup()}future(){if(this.stack.length===0){this.pushToken(this.lexer.lex())}return this.stack[this.stack.length-1]}popToken(){this.future();return this.stack.pop()}pushToken(e){this.stack.push(e)}pushTokens(e){this.stack.push(...e)}scanArgument(e){let t;let r;let n;if(e){this.consumeSpaces();if(this.future().text!=="["){return null}t=this.popToken();({tokens:n,end:r}=this.consumeArg(["]"]))}else{({tokens:n,start:t,end:r}=this.consumeArg())}this.pushToken(new Token("EOF",r.loc));this.pushTokens(n);return t.range(r,"")}consumeSpaces(){for(;;){const e=this.future();if(e.text===" "){this.stack.pop()}else{break}}}consumeArg(e){const t=[];const r=e&&e.length>0;if(!r){this.consumeSpaces()}const n=this.future();let a;let o=0;let i=0;do{a=this.popToken();t.push(a);if(a.text==="{"){++o}else if(a.text==="}"){--o;if(o===-1){throw new ParseError("Extra }",a)}}else if(a.text==="EOF"){throw new ParseError("Unexpected end of input in a macro argument"+", expected '"+(e&&r?e[i]:"}")+"'",a)}if(e&&r){if((o===0||o===1&&e[i]==="{")&&a.text===e[i]){++i;if(i===e.length){t.splice(-i,i);break}}else{i=0}}}while(o!==0||r);if(n.text==="{"&&t[t.length-1].text==="}"){t.pop();t.shift()}t.reverse();return{tokens:t,start:n,end:a}}consumeArgs(e,t){if(t){if(t.length!==e+1){throw new ParseError("The length of delimiters doesn't match the number of args!")}const r=t[0];for(let e=0;e<r.length;e++){const t=this.popToken();if(r[e]!==t.text){throw new ParseError("Use of the macro doesn't match its definition",t)}}}const r=[];for(let n=0;n<e;n++){r.push(this.consumeArg(t&&t[n+1]).tokens)}return r}expandOnce(e){const t=this.popToken();const r=t.text;const n=!t.noexpand?this._getExpansion(r):null;if(n==null||e&&n.unexpandable){if(e&&n==null&&r[0]==="\\"&&!this.isDefined(r)){throw new ParseError("Undefined control sequence: "+r)}this.pushToken(t);return false}this.expansionCount++;if(this.expansionCount>this.settings.maxExpand){throw new ParseError("Too many expansions: infinite loop or "+"need to increase maxExpand setting")}let a=n.tokens;const o=this.consumeArgs(n.numArgs,n.delimiters);if(n.numArgs){a=a.slice();for(let e=a.length-1;e>=0;--e){let t=a[e];if(t.text==="#"){if(e===0){throw new ParseError("Incomplete placeholder at end of macro body",t)}t=a[--e];if(t.text==="#"){a.splice(e+1,1)}else if(/^[1-9]$/.test(t.text)){a.splice(e,2,...o[+t.text-1])}else{throw new ParseError("Not a valid argument number",t)}}}}this.pushTokens(a);return a.length}expandAfterFuture(){this.expandOnce();return this.future()}expandNextToken(){for(;;){if(this.expandOnce()===false){const e=this.stack.pop();if(e.treatAsRelax){e.text="\\relax"}return e}}throw new Error}expandMacro(e){return this.macros.has(e)?this.expandTokens([new Token(e)]):undefined}expandTokens(e){const t=[];const r=this.stack.length;this.pushTokens(e);while(this.stack.length>r){if(this.expandOnce(true)===false){const e=this.stack.pop();if(e.treatAsRelax){e.noexpand=false;e.treatAsRelax=false}t.push(e)}}return t}expandMacroAsText(e){const t=this.expandMacro(e);if(t){return t.map((e=>e.text)).join("")}else{return t}}_getExpansion(e){const t=this.macros.get(e);if(t==null){return t}if(e.length===1){const t=this.lexer.catcodes[e];if(t!=null&&t!==13){return}}const r=typeof t==="function"?t(this):t;if(typeof r==="string"){let e=0;if(r.indexOf("#")!==-1){const t=r.replace(/##/g,"");while(t.indexOf("#"+(e+1))!==-1){++e}}const t=new Lexer(r,this.settings);const n=[];let a=t.lex();while(a.text!=="EOF"){n.push(a);a=t.lex()}n.reverse();const o={tokens:n,numArgs:e};return o}return r}isDefined(e){return this.macros.has(e)||Object.prototype.hasOwnProperty.call(functions$1,e)||Object.prototype.hasOwnProperty.call(symbols.math,e)||Object.prototype.hasOwnProperty.call(symbols.text,e)||Object.prototype.hasOwnProperty.call(implicitCommands,e)}isExpandable(e){const t=this.macros.get(e);return t!=null?typeof t==="string"||typeof t==="function"||!t.unexpandable:Object.prototype.hasOwnProperty.call(functions$1,e)&&!functions$1[e].primitive}}const unicodeSubRegEx=/^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;const uSubsAndSups=Object.freeze({"₊":"+","₋":"-","₌":"=","₍":"(","₎":")","₀":"0","₁":"1","₂":"2","₃":"3","₄":"4","₅":"5","₆":"6","₇":"7","₈":"8","₉":"9","ₐ":"a","ₑ":"e","ₕ":"h","ᵢ":"i","ⱼ":"j","ₖ":"k","ₗ":"l","ₘ":"m","ₙ":"n","ₒ":"o","ₚ":"p","ᵣ":"r","ₛ":"s","ₜ":"t","ᵤ":"u","ᵥ":"v","ₓ":"x","ᵦ":"β","ᵧ":"γ","ᵨ":"ρ","ᵩ":"ϕ","ᵪ":"χ","⁺":"+","⁻":"-","⁼":"=","⁽":"(","⁾":")","⁰":"0","¹":"1","²":"2","³":"3","⁴":"4","⁵":"5","⁶":"6","⁷":"7","⁸":"8","⁹":"9","ᴬ":"A","ᴮ":"B","ᴰ":"D","ᴱ":"E","ᴳ":"G","ᴴ":"H","ᴵ":"I","ᴶ":"J","ᴷ":"K","ᴸ":"L","ᴹ":"M","ᴺ":"N","ᴼ":"O","ᴾ":"P","ᴿ":"R","ᵀ":"T","ᵁ":"U","ⱽ":"V","ᵂ":"W","ᵃ":"a","ᵇ":"b","ᶜ":"c","ᵈ":"d","ᵉ":"e","ᶠ":"f","ᵍ":"g","ʰ":"h","ⁱ":"i","ʲ":"j","ᵏ":"k","ˡ":"l","ᵐ":"m","ⁿ":"n","ᵒ":"o","ᵖ":"p","ʳ":"r","ˢ":"s","ᵗ":"t","ᵘ":"u","ᵛ":"v","ʷ":"w","ˣ":"x","ʸ":"y","ᶻ":"z","ᵝ":"β","ᵞ":"γ","ᵟ":"δ","ᵠ":"ϕ","ᵡ":"χ","ᶿ":"θ"});const asciiFromScript=Object.freeze({"𝒜":"A","ℬ":"B","𝒞":"C","𝒟":"D","ℰ":"E","ℱ":"F","𝒢":"G","ℋ":"H","ℐ":"I","𝒥":"J","𝒦":"K","ℒ":"L","ℳ":"M","𝒩":"N","𝒪":"O","𝒫":"P","𝒬":"Q","ℛ":"R","𝒮":"S","𝒯":"T","𝒰":"U","𝒱":"V","𝒲":"W","𝒳":"X","𝒴":"Y","𝒵":"Z"});var unicodeAccents={"́":{text:"\\'",math:"\\acute"},"̀":{text:"\\`",math:"\\grave"},"̈":{text:'\\"',math:"\\ddot"},"̃":{text:"\\~",math:"\\tilde"},"̄":{text:"\\=",math:"\\bar"},"̆":{text:"\\u",math:"\\breve"},"̌":{text:"\\v",math:"\\check"},"̂":{text:"\\^",math:"\\hat"},"̇":{text:"\\.",math:"\\dot"},"̊":{text:"\\r",math:"\\mathring"},"̋":{text:"\\H"},"̧":{text:"\\c"}};var unicodeSymbols={"á":"á","à":"à","ä":"ä","ǟ":"ǟ","ã":"ã","ā":"ā","ă":"ă","ắ":"ắ","ằ":"ằ","ẵ":"ẵ","ǎ":"ǎ","â":"â","ấ":"ấ","ầ":"ầ","ẫ":"ẫ","ȧ":"ȧ","ǡ":"ǡ","å":"å","ǻ":"ǻ","ḃ":"ḃ","ć":"ć","č":"č","ĉ":"ĉ","ċ":"ċ","ď":"ď","ḋ":"ḋ","é":"é","è":"è","ë":"ë","ẽ":"ẽ","ē":"ē","ḗ":"ḗ","ḕ":"ḕ","ĕ":"ĕ","ě":"ě","ê":"ê","ế":"ế","ề":"ề","ễ":"ễ","ė":"ė","ḟ":"ḟ","ǵ":"ǵ","ḡ":"ḡ","ğ":"ğ","ǧ":"ǧ","ĝ":"ĝ","ġ":"ġ","ḧ":"ḧ","ȟ":"ȟ","ĥ":"ĥ","ḣ":"ḣ","í":"í","ì":"ì","ï":"ï","ḯ":"ḯ","ĩ":"ĩ","ī":"ī","ĭ":"ĭ","ǐ":"ǐ","î":"î","ǰ":"ǰ","ĵ":"ĵ","ḱ":"ḱ","ǩ":"ǩ","ĺ":"ĺ","ľ":"ľ","ḿ":"ḿ","ṁ":"ṁ","ń":"ń","ǹ":"ǹ","ñ":"ñ","ň":"ň","ṅ":"ṅ","ó":"ó","ò":"ò","ö":"ö","ȫ":"ȫ","õ":"õ","ṍ":"ṍ","ṏ":"ṏ","ȭ":"ȭ","ō":"ō","ṓ":"ṓ","ṑ":"ṑ","ŏ":"ŏ","ǒ":"ǒ","ô":"ô","ố":"ố","ồ":"ồ","ỗ":"ỗ","ȯ":"ȯ","ȱ":"ȱ","ő":"ő","ṕ":"ṕ","ṗ":"ṗ","ŕ":"ŕ","ř":"ř","ṙ":"ṙ","ś":"ś","ṥ":"ṥ","š":"š","ṧ":"ṧ","ŝ":"ŝ","ṡ":"ṡ","ẗ":"ẗ","ť":"ť","ṫ":"ṫ","ú":"ú","ù":"ù","ü":"ü","ǘ":"ǘ","ǜ":"ǜ","ǖ":"ǖ","ǚ":"ǚ","ũ":"ũ","ṹ":"ṹ","ū":"ū","ṻ":"ṻ","ŭ":"ŭ","ǔ":"ǔ","û":"û","ů":"ů","ű":"ű","ṽ":"ṽ","ẃ":"ẃ","ẁ":"ẁ","ẅ":"ẅ","ŵ":"ŵ","ẇ":"ẇ","ẘ":"ẘ","ẍ":"ẍ","ẋ":"ẋ","ý":"ý","ỳ":"ỳ","ÿ":"ÿ","ỹ":"ỹ","ȳ":"ȳ","ŷ":"ŷ","ẏ":"ẏ","ẙ":"ẙ","ź":"ź","ž":"ž","ẑ":"ẑ","ż":"ż","Á":"Á","À":"À","Ä":"Ä","Ǟ":"Ǟ","Ã":"Ã","Ā":"Ā","Ă":"Ă","Ắ":"Ắ","Ằ":"Ằ","Ẵ":"Ẵ","Ǎ":"Ǎ","Â":"Â","Ấ":"Ấ","Ầ":"Ầ","Ẫ":"Ẫ","Ȧ":"Ȧ","Ǡ":"Ǡ","Å":"Å","Ǻ":"Ǻ","Ḃ":"Ḃ","Ć":"Ć","Č":"Č","Ĉ":"Ĉ","Ċ":"Ċ","Ď":"Ď","Ḋ":"Ḋ","É":"É","È":"È","Ë":"Ë","Ẽ":"Ẽ","Ē":"Ē","Ḗ":"Ḗ","Ḕ":"Ḕ","Ĕ":"Ĕ","Ě":"Ě","Ê":"Ê","Ế":"Ế","Ề":"Ề","Ễ":"Ễ","Ė":"Ė","Ḟ":"Ḟ","Ǵ":"Ǵ","Ḡ":"Ḡ","Ğ":"Ğ","Ǧ":"Ǧ","Ĝ":"Ĝ","Ġ":"Ġ","Ḧ":"Ḧ","Ȟ":"Ȟ","Ĥ":"Ĥ","Ḣ":"Ḣ","Í":"Í","Ì":"Ì","Ï":"Ï","Ḯ":"Ḯ","Ĩ":"Ĩ","Ī":"Ī","Ĭ":"Ĭ","Ǐ":"Ǐ","Î":"Î","İ":"İ","Ĵ":"Ĵ","Ḱ":"Ḱ","Ǩ":"Ǩ","Ĺ":"Ĺ","Ľ":"Ľ","Ḿ":"Ḿ","Ṁ":"Ṁ","Ń":"Ń","Ǹ":"Ǹ","Ñ":"Ñ","Ň":"Ň","Ṅ":"Ṅ","Ó":"Ó","Ò":"Ò","Ö":"Ö","Ȫ":"Ȫ","Õ":"Õ","Ṍ":"Ṍ","Ṏ":"Ṏ","Ȭ":"Ȭ","Ō":"Ō","Ṓ":"Ṓ","Ṑ":"Ṑ","Ŏ":"Ŏ","Ǒ":"Ǒ","Ô":"Ô","Ố":"Ố","Ồ":"Ồ","Ỗ":"Ỗ","Ȯ":"Ȯ","Ȱ":"Ȱ","Ő":"Ő","Ṕ":"Ṕ","Ṗ":"Ṗ","Ŕ":"Ŕ","Ř":"Ř","Ṙ":"Ṙ","Ś":"Ś","Ṥ":"Ṥ","Š":"Š","Ṧ":"Ṧ","Ŝ":"Ŝ","Ṡ":"Ṡ","Ť":"Ť","Ṫ":"Ṫ","Ú":"Ú","Ù":"Ù","Ü":"Ü","Ǘ":"Ǘ","Ǜ":"Ǜ","Ǖ":"Ǖ","Ǚ":"Ǚ","Ũ":"Ũ","Ṹ":"Ṹ","Ū":"Ū","Ṻ":"Ṻ","Ŭ":"Ŭ","Ǔ":"Ǔ","Û":"Û","Ů":"Ů","Ű":"Ű","Ṽ":"Ṽ","Ẃ":"Ẃ","Ẁ":"Ẁ","Ẅ":"Ẅ","Ŵ":"Ŵ","Ẇ":"Ẇ","Ẍ":"Ẍ","Ẋ":"Ẋ","Ý":"Ý","Ỳ":"Ỳ","Ÿ":"Ÿ","Ỹ":"Ỹ","Ȳ":"Ȳ","Ŷ":"Ŷ","Ẏ":"Ẏ","Ź":"Ź","Ž":"Ž","Ẑ":"Ẑ","Ż":"Ż","ά":"ά","ὰ":"ὰ","ᾱ":"ᾱ","ᾰ":"ᾰ","έ":"έ","ὲ":"ὲ","ή":"ή","ὴ":"ὴ","ί":"ί","ὶ":"ὶ","ϊ":"ϊ","ΐ":"ΐ","ῒ":"ῒ","ῑ":"ῑ","ῐ":"ῐ","ό":"ό","ὸ":"ὸ","ύ":"ύ","ὺ":"ὺ","ϋ":"ϋ","ΰ":"ΰ","ῢ":"ῢ","ῡ":"ῡ","ῠ":"ῠ","ώ":"ώ","ὼ":"ὼ","Ύ":"Ύ","Ὺ":"Ὺ","Ϋ":"Ϋ","Ῡ":"Ῡ","Ῠ":"Ῠ","Ώ":"Ώ","Ὼ":"Ὼ"};class Parser{constructor(e,t,r=false){this.mode="math";this.gullet=new MacroExpander(e,t,this.mode);this.settings=t;this.isPreamble=r;this.leftrightDepth=0;this.prevAtomType=""}expect(e,t=true){if(this.fetch().text!==e){throw new ParseError(`Expected '${e}', got '${this.fetch().text}'`,this.fetch())}if(t){this.consume()}}consume(){this.nextToken=null}fetch(){if(this.nextToken==null){this.nextToken=this.gullet.expandNextToken()}return this.nextToken}switchMode(e){this.mode=e;this.gullet.switchMode(e)}parse(){this.gullet.beginGroup();if(this.settings.colorIsTextColor){this.gullet.macros.set("\\color","\\textcolor")}const e=this.parseExpression(false);this.expect("EOF");if(this.isPreamble){const e=Object.create(null);Object.entries(this.gullet.macros.current).forEach((([t,r])=>{e[t]=r}));this.gullet.endGroup();return e}const t=this.gullet.macros.get("\\df@tag");this.gullet.endGroup();if(t){this.gullet.macros.current["\\df@tag"]=t}return e}static get endOfExpression(){return["}","\\endgroup","\\end","\\right","\\endtoggle","&"]}subparse(e){const t=this.nextToken;this.consume();this.gullet.pushToken(new Token("}"));this.gullet.pushTokens(e);const r=this.parseExpression(false);this.expect("}");this.nextToken=t;return r}parseExpression(e,t){const r=[];while(true){if(this.mode==="math"){this.consumeSpaces()}const n=this.fetch();if(Parser.endOfExpression.indexOf(n.text)!==-1){break}if(t&&n.text===t){break}if(e&&functions$1[n.text]&&functions$1[n.text].infix){break}const a=this.parseAtom(t);if(!a){break}else if(a.type==="internal"){continue}r.push(a);this.prevAtomType=a.type==="atom"?a.family:a.type}if(this.mode==="text"){this.formLigatures(r)}return this.handleInfixNodes(r)}handleInfixNodes(e){let t=-1;let r;for(let n=0;n<e.length;n++){if(e[n].type==="infix"){if(t!==-1){throw new ParseError("only one infix operator per group",e[n].token)}t=n;r=e[n].replaceWith}}if(t!==-1&&r){let n;let a;const o=e.slice(0,t);const i=e.slice(t+1);if(o.length===1&&o[0].type==="ordgroup"){n=o[0]}else{n={type:"ordgroup",mode:this.mode,body:o}}if(i.length===1&&i[0].type==="ordgroup"){a=i[0]}else{a={type:"ordgroup",mode:this.mode,body:i}}let s;if(r==="\\\\abovefrac"){s=this.callFunction(r,[n,e[t],a],[])}else{s=this.callFunction(r,[n,a],[])}return[s]}else{return e}}handleSupSubscript(e){const t=this.fetch();const r=t.text;this.consume();this.consumeSpaces();const n=this.parseGroup(e);if(!n){throw new ParseError("Expected group after '"+r+"'",t)}return n}formatUnsupportedCmd(e){const t=[];for(let r=0;r<e.length;r++){t.push({type:"textord",mode:"text",text:e[r]})}const r={type:"text",mode:this.mode,body:t};const n={type:"color",mode:this.mode,color:this.settings.errorColor,body:[r]};return n}parseAtom(e){const t=this.parseGroup("atom",e);if(this.mode==="text"){return t}let r;let n;while(true){this.consumeSpaces();const e=this.fetch();if(e.text==="\\limits"||e.text==="\\nolimits"){if(t&&t.type==="op"){const r=e.text==="\\limits";t.limits=r;t.alwaysHandleSupSub=true}else if(t&&t.type==="operatorname"){if(t.alwaysHandleSupSub){t.limits=e.text==="\\limits"}}else{throw new ParseError("Limit controls must follow a math operator",e)}this.consume()}else if(e.text==="^"){if(r){throw new ParseError("Double superscript",e)}r=this.handleSupSubscript("superscript")}else if(e.text==="_"){if(n){throw new ParseError("Double subscript",e)}n=this.handleSupSubscript("subscript")}else if(e.text==="'"){if(r){throw new ParseError("Double superscript",e)}const t={type:"textord",mode:this.mode,text:"\\prime"};const n=[t];this.consume();while(this.fetch().text==="'"){n.push(t);this.consume()}if(this.fetch().text==="^"){n.push(this.handleSupSubscript("superscript"))}r={type:"ordgroup",mode:this.mode,body:n}}else if(uSubsAndSups[e.text]){const t=unicodeSubRegEx.test(e.text);const a=[];a.push(new Token(uSubsAndSups[e.text]));this.consume();while(true){const e=this.fetch().text;if(!uSubsAndSups[e]){break}if(unicodeSubRegEx.test(e)!==t){break}a.unshift(new Token(uSubsAndSups[e]));this.consume()}const o=this.subparse(a);if(t){n={type:"ordgroup",mode:"math",body:o}}else{r={type:"ordgroup",mode:"math",body:o}}}else{break}}if(r||n){if(t&&t.type==="multiscript"&&!t.postscripts){t.postscripts={sup:r,sub:n};return t}else{const e=!t||t.type!=="op"&&t.type!=="operatorname"?undefined:isDelimiter(this.nextToken.text);return{type:"supsub",mode:this.mode,base:t,sup:r,sub:n,isFollowedByDelimiter:e}}}else{return t}}parseFunction(e,t){const r=this.fetch();const n=r.text;const a=functions$1[n];if(!a){return null}this.consume();if(t&&t!=="atom"&&!a.allowedInArgument){throw new ParseError("Got function '"+n+"' with no arguments"+(t?" as "+t:""),r)}else if(this.mode==="text"&&!a.allowedInText){throw new ParseError("Can't use function '"+n+"' in text mode",r)}else if(this.mode==="math"&&a.allowedInMath===false){throw new ParseError("Can't use function '"+n+"' in math mode",r)}const o=this.prevAtomType;const{args:i,optArgs:s}=this.parseArguments(n,a);this.prevAtomType=o;return this.callFunction(n,i,s,r,e)}callFunction(e,t,r,n,a){const o={funcName:e,parser:this,token:n,breakOnTokenText:a};const i=functions$1[e];if(i&&i.handler){return i.handler(o,t,r)}else{throw new ParseError(`No function handler for ${e}`)}}parseArguments(e,t){const r=t.numArgs+t.numOptionalArgs;if(r===0){return{args:[],optArgs:[]}}const n=[];const a=[];for(let o=0;o<r;o++){let r=t.argTypes&&t.argTypes[o];const i=o<t.numOptionalArgs;if(t.primitive&&r==null||t.type==="sqrt"&&o===1&&a[0]==null){r="primitive"}const s=this.parseGroupOfType(`argument to '${e}'`,r,i);if(i){a.push(s)}else if(s!=null){n.push(s)}else{throw new ParseError("Null argument, please report this as a bug")}}return{args:n,optArgs:a}}parseGroupOfType(e,t,r){switch(t){case"size":return this.parseSizeGroup(r);case"url":return this.parseUrlGroup(r);case"math":case"text":return this.parseArgumentGroup(r,t);case"hbox":{const e=this.parseArgumentGroup(r,"text");return e!=null?{type:"styling",mode:e.mode,body:[e],scriptLevel:"text"}:null}case"raw":{const e=this.parseStringGroup("raw",r);return e!=null?{type:"raw",mode:"text",string:e.text}:null}case"primitive":{if(r){throw new ParseError("A primitive argument cannot be optional")}const t=this.parseGroup(e);if(t==null){throw new ParseError("Expected group as "+e,this.fetch())}return t}case"original":case null:case undefined:return this.parseArgumentGroup(r);default:throw new ParseError("Unknown group type as "+e,this.fetch())}}consumeSpaces(){while(true){const e=this.fetch().text;if(e===" "||e===" "||e==="︎"){this.consume()}else{break}}}parseStringGroup(e,t){const r=this.gullet.scanArgument(t);if(r==null){return null}let n="";let a;while((a=this.fetch()).text!=="EOF"){n+=a.text;this.consume()}this.consume();r.text=n;return r}parseRegexGroup(e,t){const r=this.fetch();let n=r;let a="";let o;while((o=this.fetch()).text!=="EOF"&&e.test(a+o.text)){n=o;a+=n.text;this.consume()}if(a===""){throw new ParseError("Invalid "+t+": '"+r.text+"'",r)}return r.range(n,a)}parseSizeGroup(e){let t;let r=false;this.gullet.consumeSpaces();if(!e&&this.gullet.future().text!=="{"){t=this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size")}else{t=this.parseStringGroup("size",e)}if(!t){return null}if(!e&&t.text.length===0){t.text="0pt";r=true}const n=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!n){throw new ParseError("Invalid size: '"+t.text+"'",t)}const a={number:+(n[1]+n[2]),unit:n[3]};if(!validUnit(a)){throw new ParseError("Invalid unit: '"+a.unit+"'",t)}return{type:"size",mode:this.mode,value:a,isBlank:r}}parseUrlGroup(e){this.gullet.lexer.setCatcode("%",13);this.gullet.lexer.setCatcode("~",12);const t=this.parseStringGroup("url",e);this.gullet.lexer.setCatcode("%",14);this.gullet.lexer.setCatcode("~",13);if(t==null){return null}let r=t.text.replace(/\\([#$%&~_^{}])/g,"$1");r=t.text.replace(/{\u2044}/g,"/");return{type:"url",mode:this.mode,url:r}}parseArgumentGroup(e,t){const r=this.gullet.scanArgument(e);if(r==null){return null}const n=this.mode;if(t){this.switchMode(t)}this.gullet.beginGroup();const a=this.parseExpression(false,"EOF");this.expect("EOF");this.gullet.endGroup();const o={type:"ordgroup",mode:this.mode,loc:r.loc,body:a};if(t){this.switchMode(n)}return o}parseGroup(e,t){const r=this.fetch();const n=r.text;let a;if(n==="{"||n==="\\begingroup"||n==="\\toggle"){this.consume();const e=n==="{"?"}":n==="\\begingroup"?"\\endgroup":"\\endtoggle";this.gullet.beginGroup();const t=this.parseExpression(false,e);const o=this.fetch();this.expect(e);this.gullet.endGroup();a={type:o.text==="\\endtoggle"?"toggle":"ordgroup",mode:this.mode,loc:SourceLocation.range(r,o),body:t,semisimple:n==="\\begingroup"||undefined}}else{a=this.parseFunction(t,e)||this.parseSymbol();if(a==null&&n[0]==="\\"&&!Object.prototype.hasOwnProperty.call(implicitCommands,n)){a=this.formatUnsupportedCmd(n);this.consume()}}return a}formLigatures(e){let t=e.length-1;for(let r=0;r<t;++r){const n=e[r];const a=n.text;if(a==="-"&&e[r+1].text==="-"){if(r+1<t&&e[r+2].text==="-"){e.splice(r,3,{type:"textord",mode:"text",loc:SourceLocation.range(n,e[r+2]),text:"---"});t-=2}else{e.splice(r,2,{type:"textord",mode:"text",loc:SourceLocation.range(n,e[r+1]),text:"--"});t-=1}}if((a==="'"||a==="`")&&e[r+1].text===a){e.splice(r,2,{type:"textord",mode:"text",loc:SourceLocation.range(n,e[r+1]),text:a+a});t-=1}}}parseSymbol(){const e=this.fetch();let t=e.text;if(/^\\verb[^a-zA-Z]/.test(t)){this.consume();let e=t.slice(5);const r=e.charAt(0)==="*";if(r){e=e.slice(1)}if(e.length<2||e.charAt(0)!==e.slice(-1)){throw new ParseError(`\\verb assertion failed --\n                    please report what input caused this bug`)}e=e.slice(1,-1);return{type:"verb",mode:"text",body:e,star:r}}if(Object.prototype.hasOwnProperty.call(unicodeSymbols,t[0])&&!symbols[this.mode][t[0]]){if(this.settings.strict&&this.mode==="math"){throw new ParseError(`Accented Unicode text character "${t[0]}" used in `+`math mode`,e)}t=unicodeSymbols[t[0]]+t.slice(1)}const r=combiningDiacriticalMarksEndRegex.exec(t);if(r){t=t.substring(0,r.index);if(t==="i"){t="ı"}else if(t==="j"){t="ȷ"}}let n;if(symbols[this.mode][t]){const r=symbols[this.mode][t].group;const a=SourceLocation.range(e);let o;if(Object.prototype.hasOwnProperty.call(ATOMS,r)){const e=r;o={type:"atom",mode:this.mode,family:e,loc:a,text:t}}else{if(asciiFromScript[t]){this.consume();const e=this.fetch().text.charCodeAt(0);const r=e===65025?"mathscr":"mathcal";if(e===65024||e===65025){this.consume()}return{type:"font",mode:"math",font:r,body:{type:"mathord",mode:"math",loc:a,text:asciiFromScript[t]}}}o={type:r,mode:this.mode,loc:a,text:t}}n=o}else if(t.charCodeAt(0)>=128){if(this.settings.strict&&this.mode==="math"){throw new ParseError(`Unicode text character "${t[0]}" used in math mode`,e)}n={type:"textord",mode:"text",loc:SourceLocation.range(e),text:t}}else{return null}this.consume();if(r){for(let t=0;t<r[0].length;t++){const a=r[0][t];if(!unicodeAccents[a]){throw new ParseError(`Unknown accent ' ${a}'`,e)}const o=unicodeAccents[a][this.mode]||unicodeAccents[a].text;if(!o){throw new ParseError(`Accent ${a} unsupported in ${this.mode} mode`,e)}n={type:"accent",mode:this.mode,loc:SourceLocation.range(e),label:o,isStretchy:false,isShifty:true,base:n}}}return n}}const parseTree=function(e,t){if(!(typeof e==="string"||e instanceof String)){throw new TypeError("Temml can only parse string typed expression")}const r=new Parser(e,t);delete r.gullet.macros.current["\\df@tag"];let n=r.parse();if(!(n.length>0&&n[0].type&&n[0].type==="array"&&n[0].addEqnNum)){if(r.gullet.macros.get("\\df@tag")){if(!t.displayMode){throw new ParseError("\\tag works only in display mode")}r.gullet.feed("\\df@tag");n=[{type:"tag",mode:"text",body:n,tag:r.parse()}]}}return n};const subOrSupLevel=[2,2,3,3];class Style{constructor(e){this.level=e.level;this.color=e.color;this.font=e.font||"";this.fontFamily=e.fontFamily||"";this.fontSize=e.fontSize||1;this.fontWeight=e.fontWeight||"";this.fontShape=e.fontShape||"";this.maxSize=e.maxSize}extend(e){const t={level:this.level,color:this.color,font:this.font,fontFamily:this.fontFamily,fontSize:this.fontSize,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize};for(const r in e){if(Object.prototype.hasOwnProperty.call(e,r)){t[r]=e[r]}}return new Style(t)}withLevel(e){return this.extend({level:e})}incrementLevel(){return this.extend({level:Math.min(this.level+1,3)})}inSubOrSup(){return this.extend({level:subOrSupLevel[this.level]})}withColor(e){return this.extend({color:e})}withFont(e){return this.extend({font:e})}withTextFontFamily(e){return this.extend({fontFamily:e,font:""})}withFontSize(e){return this.extend({fontSize:e})}withTextFontWeight(e){return this.extend({fontWeight:e,font:""})}withTextFontShape(e){return this.extend({fontShape:e,font:""})}getColor(){return this.color}}const version="0.10.11";function postProcess(e){const t={};let r=0;const n=e.getElementsByClassName("tml-tageqn");for(const e of n){const n=e.getElementsByClassName("tml-eqn");if(n.length>0){r+=1;n[0].id="tml-eqn-"+r}const a=e.getElementsByClassName("tml-label");if(a.length===0){continue}if(n.length>0){t[a[0].id]=String(r)}else{const r=e.getElementsByClassName("tml-tag");if(r.length>0){t[a[0].id]=r[0].textContent}}}const a=e.getElementsByClassName("tml-ref");[...a].forEach((e=>{let r=t[e.getAttribute("href").slice(1)];if(e.className.indexOf("tml-eqref")===-1){r=r.replace(/^\(/,"");r=r.replace(/\($/,"")}{if(r.charAt(0)!=="("){r="("+r}if(r.slice(-1)!==")"){r=r+")"}}e.textContent=r}))}let render=function(e,t,r){t.textContent="";const n=t.tagName==="MATH";if(n){r.wrap="none"}const a=renderToMathMLTree(e,r);if(n){t.textContent="";a.children.forEach((e=>{t.appendChild(e.toNode())}))}else if(a.children.length>1){t.textContent="";a.children.forEach((e=>{t.appendChild(e.toNode())}))}else{t.appendChild(a.toNode())}};if(typeof document!=="undefined"){if(document.compatMode!=="CSS1Compat"){typeof console!=="undefined"&&console.warn("Warning: Temml doesn't work in quirks mode. Make sure your "+"website has a suitable doctype.");render=function(){throw new ParseError("Temml doesn't work in quirks mode.")}}}const renderToString=function(e,t){const r=renderToMathMLTree(e,t).toMarkup();return r};const generateParseTree=function(e,t){const r=new Settings(t);return parseTree(e,r)};const definePreamble=function(e,t){const r=new Settings(t);r.macros={};if(!(typeof e==="string"||e instanceof String)){throw new TypeError("Temml can only parse string typed expression")}const n=new Parser(e,r,true);delete n.gullet.macros.current["\\df@tag"];const a=n.parse();return a};const renderError=function(e,t,r){if(r.throwOnError||!(e instanceof ParseError)){throw e}const n=new Span(["temml-error"],[new TextNode$1(t+"\n"+e.toString())]);n.style.color=r.errorColor;n.style.whiteSpace="pre-line";return n};const renderToMathMLTree=function(e,t){const r=new Settings(t);try{const t=parseTree(e,r);const n=new Style({level:r.displayMode?StyleLevel.DISPLAY:StyleLevel.TEXT,maxSize:r.maxSize});return buildMathML(t,e,n,r)}catch(t){return renderError(t,e,r)}};var temml={version:version,render:render,renderToString:renderToString,postProcess:postProcess,ParseError:ParseError,definePreamble:definePreamble,__parse:generateParseTree,__renderToMathMLTree:renderToMathMLTree,__defineSymbol:defineSymbol,__defineMacro:defineMacro};const sanitizeUrl=function(e){if(e==null){return null}try{const t=decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g,"").toLowerCase();if(t.indexOf("javascript:")===0||t.indexOf("vbscript:")===0||t.indexOf("data:")===0){return null}}catch(e){return null}return e};const SANITIZE_TEXT_R=/[<>&"']/g;const SANITIZE_TEXT_CODES={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#x27;","/":"&#x2F;","`":"&#96;"};const sanitizeText=function(e){return String(e).replace(SANITIZE_TEXT_R,(function(e){return SANITIZE_TEXT_CODES[e]}))};const htmlTag=(e,t,r={},n=true)=>{let a="";for(const e in r){if(Object.prototype.hasOwnProperty.call(r,e)){const t=r[e];if(t){const r=e==="src"?t.replace(/</g,"%3C").replace(/>/g,"%3E"):sanitizeText(t);a+=" "+sanitizeText(e)+'="'+r+'"'}}}const o="<"+e+a+">";if(n){return o+t+"</"+e+">"}else{return o}};const tagName={em:"em",strong:"strong",code:"code",strikethru:"del",subscript:"sub",superscript:"sup",underline:"u",highlight:"mark"};const nodes={html(e){return e.text},heading(e){const t=output(e.content);let r="h"+e.attrs.level;r=htmlTag(r,t);r=r.slice(0,3)+" id='"+t.toLowerCase().replace(/,/g,"").replace(/\s+/g,"-")+"'"+r.slice(3);return r+"\n"},paragraph(e){return htmlTag("p",output(e.content))+"\n"},blockquote(e){return htmlTag("blockquote",output(e.content))},code_block(e){return htmlTag("pre",htmlTag("code",sanitizeText(e.content[0].text)))},hard_break(e){return"<br>"},def(e){return""},newline(e){return"\n"},horizontal_rule(e){return"<hr>\n"},ordered_list(e){const t=e.attrs.order!==1?{start:e.attrs.order}:undefined;return htmlTag("ol",output(e.content),t)+"\n"},bullet_list(e){return htmlTag("ul",output(e.content))+"\n"},list_item(e){return htmlTag("li",output(e.content))+"\n"},tight_list_item(e){return htmlTag("li",output(e.content),{class:"tight"})+"\n"},table(e){return htmlTag("table",output(e.content),e.attrs)+"\n"},table_row(e){return htmlTag("tr",output(e.content))+"\n"},table_header(e){const t={};if(e.attrs.colspan!==1){t.colspan=e.attrs.colspan}if(e.attrs.rowspan!==1){t.rowspan=e.attrs.rowspan}if(e.attrs.colwidth!==null&&!isNaN(e.attrs.colwidth)){t.style=`width: ${e.attrs.colwidth}px`}return htmlTag("th",output(e.content),t)+"\n"},table_cell(e){const t={};if(e.attrs.colspan!==1){t.colspan=e.attrs.colspan}if(e.attrs.rowspan!==1){t.rowspan=e.attrs.rowspan}if(e.attrs.colwidth!==null&&!isNaN(e.attrs.colwidth)){t.style=`width: ${e.attrs.colwidth}px`}return htmlTag("td",output(e.content),t)},link(e){const t={href:sanitizeUrl(e.attrs.href),title:e.attrs.title};return htmlTag("a",output(e.content),t)},image(e){const t={src:e.attrs.src};if(e.attrs.alt){t.alt=e.attrs.alt}if(e.attrs.class){t.class=e.attrs.class}if(e.attrs.id){t.id=e.attrs.id}if(e.attrs.width){t.width=e.attrs.width}return htmlTag("img","",t,false)},figure(e){return htmlTag("figure",output(e.content))+"\n"},figcaption(e){return htmlTag("figcaption",output(e.content))},figimg(e){const t={src:e.attrs.src,class:"figimg"};if(e.attrs.alt){t.alt=e.attrs.alt}if(e.attrs.id){t.id=e.attrs.id}if(e.attrs.width){t.width=e.attrs.width}return htmlTag("img","",t,false)+"\n"},calculation(e){const t=parse(e.attrs.entry);return temml.renderToString(t,{trust:true,displayMode:e.attrs.displayMode||false})},tex(e){return temml.renderToString(e.attrs.tex,{trust:true,displayMode:e.attrs.displayMode||false})},indented(e){return htmlTag("div",output(e.content),{class:"indented"})},centered(e){return htmlTag("div",output(e.content),{class:"centered"})},comment(e){return htmlTag("aside",output(e.content),{class:"comment"})},dt(e){let t=output(e.content);let r=htmlTag("dt",t);const n=t.indexOf("(");if(n>-1){t=t.slice(0,n).replace("_","-")}r=r.slice(0,3)+" id='"+t.toLowerCase().replace(/\s+/g,"-")+"'"+r.slice(3);return r+"\n"},dd(e){return htmlTag("dd",output(e.content))+"\n"},text(e){const t=sanitizeText(e.text);if(!e.marks){return t}else{let r=t;for(const t of e.marks){if(t.type==="link"){let e=`<a href='${t.attrs.href}'`;if(t.attrs.title){e+=` title='${t.attrs.title}''`}r=e+">"+r+"</a>"}else{const e=tagName[t.type];r=`<${e}>${r}</${e}>`}}return r}}};const output=e=>{let t="";if(Array.isArray(e)){for(let r=0;r<e.length;r++){t+=output(e[r])}}else if(e&&e.type!=="null"){t+=nodes[e.type](e)}return t};const md2html=(e,t=false)=>{const r=md2ast(e,t);return output(r)};const hurmet={dt:dt,parse:parse,calculate:calculate,autoCorrect:autoCorrect,prepareStatement:prepareStatement,improveQuantities:improveQuantities,draw:draw,evaluate:evaluate,md2ast:md2ast,md2html:md2html,scanModule:scanModule,updateCalculations:updateCalculations};const hurmetVars=Object.create(null);hurmet.calculate(`x = 5`,hurmetVars);hurmet.calculate(`w = 100 'lbf/ft'`,hurmetVars);hurmet.calculate(`L = 3.1 'm'`,hurmetVars);hurmet.calculate(`name = "James"`,hurmetVars);hurmet.calculate(`s = "abcde"`,hurmetVars);hurmet.calculate(`𝐕 = [1, 2, 3, 4, 5]`,hurmetVars);hurmet.calculate(`𝐌 = (1, 2, 3; 4, 5, 6; 7, 8, 9)`,hurmetVars);const df="``"+`name,w,area\n,in,in²\nA,4,10\nB,6,22`+"``";hurmet.calculate(`DF =`+df,hurmetVars);hurmet.calculate(`A = 8`,hurmetVars);const wideFlanges="``"+`name|weight|A|d|bf|tw|Ix|Sx|rx\n|lbf/ft|in^2|in|in|in|in^4|in^3|in\nW14X90|90|26.5|14|14.5|0.44|999|143|6.14\nW12X65|65|19.1|12.1|12|0.39|533|87.9|5.28\nW10X49|49|14.4|10|10|0.34|272|54.6|4.35\nW8X31|31|9.13|8|8|0.285|110|27.5|3.47\nW8X18|18|5.26|8.14|5.25|0.23|61.9|15.2|3.43\nW6X15|15|4.43|5.99|5.99|0.23|29.1|9.72|2.56\nW4X13|13|3.83|4.16|4.06|0.28|11.3|5.46|1.72`+"``";hurmet.calculate(`wideFlanges =`+wideFlanges,hurmetVars);const dict=`{"#4": 0.22, "#5": 0.31} 'in2'`;hurmet.calculate(`barArea =`+dict,hurmetVars);const module="E = 29000 'ksi'\n\nv = [4, 6, 8]\n\nfunction multiply(a, b)\n  return a × b\nend";hurmetVars["mod"]=hurmet.scanModule(module);const renderMath=(e,t)=>{let r=e.toString();const n=selectedText();if(n.length===0){hurmet.autoCorrect(e,textBeforeCursor(editor),textAfterCursor(editor))}r=e.toString();const a=document.getElementById("formatBox").value.trim();hurmetVars.format={value:a};const o=hurmet.calculate(r,hurmetVars);try{if(typeof o==="object"&&o.dtype&&o.dtype===hurmet.dt.DRAWING){t.appendChild(hurmet.Draw.renderSVG(o.resultdisplay))}else{temml.render(o,t,{trust:e=>e.command==="\\class"&&e.class==="special-fraction",wrap:"="})}}catch(e){while(t.lastChild){t.removeChild(t.lastChild)}const r=document.createTextNode(e.message);const n=document.createElement("span");n.appendChild(r);t.appendChild(n);n.setAttribute("class","errorMessage")}};const prompts={"statement-container":"2 + 2 = ?","arithmetic-container":"2 × 4 + 3^2/7 = ?","variable-container":"b = 2 L = ?","greek-container":"theta + x dot + f''","q-container":"2 × 3.1 'm' = ?? ft",markup:"(a, b; c, d)","auto-correct":"theta hat <= bb M xx sqrt 3 . f''","display-selectors":"b = 2 L = ?? ft","accessor-container":"𝐕[2] = ?","calculation-forms":"x = 2 A = ?",identifiers:"f_c′ = 4500","identi-correct":"bb M != h_sub +  theta bar + f''","data-types":`"a string" ≠ 2.3`,"number-rr":"33 / 2.45 × 3.2% + 3 7/8 + 3.1e1 = ?","complex-number":"4∠30° = ??",unit:"9.807 'm/s²' = ?? ft/s²",matrix:"[2.1; -15.3]","matrix-mult":"[1, 2, 3] [3; 2; 1] = ?","data-frame":"wideFlanges.W10X49.A = ?? in2",dictionary:'A = barArea["#4"] = ?',functions:"sin(π/6) = ?","if-expressions":`x = {1 if 12 < 30; 0 otherwise} = ?`,"unit-aware-calculations":"4 'ft' + 3 'yards' = ?? m","remote-modules":"mod.E = ?? psi"};const editor=document.getElementById("demo-input");const jar=codeJar(editor,false);const demoOutput=document.getElementById("demo-output");editor.addEventListener("input",(e=>{renderMath(jar,demoOutput)}));jar.updateCode("Hi!");renderMath(jar,demoOutput);var observer=new IntersectionObserver((function(e){for(const t of e){if(t.intersectionRatio===1){jar.updateCode(prompts[t.target.id]);renderMath(jar,demoOutput);break}}}),{root:null,rootMargin:"0px",threshold:1});observer.observe(document.getElementById("statement-container"));observer.observe(document.getElementById("arithmetic-container"));observer.observe(document.getElementById("variable-container"));observer.observe(document.getElementById("greek-container"));observer.observe(document.getElementById("q-container"));observer.observe(document.getElementById("markup"));observer.observe(document.getElementById("auto-correct"));observer.observe(document.getElementById("display-selectors"));observer.observe(document.getElementById("accessor-container"));observer.observe(document.getElementById("calculation-forms"));observer.observe(document.getElementById("identifiers"));observer.observe(document.getElementById("identi-correct"));observer.observe(document.getElementById("data-types"));observer.observe(document.getElementById("number-rr"));observer.observe(document.getElementById("complex-number"));observer.observe(document.getElementById("unit"));observer.observe(document.getElementById("matrix"));observer.observe(document.getElementById("matrix-mult"));observer.observe(document.getElementById("data-frame"));observer.observe(document.getElementById("functions"));observer.observe(document.getElementById("if-expressions"));observer.observe(document.getElementById("unit-aware-calculations"));observer.observe(document.getElementById("remote-modules"));